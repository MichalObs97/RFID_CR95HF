
cr95test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006934  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fac  080069f4  080069f4  000169f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099a0  080099a0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  080099a0  080099a0  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080099a0  080099a0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099a0  080099a0  000199a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099a4  080099a4  000199a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080099a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f4  2000008c  08009a34  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000780  08009a34  00020780  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efff  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000271f  00000000  00000000  0002f0b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  000317d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab0  00000000  00000000  00032368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000117ba  00000000  00000000  00032e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe1a  00000000  00000000  000445d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005fae4  00000000  00000000  000543ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b3ed0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034e8  00000000  00000000  000b3f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000008c 	.word	0x2000008c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080069dc 	.word	0x080069dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000090 	.word	0x20000090
 8000104:	080069dc 	.word	0x080069dc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <cr95_wakeup>:

    return resp;
}
*/
void cr95_wakeup(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
	const uint8_t wakeup = 0;
 800024a:	1dfb      	adds	r3, r7, #7
 800024c:	2200      	movs	r2, #0
 800024e:	701a      	strb	r2, [r3, #0]
	cr95write(&wakeup, 1);
 8000250:	1dfb      	adds	r3, r7, #7
 8000252:	2101      	movs	r1, #1
 8000254:	0018      	movs	r0, r3
 8000256:	f000 fe0b 	bl	8000e70 <cr95write>
	printf("WAKEUP sent\n");
 800025a:	4b04      	ldr	r3, [pc, #16]	; (800026c <cr95_wakeup+0x28>)
 800025c:	0018      	movs	r0, r3
 800025e:	f005 f911 	bl	8005484 <puts>
}
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	46bd      	mov	sp, r7
 8000266:	b002      	add	sp, #8
 8000268:	bd80      	pop	{r7, pc}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	080069f4 	.word	0x080069f4

08000270 <cr95_idle>:

void cr95_idle(uint8_t mode)
{
 8000270:	b5b0      	push	{r4, r5, r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0
 8000276:	0002      	movs	r2, r0
 8000278:	1dfb      	adds	r3, r7, #7
 800027a:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_idle[] =  		{ 0x07, 0x0E, 0x0A, 0x21, 0x00, 0x79, 0x01, 0x18, 0x00, 0x20, 0x60, 0x60, 0x00, 0x00, 0x3F, 0x08 };
 800027c:	2108      	movs	r1, #8
 800027e:	187b      	adds	r3, r7, r1
 8000280:	4a15      	ldr	r2, [pc, #84]	; (80002d8 <cr95_idle+0x68>)
 8000282:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000284:	c331      	stmia	r3!, {r0, r4, r5}
 8000286:	6812      	ldr	r2, [r2, #0]
 8000288:	601a      	str	r2, [r3, #0]

	if (mode == 1) cmd_idle[2] = 0x08;   // Hibernate
 800028a:	1dfb      	adds	r3, r7, #7
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b01      	cmp	r3, #1
 8000290:	d103      	bne.n	800029a <cr95_idle+0x2a>
 8000292:	187b      	adds	r3, r7, r1
 8000294:	2208      	movs	r2, #8
 8000296:	709a      	strb	r2, [r3, #2]
 8000298:	e003      	b.n	80002a2 <cr95_idle+0x32>
	else cmd_idle[2] = 0x0A;             // TagDetect
 800029a:	2308      	movs	r3, #8
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	220a      	movs	r2, #10
 80002a0:	709a      	strb	r2, [r3, #2]

	cmd_idle[12] = DacDataRef - 8;
 80002a2:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <cr95_idle+0x6c>)
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	3b08      	subs	r3, #8
 80002a8:	b2da      	uxtb	r2, r3
 80002aa:	2108      	movs	r1, #8
 80002ac:	187b      	adds	r3, r7, r1
 80002ae:	731a      	strb	r2, [r3, #12]
	cmd_idle[13] = DacDataRef + 8;
 80002b0:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <cr95_idle+0x6c>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	3308      	adds	r3, #8
 80002b6:	b2da      	uxtb	r2, r3
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_idle, sizeof(cmd_idle));
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2110      	movs	r1, #16
 80002c0:	0018      	movs	r0, r3
 80002c2:	f000 fdd5 	bl	8000e70 <cr95write>
	printf("IDLE sent\n");
 80002c6:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <cr95_idle+0x70>)
 80002c8:	0018      	movs	r0, r3
 80002ca:	f005 f8db 	bl	8005484 <puts>
}
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	46bd      	mov	sp, r7
 80002d2:	b006      	add	sp, #24
 80002d4:	bdb0      	pop	{r4, r5, r7, pc}
 80002d6:	46c0      	nop			; (mov r8, r8)
 80002d8:	08006a0c 	.word	0x08006a0c
 80002dc:	200000a8 	.word	0x200000a8
 80002e0:	08006a00 	.word	0x08006a00

080002e4 <cr95_init14>:


void cr95_init14(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b086      	sub	sp, #24
 80002e8:	af00      	add	r7, sp, #0
	const uint8_t cmd_init1[] = { 0x02, 0x02, 0x02, 0x00 };
 80002ea:	2014      	movs	r0, #20
 80002ec:	183b      	adds	r3, r7, r0
 80002ee:	4a26      	ldr	r2, [pc, #152]	; (8000388 <cr95_init14+0xa4>)
 80002f0:	601a      	str	r2, [r3, #0]
	const uint8_t cmd_init2[] = { 0x09, 0x04, 0x68, 0x01, 0x01, 0xD1 };
 80002f2:	230c      	movs	r3, #12
 80002f4:	18fb      	adds	r3, r7, r3
 80002f6:	4a25      	ldr	r2, [pc, #148]	; (800038c <cr95_init14+0xa8>)
 80002f8:	6811      	ldr	r1, [r2, #0]
 80002fa:	6019      	str	r1, [r3, #0]
 80002fc:	8892      	ldrh	r2, [r2, #4]
 80002fe:	809a      	strh	r2, [r3, #4]
	const uint8_t cmd_init3[] = { 0x09, 0x04, 0x3A, 0x00, 0x58, 0x04 };
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	4a23      	ldr	r2, [pc, #140]	; (8000390 <cr95_init14+0xac>)
 8000304:	6811      	ldr	r1, [r2, #0]
 8000306:	6019      	str	r1, [r3, #0]
 8000308:	8892      	ldrh	r2, [r2, #4]
 800030a:	809a      	strh	r2, [r3, #4]


	cr95write(cmd_init1, sizeof(cmd_init1));
 800030c:	183b      	adds	r3, r7, r0
 800030e:	2104      	movs	r1, #4
 8000310:	0018      	movs	r0, r3
 8000312:	f000 fdad 	bl	8000e70 <cr95write>
	printf("Initiation of 14 %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 8000316:	2100      	movs	r1, #0
 8000318:	2000      	movs	r0, #0
 800031a:	f000 fdbf 	bl	8000e9c <cr95read>
 800031e:	1e03      	subs	r3, r0, #0
 8000320:	d101      	bne.n	8000326 <cr95_init14+0x42>
 8000322:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <cr95_init14+0xb0>)
 8000324:	e000      	b.n	8000328 <cr95_init14+0x44>
 8000326:	4b1c      	ldr	r3, [pc, #112]	; (8000398 <cr95_init14+0xb4>)
 8000328:	4a1c      	ldr	r2, [pc, #112]	; (800039c <cr95_init14+0xb8>)
 800032a:	0019      	movs	r1, r3
 800032c:	0010      	movs	r0, r2
 800032e:	f005 f809 	bl	8005344 <iprintf>
	cr95write(cmd_init2, sizeof(cmd_init2));
 8000332:	230c      	movs	r3, #12
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	2106      	movs	r1, #6
 8000338:	0018      	movs	r0, r3
 800033a:	f000 fd99 	bl	8000e70 <cr95write>
	printf(" %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 800033e:	2100      	movs	r1, #0
 8000340:	2000      	movs	r0, #0
 8000342:	f000 fdab 	bl	8000e9c <cr95read>
 8000346:	1e03      	subs	r3, r0, #0
 8000348:	d101      	bne.n	800034e <cr95_init14+0x6a>
 800034a:	4b12      	ldr	r3, [pc, #72]	; (8000394 <cr95_init14+0xb0>)
 800034c:	e000      	b.n	8000350 <cr95_init14+0x6c>
 800034e:	4b12      	ldr	r3, [pc, #72]	; (8000398 <cr95_init14+0xb4>)
 8000350:	4a13      	ldr	r2, [pc, #76]	; (80003a0 <cr95_init14+0xbc>)
 8000352:	0019      	movs	r1, r3
 8000354:	0010      	movs	r0, r2
 8000356:	f004 fff5 	bl	8005344 <iprintf>
	cr95write(cmd_init3, sizeof(cmd_init3));
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	2106      	movs	r1, #6
 800035e:	0018      	movs	r0, r3
 8000360:	f000 fd86 	bl	8000e70 <cr95write>
	printf(" %s\n", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 8000364:	2100      	movs	r1, #0
 8000366:	2000      	movs	r0, #0
 8000368:	f000 fd98 	bl	8000e9c <cr95read>
 800036c:	1e03      	subs	r3, r0, #0
 800036e:	d101      	bne.n	8000374 <cr95_init14+0x90>
 8000370:	4b08      	ldr	r3, [pc, #32]	; (8000394 <cr95_init14+0xb0>)
 8000372:	e000      	b.n	8000376 <cr95_init14+0x92>
 8000374:	4b08      	ldr	r3, [pc, #32]	; (8000398 <cr95_init14+0xb4>)
 8000376:	4a0b      	ldr	r2, [pc, #44]	; (80003a4 <cr95_init14+0xc0>)
 8000378:	0019      	movs	r1, r3
 800037a:	0010      	movs	r0, r2
 800037c:	f004 ffe2 	bl	8005344 <iprintf>
}
 8000380:	46c0      	nop			; (mov r8, r8)
 8000382:	46bd      	mov	sp, r7
 8000384:	b006      	add	sp, #24
 8000386:	bd80      	pop	{r7, pc}
 8000388:	00020202 	.word	0x00020202
 800038c:	08006a44 	.word	0x08006a44
 8000390:	08006a4c 	.word	0x08006a4c
 8000394:	08006a1c 	.word	0x08006a1c
 8000398:	08006a20 	.word	0x08006a20
 800039c:	08006a24 	.word	0x08006a24
 80003a0:	08006a38 	.word	0x08006a38
 80003a4:	08006a3c 	.word	0x08006a3c

080003a8 <cr95_init15>:

void cr95_init15(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0
	const uint8_t cmd_init1_15[] = { 0x02, 0x02, 0x01, 0x03 };
 80003ae:	200c      	movs	r0, #12
 80003b0:	183b      	adds	r3, r7, r0
 80003b2:	4a19      	ldr	r2, [pc, #100]	; (8000418 <cr95_init15+0x70>)
 80003b4:	601a      	str	r2, [r3, #0]
	const uint8_t cmd_init2_15[] = { 0x09, 0x04, 0x68, 0x01, 0x01, 0xD0 };
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	4a18      	ldr	r2, [pc, #96]	; (800041c <cr95_init15+0x74>)
 80003ba:	6811      	ldr	r1, [r2, #0]
 80003bc:	6019      	str	r1, [r3, #0]
 80003be:	8892      	ldrh	r2, [r2, #4]
 80003c0:	809a      	strh	r2, [r3, #4]

	cr95write(cmd_init1_15, sizeof(cmd_init1_15));
 80003c2:	183b      	adds	r3, r7, r0
 80003c4:	2104      	movs	r1, #4
 80003c6:	0018      	movs	r0, r3
 80003c8:	f000 fd52 	bl	8000e70 <cr95write>
	printf("Initiation of 15 %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 80003cc:	2100      	movs	r1, #0
 80003ce:	2000      	movs	r0, #0
 80003d0:	f000 fd64 	bl	8000e9c <cr95read>
 80003d4:	1e03      	subs	r3, r0, #0
 80003d6:	d101      	bne.n	80003dc <cr95_init15+0x34>
 80003d8:	4b11      	ldr	r3, [pc, #68]	; (8000420 <cr95_init15+0x78>)
 80003da:	e000      	b.n	80003de <cr95_init15+0x36>
 80003dc:	4b11      	ldr	r3, [pc, #68]	; (8000424 <cr95_init15+0x7c>)
 80003de:	4a12      	ldr	r2, [pc, #72]	; (8000428 <cr95_init15+0x80>)
 80003e0:	0019      	movs	r1, r3
 80003e2:	0010      	movs	r0, r2
 80003e4:	f004 ffae 	bl	8005344 <iprintf>
	cr95write(cmd_init2_15, sizeof(cmd_init2_15));
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2106      	movs	r1, #6
 80003ec:	0018      	movs	r0, r3
 80003ee:	f000 fd3f 	bl	8000e70 <cr95write>
	printf(" %s\n", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 80003f2:	2100      	movs	r1, #0
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 fd51 	bl	8000e9c <cr95read>
 80003fa:	1e03      	subs	r3, r0, #0
 80003fc:	d101      	bne.n	8000402 <cr95_init15+0x5a>
 80003fe:	4b08      	ldr	r3, [pc, #32]	; (8000420 <cr95_init15+0x78>)
 8000400:	e000      	b.n	8000404 <cr95_init15+0x5c>
 8000402:	4b08      	ldr	r3, [pc, #32]	; (8000424 <cr95_init15+0x7c>)
 8000404:	4a09      	ldr	r2, [pc, #36]	; (800042c <cr95_init15+0x84>)
 8000406:	0019      	movs	r1, r3
 8000408:	0010      	movs	r0, r2
 800040a:	f004 ff9b 	bl	8005344 <iprintf>
}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	46bd      	mov	sp, r7
 8000412:	b004      	add	sp, #16
 8000414:	bd80      	pop	{r7, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	03010202 	.word	0x03010202
 800041c:	08006a68 	.word	0x08006a68
 8000420:	08006a1c 	.word	0x08006a1c
 8000424:	08006a20 	.word	0x08006a20
 8000428:	08006a54 	.word	0x08006a54
 800042c:	08006a3c 	.word	0x08006a3c

08000430 <cr95_read>:

void cr95_read(void)
{
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	46ce      	mov	lr, r9
 8000434:	4647      	mov	r7, r8
 8000436:	b580      	push	{r7, lr}
 8000438:	b09d      	sub	sp, #116	; 0x74
 800043a:	af06      	add	r7, sp, #24
	const uint8_t cmd_reqa[] =  { 0x04, 0x02, 0x26, 0x07 };
 800043c:	204c      	movs	r0, #76	; 0x4c
 800043e:	183b      	adds	r3, r7, r0
 8000440:	4ae1      	ldr	r2, [pc, #900]	; (80007c8 <cr95_read+0x398>)
 8000442:	601a      	str	r2, [r3, #0]
	const uint8_t cmd_acl1[] =  { 0x04, 0x03, 0x93, 0x20, 0x08 };
 8000444:	2344      	movs	r3, #68	; 0x44
 8000446:	18fb      	adds	r3, r7, r3
 8000448:	4ae0      	ldr	r2, [pc, #896]	; (80007cc <cr95_read+0x39c>)
 800044a:	6811      	ldr	r1, [r2, #0]
 800044c:	6019      	str	r1, [r3, #0]
 800044e:	7912      	ldrb	r2, [r2, #4]
 8000450:	711a      	strb	r2, [r3, #4]
	const uint8_t cmd_acl2[] =  { 0x04, 0x03, 0x95, 0x20, 0x08 };
 8000452:	233c      	movs	r3, #60	; 0x3c
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	4ade      	ldr	r2, [pc, #888]	; (80007d0 <cr95_read+0x3a0>)
 8000458:	6811      	ldr	r1, [r2, #0]
 800045a:	6019      	str	r1, [r3, #0]
 800045c:	7912      	ldrb	r2, [r2, #4]
 800045e:	711a      	strb	r2, [r3, #4]

	uint8_t data[8];
	uint8_t saved_data[10] =  { 0x04, 0x08, 0x93, 0x70, 0x00, 0x00, 0x00, 0x00,  0x00, 0x28};
 8000460:	2328      	movs	r3, #40	; 0x28
 8000462:	18fb      	adds	r3, r7, r3
 8000464:	4adb      	ldr	r2, [pc, #876]	; (80007d4 <cr95_read+0x3a4>)
 8000466:	ca12      	ldmia	r2!, {r1, r4}
 8000468:	c312      	stmia	r3!, {r1, r4}
 800046a:	8812      	ldrh	r2, [r2, #0]
 800046c:	801a      	strh	r2, [r3, #0]
	char uid[32];
	uint8_t len;


	cr95write(cmd_reqa, sizeof(cmd_reqa));
 800046e:	183b      	adds	r3, r7, r0
 8000470:	2104      	movs	r1, #4
 8000472:	0018      	movs	r0, r3
 8000474:	f000 fcfc 	bl	8000e70 <cr95write>
	if (cr95read(data, &len) == 0x80) {
 8000478:	1dfa      	adds	r2, r7, #7
 800047a:	2334      	movs	r3, #52	; 0x34
 800047c:	18fb      	adds	r3, r7, r3
 800047e:	0011      	movs	r1, r2
 8000480:	0018      	movs	r0, r3
 8000482:	f000 fd0b 	bl	8000e9c <cr95read>
 8000486:	0003      	movs	r3, r0
 8000488:	2b80      	cmp	r3, #128	; 0x80
 800048a:	d000      	beq.n	800048e <cr95_read+0x5e>
 800048c:	e222      	b.n	80008d4 <cr95_read+0x4a4>
		printf("ATQA =");
 800048e:	4bd2      	ldr	r3, [pc, #840]	; (80007d8 <cr95_read+0x3a8>)
 8000490:	0018      	movs	r0, r3
 8000492:	f004 ff57 	bl	8005344 <iprintf>
		for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8000496:	2357      	movs	r3, #87	; 0x57
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	2200      	movs	r2, #0
 800049c:	701a      	strb	r2, [r3, #0]
 800049e:	e010      	b.n	80004c2 <cr95_read+0x92>
 80004a0:	2457      	movs	r4, #87	; 0x57
 80004a2:	193b      	adds	r3, r7, r4
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2234      	movs	r2, #52	; 0x34
 80004a8:	18ba      	adds	r2, r7, r2
 80004aa:	5cd3      	ldrb	r3, [r2, r3]
 80004ac:	001a      	movs	r2, r3
 80004ae:	4bcb      	ldr	r3, [pc, #812]	; (80007dc <cr95_read+0x3ac>)
 80004b0:	0011      	movs	r1, r2
 80004b2:	0018      	movs	r0, r3
 80004b4:	f004 ff46 	bl	8005344 <iprintf>
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	781a      	ldrb	r2, [r3, #0]
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	3201      	adds	r2, #1
 80004c0:	701a      	strb	r2, [r3, #0]
 80004c2:	1dfb      	adds	r3, r7, #7
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	2257      	movs	r2, #87	; 0x57
 80004c8:	18ba      	adds	r2, r7, r2
 80004ca:	7812      	ldrb	r2, [r2, #0]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	d3e7      	bcc.n	80004a0 <cr95_read+0x70>
		printf("\n");
 80004d0:	200a      	movs	r0, #10
 80004d2:	f004 ff51 	bl	8005378 <putchar>

    	sprintf(uid, "UID=");
 80004d6:	4ac2      	ldr	r2, [pc, #776]	; (80007e0 <cr95_read+0x3b0>)
 80004d8:	2308      	movs	r3, #8
 80004da:	18fb      	adds	r3, r7, r3
 80004dc:	0011      	movs	r1, r2
 80004de:	0018      	movs	r0, r3
 80004e0:	f004 ffda 	bl	8005498 <siprintf>

    	cr95write(cmd_acl1, sizeof(cmd_acl1));
 80004e4:	2344      	movs	r3, #68	; 0x44
 80004e6:	18fb      	adds	r3, r7, r3
 80004e8:	2105      	movs	r1, #5
 80004ea:	0018      	movs	r0, r3
 80004ec:	f000 fcc0 	bl	8000e70 <cr95write>
    	if (cr95read(data, &len) == 0x80 && len == 8 && (data[0]^data[1]^data[2]^data[3]) == data[4]) {
 80004f0:	1dfa      	adds	r2, r7, #7
 80004f2:	2434      	movs	r4, #52	; 0x34
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	0011      	movs	r1, r2
 80004f8:	0018      	movs	r0, r3
 80004fa:	f000 fccf 	bl	8000e9c <cr95read>
 80004fe:	0003      	movs	r3, r0
 8000500:	2b80      	cmp	r3, #128	; 0x80
 8000502:	d000      	beq.n	8000506 <cr95_read+0xd6>
 8000504:	e1de      	b.n	80008c4 <cr95_read+0x494>
 8000506:	1dfb      	adds	r3, r7, #7
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b08      	cmp	r3, #8
 800050c:	d000      	beq.n	8000510 <cr95_read+0xe0>
 800050e:	e1d9      	b.n	80008c4 <cr95_read+0x494>
 8000510:	0021      	movs	r1, r4
 8000512:	187b      	adds	r3, r7, r1
 8000514:	781a      	ldrb	r2, [r3, #0]
 8000516:	187b      	adds	r3, r7, r1
 8000518:	785b      	ldrb	r3, [r3, #1]
 800051a:	4053      	eors	r3, r2
 800051c:	b2da      	uxtb	r2, r3
 800051e:	187b      	adds	r3, r7, r1
 8000520:	789b      	ldrb	r3, [r3, #2]
 8000522:	4053      	eors	r3, r2
 8000524:	b2da      	uxtb	r2, r3
 8000526:	187b      	adds	r3, r7, r1
 8000528:	78db      	ldrb	r3, [r3, #3]
 800052a:	4053      	eors	r3, r2
 800052c:	b2da      	uxtb	r2, r3
 800052e:	187b      	adds	r3, r7, r1
 8000530:	791b      	ldrb	r3, [r3, #4]
 8000532:	429a      	cmp	r2, r3
 8000534:	d000      	beq.n	8000538 <cr95_read+0x108>
 8000536:	e1c5      	b.n	80008c4 <cr95_read+0x494>
    		printf("UID CL1 =");
 8000538:	4baa      	ldr	r3, [pc, #680]	; (80007e4 <cr95_read+0x3b4>)
 800053a:	0018      	movs	r0, r3
 800053c:	f004 ff02 	bl	8005344 <iprintf>
    		for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8000540:	2356      	movs	r3, #86	; 0x56
 8000542:	18fb      	adds	r3, r7, r3
 8000544:	2200      	movs	r2, #0
 8000546:	701a      	strb	r2, [r3, #0]
 8000548:	e010      	b.n	800056c <cr95_read+0x13c>
 800054a:	2456      	movs	r4, #86	; 0x56
 800054c:	193b      	adds	r3, r7, r4
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	2234      	movs	r2, #52	; 0x34
 8000552:	18ba      	adds	r2, r7, r2
 8000554:	5cd3      	ldrb	r3, [r2, r3]
 8000556:	001a      	movs	r2, r3
 8000558:	4ba0      	ldr	r3, [pc, #640]	; (80007dc <cr95_read+0x3ac>)
 800055a:	0011      	movs	r1, r2
 800055c:	0018      	movs	r0, r3
 800055e:	f004 fef1 	bl	8005344 <iprintf>
 8000562:	193b      	adds	r3, r7, r4
 8000564:	781a      	ldrb	r2, [r3, #0]
 8000566:	193b      	adds	r3, r7, r4
 8000568:	3201      	adds	r2, #1
 800056a:	701a      	strb	r2, [r3, #0]
 800056c:	1dfb      	adds	r3, r7, #7
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2256      	movs	r2, #86	; 0x56
 8000572:	18ba      	adds	r2, r7, r2
 8000574:	7812      	ldrb	r2, [r2, #0]
 8000576:	429a      	cmp	r2, r3
 8000578:	d3e7      	bcc.n	800054a <cr95_read+0x11a>
    		printf("\n");
 800057a:	200a      	movs	r0, #10
 800057c:	f004 fefc 	bl	8005378 <putchar>
    		saved_data[4] = data[0]; saved_data[5] = data[1]; saved_data[6] = data[2]; saved_data[7] = data[3]; saved_data[8] = data[4];
 8000580:	2434      	movs	r4, #52	; 0x34
 8000582:	193b      	adds	r3, r7, r4
 8000584:	781a      	ldrb	r2, [r3, #0]
 8000586:	2528      	movs	r5, #40	; 0x28
 8000588:	197b      	adds	r3, r7, r5
 800058a:	711a      	strb	r2, [r3, #4]
 800058c:	193b      	adds	r3, r7, r4
 800058e:	785a      	ldrb	r2, [r3, #1]
 8000590:	197b      	adds	r3, r7, r5
 8000592:	715a      	strb	r2, [r3, #5]
 8000594:	193b      	adds	r3, r7, r4
 8000596:	789a      	ldrb	r2, [r3, #2]
 8000598:	197b      	adds	r3, r7, r5
 800059a:	719a      	strb	r2, [r3, #6]
 800059c:	193b      	adds	r3, r7, r4
 800059e:	78da      	ldrb	r2, [r3, #3]
 80005a0:	197b      	adds	r3, r7, r5
 80005a2:	71da      	strb	r2, [r3, #7]
 80005a4:	193b      	adds	r3, r7, r4
 80005a6:	791a      	ldrb	r2, [r3, #4]
 80005a8:	197b      	adds	r3, r7, r5
 80005aa:	721a      	strb	r2, [r3, #8]

			if (data[0] == 0x88) {
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b88      	cmp	r3, #136	; 0x88
 80005b2:	d000      	beq.n	80005b6 <cr95_read+0x186>
 80005b4:	e128      	b.n	8000808 <cr95_read+0x3d8>
				printf("Cascade bit detected, longer UID!\n");
 80005b6:	4b8c      	ldr	r3, [pc, #560]	; (80007e8 <cr95_read+0x3b8>)
 80005b8:	0018      	movs	r0, r3
 80005ba:	f004 ff63 	bl	8005484 <puts>
				cr95write(saved_data, sizeof(saved_data));
 80005be:	197b      	adds	r3, r7, r5
 80005c0:	210a      	movs	r1, #10
 80005c2:	0018      	movs	r0, r3
 80005c4:	f000 fc54 	bl	8000e70 <cr95write>
				if (cr95read(data, &len) == 0x80) {
 80005c8:	1dfa      	adds	r2, r7, #7
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	0011      	movs	r1, r2
 80005ce:	0018      	movs	r0, r3
 80005d0:	f000 fc64 	bl	8000e9c <cr95read>
 80005d4:	0003      	movs	r3, r0
 80005d6:	2b80      	cmp	r3, #128	; 0x80
 80005d8:	d123      	bne.n	8000622 <cr95_read+0x1f2>
					printf("SEL1 Response =");
 80005da:	4b84      	ldr	r3, [pc, #528]	; (80007ec <cr95_read+0x3bc>)
 80005dc:	0018      	movs	r0, r3
 80005de:	f004 feb1 	bl	8005344 <iprintf>
					for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 80005e2:	2355      	movs	r3, #85	; 0x55
 80005e4:	18fb      	adds	r3, r7, r3
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]
 80005ea:	e010      	b.n	800060e <cr95_read+0x1de>
 80005ec:	2455      	movs	r4, #85	; 0x55
 80005ee:	193b      	adds	r3, r7, r4
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2234      	movs	r2, #52	; 0x34
 80005f4:	18ba      	adds	r2, r7, r2
 80005f6:	5cd3      	ldrb	r3, [r2, r3]
 80005f8:	001a      	movs	r2, r3
 80005fa:	4b78      	ldr	r3, [pc, #480]	; (80007dc <cr95_read+0x3ac>)
 80005fc:	0011      	movs	r1, r2
 80005fe:	0018      	movs	r0, r3
 8000600:	f004 fea0 	bl	8005344 <iprintf>
 8000604:	193b      	adds	r3, r7, r4
 8000606:	781a      	ldrb	r2, [r3, #0]
 8000608:	193b      	adds	r3, r7, r4
 800060a:	3201      	adds	r2, #1
 800060c:	701a      	strb	r2, [r3, #0]
 800060e:	1dfb      	adds	r3, r7, #7
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2255      	movs	r2, #85	; 0x55
 8000614:	18ba      	adds	r2, r7, r2
 8000616:	7812      	ldrb	r2, [r2, #0]
 8000618:	429a      	cmp	r2, r3
 800061a:	d3e7      	bcc.n	80005ec <cr95_read+0x1bc>
					printf("\n");
 800061c:	200a      	movs	r0, #10
 800061e:	f004 feab 	bl	8005378 <putchar>
				}

				if (data[0] != 0x08) {
 8000622:	2434      	movs	r4, #52	; 0x34
 8000624:	193b      	adds	r3, r7, r4
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b08      	cmp	r3, #8
 800062a:	d100      	bne.n	800062e <cr95_read+0x1fe>
 800062c:	e0c4      	b.n	80007b8 <cr95_read+0x388>
				   cr95write(cmd_acl2, sizeof(cmd_acl2));
 800062e:	233c      	movs	r3, #60	; 0x3c
 8000630:	18fb      	adds	r3, r7, r3
 8000632:	2105      	movs	r1, #5
 8000634:	0018      	movs	r0, r3
 8000636:	f000 fc1b 	bl	8000e70 <cr95write>
				   if (cr95read(data, &len) == 0x80 && (data[0]^data[1]^data[2]^data[3]) == data[4]) {
 800063a:	1dfa      	adds	r2, r7, #7
 800063c:	193b      	adds	r3, r7, r4
 800063e:	0011      	movs	r1, r2
 8000640:	0018      	movs	r0, r3
 8000642:	f000 fc2b 	bl	8000e9c <cr95read>
 8000646:	0003      	movs	r3, r0
 8000648:	2b80      	cmp	r3, #128	; 0x80
 800064a:	d000      	beq.n	800064e <cr95_read+0x21e>
 800064c:	e0ac      	b.n	80007a8 <cr95_read+0x378>
 800064e:	0021      	movs	r1, r4
 8000650:	187b      	adds	r3, r7, r1
 8000652:	781a      	ldrb	r2, [r3, #0]
 8000654:	187b      	adds	r3, r7, r1
 8000656:	785b      	ldrb	r3, [r3, #1]
 8000658:	4053      	eors	r3, r2
 800065a:	b2da      	uxtb	r2, r3
 800065c:	187b      	adds	r3, r7, r1
 800065e:	789b      	ldrb	r3, [r3, #2]
 8000660:	4053      	eors	r3, r2
 8000662:	b2da      	uxtb	r2, r3
 8000664:	187b      	adds	r3, r7, r1
 8000666:	78db      	ldrb	r3, [r3, #3]
 8000668:	4053      	eors	r3, r2
 800066a:	b2da      	uxtb	r2, r3
 800066c:	187b      	adds	r3, r7, r1
 800066e:	791b      	ldrb	r3, [r3, #4]
 8000670:	429a      	cmp	r2, r3
 8000672:	d000      	beq.n	8000676 <cr95_read+0x246>
 8000674:	e098      	b.n	80007a8 <cr95_read+0x378>
				    	printf("UID CL2 =");
 8000676:	4b5e      	ldr	r3, [pc, #376]	; (80007f0 <cr95_read+0x3c0>)
 8000678:	0018      	movs	r0, r3
 800067a:	f004 fe63 	bl	8005344 <iprintf>
				    	for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 800067e:	2354      	movs	r3, #84	; 0x54
 8000680:	18fb      	adds	r3, r7, r3
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]
 8000686:	e010      	b.n	80006aa <cr95_read+0x27a>
 8000688:	2454      	movs	r4, #84	; 0x54
 800068a:	193b      	adds	r3, r7, r4
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2234      	movs	r2, #52	; 0x34
 8000690:	18ba      	adds	r2, r7, r2
 8000692:	5cd3      	ldrb	r3, [r2, r3]
 8000694:	001a      	movs	r2, r3
 8000696:	4b51      	ldr	r3, [pc, #324]	; (80007dc <cr95_read+0x3ac>)
 8000698:	0011      	movs	r1, r2
 800069a:	0018      	movs	r0, r3
 800069c:	f004 fe52 	bl	8005344 <iprintf>
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	781a      	ldrb	r2, [r3, #0]
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	3201      	adds	r2, #1
 80006a8:	701a      	strb	r2, [r3, #0]
 80006aa:	1dfb      	adds	r3, r7, #7
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	2254      	movs	r2, #84	; 0x54
 80006b0:	18ba      	adds	r2, r7, r2
 80006b2:	7812      	ldrb	r2, [r2, #0]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d3e7      	bcc.n	8000688 <cr95_read+0x258>
				    	printf("\n");
 80006b8:	200a      	movs	r0, #10
 80006ba:	f004 fe5d 	bl	8005378 <putchar>
				    	sprintf(uid, "%s%X%X%X%X%X%X%X", uid, saved_data[5], saved_data[6], saved_data[7], data[0], data[1], data[2], data[3]);
 80006be:	2128      	movs	r1, #40	; 0x28
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	795b      	ldrb	r3, [r3, #5]
 80006c4:	4699      	mov	r9, r3
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	799b      	ldrb	r3, [r3, #6]
 80006ca:	001c      	movs	r4, r3
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	79db      	ldrb	r3, [r3, #7]
 80006d0:	001d      	movs	r5, r3
 80006d2:	2234      	movs	r2, #52	; 0x34
 80006d4:	18bb      	adds	r3, r7, r2
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	001e      	movs	r6, r3
 80006da:	18bb      	adds	r3, r7, r2
 80006dc:	785b      	ldrb	r3, [r3, #1]
 80006de:	469c      	mov	ip, r3
 80006e0:	18bb      	adds	r3, r7, r2
 80006e2:	789b      	ldrb	r3, [r3, #2]
 80006e4:	4698      	mov	r8, r3
 80006e6:	18bb      	adds	r3, r7, r2
 80006e8:	78db      	ldrb	r3, [r3, #3]
 80006ea:	2008      	movs	r0, #8
 80006ec:	183a      	adds	r2, r7, r0
 80006ee:	4941      	ldr	r1, [pc, #260]	; (80007f4 <cr95_read+0x3c4>)
 80006f0:	1838      	adds	r0, r7, r0
 80006f2:	9305      	str	r3, [sp, #20]
 80006f4:	4643      	mov	r3, r8
 80006f6:	9304      	str	r3, [sp, #16]
 80006f8:	4663      	mov	r3, ip
 80006fa:	9303      	str	r3, [sp, #12]
 80006fc:	9602      	str	r6, [sp, #8]
 80006fe:	9501      	str	r5, [sp, #4]
 8000700:	9400      	str	r4, [sp, #0]
 8000702:	464b      	mov	r3, r9
 8000704:	f004 fec8 	bl	8005498 <siprintf>
				    	saved_data[2] = 0x95; saved_data[4] = data[0]; saved_data[5] = data[1]; saved_data[6] = data[2]; saved_data[7] = data[3]; saved_data[8] = data[4];
 8000708:	2128      	movs	r1, #40	; 0x28
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2295      	movs	r2, #149	; 0x95
 800070e:	709a      	strb	r2, [r3, #2]
 8000710:	2434      	movs	r4, #52	; 0x34
 8000712:	193b      	adds	r3, r7, r4
 8000714:	781a      	ldrb	r2, [r3, #0]
 8000716:	187b      	adds	r3, r7, r1
 8000718:	711a      	strb	r2, [r3, #4]
 800071a:	193b      	adds	r3, r7, r4
 800071c:	785a      	ldrb	r2, [r3, #1]
 800071e:	187b      	adds	r3, r7, r1
 8000720:	715a      	strb	r2, [r3, #5]
 8000722:	193b      	adds	r3, r7, r4
 8000724:	789a      	ldrb	r2, [r3, #2]
 8000726:	187b      	adds	r3, r7, r1
 8000728:	719a      	strb	r2, [r3, #6]
 800072a:	193b      	adds	r3, r7, r4
 800072c:	78da      	ldrb	r2, [r3, #3]
 800072e:	187b      	adds	r3, r7, r1
 8000730:	71da      	strb	r2, [r3, #7]
 8000732:	193b      	adds	r3, r7, r4
 8000734:	791a      	ldrb	r2, [r3, #4]
 8000736:	187b      	adds	r3, r7, r1
 8000738:	721a      	strb	r2, [r3, #8]

				    	cr95write(saved_data, sizeof(saved_data));
 800073a:	187b      	adds	r3, r7, r1
 800073c:	210a      	movs	r1, #10
 800073e:	0018      	movs	r0, r3
 8000740:	f000 fb96 	bl	8000e70 <cr95write>
				    	if (cr95read(data, &len) == 0x80) {
 8000744:	1dfa      	adds	r2, r7, #7
 8000746:	193b      	adds	r3, r7, r4
 8000748:	0011      	movs	r1, r2
 800074a:	0018      	movs	r0, r3
 800074c:	f000 fba6 	bl	8000e9c <cr95read>
 8000750:	0003      	movs	r3, r0
 8000752:	2b80      	cmp	r3, #128	; 0x80
 8000754:	d000      	beq.n	8000758 <cr95_read+0x328>
 8000756:	e0a4      	b.n	80008a2 <cr95_read+0x472>
				    		printf("SEL2 Response =");
 8000758:	4b27      	ldr	r3, [pc, #156]	; (80007f8 <cr95_read+0x3c8>)
 800075a:	0018      	movs	r0, r3
 800075c:	f004 fdf2 	bl	8005344 <iprintf>
				    		for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8000760:	2353      	movs	r3, #83	; 0x53
 8000762:	18fb      	adds	r3, r7, r3
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
 8000768:	e010      	b.n	800078c <cr95_read+0x35c>
 800076a:	2453      	movs	r4, #83	; 0x53
 800076c:	193b      	adds	r3, r7, r4
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2234      	movs	r2, #52	; 0x34
 8000772:	18ba      	adds	r2, r7, r2
 8000774:	5cd3      	ldrb	r3, [r2, r3]
 8000776:	001a      	movs	r2, r3
 8000778:	4b18      	ldr	r3, [pc, #96]	; (80007dc <cr95_read+0x3ac>)
 800077a:	0011      	movs	r1, r2
 800077c:	0018      	movs	r0, r3
 800077e:	f004 fde1 	bl	8005344 <iprintf>
 8000782:	193b      	adds	r3, r7, r4
 8000784:	781a      	ldrb	r2, [r3, #0]
 8000786:	193b      	adds	r3, r7, r4
 8000788:	3201      	adds	r2, #1
 800078a:	701a      	strb	r2, [r3, #0]
 800078c:	1dfb      	adds	r3, r7, #7
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2253      	movs	r2, #83	; 0x53
 8000792:	18ba      	adds	r2, r7, r2
 8000794:	7812      	ldrb	r2, [r2, #0]
 8000796:	429a      	cmp	r2, r3
 8000798:	d3e7      	bcc.n	800076a <cr95_read+0x33a>
				    		printf("\n");
 800079a:	200a      	movs	r0, #10
 800079c:	f004 fdec 	bl	8005378 <putchar>
				    		disp_len=2;
 80007a0:	4b16      	ldr	r3, [pc, #88]	; (80007fc <cr95_read+0x3cc>)
 80007a2:	2202      	movs	r2, #2
 80007a4:	701a      	strb	r2, [r3, #0]
				    	if (cr95read(data, &len) == 0x80) {
 80007a6:	e07c      	b.n	80008a2 <cr95_read+0x472>
				    	}
				    } else {
				    	printf("UID CL2 error\n");
 80007a8:	4b15      	ldr	r3, [pc, #84]	; (8000800 <cr95_read+0x3d0>)
 80007aa:	0018      	movs	r0, r3
 80007ac:	f004 fe6a 	bl	8005484 <puts>
				    	disp_len=3;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <cr95_read+0x3cc>)
 80007b2:	2203      	movs	r2, #3
 80007b4:	701a      	strb	r2, [r3, #0]
 80007b6:	e074      	b.n	80008a2 <cr95_read+0x472>
				    }
				} else {
					printf("SEL CL1 error\n");
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <cr95_read+0x3d4>)
 80007ba:	0018      	movs	r0, r3
 80007bc:	f004 fe62 	bl	8005484 <puts>
					disp_len=3;
 80007c0:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <cr95_read+0x3cc>)
 80007c2:	2203      	movs	r2, #3
 80007c4:	701a      	strb	r2, [r3, #0]
 80007c6:	e06c      	b.n	80008a2 <cr95_read+0x472>
 80007c8:	07260204 	.word	0x07260204
 80007cc:	08006b70 	.word	0x08006b70
 80007d0:	08006b78 	.word	0x08006b78
 80007d4:	08006b80 	.word	0x08006b80
 80007d8:	08006a70 	.word	0x08006a70
 80007dc:	08006a78 	.word	0x08006a78
 80007e0:	08006a80 	.word	0x08006a80
 80007e4:	08006a88 	.word	0x08006a88
 80007e8:	08006a94 	.word	0x08006a94
 80007ec:	08006ab8 	.word	0x08006ab8
 80007f0:	08006ac8 	.word	0x08006ac8
 80007f4:	08006ad4 	.word	0x08006ad4
 80007f8:	08006ae8 	.word	0x08006ae8
 80007fc:	2000071c 	.word	0x2000071c
 8000800:	08006af8 	.word	0x08006af8
 8000804:	08006b08 	.word	0x08006b08
				}
    		} else {
    			cr95write(saved_data, sizeof(saved_data));
 8000808:	2328      	movs	r3, #40	; 0x28
 800080a:	18fb      	adds	r3, r7, r3
 800080c:	210a      	movs	r1, #10
 800080e:	0018      	movs	r0, r3
 8000810:	f000 fb2e 	bl	8000e70 <cr95write>
    			if (cr95read(data, &len) == 0x80) {
 8000814:	1dfa      	adds	r2, r7, #7
 8000816:	2334      	movs	r3, #52	; 0x34
 8000818:	18fb      	adds	r3, r7, r3
 800081a:	0011      	movs	r1, r2
 800081c:	0018      	movs	r0, r3
 800081e:	f000 fb3d 	bl	8000e9c <cr95read>
 8000822:	0003      	movs	r3, r0
 8000824:	2b80      	cmp	r3, #128	; 0x80
 8000826:	d123      	bne.n	8000870 <cr95_read+0x440>
    				printf("SEL1 Response =");
 8000828:	4b55      	ldr	r3, [pc, #340]	; (8000980 <cr95_read+0x550>)
 800082a:	0018      	movs	r0, r3
 800082c:	f004 fd8a 	bl	8005344 <iprintf>
    				for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8000830:	2352      	movs	r3, #82	; 0x52
 8000832:	18fb      	adds	r3, r7, r3
 8000834:	2200      	movs	r2, #0
 8000836:	701a      	strb	r2, [r3, #0]
 8000838:	e010      	b.n	800085c <cr95_read+0x42c>
 800083a:	2452      	movs	r4, #82	; 0x52
 800083c:	193b      	adds	r3, r7, r4
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2234      	movs	r2, #52	; 0x34
 8000842:	18ba      	adds	r2, r7, r2
 8000844:	5cd3      	ldrb	r3, [r2, r3]
 8000846:	001a      	movs	r2, r3
 8000848:	4b4e      	ldr	r3, [pc, #312]	; (8000984 <cr95_read+0x554>)
 800084a:	0011      	movs	r1, r2
 800084c:	0018      	movs	r0, r3
 800084e:	f004 fd79 	bl	8005344 <iprintf>
 8000852:	193b      	adds	r3, r7, r4
 8000854:	781a      	ldrb	r2, [r3, #0]
 8000856:	193b      	adds	r3, r7, r4
 8000858:	3201      	adds	r2, #1
 800085a:	701a      	strb	r2, [r3, #0]
 800085c:	1dfb      	adds	r3, r7, #7
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2252      	movs	r2, #82	; 0x52
 8000862:	18ba      	adds	r2, r7, r2
 8000864:	7812      	ldrb	r2, [r2, #0]
 8000866:	429a      	cmp	r2, r3
 8000868:	d3e7      	bcc.n	800083a <cr95_read+0x40a>
    				printf("\n");
 800086a:	200a      	movs	r0, #10
 800086c:	f004 fd84 	bl	8005378 <putchar>
    			}
    			sprintf(uid, "%s%X%X%X%X", uid, saved_data[4], saved_data[5], saved_data[6], saved_data[7]);
 8000870:	2228      	movs	r2, #40	; 0x28
 8000872:	18bb      	adds	r3, r7, r2
 8000874:	791b      	ldrb	r3, [r3, #4]
 8000876:	001e      	movs	r6, r3
 8000878:	18bb      	adds	r3, r7, r2
 800087a:	795b      	ldrb	r3, [r3, #5]
 800087c:	001c      	movs	r4, r3
 800087e:	18bb      	adds	r3, r7, r2
 8000880:	799b      	ldrb	r3, [r3, #6]
 8000882:	001d      	movs	r5, r3
 8000884:	18bb      	adds	r3, r7, r2
 8000886:	79db      	ldrb	r3, [r3, #7]
 8000888:	2008      	movs	r0, #8
 800088a:	183a      	adds	r2, r7, r0
 800088c:	493e      	ldr	r1, [pc, #248]	; (8000988 <cr95_read+0x558>)
 800088e:	1838      	adds	r0, r7, r0
 8000890:	9302      	str	r3, [sp, #8]
 8000892:	9501      	str	r5, [sp, #4]
 8000894:	9400      	str	r4, [sp, #0]
 8000896:	0033      	movs	r3, r6
 8000898:	f004 fdfe 	bl	8005498 <siprintf>
    			disp_len=1;
 800089c:	4b3b      	ldr	r3, [pc, #236]	; (800098c <cr95_read+0x55c>)
 800089e:	2201      	movs	r2, #1
 80008a0:	701a      	strb	r2, [r3, #0]
    		}
    		HAL_UART_Transmit(&huart2, (uint8_t*)(uid), strlen(uid), HAL_MAX_DELAY);
 80008a2:	2408      	movs	r4, #8
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	0018      	movs	r0, r3
 80008a8:	f7ff fc2e 	bl	8000108 <strlen>
 80008ac:	0003      	movs	r3, r0
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	2301      	movs	r3, #1
 80008b2:	425b      	negs	r3, r3
 80008b4:	1939      	adds	r1, r7, r4
 80008b6:	4836      	ldr	r0, [pc, #216]	; (8000990 <cr95_read+0x560>)
 80008b8:	f003 ff70 	bl	800479c <HAL_UART_Transmit>
    		printf("\n");
 80008bc:	200a      	movs	r0, #10
 80008be:	f004 fd5b 	bl	8005378 <putchar>
 80008c2:	e00e      	b.n	80008e2 <cr95_read+0x4b2>
    	} else {
    		printf("UID CL1 error\n");
 80008c4:	4b33      	ldr	r3, [pc, #204]	; (8000994 <cr95_read+0x564>)
 80008c6:	0018      	movs	r0, r3
 80008c8:	f004 fddc 	bl	8005484 <puts>
    		disp_len=3;
 80008cc:	4b2f      	ldr	r3, [pc, #188]	; (800098c <cr95_read+0x55c>)
 80008ce:	2203      	movs	r2, #3
 80008d0:	701a      	strb	r2, [r3, #0]
 80008d2:	e006      	b.n	80008e2 <cr95_read+0x4b2>
    	}
	} else {
		printf("REQA error\n");
 80008d4:	4b30      	ldr	r3, [pc, #192]	; (8000998 <cr95_read+0x568>)
 80008d6:	0018      	movs	r0, r3
 80008d8:	f004 fdd4 	bl	8005484 <puts>
		disp_len=3;
 80008dc:	4b2b      	ldr	r3, [pc, #172]	; (800098c <cr95_read+0x55c>)
 80008de:	2203      	movs	r2, #3
 80008e0:	701a      	strb	r2, [r3, #0]
	}
	SSD1306_Clear();
 80008e2:	f001 fb95 	bl	8002010 <SSD1306_Clear>
	SSD1306_GotoXY (50, 10);
 80008e6:	210a      	movs	r1, #10
 80008e8:	2032      	movs	r0, #50	; 0x32
 80008ea:	f001 fad1 	bl	8001e90 <SSD1306_GotoXY>
	SSD1306_Puts ("UID:", &Font_11x18, 1);
 80008ee:	492b      	ldr	r1, [pc, #172]	; (800099c <cr95_read+0x56c>)
 80008f0:	4b2b      	ldr	r3, [pc, #172]	; (80009a0 <cr95_read+0x570>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	0018      	movs	r0, r3
 80008f6:	f001 fb65 	bl	8001fc4 <SSD1306_Puts>
	SSD1306_GotoXY (5, 30);
 80008fa:	211e      	movs	r1, #30
 80008fc:	2005      	movs	r0, #5
 80008fe:	f001 fac7 	bl	8001e90 <SSD1306_GotoXY>
	SSD1306_Puts (uid, &Font_7x10, 1);
 8000902:	4928      	ldr	r1, [pc, #160]	; (80009a4 <cr95_read+0x574>)
 8000904:	2308      	movs	r3, #8
 8000906:	18fb      	adds	r3, r7, r3
 8000908:	2201      	movs	r2, #1
 800090a:	0018      	movs	r0, r3
 800090c:	f001 fb5a 	bl	8001fc4 <SSD1306_Puts>
	if (disp_len == 1) {
 8000910:	4b1e      	ldr	r3, [pc, #120]	; (800098c <cr95_read+0x55c>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d10a      	bne.n	800092e <cr95_read+0x4fe>
		SSD1306_GotoXY (5, 45);
 8000918:	212d      	movs	r1, #45	; 0x2d
 800091a:	2005      	movs	r0, #5
 800091c:	f001 fab8 	bl	8001e90 <SSD1306_GotoXY>
		SSD1306_Puts ("UID length: 4B", &Font_7x10, 1);
 8000920:	4920      	ldr	r1, [pc, #128]	; (80009a4 <cr95_read+0x574>)
 8000922:	4b21      	ldr	r3, [pc, #132]	; (80009a8 <cr95_read+0x578>)
 8000924:	2201      	movs	r2, #1
 8000926:	0018      	movs	r0, r3
 8000928:	f001 fb4c 	bl	8001fc4 <SSD1306_Puts>
 800092c:	e01e      	b.n	800096c <cr95_read+0x53c>
			}
	else if (disp_len == 2) {
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <cr95_read+0x55c>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b02      	cmp	r3, #2
 8000934:	d10a      	bne.n	800094c <cr95_read+0x51c>
		SSD1306_GotoXY (5, 45);
 8000936:	212d      	movs	r1, #45	; 0x2d
 8000938:	2005      	movs	r0, #5
 800093a:	f001 faa9 	bl	8001e90 <SSD1306_GotoXY>
		SSD1306_Puts ("UID length: 7B", &Font_7x10, 1);
 800093e:	4919      	ldr	r1, [pc, #100]	; (80009a4 <cr95_read+0x574>)
 8000940:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <cr95_read+0x57c>)
 8000942:	2201      	movs	r2, #1
 8000944:	0018      	movs	r0, r3
 8000946:	f001 fb3d 	bl	8001fc4 <SSD1306_Puts>
 800094a:	e00f      	b.n	800096c <cr95_read+0x53c>
	}
	else if (disp_len == 3) {
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <cr95_read+0x55c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b03      	cmp	r3, #3
 8000952:	d10b      	bne.n	800096c <cr95_read+0x53c>
		SSD1306_Clear();
 8000954:	f001 fb5c 	bl	8002010 <SSD1306_Clear>
		SSD1306_GotoXY (25, 19);
 8000958:	2113      	movs	r1, #19
 800095a:	2019      	movs	r0, #25
 800095c:	f001 fa98 	bl	8001e90 <SSD1306_GotoXY>
		SSD1306_Puts ("ERROR", &Font_16x26, 1);
 8000960:	4913      	ldr	r1, [pc, #76]	; (80009b0 <cr95_read+0x580>)
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <cr95_read+0x584>)
 8000964:	2201      	movs	r2, #1
 8000966:	0018      	movs	r0, r3
 8000968:	f001 fb2c 	bl	8001fc4 <SSD1306_Puts>
	}
	SSD1306_UpdateScreen(); // update screen
 800096c:	f001 f9d4 	bl	8001d18 <SSD1306_UpdateScreen>
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	b017      	add	sp, #92	; 0x5c
 8000976:	bcc0      	pop	{r6, r7}
 8000978:	46b9      	mov	r9, r7
 800097a:	46b0      	mov	r8, r6
 800097c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	08006ab8 	.word	0x08006ab8
 8000984:	08006a78 	.word	0x08006a78
 8000988:	08006b18 	.word	0x08006b18
 800098c:	2000071c 	.word	0x2000071c
 8000990:	20000698 	.word	0x20000698
 8000994:	08006b24 	.word	0x08006b24
 8000998:	08006b34 	.word	0x08006b34
 800099c:	20000008 	.word	0x20000008
 80009a0:	08006b40 	.word	0x08006b40
 80009a4:	20000000 	.word	0x20000000
 80009a8:	08006b48 	.word	0x08006b48
 80009ac:	08006b58 	.word	0x08006b58
 80009b0:	20000010 	.word	0x20000010
 80009b4:	08006b68 	.word	0x08006b68

080009b8 <cr95_readtopaz>:

void cr95_readtopaz(void)
{
 80009b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ba:	b097      	sub	sp, #92	; 0x5c
 80009bc:	af04      	add	r7, sp, #16
	const uint8_t cmd_reqtopaz[] =  { 0x04, 0x02, 0x26, 0x07 };
 80009be:	2140      	movs	r1, #64	; 0x40
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	4a50      	ldr	r2, [pc, #320]	; (8000b04 <cr95_readtopaz+0x14c>)
 80009c4:	601a      	str	r2, [r3, #0]
	const uint8_t cmd_rid[]      =  { 0x04, 0x08, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA8 };
 80009c6:	2334      	movs	r3, #52	; 0x34
 80009c8:	18fb      	adds	r3, r7, r3
 80009ca:	4a4f      	ldr	r2, [pc, #316]	; (8000b08 <cr95_readtopaz+0x150>)
 80009cc:	ca11      	ldmia	r2!, {r0, r4}
 80009ce:	c311      	stmia	r3!, {r0, r4}
 80009d0:	8812      	ldrh	r2, [r2, #0]
 80009d2:	801a      	strh	r2, [r3, #0]

	uint8_t data[16];
	char rid[32];
	uint8_t len;

	cr95write(cmd_reqtopaz, sizeof(cmd_reqtopaz));
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2104      	movs	r1, #4
 80009d8:	0018      	movs	r0, r3
 80009da:	f000 fa49 	bl	8000e70 <cr95write>
	if (cr95read(data, &len) == 0x80) {
 80009de:	1cfa      	adds	r2, r7, #3
 80009e0:	2324      	movs	r3, #36	; 0x24
 80009e2:	18fb      	adds	r3, r7, r3
 80009e4:	0011      	movs	r1, r2
 80009e6:	0018      	movs	r0, r3
 80009e8:	f000 fa58 	bl	8000e9c <cr95read>
 80009ec:	0003      	movs	r3, r0
 80009ee:	2b80      	cmp	r3, #128	; 0x80
 80009f0:	d000      	beq.n	80009f4 <cr95_readtopaz+0x3c>
 80009f2:	e083      	b.n	8000afc <cr95_readtopaz+0x144>
		printf("ATQA =");
 80009f4:	4b45      	ldr	r3, [pc, #276]	; (8000b0c <cr95_readtopaz+0x154>)
 80009f6:	0018      	movs	r0, r3
 80009f8:	f004 fca4 	bl	8005344 <iprintf>
		for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 80009fc:	2347      	movs	r3, #71	; 0x47
 80009fe:	18fb      	adds	r3, r7, r3
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
 8000a04:	e010      	b.n	8000a28 <cr95_readtopaz+0x70>
 8000a06:	2447      	movs	r4, #71	; 0x47
 8000a08:	193b      	adds	r3, r7, r4
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2224      	movs	r2, #36	; 0x24
 8000a0e:	18ba      	adds	r2, r7, r2
 8000a10:	5cd3      	ldrb	r3, [r2, r3]
 8000a12:	001a      	movs	r2, r3
 8000a14:	4b3e      	ldr	r3, [pc, #248]	; (8000b10 <cr95_readtopaz+0x158>)
 8000a16:	0011      	movs	r1, r2
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f004 fc93 	bl	8005344 <iprintf>
 8000a1e:	193b      	adds	r3, r7, r4
 8000a20:	781a      	ldrb	r2, [r3, #0]
 8000a22:	193b      	adds	r3, r7, r4
 8000a24:	3201      	adds	r2, #1
 8000a26:	701a      	strb	r2, [r3, #0]
 8000a28:	1cfb      	adds	r3, r7, #3
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2247      	movs	r2, #71	; 0x47
 8000a2e:	18ba      	adds	r2, r7, r2
 8000a30:	7812      	ldrb	r2, [r2, #0]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d3e7      	bcc.n	8000a06 <cr95_readtopaz+0x4e>
		printf("\n");
 8000a36:	200a      	movs	r0, #10
 8000a38:	f004 fc9e 	bl	8005378 <putchar>

		sprintf(rid, "UID =");
 8000a3c:	4a35      	ldr	r2, [pc, #212]	; (8000b14 <cr95_readtopaz+0x15c>)
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	0011      	movs	r1, r2
 8000a42:	0018      	movs	r0, r3
 8000a44:	f004 fd28 	bl	8005498 <siprintf>

		cr95write(cmd_rid, sizeof(cmd_rid));
 8000a48:	2334      	movs	r3, #52	; 0x34
 8000a4a:	18fb      	adds	r3, r7, r3
 8000a4c:	210a      	movs	r1, #10
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f000 fa0e 	bl	8000e70 <cr95write>
		if (cr95read(data, &len) == 0x80 ) {
 8000a54:	1cfa      	adds	r2, r7, #3
 8000a56:	2324      	movs	r3, #36	; 0x24
 8000a58:	18fb      	adds	r3, r7, r3
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f000 fa1d 	bl	8000e9c <cr95read>
 8000a62:	0003      	movs	r3, r0
 8000a64:	2b80      	cmp	r3, #128	; 0x80
 8000a66:	d149      	bne.n	8000afc <cr95_readtopaz+0x144>
			printf("RID =");
 8000a68:	4b2b      	ldr	r3, [pc, #172]	; (8000b18 <cr95_readtopaz+0x160>)
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f004 fc6a 	bl	8005344 <iprintf>
			for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8000a70:	2346      	movs	r3, #70	; 0x46
 8000a72:	18fb      	adds	r3, r7, r3
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
 8000a78:	e010      	b.n	8000a9c <cr95_readtopaz+0xe4>
 8000a7a:	2446      	movs	r4, #70	; 0x46
 8000a7c:	193b      	adds	r3, r7, r4
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2224      	movs	r2, #36	; 0x24
 8000a82:	18ba      	adds	r2, r7, r2
 8000a84:	5cd3      	ldrb	r3, [r2, r3]
 8000a86:	001a      	movs	r2, r3
 8000a88:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <cr95_readtopaz+0x158>)
 8000a8a:	0011      	movs	r1, r2
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f004 fc59 	bl	8005344 <iprintf>
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	781a      	ldrb	r2, [r3, #0]
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	3201      	adds	r2, #1
 8000a9a:	701a      	strb	r2, [r3, #0]
 8000a9c:	1cfb      	adds	r3, r7, #3
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2246      	movs	r2, #70	; 0x46
 8000aa2:	18ba      	adds	r2, r7, r2
 8000aa4:	7812      	ldrb	r2, [r2, #0]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d3e7      	bcc.n	8000a7a <cr95_readtopaz+0xc2>
			printf("\n");
 8000aaa:	200a      	movs	r0, #10
 8000aac:	f004 fc64 	bl	8005378 <putchar>
			printf("Header 1 = %2X", data[0]);
 8000ab0:	2424      	movs	r4, #36	; 0x24
 8000ab2:	193b      	adds	r3, r7, r4
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	001a      	movs	r2, r3
 8000ab8:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <cr95_readtopaz+0x164>)
 8000aba:	0011      	movs	r1, r2
 8000abc:	0018      	movs	r0, r3
 8000abe:	f004 fc41 	bl	8005344 <iprintf>
			printf("Header 2 = %2X", data[1]);
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	785b      	ldrb	r3, [r3, #1]
 8000ac6:	001a      	movs	r2, r3
 8000ac8:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <cr95_readtopaz+0x168>)
 8000aca:	0011      	movs	r1, r2
 8000acc:	0018      	movs	r0, r3
 8000ace:	f004 fc39 	bl	8005344 <iprintf>
			sprintf(rid, "%s %2X %2X %2X %2X", rid, data[2], data[3], data[4], data[5]);
 8000ad2:	0022      	movs	r2, r4
 8000ad4:	18bb      	adds	r3, r7, r2
 8000ad6:	789b      	ldrb	r3, [r3, #2]
 8000ad8:	001e      	movs	r6, r3
 8000ada:	18bb      	adds	r3, r7, r2
 8000adc:	78db      	ldrb	r3, [r3, #3]
 8000ade:	001c      	movs	r4, r3
 8000ae0:	18bb      	adds	r3, r7, r2
 8000ae2:	791b      	ldrb	r3, [r3, #4]
 8000ae4:	001d      	movs	r5, r3
 8000ae6:	18bb      	adds	r3, r7, r2
 8000ae8:	795b      	ldrb	r3, [r3, #5]
 8000aea:	1d3a      	adds	r2, r7, #4
 8000aec:	490d      	ldr	r1, [pc, #52]	; (8000b24 <cr95_readtopaz+0x16c>)
 8000aee:	1d38      	adds	r0, r7, #4
 8000af0:	9302      	str	r3, [sp, #8]
 8000af2:	9501      	str	r5, [sp, #4]
 8000af4:	9400      	str	r4, [sp, #0]
 8000af6:	0033      	movs	r3, r6
 8000af8:	f004 fcce 	bl	8005498 <siprintf>
		}
	}
}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	b013      	add	sp, #76	; 0x4c
 8000b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b04:	07260204 	.word	0x07260204
 8000b08:	08006bd0 	.word	0x08006bd0
 8000b0c:	08006a70 	.word	0x08006a70
 8000b10:	08006a78 	.word	0x08006a78
 8000b14:	08006b8c 	.word	0x08006b8c
 8000b18:	08006b94 	.word	0x08006b94
 8000b1c:	08006b9c 	.word	0x08006b9c
 8000b20:	08006bac 	.word	0x08006bac
 8000b24:	08006bbc 	.word	0x08006bbc

08000b28 <cr95_calibrate>:

void cr95_calibrate(void)
{
 8000b28:	b5b0      	push	{r4, r5, r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
	uint8_t cmd_cal[] =  	    { 0x07, 0x0E, 0x03, 0xA1, 0x00, 0xF8, 0x01, 0x18, 0x00, 0x20, 0x60, 0x60, 0x00, 0x00, 0x3F, 0x01 };
 8000b2e:	2118      	movs	r1, #24
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	4ab6      	ldr	r2, [pc, #728]	; (8000e0c <cr95_calibrate+0x2e4>)
 8000b34:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000b36:	c331      	stmia	r3!, {r0, r4, r5}
 8000b38:	6812      	ldr	r2, [r2, #0]
 8000b3a:	601a      	str	r2, [r3, #0]

	uint8_t data[16];
	uint8_t len;

	cmd_cal[13] = 0x00;
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	2200      	movs	r2, #0
 8000b40:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8000b42:	000c      	movs	r4, r1
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	2110      	movs	r1, #16
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f000 f991 	bl	8000e70 <cr95write>
	printf("CAL #0 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8000b4e:	193b      	adds	r3, r7, r4
 8000b50:	7b5b      	ldrb	r3, [r3, #13]
 8000b52:	001c      	movs	r4, r3
 8000b54:	1dfa      	adds	r2, r7, #7
 8000b56:	2308      	movs	r3, #8
 8000b58:	18fb      	adds	r3, r7, r3
 8000b5a:	0011      	movs	r1, r2
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f000 f99d 	bl	8000e9c <cr95read>
 8000b62:	1e03      	subs	r3, r0, #0
 8000b64:	d101      	bne.n	8000b6a <cr95_calibrate+0x42>
 8000b66:	2279      	movs	r2, #121	; 0x79
 8000b68:	e000      	b.n	8000b6c <cr95_calibrate+0x44>
 8000b6a:	226e      	movs	r2, #110	; 0x6e
 8000b6c:	2508      	movs	r5, #8
 8000b6e:	197b      	adds	r3, r7, r5
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	48a7      	ldr	r0, [pc, #668]	; (8000e10 <cr95_calibrate+0x2e8>)
 8000b74:	0021      	movs	r1, r4
 8000b76:	f004 fbe5 	bl	8005344 <iprintf>

	cmd_cal[13] = 0xFC;
 8000b7a:	2118      	movs	r1, #24
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	22fc      	movs	r2, #252	; 0xfc
 8000b80:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8000b82:	000c      	movs	r4, r1
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2110      	movs	r1, #16
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f000 f971 	bl	8000e70 <cr95write>
	printf("CAL #1 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8000b8e:	193b      	adds	r3, r7, r4
 8000b90:	7b5b      	ldrb	r3, [r3, #13]
 8000b92:	001c      	movs	r4, r3
 8000b94:	1dfa      	adds	r2, r7, #7
 8000b96:	197b      	adds	r3, r7, r5
 8000b98:	0011      	movs	r1, r2
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f000 f97e 	bl	8000e9c <cr95read>
 8000ba0:	1e03      	subs	r3, r0, #0
 8000ba2:	d101      	bne.n	8000ba8 <cr95_calibrate+0x80>
 8000ba4:	2279      	movs	r2, #121	; 0x79
 8000ba6:	e000      	b.n	8000baa <cr95_calibrate+0x82>
 8000ba8:	226e      	movs	r2, #110	; 0x6e
 8000baa:	2508      	movs	r5, #8
 8000bac:	197b      	adds	r3, r7, r5
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4898      	ldr	r0, [pc, #608]	; (8000e14 <cr95_calibrate+0x2ec>)
 8000bb2:	0021      	movs	r1, r4
 8000bb4:	f004 fbc6 	bl	8005344 <iprintf>

	cmd_cal[13] -= 0x80;
 8000bb8:	2118      	movs	r1, #24
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	7b5b      	ldrb	r3, [r3, #13]
 8000bbe:	3b80      	subs	r3, #128	; 0x80
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8000bc6:	000c      	movs	r4, r1
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	2110      	movs	r1, #16
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f000 f94f 	bl	8000e70 <cr95write>
	printf("CAL #2 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8000bd2:	193b      	adds	r3, r7, r4
 8000bd4:	7b5b      	ldrb	r3, [r3, #13]
 8000bd6:	001c      	movs	r4, r3
 8000bd8:	1dfa      	adds	r2, r7, #7
 8000bda:	197b      	adds	r3, r7, r5
 8000bdc:	0011      	movs	r1, r2
 8000bde:	0018      	movs	r0, r3
 8000be0:	f000 f95c 	bl	8000e9c <cr95read>
 8000be4:	1e03      	subs	r3, r0, #0
 8000be6:	d101      	bne.n	8000bec <cr95_calibrate+0xc4>
 8000be8:	2279      	movs	r2, #121	; 0x79
 8000bea:	e000      	b.n	8000bee <cr95_calibrate+0xc6>
 8000bec:	226e      	movs	r2, #110	; 0x6e
 8000bee:	2508      	movs	r5, #8
 8000bf0:	197b      	adds	r3, r7, r5
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	4888      	ldr	r0, [pc, #544]	; (8000e18 <cr95_calibrate+0x2f0>)
 8000bf6:	0021      	movs	r1, r4
 8000bf8:	f004 fba4 	bl	8005344 <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x40; else cmd_cal[13] += 0x40;
 8000bfc:	197b      	adds	r3, r7, r5
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d107      	bne.n	8000c14 <cr95_calibrate+0xec>
 8000c04:	2118      	movs	r1, #24
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	7b5b      	ldrb	r3, [r3, #13]
 8000c0a:	3b40      	subs	r3, #64	; 0x40
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	735a      	strb	r2, [r3, #13]
 8000c12:	e006      	b.n	8000c22 <cr95_calibrate+0xfa>
 8000c14:	2118      	movs	r1, #24
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	7b5b      	ldrb	r3, [r3, #13]
 8000c1a:	3340      	adds	r3, #64	; 0x40
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8000c22:	2418      	movs	r4, #24
 8000c24:	193b      	adds	r3, r7, r4
 8000c26:	2110      	movs	r1, #16
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f000 f921 	bl	8000e70 <cr95write>
	printf("CAL #3 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8000c2e:	193b      	adds	r3, r7, r4
 8000c30:	7b5b      	ldrb	r3, [r3, #13]
 8000c32:	001c      	movs	r4, r3
 8000c34:	1dfa      	adds	r2, r7, #7
 8000c36:	2308      	movs	r3, #8
 8000c38:	18fb      	adds	r3, r7, r3
 8000c3a:	0011      	movs	r1, r2
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f000 f92d 	bl	8000e9c <cr95read>
 8000c42:	1e03      	subs	r3, r0, #0
 8000c44:	d101      	bne.n	8000c4a <cr95_calibrate+0x122>
 8000c46:	2279      	movs	r2, #121	; 0x79
 8000c48:	e000      	b.n	8000c4c <cr95_calibrate+0x124>
 8000c4a:	226e      	movs	r2, #110	; 0x6e
 8000c4c:	2508      	movs	r5, #8
 8000c4e:	197b      	adds	r3, r7, r5
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	4872      	ldr	r0, [pc, #456]	; (8000e1c <cr95_calibrate+0x2f4>)
 8000c54:	0021      	movs	r1, r4
 8000c56:	f004 fb75 	bl	8005344 <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x20; else cmd_cal[13] += 0x20;
 8000c5a:	197b      	adds	r3, r7, r5
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d107      	bne.n	8000c72 <cr95_calibrate+0x14a>
 8000c62:	2118      	movs	r1, #24
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	7b5b      	ldrb	r3, [r3, #13]
 8000c68:	3b20      	subs	r3, #32
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	735a      	strb	r2, [r3, #13]
 8000c70:	e006      	b.n	8000c80 <cr95_calibrate+0x158>
 8000c72:	2118      	movs	r1, #24
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	7b5b      	ldrb	r3, [r3, #13]
 8000c78:	3320      	adds	r3, #32
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	187b      	adds	r3, r7, r1
 8000c7e:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8000c80:	2418      	movs	r4, #24
 8000c82:	193b      	adds	r3, r7, r4
 8000c84:	2110      	movs	r1, #16
 8000c86:	0018      	movs	r0, r3
 8000c88:	f000 f8f2 	bl	8000e70 <cr95write>
	printf("CAL #4 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8000c8c:	193b      	adds	r3, r7, r4
 8000c8e:	7b5b      	ldrb	r3, [r3, #13]
 8000c90:	001c      	movs	r4, r3
 8000c92:	1dfa      	adds	r2, r7, #7
 8000c94:	2308      	movs	r3, #8
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	0011      	movs	r1, r2
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f000 f8fe 	bl	8000e9c <cr95read>
 8000ca0:	1e03      	subs	r3, r0, #0
 8000ca2:	d101      	bne.n	8000ca8 <cr95_calibrate+0x180>
 8000ca4:	2279      	movs	r2, #121	; 0x79
 8000ca6:	e000      	b.n	8000caa <cr95_calibrate+0x182>
 8000ca8:	226e      	movs	r2, #110	; 0x6e
 8000caa:	2508      	movs	r5, #8
 8000cac:	197b      	adds	r3, r7, r5
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	485b      	ldr	r0, [pc, #364]	; (8000e20 <cr95_calibrate+0x2f8>)
 8000cb2:	0021      	movs	r1, r4
 8000cb4:	f004 fb46 	bl	8005344 <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x10; else cmd_cal[13] += 0x10;
 8000cb8:	197b      	adds	r3, r7, r5
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d107      	bne.n	8000cd0 <cr95_calibrate+0x1a8>
 8000cc0:	2118      	movs	r1, #24
 8000cc2:	187b      	adds	r3, r7, r1
 8000cc4:	7b5b      	ldrb	r3, [r3, #13]
 8000cc6:	3b10      	subs	r3, #16
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	735a      	strb	r2, [r3, #13]
 8000cce:	e006      	b.n	8000cde <cr95_calibrate+0x1b6>
 8000cd0:	2118      	movs	r1, #24
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	7b5b      	ldrb	r3, [r3, #13]
 8000cd6:	3310      	adds	r3, #16
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8000cde:	2418      	movs	r4, #24
 8000ce0:	193b      	adds	r3, r7, r4
 8000ce2:	2110      	movs	r1, #16
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f000 f8c3 	bl	8000e70 <cr95write>
	printf("CAL #5 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8000cea:	193b      	adds	r3, r7, r4
 8000cec:	7b5b      	ldrb	r3, [r3, #13]
 8000cee:	001c      	movs	r4, r3
 8000cf0:	1dfa      	adds	r2, r7, #7
 8000cf2:	2308      	movs	r3, #8
 8000cf4:	18fb      	adds	r3, r7, r3
 8000cf6:	0011      	movs	r1, r2
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f000 f8cf 	bl	8000e9c <cr95read>
 8000cfe:	1e03      	subs	r3, r0, #0
 8000d00:	d101      	bne.n	8000d06 <cr95_calibrate+0x1de>
 8000d02:	2279      	movs	r2, #121	; 0x79
 8000d04:	e000      	b.n	8000d08 <cr95_calibrate+0x1e0>
 8000d06:	226e      	movs	r2, #110	; 0x6e
 8000d08:	2508      	movs	r5, #8
 8000d0a:	197b      	adds	r3, r7, r5
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	4845      	ldr	r0, [pc, #276]	; (8000e24 <cr95_calibrate+0x2fc>)
 8000d10:	0021      	movs	r1, r4
 8000d12:	f004 fb17 	bl	8005344 <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x08; else cmd_cal[13] += 0x08;
 8000d16:	197b      	adds	r3, r7, r5
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d107      	bne.n	8000d2e <cr95_calibrate+0x206>
 8000d1e:	2118      	movs	r1, #24
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	7b5b      	ldrb	r3, [r3, #13]
 8000d24:	3b08      	subs	r3, #8
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	735a      	strb	r2, [r3, #13]
 8000d2c:	e006      	b.n	8000d3c <cr95_calibrate+0x214>
 8000d2e:	2118      	movs	r1, #24
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	7b5b      	ldrb	r3, [r3, #13]
 8000d34:	3308      	adds	r3, #8
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8000d3c:	2418      	movs	r4, #24
 8000d3e:	193b      	adds	r3, r7, r4
 8000d40:	2110      	movs	r1, #16
 8000d42:	0018      	movs	r0, r3
 8000d44:	f000 f894 	bl	8000e70 <cr95write>
	printf("CAL #6 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8000d48:	193b      	adds	r3, r7, r4
 8000d4a:	7b5b      	ldrb	r3, [r3, #13]
 8000d4c:	001c      	movs	r4, r3
 8000d4e:	1dfa      	adds	r2, r7, #7
 8000d50:	2308      	movs	r3, #8
 8000d52:	18fb      	adds	r3, r7, r3
 8000d54:	0011      	movs	r1, r2
 8000d56:	0018      	movs	r0, r3
 8000d58:	f000 f8a0 	bl	8000e9c <cr95read>
 8000d5c:	1e03      	subs	r3, r0, #0
 8000d5e:	d101      	bne.n	8000d64 <cr95_calibrate+0x23c>
 8000d60:	2279      	movs	r2, #121	; 0x79
 8000d62:	e000      	b.n	8000d66 <cr95_calibrate+0x23e>
 8000d64:	226e      	movs	r2, #110	; 0x6e
 8000d66:	2508      	movs	r5, #8
 8000d68:	197b      	adds	r3, r7, r5
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	482e      	ldr	r0, [pc, #184]	; (8000e28 <cr95_calibrate+0x300>)
 8000d6e:	0021      	movs	r1, r4
 8000d70:	f004 fae8 	bl	8005344 <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x04; else cmd_cal[13] += 0x04;
 8000d74:	197b      	adds	r3, r7, r5
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d107      	bne.n	8000d8c <cr95_calibrate+0x264>
 8000d7c:	2118      	movs	r1, #24
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	7b5b      	ldrb	r3, [r3, #13]
 8000d82:	3b04      	subs	r3, #4
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	187b      	adds	r3, r7, r1
 8000d88:	735a      	strb	r2, [r3, #13]
 8000d8a:	e006      	b.n	8000d9a <cr95_calibrate+0x272>
 8000d8c:	2118      	movs	r1, #24
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	7b5b      	ldrb	r3, [r3, #13]
 8000d92:	3304      	adds	r3, #4
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8000d9a:	2418      	movs	r4, #24
 8000d9c:	193b      	adds	r3, r7, r4
 8000d9e:	2110      	movs	r1, #16
 8000da0:	0018      	movs	r0, r3
 8000da2:	f000 f865 	bl	8000e70 <cr95write>
	printf("CAL #7 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8000da6:	193b      	adds	r3, r7, r4
 8000da8:	7b5b      	ldrb	r3, [r3, #13]
 8000daa:	001c      	movs	r4, r3
 8000dac:	1dfa      	adds	r2, r7, #7
 8000dae:	2308      	movs	r3, #8
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	0011      	movs	r1, r2
 8000db4:	0018      	movs	r0, r3
 8000db6:	f000 f871 	bl	8000e9c <cr95read>
 8000dba:	1e03      	subs	r3, r0, #0
 8000dbc:	d101      	bne.n	8000dc2 <cr95_calibrate+0x29a>
 8000dbe:	2279      	movs	r2, #121	; 0x79
 8000dc0:	e000      	b.n	8000dc4 <cr95_calibrate+0x29c>
 8000dc2:	226e      	movs	r2, #110	; 0x6e
 8000dc4:	2508      	movs	r5, #8
 8000dc6:	197b      	adds	r3, r7, r5
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	4818      	ldr	r0, [pc, #96]	; (8000e2c <cr95_calibrate+0x304>)
 8000dcc:	0021      	movs	r1, r4
 8000dce:	f004 fab9 	bl	8005344 <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x04;
 8000dd2:	197b      	adds	r3, r7, r5
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d106      	bne.n	8000de8 <cr95_calibrate+0x2c0>
 8000dda:	2118      	movs	r1, #24
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	7b5b      	ldrb	r3, [r3, #13]
 8000de0:	3b04      	subs	r3, #4
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	735a      	strb	r2, [r3, #13]
	DacDataRef = cmd_cal[13];
 8000de8:	2318      	movs	r3, #24
 8000dea:	18fb      	adds	r3, r7, r3
 8000dec:	7b5a      	ldrb	r2, [r3, #13]
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <cr95_calibrate+0x308>)
 8000df0:	701a      	strb	r2, [r3, #0]
	printf("CAL finished, DacDataRef=0x%02x\n", DacDataRef);
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <cr95_calibrate+0x308>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	001a      	movs	r2, r3
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <cr95_calibrate+0x30c>)
 8000dfa:	0011      	movs	r1, r2
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f004 faa1 	bl	8005344 <iprintf>
}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	46bd      	mov	sp, r7
 8000e06:	b00a      	add	sp, #40	; 0x28
 8000e08:	bdb0      	pop	{r4, r5, r7, pc}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	08006d20 	.word	0x08006d20
 8000e10:	08006bdc 	.word	0x08006bdc
 8000e14:	08006c00 	.word	0x08006c00
 8000e18:	08006c24 	.word	0x08006c24
 8000e1c:	08006c48 	.word	0x08006c48
 8000e20:	08006c6c 	.word	0x08006c6c
 8000e24:	08006c90 	.word	0x08006c90
 8000e28:	08006cb4 	.word	0x08006cb4
 8000e2c:	08006cd8 	.word	0x08006cd8
 8000e30:	200000a8 	.word	0x200000a8
 8000e34:	08006cfc 	.word	0x08006cfc

08000e38 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char const *buf, int n)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
    if (printf_en) HAL_UART_Transmit(&huart2, (uint8_t*)(buf), n, HAL_MAX_DELAY);
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <_write+0x30>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d007      	beq.n	8000e5c <_write+0x24>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	2301      	movs	r3, #1
 8000e52:	425b      	negs	r3, r3
 8000e54:	68b9      	ldr	r1, [r7, #8]
 8000e56:	4805      	ldr	r0, [pc, #20]	; (8000e6c <_write+0x34>)
 8000e58:	f003 fca0 	bl	800479c <HAL_UART_Transmit>
    return n;
 8000e5c:	687b      	ldr	r3, [r7, #4]
}
 8000e5e:	0018      	movs	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b004      	add	sp, #16
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	20000018 	.word	0x20000018
 8000e6c:	20000698 	.word	0x20000698

08000e70 <cr95write>:

void cr95write(const uint8_t *data, uint8_t length)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	000a      	movs	r2, r1
 8000e7a:	1cfb      	adds	r3, r7, #3
 8000e7c:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t *)(data), length, HAL_MAX_DELAY);
 8000e7e:	1cfb      	adds	r3, r7, #3
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	2301      	movs	r3, #1
 8000e86:	425b      	negs	r3, r3
 8000e88:	6879      	ldr	r1, [r7, #4]
 8000e8a:	4803      	ldr	r0, [pc, #12]	; (8000e98 <cr95write+0x28>)
 8000e8c:	f003 fc86 	bl	800479c <HAL_UART_Transmit>
}
 8000e90:	46c0      	nop			; (mov r8, r8)
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b002      	add	sp, #8
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000614 	.word	0x20000614

08000e9c <cr95read>:

uint8_t cr95read(uint8_t *data, uint8_t *length)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
	uint32_t timeout = HAL_GetTick();
 8000ea6:	f001 fc5b 	bl	8002760 <HAL_GetTick>
 8000eaa:	0003      	movs	r3, r0
 8000eac:	613b      	str	r3, [r7, #16]

	do
	{
		if (HAL_GetTick() - timeout > NFC_TIMEOUT) return 0xFF; // timeout
 8000eae:	f001 fc57 	bl	8002760 <HAL_GetTick>
 8000eb2:	0002      	movs	r2, r0
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	1ad2      	subs	r2, r2, r3
 8000eb8:	23fa      	movs	r3, #250	; 0xfa
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d901      	bls.n	8000ec4 <cr95read+0x28>
 8000ec0:	23ff      	movs	r3, #255	; 0xff
 8000ec2:	e098      	b.n	8000ff6 <cr95read+0x15a>
	} while (nfc_rx_read_ptr == nfc_rx_write_ptr);
 8000ec4:	4b4e      	ldr	r3, [pc, #312]	; (8001000 <cr95read+0x164>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	0019      	movs	r1, r3
 8000ecc:	4b4d      	ldr	r3, [pc, #308]	; (8001004 <cr95read+0x168>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2240      	movs	r2, #64	; 0x40
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	d0e9      	beq.n	8000eae <cr95read+0x12>
	uint8_t resp = nfc_rx_buf[nfc_rx_read_ptr];
 8000eda:	4b49      	ldr	r3, [pc, #292]	; (8001000 <cr95read+0x164>)
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	0019      	movs	r1, r3
 8000ee2:	230f      	movs	r3, #15
 8000ee4:	18fb      	adds	r3, r7, r3
 8000ee6:	4a48      	ldr	r2, [pc, #288]	; (8001008 <cr95read+0x16c>)
 8000ee8:	5c52      	ldrb	r2, [r2, r1]
 8000eea:	701a      	strb	r2, [r3, #0]
    if (++nfc_rx_read_ptr >= RX_BUFFER_LEN) nfc_rx_read_ptr = 0; // increase read pointer
 8000eec:	4b44      	ldr	r3, [pc, #272]	; (8001000 <cr95read+0x164>)
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	4a42      	ldr	r2, [pc, #264]	; (8001000 <cr95read+0x164>)
 8000ef8:	1c19      	adds	r1, r3, #0
 8000efa:	8011      	strh	r1, [r2, #0]
 8000efc:	2b3f      	cmp	r3, #63	; 0x3f
 8000efe:	d902      	bls.n	8000f06 <cr95read+0x6a>
 8000f00:	4b3f      	ldr	r3, [pc, #252]	; (8001000 <cr95read+0x164>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	801a      	strh	r2, [r3, #0]

    if (resp == 0x55) return resp;
 8000f06:	220f      	movs	r2, #15
 8000f08:	18bb      	adds	r3, r7, r2
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b55      	cmp	r3, #85	; 0x55
 8000f0e:	d102      	bne.n	8000f16 <cr95read+0x7a>
 8000f10:	18bb      	adds	r3, r7, r2
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	e06f      	b.n	8000ff6 <cr95read+0x15a>

	do
	{
		if (HAL_GetTick() - timeout > NFC_TIMEOUT) return 0xFF; // timeout
 8000f16:	f001 fc23 	bl	8002760 <HAL_GetTick>
 8000f1a:	0002      	movs	r2, r0
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	1ad2      	subs	r2, r2, r3
 8000f20:	23fa      	movs	r3, #250	; 0xfa
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d901      	bls.n	8000f2c <cr95read+0x90>
 8000f28:	23ff      	movs	r3, #255	; 0xff
 8000f2a:	e064      	b.n	8000ff6 <cr95read+0x15a>
	} while (nfc_rx_read_ptr == nfc_rx_write_ptr);
 8000f2c:	4b34      	ldr	r3, [pc, #208]	; (8001000 <cr95read+0x164>)
 8000f2e:	881b      	ldrh	r3, [r3, #0]
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	0019      	movs	r1, r3
 8000f34:	4b33      	ldr	r3, [pc, #204]	; (8001004 <cr95read+0x168>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	2240      	movs	r2, #64	; 0x40
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	4299      	cmp	r1, r3
 8000f40:	d0e9      	beq.n	8000f16 <cr95read+0x7a>
	uint8_t len = nfc_rx_buf[nfc_rx_read_ptr];
 8000f42:	4b2f      	ldr	r3, [pc, #188]	; (8001000 <cr95read+0x164>)
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	0019      	movs	r1, r3
 8000f4a:	2317      	movs	r3, #23
 8000f4c:	18fb      	adds	r3, r7, r3
 8000f4e:	4a2e      	ldr	r2, [pc, #184]	; (8001008 <cr95read+0x16c>)
 8000f50:	5c52      	ldrb	r2, [r2, r1]
 8000f52:	701a      	strb	r2, [r3, #0]
    if (++nfc_rx_read_ptr >= RX_BUFFER_LEN) nfc_rx_read_ptr = 0; // increase read pointer
 8000f54:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <cr95read+0x164>)
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	4a28      	ldr	r2, [pc, #160]	; (8001000 <cr95read+0x164>)
 8000f60:	1c19      	adds	r1, r3, #0
 8000f62:	8011      	strh	r1, [r2, #0]
 8000f64:	2b3f      	cmp	r3, #63	; 0x3f
 8000f66:	d902      	bls.n	8000f6e <cr95read+0xd2>
 8000f68:	4b25      	ldr	r3, [pc, #148]	; (8001000 <cr95read+0x164>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	801a      	strh	r2, [r3, #0]

    if (length) *length = len;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d035      	beq.n	8000fe0 <cr95read+0x144>
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	2217      	movs	r2, #23
 8000f78:	18ba      	adds	r2, r7, r2
 8000f7a:	7812      	ldrb	r2, [r2, #0]
 8000f7c:	701a      	strb	r2, [r3, #0]
    while (len--)
 8000f7e:	e02f      	b.n	8000fe0 <cr95read+0x144>
    {
    	do
    	{
    		if (HAL_GetTick() - timeout > NFC_TIMEOUT) return 0xFF; // timeout
 8000f80:	f001 fbee 	bl	8002760 <HAL_GetTick>
 8000f84:	0002      	movs	r2, r0
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	1ad2      	subs	r2, r2, r3
 8000f8a:	23fa      	movs	r3, #250	; 0xfa
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d901      	bls.n	8000f96 <cr95read+0xfa>
 8000f92:	23ff      	movs	r3, #255	; 0xff
 8000f94:	e02f      	b.n	8000ff6 <cr95read+0x15a>
    	} while (nfc_rx_read_ptr == nfc_rx_write_ptr);
 8000f96:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <cr95read+0x164>)
 8000f98:	881b      	ldrh	r3, [r3, #0]
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	0019      	movs	r1, r3
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <cr95read+0x168>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	2240      	movs	r2, #64	; 0x40
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d0e9      	beq.n	8000f80 <cr95read+0xe4>
    	if (data) *data++ = nfc_rx_buf[nfc_rx_read_ptr];
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d009      	beq.n	8000fc6 <cr95read+0x12a>
 8000fb2:	4b13      	ldr	r3, [pc, #76]	; (8001000 <cr95read+0x164>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	0019      	movs	r1, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	1c5a      	adds	r2, r3, #1
 8000fbe:	607a      	str	r2, [r7, #4]
 8000fc0:	4a11      	ldr	r2, [pc, #68]	; (8001008 <cr95read+0x16c>)
 8000fc2:	5c52      	ldrb	r2, [r2, r1]
 8000fc4:	701a      	strb	r2, [r3, #0]
        if (++nfc_rx_read_ptr >= RX_BUFFER_LEN) nfc_rx_read_ptr = 0; // increase read pointer
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <cr95read+0x164>)
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	3301      	adds	r3, #1
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <cr95read+0x164>)
 8000fd2:	1c19      	adds	r1, r3, #0
 8000fd4:	8011      	strh	r1, [r2, #0]
 8000fd6:	2b3f      	cmp	r3, #63	; 0x3f
 8000fd8:	d902      	bls.n	8000fe0 <cr95read+0x144>
 8000fda:	4b09      	ldr	r3, [pc, #36]	; (8001000 <cr95read+0x164>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	801a      	strh	r2, [r3, #0]
    while (len--)
 8000fe0:	2217      	movs	r2, #23
 8000fe2:	18bb      	adds	r3, r7, r2
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	18ba      	adds	r2, r7, r2
 8000fe8:	1e59      	subs	r1, r3, #1
 8000fea:	7011      	strb	r1, [r2, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1c7      	bne.n	8000f80 <cr95read+0xe4>
    }

    return resp;
 8000ff0:	230f      	movs	r3, #15
 8000ff2:	18fb      	adds	r3, r7, r3
 8000ff4:	781b      	ldrb	r3, [r3, #0]
}
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	b006      	add	sp, #24
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	20000130 	.word	0x20000130
 8001004:	200005d0 	.word	0x200005d0
 8001008:	200000f0 	.word	0x200000f0

0800100c <uart_process_command>:

static void uart_process_command(char *cmd)
{
 800100c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800100e:	b093      	sub	sp, #76	; 0x4c
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
    char *token;
    token = strtok(cmd, " ");
 8001014:	4ad7      	ldr	r2, [pc, #860]	; (8001374 <uart_process_command+0x368>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	0011      	movs	r1, r2
 800101a:	0018      	movs	r0, r3
 800101c:	f004 fa76 	bl	800550c <strtok>
 8001020:	0003      	movs	r3, r0
 8001022:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t data[16];
	uint8_t len;

	const uint8_t cmd_echo[] =  { 0x55 };
 8001024:	2328      	movs	r3, #40	; 0x28
 8001026:	18fb      	adds	r3, r7, r3
 8001028:	4ad3      	ldr	r2, [pc, #844]	; (8001378 <uart_process_command+0x36c>)
 800102a:	7812      	ldrb	r2, [r2, #0]
 800102c:	701a      	strb	r2, [r3, #0]
	const uint8_t cmd_idn[] =   { 0x01, 0x00 };
 800102e:	2324      	movs	r3, #36	; 0x24
 8001030:	18fb      	adds	r3, r7, r3
 8001032:	2201      	movs	r2, #1
 8001034:	801a      	strh	r2, [r3, #0]

    if (strcasecmp(token, "HELLO") == 0) {
 8001036:	4ad1      	ldr	r2, [pc, #836]	; (800137c <uart_process_command+0x370>)
 8001038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800103a:	0011      	movs	r1, r2
 800103c:	0018      	movs	r0, r3
 800103e:	f004 fa4b 	bl	80054d8 <strcasecmp>
 8001042:	1e03      	subs	r3, r0, #0
 8001044:	d104      	bne.n	8001050 <uart_process_command+0x44>
        printf("Communication is working\n");
 8001046:	4bce      	ldr	r3, [pc, #824]	; (8001380 <uart_process_command+0x374>)
 8001048:	0018      	movs	r0, r3
 800104a:	f004 fa1b 	bl	8005484 <puts>
    	} while (uart_rx_read_ptr == uart_rx_write_ptr);
    }
    else {
        printf("Unknown command\n");
    }
}
 800104e:	e2b9      	b.n	80015c4 <uart_process_command+0x5b8>
    else if (strcasecmp(token, "ON") == 0) {
 8001050:	4acc      	ldr	r2, [pc, #816]	; (8001384 <uart_process_command+0x378>)
 8001052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001054:	0011      	movs	r1, r2
 8001056:	0018      	movs	r0, r3
 8001058:	f004 fa3e 	bl	80054d8 <strcasecmp>
 800105c:	1e03      	subs	r3, r0, #0
 800105e:	d13b      	bne.n	80010d8 <uart_process_command+0xcc>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001060:	2380      	movs	r3, #128	; 0x80
 8001062:	0059      	lsls	r1, r3, #1
 8001064:	2390      	movs	r3, #144	; 0x90
 8001066:	05db      	lsls	r3, r3, #23
 8001068:	2201      	movs	r2, #1
 800106a:	0018      	movs	r0, r3
 800106c:	f002 f8e8 	bl	8003240 <HAL_GPIO_WritePin>
    	MX_USART1_UART_Init();
 8001070:	f000 fc4e 	bl	8001910 <MX_USART1_UART_Init>
        HAL_UART_Receive_DMA(&huart1, nfc_rx_buf, RX_BUFFER_LEN);
 8001074:	49c4      	ldr	r1, [pc, #784]	; (8001388 <uart_process_command+0x37c>)
 8001076:	4bc5      	ldr	r3, [pc, #788]	; (800138c <uart_process_command+0x380>)
 8001078:	2240      	movs	r2, #64	; 0x40
 800107a:	0018      	movs	r0, r3
 800107c:	f003 fc37 	bl	80048ee <HAL_UART_Receive_DMA>
    	HAL_Delay(5);
 8001080:	2005      	movs	r0, #5
 8001082:	f001 fb77 	bl	8002774 <HAL_Delay>
    	printf("RFID ON\n");
 8001086:	4bc2      	ldr	r3, [pc, #776]	; (8001390 <uart_process_command+0x384>)
 8001088:	0018      	movs	r0, r3
 800108a:	f004 f9fb 	bl	8005484 <puts>
        nfc_rx_read_ptr = nfc_rx_write_ptr;
 800108e:	4bc1      	ldr	r3, [pc, #772]	; (8001394 <uart_process_command+0x388>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	b29b      	uxth	r3, r3
 8001096:	2240      	movs	r2, #64	; 0x40
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	b29a      	uxth	r2, r3
 800109c:	4bbe      	ldr	r3, [pc, #760]	; (8001398 <uart_process_command+0x38c>)
 800109e:	801a      	strh	r2, [r3, #0]
    	cr95_wakeup();
 80010a0:	f7ff f8d0 	bl	8000244 <cr95_wakeup>
    	nfc_ready = true;
 80010a4:	4bbd      	ldr	r3, [pc, #756]	; (800139c <uart_process_command+0x390>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	701a      	strb	r2, [r3, #0]
    	SSD1306_GotoXY (45,10);
 80010aa:	210a      	movs	r1, #10
 80010ac:	202d      	movs	r0, #45	; 0x2d
 80010ae:	f000 feef 	bl	8001e90 <SSD1306_GotoXY>
    	SSD1306_Puts ("RFID", &Font_11x18, 1);
 80010b2:	49bb      	ldr	r1, [pc, #748]	; (80013a0 <uart_process_command+0x394>)
 80010b4:	4bbb      	ldr	r3, [pc, #748]	; (80013a4 <uart_process_command+0x398>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	0018      	movs	r0, r3
 80010ba:	f000 ff83 	bl	8001fc4 <SSD1306_Puts>
    	SSD1306_GotoXY (30, 30);
 80010be:	211e      	movs	r1, #30
 80010c0:	201e      	movs	r0, #30
 80010c2:	f000 fee5 	bl	8001e90 <SSD1306_GotoXY>
    	SSD1306_Puts ("SCANNER", &Font_11x18, 1);
 80010c6:	49b6      	ldr	r1, [pc, #728]	; (80013a0 <uart_process_command+0x394>)
 80010c8:	4bb7      	ldr	r3, [pc, #732]	; (80013a8 <uart_process_command+0x39c>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	0018      	movs	r0, r3
 80010ce:	f000 ff79 	bl	8001fc4 <SSD1306_Puts>
    	SSD1306_UpdateScreen(); // update screen
 80010d2:	f000 fe21 	bl	8001d18 <SSD1306_UpdateScreen>
}
 80010d6:	e275      	b.n	80015c4 <uart_process_command+0x5b8>
    else if (strcasecmp(token, "OFF") == 0) {
 80010d8:	4ab4      	ldr	r2, [pc, #720]	; (80013ac <uart_process_command+0x3a0>)
 80010da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010dc:	0011      	movs	r1, r2
 80010de:	0018      	movs	r0, r3
 80010e0:	f004 f9fa 	bl	80054d8 <strcasecmp>
 80010e4:	1e03      	subs	r3, r0, #0
 80010e6:	d126      	bne.n	8001136 <uart_process_command+0x12a>
    	nfc_ready = false;
 80010e8:	4bac      	ldr	r3, [pc, #688]	; (800139c <uart_process_command+0x390>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
        HAL_UART_AbortReceive(&huart1);
 80010ee:	4ba7      	ldr	r3, [pc, #668]	; (800138c <uart_process_command+0x380>)
 80010f0:	0018      	movs	r0, r3
 80010f2:	f003 fc4d 	bl	8004990 <HAL_UART_AbortReceive>
    	HAL_UART_DeInit(&huart1);
 80010f6:	4ba5      	ldr	r3, [pc, #660]	; (800138c <uart_process_command+0x380>)
 80010f8:	0018      	movs	r0, r3
 80010fa:	f003 fb15 	bl	8004728 <HAL_UART_DeInit>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80010fe:	2380      	movs	r3, #128	; 0x80
 8001100:	0059      	lsls	r1, r3, #1
 8001102:	2390      	movs	r3, #144	; 0x90
 8001104:	05db      	lsls	r3, r3, #23
 8001106:	2200      	movs	r2, #0
 8001108:	0018      	movs	r0, r3
 800110a:	f002 f899 	bl	8003240 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	48a7      	ldr	r0, [pc, #668]	; (80013b0 <uart_process_command+0x3a4>)
 8001114:	2200      	movs	r2, #0
 8001116:	0019      	movs	r1, r3
 8001118:	f002 f892 	bl	8003240 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800111c:	4ba4      	ldr	r3, [pc, #656]	; (80013b0 <uart_process_command+0x3a4>)
 800111e:	2200      	movs	r2, #0
 8001120:	2110      	movs	r1, #16
 8001122:	0018      	movs	r0, r3
 8001124:	f002 f88c 	bl	8003240 <HAL_GPIO_WritePin>
    	SSD1306_Clear();
 8001128:	f000 ff72 	bl	8002010 <SSD1306_Clear>
    	printf("RFID OFF\n");
 800112c:	4ba1      	ldr	r3, [pc, #644]	; (80013b4 <uart_process_command+0x3a8>)
 800112e:	0018      	movs	r0, r3
 8001130:	f004 f9a8 	bl	8005484 <puts>
}
 8001134:	e246      	b.n	80015c4 <uart_process_command+0x5b8>
    else if (strcasecmp(token, "ECHO") == 0) {
 8001136:	4aa0      	ldr	r2, [pc, #640]	; (80013b8 <uart_process_command+0x3ac>)
 8001138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800113a:	0011      	movs	r1, r2
 800113c:	0018      	movs	r0, r3
 800113e:	f004 f9cb 	bl	80054d8 <strcasecmp>
 8001142:	1e03      	subs	r3, r0, #0
 8001144:	d145      	bne.n	80011d2 <uart_process_command+0x1c6>
    	cr95write(cmd_echo, sizeof(cmd_echo));
 8001146:	2328      	movs	r3, #40	; 0x28
 8001148:	18fb      	adds	r3, r7, r3
 800114a:	2101      	movs	r1, #1
 800114c:	0018      	movs	r0, r3
 800114e:	f7ff fe8f 	bl	8000e70 <cr95write>
    	uint8_t resp = cr95read(NULL, NULL);
 8001152:	253d      	movs	r5, #61	; 0x3d
 8001154:	197c      	adds	r4, r7, r5
 8001156:	2100      	movs	r1, #0
 8001158:	2000      	movs	r0, #0
 800115a:	f7ff fe9f 	bl	8000e9c <cr95read>
 800115e:	0003      	movs	r3, r0
 8001160:	7023      	strb	r3, [r4, #0]
    	printf("ECHO %s %02X\n", (resp == 0x55) ? "yes" : "no", resp);
 8001162:	197b      	adds	r3, r7, r5
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b55      	cmp	r3, #85	; 0x55
 8001168:	d101      	bne.n	800116e <uart_process_command+0x162>
 800116a:	4b94      	ldr	r3, [pc, #592]	; (80013bc <uart_process_command+0x3b0>)
 800116c:	e000      	b.n	8001170 <uart_process_command+0x164>
 800116e:	4b94      	ldr	r3, [pc, #592]	; (80013c0 <uart_process_command+0x3b4>)
 8001170:	223d      	movs	r2, #61	; 0x3d
 8001172:	18ba      	adds	r2, r7, r2
 8001174:	7812      	ldrb	r2, [r2, #0]
 8001176:	4893      	ldr	r0, [pc, #588]	; (80013c4 <uart_process_command+0x3b8>)
 8001178:	0019      	movs	r1, r3
 800117a:	f004 f8e3 	bl	8005344 <iprintf>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800117e:	4b8c      	ldr	r3, [pc, #560]	; (80013b0 <uart_process_command+0x3a4>)
 8001180:	2201      	movs	r2, #1
 8001182:	2120      	movs	r1, #32
 8001184:	0018      	movs	r0, r3
 8001186:	f002 f85b 	bl	8003240 <HAL_GPIO_WritePin>
    	SSD1306_Clear();
 800118a:	f000 ff41 	bl	8002010 <SSD1306_Clear>
    	SSD1306_GotoXY (40,10);
 800118e:	210a      	movs	r1, #10
 8001190:	2028      	movs	r0, #40	; 0x28
 8001192:	f000 fe7d 	bl	8001e90 <SSD1306_GotoXY>
    	SSD1306_Puts ("ECHO", &Font_11x18, 1);
 8001196:	4982      	ldr	r1, [pc, #520]	; (80013a0 <uart_process_command+0x394>)
 8001198:	4b87      	ldr	r3, [pc, #540]	; (80013b8 <uart_process_command+0x3ac>)
 800119a:	2201      	movs	r2, #1
 800119c:	0018      	movs	r0, r3
 800119e:	f000 ff11 	bl	8001fc4 <SSD1306_Puts>
    	SSD1306_GotoXY (25, 30);
 80011a2:	211e      	movs	r1, #30
 80011a4:	2019      	movs	r0, #25
 80011a6:	f000 fe73 	bl	8001e90 <SSD1306_GotoXY>
    	SSD1306_Puts ("COMMAND", &Font_11x18, 1);
 80011aa:	497d      	ldr	r1, [pc, #500]	; (80013a0 <uart_process_command+0x394>)
 80011ac:	4b86      	ldr	r3, [pc, #536]	; (80013c8 <uart_process_command+0x3bc>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	0018      	movs	r0, r3
 80011b2:	f000 ff07 	bl	8001fc4 <SSD1306_Puts>
    	SSD1306_UpdateScreen(); // update screen
 80011b6:	f000 fdaf 	bl	8001d18 <SSD1306_UpdateScreen>
    	HAL_Delay(250);
 80011ba:	20fa      	movs	r0, #250	; 0xfa
 80011bc:	f001 fada 	bl	8002774 <HAL_Delay>
    	SSD1306_Clear();
 80011c0:	f000 ff26 	bl	8002010 <SSD1306_Clear>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80011c4:	4b7a      	ldr	r3, [pc, #488]	; (80013b0 <uart_process_command+0x3a4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	2120      	movs	r1, #32
 80011ca:	0018      	movs	r0, r3
 80011cc:	f002 f838 	bl	8003240 <HAL_GPIO_WritePin>
}
 80011d0:	e1f8      	b.n	80015c4 <uart_process_command+0x5b8>
    else if (strcasecmp(token, "IDN") == 0) {
 80011d2:	4a7e      	ldr	r2, [pc, #504]	; (80013cc <uart_process_command+0x3c0>)
 80011d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011d6:	0011      	movs	r1, r2
 80011d8:	0018      	movs	r0, r3
 80011da:	f004 f97d 	bl	80054d8 <strcasecmp>
 80011de:	1e03      	subs	r3, r0, #0
 80011e0:	d15c      	bne.n	800129c <uart_process_command+0x290>
    	cr95write(cmd_idn, sizeof(cmd_idn));
 80011e2:	2324      	movs	r3, #36	; 0x24
 80011e4:	18fb      	adds	r3, r7, r3
 80011e6:	2102      	movs	r1, #2
 80011e8:	0018      	movs	r0, r3
 80011ea:	f7ff fe41 	bl	8000e70 <cr95write>
    	if (cr95read(data, &len) == 0x00) {
 80011ee:	232b      	movs	r3, #43	; 0x2b
 80011f0:	18fa      	adds	r2, r7, r3
 80011f2:	232c      	movs	r3, #44	; 0x2c
 80011f4:	18fb      	adds	r3, r7, r3
 80011f6:	0011      	movs	r1, r2
 80011f8:	0018      	movs	r0, r3
 80011fa:	f7ff fe4f 	bl	8000e9c <cr95read>
 80011fe:	1e03      	subs	r3, r0, #0
 8001200:	d147      	bne.n	8001292 <uart_process_command+0x286>
    		printf("IDN =");
 8001202:	4b73      	ldr	r3, [pc, #460]	; (80013d0 <uart_process_command+0x3c4>)
 8001204:	0018      	movs	r0, r3
 8001206:	f004 f89d 	bl	8005344 <iprintf>
    		for (uint8_t i = 0; i < len; i++)
 800120a:	2347      	movs	r3, #71	; 0x47
 800120c:	18fb      	adds	r3, r7, r3
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
 8001212:	e019      	b.n	8001248 <uart_process_command+0x23c>
    			idn[i]=data[i];
 8001214:	2447      	movs	r4, #71	; 0x47
 8001216:	193b      	adds	r3, r7, r4
 8001218:	781a      	ldrb	r2, [r3, #0]
 800121a:	193b      	adds	r3, r7, r4
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	202c      	movs	r0, #44	; 0x2c
 8001220:	1839      	adds	r1, r7, r0
 8001222:	5c89      	ldrb	r1, [r1, r2]
 8001224:	2208      	movs	r2, #8
 8001226:	18ba      	adds	r2, r7, r2
 8001228:	54d1      	strb	r1, [r2, r3]
    			printf(" %02X", data[i]);
 800122a:	193b      	adds	r3, r7, r4
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	183a      	adds	r2, r7, r0
 8001230:	5cd3      	ldrb	r3, [r2, r3]
 8001232:	001a      	movs	r2, r3
 8001234:	4b67      	ldr	r3, [pc, #412]	; (80013d4 <uart_process_command+0x3c8>)
 8001236:	0011      	movs	r1, r2
 8001238:	0018      	movs	r0, r3
 800123a:	f004 f883 	bl	8005344 <iprintf>
    		for (uint8_t i = 0; i < len; i++)
 800123e:	193b      	adds	r3, r7, r4
 8001240:	781a      	ldrb	r2, [r3, #0]
 8001242:	193b      	adds	r3, r7, r4
 8001244:	3201      	adds	r2, #1
 8001246:	701a      	strb	r2, [r3, #0]
 8001248:	232b      	movs	r3, #43	; 0x2b
 800124a:	18fb      	adds	r3, r7, r3
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2247      	movs	r2, #71	; 0x47
 8001250:	18ba      	adds	r2, r7, r2
 8001252:	7812      	ldrb	r2, [r2, #0]
 8001254:	429a      	cmp	r2, r3
 8001256:	d3dd      	bcc.n	8001214 <uart_process_command+0x208>
    		SSD1306_Clear();
 8001258:	f000 feda 	bl	8002010 <SSD1306_Clear>
    		SSD1306_GotoXY (50, 10);
 800125c:	210a      	movs	r1, #10
 800125e:	2032      	movs	r0, #50	; 0x32
 8001260:	f000 fe16 	bl	8001e90 <SSD1306_GotoXY>
    		SSD1306_Puts ("IDN:", &Font_11x18, 1);
 8001264:	494e      	ldr	r1, [pc, #312]	; (80013a0 <uart_process_command+0x394>)
 8001266:	4b5c      	ldr	r3, [pc, #368]	; (80013d8 <uart_process_command+0x3cc>)
 8001268:	2201      	movs	r2, #1
 800126a:	0018      	movs	r0, r3
 800126c:	f000 feaa 	bl	8001fc4 <SSD1306_Puts>
    		SSD1306_GotoXY (20, 30);
 8001270:	211e      	movs	r1, #30
 8001272:	2014      	movs	r0, #20
 8001274:	f000 fe0c 	bl	8001e90 <SSD1306_GotoXY>
    		SSD1306_Puts (idn, &Font_7x10, 1);
 8001278:	4958      	ldr	r1, [pc, #352]	; (80013dc <uart_process_command+0x3d0>)
 800127a:	2308      	movs	r3, #8
 800127c:	18fb      	adds	r3, r7, r3
 800127e:	2201      	movs	r2, #1
 8001280:	0018      	movs	r0, r3
 8001282:	f000 fe9f 	bl	8001fc4 <SSD1306_Puts>
    		SSD1306_UpdateScreen(); // update screen
 8001286:	f000 fd47 	bl	8001d18 <SSD1306_UpdateScreen>
    		printf("\n");
 800128a:	200a      	movs	r0, #10
 800128c:	f004 f874 	bl	8005378 <putchar>
}
 8001290:	e198      	b.n	80015c4 <uart_process_command+0x5b8>
    		printf("IDN error\n");
 8001292:	4b53      	ldr	r3, [pc, #332]	; (80013e0 <uart_process_command+0x3d4>)
 8001294:	0018      	movs	r0, r3
 8001296:	f004 f8f5 	bl	8005484 <puts>
}
 800129a:	e193      	b.n	80015c4 <uart_process_command+0x5b8>
    else if (strcasecmp(token, "INIT14") == 0) {
 800129c:	4a51      	ldr	r2, [pc, #324]	; (80013e4 <uart_process_command+0x3d8>)
 800129e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012a0:	0011      	movs	r1, r2
 80012a2:	0018      	movs	r0, r3
 80012a4:	f004 f918 	bl	80054d8 <strcasecmp>
 80012a8:	1e03      	subs	r3, r0, #0
 80012aa:	d102      	bne.n	80012b2 <uart_process_command+0x2a6>
    	cr95_init14();
 80012ac:	f7ff f81a 	bl	80002e4 <cr95_init14>
}
 80012b0:	e188      	b.n	80015c4 <uart_process_command+0x5b8>
    else if (strcasecmp(token, "INIT15") == 0) {
 80012b2:	4a4d      	ldr	r2, [pc, #308]	; (80013e8 <uart_process_command+0x3dc>)
 80012b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012b6:	0011      	movs	r1, r2
 80012b8:	0018      	movs	r0, r3
 80012ba:	f004 f90d 	bl	80054d8 <strcasecmp>
 80012be:	1e03      	subs	r3, r0, #0
 80012c0:	d102      	bne.n	80012c8 <uart_process_command+0x2bc>
        cr95_init15();
 80012c2:	f7ff f871 	bl	80003a8 <cr95_init15>
}
 80012c6:	e17d      	b.n	80015c4 <uart_process_command+0x5b8>
    else if (strcasecmp(token, "READ") == 0) {
 80012c8:	4a48      	ldr	r2, [pc, #288]	; (80013ec <uart_process_command+0x3e0>)
 80012ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012cc:	0011      	movs	r1, r2
 80012ce:	0018      	movs	r0, r3
 80012d0:	f004 f902 	bl	80054d8 <strcasecmp>
 80012d4:	1e03      	subs	r3, r0, #0
 80012d6:	d12b      	bne.n	8001330 <uart_process_command+0x324>
    	cr95_read();
 80012d8:	f7ff f8aa 	bl	8000430 <cr95_read>
    	if (disp_len == 1) {
 80012dc:	4b44      	ldr	r3, [pc, #272]	; (80013f0 <uart_process_command+0x3e4>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d111      	bne.n	8001308 <uart_process_command+0x2fc>
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80012e4:	4b32      	ldr	r3, [pc, #200]	; (80013b0 <uart_process_command+0x3a4>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	2110      	movs	r1, #16
 80012ea:	0018      	movs	r0, r3
 80012ec:	f001 ffa8 	bl	8003240 <HAL_GPIO_WritePin>
    		HAL_Delay(2000);
 80012f0:	23fa      	movs	r3, #250	; 0xfa
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	0018      	movs	r0, r3
 80012f6:	f001 fa3d 	bl	8002774 <HAL_Delay>
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80012fa:	4b2d      	ldr	r3, [pc, #180]	; (80013b0 <uart_process_command+0x3a4>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	2110      	movs	r1, #16
 8001300:	0018      	movs	r0, r3
 8001302:	f001 ff9d 	bl	8003240 <HAL_GPIO_WritePin>
}
 8001306:	e15d      	b.n	80015c4 <uart_process_command+0x5b8>
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001308:	2380      	movs	r3, #128	; 0x80
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	4828      	ldr	r0, [pc, #160]	; (80013b0 <uart_process_command+0x3a4>)
 800130e:	2201      	movs	r2, #1
 8001310:	0019      	movs	r1, r3
 8001312:	f001 ff95 	bl	8003240 <HAL_GPIO_WritePin>
    		HAL_Delay(2000);
 8001316:	23fa      	movs	r3, #250	; 0xfa
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	0018      	movs	r0, r3
 800131c:	f001 fa2a 	bl	8002774 <HAL_Delay>
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001320:	2380      	movs	r3, #128	; 0x80
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	4822      	ldr	r0, [pc, #136]	; (80013b0 <uart_process_command+0x3a4>)
 8001326:	2200      	movs	r2, #0
 8001328:	0019      	movs	r1, r3
 800132a:	f001 ff89 	bl	8003240 <HAL_GPIO_WritePin>
}
 800132e:	e149      	b.n	80015c4 <uart_process_command+0x5b8>
    else if (strcasecmp(token, "READTOPAZ") == 0) {
 8001330:	4a30      	ldr	r2, [pc, #192]	; (80013f4 <uart_process_command+0x3e8>)
 8001332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001334:	0011      	movs	r1, r2
 8001336:	0018      	movs	r0, r3
 8001338:	f004 f8ce 	bl	80054d8 <strcasecmp>
 800133c:	1e03      	subs	r3, r0, #0
 800133e:	d102      	bne.n	8001346 <uart_process_command+0x33a>
        cr95_readtopaz();
 8001340:	f7ff fb3a 	bl	80009b8 <cr95_readtopaz>
}
 8001344:	e13e      	b.n	80015c4 <uart_process_command+0x5b8>
    else if (strcasecmp(token, "CALIBRATE") == 0) {
 8001346:	4a2c      	ldr	r2, [pc, #176]	; (80013f8 <uart_process_command+0x3ec>)
 8001348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800134a:	0011      	movs	r1, r2
 800134c:	0018      	movs	r0, r3
 800134e:	f004 f8c3 	bl	80054d8 <strcasecmp>
 8001352:	1e03      	subs	r3, r0, #0
 8001354:	d102      	bne.n	800135c <uart_process_command+0x350>
    	cr95_calibrate();
 8001356:	f7ff fbe7 	bl	8000b28 <cr95_calibrate>
}
 800135a:	e133      	b.n	80015c4 <uart_process_command+0x5b8>
    else if (strcasecmp(token, "IDLE") == 0) {
 800135c:	4a27      	ldr	r2, [pc, #156]	; (80013fc <uart_process_command+0x3f0>)
 800135e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001360:	0011      	movs	r1, r2
 8001362:	0018      	movs	r0, r3
 8001364:	f004 f8b8 	bl	80054d8 <strcasecmp>
 8001368:	1e03      	subs	r3, r0, #0
 800136a:	d149      	bne.n	8001400 <uart_process_command+0x3f4>
    	cr95_idle(1);
 800136c:	2001      	movs	r0, #1
 800136e:	f7fe ff7f 	bl	8000270 <cr95_idle>
}
 8001372:	e127      	b.n	80015c4 <uart_process_command+0x5b8>
 8001374:	08006d30 	.word	0x08006d30
 8001378:	08006eac 	.word	0x08006eac
 800137c:	08006d34 	.word	0x08006d34
 8001380:	08006d3c 	.word	0x08006d3c
 8001384:	08006d58 	.word	0x08006d58
 8001388:	200000f0 	.word	0x200000f0
 800138c:	20000614 	.word	0x20000614
 8001390:	08006d5c 	.word	0x08006d5c
 8001394:	200005d0 	.word	0x200005d0
 8001398:	20000130 	.word	0x20000130
 800139c:	20000132 	.word	0x20000132
 80013a0:	20000008 	.word	0x20000008
 80013a4:	08006d64 	.word	0x08006d64
 80013a8:	08006d6c 	.word	0x08006d6c
 80013ac:	08006d74 	.word	0x08006d74
 80013b0:	48000400 	.word	0x48000400
 80013b4:	08006d78 	.word	0x08006d78
 80013b8:	08006d84 	.word	0x08006d84
 80013bc:	08006d8c 	.word	0x08006d8c
 80013c0:	08006d90 	.word	0x08006d90
 80013c4:	08006d94 	.word	0x08006d94
 80013c8:	08006da4 	.word	0x08006da4
 80013cc:	08006dac 	.word	0x08006dac
 80013d0:	08006db0 	.word	0x08006db0
 80013d4:	08006db8 	.word	0x08006db8
 80013d8:	08006dc0 	.word	0x08006dc0
 80013dc:	20000000 	.word	0x20000000
 80013e0:	08006dc8 	.word	0x08006dc8
 80013e4:	08006dd4 	.word	0x08006dd4
 80013e8:	08006ddc 	.word	0x08006ddc
 80013ec:	08006de4 	.word	0x08006de4
 80013f0:	2000071c 	.word	0x2000071c
 80013f4:	08006dec 	.word	0x08006dec
 80013f8:	08006df8 	.word	0x08006df8
 80013fc:	08006e04 	.word	0x08006e04
    else if (strcasecmp(token, "WAKEUP") == 0) {
 8001400:	4a72      	ldr	r2, [pc, #456]	; (80015cc <uart_process_command+0x5c0>)
 8001402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001404:	0011      	movs	r1, r2
 8001406:	0018      	movs	r0, r3
 8001408:	f004 f866 	bl	80054d8 <strcasecmp>
 800140c:	1e03      	subs	r3, r0, #0
 800140e:	d117      	bne.n	8001440 <uart_process_command+0x434>
    	cr95_wakeup();
 8001410:	f7fe ff18 	bl	8000244 <cr95_wakeup>
    	uint8_t resp = cr95read(data, &len);
 8001414:	253e      	movs	r5, #62	; 0x3e
 8001416:	197c      	adds	r4, r7, r5
 8001418:	232b      	movs	r3, #43	; 0x2b
 800141a:	18fa      	adds	r2, r7, r3
 800141c:	262c      	movs	r6, #44	; 0x2c
 800141e:	19bb      	adds	r3, r7, r6
 8001420:	0011      	movs	r1, r2
 8001422:	0018      	movs	r0, r3
 8001424:	f7ff fd3a 	bl	8000e9c <cr95read>
 8001428:	0003      	movs	r3, r0
 800142a:	7023      	strb	r3, [r4, #0]
    	printf("Code of wakeup is: %02X with response: %02X\n", data[0],resp);
 800142c:	19bb      	adds	r3, r7, r6
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	0019      	movs	r1, r3
 8001432:	197b      	adds	r3, r7, r5
 8001434:	781a      	ldrb	r2, [r3, #0]
 8001436:	4b66      	ldr	r3, [pc, #408]	; (80015d0 <uart_process_command+0x5c4>)
 8001438:	0018      	movs	r0, r3
 800143a:	f003 ff83 	bl	8005344 <iprintf>
}
 800143e:	e0c1      	b.n	80015c4 <uart_process_command+0x5b8>
    else if (strcasecmp(token, "AUTO") == 0) {
 8001440:	4a64      	ldr	r2, [pc, #400]	; (80015d4 <uart_process_command+0x5c8>)
 8001442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001444:	0011      	movs	r1, r2
 8001446:	0018      	movs	r0, r3
 8001448:	f004 f846 	bl	80054d8 <strcasecmp>
 800144c:	1e03      	subs	r3, r0, #0
 800144e:	d000      	beq.n	8001452 <uart_process_command+0x446>
 8001450:	e0b4      	b.n	80015bc <uart_process_command+0x5b0>
    	SSD1306_Clear();
 8001452:	f000 fddd 	bl	8002010 <SSD1306_Clear>
    	SSD1306_GotoXY (1,10);
 8001456:	210a      	movs	r1, #10
 8001458:	2001      	movs	r0, #1
 800145a:	f000 fd19 	bl	8001e90 <SSD1306_GotoXY>
    	SSD1306_Puts ("Calibration", &Font_11x18, 1);
 800145e:	495e      	ldr	r1, [pc, #376]	; (80015d8 <uart_process_command+0x5cc>)
 8001460:	4b5e      	ldr	r3, [pc, #376]	; (80015dc <uart_process_command+0x5d0>)
 8001462:	2201      	movs	r2, #1
 8001464:	0018      	movs	r0, r3
 8001466:	f000 fdad 	bl	8001fc4 <SSD1306_Puts>
    	SSD1306_GotoXY (15,30);
 800146a:	211e      	movs	r1, #30
 800146c:	200f      	movs	r0, #15
 800146e:	f000 fd0f 	bl	8001e90 <SSD1306_GotoXY>
    	SSD1306_Puts ("sequence", &Font_11x18, 1);
 8001472:	4959      	ldr	r1, [pc, #356]	; (80015d8 <uart_process_command+0x5cc>)
 8001474:	4b5a      	ldr	r3, [pc, #360]	; (80015e0 <uart_process_command+0x5d4>)
 8001476:	2201      	movs	r2, #1
 8001478:	0018      	movs	r0, r3
 800147a:	f000 fda3 	bl	8001fc4 <SSD1306_Puts>
    	SSD1306_UpdateScreen();
 800147e:	f000 fc4b 	bl	8001d18 <SSD1306_UpdateScreen>
    	cr95_calibrate();
 8001482:	f7ff fb51 	bl	8000b28 <cr95_calibrate>
    	SSD1306_Clear();
 8001486:	f000 fdc3 	bl	8002010 <SSD1306_Clear>
    	SSD1306_GotoXY (45,10);
 800148a:	210a      	movs	r1, #10
 800148c:	202d      	movs	r0, #45	; 0x2d
 800148e:	f000 fcff 	bl	8001e90 <SSD1306_GotoXY>
    	SSD1306_Puts ("RFID", &Font_11x18, 1);
 8001492:	4951      	ldr	r1, [pc, #324]	; (80015d8 <uart_process_command+0x5cc>)
 8001494:	4b53      	ldr	r3, [pc, #332]	; (80015e4 <uart_process_command+0x5d8>)
 8001496:	2201      	movs	r2, #1
 8001498:	0018      	movs	r0, r3
 800149a:	f000 fd93 	bl	8001fc4 <SSD1306_Puts>
    	SSD1306_GotoXY (30, 30);
 800149e:	211e      	movs	r1, #30
 80014a0:	201e      	movs	r0, #30
 80014a2:	f000 fcf5 	bl	8001e90 <SSD1306_GotoXY>
    	SSD1306_Puts ("SCANNER", &Font_11x18, 1);
 80014a6:	494c      	ldr	r1, [pc, #304]	; (80015d8 <uart_process_command+0x5cc>)
 80014a8:	4b4f      	ldr	r3, [pc, #316]	; (80015e8 <uart_process_command+0x5dc>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	0018      	movs	r0, r3
 80014ae:	f000 fd89 	bl	8001fc4 <SSD1306_Puts>
    	SSD1306_UpdateScreen();
 80014b2:	f000 fc31 	bl	8001d18 <SSD1306_UpdateScreen>
        	cr95_idle(0);
 80014b6:	2000      	movs	r0, #0
 80014b8:	f7fe feda 	bl	8000270 <cr95_idle>
			do {} while (nfc_rx_read_ptr == nfc_rx_write_ptr);
 80014bc:	4b4b      	ldr	r3, [pc, #300]	; (80015ec <uart_process_command+0x5e0>)
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	0019      	movs	r1, r3
 80014c4:	4b4a      	ldr	r3, [pc, #296]	; (80015f0 <uart_process_command+0x5e4>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2240      	movs	r2, #64	; 0x40
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	4299      	cmp	r1, r3
 80014d0:	d0f4      	beq.n	80014bc <uart_process_command+0x4b0>
			uint8_t resp = cr95read(data, &len);
 80014d2:	253f      	movs	r5, #63	; 0x3f
 80014d4:	197c      	adds	r4, r7, r5
 80014d6:	232b      	movs	r3, #43	; 0x2b
 80014d8:	18fa      	adds	r2, r7, r3
 80014da:	262c      	movs	r6, #44	; 0x2c
 80014dc:	19bb      	adds	r3, r7, r6
 80014de:	0011      	movs	r1, r2
 80014e0:	0018      	movs	r0, r3
 80014e2:	f7ff fcdb 	bl	8000e9c <cr95read>
 80014e6:	0003      	movs	r3, r0
 80014e8:	7023      	strb	r3, [r4, #0]
			if (resp == 0x00 && data[0] == 0x02) printf("WAKEUP by tag detect\n");
 80014ea:	197b      	adds	r3, r7, r5
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d108      	bne.n	8001504 <uart_process_command+0x4f8>
 80014f2:	19bb      	adds	r3, r7, r6
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d104      	bne.n	8001504 <uart_process_command+0x4f8>
 80014fa:	4b3e      	ldr	r3, [pc, #248]	; (80015f4 <uart_process_command+0x5e8>)
 80014fc:	0018      	movs	r0, r3
 80014fe:	f003 ffc1 	bl	8005484 <puts>
 8001502:	e003      	b.n	800150c <uart_process_command+0x500>
			else printf("Error\n");
 8001504:	4b3c      	ldr	r3, [pc, #240]	; (80015f8 <uart_process_command+0x5ec>)
 8001506:	0018      	movs	r0, r3
 8001508:	f003 ffbc 	bl	8005484 <puts>
			printf("Code of wakeup is:%02X\n", data[0]);
 800150c:	232c      	movs	r3, #44	; 0x2c
 800150e:	18fb      	adds	r3, r7, r3
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	001a      	movs	r2, r3
 8001514:	4b39      	ldr	r3, [pc, #228]	; (80015fc <uart_process_command+0x5f0>)
 8001516:	0011      	movs	r1, r2
 8001518:	0018      	movs	r0, r3
 800151a:	f003 ff13 	bl	8005344 <iprintf>
			cr95_init14();
 800151e:	f7fe fee1 	bl	80002e4 <cr95_init14>
        	cr95_read();
 8001522:	f7fe ff85 	bl	8000430 <cr95_read>
        	if (disp_len == 1) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001526:	4b36      	ldr	r3, [pc, #216]	; (8001600 <uart_process_command+0x5f4>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d105      	bne.n	800153a <uart_process_command+0x52e>
 800152e:	4b35      	ldr	r3, [pc, #212]	; (8001604 <uart_process_command+0x5f8>)
 8001530:	2201      	movs	r2, #1
 8001532:	2110      	movs	r1, #16
 8001534:	0018      	movs	r0, r3
 8001536:	f001 fe83 	bl	8003240 <HAL_GPIO_WritePin>
        	if (disp_len == 2) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800153a:	4b31      	ldr	r3, [pc, #196]	; (8001600 <uart_process_command+0x5f4>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b02      	cmp	r3, #2
 8001540:	d106      	bne.n	8001550 <uart_process_command+0x544>
 8001542:	2380      	movs	r3, #128	; 0x80
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	482f      	ldr	r0, [pc, #188]	; (8001604 <uart_process_command+0x5f8>)
 8001548:	2201      	movs	r2, #1
 800154a:	0019      	movs	r1, r3
 800154c:	f001 fe78 	bl	8003240 <HAL_GPIO_WritePin>
        	HAL_Delay(3000);
 8001550:	4b2d      	ldr	r3, [pc, #180]	; (8001608 <uart_process_command+0x5fc>)
 8001552:	0018      	movs	r0, r3
 8001554:	f001 f90e 	bl	8002774 <HAL_Delay>
        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001558:	4b2a      	ldr	r3, [pc, #168]	; (8001604 <uart_process_command+0x5f8>)
 800155a:	2200      	movs	r2, #0
 800155c:	2110      	movs	r1, #16
 800155e:	0018      	movs	r0, r3
 8001560:	f001 fe6e 	bl	8003240 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	4826      	ldr	r0, [pc, #152]	; (8001604 <uart_process_command+0x5f8>)
 800156a:	2200      	movs	r2, #0
 800156c:	0019      	movs	r1, r3
 800156e:	f001 fe67 	bl	8003240 <HAL_GPIO_WritePin>
        	SSD1306_Clear();
 8001572:	f000 fd4d 	bl	8002010 <SSD1306_Clear>
        	SSD1306_GotoXY (45,10);
 8001576:	210a      	movs	r1, #10
 8001578:	202d      	movs	r0, #45	; 0x2d
 800157a:	f000 fc89 	bl	8001e90 <SSD1306_GotoXY>
        	SSD1306_Puts ("RFID", &Font_11x18, 1);
 800157e:	4916      	ldr	r1, [pc, #88]	; (80015d8 <uart_process_command+0x5cc>)
 8001580:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <uart_process_command+0x5d8>)
 8001582:	2201      	movs	r2, #1
 8001584:	0018      	movs	r0, r3
 8001586:	f000 fd1d 	bl	8001fc4 <SSD1306_Puts>
        	SSD1306_GotoXY (30, 30);
 800158a:	211e      	movs	r1, #30
 800158c:	201e      	movs	r0, #30
 800158e:	f000 fc7f 	bl	8001e90 <SSD1306_GotoXY>
        	SSD1306_Puts ("SCANNER", &Font_11x18, 1);
 8001592:	4911      	ldr	r1, [pc, #68]	; (80015d8 <uart_process_command+0x5cc>)
 8001594:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <uart_process_command+0x5dc>)
 8001596:	2201      	movs	r2, #1
 8001598:	0018      	movs	r0, r3
 800159a:	f000 fd13 	bl	8001fc4 <SSD1306_Puts>
        	SSD1306_UpdateScreen();
 800159e:	f000 fbbb 	bl	8001d18 <SSD1306_UpdateScreen>
    	} while (uart_rx_read_ptr == uart_rx_write_ptr);
 80015a2:	4b1a      	ldr	r3, [pc, #104]	; (800160c <uart_process_command+0x600>)
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	0019      	movs	r1, r3
 80015aa:	4b19      	ldr	r3, [pc, #100]	; (8001610 <uart_process_command+0x604>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2240      	movs	r2, #64	; 0x40
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	4299      	cmp	r1, r3
 80015b6:	d100      	bne.n	80015ba <uart_process_command+0x5ae>
 80015b8:	e77d      	b.n	80014b6 <uart_process_command+0x4aa>
}
 80015ba:	e003      	b.n	80015c4 <uart_process_command+0x5b8>
        printf("Unknown command\n");
 80015bc:	4b15      	ldr	r3, [pc, #84]	; (8001614 <uart_process_command+0x608>)
 80015be:	0018      	movs	r0, r3
 80015c0:	f003 ff60 	bl	8005484 <puts>
}
 80015c4:	46c0      	nop			; (mov r8, r8)
 80015c6:	46bd      	mov	sp, r7
 80015c8:	b013      	add	sp, #76	; 0x4c
 80015ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015cc:	08006e0c 	.word	0x08006e0c
 80015d0:	08006e14 	.word	0x08006e14
 80015d4:	08006e44 	.word	0x08006e44
 80015d8:	20000008 	.word	0x20000008
 80015dc:	08006e4c 	.word	0x08006e4c
 80015e0:	08006e58 	.word	0x08006e58
 80015e4:	08006d64 	.word	0x08006d64
 80015e8:	08006d6c 	.word	0x08006d6c
 80015ec:	20000130 	.word	0x20000130
 80015f0:	200005d0 	.word	0x200005d0
 80015f4:	08006e64 	.word	0x08006e64
 80015f8:	08006e7c 	.word	0x08006e7c
 80015fc:	08006e84 	.word	0x08006e84
 8001600:	2000071c 	.word	0x2000071c
 8001604:	48000400 	.word	0x48000400
 8001608:	00000bb8 	.word	0x00000bb8
 800160c:	200000ec 	.word	0x200000ec
 8001610:	2000058c 	.word	0x2000058c
 8001614:	08006e9c 	.word	0x08006e9c

08001618 <uart_byte_available>:


static void uart_byte_available(uint8_t c)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	0002      	movs	r2, r0
 8001620:	1dfb      	adds	r3, r7, #7
 8001622:	701a      	strb	r2, [r3, #0]
    static uint16_t cnt;
    static char data[CMD_BUFFER_LEN];

    if (cnt < CMD_BUFFER_LEN) data[cnt++] = c;
 8001624:	4b13      	ldr	r3, [pc, #76]	; (8001674 <uart_byte_available+0x5c>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	2b3f      	cmp	r3, #63	; 0x3f
 800162a:	d80a      	bhi.n	8001642 <uart_byte_available+0x2a>
 800162c:	4b11      	ldr	r3, [pc, #68]	; (8001674 <uart_byte_available+0x5c>)
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	1c5a      	adds	r2, r3, #1
 8001632:	b291      	uxth	r1, r2
 8001634:	4a0f      	ldr	r2, [pc, #60]	; (8001674 <uart_byte_available+0x5c>)
 8001636:	8011      	strh	r1, [r2, #0]
 8001638:	0019      	movs	r1, r3
 800163a:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <uart_byte_available+0x60>)
 800163c:	1dfa      	adds	r2, r7, #7
 800163e:	7812      	ldrb	r2, [r2, #0]
 8001640:	545a      	strb	r2, [r3, r1]
    if (c == '\n' || c == '\r') {
 8001642:	1dfb      	adds	r3, r7, #7
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b0a      	cmp	r3, #10
 8001648:	d003      	beq.n	8001652 <uart_byte_available+0x3a>
 800164a:	1dfb      	adds	r3, r7, #7
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b0d      	cmp	r3, #13
 8001650:	d10c      	bne.n	800166c <uart_byte_available+0x54>
        data[cnt - 1] = '\0';
 8001652:	4b08      	ldr	r3, [pc, #32]	; (8001674 <uart_byte_available+0x5c>)
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	3b01      	subs	r3, #1
 8001658:	4a07      	ldr	r2, [pc, #28]	; (8001678 <uart_byte_available+0x60>)
 800165a:	2100      	movs	r1, #0
 800165c:	54d1      	strb	r1, [r2, r3]
        uart_process_command(data);
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <uart_byte_available+0x60>)
 8001660:	0018      	movs	r0, r3
 8001662:	f7ff fcd3 	bl	800100c <uart_process_command>
        cnt = 0;
 8001666:	4b03      	ldr	r3, [pc, #12]	; (8001674 <uart_byte_available+0x5c>)
 8001668:	2200      	movs	r2, #0
 800166a:	801a      	strh	r2, [r3, #0]
    }
}
 800166c:	46c0      	nop			; (mov r8, r8)
 800166e:	46bd      	mov	sp, r7
 8001670:	b002      	add	sp, #8
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000134 	.word	0x20000134
 8001678:	20000138 	.word	0x20000138

0800167c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800167c:	b5b0      	push	{r4, r5, r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001682:	f001 f813 	bl	80026ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001686:	f000 f89f 	bl	80017c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800168a:	f000 f9c9 	bl	8001a20 <MX_GPIO_Init>
  MX_DMA_Init();
 800168e:	f000 f9a1 	bl	80019d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001692:	f000 f96f 	bl	8001974 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001696:	f000 f93b 	bl	8001910 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800169a:	f000 f8f9 	bl	8001890 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init ();
 800169e:	f000 fa77 	bl	8001b90 <SSD1306_Init>
  HAL_UART_DeInit(&huart1);
 80016a2:	4b3e      	ldr	r3, [pc, #248]	; (800179c <main+0x120>)
 80016a4:	0018      	movs	r0, r3
 80016a6:	f003 f83f 	bl	8004728 <HAL_UART_DeInit>
  HAL_UART_Receive_DMA(&huart2, uart_rx_buf, RX_BUFFER_LEN);
 80016aa:	493d      	ldr	r1, [pc, #244]	; (80017a0 <main+0x124>)
 80016ac:	4b3d      	ldr	r3, [pc, #244]	; (80017a4 <main+0x128>)
 80016ae:	2240      	movs	r2, #64	; 0x40
 80016b0:	0018      	movs	r0, r3
 80016b2:	f003 f91c 	bl	80048ee <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
#if 1
	  while (uart_rx_read_ptr != uart_rx_write_ptr) {
 80016b6:	e01b      	b.n	80016f0 <main+0x74>
	      uint8_t b = uart_rx_buf[uart_rx_read_ptr];
 80016b8:	4b3b      	ldr	r3, [pc, #236]	; (80017a8 <main+0x12c>)
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	0019      	movs	r1, r3
 80016c0:	2315      	movs	r3, #21
 80016c2:	18fb      	adds	r3, r7, r3
 80016c4:	4a36      	ldr	r2, [pc, #216]	; (80017a0 <main+0x124>)
 80016c6:	5c52      	ldrb	r2, [r2, r1]
 80016c8:	701a      	strb	r2, [r3, #0]
	      if (++uart_rx_read_ptr >= RX_BUFFER_LEN) uart_rx_read_ptr = 0; // increase read pointer
 80016ca:	4b37      	ldr	r3, [pc, #220]	; (80017a8 <main+0x12c>)
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	3301      	adds	r3, #1
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	4a34      	ldr	r2, [pc, #208]	; (80017a8 <main+0x12c>)
 80016d6:	1c19      	adds	r1, r3, #0
 80016d8:	8011      	strh	r1, [r2, #0]
 80016da:	2b3f      	cmp	r3, #63	; 0x3f
 80016dc:	d902      	bls.n	80016e4 <main+0x68>
 80016de:	4b32      	ldr	r3, [pc, #200]	; (80017a8 <main+0x12c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	801a      	strh	r2, [r3, #0]

	      uart_byte_available(b); // process every received byte with the RX state machine
 80016e4:	2315      	movs	r3, #21
 80016e6:	18fb      	adds	r3, r7, r3
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	0018      	movs	r0, r3
 80016ec:	f7ff ff94 	bl	8001618 <uart_byte_available>
	  while (uart_rx_read_ptr != uart_rx_write_ptr) {
 80016f0:	4b2d      	ldr	r3, [pc, #180]	; (80017a8 <main+0x12c>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	0019      	movs	r1, r3
 80016f8:	4b2c      	ldr	r3, [pc, #176]	; (80017ac <main+0x130>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2240      	movs	r2, #64	; 0x40
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	4299      	cmp	r1, r3
 8001704:	d1d8      	bne.n	80016b8 <main+0x3c>
	  }

	  if (nfc_ready && nfc_rx_read_ptr != nfc_rx_write_ptr) {
 8001706:	4b2a      	ldr	r3, [pc, #168]	; (80017b0 <main+0x134>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0f0      	beq.n	80016f0 <main+0x74>
 800170e:	4b29      	ldr	r3, [pc, #164]	; (80017b4 <main+0x138>)
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	b29b      	uxth	r3, r3
 8001714:	0019      	movs	r1, r3
 8001716:	4b28      	ldr	r3, [pc, #160]	; (80017b8 <main+0x13c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2240      	movs	r2, #64	; 0x40
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	4299      	cmp	r1, r3
 8001722:	d0e5      	beq.n	80016f0 <main+0x74>
		  uint8_t data[16];
		  uint8_t len;
		  uint8_t resp = cr95read(data, &len);
 8001724:	2516      	movs	r5, #22
 8001726:	197c      	adds	r4, r7, r5
 8001728:	1cfa      	adds	r2, r7, #3
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	0011      	movs	r1, r2
 800172e:	0018      	movs	r0, r3
 8001730:	f7ff fbb4 	bl	8000e9c <cr95read>
 8001734:	0003      	movs	r3, r0
 8001736:	7023      	strb	r3, [r4, #0]

		  if (resp != 0xFF) {
 8001738:	197b      	adds	r3, r7, r5
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2bff      	cmp	r3, #255	; 0xff
 800173e:	d028      	beq.n	8001792 <main+0x116>
			  printf("Async response, code = 0x%02x, len = %d, data =", resp, len);
 8001740:	197b      	adds	r3, r7, r5
 8001742:	7819      	ldrb	r1, [r3, #0]
 8001744:	1cfb      	adds	r3, r7, #3
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	001a      	movs	r2, r3
 800174a:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <main+0x140>)
 800174c:	0018      	movs	r0, r3
 800174e:	f003 fdf9 	bl	8005344 <iprintf>
			  for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8001752:	2317      	movs	r3, #23
 8001754:	18fb      	adds	r3, r7, r3
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
 800175a:	e00f      	b.n	800177c <main+0x100>
 800175c:	2417      	movs	r4, #23
 800175e:	193b      	adds	r3, r7, r4
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	1d3a      	adds	r2, r7, #4
 8001764:	5cd3      	ldrb	r3, [r2, r3]
 8001766:	001a      	movs	r2, r3
 8001768:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <main+0x144>)
 800176a:	0011      	movs	r1, r2
 800176c:	0018      	movs	r0, r3
 800176e:	f003 fde9 	bl	8005344 <iprintf>
 8001772:	193b      	adds	r3, r7, r4
 8001774:	781a      	ldrb	r2, [r3, #0]
 8001776:	193b      	adds	r3, r7, r4
 8001778:	3201      	adds	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]
 800177c:	1cfb      	adds	r3, r7, #3
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2217      	movs	r2, #23
 8001782:	18ba      	adds	r2, r7, r2
 8001784:	7812      	ldrb	r2, [r2, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d3e8      	bcc.n	800175c <main+0xe0>
			  printf("\n");
 800178a:	200a      	movs	r0, #10
 800178c:	f003 fdf4 	bl	8005378 <putchar>
 8001790:	e7ae      	b.n	80016f0 <main+0x74>
		  } else {
			  printf("Async reponse, invalid (timeout)\n");
 8001792:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <main+0x148>)
 8001794:	0018      	movs	r0, r3
 8001796:	f003 fe75 	bl	8005484 <puts>
	  while (uart_rx_read_ptr != uart_rx_write_ptr) {
 800179a:	e7a9      	b.n	80016f0 <main+0x74>
 800179c:	20000614 	.word	0x20000614
 80017a0:	200000ac 	.word	0x200000ac
 80017a4:	20000698 	.word	0x20000698
 80017a8:	200000ec 	.word	0x200000ec
 80017ac:	2000058c 	.word	0x2000058c
 80017b0:	20000132 	.word	0x20000132
 80017b4:	20000130 	.word	0x20000130
 80017b8:	200005d0 	.word	0x200005d0
 80017bc:	08006eb0 	.word	0x08006eb0
 80017c0:	08006db8 	.word	0x08006db8
 80017c4:	08006ee0 	.word	0x08006ee0

080017c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017c8:	b590      	push	{r4, r7, lr}
 80017ca:	b095      	sub	sp, #84	; 0x54
 80017cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ce:	2420      	movs	r4, #32
 80017d0:	193b      	adds	r3, r7, r4
 80017d2:	0018      	movs	r0, r3
 80017d4:	2330      	movs	r3, #48	; 0x30
 80017d6:	001a      	movs	r2, r3
 80017d8:	2100      	movs	r1, #0
 80017da:	f003 fdab 	bl	8005334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017de:	2310      	movs	r3, #16
 80017e0:	18fb      	adds	r3, r7, r3
 80017e2:	0018      	movs	r0, r3
 80017e4:	2310      	movs	r3, #16
 80017e6:	001a      	movs	r2, r3
 80017e8:	2100      	movs	r1, #0
 80017ea:	f003 fda3 	bl	8005334 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017ee:	003b      	movs	r3, r7
 80017f0:	0018      	movs	r0, r3
 80017f2:	2310      	movs	r3, #16
 80017f4:	001a      	movs	r2, r3
 80017f6:	2100      	movs	r1, #0
 80017f8:	f003 fd9c 	bl	8005334 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017fc:	0021      	movs	r1, r4
 80017fe:	187b      	adds	r3, r7, r1
 8001800:	2202      	movs	r2, #2
 8001802:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001804:	187b      	adds	r3, r7, r1
 8001806:	2201      	movs	r2, #1
 8001808:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800180a:	187b      	adds	r3, r7, r1
 800180c:	2210      	movs	r2, #16
 800180e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001810:	187b      	adds	r3, r7, r1
 8001812:	2202      	movs	r2, #2
 8001814:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001816:	187b      	adds	r3, r7, r1
 8001818:	2200      	movs	r2, #0
 800181a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800181c:	187b      	adds	r3, r7, r1
 800181e:	22a0      	movs	r2, #160	; 0xa0
 8001820:	0392      	lsls	r2, r2, #14
 8001822:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001824:	187b      	adds	r3, r7, r1
 8001826:	2200      	movs	r2, #0
 8001828:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800182a:	187b      	adds	r3, r7, r1
 800182c:	0018      	movs	r0, r3
 800182e:	f002 f9ed 	bl	8003c0c <HAL_RCC_OscConfig>
 8001832:	1e03      	subs	r3, r0, #0
 8001834:	d001      	beq.n	800183a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001836:	f000 f9a5 	bl	8001b84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800183a:	2110      	movs	r1, #16
 800183c:	187b      	adds	r3, r7, r1
 800183e:	2207      	movs	r2, #7
 8001840:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001842:	187b      	adds	r3, r7, r1
 8001844:	2202      	movs	r2, #2
 8001846:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001848:	187b      	adds	r3, r7, r1
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800184e:	187b      	adds	r3, r7, r1
 8001850:	2200      	movs	r2, #0
 8001852:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001854:	187b      	adds	r3, r7, r1
 8001856:	2101      	movs	r1, #1
 8001858:	0018      	movs	r0, r3
 800185a:	f002 fcf1 	bl	8004240 <HAL_RCC_ClockConfig>
 800185e:	1e03      	subs	r3, r0, #0
 8001860:	d001      	beq.n	8001866 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001862:	f000 f98f 	bl	8001b84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001866:	003b      	movs	r3, r7
 8001868:	2221      	movs	r2, #33	; 0x21
 800186a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800186c:	003b      	movs	r3, r7
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001872:	003b      	movs	r3, r7
 8001874:	2200      	movs	r2, #0
 8001876:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001878:	003b      	movs	r3, r7
 800187a:	0018      	movs	r0, r3
 800187c:	f002 fe32 	bl	80044e4 <HAL_RCCEx_PeriphCLKConfig>
 8001880:	1e03      	subs	r3, r0, #0
 8001882:	d001      	beq.n	8001888 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001884:	f000 f97e 	bl	8001b84 <Error_Handler>
  }
}
 8001888:	46c0      	nop			; (mov r8, r8)
 800188a:	46bd      	mov	sp, r7
 800188c:	b015      	add	sp, #84	; 0x54
 800188e:	bd90      	pop	{r4, r7, pc}

08001890 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001894:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <MX_I2C1_Init+0x74>)
 8001896:	4a1c      	ldr	r2, [pc, #112]	; (8001908 <MX_I2C1_Init+0x78>)
 8001898:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800189a:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <MX_I2C1_Init+0x74>)
 800189c:	4a1b      	ldr	r2, [pc, #108]	; (800190c <MX_I2C1_Init+0x7c>)
 800189e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80018a0:	4b18      	ldr	r3, [pc, #96]	; (8001904 <MX_I2C1_Init+0x74>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018a6:	4b17      	ldr	r3, [pc, #92]	; (8001904 <MX_I2C1_Init+0x74>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018ac:	4b15      	ldr	r3, [pc, #84]	; (8001904 <MX_I2C1_Init+0x74>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80018b2:	4b14      	ldr	r3, [pc, #80]	; (8001904 <MX_I2C1_Init+0x74>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <MX_I2C1_Init+0x74>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <MX_I2C1_Init+0x74>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <MX_I2C1_Init+0x74>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <MX_I2C1_Init+0x74>)
 80018cc:	0018      	movs	r0, r3
 80018ce:	f001 fcd5 	bl	800327c <HAL_I2C_Init>
 80018d2:	1e03      	subs	r3, r0, #0
 80018d4:	d001      	beq.n	80018da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80018d6:	f000 f955 	bl	8001b84 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <MX_I2C1_Init+0x74>)
 80018dc:	2100      	movs	r1, #0
 80018de:	0018      	movs	r0, r3
 80018e0:	f002 f8fc 	bl	8003adc <HAL_I2CEx_ConfigAnalogFilter>
 80018e4:	1e03      	subs	r3, r0, #0
 80018e6:	d001      	beq.n	80018ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80018e8:	f000 f94c 	bl	8001b84 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <MX_I2C1_Init+0x74>)
 80018ee:	2100      	movs	r1, #0
 80018f0:	0018      	movs	r0, r3
 80018f2:	f002 f93f 	bl	8003b74 <HAL_I2CEx_ConfigDigitalFilter>
 80018f6:	1e03      	subs	r3, r0, #0
 80018f8:	d001      	beq.n	80018fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80018fa:	f000 f943 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000720 	.word	0x20000720
 8001908:	40005400 	.word	0x40005400
 800190c:	0000020b 	.word	0x0000020b

08001910 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001914:	4b15      	ldr	r3, [pc, #84]	; (800196c <MX_USART1_UART_Init+0x5c>)
 8001916:	4a16      	ldr	r2, [pc, #88]	; (8001970 <MX_USART1_UART_Init+0x60>)
 8001918:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800191a:	4b14      	ldr	r3, [pc, #80]	; (800196c <MX_USART1_UART_Init+0x5c>)
 800191c:	22e1      	movs	r2, #225	; 0xe1
 800191e:	0212      	lsls	r2, r2, #8
 8001920:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001922:	4b12      	ldr	r3, [pc, #72]	; (800196c <MX_USART1_UART_Init+0x5c>)
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8001928:	4b10      	ldr	r3, [pc, #64]	; (800196c <MX_USART1_UART_Init+0x5c>)
 800192a:	2280      	movs	r2, #128	; 0x80
 800192c:	0192      	lsls	r2, r2, #6
 800192e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001930:	4b0e      	ldr	r3, [pc, #56]	; (800196c <MX_USART1_UART_Init+0x5c>)
 8001932:	2200      	movs	r2, #0
 8001934:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001936:	4b0d      	ldr	r3, [pc, #52]	; (800196c <MX_USART1_UART_Init+0x5c>)
 8001938:	220c      	movs	r2, #12
 800193a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <MX_USART1_UART_Init+0x5c>)
 800193e:	2200      	movs	r2, #0
 8001940:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001942:	4b0a      	ldr	r3, [pc, #40]	; (800196c <MX_USART1_UART_Init+0x5c>)
 8001944:	2200      	movs	r2, #0
 8001946:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <MX_USART1_UART_Init+0x5c>)
 800194a:	2200      	movs	r2, #0
 800194c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800194e:	4b07      	ldr	r3, [pc, #28]	; (800196c <MX_USART1_UART_Init+0x5c>)
 8001950:	2200      	movs	r2, #0
 8001952:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <MX_USART1_UART_Init+0x5c>)
 8001956:	0018      	movs	r0, r3
 8001958:	f002 fe92 	bl	8004680 <HAL_UART_Init>
 800195c:	1e03      	subs	r3, r0, #0
 800195e:	d001      	beq.n	8001964 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8001960:	f000 f910 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001964:	46c0      	nop			; (mov r8, r8)
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	20000614 	.word	0x20000614
 8001970:	40013800 	.word	0x40013800

08001974 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001978:	4b14      	ldr	r3, [pc, #80]	; (80019cc <MX_USART2_UART_Init+0x58>)
 800197a:	4a15      	ldr	r2, [pc, #84]	; (80019d0 <MX_USART2_UART_Init+0x5c>)
 800197c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800197e:	4b13      	ldr	r3, [pc, #76]	; (80019cc <MX_USART2_UART_Init+0x58>)
 8001980:	2296      	movs	r2, #150	; 0x96
 8001982:	0212      	lsls	r2, r2, #8
 8001984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <MX_USART2_UART_Init+0x58>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800198c:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <MX_USART2_UART_Init+0x58>)
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <MX_USART2_UART_Init+0x58>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <MX_USART2_UART_Init+0x58>)
 800199a:	220c      	movs	r2, #12
 800199c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <MX_USART2_UART_Init+0x58>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <MX_USART2_UART_Init+0x58>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <MX_USART2_UART_Init+0x58>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <MX_USART2_UART_Init+0x58>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019b6:	4b05      	ldr	r3, [pc, #20]	; (80019cc <MX_USART2_UART_Init+0x58>)
 80019b8:	0018      	movs	r0, r3
 80019ba:	f002 fe61 	bl	8004680 <HAL_UART_Init>
 80019be:	1e03      	subs	r3, r0, #0
 80019c0:	d001      	beq.n	80019c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019c2:	f000 f8df 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000698 	.word	0x20000698
 80019d0:	40004400 	.word	0x40004400

080019d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <MX_DMA_Init+0x48>)
 80019dc:	695a      	ldr	r2, [r3, #20]
 80019de:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <MX_DMA_Init+0x48>)
 80019e0:	2101      	movs	r1, #1
 80019e2:	430a      	orrs	r2, r1
 80019e4:	615a      	str	r2, [r3, #20]
 80019e6:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <MX_DMA_Init+0x48>)
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	2201      	movs	r2, #1
 80019ec:	4013      	ands	r3, r2
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	200a      	movs	r0, #10
 80019f8:	f000 ff8c 	bl	8002914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80019fc:	200a      	movs	r0, #10
 80019fe:	f000 ff9e 	bl	800293e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	200b      	movs	r0, #11
 8001a08:	f000 ff84 	bl	8002914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8001a0c:	200b      	movs	r0, #11
 8001a0e:	f000 ff96 	bl	800293e <HAL_NVIC_EnableIRQ>

}
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b002      	add	sp, #8
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	40021000 	.word	0x40021000

08001a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b08b      	sub	sp, #44	; 0x2c
 8001a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a26:	2414      	movs	r4, #20
 8001a28:	193b      	adds	r3, r7, r4
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	2314      	movs	r3, #20
 8001a2e:	001a      	movs	r2, r3
 8001a30:	2100      	movs	r1, #0
 8001a32:	f003 fc7f 	bl	8005334 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a36:	4b4f      	ldr	r3, [pc, #316]	; (8001b74 <MX_GPIO_Init+0x154>)
 8001a38:	695a      	ldr	r2, [r3, #20]
 8001a3a:	4b4e      	ldr	r3, [pc, #312]	; (8001b74 <MX_GPIO_Init+0x154>)
 8001a3c:	2180      	movs	r1, #128	; 0x80
 8001a3e:	0309      	lsls	r1, r1, #12
 8001a40:	430a      	orrs	r2, r1
 8001a42:	615a      	str	r2, [r3, #20]
 8001a44:	4b4b      	ldr	r3, [pc, #300]	; (8001b74 <MX_GPIO_Init+0x154>)
 8001a46:	695a      	ldr	r2, [r3, #20]
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	031b      	lsls	r3, r3, #12
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a52:	4b48      	ldr	r3, [pc, #288]	; (8001b74 <MX_GPIO_Init+0x154>)
 8001a54:	695a      	ldr	r2, [r3, #20]
 8001a56:	4b47      	ldr	r3, [pc, #284]	; (8001b74 <MX_GPIO_Init+0x154>)
 8001a58:	2180      	movs	r1, #128	; 0x80
 8001a5a:	03c9      	lsls	r1, r1, #15
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	615a      	str	r2, [r3, #20]
 8001a60:	4b44      	ldr	r3, [pc, #272]	; (8001b74 <MX_GPIO_Init+0x154>)
 8001a62:	695a      	ldr	r2, [r3, #20]
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	03db      	lsls	r3, r3, #15
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6e:	4b41      	ldr	r3, [pc, #260]	; (8001b74 <MX_GPIO_Init+0x154>)
 8001a70:	695a      	ldr	r2, [r3, #20]
 8001a72:	4b40      	ldr	r3, [pc, #256]	; (8001b74 <MX_GPIO_Init+0x154>)
 8001a74:	2180      	movs	r1, #128	; 0x80
 8001a76:	0289      	lsls	r1, r1, #10
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	615a      	str	r2, [r3, #20]
 8001a7c:	4b3d      	ldr	r3, [pc, #244]	; (8001b74 <MX_GPIO_Init+0x154>)
 8001a7e:	695a      	ldr	r2, [r3, #20]
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	029b      	lsls	r3, r3, #10
 8001a84:	4013      	ands	r3, r2
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8a:	4b3a      	ldr	r3, [pc, #232]	; (8001b74 <MX_GPIO_Init+0x154>)
 8001a8c:	695a      	ldr	r2, [r3, #20]
 8001a8e:	4b39      	ldr	r3, [pc, #228]	; (8001b74 <MX_GPIO_Init+0x154>)
 8001a90:	2180      	movs	r1, #128	; 0x80
 8001a92:	02c9      	lsls	r1, r1, #11
 8001a94:	430a      	orrs	r2, r1
 8001a96:	615a      	str	r2, [r3, #20]
 8001a98:	4b36      	ldr	r3, [pc, #216]	; (8001b74 <MX_GPIO_Init+0x154>)
 8001a9a:	695a      	ldr	r2, [r3, #20]
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	02db      	lsls	r3, r3, #11
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8001aa6:	2390      	movs	r3, #144	; 0x90
 8001aa8:	0059      	lsls	r1, r3, #1
 8001aaa:	2390      	movs	r3, #144	; 0x90
 8001aac:	05db      	lsls	r3, r3, #23
 8001aae:	2200      	movs	r2, #0
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f001 fbc5 	bl	8003240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001ab6:	2386      	movs	r3, #134	; 0x86
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	482f      	ldr	r0, [pc, #188]	; (8001b78 <MX_GPIO_Init+0x158>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	0019      	movs	r1, r3
 8001ac0:	f001 fbbe 	bl	8003240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001ac4:	4b2d      	ldr	r3, [pc, #180]	; (8001b7c <MX_GPIO_Init+0x15c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2180      	movs	r1, #128	; 0x80
 8001aca:	0018      	movs	r0, r3
 8001acc:	f001 fbb8 	bl	8003240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ad0:	193b      	adds	r3, r7, r4
 8001ad2:	2280      	movs	r2, #128	; 0x80
 8001ad4:	0192      	lsls	r2, r2, #6
 8001ad6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ad8:	193b      	adds	r3, r7, r4
 8001ada:	4a29      	ldr	r2, [pc, #164]	; (8001b80 <MX_GPIO_Init+0x160>)
 8001adc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	193b      	adds	r3, r7, r4
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ae4:	193b      	adds	r3, r7, r4
 8001ae6:	4a25      	ldr	r2, [pc, #148]	; (8001b7c <MX_GPIO_Init+0x15c>)
 8001ae8:	0019      	movs	r1, r3
 8001aea:	0010      	movs	r0, r2
 8001aec:	f001 f968 	bl	8002dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8001af0:	0021      	movs	r1, r4
 8001af2:	187b      	adds	r3, r7, r1
 8001af4:	2290      	movs	r2, #144	; 0x90
 8001af6:	0052      	lsls	r2, r2, #1
 8001af8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afa:	000c      	movs	r4, r1
 8001afc:	193b      	adds	r3, r7, r4
 8001afe:	2201      	movs	r2, #1
 8001b00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	193b      	adds	r3, r7, r4
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	193b      	adds	r3, r7, r4
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0e:	193a      	adds	r2, r7, r4
 8001b10:	2390      	movs	r3, #144	; 0x90
 8001b12:	05db      	lsls	r3, r3, #23
 8001b14:	0011      	movs	r1, r2
 8001b16:	0018      	movs	r0, r3
 8001b18:	f001 f952 	bl	8002dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 8001b1c:	0021      	movs	r1, r4
 8001b1e:	187b      	adds	r3, r7, r1
 8001b20:	2286      	movs	r2, #134	; 0x86
 8001b22:	00d2      	lsls	r2, r2, #3
 8001b24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b26:	000c      	movs	r4, r1
 8001b28:	193b      	adds	r3, r7, r4
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	193b      	adds	r3, r7, r4
 8001b30:	2200      	movs	r2, #0
 8001b32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	193b      	adds	r3, r7, r4
 8001b36:	2200      	movs	r2, #0
 8001b38:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3a:	193b      	adds	r3, r7, r4
 8001b3c:	4a0e      	ldr	r2, [pc, #56]	; (8001b78 <MX_GPIO_Init+0x158>)
 8001b3e:	0019      	movs	r1, r3
 8001b40:	0010      	movs	r0, r2
 8001b42:	f001 f93d 	bl	8002dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b46:	0021      	movs	r1, r4
 8001b48:	187b      	adds	r3, r7, r1
 8001b4a:	2280      	movs	r2, #128	; 0x80
 8001b4c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4e:	187b      	adds	r3, r7, r1
 8001b50:	2201      	movs	r2, #1
 8001b52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	187b      	adds	r3, r7, r1
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	187b      	adds	r3, r7, r1
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b60:	187b      	adds	r3, r7, r1
 8001b62:	4a06      	ldr	r2, [pc, #24]	; (8001b7c <MX_GPIO_Init+0x15c>)
 8001b64:	0019      	movs	r1, r3
 8001b66:	0010      	movs	r0, r2
 8001b68:	f001 f92a 	bl	8002dc0 <HAL_GPIO_Init>

}
 8001b6c:	46c0      	nop			; (mov r8, r8)
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	b00b      	add	sp, #44	; 0x2c
 8001b72:	bd90      	pop	{r4, r7, pc}
 8001b74:	40021000 	.word	0x40021000
 8001b78:	48000400 	.word	0x48000400
 8001b7c:	48000800 	.word	0x48000800
 8001b80:	10210000 	.word	0x10210000

08001b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b88:	46c0      	nop			; (mov r8, r8)
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001b96:	f000 fa45 	bl	8002024 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001b9a:	4b5b      	ldr	r3, [pc, #364]	; (8001d08 <SSD1306_Init+0x178>)
 8001b9c:	485b      	ldr	r0, [pc, #364]	; (8001d0c <SSD1306_Init+0x17c>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	2178      	movs	r1, #120	; 0x78
 8001ba2:	f001 fd09 	bl	80035b8 <HAL_I2C_IsDeviceReady>
 8001ba6:	1e03      	subs	r3, r0, #0
 8001ba8:	d001      	beq.n	8001bae <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	e0a8      	b.n	8001d00 <SSD1306_Init+0x170>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001bae:	4b58      	ldr	r3, [pc, #352]	; (8001d10 <SSD1306_Init+0x180>)
 8001bb0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001bb2:	e002      	b.n	8001bba <SSD1306_Init+0x2a>
		p--;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1f9      	bne.n	8001bb4 <SSD1306_Init+0x24>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001bc0:	22ae      	movs	r2, #174	; 0xae
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	2078      	movs	r0, #120	; 0x78
 8001bc6:	f000 fabf 	bl	8002148 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001bca:	2220      	movs	r2, #32
 8001bcc:	2100      	movs	r1, #0
 8001bce:	2078      	movs	r0, #120	; 0x78
 8001bd0:	f000 faba 	bl	8002148 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001bd4:	2210      	movs	r2, #16
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	2078      	movs	r0, #120	; 0x78
 8001bda:	f000 fab5 	bl	8002148 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001bde:	22b0      	movs	r2, #176	; 0xb0
 8001be0:	2100      	movs	r1, #0
 8001be2:	2078      	movs	r0, #120	; 0x78
 8001be4:	f000 fab0 	bl	8002148 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001be8:	22c8      	movs	r2, #200	; 0xc8
 8001bea:	2100      	movs	r1, #0
 8001bec:	2078      	movs	r0, #120	; 0x78
 8001bee:	f000 faab 	bl	8002148 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	2078      	movs	r0, #120	; 0x78
 8001bf8:	f000 faa6 	bl	8002148 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001bfc:	2210      	movs	r2, #16
 8001bfe:	2100      	movs	r1, #0
 8001c00:	2078      	movs	r0, #120	; 0x78
 8001c02:	f000 faa1 	bl	8002148 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001c06:	2240      	movs	r2, #64	; 0x40
 8001c08:	2100      	movs	r1, #0
 8001c0a:	2078      	movs	r0, #120	; 0x78
 8001c0c:	f000 fa9c 	bl	8002148 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001c10:	2281      	movs	r2, #129	; 0x81
 8001c12:	2100      	movs	r1, #0
 8001c14:	2078      	movs	r0, #120	; 0x78
 8001c16:	f000 fa97 	bl	8002148 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001c1a:	22ff      	movs	r2, #255	; 0xff
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	2078      	movs	r0, #120	; 0x78
 8001c20:	f000 fa92 	bl	8002148 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001c24:	22a1      	movs	r2, #161	; 0xa1
 8001c26:	2100      	movs	r1, #0
 8001c28:	2078      	movs	r0, #120	; 0x78
 8001c2a:	f000 fa8d 	bl	8002148 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001c2e:	22a6      	movs	r2, #166	; 0xa6
 8001c30:	2100      	movs	r1, #0
 8001c32:	2078      	movs	r0, #120	; 0x78
 8001c34:	f000 fa88 	bl	8002148 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001c38:	22a8      	movs	r2, #168	; 0xa8
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	2078      	movs	r0, #120	; 0x78
 8001c3e:	f000 fa83 	bl	8002148 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001c42:	223f      	movs	r2, #63	; 0x3f
 8001c44:	2100      	movs	r1, #0
 8001c46:	2078      	movs	r0, #120	; 0x78
 8001c48:	f000 fa7e 	bl	8002148 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001c4c:	22a4      	movs	r2, #164	; 0xa4
 8001c4e:	2100      	movs	r1, #0
 8001c50:	2078      	movs	r0, #120	; 0x78
 8001c52:	f000 fa79 	bl	8002148 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001c56:	22d3      	movs	r2, #211	; 0xd3
 8001c58:	2100      	movs	r1, #0
 8001c5a:	2078      	movs	r0, #120	; 0x78
 8001c5c:	f000 fa74 	bl	8002148 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001c60:	2200      	movs	r2, #0
 8001c62:	2100      	movs	r1, #0
 8001c64:	2078      	movs	r0, #120	; 0x78
 8001c66:	f000 fa6f 	bl	8002148 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001c6a:	22d5      	movs	r2, #213	; 0xd5
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	2078      	movs	r0, #120	; 0x78
 8001c70:	f000 fa6a 	bl	8002148 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001c74:	22f0      	movs	r2, #240	; 0xf0
 8001c76:	2100      	movs	r1, #0
 8001c78:	2078      	movs	r0, #120	; 0x78
 8001c7a:	f000 fa65 	bl	8002148 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001c7e:	22d9      	movs	r2, #217	; 0xd9
 8001c80:	2100      	movs	r1, #0
 8001c82:	2078      	movs	r0, #120	; 0x78
 8001c84:	f000 fa60 	bl	8002148 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001c88:	2222      	movs	r2, #34	; 0x22
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	2078      	movs	r0, #120	; 0x78
 8001c8e:	f000 fa5b 	bl	8002148 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001c92:	22da      	movs	r2, #218	; 0xda
 8001c94:	2100      	movs	r1, #0
 8001c96:	2078      	movs	r0, #120	; 0x78
 8001c98:	f000 fa56 	bl	8002148 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001c9c:	2212      	movs	r2, #18
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	2078      	movs	r0, #120	; 0x78
 8001ca2:	f000 fa51 	bl	8002148 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001ca6:	22db      	movs	r2, #219	; 0xdb
 8001ca8:	2100      	movs	r1, #0
 8001caa:	2078      	movs	r0, #120	; 0x78
 8001cac:	f000 fa4c 	bl	8002148 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001cb0:	2220      	movs	r2, #32
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	2078      	movs	r0, #120	; 0x78
 8001cb6:	f000 fa47 	bl	8002148 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001cba:	228d      	movs	r2, #141	; 0x8d
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	2078      	movs	r0, #120	; 0x78
 8001cc0:	f000 fa42 	bl	8002148 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001cc4:	2214      	movs	r2, #20
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	2078      	movs	r0, #120	; 0x78
 8001cca:	f000 fa3d 	bl	8002148 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001cce:	22af      	movs	r2, #175	; 0xaf
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	2078      	movs	r0, #120	; 0x78
 8001cd4:	f000 fa38 	bl	8002148 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001cd8:	222e      	movs	r2, #46	; 0x2e
 8001cda:	2100      	movs	r1, #0
 8001cdc:	2078      	movs	r0, #120	; 0x78
 8001cde:	f000 fa33 	bl	8002148 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f000 f84c 	bl	8001d80 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001ce8:	f000 f816 	bl	8001d18 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <SSD1306_Init+0x184>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001cf2:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <SSD1306_Init+0x184>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <SSD1306_Init+0x184>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001cfe:	2301      	movs	r3, #1
}
 8001d00:	0018      	movs	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	b002      	add	sp, #8
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	00004e20 	.word	0x00004e20
 8001d0c:	20000720 	.word	0x20000720
 8001d10:	000009c4 	.word	0x000009c4
 8001d14:	20000578 	.word	0x20000578

08001d18 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001d1e:	1dfb      	adds	r3, r7, #7
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]
 8001d24:	e021      	b.n	8001d6a <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001d26:	1dfb      	adds	r3, r7, #7
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	3b50      	subs	r3, #80	; 0x50
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	001a      	movs	r2, r3
 8001d30:	2100      	movs	r1, #0
 8001d32:	2078      	movs	r0, #120	; 0x78
 8001d34:	f000 fa08 	bl	8002148 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	2078      	movs	r0, #120	; 0x78
 8001d3e:	f000 fa03 	bl	8002148 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001d42:	2210      	movs	r2, #16
 8001d44:	2100      	movs	r1, #0
 8001d46:	2078      	movs	r0, #120	; 0x78
 8001d48:	f000 f9fe 	bl	8002148 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001d4c:	1dfb      	adds	r3, r7, #7
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	01da      	lsls	r2, r3, #7
 8001d52:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <SSD1306_UpdateScreen+0x64>)
 8001d54:	18d2      	adds	r2, r2, r3
 8001d56:	2380      	movs	r3, #128	; 0x80
 8001d58:	2140      	movs	r1, #64	; 0x40
 8001d5a:	2078      	movs	r0, #120	; 0x78
 8001d5c:	f000 f976 	bl	800204c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001d60:	1dfb      	adds	r3, r7, #7
 8001d62:	781a      	ldrb	r2, [r3, #0]
 8001d64:	1dfb      	adds	r3, r7, #7
 8001d66:	3201      	adds	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
 8001d6a:	1dfb      	adds	r3, r7, #7
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b07      	cmp	r3, #7
 8001d70:	d9d9      	bls.n	8001d26 <SSD1306_UpdateScreen+0xe>
	}
}
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	46c0      	nop			; (mov r8, r8)
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b002      	add	sp, #8
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20000178 	.word	0x20000178

08001d80 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	0002      	movs	r2, r0
 8001d88:	1dfb      	adds	r3, r7, #7
 8001d8a:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001d8c:	1dfb      	adds	r3, r7, #7
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <SSD1306_Fill+0x18>
 8001d94:	2300      	movs	r3, #0
 8001d96:	e000      	b.n	8001d9a <SSD1306_Fill+0x1a>
 8001d98:	23ff      	movs	r3, #255	; 0xff
 8001d9a:	2280      	movs	r2, #128	; 0x80
 8001d9c:	00d2      	lsls	r2, r2, #3
 8001d9e:	4804      	ldr	r0, [pc, #16]	; (8001db0 <SSD1306_Fill+0x30>)
 8001da0:	0019      	movs	r1, r3
 8001da2:	f003 fac7 	bl	8005334 <memset>
}
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	46bd      	mov	sp, r7
 8001daa:	b002      	add	sp, #8
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	46c0      	nop			; (mov r8, r8)
 8001db0:	20000178 	.word	0x20000178

08001db4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001db4:	b590      	push	{r4, r7, lr}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	0004      	movs	r4, r0
 8001dbc:	0008      	movs	r0, r1
 8001dbe:	0011      	movs	r1, r2
 8001dc0:	1dbb      	adds	r3, r7, #6
 8001dc2:	1c22      	adds	r2, r4, #0
 8001dc4:	801a      	strh	r2, [r3, #0]
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	1c02      	adds	r2, r0, #0
 8001dca:	801a      	strh	r2, [r3, #0]
 8001dcc:	1cfb      	adds	r3, r7, #3
 8001dce:	1c0a      	adds	r2, r1, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
	if (
 8001dd2:	1dbb      	adds	r3, r7, #6
 8001dd4:	881b      	ldrh	r3, [r3, #0]
 8001dd6:	2b7f      	cmp	r3, #127	; 0x7f
 8001dd8:	d852      	bhi.n	8001e80 <SSD1306_DrawPixel+0xcc>
		x >= SSD1306_WIDTH ||
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	2b3f      	cmp	r3, #63	; 0x3f
 8001de0:	d84e      	bhi.n	8001e80 <SSD1306_DrawPixel+0xcc>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001de2:	4b29      	ldr	r3, [pc, #164]	; (8001e88 <SSD1306_DrawPixel+0xd4>)
 8001de4:	791b      	ldrb	r3, [r3, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d006      	beq.n	8001df8 <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 8001dea:	1cfb      	adds	r3, r7, #3
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	425a      	negs	r2, r3
 8001df0:	4153      	adcs	r3, r2
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	1cfb      	adds	r3, r7, #3
 8001df6:	701a      	strb	r2, [r3, #0]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001df8:	1cfb      	adds	r3, r7, #3
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d11e      	bne.n	8001e3e <SSD1306_DrawPixel+0x8a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001e00:	1dbb      	adds	r3, r7, #6
 8001e02:	881a      	ldrh	r2, [r3, #0]
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	08db      	lsrs	r3, r3, #3
 8001e0a:	b298      	uxth	r0, r3
 8001e0c:	0003      	movs	r3, r0
 8001e0e:	01db      	lsls	r3, r3, #7
 8001e10:	18d3      	adds	r3, r2, r3
 8001e12:	4a1e      	ldr	r2, [pc, #120]	; (8001e8c <SSD1306_DrawPixel+0xd8>)
 8001e14:	5cd3      	ldrb	r3, [r2, r3]
 8001e16:	b25a      	sxtb	r2, r3
 8001e18:	1d3b      	adds	r3, r7, #4
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	2107      	movs	r1, #7
 8001e1e:	400b      	ands	r3, r1
 8001e20:	2101      	movs	r1, #1
 8001e22:	4099      	lsls	r1, r3
 8001e24:	000b      	movs	r3, r1
 8001e26:	b25b      	sxtb	r3, r3
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	b259      	sxtb	r1, r3
 8001e2c:	1dbb      	adds	r3, r7, #6
 8001e2e:	881a      	ldrh	r2, [r3, #0]
 8001e30:	0003      	movs	r3, r0
 8001e32:	01db      	lsls	r3, r3, #7
 8001e34:	18d3      	adds	r3, r2, r3
 8001e36:	b2c9      	uxtb	r1, r1
 8001e38:	4a14      	ldr	r2, [pc, #80]	; (8001e8c <SSD1306_DrawPixel+0xd8>)
 8001e3a:	54d1      	strb	r1, [r2, r3]
 8001e3c:	e021      	b.n	8001e82 <SSD1306_DrawPixel+0xce>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001e3e:	1dbb      	adds	r3, r7, #6
 8001e40:	881a      	ldrh	r2, [r3, #0]
 8001e42:	1d3b      	adds	r3, r7, #4
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	08db      	lsrs	r3, r3, #3
 8001e48:	b298      	uxth	r0, r3
 8001e4a:	0003      	movs	r3, r0
 8001e4c:	01db      	lsls	r3, r3, #7
 8001e4e:	18d3      	adds	r3, r2, r3
 8001e50:	4a0e      	ldr	r2, [pc, #56]	; (8001e8c <SSD1306_DrawPixel+0xd8>)
 8001e52:	5cd3      	ldrb	r3, [r2, r3]
 8001e54:	b25b      	sxtb	r3, r3
 8001e56:	1d3a      	adds	r2, r7, #4
 8001e58:	8812      	ldrh	r2, [r2, #0]
 8001e5a:	2107      	movs	r1, #7
 8001e5c:	400a      	ands	r2, r1
 8001e5e:	2101      	movs	r1, #1
 8001e60:	4091      	lsls	r1, r2
 8001e62:	000a      	movs	r2, r1
 8001e64:	b252      	sxtb	r2, r2
 8001e66:	43d2      	mvns	r2, r2
 8001e68:	b252      	sxtb	r2, r2
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	b259      	sxtb	r1, r3
 8001e6e:	1dbb      	adds	r3, r7, #6
 8001e70:	881a      	ldrh	r2, [r3, #0]
 8001e72:	0003      	movs	r3, r0
 8001e74:	01db      	lsls	r3, r3, #7
 8001e76:	18d3      	adds	r3, r2, r3
 8001e78:	b2c9      	uxtb	r1, r1
 8001e7a:	4a04      	ldr	r2, [pc, #16]	; (8001e8c <SSD1306_DrawPixel+0xd8>)
 8001e7c:	54d1      	strb	r1, [r2, r3]
 8001e7e:	e000      	b.n	8001e82 <SSD1306_DrawPixel+0xce>
		return;
 8001e80:	46c0      	nop			; (mov r8, r8)
	}
}
 8001e82:	46bd      	mov	sp, r7
 8001e84:	b003      	add	sp, #12
 8001e86:	bd90      	pop	{r4, r7, pc}
 8001e88:	20000578 	.word	0x20000578
 8001e8c:	20000178 	.word	0x20000178

08001e90 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	0002      	movs	r2, r0
 8001e98:	1dbb      	adds	r3, r7, #6
 8001e9a:	801a      	strh	r2, [r3, #0]
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	1c0a      	adds	r2, r1, #0
 8001ea0:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001ea2:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <SSD1306_GotoXY+0x2c>)
 8001ea4:	1dba      	adds	r2, r7, #6
 8001ea6:	8812      	ldrh	r2, [r2, #0]
 8001ea8:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8001eaa:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <SSD1306_GotoXY+0x2c>)
 8001eac:	1d3a      	adds	r2, r7, #4
 8001eae:	8812      	ldrh	r2, [r2, #0]
 8001eb0:	805a      	strh	r2, [r3, #2]
}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	b002      	add	sp, #8
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	20000578 	.word	0x20000578

08001ec0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6039      	str	r1, [r7, #0]
 8001ec8:	0011      	movs	r1, r2
 8001eca:	1dfb      	adds	r3, r7, #7
 8001ecc:	1c02      	adds	r2, r0, #0
 8001ece:	701a      	strb	r2, [r3, #0]
 8001ed0:	1dbb      	adds	r3, r7, #6
 8001ed2:	1c0a      	adds	r2, r1, #0
 8001ed4:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001ed6:	4b3a      	ldr	r3, [pc, #232]	; (8001fc0 <SSD1306_Putc+0x100>)
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	001a      	movs	r2, r3
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	18d3      	adds	r3, r2, r3
	if (
 8001ee2:	2b7f      	cmp	r3, #127	; 0x7f
 8001ee4:	dc07      	bgt.n	8001ef6 <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001ee6:	4b36      	ldr	r3, [pc, #216]	; (8001fc0 <SSD1306_Putc+0x100>)
 8001ee8:	885b      	ldrh	r3, [r3, #2]
 8001eea:	001a      	movs	r2, r3
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	785b      	ldrb	r3, [r3, #1]
 8001ef0:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001ef2:	2b3f      	cmp	r3, #63	; 0x3f
 8001ef4:	dd01      	ble.n	8001efa <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e05e      	b.n	8001fb8 <SSD1306_Putc+0xf8>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	e04a      	b.n	8001f96 <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	1dfb      	adds	r3, r7, #7
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	3b20      	subs	r3, #32
 8001f0a:	6839      	ldr	r1, [r7, #0]
 8001f0c:	7849      	ldrb	r1, [r1, #1]
 8001f0e:	434b      	muls	r3, r1
 8001f10:	0019      	movs	r1, r3
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	18cb      	adds	r3, r1, r3
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	18d3      	adds	r3, r2, r3
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	e02f      	b.n	8001f84 <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	409a      	lsls	r2, r3
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	021b      	lsls	r3, r3, #8
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d011      	beq.n	8001f56 <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001f32:	4b23      	ldr	r3, [pc, #140]	; (8001fc0 <SSD1306_Putc+0x100>)
 8001f34:	881a      	ldrh	r2, [r3, #0]
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	18d3      	adds	r3, r2, r3
 8001f3c:	b298      	uxth	r0, r3
 8001f3e:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <SSD1306_Putc+0x100>)
 8001f40:	885a      	ldrh	r2, [r3, #2]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	18d3      	adds	r3, r2, r3
 8001f48:	b299      	uxth	r1, r3
 8001f4a:	1dbb      	adds	r3, r7, #6
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	001a      	movs	r2, r3
 8001f50:	f7ff ff30 	bl	8001db4 <SSD1306_DrawPixel>
 8001f54:	e013      	b.n	8001f7e <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001f56:	4b1a      	ldr	r3, [pc, #104]	; (8001fc0 <SSD1306_Putc+0x100>)
 8001f58:	881a      	ldrh	r2, [r3, #0]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	18d3      	adds	r3, r2, r3
 8001f60:	b298      	uxth	r0, r3
 8001f62:	4b17      	ldr	r3, [pc, #92]	; (8001fc0 <SSD1306_Putc+0x100>)
 8001f64:	885a      	ldrh	r2, [r3, #2]
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	18d3      	adds	r3, r2, r3
 8001f6c:	b299      	uxth	r1, r3
 8001f6e:	1dbb      	adds	r3, r7, #6
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	425a      	negs	r2, r3
 8001f74:	4153      	adcs	r3, r2
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	001a      	movs	r2, r3
 8001f7a:	f7ff ff1b 	bl	8001db4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	3301      	adds	r3, #1
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	001a      	movs	r2, r3
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d3c9      	bcc.n	8001f24 <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	3301      	adds	r3, #1
 8001f94:	617b      	str	r3, [r7, #20]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	785b      	ldrb	r3, [r3, #1]
 8001f9a:	001a      	movs	r2, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d3ae      	bcc.n	8001f00 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001fa2:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <SSD1306_Putc+0x100>)
 8001fa4:	881a      	ldrh	r2, [r3, #0]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	18d3      	adds	r3, r2, r3
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	4b03      	ldr	r3, [pc, #12]	; (8001fc0 <SSD1306_Putc+0x100>)
 8001fb2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001fb4:	1dfb      	adds	r3, r7, #7
 8001fb6:	781b      	ldrb	r3, [r3, #0]
}
 8001fb8:	0018      	movs	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	b006      	add	sp, #24
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20000578 	.word	0x20000578

08001fc4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	1dfb      	adds	r3, r7, #7
 8001fd0:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 8001fd2:	e013      	b.n	8001ffc <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	7818      	ldrb	r0, [r3, #0]
 8001fd8:	1dfb      	adds	r3, r7, #7
 8001fda:	781a      	ldrb	r2, [r3, #0]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	0019      	movs	r1, r3
 8001fe0:	f7ff ff6e 	bl	8001ec0 <SSD1306_Putc>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	001a      	movs	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d002      	beq.n	8001ff6 <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	e008      	b.n	8002008 <SSD1306_Puts+0x44>
		}
		
		/* Increase string pointer */
		str++;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1e7      	bne.n	8001fd4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	781b      	ldrb	r3, [r3, #0]
}
 8002008:	0018      	movs	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	b004      	add	sp, #16
 800200e:	bd80      	pop	{r7, pc}

08002010 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002014:	2000      	movs	r0, #0
 8002016:	f7ff feb3 	bl	8001d80 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800201a:	f7ff fe7d 	bl	8001d18 <SSD1306_UpdateScreen>
}
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800202a:	4b07      	ldr	r3, [pc, #28]	; (8002048 <ssd1306_I2C_Init+0x24>)
 800202c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800202e:	e002      	b.n	8002036 <ssd1306_I2C_Init+0x12>
		p--;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3b01      	subs	r3, #1
 8002034:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1f9      	bne.n	8002030 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800203c:	46c0      	nop			; (mov r8, r8)
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	46bd      	mov	sp, r7
 8002042:	b002      	add	sp, #8
 8002044:	bd80      	pop	{r7, pc}
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	0003d090 	.word	0x0003d090

0800204c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800204c:	b590      	push	{r4, r7, lr}
 800204e:	b0c7      	sub	sp, #284	; 0x11c
 8002050:	af02      	add	r7, sp, #8
 8002052:	0004      	movs	r4, r0
 8002054:	0008      	movs	r0, r1
 8002056:	603a      	str	r2, [r7, #0]
 8002058:	0019      	movs	r1, r3
 800205a:	4b36      	ldr	r3, [pc, #216]	; (8002134 <ssd1306_I2C_WriteMulti+0xe8>)
 800205c:	2288      	movs	r2, #136	; 0x88
 800205e:	0052      	lsls	r2, r2, #1
 8002060:	4694      	mov	ip, r2
 8002062:	44bc      	add	ip, r7
 8002064:	4463      	add	r3, ip
 8002066:	1c22      	adds	r2, r4, #0
 8002068:	701a      	strb	r2, [r3, #0]
 800206a:	4b33      	ldr	r3, [pc, #204]	; (8002138 <ssd1306_I2C_WriteMulti+0xec>)
 800206c:	2288      	movs	r2, #136	; 0x88
 800206e:	0052      	lsls	r2, r2, #1
 8002070:	4694      	mov	ip, r2
 8002072:	44bc      	add	ip, r7
 8002074:	4463      	add	r3, ip
 8002076:	1c02      	adds	r2, r0, #0
 8002078:	701a      	strb	r2, [r3, #0]
 800207a:	4b30      	ldr	r3, [pc, #192]	; (800213c <ssd1306_I2C_WriteMulti+0xf0>)
 800207c:	2288      	movs	r2, #136	; 0x88
 800207e:	0052      	lsls	r2, r2, #1
 8002080:	4694      	mov	ip, r2
 8002082:	44bc      	add	ip, r7
 8002084:	4463      	add	r3, ip
 8002086:	1c0a      	adds	r2, r1, #0
 8002088:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800208a:	4b2d      	ldr	r3, [pc, #180]	; (8002140 <ssd1306_I2C_WriteMulti+0xf4>)
 800208c:	2288      	movs	r2, #136	; 0x88
 800208e:	0052      	lsls	r2, r2, #1
 8002090:	4694      	mov	ip, r2
 8002092:	44bc      	add	ip, r7
 8002094:	4463      	add	r3, ip
 8002096:	4a28      	ldr	r2, [pc, #160]	; (8002138 <ssd1306_I2C_WriteMulti+0xec>)
 8002098:	2188      	movs	r1, #136	; 0x88
 800209a:	0049      	lsls	r1, r1, #1
 800209c:	468c      	mov	ip, r1
 800209e:	44bc      	add	ip, r7
 80020a0:	4462      	add	r2, ip
 80020a2:	7812      	ldrb	r2, [r2, #0]
 80020a4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80020a6:	2310      	movs	r3, #16
 80020a8:	33ff      	adds	r3, #255	; 0xff
 80020aa:	18fb      	adds	r3, r7, r3
 80020ac:	2200      	movs	r2, #0
 80020ae:	701a      	strb	r2, [r3, #0]
 80020b0:	e015      	b.n	80020de <ssd1306_I2C_WriteMulti+0x92>
dt[i+1] = data[i];
 80020b2:	2010      	movs	r0, #16
 80020b4:	30ff      	adds	r0, #255	; 0xff
 80020b6:	183b      	adds	r3, r7, r0
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	18d2      	adds	r2, r2, r3
 80020be:	183b      	adds	r3, r7, r0
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	3301      	adds	r3, #1
 80020c4:	7811      	ldrb	r1, [r2, #0]
 80020c6:	4a1e      	ldr	r2, [pc, #120]	; (8002140 <ssd1306_I2C_WriteMulti+0xf4>)
 80020c8:	2488      	movs	r4, #136	; 0x88
 80020ca:	0064      	lsls	r4, r4, #1
 80020cc:	46a4      	mov	ip, r4
 80020ce:	44bc      	add	ip, r7
 80020d0:	4462      	add	r2, ip
 80020d2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80020d4:	183b      	adds	r3, r7, r0
 80020d6:	781a      	ldrb	r2, [r3, #0]
 80020d8:	183b      	adds	r3, r7, r0
 80020da:	3201      	adds	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]
 80020de:	2310      	movs	r3, #16
 80020e0:	33ff      	adds	r3, #255	; 0xff
 80020e2:	18fb      	adds	r3, r7, r3
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	4a14      	ldr	r2, [pc, #80]	; (800213c <ssd1306_I2C_WriteMulti+0xf0>)
 80020ea:	2188      	movs	r1, #136	; 0x88
 80020ec:	0049      	lsls	r1, r1, #1
 80020ee:	468c      	mov	ip, r1
 80020f0:	44bc      	add	ip, r7
 80020f2:	4462      	add	r2, ip
 80020f4:	8812      	ldrh	r2, [r2, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d8db      	bhi.n	80020b2 <ssd1306_I2C_WriteMulti+0x66>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80020fa:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <ssd1306_I2C_WriteMulti+0xe8>)
 80020fc:	2288      	movs	r2, #136	; 0x88
 80020fe:	0052      	lsls	r2, r2, #1
 8002100:	4694      	mov	ip, r2
 8002102:	44bc      	add	ip, r7
 8002104:	4463      	add	r3, ip
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	b299      	uxth	r1, r3
 800210a:	4b0c      	ldr	r3, [pc, #48]	; (800213c <ssd1306_I2C_WriteMulti+0xf0>)
 800210c:	2288      	movs	r2, #136	; 0x88
 800210e:	0052      	lsls	r2, r2, #1
 8002110:	4694      	mov	ip, r2
 8002112:	44bc      	add	ip, r7
 8002114:	4463      	add	r3, ip
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	3301      	adds	r3, #1
 800211a:	b29b      	uxth	r3, r3
 800211c:	220c      	movs	r2, #12
 800211e:	18ba      	adds	r2, r7, r2
 8002120:	4808      	ldr	r0, [pc, #32]	; (8002144 <ssd1306_I2C_WriteMulti+0xf8>)
 8002122:	240a      	movs	r4, #10
 8002124:	9400      	str	r4, [sp, #0]
 8002126:	f001 f93f 	bl	80033a8 <HAL_I2C_Master_Transmit>
}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	46bd      	mov	sp, r7
 800212e:	b045      	add	sp, #276	; 0x114
 8002130:	bd90      	pop	{r4, r7, pc}
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	fffffef7 	.word	0xfffffef7
 8002138:	fffffef6 	.word	0xfffffef6
 800213c:	fffffef4 	.word	0xfffffef4
 8002140:	fffffefc 	.word	0xfffffefc
 8002144:	20000720 	.word	0x20000720

08002148 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002148:	b590      	push	{r4, r7, lr}
 800214a:	b087      	sub	sp, #28
 800214c:	af02      	add	r7, sp, #8
 800214e:	0004      	movs	r4, r0
 8002150:	0008      	movs	r0, r1
 8002152:	0011      	movs	r1, r2
 8002154:	1dfb      	adds	r3, r7, #7
 8002156:	1c22      	adds	r2, r4, #0
 8002158:	701a      	strb	r2, [r3, #0]
 800215a:	1dbb      	adds	r3, r7, #6
 800215c:	1c02      	adds	r2, r0, #0
 800215e:	701a      	strb	r2, [r3, #0]
 8002160:	1d7b      	adds	r3, r7, #5
 8002162:	1c0a      	adds	r2, r1, #0
 8002164:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 8002166:	200c      	movs	r0, #12
 8002168:	183b      	adds	r3, r7, r0
 800216a:	1dba      	adds	r2, r7, #6
 800216c:	7812      	ldrb	r2, [r2, #0]
 800216e:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 8002170:	183b      	adds	r3, r7, r0
 8002172:	1d7a      	adds	r2, r7, #5
 8002174:	7812      	ldrb	r2, [r2, #0]
 8002176:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002178:	1dfb      	adds	r3, r7, #7
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	b299      	uxth	r1, r3
 800217e:	183a      	adds	r2, r7, r0
 8002180:	4804      	ldr	r0, [pc, #16]	; (8002194 <ssd1306_I2C_Write+0x4c>)
 8002182:	230a      	movs	r3, #10
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	2302      	movs	r3, #2
 8002188:	f001 f90e 	bl	80033a8 <HAL_I2C_Master_Transmit>
}
 800218c:	46c0      	nop			; (mov r8, r8)
 800218e:	46bd      	mov	sp, r7
 8002190:	b005      	add	sp, #20
 8002192:	bd90      	pop	{r4, r7, pc}
 8002194:	20000720 	.word	0x20000720

08002198 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800219e:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <HAL_MspInit+0x44>)
 80021a0:	699a      	ldr	r2, [r3, #24]
 80021a2:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <HAL_MspInit+0x44>)
 80021a4:	2101      	movs	r1, #1
 80021a6:	430a      	orrs	r2, r1
 80021a8:	619a      	str	r2, [r3, #24]
 80021aa:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <HAL_MspInit+0x44>)
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	2201      	movs	r2, #1
 80021b0:	4013      	ands	r3, r2
 80021b2:	607b      	str	r3, [r7, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021b6:	4b09      	ldr	r3, [pc, #36]	; (80021dc <HAL_MspInit+0x44>)
 80021b8:	69da      	ldr	r2, [r3, #28]
 80021ba:	4b08      	ldr	r3, [pc, #32]	; (80021dc <HAL_MspInit+0x44>)
 80021bc:	2180      	movs	r1, #128	; 0x80
 80021be:	0549      	lsls	r1, r1, #21
 80021c0:	430a      	orrs	r2, r1
 80021c2:	61da      	str	r2, [r3, #28]
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <HAL_MspInit+0x44>)
 80021c6:	69da      	ldr	r2, [r3, #28]
 80021c8:	2380      	movs	r3, #128	; 0x80
 80021ca:	055b      	lsls	r3, r3, #21
 80021cc:	4013      	ands	r3, r2
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	46bd      	mov	sp, r7
 80021d6:	b002      	add	sp, #8
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	40021000 	.word	0x40021000

080021e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021e0:	b590      	push	{r4, r7, lr}
 80021e2:	b08b      	sub	sp, #44	; 0x2c
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	2414      	movs	r4, #20
 80021ea:	193b      	adds	r3, r7, r4
 80021ec:	0018      	movs	r0, r3
 80021ee:	2314      	movs	r3, #20
 80021f0:	001a      	movs	r2, r3
 80021f2:	2100      	movs	r1, #0
 80021f4:	f003 f89e 	bl	8005334 <memset>
  if(hi2c->Instance==I2C1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a1c      	ldr	r2, [pc, #112]	; (8002270 <HAL_I2C_MspInit+0x90>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d132      	bne.n	8002268 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002202:	4b1c      	ldr	r3, [pc, #112]	; (8002274 <HAL_I2C_MspInit+0x94>)
 8002204:	695a      	ldr	r2, [r3, #20]
 8002206:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <HAL_I2C_MspInit+0x94>)
 8002208:	2180      	movs	r1, #128	; 0x80
 800220a:	02c9      	lsls	r1, r1, #11
 800220c:	430a      	orrs	r2, r1
 800220e:	615a      	str	r2, [r3, #20]
 8002210:	4b18      	ldr	r3, [pc, #96]	; (8002274 <HAL_I2C_MspInit+0x94>)
 8002212:	695a      	ldr	r2, [r3, #20]
 8002214:	2380      	movs	r3, #128	; 0x80
 8002216:	02db      	lsls	r3, r3, #11
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800221e:	193b      	adds	r3, r7, r4
 8002220:	22c0      	movs	r2, #192	; 0xc0
 8002222:	0092      	lsls	r2, r2, #2
 8002224:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002226:	0021      	movs	r1, r4
 8002228:	187b      	adds	r3, r7, r1
 800222a:	2212      	movs	r2, #18
 800222c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800222e:	187b      	adds	r3, r7, r1
 8002230:	2201      	movs	r2, #1
 8002232:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002234:	187b      	adds	r3, r7, r1
 8002236:	2203      	movs	r2, #3
 8002238:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800223a:	187b      	adds	r3, r7, r1
 800223c:	2201      	movs	r2, #1
 800223e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002240:	187b      	adds	r3, r7, r1
 8002242:	4a0d      	ldr	r2, [pc, #52]	; (8002278 <HAL_I2C_MspInit+0x98>)
 8002244:	0019      	movs	r1, r3
 8002246:	0010      	movs	r0, r2
 8002248:	f000 fdba 	bl	8002dc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800224c:	4b09      	ldr	r3, [pc, #36]	; (8002274 <HAL_I2C_MspInit+0x94>)
 800224e:	69da      	ldr	r2, [r3, #28]
 8002250:	4b08      	ldr	r3, [pc, #32]	; (8002274 <HAL_I2C_MspInit+0x94>)
 8002252:	2180      	movs	r1, #128	; 0x80
 8002254:	0389      	lsls	r1, r1, #14
 8002256:	430a      	orrs	r2, r1
 8002258:	61da      	str	r2, [r3, #28]
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_I2C_MspInit+0x94>)
 800225c:	69da      	ldr	r2, [r3, #28]
 800225e:	2380      	movs	r3, #128	; 0x80
 8002260:	039b      	lsls	r3, r3, #14
 8002262:	4013      	ands	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002268:	46c0      	nop			; (mov r8, r8)
 800226a:	46bd      	mov	sp, r7
 800226c:	b00b      	add	sp, #44	; 0x2c
 800226e:	bd90      	pop	{r4, r7, pc}
 8002270:	40005400 	.word	0x40005400
 8002274:	40021000 	.word	0x40021000
 8002278:	48000400 	.word	0x48000400

0800227c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800227c:	b590      	push	{r4, r7, lr}
 800227e:	b08d      	sub	sp, #52	; 0x34
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	241c      	movs	r4, #28
 8002286:	193b      	adds	r3, r7, r4
 8002288:	0018      	movs	r0, r3
 800228a:	2314      	movs	r3, #20
 800228c:	001a      	movs	r2, r3
 800228e:	2100      	movs	r1, #0
 8002290:	f003 f850 	bl	8005334 <memset>
  if(huart->Instance==USART1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a5f      	ldr	r2, [pc, #380]	; (8002418 <HAL_UART_MspInit+0x19c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d15a      	bne.n	8002354 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800229e:	4b5f      	ldr	r3, [pc, #380]	; (800241c <HAL_UART_MspInit+0x1a0>)
 80022a0:	699a      	ldr	r2, [r3, #24]
 80022a2:	4b5e      	ldr	r3, [pc, #376]	; (800241c <HAL_UART_MspInit+0x1a0>)
 80022a4:	2180      	movs	r1, #128	; 0x80
 80022a6:	01c9      	lsls	r1, r1, #7
 80022a8:	430a      	orrs	r2, r1
 80022aa:	619a      	str	r2, [r3, #24]
 80022ac:	4b5b      	ldr	r3, [pc, #364]	; (800241c <HAL_UART_MspInit+0x1a0>)
 80022ae:	699a      	ldr	r2, [r3, #24]
 80022b0:	2380      	movs	r3, #128	; 0x80
 80022b2:	01db      	lsls	r3, r3, #7
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
 80022b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ba:	4b58      	ldr	r3, [pc, #352]	; (800241c <HAL_UART_MspInit+0x1a0>)
 80022bc:	695a      	ldr	r2, [r3, #20]
 80022be:	4b57      	ldr	r3, [pc, #348]	; (800241c <HAL_UART_MspInit+0x1a0>)
 80022c0:	2180      	movs	r1, #128	; 0x80
 80022c2:	0289      	lsls	r1, r1, #10
 80022c4:	430a      	orrs	r2, r1
 80022c6:	615a      	str	r2, [r3, #20]
 80022c8:	4b54      	ldr	r3, [pc, #336]	; (800241c <HAL_UART_MspInit+0x1a0>)
 80022ca:	695a      	ldr	r2, [r3, #20]
 80022cc:	2380      	movs	r3, #128	; 0x80
 80022ce:	029b      	lsls	r3, r3, #10
 80022d0:	4013      	ands	r3, r2
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022d6:	193b      	adds	r3, r7, r4
 80022d8:	22c0      	movs	r2, #192	; 0xc0
 80022da:	00d2      	lsls	r2, r2, #3
 80022dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022de:	0021      	movs	r1, r4
 80022e0:	187b      	adds	r3, r7, r1
 80022e2:	2202      	movs	r2, #2
 80022e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	187b      	adds	r3, r7, r1
 80022e8:	2200      	movs	r2, #0
 80022ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022ec:	187b      	adds	r3, r7, r1
 80022ee:	2203      	movs	r2, #3
 80022f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80022f2:	187b      	adds	r3, r7, r1
 80022f4:	2201      	movs	r2, #1
 80022f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f8:	187a      	adds	r2, r7, r1
 80022fa:	2390      	movs	r3, #144	; 0x90
 80022fc:	05db      	lsls	r3, r3, #23
 80022fe:	0011      	movs	r1, r2
 8002300:	0018      	movs	r0, r3
 8002302:	f000 fd5d 	bl	8002dc0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8002306:	4b46      	ldr	r3, [pc, #280]	; (8002420 <HAL_UART_MspInit+0x1a4>)
 8002308:	4a46      	ldr	r2, [pc, #280]	; (8002424 <HAL_UART_MspInit+0x1a8>)
 800230a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800230c:	4b44      	ldr	r3, [pc, #272]	; (8002420 <HAL_UART_MspInit+0x1a4>)
 800230e:	2200      	movs	r2, #0
 8002310:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002312:	4b43      	ldr	r3, [pc, #268]	; (8002420 <HAL_UART_MspInit+0x1a4>)
 8002314:	2200      	movs	r2, #0
 8002316:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002318:	4b41      	ldr	r3, [pc, #260]	; (8002420 <HAL_UART_MspInit+0x1a4>)
 800231a:	2280      	movs	r2, #128	; 0x80
 800231c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800231e:	4b40      	ldr	r3, [pc, #256]	; (8002420 <HAL_UART_MspInit+0x1a4>)
 8002320:	2200      	movs	r2, #0
 8002322:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002324:	4b3e      	ldr	r3, [pc, #248]	; (8002420 <HAL_UART_MspInit+0x1a4>)
 8002326:	2200      	movs	r2, #0
 8002328:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800232a:	4b3d      	ldr	r3, [pc, #244]	; (8002420 <HAL_UART_MspInit+0x1a4>)
 800232c:	2220      	movs	r2, #32
 800232e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002330:	4b3b      	ldr	r3, [pc, #236]	; (8002420 <HAL_UART_MspInit+0x1a4>)
 8002332:	2200      	movs	r2, #0
 8002334:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002336:	4b3a      	ldr	r3, [pc, #232]	; (8002420 <HAL_UART_MspInit+0x1a4>)
 8002338:	0018      	movs	r0, r3
 800233a:	f000 fb1d 	bl	8002978 <HAL_DMA_Init>
 800233e:	1e03      	subs	r3, r0, #0
 8002340:	d001      	beq.n	8002346 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002342:	f7ff fc1f 	bl	8001b84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a35      	ldr	r2, [pc, #212]	; (8002420 <HAL_UART_MspInit+0x1a4>)
 800234a:	671a      	str	r2, [r3, #112]	; 0x70
 800234c:	4b34      	ldr	r3, [pc, #208]	; (8002420 <HAL_UART_MspInit+0x1a4>)
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002352:	e05d      	b.n	8002410 <HAL_UART_MspInit+0x194>
  else if(huart->Instance==USART2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a33      	ldr	r2, [pc, #204]	; (8002428 <HAL_UART_MspInit+0x1ac>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d158      	bne.n	8002410 <HAL_UART_MspInit+0x194>
    __HAL_RCC_USART2_CLK_ENABLE();
 800235e:	4b2f      	ldr	r3, [pc, #188]	; (800241c <HAL_UART_MspInit+0x1a0>)
 8002360:	69da      	ldr	r2, [r3, #28]
 8002362:	4b2e      	ldr	r3, [pc, #184]	; (800241c <HAL_UART_MspInit+0x1a0>)
 8002364:	2180      	movs	r1, #128	; 0x80
 8002366:	0289      	lsls	r1, r1, #10
 8002368:	430a      	orrs	r2, r1
 800236a:	61da      	str	r2, [r3, #28]
 800236c:	4b2b      	ldr	r3, [pc, #172]	; (800241c <HAL_UART_MspInit+0x1a0>)
 800236e:	69da      	ldr	r2, [r3, #28]
 8002370:	2380      	movs	r3, #128	; 0x80
 8002372:	029b      	lsls	r3, r3, #10
 8002374:	4013      	ands	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237a:	4b28      	ldr	r3, [pc, #160]	; (800241c <HAL_UART_MspInit+0x1a0>)
 800237c:	695a      	ldr	r2, [r3, #20]
 800237e:	4b27      	ldr	r3, [pc, #156]	; (800241c <HAL_UART_MspInit+0x1a0>)
 8002380:	2180      	movs	r1, #128	; 0x80
 8002382:	0289      	lsls	r1, r1, #10
 8002384:	430a      	orrs	r2, r1
 8002386:	615a      	str	r2, [r3, #20]
 8002388:	4b24      	ldr	r3, [pc, #144]	; (800241c <HAL_UART_MspInit+0x1a0>)
 800238a:	695a      	ldr	r2, [r3, #20]
 800238c:	2380      	movs	r3, #128	; 0x80
 800238e:	029b      	lsls	r3, r3, #10
 8002390:	4013      	ands	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002396:	211c      	movs	r1, #28
 8002398:	187b      	adds	r3, r7, r1
 800239a:	220c      	movs	r2, #12
 800239c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239e:	187b      	adds	r3, r7, r1
 80023a0:	2202      	movs	r2, #2
 80023a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a4:	187b      	adds	r3, r7, r1
 80023a6:	2200      	movs	r2, #0
 80023a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023aa:	187b      	adds	r3, r7, r1
 80023ac:	2200      	movs	r2, #0
 80023ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80023b0:	187b      	adds	r3, r7, r1
 80023b2:	2201      	movs	r2, #1
 80023b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b6:	187a      	adds	r2, r7, r1
 80023b8:	2390      	movs	r3, #144	; 0x90
 80023ba:	05db      	lsls	r3, r3, #23
 80023bc:	0011      	movs	r1, r2
 80023be:	0018      	movs	r0, r3
 80023c0:	f000 fcfe 	bl	8002dc0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 80023c4:	4b19      	ldr	r3, [pc, #100]	; (800242c <HAL_UART_MspInit+0x1b0>)
 80023c6:	4a1a      	ldr	r2, [pc, #104]	; (8002430 <HAL_UART_MspInit+0x1b4>)
 80023c8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023ca:	4b18      	ldr	r3, [pc, #96]	; (800242c <HAL_UART_MspInit+0x1b0>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023d0:	4b16      	ldr	r3, [pc, #88]	; (800242c <HAL_UART_MspInit+0x1b0>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023d6:	4b15      	ldr	r3, [pc, #84]	; (800242c <HAL_UART_MspInit+0x1b0>)
 80023d8:	2280      	movs	r2, #128	; 0x80
 80023da:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023dc:	4b13      	ldr	r3, [pc, #76]	; (800242c <HAL_UART_MspInit+0x1b0>)
 80023de:	2200      	movs	r2, #0
 80023e0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023e2:	4b12      	ldr	r3, [pc, #72]	; (800242c <HAL_UART_MspInit+0x1b0>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80023e8:	4b10      	ldr	r3, [pc, #64]	; (800242c <HAL_UART_MspInit+0x1b0>)
 80023ea:	2220      	movs	r2, #32
 80023ec:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023ee:	4b0f      	ldr	r3, [pc, #60]	; (800242c <HAL_UART_MspInit+0x1b0>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80023f4:	4b0d      	ldr	r3, [pc, #52]	; (800242c <HAL_UART_MspInit+0x1b0>)
 80023f6:	0018      	movs	r0, r3
 80023f8:	f000 fabe 	bl	8002978 <HAL_DMA_Init>
 80023fc:	1e03      	subs	r3, r0, #0
 80023fe:	d001      	beq.n	8002404 <HAL_UART_MspInit+0x188>
      Error_Handler();
 8002400:	f7ff fbc0 	bl	8001b84 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a09      	ldr	r2, [pc, #36]	; (800242c <HAL_UART_MspInit+0x1b0>)
 8002408:	671a      	str	r2, [r3, #112]	; 0x70
 800240a:	4b08      	ldr	r3, [pc, #32]	; (800242c <HAL_UART_MspInit+0x1b0>)
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002410:	46c0      	nop			; (mov r8, r8)
 8002412:	46bd      	mov	sp, r7
 8002414:	b00d      	add	sp, #52	; 0x34
 8002416:	bd90      	pop	{r4, r7, pc}
 8002418:	40013800 	.word	0x40013800
 800241c:	40021000 	.word	0x40021000
 8002420:	200005d0 	.word	0x200005d0
 8002424:	40020030 	.word	0x40020030
 8002428:	40004400 	.word	0x40004400
 800242c:	2000058c 	.word	0x2000058c
 8002430:	40020058 	.word	0x40020058

08002434 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a18      	ldr	r2, [pc, #96]	; (80024a4 <HAL_UART_MspDeInit+0x70>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d113      	bne.n	800246e <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002446:	4b18      	ldr	r3, [pc, #96]	; (80024a8 <HAL_UART_MspDeInit+0x74>)
 8002448:	699a      	ldr	r2, [r3, #24]
 800244a:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <HAL_UART_MspDeInit+0x74>)
 800244c:	4917      	ldr	r1, [pc, #92]	; (80024ac <HAL_UART_MspDeInit+0x78>)
 800244e:	400a      	ands	r2, r1
 8002450:	619a      	str	r2, [r3, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8002452:	23c0      	movs	r3, #192	; 0xc0
 8002454:	00da      	lsls	r2, r3, #3
 8002456:	2390      	movs	r3, #144	; 0x90
 8002458:	05db      	lsls	r3, r3, #23
 800245a:	0011      	movs	r1, r2
 800245c:	0018      	movs	r0, r3
 800245e:	f000 fe1f 	bl	80030a0 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002466:	0018      	movs	r0, r3
 8002468:	f000 face 	bl	8002a08 <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 800246c:	e015      	b.n	800249a <HAL_UART_MspDeInit+0x66>
  else if(huart->Instance==USART2)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a0f      	ldr	r2, [pc, #60]	; (80024b0 <HAL_UART_MspDeInit+0x7c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d110      	bne.n	800249a <HAL_UART_MspDeInit+0x66>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <HAL_UART_MspDeInit+0x74>)
 800247a:	69da      	ldr	r2, [r3, #28]
 800247c:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <HAL_UART_MspDeInit+0x74>)
 800247e:	490d      	ldr	r1, [pc, #52]	; (80024b4 <HAL_UART_MspDeInit+0x80>)
 8002480:	400a      	ands	r2, r1
 8002482:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 8002484:	2390      	movs	r3, #144	; 0x90
 8002486:	05db      	lsls	r3, r3, #23
 8002488:	210c      	movs	r1, #12
 800248a:	0018      	movs	r0, r3
 800248c:	f000 fe08 	bl	80030a0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002494:	0018      	movs	r0, r3
 8002496:	f000 fab7 	bl	8002a08 <HAL_DMA_DeInit>
}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	46bd      	mov	sp, r7
 800249e:	b002      	add	sp, #8
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	46c0      	nop			; (mov r8, r8)
 80024a4:	40013800 	.word	0x40013800
 80024a8:	40021000 	.word	0x40021000
 80024ac:	ffffbfff 	.word	0xffffbfff
 80024b0:	40004400 	.word	0x40004400
 80024b4:	fffdffff 	.word	0xfffdffff

080024b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80024bc:	46c0      	nop			; (mov r8, r8)
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024c6:	e7fe      	b.n	80024c6 <HardFault_Handler+0x4>

080024c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80024cc:	46c0      	nop			; (mov r8, r8)
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024d6:	46c0      	nop			; (mov r8, r8)
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024e0:	f000 f92c 	bl	800273c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024e4:	46c0      	nop			; (mov r8, r8)
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80024f0:	4b03      	ldr	r3, [pc, #12]	; (8002500 <DMA1_Channel2_3_IRQHandler+0x14>)
 80024f2:	0018      	movs	r0, r3
 80024f4:	f000 fb6f 	bl	8002bd6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80024f8:	46c0      	nop			; (mov r8, r8)
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	200005d0 	.word	0x200005d0

08002504 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002508:	4b03      	ldr	r3, [pc, #12]	; (8002518 <DMA1_Channel4_5_IRQHandler+0x14>)
 800250a:	0018      	movs	r0, r3
 800250c:	f000 fb63 	bl	8002bd6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8002510:	46c0      	nop			; (mov r8, r8)
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	2000058c 	.word	0x2000058c

0800251c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
	return 1;
 8002520:	2301      	movs	r3, #1
}
 8002522:	0018      	movs	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <_kill>:

int _kill(int pid, int sig)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002532:	f002 fed5 	bl	80052e0 <__errno>
 8002536:	0003      	movs	r3, r0
 8002538:	2216      	movs	r2, #22
 800253a:	601a      	str	r2, [r3, #0]
	return -1;
 800253c:	2301      	movs	r3, #1
 800253e:	425b      	negs	r3, r3
}
 8002540:	0018      	movs	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	b002      	add	sp, #8
 8002546:	bd80      	pop	{r7, pc}

08002548 <_exit>:

void _exit (int status)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002550:	2301      	movs	r3, #1
 8002552:	425a      	negs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	0011      	movs	r1, r2
 8002558:	0018      	movs	r0, r3
 800255a:	f7ff ffe5 	bl	8002528 <_kill>
	while (1) {}		/* Make sure we hang here */
 800255e:	e7fe      	b.n	800255e <_exit+0x16>

08002560 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	e00a      	b.n	8002588 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002572:	e000      	b.n	8002576 <_read+0x16>
 8002574:	bf00      	nop
 8002576:	0001      	movs	r1, r0
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	60ba      	str	r2, [r7, #8]
 800257e:	b2ca      	uxtb	r2, r1
 8002580:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	3301      	adds	r3, #1
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	429a      	cmp	r2, r3
 800258e:	dbf0      	blt.n	8002572 <_read+0x12>
	}

return len;
 8002590:	687b      	ldr	r3, [r7, #4]
}
 8002592:	0018      	movs	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	b006      	add	sp, #24
 8002598:	bd80      	pop	{r7, pc}

0800259a <_close>:
	}
	return len;
}

int _close(int file)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
	return -1;
 80025a2:	2301      	movs	r3, #1
 80025a4:	425b      	negs	r3, r3
}
 80025a6:	0018      	movs	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	b002      	add	sp, #8
 80025ac:	bd80      	pop	{r7, pc}

080025ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	2280      	movs	r2, #128	; 0x80
 80025bc:	0192      	lsls	r2, r2, #6
 80025be:	605a      	str	r2, [r3, #4]
	return 0;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	0018      	movs	r0, r3
 80025c4:	46bd      	mov	sp, r7
 80025c6:	b002      	add	sp, #8
 80025c8:	bd80      	pop	{r7, pc}

080025ca <_isatty>:

int _isatty(int file)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
	return 1;
 80025d2:	2301      	movs	r3, #1
}
 80025d4:	0018      	movs	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b002      	add	sp, #8
 80025da:	bd80      	pop	{r7, pc}

080025dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
	return 0;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	0018      	movs	r0, r3
 80025ec:	46bd      	mov	sp, r7
 80025ee:	b004      	add	sp, #16
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80025fc:	4b11      	ldr	r3, [pc, #68]	; (8002644 <_sbrk+0x50>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d102      	bne.n	800260a <_sbrk+0x16>
		heap_end = &end;
 8002604:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <_sbrk+0x50>)
 8002606:	4a10      	ldr	r2, [pc, #64]	; (8002648 <_sbrk+0x54>)
 8002608:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800260a:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <_sbrk+0x50>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <_sbrk+0x50>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	18d2      	adds	r2, r2, r3
 8002618:	466b      	mov	r3, sp
 800261a:	429a      	cmp	r2, r3
 800261c:	d907      	bls.n	800262e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800261e:	f002 fe5f 	bl	80052e0 <__errno>
 8002622:	0003      	movs	r3, r0
 8002624:	220c      	movs	r2, #12
 8002626:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002628:	2301      	movs	r3, #1
 800262a:	425b      	negs	r3, r3
 800262c:	e006      	b.n	800263c <_sbrk+0x48>
	}

	heap_end += incr;
 800262e:	4b05      	ldr	r3, [pc, #20]	; (8002644 <_sbrk+0x50>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	18d2      	adds	r2, r2, r3
 8002636:	4b03      	ldr	r3, [pc, #12]	; (8002644 <_sbrk+0x50>)
 8002638:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800263a:	68fb      	ldr	r3, [r7, #12]
}
 800263c:	0018      	movs	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	b004      	add	sp, #16
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20000580 	.word	0x20000580
 8002648:	20000780 	.word	0x20000780

0800264c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002650:	46c0      	nop			; (mov r8, r8)
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002658:	480d      	ldr	r0, [pc, #52]	; (8002690 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800265a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800265c:	480d      	ldr	r0, [pc, #52]	; (8002694 <LoopForever+0x6>)
  ldr r1, =_edata
 800265e:	490e      	ldr	r1, [pc, #56]	; (8002698 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002660:	4a0e      	ldr	r2, [pc, #56]	; (800269c <LoopForever+0xe>)
  movs r3, #0
 8002662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002664:	e002      	b.n	800266c <LoopCopyDataInit>

08002666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800266a:	3304      	adds	r3, #4

0800266c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800266c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800266e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002670:	d3f9      	bcc.n	8002666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002672:	4a0b      	ldr	r2, [pc, #44]	; (80026a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002674:	4c0b      	ldr	r4, [pc, #44]	; (80026a4 <LoopForever+0x16>)
  movs r3, #0
 8002676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002678:	e001      	b.n	800267e <LoopFillZerobss>

0800267a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800267a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800267c:	3204      	adds	r2, #4

0800267e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800267e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002680:	d3fb      	bcc.n	800267a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002682:	f7ff ffe3 	bl	800264c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002686:	f002 fe31 	bl	80052ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800268a:	f7fe fff7 	bl	800167c <main>

0800268e <LoopForever>:

LoopForever:
    b LoopForever
 800268e:	e7fe      	b.n	800268e <LoopForever>
  ldr   r0, =_estack
 8002690:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002698:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800269c:	080099a8 	.word	0x080099a8
  ldr r2, =_sbss
 80026a0:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80026a4:	20000780 	.word	0x20000780

080026a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026a8:	e7fe      	b.n	80026a8 <ADC1_IRQHandler>
	...

080026ac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026b0:	4b07      	ldr	r3, [pc, #28]	; (80026d0 <HAL_Init+0x24>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <HAL_Init+0x24>)
 80026b6:	2110      	movs	r1, #16
 80026b8:	430a      	orrs	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80026bc:	2000      	movs	r0, #0
 80026be:	f000 f809 	bl	80026d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026c2:	f7ff fd69 	bl	8002198 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	0018      	movs	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	40022000 	.word	0x40022000

080026d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026d4:	b590      	push	{r4, r7, lr}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026dc:	4b14      	ldr	r3, [pc, #80]	; (8002730 <HAL_InitTick+0x5c>)
 80026de:	681c      	ldr	r4, [r3, #0]
 80026e0:	4b14      	ldr	r3, [pc, #80]	; (8002734 <HAL_InitTick+0x60>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	0019      	movs	r1, r3
 80026e6:	23fa      	movs	r3, #250	; 0xfa
 80026e8:	0098      	lsls	r0, r3, #2
 80026ea:	f7fd fd1f 	bl	800012c <__udivsi3>
 80026ee:	0003      	movs	r3, r0
 80026f0:	0019      	movs	r1, r3
 80026f2:	0020      	movs	r0, r4
 80026f4:	f7fd fd1a 	bl	800012c <__udivsi3>
 80026f8:	0003      	movs	r3, r0
 80026fa:	0018      	movs	r0, r3
 80026fc:	f000 f92f 	bl	800295e <HAL_SYSTICK_Config>
 8002700:	1e03      	subs	r3, r0, #0
 8002702:	d001      	beq.n	8002708 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e00f      	b.n	8002728 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b03      	cmp	r3, #3
 800270c:	d80b      	bhi.n	8002726 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	2301      	movs	r3, #1
 8002712:	425b      	negs	r3, r3
 8002714:	2200      	movs	r2, #0
 8002716:	0018      	movs	r0, r3
 8002718:	f000 f8fc 	bl	8002914 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800271c:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_InitTick+0x64>)
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	e000      	b.n	8002728 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
}
 8002728:	0018      	movs	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	b003      	add	sp, #12
 800272e:	bd90      	pop	{r4, r7, pc}
 8002730:	2000001c 	.word	0x2000001c
 8002734:	20000024 	.word	0x20000024
 8002738:	20000020 	.word	0x20000020

0800273c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002740:	4b05      	ldr	r3, [pc, #20]	; (8002758 <HAL_IncTick+0x1c>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	001a      	movs	r2, r3
 8002746:	4b05      	ldr	r3, [pc, #20]	; (800275c <HAL_IncTick+0x20>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	18d2      	adds	r2, r2, r3
 800274c:	4b03      	ldr	r3, [pc, #12]	; (800275c <HAL_IncTick+0x20>)
 800274e:	601a      	str	r2, [r3, #0]
}
 8002750:	46c0      	nop			; (mov r8, r8)
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	46c0      	nop			; (mov r8, r8)
 8002758:	20000024 	.word	0x20000024
 800275c:	2000076c 	.word	0x2000076c

08002760 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  return uwTick;
 8002764:	4b02      	ldr	r3, [pc, #8]	; (8002770 <HAL_GetTick+0x10>)
 8002766:	681b      	ldr	r3, [r3, #0]
}
 8002768:	0018      	movs	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	2000076c 	.word	0x2000076c

08002774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800277c:	f7ff fff0 	bl	8002760 <HAL_GetTick>
 8002780:	0003      	movs	r3, r0
 8002782:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	3301      	adds	r3, #1
 800278c:	d005      	beq.n	800279a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800278e:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <HAL_Delay+0x44>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	001a      	movs	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	189b      	adds	r3, r3, r2
 8002798:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	f7ff ffe0 	bl	8002760 <HAL_GetTick>
 80027a0:	0002      	movs	r2, r0
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d8f7      	bhi.n	800279c <HAL_Delay+0x28>
  {
  }
}
 80027ac:	46c0      	nop			; (mov r8, r8)
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	46bd      	mov	sp, r7
 80027b2:	b004      	add	sp, #16
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	20000024 	.word	0x20000024

080027bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	0002      	movs	r2, r0
 80027c4:	1dfb      	adds	r3, r7, #7
 80027c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027c8:	1dfb      	adds	r3, r7, #7
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b7f      	cmp	r3, #127	; 0x7f
 80027ce:	d809      	bhi.n	80027e4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027d0:	1dfb      	adds	r3, r7, #7
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	001a      	movs	r2, r3
 80027d6:	231f      	movs	r3, #31
 80027d8:	401a      	ands	r2, r3
 80027da:	4b04      	ldr	r3, [pc, #16]	; (80027ec <__NVIC_EnableIRQ+0x30>)
 80027dc:	2101      	movs	r1, #1
 80027de:	4091      	lsls	r1, r2
 80027e0:	000a      	movs	r2, r1
 80027e2:	601a      	str	r2, [r3, #0]
  }
}
 80027e4:	46c0      	nop			; (mov r8, r8)
 80027e6:	46bd      	mov	sp, r7
 80027e8:	b002      	add	sp, #8
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	e000e100 	.word	0xe000e100

080027f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027f0:	b590      	push	{r4, r7, lr}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	0002      	movs	r2, r0
 80027f8:	6039      	str	r1, [r7, #0]
 80027fa:	1dfb      	adds	r3, r7, #7
 80027fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027fe:	1dfb      	adds	r3, r7, #7
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b7f      	cmp	r3, #127	; 0x7f
 8002804:	d828      	bhi.n	8002858 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002806:	4a2f      	ldr	r2, [pc, #188]	; (80028c4 <__NVIC_SetPriority+0xd4>)
 8002808:	1dfb      	adds	r3, r7, #7
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	b25b      	sxtb	r3, r3
 800280e:	089b      	lsrs	r3, r3, #2
 8002810:	33c0      	adds	r3, #192	; 0xc0
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	589b      	ldr	r3, [r3, r2]
 8002816:	1dfa      	adds	r2, r7, #7
 8002818:	7812      	ldrb	r2, [r2, #0]
 800281a:	0011      	movs	r1, r2
 800281c:	2203      	movs	r2, #3
 800281e:	400a      	ands	r2, r1
 8002820:	00d2      	lsls	r2, r2, #3
 8002822:	21ff      	movs	r1, #255	; 0xff
 8002824:	4091      	lsls	r1, r2
 8002826:	000a      	movs	r2, r1
 8002828:	43d2      	mvns	r2, r2
 800282a:	401a      	ands	r2, r3
 800282c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	019b      	lsls	r3, r3, #6
 8002832:	22ff      	movs	r2, #255	; 0xff
 8002834:	401a      	ands	r2, r3
 8002836:	1dfb      	adds	r3, r7, #7
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	0018      	movs	r0, r3
 800283c:	2303      	movs	r3, #3
 800283e:	4003      	ands	r3, r0
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002844:	481f      	ldr	r0, [pc, #124]	; (80028c4 <__NVIC_SetPriority+0xd4>)
 8002846:	1dfb      	adds	r3, r7, #7
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	b25b      	sxtb	r3, r3
 800284c:	089b      	lsrs	r3, r3, #2
 800284e:	430a      	orrs	r2, r1
 8002850:	33c0      	adds	r3, #192	; 0xc0
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002856:	e031      	b.n	80028bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002858:	4a1b      	ldr	r2, [pc, #108]	; (80028c8 <__NVIC_SetPriority+0xd8>)
 800285a:	1dfb      	adds	r3, r7, #7
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	0019      	movs	r1, r3
 8002860:	230f      	movs	r3, #15
 8002862:	400b      	ands	r3, r1
 8002864:	3b08      	subs	r3, #8
 8002866:	089b      	lsrs	r3, r3, #2
 8002868:	3306      	adds	r3, #6
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	18d3      	adds	r3, r2, r3
 800286e:	3304      	adds	r3, #4
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	1dfa      	adds	r2, r7, #7
 8002874:	7812      	ldrb	r2, [r2, #0]
 8002876:	0011      	movs	r1, r2
 8002878:	2203      	movs	r2, #3
 800287a:	400a      	ands	r2, r1
 800287c:	00d2      	lsls	r2, r2, #3
 800287e:	21ff      	movs	r1, #255	; 0xff
 8002880:	4091      	lsls	r1, r2
 8002882:	000a      	movs	r2, r1
 8002884:	43d2      	mvns	r2, r2
 8002886:	401a      	ands	r2, r3
 8002888:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	019b      	lsls	r3, r3, #6
 800288e:	22ff      	movs	r2, #255	; 0xff
 8002890:	401a      	ands	r2, r3
 8002892:	1dfb      	adds	r3, r7, #7
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	0018      	movs	r0, r3
 8002898:	2303      	movs	r3, #3
 800289a:	4003      	ands	r3, r0
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028a0:	4809      	ldr	r0, [pc, #36]	; (80028c8 <__NVIC_SetPriority+0xd8>)
 80028a2:	1dfb      	adds	r3, r7, #7
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	001c      	movs	r4, r3
 80028a8:	230f      	movs	r3, #15
 80028aa:	4023      	ands	r3, r4
 80028ac:	3b08      	subs	r3, #8
 80028ae:	089b      	lsrs	r3, r3, #2
 80028b0:	430a      	orrs	r2, r1
 80028b2:	3306      	adds	r3, #6
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	18c3      	adds	r3, r0, r3
 80028b8:	3304      	adds	r3, #4
 80028ba:	601a      	str	r2, [r3, #0]
}
 80028bc:	46c0      	nop			; (mov r8, r8)
 80028be:	46bd      	mov	sp, r7
 80028c0:	b003      	add	sp, #12
 80028c2:	bd90      	pop	{r4, r7, pc}
 80028c4:	e000e100 	.word	0xe000e100
 80028c8:	e000ed00 	.word	0xe000ed00

080028cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	1e5a      	subs	r2, r3, #1
 80028d8:	2380      	movs	r3, #128	; 0x80
 80028da:	045b      	lsls	r3, r3, #17
 80028dc:	429a      	cmp	r2, r3
 80028de:	d301      	bcc.n	80028e4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028e0:	2301      	movs	r3, #1
 80028e2:	e010      	b.n	8002906 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028e4:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <SysTick_Config+0x44>)
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	3a01      	subs	r2, #1
 80028ea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ec:	2301      	movs	r3, #1
 80028ee:	425b      	negs	r3, r3
 80028f0:	2103      	movs	r1, #3
 80028f2:	0018      	movs	r0, r3
 80028f4:	f7ff ff7c 	bl	80027f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028f8:	4b05      	ldr	r3, [pc, #20]	; (8002910 <SysTick_Config+0x44>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028fe:	4b04      	ldr	r3, [pc, #16]	; (8002910 <SysTick_Config+0x44>)
 8002900:	2207      	movs	r2, #7
 8002902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002904:	2300      	movs	r3, #0
}
 8002906:	0018      	movs	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	b002      	add	sp, #8
 800290c:	bd80      	pop	{r7, pc}
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	e000e010 	.word	0xe000e010

08002914 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	607a      	str	r2, [r7, #4]
 800291e:	210f      	movs	r1, #15
 8002920:	187b      	adds	r3, r7, r1
 8002922:	1c02      	adds	r2, r0, #0
 8002924:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	187b      	adds	r3, r7, r1
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	b25b      	sxtb	r3, r3
 800292e:	0011      	movs	r1, r2
 8002930:	0018      	movs	r0, r3
 8002932:	f7ff ff5d 	bl	80027f0 <__NVIC_SetPriority>
}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	46bd      	mov	sp, r7
 800293a:	b004      	add	sp, #16
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	0002      	movs	r2, r0
 8002946:	1dfb      	adds	r3, r7, #7
 8002948:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800294a:	1dfb      	adds	r3, r7, #7
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	b25b      	sxtb	r3, r3
 8002950:	0018      	movs	r0, r3
 8002952:	f7ff ff33 	bl	80027bc <__NVIC_EnableIRQ>
}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	46bd      	mov	sp, r7
 800295a:	b002      	add	sp, #8
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	0018      	movs	r0, r3
 800296a:	f7ff ffaf 	bl	80028cc <SysTick_Config>
 800296e:	0003      	movs	r3, r0
}
 8002970:	0018      	movs	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	b002      	add	sp, #8
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002980:	2300      	movs	r3, #0
 8002982:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e036      	b.n	80029fc <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2221      	movs	r2, #33	; 0x21
 8002992:	2102      	movs	r1, #2
 8002994:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	4a18      	ldr	r2, [pc, #96]	; (8002a04 <HAL_DMA_Init+0x8c>)
 80029a2:	4013      	ands	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80029ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	0018      	movs	r0, r3
 80029e0:	f000 f9d2 	bl	8002d88 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2221      	movs	r2, #33	; 0x21
 80029ee:	2101      	movs	r1, #1
 80029f0:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2220      	movs	r2, #32
 80029f6:	2100      	movs	r1, #0
 80029f8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}  
 80029fc:	0018      	movs	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	b004      	add	sp, #16
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	ffffc00f 	.word	0xffffc00f

08002a08 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e03b      	b.n	8002a92 <HAL_DMA_DeInit+0x8a>
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2101      	movs	r1, #1
 8002a26:	438a      	bics	r2, r1
 8002a28:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2200      	movs	r2, #0
 8002a38:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]
  
  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2200      	movs	r2, #0
 8002a48:	60da      	str	r2, [r3, #12]

/* Get DMA Base Address */  
  DMA_CalcBaseAndBitshift(hdma);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f000 f99b 	bl	8002d88 <DMA_CalcBaseAndBitshift>

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	4091      	lsls	r1, r2
 8002a5e:	000a      	movs	r2, r1
 8002a60:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2221      	movs	r2, #33	; 0x21
 8002a84:	2100      	movs	r1, #0
 8002a86:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	0018      	movs	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	b002      	add	sp, #8
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b086      	sub	sp, #24
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	607a      	str	r2, [r7, #4]
 8002aa6:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002aa8:	2317      	movs	r3, #23
 8002aaa:	18fb      	adds	r3, r7, r3
 8002aac:	2200      	movs	r2, #0
 8002aae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	5c9b      	ldrb	r3, [r3, r2]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d101      	bne.n	8002abe <HAL_DMA_Start_IT+0x24>
 8002aba:	2302      	movs	r3, #2
 8002abc:	e04f      	b.n	8002b5e <HAL_DMA_Start_IT+0xc4>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2221      	movs	r2, #33	; 0x21
 8002aca:	5c9b      	ldrb	r3, [r3, r2]
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d13a      	bne.n	8002b48 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2221      	movs	r2, #33	; 0x21
 8002ad6:	2102      	movs	r1, #2
 8002ad8:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2101      	movs	r1, #1
 8002aec:	438a      	bics	r2, r1
 8002aee:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	68b9      	ldr	r1, [r7, #8]
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 f919 	bl	8002d2e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	210e      	movs	r1, #14
 8002b10:	430a      	orrs	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	e00f      	b.n	8002b36 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	210a      	movs	r1, #10
 8002b22:	430a      	orrs	r2, r1
 8002b24:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2104      	movs	r1, #4
 8002b32:	438a      	bics	r2, r1
 8002b34:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2101      	movs	r1, #1
 8002b42:	430a      	orrs	r2, r1
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	e007      	b.n	8002b58 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002b50:	2317      	movs	r3, #23
 8002b52:	18fb      	adds	r3, r7, r3
 8002b54:	2202      	movs	r2, #2
 8002b56:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002b58:	2317      	movs	r3, #23
 8002b5a:	18fb      	adds	r3, r7, r3
 8002b5c:	781b      	ldrb	r3, [r3, #0]
} 
 8002b5e:	0018      	movs	r0, r3
 8002b60:	46bd      	mov	sp, r7
 8002b62:	b006      	add	sp, #24
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2221      	movs	r2, #33	; 0x21
 8002b72:	5c9b      	ldrb	r3, [r3, r2]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d008      	beq.n	8002b8c <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2204      	movs	r2, #4
 8002b7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2220      	movs	r2, #32
 8002b84:	2100      	movs	r1, #0
 8002b86:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e020      	b.n	8002bce <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	210e      	movs	r1, #14
 8002b98:	438a      	bics	r2, r1
 8002b9a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	438a      	bics	r2, r1
 8002baa:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	4091      	lsls	r1, r2
 8002bb8:	000a      	movs	r2, r1
 8002bba:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2221      	movs	r2, #33	; 0x21
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	2100      	movs	r1, #0
 8002bca:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	0018      	movs	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	b002      	add	sp, #8
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b084      	sub	sp, #16
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	2204      	movs	r2, #4
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	0013      	movs	r3, r2
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d024      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x72>
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2204      	movs	r2, #4
 8002c02:	4013      	ands	r3, r2
 8002c04:	d020      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d107      	bne.n	8002c22 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2104      	movs	r1, #4
 8002c1e:	438a      	bics	r2, r1
 8002c20:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2a:	2104      	movs	r1, #4
 8002c2c:	4091      	lsls	r1, r2
 8002c2e:	000a      	movs	r2, r1
 8002c30:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d100      	bne.n	8002c3c <HAL_DMA_IRQHandler+0x66>
 8002c3a:	e06a      	b.n	8002d12 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	0010      	movs	r0, r2
 8002c44:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002c46:	e064      	b.n	8002d12 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	409a      	lsls	r2, r3
 8002c50:	0013      	movs	r3, r2
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4013      	ands	r3, r2
 8002c56:	d02b      	beq.n	8002cb0 <HAL_DMA_IRQHandler+0xda>
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d027      	beq.n	8002cb0 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2220      	movs	r2, #32
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d10b      	bne.n	8002c84 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	210a      	movs	r1, #10
 8002c78:	438a      	bics	r2, r1
 8002c7a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2221      	movs	r2, #33	; 0x21
 8002c80:	2101      	movs	r1, #1
 8002c82:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8c:	2102      	movs	r1, #2
 8002c8e:	4091      	lsls	r1, r2
 8002c90:	000a      	movs	r2, r1
 8002c92:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2220      	movs	r2, #32
 8002c98:	2100      	movs	r1, #0
 8002c9a:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d036      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	0010      	movs	r0, r2
 8002cac:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002cae:	e030      	b.n	8002d12 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	2208      	movs	r2, #8
 8002cb6:	409a      	lsls	r2, r3
 8002cb8:	0013      	movs	r3, r2
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	d028      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x13c>
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	2208      	movs	r2, #8
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d024      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	210e      	movs	r1, #14
 8002cd4:	438a      	bics	r2, r1
 8002cd6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	4091      	lsls	r1, r2
 8002ce4:	000a      	movs	r2, r1
 8002ce6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2221      	movs	r2, #33	; 0x21
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	0010      	movs	r0, r2
 8002d0e:	4798      	blx	r3
    }
   }
}  
 8002d10:	e7ff      	b.n	8002d12 <HAL_DMA_IRQHandler+0x13c>
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	46bd      	mov	sp, r7
 8002d16:	b004      	add	sp, #16
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8002d26:	0018      	movs	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b002      	add	sp, #8
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	607a      	str	r2, [r7, #4]
 8002d3a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d44:	2101      	movs	r1, #1
 8002d46:	4091      	lsls	r1, r2
 8002d48:	000a      	movs	r2, r1
 8002d4a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b10      	cmp	r3, #16
 8002d5a:	d108      	bne.n	8002d6e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d6c:	e007      	b.n	8002d7e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	60da      	str	r2, [r3, #12]
}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	46bd      	mov	sp, r7
 8002d82:	b004      	add	sp, #16
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a08      	ldr	r2, [pc, #32]	; (8002db8 <DMA_CalcBaseAndBitshift+0x30>)
 8002d96:	4694      	mov	ip, r2
 8002d98:	4463      	add	r3, ip
 8002d9a:	2114      	movs	r1, #20
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f7fd f9c5 	bl	800012c <__udivsi3>
 8002da2:	0003      	movs	r3, r0
 8002da4:	009a      	lsls	r2, r3, #2
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a03      	ldr	r2, [pc, #12]	; (8002dbc <DMA_CalcBaseAndBitshift+0x34>)
 8002dae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002db0:	46c0      	nop			; (mov r8, r8)
 8002db2:	46bd      	mov	sp, r7
 8002db4:	b002      	add	sp, #8
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	bffdfff8 	.word	0xbffdfff8
 8002dbc:	40020000 	.word	0x40020000

08002dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dce:	e14f      	b.n	8003070 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4091      	lsls	r1, r2
 8002dda:	000a      	movs	r2, r1
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d100      	bne.n	8002de8 <HAL_GPIO_Init+0x28>
 8002de6:	e140      	b.n	800306a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d00b      	beq.n	8002e08 <HAL_GPIO_Init+0x48>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d007      	beq.n	8002e08 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dfc:	2b11      	cmp	r3, #17
 8002dfe:	d003      	beq.n	8002e08 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b12      	cmp	r3, #18
 8002e06:	d130      	bne.n	8002e6a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	2203      	movs	r2, #3
 8002e14:	409a      	lsls	r2, r3
 8002e16:	0013      	movs	r3, r2
 8002e18:	43da      	mvns	r2, r3
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	0013      	movs	r3, r2
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e3e:	2201      	movs	r2, #1
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	409a      	lsls	r2, r3
 8002e44:	0013      	movs	r3, r2
 8002e46:	43da      	mvns	r2, r3
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	091b      	lsrs	r3, r3, #4
 8002e54:	2201      	movs	r2, #1
 8002e56:	401a      	ands	r2, r3
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	409a      	lsls	r2, r3
 8002e5c:	0013      	movs	r3, r2
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	2203      	movs	r2, #3
 8002e76:	409a      	lsls	r2, r3
 8002e78:	0013      	movs	r3, r2
 8002e7a:	43da      	mvns	r2, r3
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	409a      	lsls	r2, r3
 8002e8c:	0013      	movs	r3, r2
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d003      	beq.n	8002eaa <HAL_GPIO_Init+0xea>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b12      	cmp	r3, #18
 8002ea8:	d123      	bne.n	8002ef2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	08da      	lsrs	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3208      	adds	r2, #8
 8002eb2:	0092      	lsls	r2, r2, #2
 8002eb4:	58d3      	ldr	r3, [r2, r3]
 8002eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2207      	movs	r2, #7
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	220f      	movs	r2, #15
 8002ec2:	409a      	lsls	r2, r3
 8002ec4:	0013      	movs	r3, r2
 8002ec6:	43da      	mvns	r2, r3
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	691a      	ldr	r2, [r3, #16]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2107      	movs	r1, #7
 8002ed6:	400b      	ands	r3, r1
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	409a      	lsls	r2, r3
 8002edc:	0013      	movs	r3, r2
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	08da      	lsrs	r2, r3, #3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3208      	adds	r2, #8
 8002eec:	0092      	lsls	r2, r2, #2
 8002eee:	6939      	ldr	r1, [r7, #16]
 8002ef0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	2203      	movs	r2, #3
 8002efe:	409a      	lsls	r2, r3
 8002f00:	0013      	movs	r3, r2
 8002f02:	43da      	mvns	r2, r3
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	4013      	ands	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2203      	movs	r2, #3
 8002f10:	401a      	ands	r2, r3
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	409a      	lsls	r2, r3
 8002f18:	0013      	movs	r3, r2
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	2380      	movs	r3, #128	; 0x80
 8002f2c:	055b      	lsls	r3, r3, #21
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d100      	bne.n	8002f34 <HAL_GPIO_Init+0x174>
 8002f32:	e09a      	b.n	800306a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f34:	4b54      	ldr	r3, [pc, #336]	; (8003088 <HAL_GPIO_Init+0x2c8>)
 8002f36:	699a      	ldr	r2, [r3, #24]
 8002f38:	4b53      	ldr	r3, [pc, #332]	; (8003088 <HAL_GPIO_Init+0x2c8>)
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	619a      	str	r2, [r3, #24]
 8002f40:	4b51      	ldr	r3, [pc, #324]	; (8003088 <HAL_GPIO_Init+0x2c8>)
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	2201      	movs	r2, #1
 8002f46:	4013      	ands	r3, r2
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f4c:	4a4f      	ldr	r2, [pc, #316]	; (800308c <HAL_GPIO_Init+0x2cc>)
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	089b      	lsrs	r3, r3, #2
 8002f52:	3302      	adds	r3, #2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	589b      	ldr	r3, [r3, r2]
 8002f58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	4013      	ands	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	220f      	movs	r2, #15
 8002f64:	409a      	lsls	r2, r3
 8002f66:	0013      	movs	r3, r2
 8002f68:	43da      	mvns	r2, r3
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	2390      	movs	r3, #144	; 0x90
 8002f74:	05db      	lsls	r3, r3, #23
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d013      	beq.n	8002fa2 <HAL_GPIO_Init+0x1e2>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a44      	ldr	r2, [pc, #272]	; (8003090 <HAL_GPIO_Init+0x2d0>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d00d      	beq.n	8002f9e <HAL_GPIO_Init+0x1de>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a43      	ldr	r2, [pc, #268]	; (8003094 <HAL_GPIO_Init+0x2d4>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d007      	beq.n	8002f9a <HAL_GPIO_Init+0x1da>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a42      	ldr	r2, [pc, #264]	; (8003098 <HAL_GPIO_Init+0x2d8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d101      	bne.n	8002f96 <HAL_GPIO_Init+0x1d6>
 8002f92:	2303      	movs	r3, #3
 8002f94:	e006      	b.n	8002fa4 <HAL_GPIO_Init+0x1e4>
 8002f96:	2305      	movs	r3, #5
 8002f98:	e004      	b.n	8002fa4 <HAL_GPIO_Init+0x1e4>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e002      	b.n	8002fa4 <HAL_GPIO_Init+0x1e4>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <HAL_GPIO_Init+0x1e4>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	2103      	movs	r1, #3
 8002fa8:	400a      	ands	r2, r1
 8002faa:	0092      	lsls	r2, r2, #2
 8002fac:	4093      	lsls	r3, r2
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fb4:	4935      	ldr	r1, [pc, #212]	; (800308c <HAL_GPIO_Init+0x2cc>)
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	089b      	lsrs	r3, r3, #2
 8002fba:	3302      	adds	r3, #2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fc2:	4b36      	ldr	r3, [pc, #216]	; (800309c <HAL_GPIO_Init+0x2dc>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	43da      	mvns	r2, r3
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	2380      	movs	r3, #128	; 0x80
 8002fd8:	025b      	lsls	r3, r3, #9
 8002fda:	4013      	ands	r3, r2
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002fe6:	4b2d      	ldr	r3, [pc, #180]	; (800309c <HAL_GPIO_Init+0x2dc>)
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002fec:	4b2b      	ldr	r3, [pc, #172]	; (800309c <HAL_GPIO_Init+0x2dc>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	43da      	mvns	r2, r3
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	2380      	movs	r3, #128	; 0x80
 8003002:	029b      	lsls	r3, r3, #10
 8003004:	4013      	ands	r3, r2
 8003006:	d003      	beq.n	8003010 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	4313      	orrs	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003010:	4b22      	ldr	r3, [pc, #136]	; (800309c <HAL_GPIO_Init+0x2dc>)
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003016:	4b21      	ldr	r3, [pc, #132]	; (800309c <HAL_GPIO_Init+0x2dc>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	43da      	mvns	r2, r3
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4013      	ands	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	2380      	movs	r3, #128	; 0x80
 800302c:	035b      	lsls	r3, r3, #13
 800302e:	4013      	ands	r3, r2
 8003030:	d003      	beq.n	800303a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4313      	orrs	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800303a:	4b18      	ldr	r3, [pc, #96]	; (800309c <HAL_GPIO_Init+0x2dc>)
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003040:	4b16      	ldr	r3, [pc, #88]	; (800309c <HAL_GPIO_Init+0x2dc>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	43da      	mvns	r2, r3
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	4013      	ands	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	2380      	movs	r3, #128	; 0x80
 8003056:	039b      	lsls	r3, r3, #14
 8003058:	4013      	ands	r3, r2
 800305a:	d003      	beq.n	8003064 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4313      	orrs	r3, r2
 8003062:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003064:	4b0d      	ldr	r3, [pc, #52]	; (800309c <HAL_GPIO_Init+0x2dc>)
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	3301      	adds	r3, #1
 800306e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	40da      	lsrs	r2, r3
 8003078:	1e13      	subs	r3, r2, #0
 800307a:	d000      	beq.n	800307e <HAL_GPIO_Init+0x2be>
 800307c:	e6a8      	b.n	8002dd0 <HAL_GPIO_Init+0x10>
  } 
}
 800307e:	46c0      	nop			; (mov r8, r8)
 8003080:	46c0      	nop			; (mov r8, r8)
 8003082:	46bd      	mov	sp, r7
 8003084:	b006      	add	sp, #24
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40021000 	.word	0x40021000
 800308c:	40010000 	.word	0x40010000
 8003090:	48000400 	.word	0x48000400
 8003094:	48000800 	.word	0x48000800
 8003098:	48000c00 	.word	0x48000c00
 800309c:	40010400 	.word	0x40010400

080030a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80030ae:	e0b1      	b.n	8003214 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80030b0:	2201      	movs	r2, #1
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	409a      	lsls	r2, r3
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	4013      	ands	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d100      	bne.n	80030c4 <HAL_GPIO_DeInit+0x24>
 80030c2:	e0a4      	b.n	800320e <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80030c4:	4a59      	ldr	r2, [pc, #356]	; (800322c <HAL_GPIO_DeInit+0x18c>)
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	089b      	lsrs	r3, r3, #2
 80030ca:	3302      	adds	r3, #2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	589b      	ldr	r3, [r3, r2]
 80030d0:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2203      	movs	r2, #3
 80030d6:	4013      	ands	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	220f      	movs	r2, #15
 80030dc:	409a      	lsls	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4013      	ands	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	2390      	movs	r3, #144	; 0x90
 80030e8:	05db      	lsls	r3, r3, #23
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d013      	beq.n	8003116 <HAL_GPIO_DeInit+0x76>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a4f      	ldr	r2, [pc, #316]	; (8003230 <HAL_GPIO_DeInit+0x190>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d00d      	beq.n	8003112 <HAL_GPIO_DeInit+0x72>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a4e      	ldr	r2, [pc, #312]	; (8003234 <HAL_GPIO_DeInit+0x194>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d007      	beq.n	800310e <HAL_GPIO_DeInit+0x6e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a4d      	ldr	r2, [pc, #308]	; (8003238 <HAL_GPIO_DeInit+0x198>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d101      	bne.n	800310a <HAL_GPIO_DeInit+0x6a>
 8003106:	2303      	movs	r3, #3
 8003108:	e006      	b.n	8003118 <HAL_GPIO_DeInit+0x78>
 800310a:	2305      	movs	r3, #5
 800310c:	e004      	b.n	8003118 <HAL_GPIO_DeInit+0x78>
 800310e:	2302      	movs	r3, #2
 8003110:	e002      	b.n	8003118 <HAL_GPIO_DeInit+0x78>
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <HAL_GPIO_DeInit+0x78>
 8003116:	2300      	movs	r3, #0
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	2103      	movs	r1, #3
 800311c:	400a      	ands	r2, r1
 800311e:	0092      	lsls	r2, r2, #2
 8003120:	4093      	lsls	r3, r2
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	429a      	cmp	r2, r3
 8003126:	d132      	bne.n	800318e <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003128:	4b44      	ldr	r3, [pc, #272]	; (800323c <HAL_GPIO_DeInit+0x19c>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	43d9      	mvns	r1, r3
 8003130:	4b42      	ldr	r3, [pc, #264]	; (800323c <HAL_GPIO_DeInit+0x19c>)
 8003132:	400a      	ands	r2, r1
 8003134:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003136:	4b41      	ldr	r3, [pc, #260]	; (800323c <HAL_GPIO_DeInit+0x19c>)
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	43d9      	mvns	r1, r3
 800313e:	4b3f      	ldr	r3, [pc, #252]	; (800323c <HAL_GPIO_DeInit+0x19c>)
 8003140:	400a      	ands	r2, r1
 8003142:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003144:	4b3d      	ldr	r3, [pc, #244]	; (800323c <HAL_GPIO_DeInit+0x19c>)
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	43d9      	mvns	r1, r3
 800314c:	4b3b      	ldr	r3, [pc, #236]	; (800323c <HAL_GPIO_DeInit+0x19c>)
 800314e:	400a      	ands	r2, r1
 8003150:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003152:	4b3a      	ldr	r3, [pc, #232]	; (800323c <HAL_GPIO_DeInit+0x19c>)
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	43d9      	mvns	r1, r3
 800315a:	4b38      	ldr	r3, [pc, #224]	; (800323c <HAL_GPIO_DeInit+0x19c>)
 800315c:	400a      	ands	r2, r1
 800315e:	60da      	str	r2, [r3, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	2203      	movs	r2, #3
 8003164:	4013      	ands	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	220f      	movs	r2, #15
 800316a:	409a      	lsls	r2, r3
 800316c:	0013      	movs	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003170:	4a2e      	ldr	r2, [pc, #184]	; (800322c <HAL_GPIO_DeInit+0x18c>)
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	089b      	lsrs	r3, r3, #2
 8003176:	3302      	adds	r3, #2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	589a      	ldr	r2, [r3, r2]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	43d9      	mvns	r1, r3
 8003180:	482a      	ldr	r0, [pc, #168]	; (800322c <HAL_GPIO_DeInit+0x18c>)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	089b      	lsrs	r3, r3, #2
 8003186:	400a      	ands	r2, r1
 8003188:	3302      	adds	r3, #2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	0052      	lsls	r2, r2, #1
 8003196:	2103      	movs	r1, #3
 8003198:	4091      	lsls	r1, r2
 800319a:	000a      	movs	r2, r1
 800319c:	43d2      	mvns	r2, r2
 800319e:	401a      	ands	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	08da      	lsrs	r2, r3, #3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3208      	adds	r2, #8
 80031ac:	0092      	lsls	r2, r2, #2
 80031ae:	58d3      	ldr	r3, [r2, r3]
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	2107      	movs	r1, #7
 80031b4:	400a      	ands	r2, r1
 80031b6:	0092      	lsls	r2, r2, #2
 80031b8:	210f      	movs	r1, #15
 80031ba:	4091      	lsls	r1, r2
 80031bc:	000a      	movs	r2, r1
 80031be:	43d1      	mvns	r1, r2
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	08d2      	lsrs	r2, r2, #3
 80031c4:	4019      	ands	r1, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3208      	adds	r2, #8
 80031ca:	0092      	lsls	r2, r2, #2
 80031cc:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	0052      	lsls	r2, r2, #1
 80031d6:	2103      	movs	r1, #3
 80031d8:	4091      	lsls	r1, r2
 80031da:	000a      	movs	r2, r1
 80031dc:	43d2      	mvns	r2, r2
 80031de:	401a      	ands	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2101      	movs	r1, #1
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	4091      	lsls	r1, r2
 80031ee:	000a      	movs	r2, r1
 80031f0:	43d2      	mvns	r2, r2
 80031f2:	401a      	ands	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	0052      	lsls	r2, r2, #1
 8003200:	2103      	movs	r1, #3
 8003202:	4091      	lsls	r1, r2
 8003204:	000a      	movs	r2, r1
 8003206:	43d2      	mvns	r2, r2
 8003208:	401a      	ands	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	609a      	str	r2, [r3, #8]

    }

    position++;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	3301      	adds	r3, #1
 8003212:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	40da      	lsrs	r2, r3
 800321a:	1e13      	subs	r3, r2, #0
 800321c:	d000      	beq.n	8003220 <HAL_GPIO_DeInit+0x180>
 800321e:	e747      	b.n	80030b0 <HAL_GPIO_DeInit+0x10>
  }
}
 8003220:	46c0      	nop			; (mov r8, r8)
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	46bd      	mov	sp, r7
 8003226:	b006      	add	sp, #24
 8003228:	bd80      	pop	{r7, pc}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	40010000 	.word	0x40010000
 8003230:	48000400 	.word	0x48000400
 8003234:	48000800 	.word	0x48000800
 8003238:	48000c00 	.word	0x48000c00
 800323c:	40010400 	.word	0x40010400

08003240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	0008      	movs	r0, r1
 800324a:	0011      	movs	r1, r2
 800324c:	1cbb      	adds	r3, r7, #2
 800324e:	1c02      	adds	r2, r0, #0
 8003250:	801a      	strh	r2, [r3, #0]
 8003252:	1c7b      	adds	r3, r7, #1
 8003254:	1c0a      	adds	r2, r1, #0
 8003256:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003258:	1c7b      	adds	r3, r7, #1
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d004      	beq.n	800326a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003260:	1cbb      	adds	r3, r7, #2
 8003262:	881a      	ldrh	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003268:	e003      	b.n	8003272 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800326a:	1cbb      	adds	r3, r7, #2
 800326c:	881a      	ldrh	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	46bd      	mov	sp, r7
 8003276:	b002      	add	sp, #8
 8003278:	bd80      	pop	{r7, pc}
	...

0800327c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e082      	b.n	8003394 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2241      	movs	r2, #65	; 0x41
 8003292:	5c9b      	ldrb	r3, [r3, r2]
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d107      	bne.n	80032aa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2240      	movs	r2, #64	; 0x40
 800329e:	2100      	movs	r1, #0
 80032a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	0018      	movs	r0, r3
 80032a6:	f7fe ff9b 	bl	80021e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2241      	movs	r2, #65	; 0x41
 80032ae:	2124      	movs	r1, #36	; 0x24
 80032b0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2101      	movs	r1, #1
 80032be:	438a      	bics	r2, r1
 80032c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4934      	ldr	r1, [pc, #208]	; (800339c <HAL_I2C_Init+0x120>)
 80032cc:	400a      	ands	r2, r1
 80032ce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4931      	ldr	r1, [pc, #196]	; (80033a0 <HAL_I2C_Init+0x124>)
 80032dc:	400a      	ands	r2, r1
 80032de:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d108      	bne.n	80032fa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2180      	movs	r1, #128	; 0x80
 80032f2:	0209      	lsls	r1, r1, #8
 80032f4:	430a      	orrs	r2, r1
 80032f6:	609a      	str	r2, [r3, #8]
 80032f8:	e007      	b.n	800330a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2184      	movs	r1, #132	; 0x84
 8003304:	0209      	lsls	r1, r1, #8
 8003306:	430a      	orrs	r2, r1
 8003308:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	2b02      	cmp	r3, #2
 8003310:	d104      	bne.n	800331c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2280      	movs	r2, #128	; 0x80
 8003318:	0112      	lsls	r2, r2, #4
 800331a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	491f      	ldr	r1, [pc, #124]	; (80033a4 <HAL_I2C_Init+0x128>)
 8003328:	430a      	orrs	r2, r1
 800332a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	491a      	ldr	r1, [pc, #104]	; (80033a0 <HAL_I2C_Init+0x124>)
 8003338:	400a      	ands	r2, r1
 800333a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	431a      	orrs	r2, r3
 8003346:	0011      	movs	r1, r2
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	021a      	lsls	r2, r3, #8
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69d9      	ldr	r1, [r3, #28]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1a      	ldr	r2, [r3, #32]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2101      	movs	r1, #1
 8003372:	430a      	orrs	r2, r1
 8003374:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2241      	movs	r2, #65	; 0x41
 8003380:	2120      	movs	r1, #32
 8003382:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2242      	movs	r2, #66	; 0x42
 800338e:	2100      	movs	r1, #0
 8003390:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	0018      	movs	r0, r3
 8003396:	46bd      	mov	sp, r7
 8003398:	b002      	add	sp, #8
 800339a:	bd80      	pop	{r7, pc}
 800339c:	f0ffffff 	.word	0xf0ffffff
 80033a0:	ffff7fff 	.word	0xffff7fff
 80033a4:	02008000 	.word	0x02008000

080033a8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80033a8:	b590      	push	{r4, r7, lr}
 80033aa:	b089      	sub	sp, #36	; 0x24
 80033ac:	af02      	add	r7, sp, #8
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	0008      	movs	r0, r1
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	0019      	movs	r1, r3
 80033b6:	230a      	movs	r3, #10
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	1c02      	adds	r2, r0, #0
 80033bc:	801a      	strh	r2, [r3, #0]
 80033be:	2308      	movs	r3, #8
 80033c0:	18fb      	adds	r3, r7, r3
 80033c2:	1c0a      	adds	r2, r1, #0
 80033c4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2241      	movs	r2, #65	; 0x41
 80033ca:	5c9b      	ldrb	r3, [r3, r2]
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b20      	cmp	r3, #32
 80033d0:	d000      	beq.n	80033d4 <HAL_I2C_Master_Transmit+0x2c>
 80033d2:	e0e7      	b.n	80035a4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2240      	movs	r2, #64	; 0x40
 80033d8:	5c9b      	ldrb	r3, [r3, r2]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d101      	bne.n	80033e2 <HAL_I2C_Master_Transmit+0x3a>
 80033de:	2302      	movs	r3, #2
 80033e0:	e0e1      	b.n	80035a6 <HAL_I2C_Master_Transmit+0x1fe>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2240      	movs	r2, #64	; 0x40
 80033e6:	2101      	movs	r1, #1
 80033e8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033ea:	f7ff f9b9 	bl	8002760 <HAL_GetTick>
 80033ee:	0003      	movs	r3, r0
 80033f0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033f2:	2380      	movs	r3, #128	; 0x80
 80033f4:	0219      	lsls	r1, r3, #8
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	2319      	movs	r3, #25
 80033fe:	2201      	movs	r2, #1
 8003400:	f000 fa16 	bl	8003830 <I2C_WaitOnFlagUntilTimeout>
 8003404:	1e03      	subs	r3, r0, #0
 8003406:	d001      	beq.n	800340c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e0cc      	b.n	80035a6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2241      	movs	r2, #65	; 0x41
 8003410:	2121      	movs	r1, #33	; 0x21
 8003412:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2242      	movs	r2, #66	; 0x42
 8003418:	2110      	movs	r1, #16
 800341a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2208      	movs	r2, #8
 800342c:	18ba      	adds	r2, r7, r2
 800342e:	8812      	ldrh	r2, [r2, #0]
 8003430:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800343c:	b29b      	uxth	r3, r3
 800343e:	2bff      	cmp	r3, #255	; 0xff
 8003440:	d911      	bls.n	8003466 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	22ff      	movs	r2, #255	; 0xff
 8003446:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344c:	b2da      	uxtb	r2, r3
 800344e:	2380      	movs	r3, #128	; 0x80
 8003450:	045c      	lsls	r4, r3, #17
 8003452:	230a      	movs	r3, #10
 8003454:	18fb      	adds	r3, r7, r3
 8003456:	8819      	ldrh	r1, [r3, #0]
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	4b55      	ldr	r3, [pc, #340]	; (80035b0 <HAL_I2C_Master_Transmit+0x208>)
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	0023      	movs	r3, r4
 8003460:	f000 fb06 	bl	8003a70 <I2C_TransferConfig>
 8003464:	e075      	b.n	8003552 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003474:	b2da      	uxtb	r2, r3
 8003476:	2380      	movs	r3, #128	; 0x80
 8003478:	049c      	lsls	r4, r3, #18
 800347a:	230a      	movs	r3, #10
 800347c:	18fb      	adds	r3, r7, r3
 800347e:	8819      	ldrh	r1, [r3, #0]
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	4b4b      	ldr	r3, [pc, #300]	; (80035b0 <HAL_I2C_Master_Transmit+0x208>)
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	0023      	movs	r3, r4
 8003488:	f000 faf2 	bl	8003a70 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800348c:	e061      	b.n	8003552 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	0018      	movs	r0, r3
 8003496:	f000 fa0a 	bl	80038ae <I2C_WaitOnTXISFlagUntilTimeout>
 800349a:	1e03      	subs	r3, r0, #0
 800349c:	d001      	beq.n	80034a2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e081      	b.n	80035a6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	781a      	ldrb	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d03a      	beq.n	8003552 <HAL_I2C_Master_Transmit+0x1aa>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d136      	bne.n	8003552 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	0013      	movs	r3, r2
 80034ee:	2200      	movs	r2, #0
 80034f0:	2180      	movs	r1, #128	; 0x80
 80034f2:	f000 f99d 	bl	8003830 <I2C_WaitOnFlagUntilTimeout>
 80034f6:	1e03      	subs	r3, r0, #0
 80034f8:	d001      	beq.n	80034fe <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e053      	b.n	80035a6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003502:	b29b      	uxth	r3, r3
 8003504:	2bff      	cmp	r3, #255	; 0xff
 8003506:	d911      	bls.n	800352c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	22ff      	movs	r2, #255	; 0xff
 800350c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003512:	b2da      	uxtb	r2, r3
 8003514:	2380      	movs	r3, #128	; 0x80
 8003516:	045c      	lsls	r4, r3, #17
 8003518:	230a      	movs	r3, #10
 800351a:	18fb      	adds	r3, r7, r3
 800351c:	8819      	ldrh	r1, [r3, #0]
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	2300      	movs	r3, #0
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	0023      	movs	r3, r4
 8003526:	f000 faa3 	bl	8003a70 <I2C_TransferConfig>
 800352a:	e012      	b.n	8003552 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003530:	b29a      	uxth	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353a:	b2da      	uxtb	r2, r3
 800353c:	2380      	movs	r3, #128	; 0x80
 800353e:	049c      	lsls	r4, r3, #18
 8003540:	230a      	movs	r3, #10
 8003542:	18fb      	adds	r3, r7, r3
 8003544:	8819      	ldrh	r1, [r3, #0]
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	2300      	movs	r3, #0
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	0023      	movs	r3, r4
 800354e:	f000 fa8f 	bl	8003a70 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003556:	b29b      	uxth	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	d198      	bne.n	800348e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	0018      	movs	r0, r3
 8003564:	f000 f9e2 	bl	800392c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003568:	1e03      	subs	r3, r0, #0
 800356a:	d001      	beq.n	8003570 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e01a      	b.n	80035a6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2220      	movs	r2, #32
 8003576:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	490c      	ldr	r1, [pc, #48]	; (80035b4 <HAL_I2C_Master_Transmit+0x20c>)
 8003584:	400a      	ands	r2, r1
 8003586:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2241      	movs	r2, #65	; 0x41
 800358c:	2120      	movs	r1, #32
 800358e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2242      	movs	r2, #66	; 0x42
 8003594:	2100      	movs	r1, #0
 8003596:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2240      	movs	r2, #64	; 0x40
 800359c:	2100      	movs	r1, #0
 800359e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80035a0:	2300      	movs	r3, #0
 80035a2:	e000      	b.n	80035a6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80035a4:	2302      	movs	r3, #2
  }
}
 80035a6:	0018      	movs	r0, r3
 80035a8:	46bd      	mov	sp, r7
 80035aa:	b007      	add	sp, #28
 80035ac:	bd90      	pop	{r4, r7, pc}
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	80002000 	.word	0x80002000
 80035b4:	fe00e800 	.word	0xfe00e800

080035b8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08a      	sub	sp, #40	; 0x28
 80035bc:	af02      	add	r7, sp, #8
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	607a      	str	r2, [r7, #4]
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	230a      	movs	r3, #10
 80035c6:	18fb      	adds	r3, r7, r3
 80035c8:	1c0a      	adds	r2, r1, #0
 80035ca:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2241      	movs	r2, #65	; 0x41
 80035d4:	5c9b      	ldrb	r3, [r3, r2]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b20      	cmp	r3, #32
 80035da:	d000      	beq.n	80035de <HAL_I2C_IsDeviceReady+0x26>
 80035dc:	e0fe      	b.n	80037dc <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699a      	ldr	r2, [r3, #24]
 80035e4:	2380      	movs	r3, #128	; 0x80
 80035e6:	021b      	lsls	r3, r3, #8
 80035e8:	401a      	ands	r2, r3
 80035ea:	2380      	movs	r3, #128	; 0x80
 80035ec:	021b      	lsls	r3, r3, #8
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d101      	bne.n	80035f6 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80035f2:	2302      	movs	r3, #2
 80035f4:	e0f3      	b.n	80037de <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2240      	movs	r2, #64	; 0x40
 80035fa:	5c9b      	ldrb	r3, [r3, r2]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_I2C_IsDeviceReady+0x4c>
 8003600:	2302      	movs	r3, #2
 8003602:	e0ec      	b.n	80037de <HAL_I2C_IsDeviceReady+0x226>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2240      	movs	r2, #64	; 0x40
 8003608:	2101      	movs	r1, #1
 800360a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2241      	movs	r2, #65	; 0x41
 8003610:	2124      	movs	r1, #36	; 0x24
 8003612:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d107      	bne.n	8003632 <HAL_I2C_IsDeviceReady+0x7a>
 8003622:	230a      	movs	r3, #10
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	059b      	lsls	r3, r3, #22
 800362a:	0d9b      	lsrs	r3, r3, #22
 800362c:	4a6e      	ldr	r2, [pc, #440]	; (80037e8 <HAL_I2C_IsDeviceReady+0x230>)
 800362e:	431a      	orrs	r2, r3
 8003630:	e007      	b.n	8003642 <HAL_I2C_IsDeviceReady+0x8a>
 8003632:	230a      	movs	r3, #10
 8003634:	18fb      	adds	r3, r7, r3
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	059b      	lsls	r3, r3, #22
 800363a:	0d9b      	lsrs	r3, r3, #22
 800363c:	22a0      	movs	r2, #160	; 0xa0
 800363e:	0192      	lsls	r2, r2, #6
 8003640:	431a      	orrs	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003648:	f7ff f88a 	bl	8002760 <HAL_GetTick>
 800364c:	0003      	movs	r3, r0
 800364e:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	2220      	movs	r2, #32
 8003658:	4013      	ands	r3, r2
 800365a:	3b20      	subs	r3, #32
 800365c:	425a      	negs	r2, r3
 800365e:	4153      	adcs	r3, r2
 8003660:	b2da      	uxtb	r2, r3
 8003662:	231f      	movs	r3, #31
 8003664:	18fb      	adds	r3, r7, r3
 8003666:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	2210      	movs	r2, #16
 8003670:	4013      	ands	r3, r2
 8003672:	3b10      	subs	r3, #16
 8003674:	425a      	negs	r2, r3
 8003676:	4153      	adcs	r3, r2
 8003678:	b2da      	uxtb	r2, r3
 800367a:	231e      	movs	r3, #30
 800367c:	18fb      	adds	r3, r7, r3
 800367e:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003680:	e035      	b.n	80036ee <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	3301      	adds	r3, #1
 8003686:	d01a      	beq.n	80036be <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003688:	f7ff f86a 	bl	8002760 <HAL_GetTick>
 800368c:	0002      	movs	r2, r0
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	d302      	bcc.n	800369e <HAL_I2C_IsDeviceReady+0xe6>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10f      	bne.n	80036be <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2241      	movs	r2, #65	; 0x41
 80036a2:	2120      	movs	r1, #32
 80036a4:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036aa:	2220      	movs	r2, #32
 80036ac:	431a      	orrs	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2240      	movs	r2, #64	; 0x40
 80036b6:	2100      	movs	r1, #0
 80036b8:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e08f      	b.n	80037de <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	2220      	movs	r2, #32
 80036c6:	4013      	ands	r3, r2
 80036c8:	3b20      	subs	r3, #32
 80036ca:	425a      	negs	r2, r3
 80036cc:	4153      	adcs	r3, r2
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	231f      	movs	r3, #31
 80036d2:	18fb      	adds	r3, r7, r3
 80036d4:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	2210      	movs	r2, #16
 80036de:	4013      	ands	r3, r2
 80036e0:	3b10      	subs	r3, #16
 80036e2:	425a      	negs	r2, r3
 80036e4:	4153      	adcs	r3, r2
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	231e      	movs	r3, #30
 80036ea:	18fb      	adds	r3, r7, r3
 80036ec:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80036ee:	231f      	movs	r3, #31
 80036f0:	18fb      	adds	r3, r7, r3
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d104      	bne.n	8003702 <HAL_I2C_IsDeviceReady+0x14a>
 80036f8:	231e      	movs	r3, #30
 80036fa:	18fb      	adds	r3, r7, r3
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0bf      	beq.n	8003682 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	2210      	movs	r2, #16
 800370a:	4013      	ands	r3, r2
 800370c:	2b10      	cmp	r3, #16
 800370e:	d01a      	beq.n	8003746 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	0013      	movs	r3, r2
 800371a:	2200      	movs	r2, #0
 800371c:	2120      	movs	r1, #32
 800371e:	f000 f887 	bl	8003830 <I2C_WaitOnFlagUntilTimeout>
 8003722:	1e03      	subs	r3, r0, #0
 8003724:	d001      	beq.n	800372a <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e059      	b.n	80037de <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2220      	movs	r2, #32
 8003730:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2241      	movs	r2, #65	; 0x41
 8003736:	2120      	movs	r1, #32
 8003738:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2240      	movs	r2, #64	; 0x40
 800373e:	2100      	movs	r1, #0
 8003740:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	e04b      	b.n	80037de <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	0013      	movs	r3, r2
 8003750:	2200      	movs	r2, #0
 8003752:	2120      	movs	r1, #32
 8003754:	f000 f86c 	bl	8003830 <I2C_WaitOnFlagUntilTimeout>
 8003758:	1e03      	subs	r3, r0, #0
 800375a:	d001      	beq.n	8003760 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e03e      	b.n	80037de <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2210      	movs	r2, #16
 8003766:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2220      	movs	r2, #32
 800376e:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	429a      	cmp	r2, r3
 8003776:	d119      	bne.n	80037ac <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2180      	movs	r1, #128	; 0x80
 8003784:	01c9      	lsls	r1, r1, #7
 8003786:	430a      	orrs	r2, r1
 8003788:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	0013      	movs	r3, r2
 8003794:	2200      	movs	r2, #0
 8003796:	2120      	movs	r1, #32
 8003798:	f000 f84a 	bl	8003830 <I2C_WaitOnFlagUntilTimeout>
 800379c:	1e03      	subs	r3, r0, #0
 800379e:	d001      	beq.n	80037a4 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e01c      	b.n	80037de <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2220      	movs	r2, #32
 80037aa:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	3301      	adds	r3, #1
 80037b0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d900      	bls.n	80037bc <HAL_I2C_IsDeviceReady+0x204>
 80037ba:	e72e      	b.n	800361a <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2241      	movs	r2, #65	; 0x41
 80037c0:	2120      	movs	r1, #32
 80037c2:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c8:	2220      	movs	r2, #32
 80037ca:	431a      	orrs	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2240      	movs	r2, #64	; 0x40
 80037d4:	2100      	movs	r1, #0
 80037d6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e000      	b.n	80037de <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 80037dc:	2302      	movs	r3, #2
  }
}
 80037de:	0018      	movs	r0, r3
 80037e0:	46bd      	mov	sp, r7
 80037e2:	b008      	add	sp, #32
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	02002000 	.word	0x02002000

080037ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	2202      	movs	r2, #2
 80037fc:	4013      	ands	r3, r2
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d103      	bne.n	800380a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2200      	movs	r2, #0
 8003808:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	2201      	movs	r2, #1
 8003812:	4013      	ands	r3, r2
 8003814:	2b01      	cmp	r3, #1
 8003816:	d007      	beq.n	8003828 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	699a      	ldr	r2, [r3, #24]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2101      	movs	r1, #1
 8003824:	430a      	orrs	r2, r1
 8003826:	619a      	str	r2, [r3, #24]
  }
}
 8003828:	46c0      	nop			; (mov r8, r8)
 800382a:	46bd      	mov	sp, r7
 800382c:	b002      	add	sp, #8
 800382e:	bd80      	pop	{r7, pc}

08003830 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	603b      	str	r3, [r7, #0]
 800383c:	1dfb      	adds	r3, r7, #7
 800383e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003840:	e021      	b.n	8003886 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	3301      	adds	r3, #1
 8003846:	d01e      	beq.n	8003886 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003848:	f7fe ff8a 	bl	8002760 <HAL_GetTick>
 800384c:	0002      	movs	r2, r0
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d302      	bcc.n	800385e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d113      	bne.n	8003886 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003862:	2220      	movs	r2, #32
 8003864:	431a      	orrs	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2241      	movs	r2, #65	; 0x41
 800386e:	2120      	movs	r1, #32
 8003870:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2242      	movs	r2, #66	; 0x42
 8003876:	2100      	movs	r1, #0
 8003878:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2240      	movs	r2, #64	; 0x40
 800387e:	2100      	movs	r1, #0
 8003880:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e00f      	b.n	80038a6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	4013      	ands	r3, r2
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	425a      	negs	r2, r3
 8003896:	4153      	adcs	r3, r2
 8003898:	b2db      	uxtb	r3, r3
 800389a:	001a      	movs	r2, r3
 800389c:	1dfb      	adds	r3, r7, #7
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d0ce      	beq.n	8003842 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	0018      	movs	r0, r3
 80038a8:	46bd      	mov	sp, r7
 80038aa:	b004      	add	sp, #16
 80038ac:	bd80      	pop	{r7, pc}

080038ae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b084      	sub	sp, #16
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	60f8      	str	r0, [r7, #12]
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038ba:	e02b      	b.n	8003914 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	68b9      	ldr	r1, [r7, #8]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	0018      	movs	r0, r3
 80038c4:	f000 f86e 	bl	80039a4 <I2C_IsAcknowledgeFailed>
 80038c8:	1e03      	subs	r3, r0, #0
 80038ca:	d001      	beq.n	80038d0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e029      	b.n	8003924 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	3301      	adds	r3, #1
 80038d4:	d01e      	beq.n	8003914 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d6:	f7fe ff43 	bl	8002760 <HAL_GetTick>
 80038da:	0002      	movs	r2, r0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d302      	bcc.n	80038ec <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d113      	bne.n	8003914 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f0:	2220      	movs	r2, #32
 80038f2:	431a      	orrs	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2241      	movs	r2, #65	; 0x41
 80038fc:	2120      	movs	r1, #32
 80038fe:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2242      	movs	r2, #66	; 0x42
 8003904:	2100      	movs	r1, #0
 8003906:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2240      	movs	r2, #64	; 0x40
 800390c:	2100      	movs	r1, #0
 800390e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e007      	b.n	8003924 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	2202      	movs	r2, #2
 800391c:	4013      	ands	r3, r2
 800391e:	2b02      	cmp	r3, #2
 8003920:	d1cc      	bne.n	80038bc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	0018      	movs	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	b004      	add	sp, #16
 800392a:	bd80      	pop	{r7, pc}

0800392c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003938:	e028      	b.n	800398c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	68b9      	ldr	r1, [r7, #8]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	0018      	movs	r0, r3
 8003942:	f000 f82f 	bl	80039a4 <I2C_IsAcknowledgeFailed>
 8003946:	1e03      	subs	r3, r0, #0
 8003948:	d001      	beq.n	800394e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e026      	b.n	800399c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800394e:	f7fe ff07 	bl	8002760 <HAL_GetTick>
 8003952:	0002      	movs	r2, r0
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	429a      	cmp	r2, r3
 800395c:	d302      	bcc.n	8003964 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d113      	bne.n	800398c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003968:	2220      	movs	r2, #32
 800396a:	431a      	orrs	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2241      	movs	r2, #65	; 0x41
 8003974:	2120      	movs	r1, #32
 8003976:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2242      	movs	r2, #66	; 0x42
 800397c:	2100      	movs	r1, #0
 800397e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2240      	movs	r2, #64	; 0x40
 8003984:	2100      	movs	r1, #0
 8003986:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e007      	b.n	800399c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	2220      	movs	r2, #32
 8003994:	4013      	ands	r3, r2
 8003996:	2b20      	cmp	r3, #32
 8003998:	d1cf      	bne.n	800393a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	0018      	movs	r0, r3
 800399e:	46bd      	mov	sp, r7
 80039a0:	b004      	add	sp, #16
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	2210      	movs	r2, #16
 80039b8:	4013      	ands	r3, r2
 80039ba:	2b10      	cmp	r3, #16
 80039bc:	d151      	bne.n	8003a62 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039be:	e021      	b.n	8003a04 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	3301      	adds	r3, #1
 80039c4:	d01e      	beq.n	8003a04 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c6:	f7fe fecb 	bl	8002760 <HAL_GetTick>
 80039ca:	0002      	movs	r2, r0
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d302      	bcc.n	80039dc <I2C_IsAcknowledgeFailed+0x38>
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d113      	bne.n	8003a04 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e0:	2220      	movs	r2, #32
 80039e2:	431a      	orrs	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2241      	movs	r2, #65	; 0x41
 80039ec:	2120      	movs	r1, #32
 80039ee:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2242      	movs	r2, #66	; 0x42
 80039f4:	2100      	movs	r1, #0
 80039f6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2240      	movs	r2, #64	; 0x40
 80039fc:	2100      	movs	r1, #0
 80039fe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e02f      	b.n	8003a64 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	d1d6      	bne.n	80039c0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2210      	movs	r2, #16
 8003a18:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	0018      	movs	r0, r3
 8003a26:	f7ff fee1 	bl	80037ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	490d      	ldr	r1, [pc, #52]	; (8003a6c <I2C_IsAcknowledgeFailed+0xc8>)
 8003a36:	400a      	ands	r2, r1
 8003a38:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3e:	2204      	movs	r2, #4
 8003a40:	431a      	orrs	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2241      	movs	r2, #65	; 0x41
 8003a4a:	2120      	movs	r1, #32
 8003a4c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2242      	movs	r2, #66	; 0x42
 8003a52:	2100      	movs	r1, #0
 8003a54:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2240      	movs	r2, #64	; 0x40
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	0018      	movs	r0, r3
 8003a66:	46bd      	mov	sp, r7
 8003a68:	b004      	add	sp, #16
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	fe00e800 	.word	0xfe00e800

08003a70 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a70:	b590      	push	{r4, r7, lr}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	0008      	movs	r0, r1
 8003a7a:	0011      	movs	r1, r2
 8003a7c:	607b      	str	r3, [r7, #4]
 8003a7e:	240a      	movs	r4, #10
 8003a80:	193b      	adds	r3, r7, r4
 8003a82:	1c02      	adds	r2, r0, #0
 8003a84:	801a      	strh	r2, [r3, #0]
 8003a86:	2009      	movs	r0, #9
 8003a88:	183b      	adds	r3, r7, r0
 8003a8a:	1c0a      	adds	r2, r1, #0
 8003a8c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	6a3a      	ldr	r2, [r7, #32]
 8003a96:	0d51      	lsrs	r1, r2, #21
 8003a98:	2280      	movs	r2, #128	; 0x80
 8003a9a:	00d2      	lsls	r2, r2, #3
 8003a9c:	400a      	ands	r2, r1
 8003a9e:	490e      	ldr	r1, [pc, #56]	; (8003ad8 <I2C_TransferConfig+0x68>)
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	43d2      	mvns	r2, r2
 8003aa4:	401a      	ands	r2, r3
 8003aa6:	0011      	movs	r1, r2
 8003aa8:	193b      	adds	r3, r7, r4
 8003aaa:	881b      	ldrh	r3, [r3, #0]
 8003aac:	059b      	lsls	r3, r3, #22
 8003aae:	0d9a      	lsrs	r2, r3, #22
 8003ab0:	183b      	adds	r3, r7, r0
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	0418      	lsls	r0, r3, #16
 8003ab6:	23ff      	movs	r3, #255	; 0xff
 8003ab8:	041b      	lsls	r3, r3, #16
 8003aba:	4003      	ands	r3, r0
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	b005      	add	sp, #20
 8003ad4:	bd90      	pop	{r4, r7, pc}
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	03ff63ff 	.word	0x03ff63ff

08003adc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2241      	movs	r2, #65	; 0x41
 8003aea:	5c9b      	ldrb	r3, [r3, r2]
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	d138      	bne.n	8003b64 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2240      	movs	r2, #64	; 0x40
 8003af6:	5c9b      	ldrb	r3, [r3, r2]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003afc:	2302      	movs	r3, #2
 8003afe:	e032      	b.n	8003b66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2240      	movs	r2, #64	; 0x40
 8003b04:	2101      	movs	r1, #1
 8003b06:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2241      	movs	r2, #65	; 0x41
 8003b0c:	2124      	movs	r1, #36	; 0x24
 8003b0e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	438a      	bics	r2, r1
 8003b1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4911      	ldr	r1, [pc, #68]	; (8003b70 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003b2c:	400a      	ands	r2, r1
 8003b2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6819      	ldr	r1, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2241      	movs	r2, #65	; 0x41
 8003b54:	2120      	movs	r1, #32
 8003b56:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2240      	movs	r2, #64	; 0x40
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003b60:	2300      	movs	r3, #0
 8003b62:	e000      	b.n	8003b66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b64:	2302      	movs	r3, #2
  }
}
 8003b66:	0018      	movs	r0, r3
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b002      	add	sp, #8
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	46c0      	nop			; (mov r8, r8)
 8003b70:	ffffefff 	.word	0xffffefff

08003b74 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2241      	movs	r2, #65	; 0x41
 8003b82:	5c9b      	ldrb	r3, [r3, r2]
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b20      	cmp	r3, #32
 8003b88:	d139      	bne.n	8003bfe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2240      	movs	r2, #64	; 0x40
 8003b8e:	5c9b      	ldrb	r3, [r3, r2]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b94:	2302      	movs	r3, #2
 8003b96:	e033      	b.n	8003c00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2240      	movs	r2, #64	; 0x40
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2241      	movs	r2, #65	; 0x41
 8003ba4:	2124      	movs	r1, #36	; 0x24
 8003ba6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	438a      	bics	r2, r1
 8003bb6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4a11      	ldr	r2, [pc, #68]	; (8003c08 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	021b      	lsls	r3, r3, #8
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2101      	movs	r1, #1
 8003be6:	430a      	orrs	r2, r1
 8003be8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2241      	movs	r2, #65	; 0x41
 8003bee:	2120      	movs	r1, #32
 8003bf0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2240      	movs	r2, #64	; 0x40
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e000      	b.n	8003c00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003bfe:	2302      	movs	r3, #2
  }
}
 8003c00:	0018      	movs	r0, r3
 8003c02:	46bd      	mov	sp, r7
 8003c04:	b004      	add	sp, #16
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	fffff0ff 	.word	0xfffff0ff

08003c0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e301      	b.n	8004222 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2201      	movs	r2, #1
 8003c24:	4013      	ands	r3, r2
 8003c26:	d100      	bne.n	8003c2a <HAL_RCC_OscConfig+0x1e>
 8003c28:	e08d      	b.n	8003d46 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003c2a:	4bc3      	ldr	r3, [pc, #780]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	220c      	movs	r2, #12
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d00e      	beq.n	8003c54 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c36:	4bc0      	ldr	r3, [pc, #768]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	220c      	movs	r2, #12
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2b08      	cmp	r3, #8
 8003c40:	d116      	bne.n	8003c70 <HAL_RCC_OscConfig+0x64>
 8003c42:	4bbd      	ldr	r3, [pc, #756]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	2380      	movs	r3, #128	; 0x80
 8003c48:	025b      	lsls	r3, r3, #9
 8003c4a:	401a      	ands	r2, r3
 8003c4c:	2380      	movs	r3, #128	; 0x80
 8003c4e:	025b      	lsls	r3, r3, #9
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d10d      	bne.n	8003c70 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c54:	4bb8      	ldr	r3, [pc, #736]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	2380      	movs	r3, #128	; 0x80
 8003c5a:	029b      	lsls	r3, r3, #10
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	d100      	bne.n	8003c62 <HAL_RCC_OscConfig+0x56>
 8003c60:	e070      	b.n	8003d44 <HAL_RCC_OscConfig+0x138>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d000      	beq.n	8003c6c <HAL_RCC_OscConfig+0x60>
 8003c6a:	e06b      	b.n	8003d44 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e2d8      	b.n	8004222 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d107      	bne.n	8003c88 <HAL_RCC_OscConfig+0x7c>
 8003c78:	4baf      	ldr	r3, [pc, #700]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	4bae      	ldr	r3, [pc, #696]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003c7e:	2180      	movs	r1, #128	; 0x80
 8003c80:	0249      	lsls	r1, r1, #9
 8003c82:	430a      	orrs	r2, r1
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	e02f      	b.n	8003ce8 <HAL_RCC_OscConfig+0xdc>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10c      	bne.n	8003caa <HAL_RCC_OscConfig+0x9e>
 8003c90:	4ba9      	ldr	r3, [pc, #676]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	4ba8      	ldr	r3, [pc, #672]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003c96:	49a9      	ldr	r1, [pc, #676]	; (8003f3c <HAL_RCC_OscConfig+0x330>)
 8003c98:	400a      	ands	r2, r1
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	4ba6      	ldr	r3, [pc, #664]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	4ba5      	ldr	r3, [pc, #660]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003ca2:	49a7      	ldr	r1, [pc, #668]	; (8003f40 <HAL_RCC_OscConfig+0x334>)
 8003ca4:	400a      	ands	r2, r1
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	e01e      	b.n	8003ce8 <HAL_RCC_OscConfig+0xdc>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b05      	cmp	r3, #5
 8003cb0:	d10e      	bne.n	8003cd0 <HAL_RCC_OscConfig+0xc4>
 8003cb2:	4ba1      	ldr	r3, [pc, #644]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	4ba0      	ldr	r3, [pc, #640]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003cb8:	2180      	movs	r1, #128	; 0x80
 8003cba:	02c9      	lsls	r1, r1, #11
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	4b9d      	ldr	r3, [pc, #628]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	4b9c      	ldr	r3, [pc, #624]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003cc6:	2180      	movs	r1, #128	; 0x80
 8003cc8:	0249      	lsls	r1, r1, #9
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	e00b      	b.n	8003ce8 <HAL_RCC_OscConfig+0xdc>
 8003cd0:	4b99      	ldr	r3, [pc, #612]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	4b98      	ldr	r3, [pc, #608]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003cd6:	4999      	ldr	r1, [pc, #612]	; (8003f3c <HAL_RCC_OscConfig+0x330>)
 8003cd8:	400a      	ands	r2, r1
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	4b96      	ldr	r3, [pc, #600]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	4b95      	ldr	r3, [pc, #596]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003ce2:	4997      	ldr	r1, [pc, #604]	; (8003f40 <HAL_RCC_OscConfig+0x334>)
 8003ce4:	400a      	ands	r2, r1
 8003ce6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d014      	beq.n	8003d1a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf0:	f7fe fd36 	bl	8002760 <HAL_GetTick>
 8003cf4:	0003      	movs	r3, r0
 8003cf6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cfa:	f7fe fd31 	bl	8002760 <HAL_GetTick>
 8003cfe:	0002      	movs	r2, r0
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b64      	cmp	r3, #100	; 0x64
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e28a      	b.n	8004222 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0c:	4b8a      	ldr	r3, [pc, #552]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	2380      	movs	r3, #128	; 0x80
 8003d12:	029b      	lsls	r3, r3, #10
 8003d14:	4013      	ands	r3, r2
 8003d16:	d0f0      	beq.n	8003cfa <HAL_RCC_OscConfig+0xee>
 8003d18:	e015      	b.n	8003d46 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1a:	f7fe fd21 	bl	8002760 <HAL_GetTick>
 8003d1e:	0003      	movs	r3, r0
 8003d20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d24:	f7fe fd1c 	bl	8002760 <HAL_GetTick>
 8003d28:	0002      	movs	r2, r0
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b64      	cmp	r3, #100	; 0x64
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e275      	b.n	8004222 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d36:	4b80      	ldr	r3, [pc, #512]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	2380      	movs	r3, #128	; 0x80
 8003d3c:	029b      	lsls	r3, r3, #10
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d1f0      	bne.n	8003d24 <HAL_RCC_OscConfig+0x118>
 8003d42:	e000      	b.n	8003d46 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d44:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	d100      	bne.n	8003d52 <HAL_RCC_OscConfig+0x146>
 8003d50:	e069      	b.n	8003e26 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003d52:	4b79      	ldr	r3, [pc, #484]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	220c      	movs	r2, #12
 8003d58:	4013      	ands	r3, r2
 8003d5a:	d00b      	beq.n	8003d74 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003d5c:	4b76      	ldr	r3, [pc, #472]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	220c      	movs	r2, #12
 8003d62:	4013      	ands	r3, r2
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d11c      	bne.n	8003da2 <HAL_RCC_OscConfig+0x196>
 8003d68:	4b73      	ldr	r3, [pc, #460]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	2380      	movs	r3, #128	; 0x80
 8003d6e:	025b      	lsls	r3, r3, #9
 8003d70:	4013      	ands	r3, r2
 8003d72:	d116      	bne.n	8003da2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d74:	4b70      	ldr	r3, [pc, #448]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2202      	movs	r2, #2
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	d005      	beq.n	8003d8a <HAL_RCC_OscConfig+0x17e>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d001      	beq.n	8003d8a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e24b      	b.n	8004222 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d8a:	4b6b      	ldr	r3, [pc, #428]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	22f8      	movs	r2, #248	; 0xf8
 8003d90:	4393      	bics	r3, r2
 8003d92:	0019      	movs	r1, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	00da      	lsls	r2, r3, #3
 8003d9a:	4b67      	ldr	r3, [pc, #412]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003da0:	e041      	b.n	8003e26 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d024      	beq.n	8003df4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003daa:	4b63      	ldr	r3, [pc, #396]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	4b62      	ldr	r3, [pc, #392]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003db0:	2101      	movs	r1, #1
 8003db2:	430a      	orrs	r2, r1
 8003db4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db6:	f7fe fcd3 	bl	8002760 <HAL_GetTick>
 8003dba:	0003      	movs	r3, r0
 8003dbc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dc0:	f7fe fcce 	bl	8002760 <HAL_GetTick>
 8003dc4:	0002      	movs	r2, r0
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e227      	b.n	8004222 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd2:	4b59      	ldr	r3, [pc, #356]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	4013      	ands	r3, r2
 8003dda:	d0f1      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ddc:	4b56      	ldr	r3, [pc, #344]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	22f8      	movs	r2, #248	; 0xf8
 8003de2:	4393      	bics	r3, r2
 8003de4:	0019      	movs	r1, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	00da      	lsls	r2, r3, #3
 8003dec:	4b52      	ldr	r3, [pc, #328]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003dee:	430a      	orrs	r2, r1
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	e018      	b.n	8003e26 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003df4:	4b50      	ldr	r3, [pc, #320]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	4b4f      	ldr	r3, [pc, #316]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	438a      	bics	r2, r1
 8003dfe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e00:	f7fe fcae 	bl	8002760 <HAL_GetTick>
 8003e04:	0003      	movs	r3, r0
 8003e06:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e08:	e008      	b.n	8003e1c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e0a:	f7fe fca9 	bl	8002760 <HAL_GetTick>
 8003e0e:	0002      	movs	r2, r0
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e202      	b.n	8004222 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e1c:	4b46      	ldr	r3, [pc, #280]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2202      	movs	r2, #2
 8003e22:	4013      	ands	r3, r2
 8003e24:	d1f1      	bne.n	8003e0a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2208      	movs	r2, #8
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	d036      	beq.n	8003e9e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d019      	beq.n	8003e6c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e38:	4b3f      	ldr	r3, [pc, #252]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003e3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e3c:	4b3e      	ldr	r3, [pc, #248]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003e3e:	2101      	movs	r1, #1
 8003e40:	430a      	orrs	r2, r1
 8003e42:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e44:	f7fe fc8c 	bl	8002760 <HAL_GetTick>
 8003e48:	0003      	movs	r3, r0
 8003e4a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e4c:	e008      	b.n	8003e60 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e4e:	f7fe fc87 	bl	8002760 <HAL_GetTick>
 8003e52:	0002      	movs	r2, r0
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e1e0      	b.n	8004222 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e60:	4b35      	ldr	r3, [pc, #212]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	2202      	movs	r2, #2
 8003e66:	4013      	ands	r3, r2
 8003e68:	d0f1      	beq.n	8003e4e <HAL_RCC_OscConfig+0x242>
 8003e6a:	e018      	b.n	8003e9e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e6c:	4b32      	ldr	r3, [pc, #200]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003e6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e70:	4b31      	ldr	r3, [pc, #196]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003e72:	2101      	movs	r1, #1
 8003e74:	438a      	bics	r2, r1
 8003e76:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e78:	f7fe fc72 	bl	8002760 <HAL_GetTick>
 8003e7c:	0003      	movs	r3, r0
 8003e7e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e82:	f7fe fc6d 	bl	8002760 <HAL_GetTick>
 8003e86:	0002      	movs	r2, r0
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e1c6      	b.n	8004222 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e94:	4b28      	ldr	r3, [pc, #160]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	2202      	movs	r2, #2
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	d1f1      	bne.n	8003e82 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2204      	movs	r2, #4
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	d100      	bne.n	8003eaa <HAL_RCC_OscConfig+0x29e>
 8003ea8:	e0b4      	b.n	8004014 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eaa:	201f      	movs	r0, #31
 8003eac:	183b      	adds	r3, r7, r0
 8003eae:	2200      	movs	r2, #0
 8003eb0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eb2:	4b21      	ldr	r3, [pc, #132]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003eb4:	69da      	ldr	r2, [r3, #28]
 8003eb6:	2380      	movs	r3, #128	; 0x80
 8003eb8:	055b      	lsls	r3, r3, #21
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d110      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ebe:	4b1e      	ldr	r3, [pc, #120]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003ec0:	69da      	ldr	r2, [r3, #28]
 8003ec2:	4b1d      	ldr	r3, [pc, #116]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003ec4:	2180      	movs	r1, #128	; 0x80
 8003ec6:	0549      	lsls	r1, r1, #21
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	61da      	str	r2, [r3, #28]
 8003ecc:	4b1a      	ldr	r3, [pc, #104]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003ece:	69da      	ldr	r2, [r3, #28]
 8003ed0:	2380      	movs	r3, #128	; 0x80
 8003ed2:	055b      	lsls	r3, r3, #21
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003eda:	183b      	adds	r3, r7, r0
 8003edc:	2201      	movs	r2, #1
 8003ede:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee0:	4b18      	ldr	r3, [pc, #96]	; (8003f44 <HAL_RCC_OscConfig+0x338>)
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	2380      	movs	r3, #128	; 0x80
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	4013      	ands	r3, r2
 8003eea:	d11a      	bne.n	8003f22 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eec:	4b15      	ldr	r3, [pc, #84]	; (8003f44 <HAL_RCC_OscConfig+0x338>)
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	4b14      	ldr	r3, [pc, #80]	; (8003f44 <HAL_RCC_OscConfig+0x338>)
 8003ef2:	2180      	movs	r1, #128	; 0x80
 8003ef4:	0049      	lsls	r1, r1, #1
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003efa:	f7fe fc31 	bl	8002760 <HAL_GetTick>
 8003efe:	0003      	movs	r3, r0
 8003f00:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f04:	f7fe fc2c 	bl	8002760 <HAL_GetTick>
 8003f08:	0002      	movs	r2, r0
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b64      	cmp	r3, #100	; 0x64
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e185      	b.n	8004222 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f16:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <HAL_RCC_OscConfig+0x338>)
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	2380      	movs	r3, #128	; 0x80
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d0f0      	beq.n	8003f04 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d10e      	bne.n	8003f48 <HAL_RCC_OscConfig+0x33c>
 8003f2a:	4b03      	ldr	r3, [pc, #12]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003f2c:	6a1a      	ldr	r2, [r3, #32]
 8003f2e:	4b02      	ldr	r3, [pc, #8]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003f30:	2101      	movs	r1, #1
 8003f32:	430a      	orrs	r2, r1
 8003f34:	621a      	str	r2, [r3, #32]
 8003f36:	e035      	b.n	8003fa4 <HAL_RCC_OscConfig+0x398>
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	fffeffff 	.word	0xfffeffff
 8003f40:	fffbffff 	.word	0xfffbffff
 8003f44:	40007000 	.word	0x40007000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10c      	bne.n	8003f6a <HAL_RCC_OscConfig+0x35e>
 8003f50:	4bb6      	ldr	r3, [pc, #728]	; (800422c <HAL_RCC_OscConfig+0x620>)
 8003f52:	6a1a      	ldr	r2, [r3, #32]
 8003f54:	4bb5      	ldr	r3, [pc, #724]	; (800422c <HAL_RCC_OscConfig+0x620>)
 8003f56:	2101      	movs	r1, #1
 8003f58:	438a      	bics	r2, r1
 8003f5a:	621a      	str	r2, [r3, #32]
 8003f5c:	4bb3      	ldr	r3, [pc, #716]	; (800422c <HAL_RCC_OscConfig+0x620>)
 8003f5e:	6a1a      	ldr	r2, [r3, #32]
 8003f60:	4bb2      	ldr	r3, [pc, #712]	; (800422c <HAL_RCC_OscConfig+0x620>)
 8003f62:	2104      	movs	r1, #4
 8003f64:	438a      	bics	r2, r1
 8003f66:	621a      	str	r2, [r3, #32]
 8003f68:	e01c      	b.n	8003fa4 <HAL_RCC_OscConfig+0x398>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	2b05      	cmp	r3, #5
 8003f70:	d10c      	bne.n	8003f8c <HAL_RCC_OscConfig+0x380>
 8003f72:	4bae      	ldr	r3, [pc, #696]	; (800422c <HAL_RCC_OscConfig+0x620>)
 8003f74:	6a1a      	ldr	r2, [r3, #32]
 8003f76:	4bad      	ldr	r3, [pc, #692]	; (800422c <HAL_RCC_OscConfig+0x620>)
 8003f78:	2104      	movs	r1, #4
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	621a      	str	r2, [r3, #32]
 8003f7e:	4bab      	ldr	r3, [pc, #684]	; (800422c <HAL_RCC_OscConfig+0x620>)
 8003f80:	6a1a      	ldr	r2, [r3, #32]
 8003f82:	4baa      	ldr	r3, [pc, #680]	; (800422c <HAL_RCC_OscConfig+0x620>)
 8003f84:	2101      	movs	r1, #1
 8003f86:	430a      	orrs	r2, r1
 8003f88:	621a      	str	r2, [r3, #32]
 8003f8a:	e00b      	b.n	8003fa4 <HAL_RCC_OscConfig+0x398>
 8003f8c:	4ba7      	ldr	r3, [pc, #668]	; (800422c <HAL_RCC_OscConfig+0x620>)
 8003f8e:	6a1a      	ldr	r2, [r3, #32]
 8003f90:	4ba6      	ldr	r3, [pc, #664]	; (800422c <HAL_RCC_OscConfig+0x620>)
 8003f92:	2101      	movs	r1, #1
 8003f94:	438a      	bics	r2, r1
 8003f96:	621a      	str	r2, [r3, #32]
 8003f98:	4ba4      	ldr	r3, [pc, #656]	; (800422c <HAL_RCC_OscConfig+0x620>)
 8003f9a:	6a1a      	ldr	r2, [r3, #32]
 8003f9c:	4ba3      	ldr	r3, [pc, #652]	; (800422c <HAL_RCC_OscConfig+0x620>)
 8003f9e:	2104      	movs	r1, #4
 8003fa0:	438a      	bics	r2, r1
 8003fa2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d014      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fac:	f7fe fbd8 	bl	8002760 <HAL_GetTick>
 8003fb0:	0003      	movs	r3, r0
 8003fb2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb4:	e009      	b.n	8003fca <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fb6:	f7fe fbd3 	bl	8002760 <HAL_GetTick>
 8003fba:	0002      	movs	r2, r0
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	4a9b      	ldr	r2, [pc, #620]	; (8004230 <HAL_RCC_OscConfig+0x624>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e12b      	b.n	8004222 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fca:	4b98      	ldr	r3, [pc, #608]	; (800422c <HAL_RCC_OscConfig+0x620>)
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	d0f0      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x3aa>
 8003fd4:	e013      	b.n	8003ffe <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd6:	f7fe fbc3 	bl	8002760 <HAL_GetTick>
 8003fda:	0003      	movs	r3, r0
 8003fdc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fde:	e009      	b.n	8003ff4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe0:	f7fe fbbe 	bl	8002760 <HAL_GetTick>
 8003fe4:	0002      	movs	r2, r0
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	4a91      	ldr	r2, [pc, #580]	; (8004230 <HAL_RCC_OscConfig+0x624>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e116      	b.n	8004222 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ff4:	4b8d      	ldr	r3, [pc, #564]	; (800422c <HAL_RCC_OscConfig+0x620>)
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	d1f0      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ffe:	231f      	movs	r3, #31
 8004000:	18fb      	adds	r3, r7, r3
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d105      	bne.n	8004014 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004008:	4b88      	ldr	r3, [pc, #544]	; (800422c <HAL_RCC_OscConfig+0x620>)
 800400a:	69da      	ldr	r2, [r3, #28]
 800400c:	4b87      	ldr	r3, [pc, #540]	; (800422c <HAL_RCC_OscConfig+0x620>)
 800400e:	4989      	ldr	r1, [pc, #548]	; (8004234 <HAL_RCC_OscConfig+0x628>)
 8004010:	400a      	ands	r2, r1
 8004012:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2210      	movs	r2, #16
 800401a:	4013      	ands	r3, r2
 800401c:	d063      	beq.n	80040e6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d12a      	bne.n	800407c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004026:	4b81      	ldr	r3, [pc, #516]	; (800422c <HAL_RCC_OscConfig+0x620>)
 8004028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800402a:	4b80      	ldr	r3, [pc, #512]	; (800422c <HAL_RCC_OscConfig+0x620>)
 800402c:	2104      	movs	r1, #4
 800402e:	430a      	orrs	r2, r1
 8004030:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004032:	4b7e      	ldr	r3, [pc, #504]	; (800422c <HAL_RCC_OscConfig+0x620>)
 8004034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004036:	4b7d      	ldr	r3, [pc, #500]	; (800422c <HAL_RCC_OscConfig+0x620>)
 8004038:	2101      	movs	r1, #1
 800403a:	430a      	orrs	r2, r1
 800403c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800403e:	f7fe fb8f 	bl	8002760 <HAL_GetTick>
 8004042:	0003      	movs	r3, r0
 8004044:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004048:	f7fe fb8a 	bl	8002760 <HAL_GetTick>
 800404c:	0002      	movs	r2, r0
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e0e3      	b.n	8004222 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800405a:	4b74      	ldr	r3, [pc, #464]	; (800422c <HAL_RCC_OscConfig+0x620>)
 800405c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405e:	2202      	movs	r2, #2
 8004060:	4013      	ands	r3, r2
 8004062:	d0f1      	beq.n	8004048 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004064:	4b71      	ldr	r3, [pc, #452]	; (800422c <HAL_RCC_OscConfig+0x620>)
 8004066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004068:	22f8      	movs	r2, #248	; 0xf8
 800406a:	4393      	bics	r3, r2
 800406c:	0019      	movs	r1, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	00da      	lsls	r2, r3, #3
 8004074:	4b6d      	ldr	r3, [pc, #436]	; (800422c <HAL_RCC_OscConfig+0x620>)
 8004076:	430a      	orrs	r2, r1
 8004078:	635a      	str	r2, [r3, #52]	; 0x34
 800407a:	e034      	b.n	80040e6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	3305      	adds	r3, #5
 8004082:	d111      	bne.n	80040a8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004084:	4b69      	ldr	r3, [pc, #420]	; (800422c <HAL_RCC_OscConfig+0x620>)
 8004086:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004088:	4b68      	ldr	r3, [pc, #416]	; (800422c <HAL_RCC_OscConfig+0x620>)
 800408a:	2104      	movs	r1, #4
 800408c:	438a      	bics	r2, r1
 800408e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004090:	4b66      	ldr	r3, [pc, #408]	; (800422c <HAL_RCC_OscConfig+0x620>)
 8004092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004094:	22f8      	movs	r2, #248	; 0xf8
 8004096:	4393      	bics	r3, r2
 8004098:	0019      	movs	r1, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	00da      	lsls	r2, r3, #3
 80040a0:	4b62      	ldr	r3, [pc, #392]	; (800422c <HAL_RCC_OscConfig+0x620>)
 80040a2:	430a      	orrs	r2, r1
 80040a4:	635a      	str	r2, [r3, #52]	; 0x34
 80040a6:	e01e      	b.n	80040e6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80040a8:	4b60      	ldr	r3, [pc, #384]	; (800422c <HAL_RCC_OscConfig+0x620>)
 80040aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040ac:	4b5f      	ldr	r3, [pc, #380]	; (800422c <HAL_RCC_OscConfig+0x620>)
 80040ae:	2104      	movs	r1, #4
 80040b0:	430a      	orrs	r2, r1
 80040b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80040b4:	4b5d      	ldr	r3, [pc, #372]	; (800422c <HAL_RCC_OscConfig+0x620>)
 80040b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040b8:	4b5c      	ldr	r3, [pc, #368]	; (800422c <HAL_RCC_OscConfig+0x620>)
 80040ba:	2101      	movs	r1, #1
 80040bc:	438a      	bics	r2, r1
 80040be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040c0:	f7fe fb4e 	bl	8002760 <HAL_GetTick>
 80040c4:	0003      	movs	r3, r0
 80040c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80040ca:	f7fe fb49 	bl	8002760 <HAL_GetTick>
 80040ce:	0002      	movs	r2, r0
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e0a2      	b.n	8004222 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80040dc:	4b53      	ldr	r3, [pc, #332]	; (800422c <HAL_RCC_OscConfig+0x620>)
 80040de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e0:	2202      	movs	r2, #2
 80040e2:	4013      	ands	r3, r2
 80040e4:	d1f1      	bne.n	80040ca <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d100      	bne.n	80040f0 <HAL_RCC_OscConfig+0x4e4>
 80040ee:	e097      	b.n	8004220 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040f0:	4b4e      	ldr	r3, [pc, #312]	; (800422c <HAL_RCC_OscConfig+0x620>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	220c      	movs	r2, #12
 80040f6:	4013      	ands	r3, r2
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d100      	bne.n	80040fe <HAL_RCC_OscConfig+0x4f2>
 80040fc:	e06b      	b.n	80041d6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	2b02      	cmp	r3, #2
 8004104:	d14c      	bne.n	80041a0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004106:	4b49      	ldr	r3, [pc, #292]	; (800422c <HAL_RCC_OscConfig+0x620>)
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	4b48      	ldr	r3, [pc, #288]	; (800422c <HAL_RCC_OscConfig+0x620>)
 800410c:	494a      	ldr	r1, [pc, #296]	; (8004238 <HAL_RCC_OscConfig+0x62c>)
 800410e:	400a      	ands	r2, r1
 8004110:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004112:	f7fe fb25 	bl	8002760 <HAL_GetTick>
 8004116:	0003      	movs	r3, r0
 8004118:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800411c:	f7fe fb20 	bl	8002760 <HAL_GetTick>
 8004120:	0002      	movs	r2, r0
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e079      	b.n	8004222 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800412e:	4b3f      	ldr	r3, [pc, #252]	; (800422c <HAL_RCC_OscConfig+0x620>)
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	2380      	movs	r3, #128	; 0x80
 8004134:	049b      	lsls	r3, r3, #18
 8004136:	4013      	ands	r3, r2
 8004138:	d1f0      	bne.n	800411c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800413a:	4b3c      	ldr	r3, [pc, #240]	; (800422c <HAL_RCC_OscConfig+0x620>)
 800413c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413e:	220f      	movs	r2, #15
 8004140:	4393      	bics	r3, r2
 8004142:	0019      	movs	r1, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004148:	4b38      	ldr	r3, [pc, #224]	; (800422c <HAL_RCC_OscConfig+0x620>)
 800414a:	430a      	orrs	r2, r1
 800414c:	62da      	str	r2, [r3, #44]	; 0x2c
 800414e:	4b37      	ldr	r3, [pc, #220]	; (800422c <HAL_RCC_OscConfig+0x620>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	4a3a      	ldr	r2, [pc, #232]	; (800423c <HAL_RCC_OscConfig+0x630>)
 8004154:	4013      	ands	r3, r2
 8004156:	0019      	movs	r1, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	431a      	orrs	r2, r3
 8004162:	4b32      	ldr	r3, [pc, #200]	; (800422c <HAL_RCC_OscConfig+0x620>)
 8004164:	430a      	orrs	r2, r1
 8004166:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004168:	4b30      	ldr	r3, [pc, #192]	; (800422c <HAL_RCC_OscConfig+0x620>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	4b2f      	ldr	r3, [pc, #188]	; (800422c <HAL_RCC_OscConfig+0x620>)
 800416e:	2180      	movs	r1, #128	; 0x80
 8004170:	0449      	lsls	r1, r1, #17
 8004172:	430a      	orrs	r2, r1
 8004174:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004176:	f7fe faf3 	bl	8002760 <HAL_GetTick>
 800417a:	0003      	movs	r3, r0
 800417c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004180:	f7fe faee 	bl	8002760 <HAL_GetTick>
 8004184:	0002      	movs	r2, r0
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e047      	b.n	8004222 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004192:	4b26      	ldr	r3, [pc, #152]	; (800422c <HAL_RCC_OscConfig+0x620>)
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	2380      	movs	r3, #128	; 0x80
 8004198:	049b      	lsls	r3, r3, #18
 800419a:	4013      	ands	r3, r2
 800419c:	d0f0      	beq.n	8004180 <HAL_RCC_OscConfig+0x574>
 800419e:	e03f      	b.n	8004220 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041a0:	4b22      	ldr	r3, [pc, #136]	; (800422c <HAL_RCC_OscConfig+0x620>)
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	4b21      	ldr	r3, [pc, #132]	; (800422c <HAL_RCC_OscConfig+0x620>)
 80041a6:	4924      	ldr	r1, [pc, #144]	; (8004238 <HAL_RCC_OscConfig+0x62c>)
 80041a8:	400a      	ands	r2, r1
 80041aa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ac:	f7fe fad8 	bl	8002760 <HAL_GetTick>
 80041b0:	0003      	movs	r3, r0
 80041b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041b6:	f7fe fad3 	bl	8002760 <HAL_GetTick>
 80041ba:	0002      	movs	r2, r0
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e02c      	b.n	8004222 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041c8:	4b18      	ldr	r3, [pc, #96]	; (800422c <HAL_RCC_OscConfig+0x620>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	2380      	movs	r3, #128	; 0x80
 80041ce:	049b      	lsls	r3, r3, #18
 80041d0:	4013      	ands	r3, r2
 80041d2:	d1f0      	bne.n	80041b6 <HAL_RCC_OscConfig+0x5aa>
 80041d4:	e024      	b.n	8004220 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d101      	bne.n	80041e2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e01f      	b.n	8004222 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80041e2:	4b12      	ldr	r3, [pc, #72]	; (800422c <HAL_RCC_OscConfig+0x620>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80041e8:	4b10      	ldr	r3, [pc, #64]	; (800422c <HAL_RCC_OscConfig+0x620>)
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ec:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	2380      	movs	r3, #128	; 0x80
 80041f2:	025b      	lsls	r3, r3, #9
 80041f4:	401a      	ands	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d10e      	bne.n	800421c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	220f      	movs	r2, #15
 8004202:	401a      	ands	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004208:	429a      	cmp	r2, r3
 800420a:	d107      	bne.n	800421c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	23f0      	movs	r3, #240	; 0xf0
 8004210:	039b      	lsls	r3, r3, #14
 8004212:	401a      	ands	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004218:	429a      	cmp	r2, r3
 800421a:	d001      	beq.n	8004220 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e000      	b.n	8004222 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	0018      	movs	r0, r3
 8004224:	46bd      	mov	sp, r7
 8004226:	b008      	add	sp, #32
 8004228:	bd80      	pop	{r7, pc}
 800422a:	46c0      	nop			; (mov r8, r8)
 800422c:	40021000 	.word	0x40021000
 8004230:	00001388 	.word	0x00001388
 8004234:	efffffff 	.word	0xefffffff
 8004238:	feffffff 	.word	0xfeffffff
 800423c:	ffc2ffff 	.word	0xffc2ffff

08004240 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e0b3      	b.n	80043bc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004254:	4b5b      	ldr	r3, [pc, #364]	; (80043c4 <HAL_RCC_ClockConfig+0x184>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2201      	movs	r2, #1
 800425a:	4013      	ands	r3, r2
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d911      	bls.n	8004286 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004262:	4b58      	ldr	r3, [pc, #352]	; (80043c4 <HAL_RCC_ClockConfig+0x184>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2201      	movs	r2, #1
 8004268:	4393      	bics	r3, r2
 800426a:	0019      	movs	r1, r3
 800426c:	4b55      	ldr	r3, [pc, #340]	; (80043c4 <HAL_RCC_ClockConfig+0x184>)
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004274:	4b53      	ldr	r3, [pc, #332]	; (80043c4 <HAL_RCC_ClockConfig+0x184>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2201      	movs	r2, #1
 800427a:	4013      	ands	r3, r2
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	429a      	cmp	r2, r3
 8004280:	d001      	beq.n	8004286 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e09a      	b.n	80043bc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2202      	movs	r2, #2
 800428c:	4013      	ands	r3, r2
 800428e:	d015      	beq.n	80042bc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2204      	movs	r2, #4
 8004296:	4013      	ands	r3, r2
 8004298:	d006      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800429a:	4b4b      	ldr	r3, [pc, #300]	; (80043c8 <HAL_RCC_ClockConfig+0x188>)
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	4b4a      	ldr	r3, [pc, #296]	; (80043c8 <HAL_RCC_ClockConfig+0x188>)
 80042a0:	21e0      	movs	r1, #224	; 0xe0
 80042a2:	00c9      	lsls	r1, r1, #3
 80042a4:	430a      	orrs	r2, r1
 80042a6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a8:	4b47      	ldr	r3, [pc, #284]	; (80043c8 <HAL_RCC_ClockConfig+0x188>)
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	22f0      	movs	r2, #240	; 0xf0
 80042ae:	4393      	bics	r3, r2
 80042b0:	0019      	movs	r1, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	4b44      	ldr	r3, [pc, #272]	; (80043c8 <HAL_RCC_ClockConfig+0x188>)
 80042b8:	430a      	orrs	r2, r1
 80042ba:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2201      	movs	r2, #1
 80042c2:	4013      	ands	r3, r2
 80042c4:	d040      	beq.n	8004348 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d107      	bne.n	80042de <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ce:	4b3e      	ldr	r3, [pc, #248]	; (80043c8 <HAL_RCC_ClockConfig+0x188>)
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	2380      	movs	r3, #128	; 0x80
 80042d4:	029b      	lsls	r3, r3, #10
 80042d6:	4013      	ands	r3, r2
 80042d8:	d114      	bne.n	8004304 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e06e      	b.n	80043bc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d107      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042e6:	4b38      	ldr	r3, [pc, #224]	; (80043c8 <HAL_RCC_ClockConfig+0x188>)
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	2380      	movs	r3, #128	; 0x80
 80042ec:	049b      	lsls	r3, r3, #18
 80042ee:	4013      	ands	r3, r2
 80042f0:	d108      	bne.n	8004304 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e062      	b.n	80043bc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f6:	4b34      	ldr	r3, [pc, #208]	; (80043c8 <HAL_RCC_ClockConfig+0x188>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2202      	movs	r2, #2
 80042fc:	4013      	ands	r3, r2
 80042fe:	d101      	bne.n	8004304 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e05b      	b.n	80043bc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004304:	4b30      	ldr	r3, [pc, #192]	; (80043c8 <HAL_RCC_ClockConfig+0x188>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2203      	movs	r2, #3
 800430a:	4393      	bics	r3, r2
 800430c:	0019      	movs	r1, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	4b2d      	ldr	r3, [pc, #180]	; (80043c8 <HAL_RCC_ClockConfig+0x188>)
 8004314:	430a      	orrs	r2, r1
 8004316:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004318:	f7fe fa22 	bl	8002760 <HAL_GetTick>
 800431c:	0003      	movs	r3, r0
 800431e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004320:	e009      	b.n	8004336 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004322:	f7fe fa1d 	bl	8002760 <HAL_GetTick>
 8004326:	0002      	movs	r2, r0
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	4a27      	ldr	r2, [pc, #156]	; (80043cc <HAL_RCC_ClockConfig+0x18c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e042      	b.n	80043bc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004336:	4b24      	ldr	r3, [pc, #144]	; (80043c8 <HAL_RCC_ClockConfig+0x188>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	220c      	movs	r2, #12
 800433c:	401a      	ands	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	429a      	cmp	r2, r3
 8004346:	d1ec      	bne.n	8004322 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004348:	4b1e      	ldr	r3, [pc, #120]	; (80043c4 <HAL_RCC_ClockConfig+0x184>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2201      	movs	r2, #1
 800434e:	4013      	ands	r3, r2
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	429a      	cmp	r2, r3
 8004354:	d211      	bcs.n	800437a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004356:	4b1b      	ldr	r3, [pc, #108]	; (80043c4 <HAL_RCC_ClockConfig+0x184>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2201      	movs	r2, #1
 800435c:	4393      	bics	r3, r2
 800435e:	0019      	movs	r1, r3
 8004360:	4b18      	ldr	r3, [pc, #96]	; (80043c4 <HAL_RCC_ClockConfig+0x184>)
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	430a      	orrs	r2, r1
 8004366:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004368:	4b16      	ldr	r3, [pc, #88]	; (80043c4 <HAL_RCC_ClockConfig+0x184>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2201      	movs	r2, #1
 800436e:	4013      	ands	r3, r2
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	429a      	cmp	r2, r3
 8004374:	d001      	beq.n	800437a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e020      	b.n	80043bc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2204      	movs	r2, #4
 8004380:	4013      	ands	r3, r2
 8004382:	d009      	beq.n	8004398 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004384:	4b10      	ldr	r3, [pc, #64]	; (80043c8 <HAL_RCC_ClockConfig+0x188>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	4a11      	ldr	r2, [pc, #68]	; (80043d0 <HAL_RCC_ClockConfig+0x190>)
 800438a:	4013      	ands	r3, r2
 800438c:	0019      	movs	r1, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	4b0d      	ldr	r3, [pc, #52]	; (80043c8 <HAL_RCC_ClockConfig+0x188>)
 8004394:	430a      	orrs	r2, r1
 8004396:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004398:	f000 f820 	bl	80043dc <HAL_RCC_GetSysClockFreq>
 800439c:	0001      	movs	r1, r0
 800439e:	4b0a      	ldr	r3, [pc, #40]	; (80043c8 <HAL_RCC_ClockConfig+0x188>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	091b      	lsrs	r3, r3, #4
 80043a4:	220f      	movs	r2, #15
 80043a6:	4013      	ands	r3, r2
 80043a8:	4a0a      	ldr	r2, [pc, #40]	; (80043d4 <HAL_RCC_ClockConfig+0x194>)
 80043aa:	5cd3      	ldrb	r3, [r2, r3]
 80043ac:	000a      	movs	r2, r1
 80043ae:	40da      	lsrs	r2, r3
 80043b0:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <HAL_RCC_ClockConfig+0x198>)
 80043b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80043b4:	2000      	movs	r0, #0
 80043b6:	f7fe f98d 	bl	80026d4 <HAL_InitTick>
  
  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	0018      	movs	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	b004      	add	sp, #16
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40022000 	.word	0x40022000
 80043c8:	40021000 	.word	0x40021000
 80043cc:	00001388 	.word	0x00001388
 80043d0:	fffff8ff 	.word	0xfffff8ff
 80043d4:	08009738 	.word	0x08009738
 80043d8:	2000001c 	.word	0x2000001c

080043dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043dc:	b590      	push	{r4, r7, lr}
 80043de:	b08f      	sub	sp, #60	; 0x3c
 80043e0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80043e2:	2314      	movs	r3, #20
 80043e4:	18fb      	adds	r3, r7, r3
 80043e6:	4a2b      	ldr	r2, [pc, #172]	; (8004494 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80043ea:	c313      	stmia	r3!, {r0, r1, r4}
 80043ec:	6812      	ldr	r2, [r2, #0]
 80043ee:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80043f0:	1d3b      	adds	r3, r7, #4
 80043f2:	4a29      	ldr	r2, [pc, #164]	; (8004498 <HAL_RCC_GetSysClockFreq+0xbc>)
 80043f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80043f6:	c313      	stmia	r3!, {r0, r1, r4}
 80043f8:	6812      	ldr	r2, [r2, #0]
 80043fa:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004400:	2300      	movs	r3, #0
 8004402:	62bb      	str	r3, [r7, #40]	; 0x28
 8004404:	2300      	movs	r3, #0
 8004406:	637b      	str	r3, [r7, #52]	; 0x34
 8004408:	2300      	movs	r3, #0
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800440c:	2300      	movs	r3, #0
 800440e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004410:	4b22      	ldr	r3, [pc, #136]	; (800449c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004418:	220c      	movs	r2, #12
 800441a:	4013      	ands	r3, r2
 800441c:	2b04      	cmp	r3, #4
 800441e:	d002      	beq.n	8004426 <HAL_RCC_GetSysClockFreq+0x4a>
 8004420:	2b08      	cmp	r3, #8
 8004422:	d003      	beq.n	800442c <HAL_RCC_GetSysClockFreq+0x50>
 8004424:	e02d      	b.n	8004482 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004426:	4b1e      	ldr	r3, [pc, #120]	; (80044a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004428:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800442a:	e02d      	b.n	8004488 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800442c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442e:	0c9b      	lsrs	r3, r3, #18
 8004430:	220f      	movs	r2, #15
 8004432:	4013      	ands	r3, r2
 8004434:	2214      	movs	r2, #20
 8004436:	18ba      	adds	r2, r7, r2
 8004438:	5cd3      	ldrb	r3, [r2, r3]
 800443a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800443c:	4b17      	ldr	r3, [pc, #92]	; (800449c <HAL_RCC_GetSysClockFreq+0xc0>)
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	220f      	movs	r2, #15
 8004442:	4013      	ands	r3, r2
 8004444:	1d3a      	adds	r2, r7, #4
 8004446:	5cd3      	ldrb	r3, [r2, r3]
 8004448:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800444a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800444c:	2380      	movs	r3, #128	; 0x80
 800444e:	025b      	lsls	r3, r3, #9
 8004450:	4013      	ands	r3, r2
 8004452:	d009      	beq.n	8004468 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004454:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004456:	4812      	ldr	r0, [pc, #72]	; (80044a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004458:	f7fb fe68 	bl	800012c <__udivsi3>
 800445c:	0003      	movs	r3, r0
 800445e:	001a      	movs	r2, r3
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	4353      	muls	r3, r2
 8004464:	637b      	str	r3, [r7, #52]	; 0x34
 8004466:	e009      	b.n	800447c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004468:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800446a:	000a      	movs	r2, r1
 800446c:	0152      	lsls	r2, r2, #5
 800446e:	1a52      	subs	r2, r2, r1
 8004470:	0193      	lsls	r3, r2, #6
 8004472:	1a9b      	subs	r3, r3, r2
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	185b      	adds	r3, r3, r1
 8004478:	021b      	lsls	r3, r3, #8
 800447a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 800447c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800447e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004480:	e002      	b.n	8004488 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004482:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004484:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004486:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800448a:	0018      	movs	r0, r3
 800448c:	46bd      	mov	sp, r7
 800448e:	b00f      	add	sp, #60	; 0x3c
 8004490:	bd90      	pop	{r4, r7, pc}
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	08006f04 	.word	0x08006f04
 8004498:	08006f14 	.word	0x08006f14
 800449c:	40021000 	.word	0x40021000
 80044a0:	007a1200 	.word	0x007a1200

080044a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044a8:	4b02      	ldr	r3, [pc, #8]	; (80044b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80044aa:	681b      	ldr	r3, [r3, #0]
}
 80044ac:	0018      	movs	r0, r3
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	46c0      	nop			; (mov r8, r8)
 80044b4:	2000001c 	.word	0x2000001c

080044b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80044bc:	f7ff fff2 	bl	80044a4 <HAL_RCC_GetHCLKFreq>
 80044c0:	0001      	movs	r1, r0
 80044c2:	4b06      	ldr	r3, [pc, #24]	; (80044dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	0a1b      	lsrs	r3, r3, #8
 80044c8:	2207      	movs	r2, #7
 80044ca:	4013      	ands	r3, r2
 80044cc:	4a04      	ldr	r2, [pc, #16]	; (80044e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044ce:	5cd3      	ldrb	r3, [r2, r3]
 80044d0:	40d9      	lsrs	r1, r3
 80044d2:	000b      	movs	r3, r1
}    
 80044d4:	0018      	movs	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	46c0      	nop			; (mov r8, r8)
 80044dc:	40021000 	.word	0x40021000
 80044e0:	08009748 	.word	0x08009748

080044e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	2380      	movs	r3, #128	; 0x80
 80044fa:	025b      	lsls	r3, r3, #9
 80044fc:	4013      	ands	r3, r2
 80044fe:	d100      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004500:	e08e      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004502:	2017      	movs	r0, #23
 8004504:	183b      	adds	r3, r7, r0
 8004506:	2200      	movs	r2, #0
 8004508:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800450a:	4b57      	ldr	r3, [pc, #348]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800450c:	69da      	ldr	r2, [r3, #28]
 800450e:	2380      	movs	r3, #128	; 0x80
 8004510:	055b      	lsls	r3, r3, #21
 8004512:	4013      	ands	r3, r2
 8004514:	d110      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004516:	4b54      	ldr	r3, [pc, #336]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004518:	69da      	ldr	r2, [r3, #28]
 800451a:	4b53      	ldr	r3, [pc, #332]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800451c:	2180      	movs	r1, #128	; 0x80
 800451e:	0549      	lsls	r1, r1, #21
 8004520:	430a      	orrs	r2, r1
 8004522:	61da      	str	r2, [r3, #28]
 8004524:	4b50      	ldr	r3, [pc, #320]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004526:	69da      	ldr	r2, [r3, #28]
 8004528:	2380      	movs	r3, #128	; 0x80
 800452a:	055b      	lsls	r3, r3, #21
 800452c:	4013      	ands	r3, r2
 800452e:	60bb      	str	r3, [r7, #8]
 8004530:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004532:	183b      	adds	r3, r7, r0
 8004534:	2201      	movs	r2, #1
 8004536:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004538:	4b4c      	ldr	r3, [pc, #304]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	2380      	movs	r3, #128	; 0x80
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	4013      	ands	r3, r2
 8004542:	d11a      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004544:	4b49      	ldr	r3, [pc, #292]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	4b48      	ldr	r3, [pc, #288]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800454a:	2180      	movs	r1, #128	; 0x80
 800454c:	0049      	lsls	r1, r1, #1
 800454e:	430a      	orrs	r2, r1
 8004550:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004552:	f7fe f905 	bl	8002760 <HAL_GetTick>
 8004556:	0003      	movs	r3, r0
 8004558:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455a:	e008      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800455c:	f7fe f900 	bl	8002760 <HAL_GetTick>
 8004560:	0002      	movs	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b64      	cmp	r3, #100	; 0x64
 8004568:	d901      	bls.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e077      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800456e:	4b3f      	ldr	r3, [pc, #252]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	2380      	movs	r3, #128	; 0x80
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	4013      	ands	r3, r2
 8004578:	d0f0      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800457a:	4b3b      	ldr	r3, [pc, #236]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800457c:	6a1a      	ldr	r2, [r3, #32]
 800457e:	23c0      	movs	r3, #192	; 0xc0
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4013      	ands	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d034      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	23c0      	movs	r3, #192	; 0xc0
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4013      	ands	r3, r2
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	429a      	cmp	r2, r3
 800459a:	d02c      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800459c:	4b32      	ldr	r3, [pc, #200]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	4a33      	ldr	r2, [pc, #204]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80045a2:	4013      	ands	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045a6:	4b30      	ldr	r3, [pc, #192]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045a8:	6a1a      	ldr	r2, [r3, #32]
 80045aa:	4b2f      	ldr	r3, [pc, #188]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045ac:	2180      	movs	r1, #128	; 0x80
 80045ae:	0249      	lsls	r1, r1, #9
 80045b0:	430a      	orrs	r2, r1
 80045b2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045b4:	4b2c      	ldr	r3, [pc, #176]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045b6:	6a1a      	ldr	r2, [r3, #32]
 80045b8:	4b2b      	ldr	r3, [pc, #172]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045ba:	492e      	ldr	r1, [pc, #184]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80045bc:	400a      	ands	r2, r1
 80045be:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80045c0:	4b29      	ldr	r3, [pc, #164]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2201      	movs	r2, #1
 80045ca:	4013      	ands	r3, r2
 80045cc:	d013      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ce:	f7fe f8c7 	bl	8002760 <HAL_GetTick>
 80045d2:	0003      	movs	r3, r0
 80045d4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d6:	e009      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d8:	f7fe f8c2 	bl	8002760 <HAL_GetTick>
 80045dc:	0002      	movs	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	4a25      	ldr	r2, [pc, #148]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d901      	bls.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e038      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ec:	4b1e      	ldr	r3, [pc, #120]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	2202      	movs	r2, #2
 80045f2:	4013      	ands	r3, r2
 80045f4:	d0f0      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045f6:	4b1c      	ldr	r3, [pc, #112]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	4a1d      	ldr	r2, [pc, #116]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80045fc:	4013      	ands	r3, r2
 80045fe:	0019      	movs	r1, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	4b18      	ldr	r3, [pc, #96]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004606:	430a      	orrs	r2, r1
 8004608:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800460a:	2317      	movs	r3, #23
 800460c:	18fb      	adds	r3, r7, r3
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d105      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004614:	4b14      	ldr	r3, [pc, #80]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004616:	69da      	ldr	r2, [r3, #28]
 8004618:	4b13      	ldr	r3, [pc, #76]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800461a:	4918      	ldr	r1, [pc, #96]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800461c:	400a      	ands	r2, r1
 800461e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2201      	movs	r2, #1
 8004626:	4013      	ands	r3, r2
 8004628:	d009      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800462a:	4b0f      	ldr	r3, [pc, #60]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800462c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462e:	2203      	movs	r2, #3
 8004630:	4393      	bics	r3, r2
 8004632:	0019      	movs	r1, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	4b0b      	ldr	r3, [pc, #44]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800463a:	430a      	orrs	r2, r1
 800463c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2220      	movs	r2, #32
 8004644:	4013      	ands	r3, r2
 8004646:	d009      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004648:	4b07      	ldr	r3, [pc, #28]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800464a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464c:	2210      	movs	r2, #16
 800464e:	4393      	bics	r3, r2
 8004650:	0019      	movs	r1, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	4b04      	ldr	r3, [pc, #16]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004658:	430a      	orrs	r2, r1
 800465a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	0018      	movs	r0, r3
 8004660:	46bd      	mov	sp, r7
 8004662:	b006      	add	sp, #24
 8004664:	bd80      	pop	{r7, pc}
 8004666:	46c0      	nop			; (mov r8, r8)
 8004668:	40021000 	.word	0x40021000
 800466c:	40007000 	.word	0x40007000
 8004670:	fffffcff 	.word	0xfffffcff
 8004674:	fffeffff 	.word	0xfffeffff
 8004678:	00001388 	.word	0x00001388
 800467c:	efffffff 	.word	0xefffffff

08004680 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e044      	b.n	800471c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004696:	2b00      	cmp	r3, #0
 8004698:	d107      	bne.n	80046aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2274      	movs	r2, #116	; 0x74
 800469e:	2100      	movs	r1, #0
 80046a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	0018      	movs	r0, r3
 80046a6:	f7fd fde9 	bl	800227c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2224      	movs	r2, #36	; 0x24
 80046ae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2101      	movs	r1, #1
 80046bc:	438a      	bics	r2, r1
 80046be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	0018      	movs	r0, r3
 80046c4:	f000 f9f2 	bl	8004aac <UART_SetConfig>
 80046c8:	0003      	movs	r3, r0
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d101      	bne.n	80046d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e024      	b.n	800471c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	0018      	movs	r0, r3
 80046de:	f000 fb25 	bl	8004d2c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	490d      	ldr	r1, [pc, #52]	; (8004724 <HAL_UART_Init+0xa4>)
 80046ee:	400a      	ands	r2, r1
 80046f0:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689a      	ldr	r2, [r3, #8]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2108      	movs	r1, #8
 80046fe:	438a      	bics	r2, r1
 8004700:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2101      	movs	r1, #1
 800470e:	430a      	orrs	r2, r1
 8004710:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	0018      	movs	r0, r3
 8004716:	f000 fbbd 	bl	8004e94 <UART_CheckIdleState>
 800471a:	0003      	movs	r3, r0
}
 800471c:	0018      	movs	r0, r3
 800471e:	46bd      	mov	sp, r7
 8004720:	b002      	add	sp, #8
 8004722:	bd80      	pop	{r7, pc}
 8004724:	fffff7ff 	.word	0xfffff7ff

08004728 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e02c      	b.n	8004794 <HAL_UART_DeInit+0x6c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2224      	movs	r2, #36	; 0x24
 800473e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2101      	movs	r1, #1
 800474c:	438a      	bics	r2, r1
 800474e:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2200      	movs	r2, #0
 8004756:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2200      	movs	r2, #0
 800475e:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2200      	movs	r2, #0
 8004766:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	0018      	movs	r0, r3
 800476c:	f7fd fe62 	bl	8002434 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2280      	movs	r2, #128	; 0x80
 8004774:	2100      	movs	r1, #0
 8004776:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2274      	movs	r2, #116	; 0x74
 800478e:	2100      	movs	r1, #0
 8004790:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	0018      	movs	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	b002      	add	sp, #8
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b08a      	sub	sp, #40	; 0x28
 80047a0:	af02      	add	r7, sp, #8
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	603b      	str	r3, [r7, #0]
 80047a8:	1dbb      	adds	r3, r7, #6
 80047aa:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047b0:	2b20      	cmp	r3, #32
 80047b2:	d000      	beq.n	80047b6 <HAL_UART_Transmit+0x1a>
 80047b4:	e096      	b.n	80048e4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <HAL_UART_Transmit+0x28>
 80047bc:	1dbb      	adds	r3, r7, #6
 80047be:	881b      	ldrh	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e08e      	b.n	80048e6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	2380      	movs	r3, #128	; 0x80
 80047ce:	015b      	lsls	r3, r3, #5
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d109      	bne.n	80047e8 <HAL_UART_Transmit+0x4c>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d105      	bne.n	80047e8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2201      	movs	r2, #1
 80047e0:	4013      	ands	r3, r2
 80047e2:	d001      	beq.n	80047e8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e07e      	b.n	80048e6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2274      	movs	r2, #116	; 0x74
 80047ec:	5c9b      	ldrb	r3, [r3, r2]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d101      	bne.n	80047f6 <HAL_UART_Transmit+0x5a>
 80047f2:	2302      	movs	r3, #2
 80047f4:	e077      	b.n	80048e6 <HAL_UART_Transmit+0x14a>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2274      	movs	r2, #116	; 0x74
 80047fa:	2101      	movs	r1, #1
 80047fc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2280      	movs	r2, #128	; 0x80
 8004802:	2100      	movs	r1, #0
 8004804:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2221      	movs	r2, #33	; 0x21
 800480a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800480c:	f7fd ffa8 	bl	8002760 <HAL_GetTick>
 8004810:	0003      	movs	r3, r0
 8004812:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	1dba      	adds	r2, r7, #6
 8004818:	2150      	movs	r1, #80	; 0x50
 800481a:	8812      	ldrh	r2, [r2, #0]
 800481c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	1dba      	adds	r2, r7, #6
 8004822:	2152      	movs	r1, #82	; 0x52
 8004824:	8812      	ldrh	r2, [r2, #0]
 8004826:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	689a      	ldr	r2, [r3, #8]
 800482c:	2380      	movs	r3, #128	; 0x80
 800482e:	015b      	lsls	r3, r3, #5
 8004830:	429a      	cmp	r2, r3
 8004832:	d108      	bne.n	8004846 <HAL_UART_Transmit+0xaa>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d104      	bne.n	8004846 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800483c:	2300      	movs	r3, #0
 800483e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	61bb      	str	r3, [r7, #24]
 8004844:	e003      	b.n	800484e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800484a:	2300      	movs	r3, #0
 800484c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2274      	movs	r2, #116	; 0x74
 8004852:	2100      	movs	r1, #0
 8004854:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004856:	e02d      	b.n	80048b4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	0013      	movs	r3, r2
 8004862:	2200      	movs	r2, #0
 8004864:	2180      	movs	r1, #128	; 0x80
 8004866:	f000 fb5d 	bl	8004f24 <UART_WaitOnFlagUntilTimeout>
 800486a:	1e03      	subs	r3, r0, #0
 800486c:	d001      	beq.n	8004872 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e039      	b.n	80048e6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10b      	bne.n	8004890 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	881a      	ldrh	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	05d2      	lsls	r2, r2, #23
 8004882:	0dd2      	lsrs	r2, r2, #23
 8004884:	b292      	uxth	r2, r2
 8004886:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	3302      	adds	r3, #2
 800488c:	61bb      	str	r3, [r7, #24]
 800488e:	e008      	b.n	80048a2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	781a      	ldrb	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	b292      	uxth	r2, r2
 800489a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	3301      	adds	r3, #1
 80048a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2252      	movs	r2, #82	; 0x52
 80048a6:	5a9b      	ldrh	r3, [r3, r2]
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	3b01      	subs	r3, #1
 80048ac:	b299      	uxth	r1, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2252      	movs	r2, #82	; 0x52
 80048b2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2252      	movs	r2, #82	; 0x52
 80048b8:	5a9b      	ldrh	r3, [r3, r2]
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1cb      	bne.n	8004858 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	0013      	movs	r3, r2
 80048ca:	2200      	movs	r2, #0
 80048cc:	2140      	movs	r1, #64	; 0x40
 80048ce:	f000 fb29 	bl	8004f24 <UART_WaitOnFlagUntilTimeout>
 80048d2:	1e03      	subs	r3, r0, #0
 80048d4:	d001      	beq.n	80048da <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e005      	b.n	80048e6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2220      	movs	r2, #32
 80048de:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	e000      	b.n	80048e6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80048e4:	2302      	movs	r3, #2
  }
}
 80048e6:	0018      	movs	r0, r3
 80048e8:	46bd      	mov	sp, r7
 80048ea:	b008      	add	sp, #32
 80048ec:	bd80      	pop	{r7, pc}

080048ee <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b084      	sub	sp, #16
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	60f8      	str	r0, [r7, #12]
 80048f6:	60b9      	str	r1, [r7, #8]
 80048f8:	1dbb      	adds	r3, r7, #6
 80048fa:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004900:	2b20      	cmp	r3, #32
 8004902:	d13f      	bne.n	8004984 <HAL_UART_Receive_DMA+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <HAL_UART_Receive_DMA+0x24>
 800490a:	1dbb      	adds	r3, r7, #6
 800490c:	881b      	ldrh	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e037      	b.n	8004986 <HAL_UART_Receive_DMA+0x98>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	2380      	movs	r3, #128	; 0x80
 800491c:	015b      	lsls	r3, r3, #5
 800491e:	429a      	cmp	r2, r3
 8004920:	d109      	bne.n	8004936 <HAL_UART_Receive_DMA+0x48>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d105      	bne.n	8004936 <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2201      	movs	r2, #1
 800492e:	4013      	ands	r3, r2
 8004930:	d001      	beq.n	8004936 <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e027      	b.n	8004986 <HAL_UART_Receive_DMA+0x98>
      }
    }

    __HAL_LOCK(huart);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2274      	movs	r2, #116	; 0x74
 800493a:	5c9b      	ldrb	r3, [r3, r2]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d101      	bne.n	8004944 <HAL_UART_Receive_DMA+0x56>
 8004940:	2302      	movs	r3, #2
 8004942:	e020      	b.n	8004986 <HAL_UART_Receive_DMA+0x98>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2274      	movs	r2, #116	; 0x74
 8004948:	2101      	movs	r1, #1
 800494a:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	2380      	movs	r3, #128	; 0x80
 800495a:	041b      	lsls	r3, r3, #16
 800495c:	4013      	ands	r3, r2
 800495e:	d008      	beq.n	8004972 <HAL_UART_Receive_DMA+0x84>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2180      	movs	r1, #128	; 0x80
 800496c:	04c9      	lsls	r1, r1, #19
 800496e:	430a      	orrs	r2, r1
 8004970:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004972:	1dbb      	adds	r3, r7, #6
 8004974:	881a      	ldrh	r2, [r3, #0]
 8004976:	68b9      	ldr	r1, [r7, #8]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	0018      	movs	r0, r3
 800497c:	f000 fb50 	bl	8005020 <UART_Start_Receive_DMA>
 8004980:	0003      	movs	r3, r0
 8004982:	e000      	b.n	8004986 <HAL_UART_Receive_DMA+0x98>
  }
  else
  {
    return HAL_BUSY;
 8004984:	2302      	movs	r3, #2
  }
}
 8004986:	0018      	movs	r0, r3
 8004988:	46bd      	mov	sp, r7
 800498a:	b004      	add	sp, #16
 800498c:	bd80      	pop	{r7, pc}
	...

08004990 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	492f      	ldr	r1, [pc, #188]	; (8004a60 <HAL_UART_AbortReceive+0xd0>)
 80049a4:	400a      	ands	r2, r1
 80049a6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689a      	ldr	r2, [r3, #8]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2101      	movs	r1, #1
 80049b4:	438a      	bics	r2, r1
 80049b6:	609a      	str	r2, [r3, #8]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d107      	bne.n	80049d0 <HAL_UART_AbortReceive+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2110      	movs	r1, #16
 80049cc:	438a      	bics	r2, r1
 80049ce:	601a      	str	r2, [r3, #0]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	2240      	movs	r2, #64	; 0x40
 80049d8:	4013      	ands	r3, r2
 80049da:	2b40      	cmp	r3, #64	; 0x40
 80049dc:	d124      	bne.n	8004a28 <HAL_UART_AbortReceive+0x98>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2140      	movs	r1, #64	; 0x40
 80049ea:	438a      	bics	r2, r1
 80049ec:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d018      	beq.n	8004a28 <HAL_UART_AbortReceive+0x98>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fa:	2200      	movs	r2, #0
 80049fc:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a02:	0018      	movs	r0, r3
 8004a04:	f7fe f8af 	bl	8002b66 <HAL_DMA_Abort>
 8004a08:	1e03      	subs	r3, r0, #0
 8004a0a:	d00d      	beq.n	8004a28 <HAL_UART_AbortReceive+0x98>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a10:	0018      	movs	r0, r3
 8004a12:	f7fe f982 	bl	8002d1a <HAL_DMA_GetError>
 8004a16:	0003      	movs	r3, r0
 8004a18:	2b20      	cmp	r3, #32
 8004a1a:	d105      	bne.n	8004a28 <HAL_UART_AbortReceive+0x98>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2280      	movs	r2, #128	; 0x80
 8004a20:	2110      	movs	r1, #16
 8004a22:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e016      	b.n	8004a56 <HAL_UART_AbortReceive+0xc6>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	225a      	movs	r2, #90	; 0x5a
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	220f      	movs	r2, #15
 8004a36:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699a      	ldr	r2, [r3, #24]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2108      	movs	r1, #8
 8004a44:	430a      	orrs	r2, r1
 8004a46:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	0018      	movs	r0, r3
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	b002      	add	sp, #8
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	46c0      	nop			; (mov r8, r8)
 8004a60:	fffffedf 	.word	0xfffffedf

08004a64 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004a6c:	46c0      	nop			; (mov r8, r8)
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	b002      	add	sp, #8
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004a7c:	46c0      	nop			; (mov r8, r8)
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	b002      	add	sp, #8
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a8c:	46c0      	nop			; (mov r8, r8)
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	b002      	add	sp, #8
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	000a      	movs	r2, r1
 8004a9e:	1cbb      	adds	r3, r7, #2
 8004aa0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004aa2:	46c0      	nop			; (mov r8, r8)
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	b002      	add	sp, #8
 8004aa8:	bd80      	pop	{r7, pc}
	...

08004aac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ab4:	231e      	movs	r3, #30
 8004ab6:	18fb      	adds	r3, r7, r3
 8004ab8:	2200      	movs	r2, #0
 8004aba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689a      	ldr	r2, [r3, #8]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	431a      	orrs	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a8d      	ldr	r2, [pc, #564]	; (8004d10 <UART_SetConfig+0x264>)
 8004adc:	4013      	ands	r3, r2
 8004ade:	0019      	movs	r1, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	4a88      	ldr	r2, [pc, #544]	; (8004d14 <UART_SetConfig+0x268>)
 8004af2:	4013      	ands	r3, r2
 8004af4:	0019      	movs	r1, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	4a7f      	ldr	r2, [pc, #508]	; (8004d18 <UART_SetConfig+0x26c>)
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	0019      	movs	r1, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a7b      	ldr	r2, [pc, #492]	; (8004d1c <UART_SetConfig+0x270>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d127      	bne.n	8004b82 <UART_SetConfig+0xd6>
 8004b32:	4b7b      	ldr	r3, [pc, #492]	; (8004d20 <UART_SetConfig+0x274>)
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	2203      	movs	r2, #3
 8004b38:	4013      	ands	r3, r2
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	d00d      	beq.n	8004b5a <UART_SetConfig+0xae>
 8004b3e:	d81b      	bhi.n	8004b78 <UART_SetConfig+0xcc>
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d014      	beq.n	8004b6e <UART_SetConfig+0xc2>
 8004b44:	d818      	bhi.n	8004b78 <UART_SetConfig+0xcc>
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <UART_SetConfig+0xa4>
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d00a      	beq.n	8004b64 <UART_SetConfig+0xb8>
 8004b4e:	e013      	b.n	8004b78 <UART_SetConfig+0xcc>
 8004b50:	231f      	movs	r3, #31
 8004b52:	18fb      	adds	r3, r7, r3
 8004b54:	2200      	movs	r2, #0
 8004b56:	701a      	strb	r2, [r3, #0]
 8004b58:	e021      	b.n	8004b9e <UART_SetConfig+0xf2>
 8004b5a:	231f      	movs	r3, #31
 8004b5c:	18fb      	adds	r3, r7, r3
 8004b5e:	2202      	movs	r2, #2
 8004b60:	701a      	strb	r2, [r3, #0]
 8004b62:	e01c      	b.n	8004b9e <UART_SetConfig+0xf2>
 8004b64:	231f      	movs	r3, #31
 8004b66:	18fb      	adds	r3, r7, r3
 8004b68:	2204      	movs	r2, #4
 8004b6a:	701a      	strb	r2, [r3, #0]
 8004b6c:	e017      	b.n	8004b9e <UART_SetConfig+0xf2>
 8004b6e:	231f      	movs	r3, #31
 8004b70:	18fb      	adds	r3, r7, r3
 8004b72:	2208      	movs	r2, #8
 8004b74:	701a      	strb	r2, [r3, #0]
 8004b76:	e012      	b.n	8004b9e <UART_SetConfig+0xf2>
 8004b78:	231f      	movs	r3, #31
 8004b7a:	18fb      	adds	r3, r7, r3
 8004b7c:	2210      	movs	r2, #16
 8004b7e:	701a      	strb	r2, [r3, #0]
 8004b80:	e00d      	b.n	8004b9e <UART_SetConfig+0xf2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a67      	ldr	r2, [pc, #412]	; (8004d24 <UART_SetConfig+0x278>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d104      	bne.n	8004b96 <UART_SetConfig+0xea>
 8004b8c:	231f      	movs	r3, #31
 8004b8e:	18fb      	adds	r3, r7, r3
 8004b90:	2200      	movs	r2, #0
 8004b92:	701a      	strb	r2, [r3, #0]
 8004b94:	e003      	b.n	8004b9e <UART_SetConfig+0xf2>
 8004b96:	231f      	movs	r3, #31
 8004b98:	18fb      	adds	r3, r7, r3
 8004b9a:	2210      	movs	r2, #16
 8004b9c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	69da      	ldr	r2, [r3, #28]
 8004ba2:	2380      	movs	r3, #128	; 0x80
 8004ba4:	021b      	lsls	r3, r3, #8
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d15d      	bne.n	8004c66 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8004baa:	231f      	movs	r3, #31
 8004bac:	18fb      	adds	r3, r7, r3
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d015      	beq.n	8004be0 <UART_SetConfig+0x134>
 8004bb4:	dc18      	bgt.n	8004be8 <UART_SetConfig+0x13c>
 8004bb6:	2b04      	cmp	r3, #4
 8004bb8:	d00d      	beq.n	8004bd6 <UART_SetConfig+0x12a>
 8004bba:	dc15      	bgt.n	8004be8 <UART_SetConfig+0x13c>
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <UART_SetConfig+0x11a>
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d005      	beq.n	8004bd0 <UART_SetConfig+0x124>
 8004bc4:	e010      	b.n	8004be8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bc6:	f7ff fc77 	bl	80044b8 <HAL_RCC_GetPCLK1Freq>
 8004bca:	0003      	movs	r3, r0
 8004bcc:	61bb      	str	r3, [r7, #24]
        break;
 8004bce:	e012      	b.n	8004bf6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bd0:	4b55      	ldr	r3, [pc, #340]	; (8004d28 <UART_SetConfig+0x27c>)
 8004bd2:	61bb      	str	r3, [r7, #24]
        break;
 8004bd4:	e00f      	b.n	8004bf6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bd6:	f7ff fc01 	bl	80043dc <HAL_RCC_GetSysClockFreq>
 8004bda:	0003      	movs	r3, r0
 8004bdc:	61bb      	str	r3, [r7, #24]
        break;
 8004bde:	e00a      	b.n	8004bf6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004be0:	2380      	movs	r3, #128	; 0x80
 8004be2:	021b      	lsls	r3, r3, #8
 8004be4:	61bb      	str	r3, [r7, #24]
        break;
 8004be6:	e006      	b.n	8004bf6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bec:	231e      	movs	r3, #30
 8004bee:	18fb      	adds	r3, r7, r3
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	701a      	strb	r2, [r3, #0]
        break;
 8004bf4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d100      	bne.n	8004bfe <UART_SetConfig+0x152>
 8004bfc:	e07b      	b.n	8004cf6 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	005a      	lsls	r2, r3, #1
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	085b      	lsrs	r3, r3, #1
 8004c08:	18d2      	adds	r2, r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	0019      	movs	r1, r3
 8004c10:	0010      	movs	r0, r2
 8004c12:	f7fb fa8b 	bl	800012c <__udivsi3>
 8004c16:	0003      	movs	r3, r0
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	2b0f      	cmp	r3, #15
 8004c20:	d91c      	bls.n	8004c5c <UART_SetConfig+0x1b0>
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	2380      	movs	r3, #128	; 0x80
 8004c26:	025b      	lsls	r3, r3, #9
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d217      	bcs.n	8004c5c <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	200e      	movs	r0, #14
 8004c32:	183b      	adds	r3, r7, r0
 8004c34:	210f      	movs	r1, #15
 8004c36:	438a      	bics	r2, r1
 8004c38:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	085b      	lsrs	r3, r3, #1
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	2207      	movs	r2, #7
 8004c42:	4013      	ands	r3, r2
 8004c44:	b299      	uxth	r1, r3
 8004c46:	183b      	adds	r3, r7, r0
 8004c48:	183a      	adds	r2, r7, r0
 8004c4a:	8812      	ldrh	r2, [r2, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	183a      	adds	r2, r7, r0
 8004c56:	8812      	ldrh	r2, [r2, #0]
 8004c58:	60da      	str	r2, [r3, #12]
 8004c5a:	e04c      	b.n	8004cf6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004c5c:	231e      	movs	r3, #30
 8004c5e:	18fb      	adds	r3, r7, r3
 8004c60:	2201      	movs	r2, #1
 8004c62:	701a      	strb	r2, [r3, #0]
 8004c64:	e047      	b.n	8004cf6 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c66:	231f      	movs	r3, #31
 8004c68:	18fb      	adds	r3, r7, r3
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d015      	beq.n	8004c9c <UART_SetConfig+0x1f0>
 8004c70:	dc18      	bgt.n	8004ca4 <UART_SetConfig+0x1f8>
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	d00d      	beq.n	8004c92 <UART_SetConfig+0x1e6>
 8004c76:	dc15      	bgt.n	8004ca4 <UART_SetConfig+0x1f8>
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d002      	beq.n	8004c82 <UART_SetConfig+0x1d6>
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d005      	beq.n	8004c8c <UART_SetConfig+0x1e0>
 8004c80:	e010      	b.n	8004ca4 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c82:	f7ff fc19 	bl	80044b8 <HAL_RCC_GetPCLK1Freq>
 8004c86:	0003      	movs	r3, r0
 8004c88:	61bb      	str	r3, [r7, #24]
        break;
 8004c8a:	e012      	b.n	8004cb2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c8c:	4b26      	ldr	r3, [pc, #152]	; (8004d28 <UART_SetConfig+0x27c>)
 8004c8e:	61bb      	str	r3, [r7, #24]
        break;
 8004c90:	e00f      	b.n	8004cb2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c92:	f7ff fba3 	bl	80043dc <HAL_RCC_GetSysClockFreq>
 8004c96:	0003      	movs	r3, r0
 8004c98:	61bb      	str	r3, [r7, #24]
        break;
 8004c9a:	e00a      	b.n	8004cb2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c9c:	2380      	movs	r3, #128	; 0x80
 8004c9e:	021b      	lsls	r3, r3, #8
 8004ca0:	61bb      	str	r3, [r7, #24]
        break;
 8004ca2:	e006      	b.n	8004cb2 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ca8:	231e      	movs	r3, #30
 8004caa:	18fb      	adds	r3, r7, r3
 8004cac:	2201      	movs	r2, #1
 8004cae:	701a      	strb	r2, [r3, #0]
        break;
 8004cb0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d01e      	beq.n	8004cf6 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	085a      	lsrs	r2, r3, #1
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	18d2      	adds	r2, r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	0019      	movs	r1, r3
 8004cc8:	0010      	movs	r0, r2
 8004cca:	f7fb fa2f 	bl	800012c <__udivsi3>
 8004cce:	0003      	movs	r3, r0
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	2b0f      	cmp	r3, #15
 8004cd8:	d909      	bls.n	8004cee <UART_SetConfig+0x242>
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	2380      	movs	r3, #128	; 0x80
 8004cde:	025b      	lsls	r3, r3, #9
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d204      	bcs.n	8004cee <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	60da      	str	r2, [r3, #12]
 8004cec:	e003      	b.n	8004cf6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004cee:	231e      	movs	r3, #30
 8004cf0:	18fb      	adds	r3, r7, r3
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004d02:	231e      	movs	r3, #30
 8004d04:	18fb      	adds	r3, r7, r3
 8004d06:	781b      	ldrb	r3, [r3, #0]
}
 8004d08:	0018      	movs	r0, r3
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	b008      	add	sp, #32
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	ffff69f3 	.word	0xffff69f3
 8004d14:	ffffcfff 	.word	0xffffcfff
 8004d18:	fffff4ff 	.word	0xfffff4ff
 8004d1c:	40013800 	.word	0x40013800
 8004d20:	40021000 	.word	0x40021000
 8004d24:	40004400 	.word	0x40004400
 8004d28:	007a1200 	.word	0x007a1200

08004d2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	2201      	movs	r2, #1
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	d00b      	beq.n	8004d56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	4a4a      	ldr	r2, [pc, #296]	; (8004e70 <UART_AdvFeatureConfig+0x144>)
 8004d46:	4013      	ands	r3, r2
 8004d48:	0019      	movs	r1, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	d00b      	beq.n	8004d78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	4a43      	ldr	r2, [pc, #268]	; (8004e74 <UART_AdvFeatureConfig+0x148>)
 8004d68:	4013      	ands	r3, r2
 8004d6a:	0019      	movs	r1, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	2204      	movs	r2, #4
 8004d7e:	4013      	ands	r3, r2
 8004d80:	d00b      	beq.n	8004d9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	4a3b      	ldr	r2, [pc, #236]	; (8004e78 <UART_AdvFeatureConfig+0x14c>)
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	0019      	movs	r1, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	2208      	movs	r2, #8
 8004da0:	4013      	ands	r3, r2
 8004da2:	d00b      	beq.n	8004dbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	4a34      	ldr	r2, [pc, #208]	; (8004e7c <UART_AdvFeatureConfig+0x150>)
 8004dac:	4013      	ands	r3, r2
 8004dae:	0019      	movs	r1, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	2210      	movs	r2, #16
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	d00b      	beq.n	8004dde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	4a2c      	ldr	r2, [pc, #176]	; (8004e80 <UART_AdvFeatureConfig+0x154>)
 8004dce:	4013      	ands	r3, r2
 8004dd0:	0019      	movs	r1, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	2220      	movs	r2, #32
 8004de4:	4013      	ands	r3, r2
 8004de6:	d00b      	beq.n	8004e00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	4a25      	ldr	r2, [pc, #148]	; (8004e84 <UART_AdvFeatureConfig+0x158>)
 8004df0:	4013      	ands	r3, r2
 8004df2:	0019      	movs	r1, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	2240      	movs	r2, #64	; 0x40
 8004e06:	4013      	ands	r3, r2
 8004e08:	d01d      	beq.n	8004e46 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	4a1d      	ldr	r2, [pc, #116]	; (8004e88 <UART_AdvFeatureConfig+0x15c>)
 8004e12:	4013      	ands	r3, r2
 8004e14:	0019      	movs	r1, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e26:	2380      	movs	r3, #128	; 0x80
 8004e28:	035b      	lsls	r3, r3, #13
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d10b      	bne.n	8004e46 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	4a15      	ldr	r2, [pc, #84]	; (8004e8c <UART_AdvFeatureConfig+0x160>)
 8004e36:	4013      	ands	r3, r2
 8004e38:	0019      	movs	r1, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	2280      	movs	r2, #128	; 0x80
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	d00b      	beq.n	8004e68 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	4a0e      	ldr	r2, [pc, #56]	; (8004e90 <UART_AdvFeatureConfig+0x164>)
 8004e58:	4013      	ands	r3, r2
 8004e5a:	0019      	movs	r1, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	605a      	str	r2, [r3, #4]
  }
}
 8004e68:	46c0      	nop			; (mov r8, r8)
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	b002      	add	sp, #8
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	fffdffff 	.word	0xfffdffff
 8004e74:	fffeffff 	.word	0xfffeffff
 8004e78:	fffbffff 	.word	0xfffbffff
 8004e7c:	ffff7fff 	.word	0xffff7fff
 8004e80:	ffffefff 	.word	0xffffefff
 8004e84:	ffffdfff 	.word	0xffffdfff
 8004e88:	ffefffff 	.word	0xffefffff
 8004e8c:	ff9fffff 	.word	0xff9fffff
 8004e90:	fff7ffff 	.word	0xfff7ffff

08004e94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af02      	add	r7, sp, #8
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2280      	movs	r2, #128	; 0x80
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ea4:	f7fd fc5c 	bl	8002760 <HAL_GetTick>
 8004ea8:	0003      	movs	r3, r0
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2208      	movs	r2, #8
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	2b08      	cmp	r3, #8
 8004eb8:	d10c      	bne.n	8004ed4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2280      	movs	r2, #128	; 0x80
 8004ebe:	0391      	lsls	r1, r2, #14
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	4a17      	ldr	r2, [pc, #92]	; (8004f20 <UART_CheckIdleState+0x8c>)
 8004ec4:	9200      	str	r2, [sp, #0]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f000 f82c 	bl	8004f24 <UART_WaitOnFlagUntilTimeout>
 8004ecc:	1e03      	subs	r3, r0, #0
 8004ece:	d001      	beq.n	8004ed4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e021      	b.n	8004f18 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2204      	movs	r2, #4
 8004edc:	4013      	ands	r3, r2
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d10c      	bne.n	8004efc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2280      	movs	r2, #128	; 0x80
 8004ee6:	03d1      	lsls	r1, r2, #15
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	4a0d      	ldr	r2, [pc, #52]	; (8004f20 <UART_CheckIdleState+0x8c>)
 8004eec:	9200      	str	r2, [sp, #0]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f000 f818 	bl	8004f24 <UART_WaitOnFlagUntilTimeout>
 8004ef4:	1e03      	subs	r3, r0, #0
 8004ef6:	d001      	beq.n	8004efc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e00d      	b.n	8004f18 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2220      	movs	r2, #32
 8004f00:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2220      	movs	r2, #32
 8004f06:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2274      	movs	r2, #116	; 0x74
 8004f12:	2100      	movs	r1, #0
 8004f14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	0018      	movs	r0, r3
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	b004      	add	sp, #16
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	01ffffff 	.word	0x01ffffff

08004f24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	603b      	str	r3, [r7, #0]
 8004f30:	1dfb      	adds	r3, r7, #7
 8004f32:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f34:	e05e      	b.n	8004ff4 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	d05b      	beq.n	8004ff4 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f3c:	f7fd fc10 	bl	8002760 <HAL_GetTick>
 8004f40:	0002      	movs	r2, r0
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d302      	bcc.n	8004f52 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d11b      	bne.n	8004f8a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	492f      	ldr	r1, [pc, #188]	; (800501c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004f5e:	400a      	ands	r2, r1
 8004f60:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	438a      	bics	r2, r1
 8004f70:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2220      	movs	r2, #32
 8004f76:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2274      	movs	r2, #116	; 0x74
 8004f82:	2100      	movs	r1, #0
 8004f84:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e044      	b.n	8005014 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2204      	movs	r2, #4
 8004f92:	4013      	ands	r3, r2
 8004f94:	d02e      	beq.n	8004ff4 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	69da      	ldr	r2, [r3, #28]
 8004f9c:	2380      	movs	r3, #128	; 0x80
 8004f9e:	011b      	lsls	r3, r3, #4
 8004fa0:	401a      	ands	r2, r3
 8004fa2:	2380      	movs	r3, #128	; 0x80
 8004fa4:	011b      	lsls	r3, r3, #4
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d124      	bne.n	8004ff4 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2280      	movs	r2, #128	; 0x80
 8004fb0:	0112      	lsls	r2, r2, #4
 8004fb2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4917      	ldr	r1, [pc, #92]	; (800501c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004fc0:	400a      	ands	r2, r1
 8004fc2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689a      	ldr	r2, [r3, #8]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2101      	movs	r1, #1
 8004fd0:	438a      	bics	r2, r1
 8004fd2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2280      	movs	r2, #128	; 0x80
 8004fe4:	2120      	movs	r1, #32
 8004fe6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2274      	movs	r2, #116	; 0x74
 8004fec:	2100      	movs	r1, #0
 8004fee:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e00f      	b.n	8005014 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	425a      	negs	r2, r3
 8005004:	4153      	adcs	r3, r2
 8005006:	b2db      	uxtb	r3, r3
 8005008:	001a      	movs	r2, r3
 800500a:	1dfb      	adds	r3, r7, #7
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	429a      	cmp	r2, r3
 8005010:	d091      	beq.n	8004f36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	0018      	movs	r0, r3
 8005016:	46bd      	mov	sp, r7
 8005018:	b004      	add	sp, #16
 800501a:	bd80      	pop	{r7, pc}
 800501c:	fffffe5f 	.word	0xfffffe5f

08005020 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	1dbb      	adds	r3, r7, #6
 800502c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	1dba      	adds	r2, r7, #6
 8005038:	2158      	movs	r1, #88	; 0x58
 800503a:	8812      	ldrh	r2, [r2, #0]
 800503c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2280      	movs	r2, #128	; 0x80
 8005042:	2100      	movs	r1, #0
 8005044:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2222      	movs	r2, #34	; 0x22
 800504a:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005050:	2b00      	cmp	r3, #0
 8005052:	d02b      	beq.n	80050ac <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005058:	4a25      	ldr	r2, [pc, #148]	; (80050f0 <UART_Start_Receive_DMA+0xd0>)
 800505a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005060:	4a24      	ldr	r2, [pc, #144]	; (80050f4 <UART_Start_Receive_DMA+0xd4>)
 8005062:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005068:	4a23      	ldr	r2, [pc, #140]	; (80050f8 <UART_Start_Receive_DMA+0xd8>)
 800506a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005070:	2200      	movs	r2, #0
 8005072:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3324      	adds	r3, #36	; 0x24
 800507e:	0019      	movs	r1, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005084:	001a      	movs	r2, r3
 8005086:	1dbb      	adds	r3, r7, #6
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	f7fd fd06 	bl	8002a9a <HAL_DMA_Start_IT>
 800508e:	1e03      	subs	r3, r0, #0
 8005090:	d00c      	beq.n	80050ac <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2280      	movs	r2, #128	; 0x80
 8005096:	2110      	movs	r1, #16
 8005098:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2274      	movs	r2, #116	; 0x74
 800509e:	2100      	movs	r1, #0
 80050a0:	5499      	strb	r1, [r3, r2]

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2220      	movs	r2, #32
 80050a6:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e01d      	b.n	80050e8 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2274      	movs	r2, #116	; 0x74
 80050b0:	2100      	movs	r1, #0
 80050b2:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2180      	movs	r1, #128	; 0x80
 80050c0:	0049      	lsls	r1, r1, #1
 80050c2:	430a      	orrs	r2, r1
 80050c4:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2101      	movs	r1, #1
 80050d2:	430a      	orrs	r2, r1
 80050d4:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2140      	movs	r1, #64	; 0x40
 80050e2:	430a      	orrs	r2, r1
 80050e4:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	0018      	movs	r0, r3
 80050ea:	46bd      	mov	sp, r7
 80050ec:	b004      	add	sp, #16
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	08005185 	.word	0x08005185
 80050f4:	08005221 	.word	0x08005221
 80050f8:	0800525d 	.word	0x0800525d

080050fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	21c0      	movs	r1, #192	; 0xc0
 8005110:	438a      	bics	r2, r1
 8005112:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2220      	movs	r2, #32
 8005118:	679a      	str	r2, [r3, #120]	; 0x78
}
 800511a:	46c0      	nop			; (mov r8, r8)
 800511c:	46bd      	mov	sp, r7
 800511e:	b002      	add	sp, #8
 8005120:	bd80      	pop	{r7, pc}
	...

08005124 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4912      	ldr	r1, [pc, #72]	; (8005180 <UART_EndRxTransfer+0x5c>)
 8005138:	400a      	ands	r2, r1
 800513a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2101      	movs	r1, #1
 8005148:	438a      	bics	r2, r1
 800514a:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005150:	2b01      	cmp	r3, #1
 8005152:	d107      	bne.n	8005164 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2110      	movs	r1, #16
 8005160:	438a      	bics	r2, r1
 8005162:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2220      	movs	r2, #32
 8005168:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005176:	46c0      	nop			; (mov r8, r8)
 8005178:	46bd      	mov	sp, r7
 800517a:	b002      	add	sp, #8
 800517c:	bd80      	pop	{r7, pc}
 800517e:	46c0      	nop			; (mov r8, r8)
 8005180:	fffffedf 	.word	0xfffffedf

08005184 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	2b20      	cmp	r3, #32
 8005198:	d02a      	beq.n	80051f0 <UART_DMAReceiveCplt+0x6c>
  {
    huart->RxXferCount = 0U;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	225a      	movs	r2, #90	; 0x5a
 800519e:	2100      	movs	r1, #0
 80051a0:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	491b      	ldr	r1, [pc, #108]	; (800521c <UART_DMAReceiveCplt+0x98>)
 80051ae:	400a      	ands	r2, r1
 80051b0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	689a      	ldr	r2, [r3, #8]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2101      	movs	r1, #1
 80051be:	438a      	bics	r2, r1
 80051c0:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	689a      	ldr	r2, [r3, #8]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2140      	movs	r1, #64	; 0x40
 80051ce:	438a      	bics	r2, r1
 80051d0:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2220      	movs	r2, #32
 80051d6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d107      	bne.n	80051f0 <UART_DMAReceiveCplt+0x6c>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2110      	movs	r1, #16
 80051ec:	438a      	bics	r2, r1
 80051ee:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d108      	bne.n	800520a <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2258      	movs	r2, #88	; 0x58
 80051fc:	5a9a      	ldrh	r2, [r3, r2]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	0011      	movs	r1, r2
 8005202:	0018      	movs	r0, r3
 8005204:	f7ff fc46 	bl	8004a94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005208:	e003      	b.n	8005212 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	0018      	movs	r0, r3
 800520e:	f7ff fc29 	bl	8004a64 <HAL_UART_RxCpltCallback>
}
 8005212:	46c0      	nop			; (mov r8, r8)
 8005214:	46bd      	mov	sp, r7
 8005216:	b004      	add	sp, #16
 8005218:	bd80      	pop	{r7, pc}
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	fffffeff 	.word	0xfffffeff

08005220 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005232:	2b01      	cmp	r3, #1
 8005234:	d10a      	bne.n	800524c <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2258      	movs	r2, #88	; 0x58
 800523a:	5a9b      	ldrh	r3, [r3, r2]
 800523c:	085b      	lsrs	r3, r3, #1
 800523e:	b29a      	uxth	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	0011      	movs	r1, r2
 8005244:	0018      	movs	r0, r3
 8005246:	f7ff fc25 	bl	8004a94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800524a:	e003      	b.n	8005254 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	0018      	movs	r0, r3
 8005250:	f7ff fc10 	bl	8004a74 <HAL_UART_RxHalfCpltCallback>
}
 8005254:	46c0      	nop			; (mov r8, r8)
 8005256:	46bd      	mov	sp, r7
 8005258:	b004      	add	sp, #16
 800525a:	bd80      	pop	{r7, pc}

0800525c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005268:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800526e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005274:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	2280      	movs	r2, #128	; 0x80
 800527e:	4013      	ands	r3, r2
 8005280:	2b80      	cmp	r3, #128	; 0x80
 8005282:	d10a      	bne.n	800529a <UART_DMAError+0x3e>
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	2b21      	cmp	r3, #33	; 0x21
 8005288:	d107      	bne.n	800529a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2252      	movs	r2, #82	; 0x52
 800528e:	2100      	movs	r1, #0
 8005290:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	0018      	movs	r0, r3
 8005296:	f7ff ff31 	bl	80050fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	2240      	movs	r2, #64	; 0x40
 80052a2:	4013      	ands	r3, r2
 80052a4:	2b40      	cmp	r3, #64	; 0x40
 80052a6:	d10a      	bne.n	80052be <UART_DMAError+0x62>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2b22      	cmp	r3, #34	; 0x22
 80052ac:	d107      	bne.n	80052be <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	225a      	movs	r2, #90	; 0x5a
 80052b2:	2100      	movs	r1, #0
 80052b4:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	0018      	movs	r0, r3
 80052ba:	f7ff ff33 	bl	8005124 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	2280      	movs	r2, #128	; 0x80
 80052c2:	589b      	ldr	r3, [r3, r2]
 80052c4:	2210      	movs	r2, #16
 80052c6:	431a      	orrs	r2, r3
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	2180      	movs	r1, #128	; 0x80
 80052cc:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	0018      	movs	r0, r3
 80052d2:	f7ff fbd7 	bl	8004a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052d6:	46c0      	nop			; (mov r8, r8)
 80052d8:	46bd      	mov	sp, r7
 80052da:	b006      	add	sp, #24
 80052dc:	bd80      	pop	{r7, pc}
	...

080052e0 <__errno>:
 80052e0:	4b01      	ldr	r3, [pc, #4]	; (80052e8 <__errno+0x8>)
 80052e2:	6818      	ldr	r0, [r3, #0]
 80052e4:	4770      	bx	lr
 80052e6:	46c0      	nop			; (mov r8, r8)
 80052e8:	20000028 	.word	0x20000028

080052ec <__libc_init_array>:
 80052ec:	b570      	push	{r4, r5, r6, lr}
 80052ee:	2600      	movs	r6, #0
 80052f0:	4d0c      	ldr	r5, [pc, #48]	; (8005324 <__libc_init_array+0x38>)
 80052f2:	4c0d      	ldr	r4, [pc, #52]	; (8005328 <__libc_init_array+0x3c>)
 80052f4:	1b64      	subs	r4, r4, r5
 80052f6:	10a4      	asrs	r4, r4, #2
 80052f8:	42a6      	cmp	r6, r4
 80052fa:	d109      	bne.n	8005310 <__libc_init_array+0x24>
 80052fc:	2600      	movs	r6, #0
 80052fe:	f001 fb6d 	bl	80069dc <_init>
 8005302:	4d0a      	ldr	r5, [pc, #40]	; (800532c <__libc_init_array+0x40>)
 8005304:	4c0a      	ldr	r4, [pc, #40]	; (8005330 <__libc_init_array+0x44>)
 8005306:	1b64      	subs	r4, r4, r5
 8005308:	10a4      	asrs	r4, r4, #2
 800530a:	42a6      	cmp	r6, r4
 800530c:	d105      	bne.n	800531a <__libc_init_array+0x2e>
 800530e:	bd70      	pop	{r4, r5, r6, pc}
 8005310:	00b3      	lsls	r3, r6, #2
 8005312:	58eb      	ldr	r3, [r5, r3]
 8005314:	4798      	blx	r3
 8005316:	3601      	adds	r6, #1
 8005318:	e7ee      	b.n	80052f8 <__libc_init_array+0xc>
 800531a:	00b3      	lsls	r3, r6, #2
 800531c:	58eb      	ldr	r3, [r5, r3]
 800531e:	4798      	blx	r3
 8005320:	3601      	adds	r6, #1
 8005322:	e7f2      	b.n	800530a <__libc_init_array+0x1e>
 8005324:	080099a0 	.word	0x080099a0
 8005328:	080099a0 	.word	0x080099a0
 800532c:	080099a0 	.word	0x080099a0
 8005330:	080099a4 	.word	0x080099a4

08005334 <memset>:
 8005334:	0003      	movs	r3, r0
 8005336:	1882      	adds	r2, r0, r2
 8005338:	4293      	cmp	r3, r2
 800533a:	d100      	bne.n	800533e <memset+0xa>
 800533c:	4770      	bx	lr
 800533e:	7019      	strb	r1, [r3, #0]
 8005340:	3301      	adds	r3, #1
 8005342:	e7f9      	b.n	8005338 <memset+0x4>

08005344 <iprintf>:
 8005344:	b40f      	push	{r0, r1, r2, r3}
 8005346:	4b0b      	ldr	r3, [pc, #44]	; (8005374 <iprintf+0x30>)
 8005348:	b513      	push	{r0, r1, r4, lr}
 800534a:	681c      	ldr	r4, [r3, #0]
 800534c:	2c00      	cmp	r4, #0
 800534e:	d005      	beq.n	800535c <iprintf+0x18>
 8005350:	69a3      	ldr	r3, [r4, #24]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d102      	bne.n	800535c <iprintf+0x18>
 8005356:	0020      	movs	r0, r4
 8005358:	f000 fb56 	bl	8005a08 <__sinit>
 800535c:	ab05      	add	r3, sp, #20
 800535e:	0020      	movs	r0, r4
 8005360:	9a04      	ldr	r2, [sp, #16]
 8005362:	68a1      	ldr	r1, [r4, #8]
 8005364:	9301      	str	r3, [sp, #4]
 8005366:	f000 feab 	bl	80060c0 <_vfiprintf_r>
 800536a:	bc16      	pop	{r1, r2, r4}
 800536c:	bc08      	pop	{r3}
 800536e:	b004      	add	sp, #16
 8005370:	4718      	bx	r3
 8005372:	46c0      	nop			; (mov r8, r8)
 8005374:	20000028 	.word	0x20000028

08005378 <putchar>:
 8005378:	4b08      	ldr	r3, [pc, #32]	; (800539c <putchar+0x24>)
 800537a:	b570      	push	{r4, r5, r6, lr}
 800537c:	681c      	ldr	r4, [r3, #0]
 800537e:	0005      	movs	r5, r0
 8005380:	2c00      	cmp	r4, #0
 8005382:	d005      	beq.n	8005390 <putchar+0x18>
 8005384:	69a3      	ldr	r3, [r4, #24]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d102      	bne.n	8005390 <putchar+0x18>
 800538a:	0020      	movs	r0, r4
 800538c:	f000 fb3c 	bl	8005a08 <__sinit>
 8005390:	0029      	movs	r1, r5
 8005392:	0020      	movs	r0, r4
 8005394:	68a2      	ldr	r2, [r4, #8]
 8005396:	f001 f94f 	bl	8006638 <_putc_r>
 800539a:	bd70      	pop	{r4, r5, r6, pc}
 800539c:	20000028 	.word	0x20000028

080053a0 <_puts_r>:
 80053a0:	b570      	push	{r4, r5, r6, lr}
 80053a2:	0005      	movs	r5, r0
 80053a4:	000e      	movs	r6, r1
 80053a6:	2800      	cmp	r0, #0
 80053a8:	d004      	beq.n	80053b4 <_puts_r+0x14>
 80053aa:	6983      	ldr	r3, [r0, #24]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <_puts_r+0x14>
 80053b0:	f000 fb2a 	bl	8005a08 <__sinit>
 80053b4:	69ab      	ldr	r3, [r5, #24]
 80053b6:	68ac      	ldr	r4, [r5, #8]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d102      	bne.n	80053c2 <_puts_r+0x22>
 80053bc:	0028      	movs	r0, r5
 80053be:	f000 fb23 	bl	8005a08 <__sinit>
 80053c2:	4b2d      	ldr	r3, [pc, #180]	; (8005478 <_puts_r+0xd8>)
 80053c4:	429c      	cmp	r4, r3
 80053c6:	d122      	bne.n	800540e <_puts_r+0x6e>
 80053c8:	686c      	ldr	r4, [r5, #4]
 80053ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053cc:	07db      	lsls	r3, r3, #31
 80053ce:	d405      	bmi.n	80053dc <_puts_r+0x3c>
 80053d0:	89a3      	ldrh	r3, [r4, #12]
 80053d2:	059b      	lsls	r3, r3, #22
 80053d4:	d402      	bmi.n	80053dc <_puts_r+0x3c>
 80053d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053d8:	f000 fbc7 	bl	8005b6a <__retarget_lock_acquire_recursive>
 80053dc:	89a3      	ldrh	r3, [r4, #12]
 80053de:	071b      	lsls	r3, r3, #28
 80053e0:	d502      	bpl.n	80053e8 <_puts_r+0x48>
 80053e2:	6923      	ldr	r3, [r4, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d129      	bne.n	800543c <_puts_r+0x9c>
 80053e8:	0021      	movs	r1, r4
 80053ea:	0028      	movs	r0, r5
 80053ec:	f000 f948 	bl	8005680 <__swsetup_r>
 80053f0:	2800      	cmp	r0, #0
 80053f2:	d023      	beq.n	800543c <_puts_r+0x9c>
 80053f4:	2501      	movs	r5, #1
 80053f6:	426d      	negs	r5, r5
 80053f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053fa:	07db      	lsls	r3, r3, #31
 80053fc:	d405      	bmi.n	800540a <_puts_r+0x6a>
 80053fe:	89a3      	ldrh	r3, [r4, #12]
 8005400:	059b      	lsls	r3, r3, #22
 8005402:	d402      	bmi.n	800540a <_puts_r+0x6a>
 8005404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005406:	f000 fbb1 	bl	8005b6c <__retarget_lock_release_recursive>
 800540a:	0028      	movs	r0, r5
 800540c:	bd70      	pop	{r4, r5, r6, pc}
 800540e:	4b1b      	ldr	r3, [pc, #108]	; (800547c <_puts_r+0xdc>)
 8005410:	429c      	cmp	r4, r3
 8005412:	d101      	bne.n	8005418 <_puts_r+0x78>
 8005414:	68ac      	ldr	r4, [r5, #8]
 8005416:	e7d8      	b.n	80053ca <_puts_r+0x2a>
 8005418:	4b19      	ldr	r3, [pc, #100]	; (8005480 <_puts_r+0xe0>)
 800541a:	429c      	cmp	r4, r3
 800541c:	d1d5      	bne.n	80053ca <_puts_r+0x2a>
 800541e:	68ec      	ldr	r4, [r5, #12]
 8005420:	e7d3      	b.n	80053ca <_puts_r+0x2a>
 8005422:	3601      	adds	r6, #1
 8005424:	60a3      	str	r3, [r4, #8]
 8005426:	2b00      	cmp	r3, #0
 8005428:	da04      	bge.n	8005434 <_puts_r+0x94>
 800542a:	69a2      	ldr	r2, [r4, #24]
 800542c:	429a      	cmp	r2, r3
 800542e:	dc16      	bgt.n	800545e <_puts_r+0xbe>
 8005430:	290a      	cmp	r1, #10
 8005432:	d014      	beq.n	800545e <_puts_r+0xbe>
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	1c5a      	adds	r2, r3, #1
 8005438:	6022      	str	r2, [r4, #0]
 800543a:	7019      	strb	r1, [r3, #0]
 800543c:	68a3      	ldr	r3, [r4, #8]
 800543e:	7831      	ldrb	r1, [r6, #0]
 8005440:	3b01      	subs	r3, #1
 8005442:	2900      	cmp	r1, #0
 8005444:	d1ed      	bne.n	8005422 <_puts_r+0x82>
 8005446:	60a3      	str	r3, [r4, #8]
 8005448:	2b00      	cmp	r3, #0
 800544a:	da0f      	bge.n	800546c <_puts_r+0xcc>
 800544c:	0028      	movs	r0, r5
 800544e:	0022      	movs	r2, r4
 8005450:	310a      	adds	r1, #10
 8005452:	f000 f8bf 	bl	80055d4 <__swbuf_r>
 8005456:	250a      	movs	r5, #10
 8005458:	1c43      	adds	r3, r0, #1
 800545a:	d1cd      	bne.n	80053f8 <_puts_r+0x58>
 800545c:	e7ca      	b.n	80053f4 <_puts_r+0x54>
 800545e:	0022      	movs	r2, r4
 8005460:	0028      	movs	r0, r5
 8005462:	f000 f8b7 	bl	80055d4 <__swbuf_r>
 8005466:	1c43      	adds	r3, r0, #1
 8005468:	d1e8      	bne.n	800543c <_puts_r+0x9c>
 800546a:	e7c3      	b.n	80053f4 <_puts_r+0x54>
 800546c:	250a      	movs	r5, #10
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	1c5a      	adds	r2, r3, #1
 8005472:	6022      	str	r2, [r4, #0]
 8005474:	701d      	strb	r5, [r3, #0]
 8005476:	e7bf      	b.n	80053f8 <_puts_r+0x58>
 8005478:	0800992c 	.word	0x0800992c
 800547c:	0800994c 	.word	0x0800994c
 8005480:	0800990c 	.word	0x0800990c

08005484 <puts>:
 8005484:	b510      	push	{r4, lr}
 8005486:	4b03      	ldr	r3, [pc, #12]	; (8005494 <puts+0x10>)
 8005488:	0001      	movs	r1, r0
 800548a:	6818      	ldr	r0, [r3, #0]
 800548c:	f7ff ff88 	bl	80053a0 <_puts_r>
 8005490:	bd10      	pop	{r4, pc}
 8005492:	46c0      	nop			; (mov r8, r8)
 8005494:	20000028 	.word	0x20000028

08005498 <siprintf>:
 8005498:	b40e      	push	{r1, r2, r3}
 800549a:	b500      	push	{lr}
 800549c:	490b      	ldr	r1, [pc, #44]	; (80054cc <siprintf+0x34>)
 800549e:	b09c      	sub	sp, #112	; 0x70
 80054a0:	ab1d      	add	r3, sp, #116	; 0x74
 80054a2:	9002      	str	r0, [sp, #8]
 80054a4:	9006      	str	r0, [sp, #24]
 80054a6:	9107      	str	r1, [sp, #28]
 80054a8:	9104      	str	r1, [sp, #16]
 80054aa:	4809      	ldr	r0, [pc, #36]	; (80054d0 <siprintf+0x38>)
 80054ac:	4909      	ldr	r1, [pc, #36]	; (80054d4 <siprintf+0x3c>)
 80054ae:	cb04      	ldmia	r3!, {r2}
 80054b0:	9105      	str	r1, [sp, #20]
 80054b2:	6800      	ldr	r0, [r0, #0]
 80054b4:	a902      	add	r1, sp, #8
 80054b6:	9301      	str	r3, [sp, #4]
 80054b8:	f000 fcda 	bl	8005e70 <_svfiprintf_r>
 80054bc:	2300      	movs	r3, #0
 80054be:	9a02      	ldr	r2, [sp, #8]
 80054c0:	7013      	strb	r3, [r2, #0]
 80054c2:	b01c      	add	sp, #112	; 0x70
 80054c4:	bc08      	pop	{r3}
 80054c6:	b003      	add	sp, #12
 80054c8:	4718      	bx	r3
 80054ca:	46c0      	nop			; (mov r8, r8)
 80054cc:	7fffffff 	.word	0x7fffffff
 80054d0:	20000028 	.word	0x20000028
 80054d4:	ffff0208 	.word	0xffff0208

080054d8 <strcasecmp>:
 80054d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054da:	0005      	movs	r5, r0
 80054dc:	2400      	movs	r4, #0
 80054de:	2703      	movs	r7, #3
 80054e0:	4e09      	ldr	r6, [pc, #36]	; (8005508 <strcasecmp+0x30>)
 80054e2:	5d2a      	ldrb	r2, [r5, r4]
 80054e4:	5cb3      	ldrb	r3, [r6, r2]
 80054e6:	403b      	ands	r3, r7
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d100      	bne.n	80054ee <strcasecmp+0x16>
 80054ec:	3220      	adds	r2, #32
 80054ee:	5d0b      	ldrb	r3, [r1, r4]
 80054f0:	5cf0      	ldrb	r0, [r6, r3]
 80054f2:	4038      	ands	r0, r7
 80054f4:	2801      	cmp	r0, #1
 80054f6:	d100      	bne.n	80054fa <strcasecmp+0x22>
 80054f8:	3320      	adds	r3, #32
 80054fa:	1ad0      	subs	r0, r2, r3
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d102      	bne.n	8005506 <strcasecmp+0x2e>
 8005500:	3401      	adds	r4, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1ed      	bne.n	80054e2 <strcasecmp+0xa>
 8005506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005508:	08009809 	.word	0x08009809

0800550c <strtok>:
 800550c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550e:	4b16      	ldr	r3, [pc, #88]	; (8005568 <strtok+0x5c>)
 8005510:	0005      	movs	r5, r0
 8005512:	681f      	ldr	r7, [r3, #0]
 8005514:	000e      	movs	r6, r1
 8005516:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8005518:	2c00      	cmp	r4, #0
 800551a:	d11d      	bne.n	8005558 <strtok+0x4c>
 800551c:	2050      	movs	r0, #80	; 0x50
 800551e:	f000 fb93 	bl	8005c48 <malloc>
 8005522:	1e02      	subs	r2, r0, #0
 8005524:	65b8      	str	r0, [r7, #88]	; 0x58
 8005526:	d104      	bne.n	8005532 <strtok+0x26>
 8005528:	2157      	movs	r1, #87	; 0x57
 800552a:	4b10      	ldr	r3, [pc, #64]	; (800556c <strtok+0x60>)
 800552c:	4810      	ldr	r0, [pc, #64]	; (8005570 <strtok+0x64>)
 800552e:	f000 f91f 	bl	8005770 <__assert_func>
 8005532:	6004      	str	r4, [r0, #0]
 8005534:	6044      	str	r4, [r0, #4]
 8005536:	6084      	str	r4, [r0, #8]
 8005538:	60c4      	str	r4, [r0, #12]
 800553a:	6104      	str	r4, [r0, #16]
 800553c:	6144      	str	r4, [r0, #20]
 800553e:	6184      	str	r4, [r0, #24]
 8005540:	6284      	str	r4, [r0, #40]	; 0x28
 8005542:	62c4      	str	r4, [r0, #44]	; 0x2c
 8005544:	6304      	str	r4, [r0, #48]	; 0x30
 8005546:	6344      	str	r4, [r0, #52]	; 0x34
 8005548:	6384      	str	r4, [r0, #56]	; 0x38
 800554a:	63c4      	str	r4, [r0, #60]	; 0x3c
 800554c:	6404      	str	r4, [r0, #64]	; 0x40
 800554e:	6444      	str	r4, [r0, #68]	; 0x44
 8005550:	6484      	str	r4, [r0, #72]	; 0x48
 8005552:	64c4      	str	r4, [r0, #76]	; 0x4c
 8005554:	7704      	strb	r4, [r0, #28]
 8005556:	6244      	str	r4, [r0, #36]	; 0x24
 8005558:	0031      	movs	r1, r6
 800555a:	0028      	movs	r0, r5
 800555c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800555e:	2301      	movs	r3, #1
 8005560:	f000 f808 	bl	8005574 <__strtok_r>
 8005564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005566:	46c0      	nop			; (mov r8, r8)
 8005568:	20000028 	.word	0x20000028
 800556c:	08009754 	.word	0x08009754
 8005570:	0800976b 	.word	0x0800976b

08005574 <__strtok_r>:
 8005574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005576:	2800      	cmp	r0, #0
 8005578:	d102      	bne.n	8005580 <__strtok_r+0xc>
 800557a:	6810      	ldr	r0, [r2, #0]
 800557c:	2800      	cmp	r0, #0
 800557e:	d013      	beq.n	80055a8 <__strtok_r+0x34>
 8005580:	0004      	movs	r4, r0
 8005582:	0020      	movs	r0, r4
 8005584:	000e      	movs	r6, r1
 8005586:	7805      	ldrb	r5, [r0, #0]
 8005588:	3401      	adds	r4, #1
 800558a:	7837      	ldrb	r7, [r6, #0]
 800558c:	2f00      	cmp	r7, #0
 800558e:	d104      	bne.n	800559a <__strtok_r+0x26>
 8005590:	2d00      	cmp	r5, #0
 8005592:	d10f      	bne.n	80055b4 <__strtok_r+0x40>
 8005594:	0028      	movs	r0, r5
 8005596:	6015      	str	r5, [r2, #0]
 8005598:	e006      	b.n	80055a8 <__strtok_r+0x34>
 800559a:	3601      	adds	r6, #1
 800559c:	42bd      	cmp	r5, r7
 800559e:	d1f4      	bne.n	800558a <__strtok_r+0x16>
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1ee      	bne.n	8005582 <__strtok_r+0xe>
 80055a4:	6014      	str	r4, [r2, #0]
 80055a6:	7003      	strb	r3, [r0, #0]
 80055a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055aa:	002f      	movs	r7, r5
 80055ac:	e00f      	b.n	80055ce <__strtok_r+0x5a>
 80055ae:	3301      	adds	r3, #1
 80055b0:	2e00      	cmp	r6, #0
 80055b2:	d104      	bne.n	80055be <__strtok_r+0x4a>
 80055b4:	0023      	movs	r3, r4
 80055b6:	3401      	adds	r4, #1
 80055b8:	781d      	ldrb	r5, [r3, #0]
 80055ba:	0027      	movs	r7, r4
 80055bc:	000b      	movs	r3, r1
 80055be:	781e      	ldrb	r6, [r3, #0]
 80055c0:	42b5      	cmp	r5, r6
 80055c2:	d1f4      	bne.n	80055ae <__strtok_r+0x3a>
 80055c4:	2d00      	cmp	r5, #0
 80055c6:	d0f0      	beq.n	80055aa <__strtok_r+0x36>
 80055c8:	2300      	movs	r3, #0
 80055ca:	3c01      	subs	r4, #1
 80055cc:	7023      	strb	r3, [r4, #0]
 80055ce:	6017      	str	r7, [r2, #0]
 80055d0:	e7ea      	b.n	80055a8 <__strtok_r+0x34>
	...

080055d4 <__swbuf_r>:
 80055d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055d6:	0005      	movs	r5, r0
 80055d8:	000e      	movs	r6, r1
 80055da:	0014      	movs	r4, r2
 80055dc:	2800      	cmp	r0, #0
 80055de:	d004      	beq.n	80055ea <__swbuf_r+0x16>
 80055e0:	6983      	ldr	r3, [r0, #24]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <__swbuf_r+0x16>
 80055e6:	f000 fa0f 	bl	8005a08 <__sinit>
 80055ea:	4b22      	ldr	r3, [pc, #136]	; (8005674 <__swbuf_r+0xa0>)
 80055ec:	429c      	cmp	r4, r3
 80055ee:	d12e      	bne.n	800564e <__swbuf_r+0x7a>
 80055f0:	686c      	ldr	r4, [r5, #4]
 80055f2:	69a3      	ldr	r3, [r4, #24]
 80055f4:	60a3      	str	r3, [r4, #8]
 80055f6:	89a3      	ldrh	r3, [r4, #12]
 80055f8:	071b      	lsls	r3, r3, #28
 80055fa:	d532      	bpl.n	8005662 <__swbuf_r+0x8e>
 80055fc:	6923      	ldr	r3, [r4, #16]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d02f      	beq.n	8005662 <__swbuf_r+0x8e>
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	6922      	ldr	r2, [r4, #16]
 8005606:	b2f7      	uxtb	r7, r6
 8005608:	1a98      	subs	r0, r3, r2
 800560a:	6963      	ldr	r3, [r4, #20]
 800560c:	b2f6      	uxtb	r6, r6
 800560e:	4283      	cmp	r3, r0
 8005610:	dc05      	bgt.n	800561e <__swbuf_r+0x4a>
 8005612:	0021      	movs	r1, r4
 8005614:	0028      	movs	r0, r5
 8005616:	f000 f955 	bl	80058c4 <_fflush_r>
 800561a:	2800      	cmp	r0, #0
 800561c:	d127      	bne.n	800566e <__swbuf_r+0x9a>
 800561e:	68a3      	ldr	r3, [r4, #8]
 8005620:	3001      	adds	r0, #1
 8005622:	3b01      	subs	r3, #1
 8005624:	60a3      	str	r3, [r4, #8]
 8005626:	6823      	ldr	r3, [r4, #0]
 8005628:	1c5a      	adds	r2, r3, #1
 800562a:	6022      	str	r2, [r4, #0]
 800562c:	701f      	strb	r7, [r3, #0]
 800562e:	6963      	ldr	r3, [r4, #20]
 8005630:	4283      	cmp	r3, r0
 8005632:	d004      	beq.n	800563e <__swbuf_r+0x6a>
 8005634:	89a3      	ldrh	r3, [r4, #12]
 8005636:	07db      	lsls	r3, r3, #31
 8005638:	d507      	bpl.n	800564a <__swbuf_r+0x76>
 800563a:	2e0a      	cmp	r6, #10
 800563c:	d105      	bne.n	800564a <__swbuf_r+0x76>
 800563e:	0021      	movs	r1, r4
 8005640:	0028      	movs	r0, r5
 8005642:	f000 f93f 	bl	80058c4 <_fflush_r>
 8005646:	2800      	cmp	r0, #0
 8005648:	d111      	bne.n	800566e <__swbuf_r+0x9a>
 800564a:	0030      	movs	r0, r6
 800564c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800564e:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <__swbuf_r+0xa4>)
 8005650:	429c      	cmp	r4, r3
 8005652:	d101      	bne.n	8005658 <__swbuf_r+0x84>
 8005654:	68ac      	ldr	r4, [r5, #8]
 8005656:	e7cc      	b.n	80055f2 <__swbuf_r+0x1e>
 8005658:	4b08      	ldr	r3, [pc, #32]	; (800567c <__swbuf_r+0xa8>)
 800565a:	429c      	cmp	r4, r3
 800565c:	d1c9      	bne.n	80055f2 <__swbuf_r+0x1e>
 800565e:	68ec      	ldr	r4, [r5, #12]
 8005660:	e7c7      	b.n	80055f2 <__swbuf_r+0x1e>
 8005662:	0021      	movs	r1, r4
 8005664:	0028      	movs	r0, r5
 8005666:	f000 f80b 	bl	8005680 <__swsetup_r>
 800566a:	2800      	cmp	r0, #0
 800566c:	d0c9      	beq.n	8005602 <__swbuf_r+0x2e>
 800566e:	2601      	movs	r6, #1
 8005670:	4276      	negs	r6, r6
 8005672:	e7ea      	b.n	800564a <__swbuf_r+0x76>
 8005674:	0800992c 	.word	0x0800992c
 8005678:	0800994c 	.word	0x0800994c
 800567c:	0800990c 	.word	0x0800990c

08005680 <__swsetup_r>:
 8005680:	4b37      	ldr	r3, [pc, #220]	; (8005760 <__swsetup_r+0xe0>)
 8005682:	b570      	push	{r4, r5, r6, lr}
 8005684:	681d      	ldr	r5, [r3, #0]
 8005686:	0006      	movs	r6, r0
 8005688:	000c      	movs	r4, r1
 800568a:	2d00      	cmp	r5, #0
 800568c:	d005      	beq.n	800569a <__swsetup_r+0x1a>
 800568e:	69ab      	ldr	r3, [r5, #24]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d102      	bne.n	800569a <__swsetup_r+0x1a>
 8005694:	0028      	movs	r0, r5
 8005696:	f000 f9b7 	bl	8005a08 <__sinit>
 800569a:	4b32      	ldr	r3, [pc, #200]	; (8005764 <__swsetup_r+0xe4>)
 800569c:	429c      	cmp	r4, r3
 800569e:	d10f      	bne.n	80056c0 <__swsetup_r+0x40>
 80056a0:	686c      	ldr	r4, [r5, #4]
 80056a2:	230c      	movs	r3, #12
 80056a4:	5ee2      	ldrsh	r2, [r4, r3]
 80056a6:	b293      	uxth	r3, r2
 80056a8:	0711      	lsls	r1, r2, #28
 80056aa:	d42d      	bmi.n	8005708 <__swsetup_r+0x88>
 80056ac:	06d9      	lsls	r1, r3, #27
 80056ae:	d411      	bmi.n	80056d4 <__swsetup_r+0x54>
 80056b0:	2309      	movs	r3, #9
 80056b2:	2001      	movs	r0, #1
 80056b4:	6033      	str	r3, [r6, #0]
 80056b6:	3337      	adds	r3, #55	; 0x37
 80056b8:	4313      	orrs	r3, r2
 80056ba:	81a3      	strh	r3, [r4, #12]
 80056bc:	4240      	negs	r0, r0
 80056be:	bd70      	pop	{r4, r5, r6, pc}
 80056c0:	4b29      	ldr	r3, [pc, #164]	; (8005768 <__swsetup_r+0xe8>)
 80056c2:	429c      	cmp	r4, r3
 80056c4:	d101      	bne.n	80056ca <__swsetup_r+0x4a>
 80056c6:	68ac      	ldr	r4, [r5, #8]
 80056c8:	e7eb      	b.n	80056a2 <__swsetup_r+0x22>
 80056ca:	4b28      	ldr	r3, [pc, #160]	; (800576c <__swsetup_r+0xec>)
 80056cc:	429c      	cmp	r4, r3
 80056ce:	d1e8      	bne.n	80056a2 <__swsetup_r+0x22>
 80056d0:	68ec      	ldr	r4, [r5, #12]
 80056d2:	e7e6      	b.n	80056a2 <__swsetup_r+0x22>
 80056d4:	075b      	lsls	r3, r3, #29
 80056d6:	d513      	bpl.n	8005700 <__swsetup_r+0x80>
 80056d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056da:	2900      	cmp	r1, #0
 80056dc:	d008      	beq.n	80056f0 <__swsetup_r+0x70>
 80056de:	0023      	movs	r3, r4
 80056e0:	3344      	adds	r3, #68	; 0x44
 80056e2:	4299      	cmp	r1, r3
 80056e4:	d002      	beq.n	80056ec <__swsetup_r+0x6c>
 80056e6:	0030      	movs	r0, r6
 80056e8:	f000 fab8 	bl	8005c5c <_free_r>
 80056ec:	2300      	movs	r3, #0
 80056ee:	6363      	str	r3, [r4, #52]	; 0x34
 80056f0:	2224      	movs	r2, #36	; 0x24
 80056f2:	89a3      	ldrh	r3, [r4, #12]
 80056f4:	4393      	bics	r3, r2
 80056f6:	81a3      	strh	r3, [r4, #12]
 80056f8:	2300      	movs	r3, #0
 80056fa:	6063      	str	r3, [r4, #4]
 80056fc:	6923      	ldr	r3, [r4, #16]
 80056fe:	6023      	str	r3, [r4, #0]
 8005700:	2308      	movs	r3, #8
 8005702:	89a2      	ldrh	r2, [r4, #12]
 8005704:	4313      	orrs	r3, r2
 8005706:	81a3      	strh	r3, [r4, #12]
 8005708:	6923      	ldr	r3, [r4, #16]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10b      	bne.n	8005726 <__swsetup_r+0xa6>
 800570e:	21a0      	movs	r1, #160	; 0xa0
 8005710:	2280      	movs	r2, #128	; 0x80
 8005712:	89a3      	ldrh	r3, [r4, #12]
 8005714:	0089      	lsls	r1, r1, #2
 8005716:	0092      	lsls	r2, r2, #2
 8005718:	400b      	ands	r3, r1
 800571a:	4293      	cmp	r3, r2
 800571c:	d003      	beq.n	8005726 <__swsetup_r+0xa6>
 800571e:	0021      	movs	r1, r4
 8005720:	0030      	movs	r0, r6
 8005722:	f000 fa4d 	bl	8005bc0 <__smakebuf_r>
 8005726:	220c      	movs	r2, #12
 8005728:	5ea3      	ldrsh	r3, [r4, r2]
 800572a:	2001      	movs	r0, #1
 800572c:	001a      	movs	r2, r3
 800572e:	b299      	uxth	r1, r3
 8005730:	4002      	ands	r2, r0
 8005732:	4203      	tst	r3, r0
 8005734:	d00f      	beq.n	8005756 <__swsetup_r+0xd6>
 8005736:	2200      	movs	r2, #0
 8005738:	60a2      	str	r2, [r4, #8]
 800573a:	6962      	ldr	r2, [r4, #20]
 800573c:	4252      	negs	r2, r2
 800573e:	61a2      	str	r2, [r4, #24]
 8005740:	2000      	movs	r0, #0
 8005742:	6922      	ldr	r2, [r4, #16]
 8005744:	4282      	cmp	r2, r0
 8005746:	d1ba      	bne.n	80056be <__swsetup_r+0x3e>
 8005748:	060a      	lsls	r2, r1, #24
 800574a:	d5b8      	bpl.n	80056be <__swsetup_r+0x3e>
 800574c:	2240      	movs	r2, #64	; 0x40
 800574e:	4313      	orrs	r3, r2
 8005750:	81a3      	strh	r3, [r4, #12]
 8005752:	3801      	subs	r0, #1
 8005754:	e7b3      	b.n	80056be <__swsetup_r+0x3e>
 8005756:	0788      	lsls	r0, r1, #30
 8005758:	d400      	bmi.n	800575c <__swsetup_r+0xdc>
 800575a:	6962      	ldr	r2, [r4, #20]
 800575c:	60a2      	str	r2, [r4, #8]
 800575e:	e7ef      	b.n	8005740 <__swsetup_r+0xc0>
 8005760:	20000028 	.word	0x20000028
 8005764:	0800992c 	.word	0x0800992c
 8005768:	0800994c 	.word	0x0800994c
 800576c:	0800990c 	.word	0x0800990c

08005770 <__assert_func>:
 8005770:	b530      	push	{r4, r5, lr}
 8005772:	0014      	movs	r4, r2
 8005774:	001a      	movs	r2, r3
 8005776:	4b09      	ldr	r3, [pc, #36]	; (800579c <__assert_func+0x2c>)
 8005778:	0005      	movs	r5, r0
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	b085      	sub	sp, #20
 800577e:	68d8      	ldr	r0, [r3, #12]
 8005780:	4b07      	ldr	r3, [pc, #28]	; (80057a0 <__assert_func+0x30>)
 8005782:	2c00      	cmp	r4, #0
 8005784:	d101      	bne.n	800578a <__assert_func+0x1a>
 8005786:	4b07      	ldr	r3, [pc, #28]	; (80057a4 <__assert_func+0x34>)
 8005788:	001c      	movs	r4, r3
 800578a:	9301      	str	r3, [sp, #4]
 800578c:	9100      	str	r1, [sp, #0]
 800578e:	002b      	movs	r3, r5
 8005790:	4905      	ldr	r1, [pc, #20]	; (80057a8 <__assert_func+0x38>)
 8005792:	9402      	str	r4, [sp, #8]
 8005794:	f000 f9b8 	bl	8005b08 <fiprintf>
 8005798:	f001 f80a 	bl	80067b0 <abort>
 800579c:	20000028 	.word	0x20000028
 80057a0:	080097cc 	.word	0x080097cc
 80057a4:	08009807 	.word	0x08009807
 80057a8:	080097d9 	.word	0x080097d9

080057ac <__sflush_r>:
 80057ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057ae:	898b      	ldrh	r3, [r1, #12]
 80057b0:	0005      	movs	r5, r0
 80057b2:	000c      	movs	r4, r1
 80057b4:	071a      	lsls	r2, r3, #28
 80057b6:	d45f      	bmi.n	8005878 <__sflush_r+0xcc>
 80057b8:	684a      	ldr	r2, [r1, #4]
 80057ba:	2a00      	cmp	r2, #0
 80057bc:	dc04      	bgt.n	80057c8 <__sflush_r+0x1c>
 80057be:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80057c0:	2a00      	cmp	r2, #0
 80057c2:	dc01      	bgt.n	80057c8 <__sflush_r+0x1c>
 80057c4:	2000      	movs	r0, #0
 80057c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80057c8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80057ca:	2f00      	cmp	r7, #0
 80057cc:	d0fa      	beq.n	80057c4 <__sflush_r+0x18>
 80057ce:	2200      	movs	r2, #0
 80057d0:	2180      	movs	r1, #128	; 0x80
 80057d2:	682e      	ldr	r6, [r5, #0]
 80057d4:	602a      	str	r2, [r5, #0]
 80057d6:	001a      	movs	r2, r3
 80057d8:	0149      	lsls	r1, r1, #5
 80057da:	400a      	ands	r2, r1
 80057dc:	420b      	tst	r3, r1
 80057de:	d034      	beq.n	800584a <__sflush_r+0x9e>
 80057e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057e2:	89a3      	ldrh	r3, [r4, #12]
 80057e4:	075b      	lsls	r3, r3, #29
 80057e6:	d506      	bpl.n	80057f6 <__sflush_r+0x4a>
 80057e8:	6863      	ldr	r3, [r4, #4]
 80057ea:	1ac0      	subs	r0, r0, r3
 80057ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <__sflush_r+0x4a>
 80057f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057f4:	1ac0      	subs	r0, r0, r3
 80057f6:	0002      	movs	r2, r0
 80057f8:	6a21      	ldr	r1, [r4, #32]
 80057fa:	2300      	movs	r3, #0
 80057fc:	0028      	movs	r0, r5
 80057fe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005800:	47b8      	blx	r7
 8005802:	89a1      	ldrh	r1, [r4, #12]
 8005804:	1c43      	adds	r3, r0, #1
 8005806:	d106      	bne.n	8005816 <__sflush_r+0x6a>
 8005808:	682b      	ldr	r3, [r5, #0]
 800580a:	2b1d      	cmp	r3, #29
 800580c:	d831      	bhi.n	8005872 <__sflush_r+0xc6>
 800580e:	4a2c      	ldr	r2, [pc, #176]	; (80058c0 <__sflush_r+0x114>)
 8005810:	40da      	lsrs	r2, r3
 8005812:	07d3      	lsls	r3, r2, #31
 8005814:	d52d      	bpl.n	8005872 <__sflush_r+0xc6>
 8005816:	2300      	movs	r3, #0
 8005818:	6063      	str	r3, [r4, #4]
 800581a:	6923      	ldr	r3, [r4, #16]
 800581c:	6023      	str	r3, [r4, #0]
 800581e:	04cb      	lsls	r3, r1, #19
 8005820:	d505      	bpl.n	800582e <__sflush_r+0x82>
 8005822:	1c43      	adds	r3, r0, #1
 8005824:	d102      	bne.n	800582c <__sflush_r+0x80>
 8005826:	682b      	ldr	r3, [r5, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d100      	bne.n	800582e <__sflush_r+0x82>
 800582c:	6560      	str	r0, [r4, #84]	; 0x54
 800582e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005830:	602e      	str	r6, [r5, #0]
 8005832:	2900      	cmp	r1, #0
 8005834:	d0c6      	beq.n	80057c4 <__sflush_r+0x18>
 8005836:	0023      	movs	r3, r4
 8005838:	3344      	adds	r3, #68	; 0x44
 800583a:	4299      	cmp	r1, r3
 800583c:	d002      	beq.n	8005844 <__sflush_r+0x98>
 800583e:	0028      	movs	r0, r5
 8005840:	f000 fa0c 	bl	8005c5c <_free_r>
 8005844:	2000      	movs	r0, #0
 8005846:	6360      	str	r0, [r4, #52]	; 0x34
 8005848:	e7bd      	b.n	80057c6 <__sflush_r+0x1a>
 800584a:	2301      	movs	r3, #1
 800584c:	0028      	movs	r0, r5
 800584e:	6a21      	ldr	r1, [r4, #32]
 8005850:	47b8      	blx	r7
 8005852:	1c43      	adds	r3, r0, #1
 8005854:	d1c5      	bne.n	80057e2 <__sflush_r+0x36>
 8005856:	682b      	ldr	r3, [r5, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d0c2      	beq.n	80057e2 <__sflush_r+0x36>
 800585c:	2b1d      	cmp	r3, #29
 800585e:	d001      	beq.n	8005864 <__sflush_r+0xb8>
 8005860:	2b16      	cmp	r3, #22
 8005862:	d101      	bne.n	8005868 <__sflush_r+0xbc>
 8005864:	602e      	str	r6, [r5, #0]
 8005866:	e7ad      	b.n	80057c4 <__sflush_r+0x18>
 8005868:	2340      	movs	r3, #64	; 0x40
 800586a:	89a2      	ldrh	r2, [r4, #12]
 800586c:	4313      	orrs	r3, r2
 800586e:	81a3      	strh	r3, [r4, #12]
 8005870:	e7a9      	b.n	80057c6 <__sflush_r+0x1a>
 8005872:	2340      	movs	r3, #64	; 0x40
 8005874:	430b      	orrs	r3, r1
 8005876:	e7fa      	b.n	800586e <__sflush_r+0xc2>
 8005878:	690f      	ldr	r7, [r1, #16]
 800587a:	2f00      	cmp	r7, #0
 800587c:	d0a2      	beq.n	80057c4 <__sflush_r+0x18>
 800587e:	680a      	ldr	r2, [r1, #0]
 8005880:	600f      	str	r7, [r1, #0]
 8005882:	1bd2      	subs	r2, r2, r7
 8005884:	9201      	str	r2, [sp, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	079b      	lsls	r3, r3, #30
 800588a:	d100      	bne.n	800588e <__sflush_r+0xe2>
 800588c:	694a      	ldr	r2, [r1, #20]
 800588e:	60a2      	str	r2, [r4, #8]
 8005890:	9b01      	ldr	r3, [sp, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	dc00      	bgt.n	8005898 <__sflush_r+0xec>
 8005896:	e795      	b.n	80057c4 <__sflush_r+0x18>
 8005898:	003a      	movs	r2, r7
 800589a:	0028      	movs	r0, r5
 800589c:	9b01      	ldr	r3, [sp, #4]
 800589e:	6a21      	ldr	r1, [r4, #32]
 80058a0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058a2:	47b0      	blx	r6
 80058a4:	2800      	cmp	r0, #0
 80058a6:	dc06      	bgt.n	80058b6 <__sflush_r+0x10a>
 80058a8:	2340      	movs	r3, #64	; 0x40
 80058aa:	2001      	movs	r0, #1
 80058ac:	89a2      	ldrh	r2, [r4, #12]
 80058ae:	4240      	negs	r0, r0
 80058b0:	4313      	orrs	r3, r2
 80058b2:	81a3      	strh	r3, [r4, #12]
 80058b4:	e787      	b.n	80057c6 <__sflush_r+0x1a>
 80058b6:	9b01      	ldr	r3, [sp, #4]
 80058b8:	183f      	adds	r7, r7, r0
 80058ba:	1a1b      	subs	r3, r3, r0
 80058bc:	9301      	str	r3, [sp, #4]
 80058be:	e7e7      	b.n	8005890 <__sflush_r+0xe4>
 80058c0:	20400001 	.word	0x20400001

080058c4 <_fflush_r>:
 80058c4:	690b      	ldr	r3, [r1, #16]
 80058c6:	b570      	push	{r4, r5, r6, lr}
 80058c8:	0005      	movs	r5, r0
 80058ca:	000c      	movs	r4, r1
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d102      	bne.n	80058d6 <_fflush_r+0x12>
 80058d0:	2500      	movs	r5, #0
 80058d2:	0028      	movs	r0, r5
 80058d4:	bd70      	pop	{r4, r5, r6, pc}
 80058d6:	2800      	cmp	r0, #0
 80058d8:	d004      	beq.n	80058e4 <_fflush_r+0x20>
 80058da:	6983      	ldr	r3, [r0, #24]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <_fflush_r+0x20>
 80058e0:	f000 f892 	bl	8005a08 <__sinit>
 80058e4:	4b14      	ldr	r3, [pc, #80]	; (8005938 <_fflush_r+0x74>)
 80058e6:	429c      	cmp	r4, r3
 80058e8:	d11b      	bne.n	8005922 <_fflush_r+0x5e>
 80058ea:	686c      	ldr	r4, [r5, #4]
 80058ec:	220c      	movs	r2, #12
 80058ee:	5ea3      	ldrsh	r3, [r4, r2]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0ed      	beq.n	80058d0 <_fflush_r+0xc>
 80058f4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80058f6:	07d2      	lsls	r2, r2, #31
 80058f8:	d404      	bmi.n	8005904 <_fflush_r+0x40>
 80058fa:	059b      	lsls	r3, r3, #22
 80058fc:	d402      	bmi.n	8005904 <_fflush_r+0x40>
 80058fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005900:	f000 f933 	bl	8005b6a <__retarget_lock_acquire_recursive>
 8005904:	0028      	movs	r0, r5
 8005906:	0021      	movs	r1, r4
 8005908:	f7ff ff50 	bl	80057ac <__sflush_r>
 800590c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800590e:	0005      	movs	r5, r0
 8005910:	07db      	lsls	r3, r3, #31
 8005912:	d4de      	bmi.n	80058d2 <_fflush_r+0xe>
 8005914:	89a3      	ldrh	r3, [r4, #12]
 8005916:	059b      	lsls	r3, r3, #22
 8005918:	d4db      	bmi.n	80058d2 <_fflush_r+0xe>
 800591a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800591c:	f000 f926 	bl	8005b6c <__retarget_lock_release_recursive>
 8005920:	e7d7      	b.n	80058d2 <_fflush_r+0xe>
 8005922:	4b06      	ldr	r3, [pc, #24]	; (800593c <_fflush_r+0x78>)
 8005924:	429c      	cmp	r4, r3
 8005926:	d101      	bne.n	800592c <_fflush_r+0x68>
 8005928:	68ac      	ldr	r4, [r5, #8]
 800592a:	e7df      	b.n	80058ec <_fflush_r+0x28>
 800592c:	4b04      	ldr	r3, [pc, #16]	; (8005940 <_fflush_r+0x7c>)
 800592e:	429c      	cmp	r4, r3
 8005930:	d1dc      	bne.n	80058ec <_fflush_r+0x28>
 8005932:	68ec      	ldr	r4, [r5, #12]
 8005934:	e7da      	b.n	80058ec <_fflush_r+0x28>
 8005936:	46c0      	nop			; (mov r8, r8)
 8005938:	0800992c 	.word	0x0800992c
 800593c:	0800994c 	.word	0x0800994c
 8005940:	0800990c 	.word	0x0800990c

08005944 <std>:
 8005944:	2300      	movs	r3, #0
 8005946:	b510      	push	{r4, lr}
 8005948:	0004      	movs	r4, r0
 800594a:	6003      	str	r3, [r0, #0]
 800594c:	6043      	str	r3, [r0, #4]
 800594e:	6083      	str	r3, [r0, #8]
 8005950:	8181      	strh	r1, [r0, #12]
 8005952:	6643      	str	r3, [r0, #100]	; 0x64
 8005954:	0019      	movs	r1, r3
 8005956:	81c2      	strh	r2, [r0, #14]
 8005958:	6103      	str	r3, [r0, #16]
 800595a:	6143      	str	r3, [r0, #20]
 800595c:	6183      	str	r3, [r0, #24]
 800595e:	2208      	movs	r2, #8
 8005960:	305c      	adds	r0, #92	; 0x5c
 8005962:	f7ff fce7 	bl	8005334 <memset>
 8005966:	4b05      	ldr	r3, [pc, #20]	; (800597c <std+0x38>)
 8005968:	6263      	str	r3, [r4, #36]	; 0x24
 800596a:	4b05      	ldr	r3, [pc, #20]	; (8005980 <std+0x3c>)
 800596c:	6224      	str	r4, [r4, #32]
 800596e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005970:	4b04      	ldr	r3, [pc, #16]	; (8005984 <std+0x40>)
 8005972:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005974:	4b04      	ldr	r3, [pc, #16]	; (8005988 <std+0x44>)
 8005976:	6323      	str	r3, [r4, #48]	; 0x30
 8005978:	bd10      	pop	{r4, pc}
 800597a:	46c0      	nop			; (mov r8, r8)
 800597c:	080066f1 	.word	0x080066f1
 8005980:	08006719 	.word	0x08006719
 8005984:	08006751 	.word	0x08006751
 8005988:	0800677d 	.word	0x0800677d

0800598c <_cleanup_r>:
 800598c:	b510      	push	{r4, lr}
 800598e:	4902      	ldr	r1, [pc, #8]	; (8005998 <_cleanup_r+0xc>)
 8005990:	f000 f8ca 	bl	8005b28 <_fwalk_reent>
 8005994:	bd10      	pop	{r4, pc}
 8005996:	46c0      	nop			; (mov r8, r8)
 8005998:	080058c5 	.word	0x080058c5

0800599c <__sfmoreglue>:
 800599c:	b570      	push	{r4, r5, r6, lr}
 800599e:	2568      	movs	r5, #104	; 0x68
 80059a0:	1e4a      	subs	r2, r1, #1
 80059a2:	4355      	muls	r5, r2
 80059a4:	000e      	movs	r6, r1
 80059a6:	0029      	movs	r1, r5
 80059a8:	3174      	adds	r1, #116	; 0x74
 80059aa:	f000 f9a1 	bl	8005cf0 <_malloc_r>
 80059ae:	1e04      	subs	r4, r0, #0
 80059b0:	d008      	beq.n	80059c4 <__sfmoreglue+0x28>
 80059b2:	2100      	movs	r1, #0
 80059b4:	002a      	movs	r2, r5
 80059b6:	6001      	str	r1, [r0, #0]
 80059b8:	6046      	str	r6, [r0, #4]
 80059ba:	300c      	adds	r0, #12
 80059bc:	60a0      	str	r0, [r4, #8]
 80059be:	3268      	adds	r2, #104	; 0x68
 80059c0:	f7ff fcb8 	bl	8005334 <memset>
 80059c4:	0020      	movs	r0, r4
 80059c6:	bd70      	pop	{r4, r5, r6, pc}

080059c8 <__sfp_lock_acquire>:
 80059c8:	b510      	push	{r4, lr}
 80059ca:	4802      	ldr	r0, [pc, #8]	; (80059d4 <__sfp_lock_acquire+0xc>)
 80059cc:	f000 f8cd 	bl	8005b6a <__retarget_lock_acquire_recursive>
 80059d0:	bd10      	pop	{r4, pc}
 80059d2:	46c0      	nop			; (mov r8, r8)
 80059d4:	20000778 	.word	0x20000778

080059d8 <__sfp_lock_release>:
 80059d8:	b510      	push	{r4, lr}
 80059da:	4802      	ldr	r0, [pc, #8]	; (80059e4 <__sfp_lock_release+0xc>)
 80059dc:	f000 f8c6 	bl	8005b6c <__retarget_lock_release_recursive>
 80059e0:	bd10      	pop	{r4, pc}
 80059e2:	46c0      	nop			; (mov r8, r8)
 80059e4:	20000778 	.word	0x20000778

080059e8 <__sinit_lock_acquire>:
 80059e8:	b510      	push	{r4, lr}
 80059ea:	4802      	ldr	r0, [pc, #8]	; (80059f4 <__sinit_lock_acquire+0xc>)
 80059ec:	f000 f8bd 	bl	8005b6a <__retarget_lock_acquire_recursive>
 80059f0:	bd10      	pop	{r4, pc}
 80059f2:	46c0      	nop			; (mov r8, r8)
 80059f4:	20000773 	.word	0x20000773

080059f8 <__sinit_lock_release>:
 80059f8:	b510      	push	{r4, lr}
 80059fa:	4802      	ldr	r0, [pc, #8]	; (8005a04 <__sinit_lock_release+0xc>)
 80059fc:	f000 f8b6 	bl	8005b6c <__retarget_lock_release_recursive>
 8005a00:	bd10      	pop	{r4, pc}
 8005a02:	46c0      	nop			; (mov r8, r8)
 8005a04:	20000773 	.word	0x20000773

08005a08 <__sinit>:
 8005a08:	b513      	push	{r0, r1, r4, lr}
 8005a0a:	0004      	movs	r4, r0
 8005a0c:	f7ff ffec 	bl	80059e8 <__sinit_lock_acquire>
 8005a10:	69a3      	ldr	r3, [r4, #24]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d002      	beq.n	8005a1c <__sinit+0x14>
 8005a16:	f7ff ffef 	bl	80059f8 <__sinit_lock_release>
 8005a1a:	bd13      	pop	{r0, r1, r4, pc}
 8005a1c:	64a3      	str	r3, [r4, #72]	; 0x48
 8005a1e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005a20:	6523      	str	r3, [r4, #80]	; 0x50
 8005a22:	4b13      	ldr	r3, [pc, #76]	; (8005a70 <__sinit+0x68>)
 8005a24:	4a13      	ldr	r2, [pc, #76]	; (8005a74 <__sinit+0x6c>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a2a:	9301      	str	r3, [sp, #4]
 8005a2c:	42a3      	cmp	r3, r4
 8005a2e:	d101      	bne.n	8005a34 <__sinit+0x2c>
 8005a30:	2301      	movs	r3, #1
 8005a32:	61a3      	str	r3, [r4, #24]
 8005a34:	0020      	movs	r0, r4
 8005a36:	f000 f81f 	bl	8005a78 <__sfp>
 8005a3a:	6060      	str	r0, [r4, #4]
 8005a3c:	0020      	movs	r0, r4
 8005a3e:	f000 f81b 	bl	8005a78 <__sfp>
 8005a42:	60a0      	str	r0, [r4, #8]
 8005a44:	0020      	movs	r0, r4
 8005a46:	f000 f817 	bl	8005a78 <__sfp>
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	2104      	movs	r1, #4
 8005a4e:	60e0      	str	r0, [r4, #12]
 8005a50:	6860      	ldr	r0, [r4, #4]
 8005a52:	f7ff ff77 	bl	8005944 <std>
 8005a56:	2201      	movs	r2, #1
 8005a58:	2109      	movs	r1, #9
 8005a5a:	68a0      	ldr	r0, [r4, #8]
 8005a5c:	f7ff ff72 	bl	8005944 <std>
 8005a60:	2202      	movs	r2, #2
 8005a62:	2112      	movs	r1, #18
 8005a64:	68e0      	ldr	r0, [r4, #12]
 8005a66:	f7ff ff6d 	bl	8005944 <std>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	61a3      	str	r3, [r4, #24]
 8005a6e:	e7d2      	b.n	8005a16 <__sinit+0xe>
 8005a70:	08009750 	.word	0x08009750
 8005a74:	0800598d 	.word	0x0800598d

08005a78 <__sfp>:
 8005a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a7a:	0007      	movs	r7, r0
 8005a7c:	f7ff ffa4 	bl	80059c8 <__sfp_lock_acquire>
 8005a80:	4b1f      	ldr	r3, [pc, #124]	; (8005b00 <__sfp+0x88>)
 8005a82:	681e      	ldr	r6, [r3, #0]
 8005a84:	69b3      	ldr	r3, [r6, #24]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d102      	bne.n	8005a90 <__sfp+0x18>
 8005a8a:	0030      	movs	r0, r6
 8005a8c:	f7ff ffbc 	bl	8005a08 <__sinit>
 8005a90:	3648      	adds	r6, #72	; 0x48
 8005a92:	68b4      	ldr	r4, [r6, #8]
 8005a94:	6873      	ldr	r3, [r6, #4]
 8005a96:	3b01      	subs	r3, #1
 8005a98:	d504      	bpl.n	8005aa4 <__sfp+0x2c>
 8005a9a:	6833      	ldr	r3, [r6, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d022      	beq.n	8005ae6 <__sfp+0x6e>
 8005aa0:	6836      	ldr	r6, [r6, #0]
 8005aa2:	e7f6      	b.n	8005a92 <__sfp+0x1a>
 8005aa4:	220c      	movs	r2, #12
 8005aa6:	5ea5      	ldrsh	r5, [r4, r2]
 8005aa8:	2d00      	cmp	r5, #0
 8005aaa:	d11a      	bne.n	8005ae2 <__sfp+0x6a>
 8005aac:	0020      	movs	r0, r4
 8005aae:	4b15      	ldr	r3, [pc, #84]	; (8005b04 <__sfp+0x8c>)
 8005ab0:	3058      	adds	r0, #88	; 0x58
 8005ab2:	60e3      	str	r3, [r4, #12]
 8005ab4:	6665      	str	r5, [r4, #100]	; 0x64
 8005ab6:	f000 f857 	bl	8005b68 <__retarget_lock_init_recursive>
 8005aba:	f7ff ff8d 	bl	80059d8 <__sfp_lock_release>
 8005abe:	0020      	movs	r0, r4
 8005ac0:	2208      	movs	r2, #8
 8005ac2:	0029      	movs	r1, r5
 8005ac4:	6025      	str	r5, [r4, #0]
 8005ac6:	60a5      	str	r5, [r4, #8]
 8005ac8:	6065      	str	r5, [r4, #4]
 8005aca:	6125      	str	r5, [r4, #16]
 8005acc:	6165      	str	r5, [r4, #20]
 8005ace:	61a5      	str	r5, [r4, #24]
 8005ad0:	305c      	adds	r0, #92	; 0x5c
 8005ad2:	f7ff fc2f 	bl	8005334 <memset>
 8005ad6:	6365      	str	r5, [r4, #52]	; 0x34
 8005ad8:	63a5      	str	r5, [r4, #56]	; 0x38
 8005ada:	64a5      	str	r5, [r4, #72]	; 0x48
 8005adc:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005ade:	0020      	movs	r0, r4
 8005ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ae2:	3468      	adds	r4, #104	; 0x68
 8005ae4:	e7d7      	b.n	8005a96 <__sfp+0x1e>
 8005ae6:	2104      	movs	r1, #4
 8005ae8:	0038      	movs	r0, r7
 8005aea:	f7ff ff57 	bl	800599c <__sfmoreglue>
 8005aee:	1e04      	subs	r4, r0, #0
 8005af0:	6030      	str	r0, [r6, #0]
 8005af2:	d1d5      	bne.n	8005aa0 <__sfp+0x28>
 8005af4:	f7ff ff70 	bl	80059d8 <__sfp_lock_release>
 8005af8:	230c      	movs	r3, #12
 8005afa:	603b      	str	r3, [r7, #0]
 8005afc:	e7ef      	b.n	8005ade <__sfp+0x66>
 8005afe:	46c0      	nop			; (mov r8, r8)
 8005b00:	08009750 	.word	0x08009750
 8005b04:	ffff0001 	.word	0xffff0001

08005b08 <fiprintf>:
 8005b08:	b40e      	push	{r1, r2, r3}
 8005b0a:	b503      	push	{r0, r1, lr}
 8005b0c:	0001      	movs	r1, r0
 8005b0e:	ab03      	add	r3, sp, #12
 8005b10:	4804      	ldr	r0, [pc, #16]	; (8005b24 <fiprintf+0x1c>)
 8005b12:	cb04      	ldmia	r3!, {r2}
 8005b14:	6800      	ldr	r0, [r0, #0]
 8005b16:	9301      	str	r3, [sp, #4]
 8005b18:	f000 fad2 	bl	80060c0 <_vfiprintf_r>
 8005b1c:	b002      	add	sp, #8
 8005b1e:	bc08      	pop	{r3}
 8005b20:	b003      	add	sp, #12
 8005b22:	4718      	bx	r3
 8005b24:	20000028 	.word	0x20000028

08005b28 <_fwalk_reent>:
 8005b28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b2a:	0004      	movs	r4, r0
 8005b2c:	0006      	movs	r6, r0
 8005b2e:	2700      	movs	r7, #0
 8005b30:	9101      	str	r1, [sp, #4]
 8005b32:	3448      	adds	r4, #72	; 0x48
 8005b34:	6863      	ldr	r3, [r4, #4]
 8005b36:	68a5      	ldr	r5, [r4, #8]
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	9b00      	ldr	r3, [sp, #0]
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	d504      	bpl.n	8005b4c <_fwalk_reent+0x24>
 8005b42:	6824      	ldr	r4, [r4, #0]
 8005b44:	2c00      	cmp	r4, #0
 8005b46:	d1f5      	bne.n	8005b34 <_fwalk_reent+0xc>
 8005b48:	0038      	movs	r0, r7
 8005b4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b4c:	89ab      	ldrh	r3, [r5, #12]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d908      	bls.n	8005b64 <_fwalk_reent+0x3c>
 8005b52:	220e      	movs	r2, #14
 8005b54:	5eab      	ldrsh	r3, [r5, r2]
 8005b56:	3301      	adds	r3, #1
 8005b58:	d004      	beq.n	8005b64 <_fwalk_reent+0x3c>
 8005b5a:	0029      	movs	r1, r5
 8005b5c:	0030      	movs	r0, r6
 8005b5e:	9b01      	ldr	r3, [sp, #4]
 8005b60:	4798      	blx	r3
 8005b62:	4307      	orrs	r7, r0
 8005b64:	3568      	adds	r5, #104	; 0x68
 8005b66:	e7e8      	b.n	8005b3a <_fwalk_reent+0x12>

08005b68 <__retarget_lock_init_recursive>:
 8005b68:	4770      	bx	lr

08005b6a <__retarget_lock_acquire_recursive>:
 8005b6a:	4770      	bx	lr

08005b6c <__retarget_lock_release_recursive>:
 8005b6c:	4770      	bx	lr
	...

08005b70 <__swhatbuf_r>:
 8005b70:	b570      	push	{r4, r5, r6, lr}
 8005b72:	000e      	movs	r6, r1
 8005b74:	001d      	movs	r5, r3
 8005b76:	230e      	movs	r3, #14
 8005b78:	5ec9      	ldrsh	r1, [r1, r3]
 8005b7a:	0014      	movs	r4, r2
 8005b7c:	b096      	sub	sp, #88	; 0x58
 8005b7e:	2900      	cmp	r1, #0
 8005b80:	da07      	bge.n	8005b92 <__swhatbuf_r+0x22>
 8005b82:	2300      	movs	r3, #0
 8005b84:	602b      	str	r3, [r5, #0]
 8005b86:	89b3      	ldrh	r3, [r6, #12]
 8005b88:	061b      	lsls	r3, r3, #24
 8005b8a:	d411      	bmi.n	8005bb0 <__swhatbuf_r+0x40>
 8005b8c:	2380      	movs	r3, #128	; 0x80
 8005b8e:	00db      	lsls	r3, r3, #3
 8005b90:	e00f      	b.n	8005bb2 <__swhatbuf_r+0x42>
 8005b92:	466a      	mov	r2, sp
 8005b94:	f000 fe26 	bl	80067e4 <_fstat_r>
 8005b98:	2800      	cmp	r0, #0
 8005b9a:	dbf2      	blt.n	8005b82 <__swhatbuf_r+0x12>
 8005b9c:	23f0      	movs	r3, #240	; 0xf0
 8005b9e:	9901      	ldr	r1, [sp, #4]
 8005ba0:	021b      	lsls	r3, r3, #8
 8005ba2:	4019      	ands	r1, r3
 8005ba4:	4b05      	ldr	r3, [pc, #20]	; (8005bbc <__swhatbuf_r+0x4c>)
 8005ba6:	18c9      	adds	r1, r1, r3
 8005ba8:	424b      	negs	r3, r1
 8005baa:	4159      	adcs	r1, r3
 8005bac:	6029      	str	r1, [r5, #0]
 8005bae:	e7ed      	b.n	8005b8c <__swhatbuf_r+0x1c>
 8005bb0:	2340      	movs	r3, #64	; 0x40
 8005bb2:	2000      	movs	r0, #0
 8005bb4:	6023      	str	r3, [r4, #0]
 8005bb6:	b016      	add	sp, #88	; 0x58
 8005bb8:	bd70      	pop	{r4, r5, r6, pc}
 8005bba:	46c0      	nop			; (mov r8, r8)
 8005bbc:	ffffe000 	.word	0xffffe000

08005bc0 <__smakebuf_r>:
 8005bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bc2:	2602      	movs	r6, #2
 8005bc4:	898b      	ldrh	r3, [r1, #12]
 8005bc6:	0005      	movs	r5, r0
 8005bc8:	000c      	movs	r4, r1
 8005bca:	4233      	tst	r3, r6
 8005bcc:	d006      	beq.n	8005bdc <__smakebuf_r+0x1c>
 8005bce:	0023      	movs	r3, r4
 8005bd0:	3347      	adds	r3, #71	; 0x47
 8005bd2:	6023      	str	r3, [r4, #0]
 8005bd4:	6123      	str	r3, [r4, #16]
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	6163      	str	r3, [r4, #20]
 8005bda:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005bdc:	466a      	mov	r2, sp
 8005bde:	ab01      	add	r3, sp, #4
 8005be0:	f7ff ffc6 	bl	8005b70 <__swhatbuf_r>
 8005be4:	9900      	ldr	r1, [sp, #0]
 8005be6:	0007      	movs	r7, r0
 8005be8:	0028      	movs	r0, r5
 8005bea:	f000 f881 	bl	8005cf0 <_malloc_r>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	d108      	bne.n	8005c04 <__smakebuf_r+0x44>
 8005bf2:	220c      	movs	r2, #12
 8005bf4:	5ea3      	ldrsh	r3, [r4, r2]
 8005bf6:	059a      	lsls	r2, r3, #22
 8005bf8:	d4ef      	bmi.n	8005bda <__smakebuf_r+0x1a>
 8005bfa:	2203      	movs	r2, #3
 8005bfc:	4393      	bics	r3, r2
 8005bfe:	431e      	orrs	r6, r3
 8005c00:	81a6      	strh	r6, [r4, #12]
 8005c02:	e7e4      	b.n	8005bce <__smakebuf_r+0xe>
 8005c04:	4b0f      	ldr	r3, [pc, #60]	; (8005c44 <__smakebuf_r+0x84>)
 8005c06:	62ab      	str	r3, [r5, #40]	; 0x28
 8005c08:	2380      	movs	r3, #128	; 0x80
 8005c0a:	89a2      	ldrh	r2, [r4, #12]
 8005c0c:	6020      	str	r0, [r4, #0]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	81a3      	strh	r3, [r4, #12]
 8005c12:	9b00      	ldr	r3, [sp, #0]
 8005c14:	6120      	str	r0, [r4, #16]
 8005c16:	6163      	str	r3, [r4, #20]
 8005c18:	9b01      	ldr	r3, [sp, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00d      	beq.n	8005c3a <__smakebuf_r+0x7a>
 8005c1e:	0028      	movs	r0, r5
 8005c20:	230e      	movs	r3, #14
 8005c22:	5ee1      	ldrsh	r1, [r4, r3]
 8005c24:	f000 fdf0 	bl	8006808 <_isatty_r>
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	d006      	beq.n	8005c3a <__smakebuf_r+0x7a>
 8005c2c:	2203      	movs	r2, #3
 8005c2e:	89a3      	ldrh	r3, [r4, #12]
 8005c30:	4393      	bics	r3, r2
 8005c32:	001a      	movs	r2, r3
 8005c34:	2301      	movs	r3, #1
 8005c36:	4313      	orrs	r3, r2
 8005c38:	81a3      	strh	r3, [r4, #12]
 8005c3a:	89a0      	ldrh	r0, [r4, #12]
 8005c3c:	4307      	orrs	r7, r0
 8005c3e:	81a7      	strh	r7, [r4, #12]
 8005c40:	e7cb      	b.n	8005bda <__smakebuf_r+0x1a>
 8005c42:	46c0      	nop			; (mov r8, r8)
 8005c44:	0800598d 	.word	0x0800598d

08005c48 <malloc>:
 8005c48:	b510      	push	{r4, lr}
 8005c4a:	4b03      	ldr	r3, [pc, #12]	; (8005c58 <malloc+0x10>)
 8005c4c:	0001      	movs	r1, r0
 8005c4e:	6818      	ldr	r0, [r3, #0]
 8005c50:	f000 f84e 	bl	8005cf0 <_malloc_r>
 8005c54:	bd10      	pop	{r4, pc}
 8005c56:	46c0      	nop			; (mov r8, r8)
 8005c58:	20000028 	.word	0x20000028

08005c5c <_free_r>:
 8005c5c:	b570      	push	{r4, r5, r6, lr}
 8005c5e:	0005      	movs	r5, r0
 8005c60:	2900      	cmp	r1, #0
 8005c62:	d010      	beq.n	8005c86 <_free_r+0x2a>
 8005c64:	1f0c      	subs	r4, r1, #4
 8005c66:	6823      	ldr	r3, [r4, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	da00      	bge.n	8005c6e <_free_r+0x12>
 8005c6c:	18e4      	adds	r4, r4, r3
 8005c6e:	0028      	movs	r0, r5
 8005c70:	f000 fe18 	bl	80068a4 <__malloc_lock>
 8005c74:	4a1d      	ldr	r2, [pc, #116]	; (8005cec <_free_r+0x90>)
 8005c76:	6813      	ldr	r3, [r2, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d105      	bne.n	8005c88 <_free_r+0x2c>
 8005c7c:	6063      	str	r3, [r4, #4]
 8005c7e:	6014      	str	r4, [r2, #0]
 8005c80:	0028      	movs	r0, r5
 8005c82:	f000 fe17 	bl	80068b4 <__malloc_unlock>
 8005c86:	bd70      	pop	{r4, r5, r6, pc}
 8005c88:	42a3      	cmp	r3, r4
 8005c8a:	d908      	bls.n	8005c9e <_free_r+0x42>
 8005c8c:	6821      	ldr	r1, [r4, #0]
 8005c8e:	1860      	adds	r0, r4, r1
 8005c90:	4283      	cmp	r3, r0
 8005c92:	d1f3      	bne.n	8005c7c <_free_r+0x20>
 8005c94:	6818      	ldr	r0, [r3, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	1841      	adds	r1, r0, r1
 8005c9a:	6021      	str	r1, [r4, #0]
 8005c9c:	e7ee      	b.n	8005c7c <_free_r+0x20>
 8005c9e:	001a      	movs	r2, r3
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <_free_r+0x4e>
 8005ca6:	42a3      	cmp	r3, r4
 8005ca8:	d9f9      	bls.n	8005c9e <_free_r+0x42>
 8005caa:	6811      	ldr	r1, [r2, #0]
 8005cac:	1850      	adds	r0, r2, r1
 8005cae:	42a0      	cmp	r0, r4
 8005cb0:	d10b      	bne.n	8005cca <_free_r+0x6e>
 8005cb2:	6820      	ldr	r0, [r4, #0]
 8005cb4:	1809      	adds	r1, r1, r0
 8005cb6:	1850      	adds	r0, r2, r1
 8005cb8:	6011      	str	r1, [r2, #0]
 8005cba:	4283      	cmp	r3, r0
 8005cbc:	d1e0      	bne.n	8005c80 <_free_r+0x24>
 8005cbe:	6818      	ldr	r0, [r3, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	1841      	adds	r1, r0, r1
 8005cc4:	6011      	str	r1, [r2, #0]
 8005cc6:	6053      	str	r3, [r2, #4]
 8005cc8:	e7da      	b.n	8005c80 <_free_r+0x24>
 8005cca:	42a0      	cmp	r0, r4
 8005ccc:	d902      	bls.n	8005cd4 <_free_r+0x78>
 8005cce:	230c      	movs	r3, #12
 8005cd0:	602b      	str	r3, [r5, #0]
 8005cd2:	e7d5      	b.n	8005c80 <_free_r+0x24>
 8005cd4:	6821      	ldr	r1, [r4, #0]
 8005cd6:	1860      	adds	r0, r4, r1
 8005cd8:	4283      	cmp	r3, r0
 8005cda:	d103      	bne.n	8005ce4 <_free_r+0x88>
 8005cdc:	6818      	ldr	r0, [r3, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	1841      	adds	r1, r0, r1
 8005ce2:	6021      	str	r1, [r4, #0]
 8005ce4:	6063      	str	r3, [r4, #4]
 8005ce6:	6054      	str	r4, [r2, #4]
 8005ce8:	e7ca      	b.n	8005c80 <_free_r+0x24>
 8005cea:	46c0      	nop			; (mov r8, r8)
 8005cec:	20000584 	.word	0x20000584

08005cf0 <_malloc_r>:
 8005cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	1ccd      	adds	r5, r1, #3
 8005cf6:	439d      	bics	r5, r3
 8005cf8:	3508      	adds	r5, #8
 8005cfa:	0006      	movs	r6, r0
 8005cfc:	2d0c      	cmp	r5, #12
 8005cfe:	d21f      	bcs.n	8005d40 <_malloc_r+0x50>
 8005d00:	250c      	movs	r5, #12
 8005d02:	42a9      	cmp	r1, r5
 8005d04:	d81e      	bhi.n	8005d44 <_malloc_r+0x54>
 8005d06:	0030      	movs	r0, r6
 8005d08:	f000 fdcc 	bl	80068a4 <__malloc_lock>
 8005d0c:	4925      	ldr	r1, [pc, #148]	; (8005da4 <_malloc_r+0xb4>)
 8005d0e:	680a      	ldr	r2, [r1, #0]
 8005d10:	0014      	movs	r4, r2
 8005d12:	2c00      	cmp	r4, #0
 8005d14:	d11a      	bne.n	8005d4c <_malloc_r+0x5c>
 8005d16:	4f24      	ldr	r7, [pc, #144]	; (8005da8 <_malloc_r+0xb8>)
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d104      	bne.n	8005d28 <_malloc_r+0x38>
 8005d1e:	0021      	movs	r1, r4
 8005d20:	0030      	movs	r0, r6
 8005d22:	f000 fcd3 	bl	80066cc <_sbrk_r>
 8005d26:	6038      	str	r0, [r7, #0]
 8005d28:	0029      	movs	r1, r5
 8005d2a:	0030      	movs	r0, r6
 8005d2c:	f000 fcce 	bl	80066cc <_sbrk_r>
 8005d30:	1c43      	adds	r3, r0, #1
 8005d32:	d12b      	bne.n	8005d8c <_malloc_r+0x9c>
 8005d34:	230c      	movs	r3, #12
 8005d36:	0030      	movs	r0, r6
 8005d38:	6033      	str	r3, [r6, #0]
 8005d3a:	f000 fdbb 	bl	80068b4 <__malloc_unlock>
 8005d3e:	e003      	b.n	8005d48 <_malloc_r+0x58>
 8005d40:	2d00      	cmp	r5, #0
 8005d42:	dade      	bge.n	8005d02 <_malloc_r+0x12>
 8005d44:	230c      	movs	r3, #12
 8005d46:	6033      	str	r3, [r6, #0]
 8005d48:	2000      	movs	r0, #0
 8005d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	1b5b      	subs	r3, r3, r5
 8005d50:	d419      	bmi.n	8005d86 <_malloc_r+0x96>
 8005d52:	2b0b      	cmp	r3, #11
 8005d54:	d903      	bls.n	8005d5e <_malloc_r+0x6e>
 8005d56:	6023      	str	r3, [r4, #0]
 8005d58:	18e4      	adds	r4, r4, r3
 8005d5a:	6025      	str	r5, [r4, #0]
 8005d5c:	e003      	b.n	8005d66 <_malloc_r+0x76>
 8005d5e:	6863      	ldr	r3, [r4, #4]
 8005d60:	42a2      	cmp	r2, r4
 8005d62:	d10e      	bne.n	8005d82 <_malloc_r+0x92>
 8005d64:	600b      	str	r3, [r1, #0]
 8005d66:	0030      	movs	r0, r6
 8005d68:	f000 fda4 	bl	80068b4 <__malloc_unlock>
 8005d6c:	0020      	movs	r0, r4
 8005d6e:	2207      	movs	r2, #7
 8005d70:	300b      	adds	r0, #11
 8005d72:	1d23      	adds	r3, r4, #4
 8005d74:	4390      	bics	r0, r2
 8005d76:	1ac2      	subs	r2, r0, r3
 8005d78:	4298      	cmp	r0, r3
 8005d7a:	d0e6      	beq.n	8005d4a <_malloc_r+0x5a>
 8005d7c:	1a1b      	subs	r3, r3, r0
 8005d7e:	50a3      	str	r3, [r4, r2]
 8005d80:	e7e3      	b.n	8005d4a <_malloc_r+0x5a>
 8005d82:	6053      	str	r3, [r2, #4]
 8005d84:	e7ef      	b.n	8005d66 <_malloc_r+0x76>
 8005d86:	0022      	movs	r2, r4
 8005d88:	6864      	ldr	r4, [r4, #4]
 8005d8a:	e7c2      	b.n	8005d12 <_malloc_r+0x22>
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	1cc4      	adds	r4, r0, #3
 8005d90:	439c      	bics	r4, r3
 8005d92:	42a0      	cmp	r0, r4
 8005d94:	d0e1      	beq.n	8005d5a <_malloc_r+0x6a>
 8005d96:	1a21      	subs	r1, r4, r0
 8005d98:	0030      	movs	r0, r6
 8005d9a:	f000 fc97 	bl	80066cc <_sbrk_r>
 8005d9e:	1c43      	adds	r3, r0, #1
 8005da0:	d1db      	bne.n	8005d5a <_malloc_r+0x6a>
 8005da2:	e7c7      	b.n	8005d34 <_malloc_r+0x44>
 8005da4:	20000584 	.word	0x20000584
 8005da8:	20000588 	.word	0x20000588

08005dac <__ssputs_r>:
 8005dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dae:	688e      	ldr	r6, [r1, #8]
 8005db0:	b085      	sub	sp, #20
 8005db2:	0007      	movs	r7, r0
 8005db4:	000c      	movs	r4, r1
 8005db6:	9203      	str	r2, [sp, #12]
 8005db8:	9301      	str	r3, [sp, #4]
 8005dba:	429e      	cmp	r6, r3
 8005dbc:	d83c      	bhi.n	8005e38 <__ssputs_r+0x8c>
 8005dbe:	2390      	movs	r3, #144	; 0x90
 8005dc0:	898a      	ldrh	r2, [r1, #12]
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	421a      	tst	r2, r3
 8005dc6:	d034      	beq.n	8005e32 <__ssputs_r+0x86>
 8005dc8:	2503      	movs	r5, #3
 8005dca:	6909      	ldr	r1, [r1, #16]
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	1a5b      	subs	r3, r3, r1
 8005dd0:	9302      	str	r3, [sp, #8]
 8005dd2:	6963      	ldr	r3, [r4, #20]
 8005dd4:	9802      	ldr	r0, [sp, #8]
 8005dd6:	435d      	muls	r5, r3
 8005dd8:	0feb      	lsrs	r3, r5, #31
 8005dda:	195d      	adds	r5, r3, r5
 8005ddc:	9b01      	ldr	r3, [sp, #4]
 8005dde:	106d      	asrs	r5, r5, #1
 8005de0:	3301      	adds	r3, #1
 8005de2:	181b      	adds	r3, r3, r0
 8005de4:	42ab      	cmp	r3, r5
 8005de6:	d900      	bls.n	8005dea <__ssputs_r+0x3e>
 8005de8:	001d      	movs	r5, r3
 8005dea:	0553      	lsls	r3, r2, #21
 8005dec:	d532      	bpl.n	8005e54 <__ssputs_r+0xa8>
 8005dee:	0029      	movs	r1, r5
 8005df0:	0038      	movs	r0, r7
 8005df2:	f7ff ff7d 	bl	8005cf0 <_malloc_r>
 8005df6:	1e06      	subs	r6, r0, #0
 8005df8:	d109      	bne.n	8005e0e <__ssputs_r+0x62>
 8005dfa:	230c      	movs	r3, #12
 8005dfc:	603b      	str	r3, [r7, #0]
 8005dfe:	2340      	movs	r3, #64	; 0x40
 8005e00:	2001      	movs	r0, #1
 8005e02:	89a2      	ldrh	r2, [r4, #12]
 8005e04:	4240      	negs	r0, r0
 8005e06:	4313      	orrs	r3, r2
 8005e08:	81a3      	strh	r3, [r4, #12]
 8005e0a:	b005      	add	sp, #20
 8005e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e0e:	9a02      	ldr	r2, [sp, #8]
 8005e10:	6921      	ldr	r1, [r4, #16]
 8005e12:	f000 fd2a 	bl	800686a <memcpy>
 8005e16:	89a3      	ldrh	r3, [r4, #12]
 8005e18:	4a14      	ldr	r2, [pc, #80]	; (8005e6c <__ssputs_r+0xc0>)
 8005e1a:	401a      	ands	r2, r3
 8005e1c:	2380      	movs	r3, #128	; 0x80
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	81a3      	strh	r3, [r4, #12]
 8005e22:	9b02      	ldr	r3, [sp, #8]
 8005e24:	6126      	str	r6, [r4, #16]
 8005e26:	18f6      	adds	r6, r6, r3
 8005e28:	6026      	str	r6, [r4, #0]
 8005e2a:	6165      	str	r5, [r4, #20]
 8005e2c:	9e01      	ldr	r6, [sp, #4]
 8005e2e:	1aed      	subs	r5, r5, r3
 8005e30:	60a5      	str	r5, [r4, #8]
 8005e32:	9b01      	ldr	r3, [sp, #4]
 8005e34:	429e      	cmp	r6, r3
 8005e36:	d900      	bls.n	8005e3a <__ssputs_r+0x8e>
 8005e38:	9e01      	ldr	r6, [sp, #4]
 8005e3a:	0032      	movs	r2, r6
 8005e3c:	9903      	ldr	r1, [sp, #12]
 8005e3e:	6820      	ldr	r0, [r4, #0]
 8005e40:	f000 fd1c 	bl	800687c <memmove>
 8005e44:	68a3      	ldr	r3, [r4, #8]
 8005e46:	2000      	movs	r0, #0
 8005e48:	1b9b      	subs	r3, r3, r6
 8005e4a:	60a3      	str	r3, [r4, #8]
 8005e4c:	6823      	ldr	r3, [r4, #0]
 8005e4e:	199e      	adds	r6, r3, r6
 8005e50:	6026      	str	r6, [r4, #0]
 8005e52:	e7da      	b.n	8005e0a <__ssputs_r+0x5e>
 8005e54:	002a      	movs	r2, r5
 8005e56:	0038      	movs	r0, r7
 8005e58:	f000 fd34 	bl	80068c4 <_realloc_r>
 8005e5c:	1e06      	subs	r6, r0, #0
 8005e5e:	d1e0      	bne.n	8005e22 <__ssputs_r+0x76>
 8005e60:	0038      	movs	r0, r7
 8005e62:	6921      	ldr	r1, [r4, #16]
 8005e64:	f7ff fefa 	bl	8005c5c <_free_r>
 8005e68:	e7c7      	b.n	8005dfa <__ssputs_r+0x4e>
 8005e6a:	46c0      	nop			; (mov r8, r8)
 8005e6c:	fffffb7f 	.word	0xfffffb7f

08005e70 <_svfiprintf_r>:
 8005e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e72:	b0a1      	sub	sp, #132	; 0x84
 8005e74:	9003      	str	r0, [sp, #12]
 8005e76:	001d      	movs	r5, r3
 8005e78:	898b      	ldrh	r3, [r1, #12]
 8005e7a:	000f      	movs	r7, r1
 8005e7c:	0016      	movs	r6, r2
 8005e7e:	061b      	lsls	r3, r3, #24
 8005e80:	d511      	bpl.n	8005ea6 <_svfiprintf_r+0x36>
 8005e82:	690b      	ldr	r3, [r1, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10e      	bne.n	8005ea6 <_svfiprintf_r+0x36>
 8005e88:	2140      	movs	r1, #64	; 0x40
 8005e8a:	f7ff ff31 	bl	8005cf0 <_malloc_r>
 8005e8e:	6038      	str	r0, [r7, #0]
 8005e90:	6138      	str	r0, [r7, #16]
 8005e92:	2800      	cmp	r0, #0
 8005e94:	d105      	bne.n	8005ea2 <_svfiprintf_r+0x32>
 8005e96:	230c      	movs	r3, #12
 8005e98:	9a03      	ldr	r2, [sp, #12]
 8005e9a:	3801      	subs	r0, #1
 8005e9c:	6013      	str	r3, [r2, #0]
 8005e9e:	b021      	add	sp, #132	; 0x84
 8005ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ea2:	2340      	movs	r3, #64	; 0x40
 8005ea4:	617b      	str	r3, [r7, #20]
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	ac08      	add	r4, sp, #32
 8005eaa:	6163      	str	r3, [r4, #20]
 8005eac:	3320      	adds	r3, #32
 8005eae:	7663      	strb	r3, [r4, #25]
 8005eb0:	3310      	adds	r3, #16
 8005eb2:	76a3      	strb	r3, [r4, #26]
 8005eb4:	9507      	str	r5, [sp, #28]
 8005eb6:	0035      	movs	r5, r6
 8005eb8:	782b      	ldrb	r3, [r5, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d001      	beq.n	8005ec2 <_svfiprintf_r+0x52>
 8005ebe:	2b25      	cmp	r3, #37	; 0x25
 8005ec0:	d147      	bne.n	8005f52 <_svfiprintf_r+0xe2>
 8005ec2:	1bab      	subs	r3, r5, r6
 8005ec4:	9305      	str	r3, [sp, #20]
 8005ec6:	42b5      	cmp	r5, r6
 8005ec8:	d00c      	beq.n	8005ee4 <_svfiprintf_r+0x74>
 8005eca:	0032      	movs	r2, r6
 8005ecc:	0039      	movs	r1, r7
 8005ece:	9803      	ldr	r0, [sp, #12]
 8005ed0:	f7ff ff6c 	bl	8005dac <__ssputs_r>
 8005ed4:	1c43      	adds	r3, r0, #1
 8005ed6:	d100      	bne.n	8005eda <_svfiprintf_r+0x6a>
 8005ed8:	e0ae      	b.n	8006038 <_svfiprintf_r+0x1c8>
 8005eda:	6962      	ldr	r2, [r4, #20]
 8005edc:	9b05      	ldr	r3, [sp, #20]
 8005ede:	4694      	mov	ip, r2
 8005ee0:	4463      	add	r3, ip
 8005ee2:	6163      	str	r3, [r4, #20]
 8005ee4:	782b      	ldrb	r3, [r5, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d100      	bne.n	8005eec <_svfiprintf_r+0x7c>
 8005eea:	e0a5      	b.n	8006038 <_svfiprintf_r+0x1c8>
 8005eec:	2201      	movs	r2, #1
 8005eee:	2300      	movs	r3, #0
 8005ef0:	4252      	negs	r2, r2
 8005ef2:	6062      	str	r2, [r4, #4]
 8005ef4:	a904      	add	r1, sp, #16
 8005ef6:	3254      	adds	r2, #84	; 0x54
 8005ef8:	1852      	adds	r2, r2, r1
 8005efa:	1c6e      	adds	r6, r5, #1
 8005efc:	6023      	str	r3, [r4, #0]
 8005efe:	60e3      	str	r3, [r4, #12]
 8005f00:	60a3      	str	r3, [r4, #8]
 8005f02:	7013      	strb	r3, [r2, #0]
 8005f04:	65a3      	str	r3, [r4, #88]	; 0x58
 8005f06:	2205      	movs	r2, #5
 8005f08:	7831      	ldrb	r1, [r6, #0]
 8005f0a:	4854      	ldr	r0, [pc, #336]	; (800605c <_svfiprintf_r+0x1ec>)
 8005f0c:	f000 fca2 	bl	8006854 <memchr>
 8005f10:	1c75      	adds	r5, r6, #1
 8005f12:	2800      	cmp	r0, #0
 8005f14:	d11f      	bne.n	8005f56 <_svfiprintf_r+0xe6>
 8005f16:	6822      	ldr	r2, [r4, #0]
 8005f18:	06d3      	lsls	r3, r2, #27
 8005f1a:	d504      	bpl.n	8005f26 <_svfiprintf_r+0xb6>
 8005f1c:	2353      	movs	r3, #83	; 0x53
 8005f1e:	a904      	add	r1, sp, #16
 8005f20:	185b      	adds	r3, r3, r1
 8005f22:	2120      	movs	r1, #32
 8005f24:	7019      	strb	r1, [r3, #0]
 8005f26:	0713      	lsls	r3, r2, #28
 8005f28:	d504      	bpl.n	8005f34 <_svfiprintf_r+0xc4>
 8005f2a:	2353      	movs	r3, #83	; 0x53
 8005f2c:	a904      	add	r1, sp, #16
 8005f2e:	185b      	adds	r3, r3, r1
 8005f30:	212b      	movs	r1, #43	; 0x2b
 8005f32:	7019      	strb	r1, [r3, #0]
 8005f34:	7833      	ldrb	r3, [r6, #0]
 8005f36:	2b2a      	cmp	r3, #42	; 0x2a
 8005f38:	d016      	beq.n	8005f68 <_svfiprintf_r+0xf8>
 8005f3a:	0035      	movs	r5, r6
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	200a      	movs	r0, #10
 8005f40:	68e3      	ldr	r3, [r4, #12]
 8005f42:	782a      	ldrb	r2, [r5, #0]
 8005f44:	1c6e      	adds	r6, r5, #1
 8005f46:	3a30      	subs	r2, #48	; 0x30
 8005f48:	2a09      	cmp	r2, #9
 8005f4a:	d94e      	bls.n	8005fea <_svfiprintf_r+0x17a>
 8005f4c:	2900      	cmp	r1, #0
 8005f4e:	d111      	bne.n	8005f74 <_svfiprintf_r+0x104>
 8005f50:	e017      	b.n	8005f82 <_svfiprintf_r+0x112>
 8005f52:	3501      	adds	r5, #1
 8005f54:	e7b0      	b.n	8005eb8 <_svfiprintf_r+0x48>
 8005f56:	4b41      	ldr	r3, [pc, #260]	; (800605c <_svfiprintf_r+0x1ec>)
 8005f58:	6822      	ldr	r2, [r4, #0]
 8005f5a:	1ac0      	subs	r0, r0, r3
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	4083      	lsls	r3, r0
 8005f60:	4313      	orrs	r3, r2
 8005f62:	002e      	movs	r6, r5
 8005f64:	6023      	str	r3, [r4, #0]
 8005f66:	e7ce      	b.n	8005f06 <_svfiprintf_r+0x96>
 8005f68:	9b07      	ldr	r3, [sp, #28]
 8005f6a:	1d19      	adds	r1, r3, #4
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	9107      	str	r1, [sp, #28]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	db01      	blt.n	8005f78 <_svfiprintf_r+0x108>
 8005f74:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f76:	e004      	b.n	8005f82 <_svfiprintf_r+0x112>
 8005f78:	425b      	negs	r3, r3
 8005f7a:	60e3      	str	r3, [r4, #12]
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	6023      	str	r3, [r4, #0]
 8005f82:	782b      	ldrb	r3, [r5, #0]
 8005f84:	2b2e      	cmp	r3, #46	; 0x2e
 8005f86:	d10a      	bne.n	8005f9e <_svfiprintf_r+0x12e>
 8005f88:	786b      	ldrb	r3, [r5, #1]
 8005f8a:	2b2a      	cmp	r3, #42	; 0x2a
 8005f8c:	d135      	bne.n	8005ffa <_svfiprintf_r+0x18a>
 8005f8e:	9b07      	ldr	r3, [sp, #28]
 8005f90:	3502      	adds	r5, #2
 8005f92:	1d1a      	adds	r2, r3, #4
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	9207      	str	r2, [sp, #28]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	db2b      	blt.n	8005ff4 <_svfiprintf_r+0x184>
 8005f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f9e:	4e30      	ldr	r6, [pc, #192]	; (8006060 <_svfiprintf_r+0x1f0>)
 8005fa0:	2203      	movs	r2, #3
 8005fa2:	0030      	movs	r0, r6
 8005fa4:	7829      	ldrb	r1, [r5, #0]
 8005fa6:	f000 fc55 	bl	8006854 <memchr>
 8005faa:	2800      	cmp	r0, #0
 8005fac:	d006      	beq.n	8005fbc <_svfiprintf_r+0x14c>
 8005fae:	2340      	movs	r3, #64	; 0x40
 8005fb0:	1b80      	subs	r0, r0, r6
 8005fb2:	4083      	lsls	r3, r0
 8005fb4:	6822      	ldr	r2, [r4, #0]
 8005fb6:	3501      	adds	r5, #1
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	6023      	str	r3, [r4, #0]
 8005fbc:	7829      	ldrb	r1, [r5, #0]
 8005fbe:	2206      	movs	r2, #6
 8005fc0:	4828      	ldr	r0, [pc, #160]	; (8006064 <_svfiprintf_r+0x1f4>)
 8005fc2:	1c6e      	adds	r6, r5, #1
 8005fc4:	7621      	strb	r1, [r4, #24]
 8005fc6:	f000 fc45 	bl	8006854 <memchr>
 8005fca:	2800      	cmp	r0, #0
 8005fcc:	d03c      	beq.n	8006048 <_svfiprintf_r+0x1d8>
 8005fce:	4b26      	ldr	r3, [pc, #152]	; (8006068 <_svfiprintf_r+0x1f8>)
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d125      	bne.n	8006020 <_svfiprintf_r+0x1b0>
 8005fd4:	2207      	movs	r2, #7
 8005fd6:	9b07      	ldr	r3, [sp, #28]
 8005fd8:	3307      	adds	r3, #7
 8005fda:	4393      	bics	r3, r2
 8005fdc:	3308      	adds	r3, #8
 8005fde:	9307      	str	r3, [sp, #28]
 8005fe0:	6963      	ldr	r3, [r4, #20]
 8005fe2:	9a04      	ldr	r2, [sp, #16]
 8005fe4:	189b      	adds	r3, r3, r2
 8005fe6:	6163      	str	r3, [r4, #20]
 8005fe8:	e765      	b.n	8005eb6 <_svfiprintf_r+0x46>
 8005fea:	4343      	muls	r3, r0
 8005fec:	0035      	movs	r5, r6
 8005fee:	2101      	movs	r1, #1
 8005ff0:	189b      	adds	r3, r3, r2
 8005ff2:	e7a6      	b.n	8005f42 <_svfiprintf_r+0xd2>
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	425b      	negs	r3, r3
 8005ff8:	e7d0      	b.n	8005f9c <_svfiprintf_r+0x12c>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	200a      	movs	r0, #10
 8005ffe:	001a      	movs	r2, r3
 8006000:	3501      	adds	r5, #1
 8006002:	6063      	str	r3, [r4, #4]
 8006004:	7829      	ldrb	r1, [r5, #0]
 8006006:	1c6e      	adds	r6, r5, #1
 8006008:	3930      	subs	r1, #48	; 0x30
 800600a:	2909      	cmp	r1, #9
 800600c:	d903      	bls.n	8006016 <_svfiprintf_r+0x1a6>
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0c5      	beq.n	8005f9e <_svfiprintf_r+0x12e>
 8006012:	9209      	str	r2, [sp, #36]	; 0x24
 8006014:	e7c3      	b.n	8005f9e <_svfiprintf_r+0x12e>
 8006016:	4342      	muls	r2, r0
 8006018:	0035      	movs	r5, r6
 800601a:	2301      	movs	r3, #1
 800601c:	1852      	adds	r2, r2, r1
 800601e:	e7f1      	b.n	8006004 <_svfiprintf_r+0x194>
 8006020:	ab07      	add	r3, sp, #28
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	003a      	movs	r2, r7
 8006026:	0021      	movs	r1, r4
 8006028:	4b10      	ldr	r3, [pc, #64]	; (800606c <_svfiprintf_r+0x1fc>)
 800602a:	9803      	ldr	r0, [sp, #12]
 800602c:	e000      	b.n	8006030 <_svfiprintf_r+0x1c0>
 800602e:	bf00      	nop
 8006030:	9004      	str	r0, [sp, #16]
 8006032:	9b04      	ldr	r3, [sp, #16]
 8006034:	3301      	adds	r3, #1
 8006036:	d1d3      	bne.n	8005fe0 <_svfiprintf_r+0x170>
 8006038:	89bb      	ldrh	r3, [r7, #12]
 800603a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800603c:	065b      	lsls	r3, r3, #25
 800603e:	d400      	bmi.n	8006042 <_svfiprintf_r+0x1d2>
 8006040:	e72d      	b.n	8005e9e <_svfiprintf_r+0x2e>
 8006042:	2001      	movs	r0, #1
 8006044:	4240      	negs	r0, r0
 8006046:	e72a      	b.n	8005e9e <_svfiprintf_r+0x2e>
 8006048:	ab07      	add	r3, sp, #28
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	003a      	movs	r2, r7
 800604e:	0021      	movs	r1, r4
 8006050:	4b06      	ldr	r3, [pc, #24]	; (800606c <_svfiprintf_r+0x1fc>)
 8006052:	9803      	ldr	r0, [sp, #12]
 8006054:	f000 f9de 	bl	8006414 <_printf_i>
 8006058:	e7ea      	b.n	8006030 <_svfiprintf_r+0x1c0>
 800605a:	46c0      	nop			; (mov r8, r8)
 800605c:	0800996c 	.word	0x0800996c
 8006060:	08009972 	.word	0x08009972
 8006064:	08009976 	.word	0x08009976
 8006068:	00000000 	.word	0x00000000
 800606c:	08005dad 	.word	0x08005dad

08006070 <__sfputc_r>:
 8006070:	6893      	ldr	r3, [r2, #8]
 8006072:	b510      	push	{r4, lr}
 8006074:	3b01      	subs	r3, #1
 8006076:	6093      	str	r3, [r2, #8]
 8006078:	2b00      	cmp	r3, #0
 800607a:	da04      	bge.n	8006086 <__sfputc_r+0x16>
 800607c:	6994      	ldr	r4, [r2, #24]
 800607e:	42a3      	cmp	r3, r4
 8006080:	db07      	blt.n	8006092 <__sfputc_r+0x22>
 8006082:	290a      	cmp	r1, #10
 8006084:	d005      	beq.n	8006092 <__sfputc_r+0x22>
 8006086:	6813      	ldr	r3, [r2, #0]
 8006088:	1c58      	adds	r0, r3, #1
 800608a:	6010      	str	r0, [r2, #0]
 800608c:	7019      	strb	r1, [r3, #0]
 800608e:	0008      	movs	r0, r1
 8006090:	bd10      	pop	{r4, pc}
 8006092:	f7ff fa9f 	bl	80055d4 <__swbuf_r>
 8006096:	0001      	movs	r1, r0
 8006098:	e7f9      	b.n	800608e <__sfputc_r+0x1e>

0800609a <__sfputs_r>:
 800609a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800609c:	0006      	movs	r6, r0
 800609e:	000f      	movs	r7, r1
 80060a0:	0014      	movs	r4, r2
 80060a2:	18d5      	adds	r5, r2, r3
 80060a4:	42ac      	cmp	r4, r5
 80060a6:	d101      	bne.n	80060ac <__sfputs_r+0x12>
 80060a8:	2000      	movs	r0, #0
 80060aa:	e007      	b.n	80060bc <__sfputs_r+0x22>
 80060ac:	7821      	ldrb	r1, [r4, #0]
 80060ae:	003a      	movs	r2, r7
 80060b0:	0030      	movs	r0, r6
 80060b2:	f7ff ffdd 	bl	8006070 <__sfputc_r>
 80060b6:	3401      	adds	r4, #1
 80060b8:	1c43      	adds	r3, r0, #1
 80060ba:	d1f3      	bne.n	80060a4 <__sfputs_r+0xa>
 80060bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080060c0 <_vfiprintf_r>:
 80060c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060c2:	b0a1      	sub	sp, #132	; 0x84
 80060c4:	0006      	movs	r6, r0
 80060c6:	000c      	movs	r4, r1
 80060c8:	001f      	movs	r7, r3
 80060ca:	9203      	str	r2, [sp, #12]
 80060cc:	2800      	cmp	r0, #0
 80060ce:	d004      	beq.n	80060da <_vfiprintf_r+0x1a>
 80060d0:	6983      	ldr	r3, [r0, #24]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <_vfiprintf_r+0x1a>
 80060d6:	f7ff fc97 	bl	8005a08 <__sinit>
 80060da:	4b8e      	ldr	r3, [pc, #568]	; (8006314 <_vfiprintf_r+0x254>)
 80060dc:	429c      	cmp	r4, r3
 80060de:	d11c      	bne.n	800611a <_vfiprintf_r+0x5a>
 80060e0:	6874      	ldr	r4, [r6, #4]
 80060e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060e4:	07db      	lsls	r3, r3, #31
 80060e6:	d405      	bmi.n	80060f4 <_vfiprintf_r+0x34>
 80060e8:	89a3      	ldrh	r3, [r4, #12]
 80060ea:	059b      	lsls	r3, r3, #22
 80060ec:	d402      	bmi.n	80060f4 <_vfiprintf_r+0x34>
 80060ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060f0:	f7ff fd3b 	bl	8005b6a <__retarget_lock_acquire_recursive>
 80060f4:	89a3      	ldrh	r3, [r4, #12]
 80060f6:	071b      	lsls	r3, r3, #28
 80060f8:	d502      	bpl.n	8006100 <_vfiprintf_r+0x40>
 80060fa:	6923      	ldr	r3, [r4, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d11d      	bne.n	800613c <_vfiprintf_r+0x7c>
 8006100:	0021      	movs	r1, r4
 8006102:	0030      	movs	r0, r6
 8006104:	f7ff fabc 	bl	8005680 <__swsetup_r>
 8006108:	2800      	cmp	r0, #0
 800610a:	d017      	beq.n	800613c <_vfiprintf_r+0x7c>
 800610c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800610e:	07db      	lsls	r3, r3, #31
 8006110:	d50d      	bpl.n	800612e <_vfiprintf_r+0x6e>
 8006112:	2001      	movs	r0, #1
 8006114:	4240      	negs	r0, r0
 8006116:	b021      	add	sp, #132	; 0x84
 8006118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800611a:	4b7f      	ldr	r3, [pc, #508]	; (8006318 <_vfiprintf_r+0x258>)
 800611c:	429c      	cmp	r4, r3
 800611e:	d101      	bne.n	8006124 <_vfiprintf_r+0x64>
 8006120:	68b4      	ldr	r4, [r6, #8]
 8006122:	e7de      	b.n	80060e2 <_vfiprintf_r+0x22>
 8006124:	4b7d      	ldr	r3, [pc, #500]	; (800631c <_vfiprintf_r+0x25c>)
 8006126:	429c      	cmp	r4, r3
 8006128:	d1db      	bne.n	80060e2 <_vfiprintf_r+0x22>
 800612a:	68f4      	ldr	r4, [r6, #12]
 800612c:	e7d9      	b.n	80060e2 <_vfiprintf_r+0x22>
 800612e:	89a3      	ldrh	r3, [r4, #12]
 8006130:	059b      	lsls	r3, r3, #22
 8006132:	d4ee      	bmi.n	8006112 <_vfiprintf_r+0x52>
 8006134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006136:	f7ff fd19 	bl	8005b6c <__retarget_lock_release_recursive>
 800613a:	e7ea      	b.n	8006112 <_vfiprintf_r+0x52>
 800613c:	2300      	movs	r3, #0
 800613e:	ad08      	add	r5, sp, #32
 8006140:	616b      	str	r3, [r5, #20]
 8006142:	3320      	adds	r3, #32
 8006144:	766b      	strb	r3, [r5, #25]
 8006146:	3310      	adds	r3, #16
 8006148:	76ab      	strb	r3, [r5, #26]
 800614a:	9707      	str	r7, [sp, #28]
 800614c:	9f03      	ldr	r7, [sp, #12]
 800614e:	783b      	ldrb	r3, [r7, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d001      	beq.n	8006158 <_vfiprintf_r+0x98>
 8006154:	2b25      	cmp	r3, #37	; 0x25
 8006156:	d14e      	bne.n	80061f6 <_vfiprintf_r+0x136>
 8006158:	9b03      	ldr	r3, [sp, #12]
 800615a:	1afb      	subs	r3, r7, r3
 800615c:	9305      	str	r3, [sp, #20]
 800615e:	9b03      	ldr	r3, [sp, #12]
 8006160:	429f      	cmp	r7, r3
 8006162:	d00d      	beq.n	8006180 <_vfiprintf_r+0xc0>
 8006164:	9b05      	ldr	r3, [sp, #20]
 8006166:	0021      	movs	r1, r4
 8006168:	0030      	movs	r0, r6
 800616a:	9a03      	ldr	r2, [sp, #12]
 800616c:	f7ff ff95 	bl	800609a <__sfputs_r>
 8006170:	1c43      	adds	r3, r0, #1
 8006172:	d100      	bne.n	8006176 <_vfiprintf_r+0xb6>
 8006174:	e0b5      	b.n	80062e2 <_vfiprintf_r+0x222>
 8006176:	696a      	ldr	r2, [r5, #20]
 8006178:	9b05      	ldr	r3, [sp, #20]
 800617a:	4694      	mov	ip, r2
 800617c:	4463      	add	r3, ip
 800617e:	616b      	str	r3, [r5, #20]
 8006180:	783b      	ldrb	r3, [r7, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d100      	bne.n	8006188 <_vfiprintf_r+0xc8>
 8006186:	e0ac      	b.n	80062e2 <_vfiprintf_r+0x222>
 8006188:	2201      	movs	r2, #1
 800618a:	1c7b      	adds	r3, r7, #1
 800618c:	9303      	str	r3, [sp, #12]
 800618e:	2300      	movs	r3, #0
 8006190:	4252      	negs	r2, r2
 8006192:	606a      	str	r2, [r5, #4]
 8006194:	a904      	add	r1, sp, #16
 8006196:	3254      	adds	r2, #84	; 0x54
 8006198:	1852      	adds	r2, r2, r1
 800619a:	602b      	str	r3, [r5, #0]
 800619c:	60eb      	str	r3, [r5, #12]
 800619e:	60ab      	str	r3, [r5, #8]
 80061a0:	7013      	strb	r3, [r2, #0]
 80061a2:	65ab      	str	r3, [r5, #88]	; 0x58
 80061a4:	9b03      	ldr	r3, [sp, #12]
 80061a6:	2205      	movs	r2, #5
 80061a8:	7819      	ldrb	r1, [r3, #0]
 80061aa:	485d      	ldr	r0, [pc, #372]	; (8006320 <_vfiprintf_r+0x260>)
 80061ac:	f000 fb52 	bl	8006854 <memchr>
 80061b0:	9b03      	ldr	r3, [sp, #12]
 80061b2:	1c5f      	adds	r7, r3, #1
 80061b4:	2800      	cmp	r0, #0
 80061b6:	d120      	bne.n	80061fa <_vfiprintf_r+0x13a>
 80061b8:	682a      	ldr	r2, [r5, #0]
 80061ba:	06d3      	lsls	r3, r2, #27
 80061bc:	d504      	bpl.n	80061c8 <_vfiprintf_r+0x108>
 80061be:	2353      	movs	r3, #83	; 0x53
 80061c0:	a904      	add	r1, sp, #16
 80061c2:	185b      	adds	r3, r3, r1
 80061c4:	2120      	movs	r1, #32
 80061c6:	7019      	strb	r1, [r3, #0]
 80061c8:	0713      	lsls	r3, r2, #28
 80061ca:	d504      	bpl.n	80061d6 <_vfiprintf_r+0x116>
 80061cc:	2353      	movs	r3, #83	; 0x53
 80061ce:	a904      	add	r1, sp, #16
 80061d0:	185b      	adds	r3, r3, r1
 80061d2:	212b      	movs	r1, #43	; 0x2b
 80061d4:	7019      	strb	r1, [r3, #0]
 80061d6:	9b03      	ldr	r3, [sp, #12]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	2b2a      	cmp	r3, #42	; 0x2a
 80061dc:	d016      	beq.n	800620c <_vfiprintf_r+0x14c>
 80061de:	2100      	movs	r1, #0
 80061e0:	68eb      	ldr	r3, [r5, #12]
 80061e2:	9f03      	ldr	r7, [sp, #12]
 80061e4:	783a      	ldrb	r2, [r7, #0]
 80061e6:	1c78      	adds	r0, r7, #1
 80061e8:	3a30      	subs	r2, #48	; 0x30
 80061ea:	4684      	mov	ip, r0
 80061ec:	2a09      	cmp	r2, #9
 80061ee:	d94f      	bls.n	8006290 <_vfiprintf_r+0x1d0>
 80061f0:	2900      	cmp	r1, #0
 80061f2:	d111      	bne.n	8006218 <_vfiprintf_r+0x158>
 80061f4:	e017      	b.n	8006226 <_vfiprintf_r+0x166>
 80061f6:	3701      	adds	r7, #1
 80061f8:	e7a9      	b.n	800614e <_vfiprintf_r+0x8e>
 80061fa:	4b49      	ldr	r3, [pc, #292]	; (8006320 <_vfiprintf_r+0x260>)
 80061fc:	682a      	ldr	r2, [r5, #0]
 80061fe:	1ac0      	subs	r0, r0, r3
 8006200:	2301      	movs	r3, #1
 8006202:	4083      	lsls	r3, r0
 8006204:	4313      	orrs	r3, r2
 8006206:	602b      	str	r3, [r5, #0]
 8006208:	9703      	str	r7, [sp, #12]
 800620a:	e7cb      	b.n	80061a4 <_vfiprintf_r+0xe4>
 800620c:	9b07      	ldr	r3, [sp, #28]
 800620e:	1d19      	adds	r1, r3, #4
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	9107      	str	r1, [sp, #28]
 8006214:	2b00      	cmp	r3, #0
 8006216:	db01      	blt.n	800621c <_vfiprintf_r+0x15c>
 8006218:	930b      	str	r3, [sp, #44]	; 0x2c
 800621a:	e004      	b.n	8006226 <_vfiprintf_r+0x166>
 800621c:	425b      	negs	r3, r3
 800621e:	60eb      	str	r3, [r5, #12]
 8006220:	2302      	movs	r3, #2
 8006222:	4313      	orrs	r3, r2
 8006224:	602b      	str	r3, [r5, #0]
 8006226:	783b      	ldrb	r3, [r7, #0]
 8006228:	2b2e      	cmp	r3, #46	; 0x2e
 800622a:	d10a      	bne.n	8006242 <_vfiprintf_r+0x182>
 800622c:	787b      	ldrb	r3, [r7, #1]
 800622e:	2b2a      	cmp	r3, #42	; 0x2a
 8006230:	d137      	bne.n	80062a2 <_vfiprintf_r+0x1e2>
 8006232:	9b07      	ldr	r3, [sp, #28]
 8006234:	3702      	adds	r7, #2
 8006236:	1d1a      	adds	r2, r3, #4
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	9207      	str	r2, [sp, #28]
 800623c:	2b00      	cmp	r3, #0
 800623e:	db2d      	blt.n	800629c <_vfiprintf_r+0x1dc>
 8006240:	9309      	str	r3, [sp, #36]	; 0x24
 8006242:	2203      	movs	r2, #3
 8006244:	7839      	ldrb	r1, [r7, #0]
 8006246:	4837      	ldr	r0, [pc, #220]	; (8006324 <_vfiprintf_r+0x264>)
 8006248:	f000 fb04 	bl	8006854 <memchr>
 800624c:	2800      	cmp	r0, #0
 800624e:	d007      	beq.n	8006260 <_vfiprintf_r+0x1a0>
 8006250:	4b34      	ldr	r3, [pc, #208]	; (8006324 <_vfiprintf_r+0x264>)
 8006252:	682a      	ldr	r2, [r5, #0]
 8006254:	1ac0      	subs	r0, r0, r3
 8006256:	2340      	movs	r3, #64	; 0x40
 8006258:	4083      	lsls	r3, r0
 800625a:	4313      	orrs	r3, r2
 800625c:	3701      	adds	r7, #1
 800625e:	602b      	str	r3, [r5, #0]
 8006260:	7839      	ldrb	r1, [r7, #0]
 8006262:	1c7b      	adds	r3, r7, #1
 8006264:	2206      	movs	r2, #6
 8006266:	4830      	ldr	r0, [pc, #192]	; (8006328 <_vfiprintf_r+0x268>)
 8006268:	9303      	str	r3, [sp, #12]
 800626a:	7629      	strb	r1, [r5, #24]
 800626c:	f000 faf2 	bl	8006854 <memchr>
 8006270:	2800      	cmp	r0, #0
 8006272:	d045      	beq.n	8006300 <_vfiprintf_r+0x240>
 8006274:	4b2d      	ldr	r3, [pc, #180]	; (800632c <_vfiprintf_r+0x26c>)
 8006276:	2b00      	cmp	r3, #0
 8006278:	d127      	bne.n	80062ca <_vfiprintf_r+0x20a>
 800627a:	2207      	movs	r2, #7
 800627c:	9b07      	ldr	r3, [sp, #28]
 800627e:	3307      	adds	r3, #7
 8006280:	4393      	bics	r3, r2
 8006282:	3308      	adds	r3, #8
 8006284:	9307      	str	r3, [sp, #28]
 8006286:	696b      	ldr	r3, [r5, #20]
 8006288:	9a04      	ldr	r2, [sp, #16]
 800628a:	189b      	adds	r3, r3, r2
 800628c:	616b      	str	r3, [r5, #20]
 800628e:	e75d      	b.n	800614c <_vfiprintf_r+0x8c>
 8006290:	210a      	movs	r1, #10
 8006292:	434b      	muls	r3, r1
 8006294:	4667      	mov	r7, ip
 8006296:	189b      	adds	r3, r3, r2
 8006298:	3909      	subs	r1, #9
 800629a:	e7a3      	b.n	80061e4 <_vfiprintf_r+0x124>
 800629c:	2301      	movs	r3, #1
 800629e:	425b      	negs	r3, r3
 80062a0:	e7ce      	b.n	8006240 <_vfiprintf_r+0x180>
 80062a2:	2300      	movs	r3, #0
 80062a4:	001a      	movs	r2, r3
 80062a6:	3701      	adds	r7, #1
 80062a8:	606b      	str	r3, [r5, #4]
 80062aa:	7839      	ldrb	r1, [r7, #0]
 80062ac:	1c78      	adds	r0, r7, #1
 80062ae:	3930      	subs	r1, #48	; 0x30
 80062b0:	4684      	mov	ip, r0
 80062b2:	2909      	cmp	r1, #9
 80062b4:	d903      	bls.n	80062be <_vfiprintf_r+0x1fe>
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d0c3      	beq.n	8006242 <_vfiprintf_r+0x182>
 80062ba:	9209      	str	r2, [sp, #36]	; 0x24
 80062bc:	e7c1      	b.n	8006242 <_vfiprintf_r+0x182>
 80062be:	230a      	movs	r3, #10
 80062c0:	435a      	muls	r2, r3
 80062c2:	4667      	mov	r7, ip
 80062c4:	1852      	adds	r2, r2, r1
 80062c6:	3b09      	subs	r3, #9
 80062c8:	e7ef      	b.n	80062aa <_vfiprintf_r+0x1ea>
 80062ca:	ab07      	add	r3, sp, #28
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	0022      	movs	r2, r4
 80062d0:	0029      	movs	r1, r5
 80062d2:	0030      	movs	r0, r6
 80062d4:	4b16      	ldr	r3, [pc, #88]	; (8006330 <_vfiprintf_r+0x270>)
 80062d6:	e000      	b.n	80062da <_vfiprintf_r+0x21a>
 80062d8:	bf00      	nop
 80062da:	9004      	str	r0, [sp, #16]
 80062dc:	9b04      	ldr	r3, [sp, #16]
 80062de:	3301      	adds	r3, #1
 80062e0:	d1d1      	bne.n	8006286 <_vfiprintf_r+0x1c6>
 80062e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062e4:	07db      	lsls	r3, r3, #31
 80062e6:	d405      	bmi.n	80062f4 <_vfiprintf_r+0x234>
 80062e8:	89a3      	ldrh	r3, [r4, #12]
 80062ea:	059b      	lsls	r3, r3, #22
 80062ec:	d402      	bmi.n	80062f4 <_vfiprintf_r+0x234>
 80062ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062f0:	f7ff fc3c 	bl	8005b6c <__retarget_lock_release_recursive>
 80062f4:	89a3      	ldrh	r3, [r4, #12]
 80062f6:	065b      	lsls	r3, r3, #25
 80062f8:	d500      	bpl.n	80062fc <_vfiprintf_r+0x23c>
 80062fa:	e70a      	b.n	8006112 <_vfiprintf_r+0x52>
 80062fc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80062fe:	e70a      	b.n	8006116 <_vfiprintf_r+0x56>
 8006300:	ab07      	add	r3, sp, #28
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	0022      	movs	r2, r4
 8006306:	0029      	movs	r1, r5
 8006308:	0030      	movs	r0, r6
 800630a:	4b09      	ldr	r3, [pc, #36]	; (8006330 <_vfiprintf_r+0x270>)
 800630c:	f000 f882 	bl	8006414 <_printf_i>
 8006310:	e7e3      	b.n	80062da <_vfiprintf_r+0x21a>
 8006312:	46c0      	nop			; (mov r8, r8)
 8006314:	0800992c 	.word	0x0800992c
 8006318:	0800994c 	.word	0x0800994c
 800631c:	0800990c 	.word	0x0800990c
 8006320:	0800996c 	.word	0x0800996c
 8006324:	08009972 	.word	0x08009972
 8006328:	08009976 	.word	0x08009976
 800632c:	00000000 	.word	0x00000000
 8006330:	0800609b 	.word	0x0800609b

08006334 <_printf_common>:
 8006334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006336:	0015      	movs	r5, r2
 8006338:	9301      	str	r3, [sp, #4]
 800633a:	688a      	ldr	r2, [r1, #8]
 800633c:	690b      	ldr	r3, [r1, #16]
 800633e:	000c      	movs	r4, r1
 8006340:	9000      	str	r0, [sp, #0]
 8006342:	4293      	cmp	r3, r2
 8006344:	da00      	bge.n	8006348 <_printf_common+0x14>
 8006346:	0013      	movs	r3, r2
 8006348:	0022      	movs	r2, r4
 800634a:	602b      	str	r3, [r5, #0]
 800634c:	3243      	adds	r2, #67	; 0x43
 800634e:	7812      	ldrb	r2, [r2, #0]
 8006350:	2a00      	cmp	r2, #0
 8006352:	d001      	beq.n	8006358 <_printf_common+0x24>
 8006354:	3301      	adds	r3, #1
 8006356:	602b      	str	r3, [r5, #0]
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	069b      	lsls	r3, r3, #26
 800635c:	d502      	bpl.n	8006364 <_printf_common+0x30>
 800635e:	682b      	ldr	r3, [r5, #0]
 8006360:	3302      	adds	r3, #2
 8006362:	602b      	str	r3, [r5, #0]
 8006364:	6822      	ldr	r2, [r4, #0]
 8006366:	2306      	movs	r3, #6
 8006368:	0017      	movs	r7, r2
 800636a:	401f      	ands	r7, r3
 800636c:	421a      	tst	r2, r3
 800636e:	d027      	beq.n	80063c0 <_printf_common+0x8c>
 8006370:	0023      	movs	r3, r4
 8006372:	3343      	adds	r3, #67	; 0x43
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	1e5a      	subs	r2, r3, #1
 8006378:	4193      	sbcs	r3, r2
 800637a:	6822      	ldr	r2, [r4, #0]
 800637c:	0692      	lsls	r2, r2, #26
 800637e:	d430      	bmi.n	80063e2 <_printf_common+0xae>
 8006380:	0022      	movs	r2, r4
 8006382:	9901      	ldr	r1, [sp, #4]
 8006384:	9800      	ldr	r0, [sp, #0]
 8006386:	9e08      	ldr	r6, [sp, #32]
 8006388:	3243      	adds	r2, #67	; 0x43
 800638a:	47b0      	blx	r6
 800638c:	1c43      	adds	r3, r0, #1
 800638e:	d025      	beq.n	80063dc <_printf_common+0xa8>
 8006390:	2306      	movs	r3, #6
 8006392:	6820      	ldr	r0, [r4, #0]
 8006394:	682a      	ldr	r2, [r5, #0]
 8006396:	68e1      	ldr	r1, [r4, #12]
 8006398:	2500      	movs	r5, #0
 800639a:	4003      	ands	r3, r0
 800639c:	2b04      	cmp	r3, #4
 800639e:	d103      	bne.n	80063a8 <_printf_common+0x74>
 80063a0:	1a8d      	subs	r5, r1, r2
 80063a2:	43eb      	mvns	r3, r5
 80063a4:	17db      	asrs	r3, r3, #31
 80063a6:	401d      	ands	r5, r3
 80063a8:	68a3      	ldr	r3, [r4, #8]
 80063aa:	6922      	ldr	r2, [r4, #16]
 80063ac:	4293      	cmp	r3, r2
 80063ae:	dd01      	ble.n	80063b4 <_printf_common+0x80>
 80063b0:	1a9b      	subs	r3, r3, r2
 80063b2:	18ed      	adds	r5, r5, r3
 80063b4:	2700      	movs	r7, #0
 80063b6:	42bd      	cmp	r5, r7
 80063b8:	d120      	bne.n	80063fc <_printf_common+0xc8>
 80063ba:	2000      	movs	r0, #0
 80063bc:	e010      	b.n	80063e0 <_printf_common+0xac>
 80063be:	3701      	adds	r7, #1
 80063c0:	68e3      	ldr	r3, [r4, #12]
 80063c2:	682a      	ldr	r2, [r5, #0]
 80063c4:	1a9b      	subs	r3, r3, r2
 80063c6:	42bb      	cmp	r3, r7
 80063c8:	ddd2      	ble.n	8006370 <_printf_common+0x3c>
 80063ca:	0022      	movs	r2, r4
 80063cc:	2301      	movs	r3, #1
 80063ce:	9901      	ldr	r1, [sp, #4]
 80063d0:	9800      	ldr	r0, [sp, #0]
 80063d2:	9e08      	ldr	r6, [sp, #32]
 80063d4:	3219      	adds	r2, #25
 80063d6:	47b0      	blx	r6
 80063d8:	1c43      	adds	r3, r0, #1
 80063da:	d1f0      	bne.n	80063be <_printf_common+0x8a>
 80063dc:	2001      	movs	r0, #1
 80063de:	4240      	negs	r0, r0
 80063e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80063e2:	2030      	movs	r0, #48	; 0x30
 80063e4:	18e1      	adds	r1, r4, r3
 80063e6:	3143      	adds	r1, #67	; 0x43
 80063e8:	7008      	strb	r0, [r1, #0]
 80063ea:	0021      	movs	r1, r4
 80063ec:	1c5a      	adds	r2, r3, #1
 80063ee:	3145      	adds	r1, #69	; 0x45
 80063f0:	7809      	ldrb	r1, [r1, #0]
 80063f2:	18a2      	adds	r2, r4, r2
 80063f4:	3243      	adds	r2, #67	; 0x43
 80063f6:	3302      	adds	r3, #2
 80063f8:	7011      	strb	r1, [r2, #0]
 80063fa:	e7c1      	b.n	8006380 <_printf_common+0x4c>
 80063fc:	0022      	movs	r2, r4
 80063fe:	2301      	movs	r3, #1
 8006400:	9901      	ldr	r1, [sp, #4]
 8006402:	9800      	ldr	r0, [sp, #0]
 8006404:	9e08      	ldr	r6, [sp, #32]
 8006406:	321a      	adds	r2, #26
 8006408:	47b0      	blx	r6
 800640a:	1c43      	adds	r3, r0, #1
 800640c:	d0e6      	beq.n	80063dc <_printf_common+0xa8>
 800640e:	3701      	adds	r7, #1
 8006410:	e7d1      	b.n	80063b6 <_printf_common+0x82>
	...

08006414 <_printf_i>:
 8006414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006416:	b08b      	sub	sp, #44	; 0x2c
 8006418:	9206      	str	r2, [sp, #24]
 800641a:	000a      	movs	r2, r1
 800641c:	3243      	adds	r2, #67	; 0x43
 800641e:	9307      	str	r3, [sp, #28]
 8006420:	9005      	str	r0, [sp, #20]
 8006422:	9204      	str	r2, [sp, #16]
 8006424:	7e0a      	ldrb	r2, [r1, #24]
 8006426:	000c      	movs	r4, r1
 8006428:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800642a:	2a78      	cmp	r2, #120	; 0x78
 800642c:	d806      	bhi.n	800643c <_printf_i+0x28>
 800642e:	2a62      	cmp	r2, #98	; 0x62
 8006430:	d808      	bhi.n	8006444 <_printf_i+0x30>
 8006432:	2a00      	cmp	r2, #0
 8006434:	d100      	bne.n	8006438 <_printf_i+0x24>
 8006436:	e0c0      	b.n	80065ba <_printf_i+0x1a6>
 8006438:	2a58      	cmp	r2, #88	; 0x58
 800643a:	d052      	beq.n	80064e2 <_printf_i+0xce>
 800643c:	0026      	movs	r6, r4
 800643e:	3642      	adds	r6, #66	; 0x42
 8006440:	7032      	strb	r2, [r6, #0]
 8006442:	e022      	b.n	800648a <_printf_i+0x76>
 8006444:	0010      	movs	r0, r2
 8006446:	3863      	subs	r0, #99	; 0x63
 8006448:	2815      	cmp	r0, #21
 800644a:	d8f7      	bhi.n	800643c <_printf_i+0x28>
 800644c:	f7f9 fe64 	bl	8000118 <__gnu_thumb1_case_shi>
 8006450:	001f0016 	.word	0x001f0016
 8006454:	fff6fff6 	.word	0xfff6fff6
 8006458:	fff6fff6 	.word	0xfff6fff6
 800645c:	fff6001f 	.word	0xfff6001f
 8006460:	fff6fff6 	.word	0xfff6fff6
 8006464:	00a8fff6 	.word	0x00a8fff6
 8006468:	009a0036 	.word	0x009a0036
 800646c:	fff6fff6 	.word	0xfff6fff6
 8006470:	fff600b9 	.word	0xfff600b9
 8006474:	fff60036 	.word	0xfff60036
 8006478:	009efff6 	.word	0x009efff6
 800647c:	0026      	movs	r6, r4
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	3642      	adds	r6, #66	; 0x42
 8006482:	1d11      	adds	r1, r2, #4
 8006484:	6019      	str	r1, [r3, #0]
 8006486:	6813      	ldr	r3, [r2, #0]
 8006488:	7033      	strb	r3, [r6, #0]
 800648a:	2301      	movs	r3, #1
 800648c:	e0a7      	b.n	80065de <_printf_i+0x1ca>
 800648e:	6808      	ldr	r0, [r1, #0]
 8006490:	6819      	ldr	r1, [r3, #0]
 8006492:	1d0a      	adds	r2, r1, #4
 8006494:	0605      	lsls	r5, r0, #24
 8006496:	d50b      	bpl.n	80064b0 <_printf_i+0x9c>
 8006498:	680d      	ldr	r5, [r1, #0]
 800649a:	601a      	str	r2, [r3, #0]
 800649c:	2d00      	cmp	r5, #0
 800649e:	da03      	bge.n	80064a8 <_printf_i+0x94>
 80064a0:	232d      	movs	r3, #45	; 0x2d
 80064a2:	9a04      	ldr	r2, [sp, #16]
 80064a4:	426d      	negs	r5, r5
 80064a6:	7013      	strb	r3, [r2, #0]
 80064a8:	4b61      	ldr	r3, [pc, #388]	; (8006630 <_printf_i+0x21c>)
 80064aa:	270a      	movs	r7, #10
 80064ac:	9303      	str	r3, [sp, #12]
 80064ae:	e032      	b.n	8006516 <_printf_i+0x102>
 80064b0:	680d      	ldr	r5, [r1, #0]
 80064b2:	601a      	str	r2, [r3, #0]
 80064b4:	0641      	lsls	r1, r0, #25
 80064b6:	d5f1      	bpl.n	800649c <_printf_i+0x88>
 80064b8:	b22d      	sxth	r5, r5
 80064ba:	e7ef      	b.n	800649c <_printf_i+0x88>
 80064bc:	680d      	ldr	r5, [r1, #0]
 80064be:	6819      	ldr	r1, [r3, #0]
 80064c0:	1d08      	adds	r0, r1, #4
 80064c2:	6018      	str	r0, [r3, #0]
 80064c4:	062e      	lsls	r6, r5, #24
 80064c6:	d501      	bpl.n	80064cc <_printf_i+0xb8>
 80064c8:	680d      	ldr	r5, [r1, #0]
 80064ca:	e003      	b.n	80064d4 <_printf_i+0xc0>
 80064cc:	066d      	lsls	r5, r5, #25
 80064ce:	d5fb      	bpl.n	80064c8 <_printf_i+0xb4>
 80064d0:	680d      	ldr	r5, [r1, #0]
 80064d2:	b2ad      	uxth	r5, r5
 80064d4:	4b56      	ldr	r3, [pc, #344]	; (8006630 <_printf_i+0x21c>)
 80064d6:	270a      	movs	r7, #10
 80064d8:	9303      	str	r3, [sp, #12]
 80064da:	2a6f      	cmp	r2, #111	; 0x6f
 80064dc:	d117      	bne.n	800650e <_printf_i+0xfa>
 80064de:	2708      	movs	r7, #8
 80064e0:	e015      	b.n	800650e <_printf_i+0xfa>
 80064e2:	3145      	adds	r1, #69	; 0x45
 80064e4:	700a      	strb	r2, [r1, #0]
 80064e6:	4a52      	ldr	r2, [pc, #328]	; (8006630 <_printf_i+0x21c>)
 80064e8:	9203      	str	r2, [sp, #12]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	6821      	ldr	r1, [r4, #0]
 80064ee:	ca20      	ldmia	r2!, {r5}
 80064f0:	601a      	str	r2, [r3, #0]
 80064f2:	0608      	lsls	r0, r1, #24
 80064f4:	d550      	bpl.n	8006598 <_printf_i+0x184>
 80064f6:	07cb      	lsls	r3, r1, #31
 80064f8:	d502      	bpl.n	8006500 <_printf_i+0xec>
 80064fa:	2320      	movs	r3, #32
 80064fc:	4319      	orrs	r1, r3
 80064fe:	6021      	str	r1, [r4, #0]
 8006500:	2710      	movs	r7, #16
 8006502:	2d00      	cmp	r5, #0
 8006504:	d103      	bne.n	800650e <_printf_i+0xfa>
 8006506:	2320      	movs	r3, #32
 8006508:	6822      	ldr	r2, [r4, #0]
 800650a:	439a      	bics	r2, r3
 800650c:	6022      	str	r2, [r4, #0]
 800650e:	0023      	movs	r3, r4
 8006510:	2200      	movs	r2, #0
 8006512:	3343      	adds	r3, #67	; 0x43
 8006514:	701a      	strb	r2, [r3, #0]
 8006516:	6863      	ldr	r3, [r4, #4]
 8006518:	60a3      	str	r3, [r4, #8]
 800651a:	2b00      	cmp	r3, #0
 800651c:	db03      	blt.n	8006526 <_printf_i+0x112>
 800651e:	2204      	movs	r2, #4
 8006520:	6821      	ldr	r1, [r4, #0]
 8006522:	4391      	bics	r1, r2
 8006524:	6021      	str	r1, [r4, #0]
 8006526:	2d00      	cmp	r5, #0
 8006528:	d102      	bne.n	8006530 <_printf_i+0x11c>
 800652a:	9e04      	ldr	r6, [sp, #16]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00c      	beq.n	800654a <_printf_i+0x136>
 8006530:	9e04      	ldr	r6, [sp, #16]
 8006532:	0028      	movs	r0, r5
 8006534:	0039      	movs	r1, r7
 8006536:	f7f9 fe7f 	bl	8000238 <__aeabi_uidivmod>
 800653a:	9b03      	ldr	r3, [sp, #12]
 800653c:	3e01      	subs	r6, #1
 800653e:	5c5b      	ldrb	r3, [r3, r1]
 8006540:	7033      	strb	r3, [r6, #0]
 8006542:	002b      	movs	r3, r5
 8006544:	0005      	movs	r5, r0
 8006546:	429f      	cmp	r7, r3
 8006548:	d9f3      	bls.n	8006532 <_printf_i+0x11e>
 800654a:	2f08      	cmp	r7, #8
 800654c:	d109      	bne.n	8006562 <_printf_i+0x14e>
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	07db      	lsls	r3, r3, #31
 8006552:	d506      	bpl.n	8006562 <_printf_i+0x14e>
 8006554:	6863      	ldr	r3, [r4, #4]
 8006556:	6922      	ldr	r2, [r4, #16]
 8006558:	4293      	cmp	r3, r2
 800655a:	dc02      	bgt.n	8006562 <_printf_i+0x14e>
 800655c:	2330      	movs	r3, #48	; 0x30
 800655e:	3e01      	subs	r6, #1
 8006560:	7033      	strb	r3, [r6, #0]
 8006562:	9b04      	ldr	r3, [sp, #16]
 8006564:	1b9b      	subs	r3, r3, r6
 8006566:	6123      	str	r3, [r4, #16]
 8006568:	9b07      	ldr	r3, [sp, #28]
 800656a:	0021      	movs	r1, r4
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	9805      	ldr	r0, [sp, #20]
 8006570:	9b06      	ldr	r3, [sp, #24]
 8006572:	aa09      	add	r2, sp, #36	; 0x24
 8006574:	f7ff fede 	bl	8006334 <_printf_common>
 8006578:	1c43      	adds	r3, r0, #1
 800657a:	d135      	bne.n	80065e8 <_printf_i+0x1d4>
 800657c:	2001      	movs	r0, #1
 800657e:	4240      	negs	r0, r0
 8006580:	b00b      	add	sp, #44	; 0x2c
 8006582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006584:	2220      	movs	r2, #32
 8006586:	6809      	ldr	r1, [r1, #0]
 8006588:	430a      	orrs	r2, r1
 800658a:	6022      	str	r2, [r4, #0]
 800658c:	0022      	movs	r2, r4
 800658e:	2178      	movs	r1, #120	; 0x78
 8006590:	3245      	adds	r2, #69	; 0x45
 8006592:	7011      	strb	r1, [r2, #0]
 8006594:	4a27      	ldr	r2, [pc, #156]	; (8006634 <_printf_i+0x220>)
 8006596:	e7a7      	b.n	80064e8 <_printf_i+0xd4>
 8006598:	0648      	lsls	r0, r1, #25
 800659a:	d5ac      	bpl.n	80064f6 <_printf_i+0xe2>
 800659c:	b2ad      	uxth	r5, r5
 800659e:	e7aa      	b.n	80064f6 <_printf_i+0xe2>
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	680d      	ldr	r5, [r1, #0]
 80065a4:	1d10      	adds	r0, r2, #4
 80065a6:	6949      	ldr	r1, [r1, #20]
 80065a8:	6018      	str	r0, [r3, #0]
 80065aa:	6813      	ldr	r3, [r2, #0]
 80065ac:	062e      	lsls	r6, r5, #24
 80065ae:	d501      	bpl.n	80065b4 <_printf_i+0x1a0>
 80065b0:	6019      	str	r1, [r3, #0]
 80065b2:	e002      	b.n	80065ba <_printf_i+0x1a6>
 80065b4:	066d      	lsls	r5, r5, #25
 80065b6:	d5fb      	bpl.n	80065b0 <_printf_i+0x19c>
 80065b8:	8019      	strh	r1, [r3, #0]
 80065ba:	2300      	movs	r3, #0
 80065bc:	9e04      	ldr	r6, [sp, #16]
 80065be:	6123      	str	r3, [r4, #16]
 80065c0:	e7d2      	b.n	8006568 <_printf_i+0x154>
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	1d11      	adds	r1, r2, #4
 80065c6:	6019      	str	r1, [r3, #0]
 80065c8:	6816      	ldr	r6, [r2, #0]
 80065ca:	2100      	movs	r1, #0
 80065cc:	0030      	movs	r0, r6
 80065ce:	6862      	ldr	r2, [r4, #4]
 80065d0:	f000 f940 	bl	8006854 <memchr>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	d001      	beq.n	80065dc <_printf_i+0x1c8>
 80065d8:	1b80      	subs	r0, r0, r6
 80065da:	6060      	str	r0, [r4, #4]
 80065dc:	6863      	ldr	r3, [r4, #4]
 80065de:	6123      	str	r3, [r4, #16]
 80065e0:	2300      	movs	r3, #0
 80065e2:	9a04      	ldr	r2, [sp, #16]
 80065e4:	7013      	strb	r3, [r2, #0]
 80065e6:	e7bf      	b.n	8006568 <_printf_i+0x154>
 80065e8:	6923      	ldr	r3, [r4, #16]
 80065ea:	0032      	movs	r2, r6
 80065ec:	9906      	ldr	r1, [sp, #24]
 80065ee:	9805      	ldr	r0, [sp, #20]
 80065f0:	9d07      	ldr	r5, [sp, #28]
 80065f2:	47a8      	blx	r5
 80065f4:	1c43      	adds	r3, r0, #1
 80065f6:	d0c1      	beq.n	800657c <_printf_i+0x168>
 80065f8:	6823      	ldr	r3, [r4, #0]
 80065fa:	079b      	lsls	r3, r3, #30
 80065fc:	d415      	bmi.n	800662a <_printf_i+0x216>
 80065fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006600:	68e0      	ldr	r0, [r4, #12]
 8006602:	4298      	cmp	r0, r3
 8006604:	dabc      	bge.n	8006580 <_printf_i+0x16c>
 8006606:	0018      	movs	r0, r3
 8006608:	e7ba      	b.n	8006580 <_printf_i+0x16c>
 800660a:	0022      	movs	r2, r4
 800660c:	2301      	movs	r3, #1
 800660e:	9906      	ldr	r1, [sp, #24]
 8006610:	9805      	ldr	r0, [sp, #20]
 8006612:	9e07      	ldr	r6, [sp, #28]
 8006614:	3219      	adds	r2, #25
 8006616:	47b0      	blx	r6
 8006618:	1c43      	adds	r3, r0, #1
 800661a:	d0af      	beq.n	800657c <_printf_i+0x168>
 800661c:	3501      	adds	r5, #1
 800661e:	68e3      	ldr	r3, [r4, #12]
 8006620:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006622:	1a9b      	subs	r3, r3, r2
 8006624:	42ab      	cmp	r3, r5
 8006626:	dcf0      	bgt.n	800660a <_printf_i+0x1f6>
 8006628:	e7e9      	b.n	80065fe <_printf_i+0x1ea>
 800662a:	2500      	movs	r5, #0
 800662c:	e7f7      	b.n	800661e <_printf_i+0x20a>
 800662e:	46c0      	nop			; (mov r8, r8)
 8006630:	0800997d 	.word	0x0800997d
 8006634:	0800998e 	.word	0x0800998e

08006638 <_putc_r>:
 8006638:	b570      	push	{r4, r5, r6, lr}
 800663a:	0006      	movs	r6, r0
 800663c:	000d      	movs	r5, r1
 800663e:	0014      	movs	r4, r2
 8006640:	2800      	cmp	r0, #0
 8006642:	d004      	beq.n	800664e <_putc_r+0x16>
 8006644:	6983      	ldr	r3, [r0, #24]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <_putc_r+0x16>
 800664a:	f7ff f9dd 	bl	8005a08 <__sinit>
 800664e:	4b1c      	ldr	r3, [pc, #112]	; (80066c0 <_putc_r+0x88>)
 8006650:	429c      	cmp	r4, r3
 8006652:	d124      	bne.n	800669e <_putc_r+0x66>
 8006654:	6874      	ldr	r4, [r6, #4]
 8006656:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006658:	07db      	lsls	r3, r3, #31
 800665a:	d405      	bmi.n	8006668 <_putc_r+0x30>
 800665c:	89a3      	ldrh	r3, [r4, #12]
 800665e:	059b      	lsls	r3, r3, #22
 8006660:	d402      	bmi.n	8006668 <_putc_r+0x30>
 8006662:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006664:	f7ff fa81 	bl	8005b6a <__retarget_lock_acquire_recursive>
 8006668:	68a3      	ldr	r3, [r4, #8]
 800666a:	3b01      	subs	r3, #1
 800666c:	60a3      	str	r3, [r4, #8]
 800666e:	2b00      	cmp	r3, #0
 8006670:	da05      	bge.n	800667e <_putc_r+0x46>
 8006672:	69a2      	ldr	r2, [r4, #24]
 8006674:	4293      	cmp	r3, r2
 8006676:	db1c      	blt.n	80066b2 <_putc_r+0x7a>
 8006678:	b2eb      	uxtb	r3, r5
 800667a:	2b0a      	cmp	r3, #10
 800667c:	d019      	beq.n	80066b2 <_putc_r+0x7a>
 800667e:	6823      	ldr	r3, [r4, #0]
 8006680:	1c5a      	adds	r2, r3, #1
 8006682:	6022      	str	r2, [r4, #0]
 8006684:	701d      	strb	r5, [r3, #0]
 8006686:	b2ed      	uxtb	r5, r5
 8006688:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800668a:	07db      	lsls	r3, r3, #31
 800668c:	d405      	bmi.n	800669a <_putc_r+0x62>
 800668e:	89a3      	ldrh	r3, [r4, #12]
 8006690:	059b      	lsls	r3, r3, #22
 8006692:	d402      	bmi.n	800669a <_putc_r+0x62>
 8006694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006696:	f7ff fa69 	bl	8005b6c <__retarget_lock_release_recursive>
 800669a:	0028      	movs	r0, r5
 800669c:	bd70      	pop	{r4, r5, r6, pc}
 800669e:	4b09      	ldr	r3, [pc, #36]	; (80066c4 <_putc_r+0x8c>)
 80066a0:	429c      	cmp	r4, r3
 80066a2:	d101      	bne.n	80066a8 <_putc_r+0x70>
 80066a4:	68b4      	ldr	r4, [r6, #8]
 80066a6:	e7d6      	b.n	8006656 <_putc_r+0x1e>
 80066a8:	4b07      	ldr	r3, [pc, #28]	; (80066c8 <_putc_r+0x90>)
 80066aa:	429c      	cmp	r4, r3
 80066ac:	d1d3      	bne.n	8006656 <_putc_r+0x1e>
 80066ae:	68f4      	ldr	r4, [r6, #12]
 80066b0:	e7d1      	b.n	8006656 <_putc_r+0x1e>
 80066b2:	0029      	movs	r1, r5
 80066b4:	0022      	movs	r2, r4
 80066b6:	0030      	movs	r0, r6
 80066b8:	f7fe ff8c 	bl	80055d4 <__swbuf_r>
 80066bc:	0005      	movs	r5, r0
 80066be:	e7e3      	b.n	8006688 <_putc_r+0x50>
 80066c0:	0800992c 	.word	0x0800992c
 80066c4:	0800994c 	.word	0x0800994c
 80066c8:	0800990c 	.word	0x0800990c

080066cc <_sbrk_r>:
 80066cc:	2300      	movs	r3, #0
 80066ce:	b570      	push	{r4, r5, r6, lr}
 80066d0:	4d06      	ldr	r5, [pc, #24]	; (80066ec <_sbrk_r+0x20>)
 80066d2:	0004      	movs	r4, r0
 80066d4:	0008      	movs	r0, r1
 80066d6:	602b      	str	r3, [r5, #0]
 80066d8:	f7fb ff8c 	bl	80025f4 <_sbrk>
 80066dc:	1c43      	adds	r3, r0, #1
 80066de:	d103      	bne.n	80066e8 <_sbrk_r+0x1c>
 80066e0:	682b      	ldr	r3, [r5, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d000      	beq.n	80066e8 <_sbrk_r+0x1c>
 80066e6:	6023      	str	r3, [r4, #0]
 80066e8:	bd70      	pop	{r4, r5, r6, pc}
 80066ea:	46c0      	nop			; (mov r8, r8)
 80066ec:	2000077c 	.word	0x2000077c

080066f0 <__sread>:
 80066f0:	b570      	push	{r4, r5, r6, lr}
 80066f2:	000c      	movs	r4, r1
 80066f4:	250e      	movs	r5, #14
 80066f6:	5f49      	ldrsh	r1, [r1, r5]
 80066f8:	f000 f90a 	bl	8006910 <_read_r>
 80066fc:	2800      	cmp	r0, #0
 80066fe:	db03      	blt.n	8006708 <__sread+0x18>
 8006700:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006702:	181b      	adds	r3, r3, r0
 8006704:	6563      	str	r3, [r4, #84]	; 0x54
 8006706:	bd70      	pop	{r4, r5, r6, pc}
 8006708:	89a3      	ldrh	r3, [r4, #12]
 800670a:	4a02      	ldr	r2, [pc, #8]	; (8006714 <__sread+0x24>)
 800670c:	4013      	ands	r3, r2
 800670e:	81a3      	strh	r3, [r4, #12]
 8006710:	e7f9      	b.n	8006706 <__sread+0x16>
 8006712:	46c0      	nop			; (mov r8, r8)
 8006714:	ffffefff 	.word	0xffffefff

08006718 <__swrite>:
 8006718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671a:	001f      	movs	r7, r3
 800671c:	898b      	ldrh	r3, [r1, #12]
 800671e:	0005      	movs	r5, r0
 8006720:	000c      	movs	r4, r1
 8006722:	0016      	movs	r6, r2
 8006724:	05db      	lsls	r3, r3, #23
 8006726:	d505      	bpl.n	8006734 <__swrite+0x1c>
 8006728:	230e      	movs	r3, #14
 800672a:	5ec9      	ldrsh	r1, [r1, r3]
 800672c:	2200      	movs	r2, #0
 800672e:	2302      	movs	r3, #2
 8006730:	f000 f87c 	bl	800682c <_lseek_r>
 8006734:	89a3      	ldrh	r3, [r4, #12]
 8006736:	4a05      	ldr	r2, [pc, #20]	; (800674c <__swrite+0x34>)
 8006738:	0028      	movs	r0, r5
 800673a:	4013      	ands	r3, r2
 800673c:	81a3      	strh	r3, [r4, #12]
 800673e:	0032      	movs	r2, r6
 8006740:	230e      	movs	r3, #14
 8006742:	5ee1      	ldrsh	r1, [r4, r3]
 8006744:	003b      	movs	r3, r7
 8006746:	f000 f81f 	bl	8006788 <_write_r>
 800674a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800674c:	ffffefff 	.word	0xffffefff

08006750 <__sseek>:
 8006750:	b570      	push	{r4, r5, r6, lr}
 8006752:	000c      	movs	r4, r1
 8006754:	250e      	movs	r5, #14
 8006756:	5f49      	ldrsh	r1, [r1, r5]
 8006758:	f000 f868 	bl	800682c <_lseek_r>
 800675c:	89a3      	ldrh	r3, [r4, #12]
 800675e:	1c42      	adds	r2, r0, #1
 8006760:	d103      	bne.n	800676a <__sseek+0x1a>
 8006762:	4a05      	ldr	r2, [pc, #20]	; (8006778 <__sseek+0x28>)
 8006764:	4013      	ands	r3, r2
 8006766:	81a3      	strh	r3, [r4, #12]
 8006768:	bd70      	pop	{r4, r5, r6, pc}
 800676a:	2280      	movs	r2, #128	; 0x80
 800676c:	0152      	lsls	r2, r2, #5
 800676e:	4313      	orrs	r3, r2
 8006770:	81a3      	strh	r3, [r4, #12]
 8006772:	6560      	str	r0, [r4, #84]	; 0x54
 8006774:	e7f8      	b.n	8006768 <__sseek+0x18>
 8006776:	46c0      	nop			; (mov r8, r8)
 8006778:	ffffefff 	.word	0xffffefff

0800677c <__sclose>:
 800677c:	b510      	push	{r4, lr}
 800677e:	230e      	movs	r3, #14
 8006780:	5ec9      	ldrsh	r1, [r1, r3]
 8006782:	f000 f81d 	bl	80067c0 <_close_r>
 8006786:	bd10      	pop	{r4, pc}

08006788 <_write_r>:
 8006788:	b570      	push	{r4, r5, r6, lr}
 800678a:	0004      	movs	r4, r0
 800678c:	0008      	movs	r0, r1
 800678e:	0011      	movs	r1, r2
 8006790:	001a      	movs	r2, r3
 8006792:	2300      	movs	r3, #0
 8006794:	4d05      	ldr	r5, [pc, #20]	; (80067ac <_write_r+0x24>)
 8006796:	602b      	str	r3, [r5, #0]
 8006798:	f7fa fb4e 	bl	8000e38 <_write>
 800679c:	1c43      	adds	r3, r0, #1
 800679e:	d103      	bne.n	80067a8 <_write_r+0x20>
 80067a0:	682b      	ldr	r3, [r5, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d000      	beq.n	80067a8 <_write_r+0x20>
 80067a6:	6023      	str	r3, [r4, #0]
 80067a8:	bd70      	pop	{r4, r5, r6, pc}
 80067aa:	46c0      	nop			; (mov r8, r8)
 80067ac:	2000077c 	.word	0x2000077c

080067b0 <abort>:
 80067b0:	2006      	movs	r0, #6
 80067b2:	b510      	push	{r4, lr}
 80067b4:	f000 f8ea 	bl	800698c <raise>
 80067b8:	2001      	movs	r0, #1
 80067ba:	f7fb fec5 	bl	8002548 <_exit>
	...

080067c0 <_close_r>:
 80067c0:	2300      	movs	r3, #0
 80067c2:	b570      	push	{r4, r5, r6, lr}
 80067c4:	4d06      	ldr	r5, [pc, #24]	; (80067e0 <_close_r+0x20>)
 80067c6:	0004      	movs	r4, r0
 80067c8:	0008      	movs	r0, r1
 80067ca:	602b      	str	r3, [r5, #0]
 80067cc:	f7fb fee5 	bl	800259a <_close>
 80067d0:	1c43      	adds	r3, r0, #1
 80067d2:	d103      	bne.n	80067dc <_close_r+0x1c>
 80067d4:	682b      	ldr	r3, [r5, #0]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d000      	beq.n	80067dc <_close_r+0x1c>
 80067da:	6023      	str	r3, [r4, #0]
 80067dc:	bd70      	pop	{r4, r5, r6, pc}
 80067de:	46c0      	nop			; (mov r8, r8)
 80067e0:	2000077c 	.word	0x2000077c

080067e4 <_fstat_r>:
 80067e4:	2300      	movs	r3, #0
 80067e6:	b570      	push	{r4, r5, r6, lr}
 80067e8:	4d06      	ldr	r5, [pc, #24]	; (8006804 <_fstat_r+0x20>)
 80067ea:	0004      	movs	r4, r0
 80067ec:	0008      	movs	r0, r1
 80067ee:	0011      	movs	r1, r2
 80067f0:	602b      	str	r3, [r5, #0]
 80067f2:	f7fb fedc 	bl	80025ae <_fstat>
 80067f6:	1c43      	adds	r3, r0, #1
 80067f8:	d103      	bne.n	8006802 <_fstat_r+0x1e>
 80067fa:	682b      	ldr	r3, [r5, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d000      	beq.n	8006802 <_fstat_r+0x1e>
 8006800:	6023      	str	r3, [r4, #0]
 8006802:	bd70      	pop	{r4, r5, r6, pc}
 8006804:	2000077c 	.word	0x2000077c

08006808 <_isatty_r>:
 8006808:	2300      	movs	r3, #0
 800680a:	b570      	push	{r4, r5, r6, lr}
 800680c:	4d06      	ldr	r5, [pc, #24]	; (8006828 <_isatty_r+0x20>)
 800680e:	0004      	movs	r4, r0
 8006810:	0008      	movs	r0, r1
 8006812:	602b      	str	r3, [r5, #0]
 8006814:	f7fb fed9 	bl	80025ca <_isatty>
 8006818:	1c43      	adds	r3, r0, #1
 800681a:	d103      	bne.n	8006824 <_isatty_r+0x1c>
 800681c:	682b      	ldr	r3, [r5, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d000      	beq.n	8006824 <_isatty_r+0x1c>
 8006822:	6023      	str	r3, [r4, #0]
 8006824:	bd70      	pop	{r4, r5, r6, pc}
 8006826:	46c0      	nop			; (mov r8, r8)
 8006828:	2000077c 	.word	0x2000077c

0800682c <_lseek_r>:
 800682c:	b570      	push	{r4, r5, r6, lr}
 800682e:	0004      	movs	r4, r0
 8006830:	0008      	movs	r0, r1
 8006832:	0011      	movs	r1, r2
 8006834:	001a      	movs	r2, r3
 8006836:	2300      	movs	r3, #0
 8006838:	4d05      	ldr	r5, [pc, #20]	; (8006850 <_lseek_r+0x24>)
 800683a:	602b      	str	r3, [r5, #0]
 800683c:	f7fb fece 	bl	80025dc <_lseek>
 8006840:	1c43      	adds	r3, r0, #1
 8006842:	d103      	bne.n	800684c <_lseek_r+0x20>
 8006844:	682b      	ldr	r3, [r5, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d000      	beq.n	800684c <_lseek_r+0x20>
 800684a:	6023      	str	r3, [r4, #0]
 800684c:	bd70      	pop	{r4, r5, r6, pc}
 800684e:	46c0      	nop			; (mov r8, r8)
 8006850:	2000077c 	.word	0x2000077c

08006854 <memchr>:
 8006854:	b2c9      	uxtb	r1, r1
 8006856:	1882      	adds	r2, r0, r2
 8006858:	4290      	cmp	r0, r2
 800685a:	d101      	bne.n	8006860 <memchr+0xc>
 800685c:	2000      	movs	r0, #0
 800685e:	4770      	bx	lr
 8006860:	7803      	ldrb	r3, [r0, #0]
 8006862:	428b      	cmp	r3, r1
 8006864:	d0fb      	beq.n	800685e <memchr+0xa>
 8006866:	3001      	adds	r0, #1
 8006868:	e7f6      	b.n	8006858 <memchr+0x4>

0800686a <memcpy>:
 800686a:	2300      	movs	r3, #0
 800686c:	b510      	push	{r4, lr}
 800686e:	429a      	cmp	r2, r3
 8006870:	d100      	bne.n	8006874 <memcpy+0xa>
 8006872:	bd10      	pop	{r4, pc}
 8006874:	5ccc      	ldrb	r4, [r1, r3]
 8006876:	54c4      	strb	r4, [r0, r3]
 8006878:	3301      	adds	r3, #1
 800687a:	e7f8      	b.n	800686e <memcpy+0x4>

0800687c <memmove>:
 800687c:	b510      	push	{r4, lr}
 800687e:	4288      	cmp	r0, r1
 8006880:	d902      	bls.n	8006888 <memmove+0xc>
 8006882:	188b      	adds	r3, r1, r2
 8006884:	4298      	cmp	r0, r3
 8006886:	d303      	bcc.n	8006890 <memmove+0x14>
 8006888:	2300      	movs	r3, #0
 800688a:	e007      	b.n	800689c <memmove+0x20>
 800688c:	5c8b      	ldrb	r3, [r1, r2]
 800688e:	5483      	strb	r3, [r0, r2]
 8006890:	3a01      	subs	r2, #1
 8006892:	d2fb      	bcs.n	800688c <memmove+0x10>
 8006894:	bd10      	pop	{r4, pc}
 8006896:	5ccc      	ldrb	r4, [r1, r3]
 8006898:	54c4      	strb	r4, [r0, r3]
 800689a:	3301      	adds	r3, #1
 800689c:	429a      	cmp	r2, r3
 800689e:	d1fa      	bne.n	8006896 <memmove+0x1a>
 80068a0:	e7f8      	b.n	8006894 <memmove+0x18>
	...

080068a4 <__malloc_lock>:
 80068a4:	b510      	push	{r4, lr}
 80068a6:	4802      	ldr	r0, [pc, #8]	; (80068b0 <__malloc_lock+0xc>)
 80068a8:	f7ff f95f 	bl	8005b6a <__retarget_lock_acquire_recursive>
 80068ac:	bd10      	pop	{r4, pc}
 80068ae:	46c0      	nop			; (mov r8, r8)
 80068b0:	20000774 	.word	0x20000774

080068b4 <__malloc_unlock>:
 80068b4:	b510      	push	{r4, lr}
 80068b6:	4802      	ldr	r0, [pc, #8]	; (80068c0 <__malloc_unlock+0xc>)
 80068b8:	f7ff f958 	bl	8005b6c <__retarget_lock_release_recursive>
 80068bc:	bd10      	pop	{r4, pc}
 80068be:	46c0      	nop			; (mov r8, r8)
 80068c0:	20000774 	.word	0x20000774

080068c4 <_realloc_r>:
 80068c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068c6:	0007      	movs	r7, r0
 80068c8:	000d      	movs	r5, r1
 80068ca:	0016      	movs	r6, r2
 80068cc:	2900      	cmp	r1, #0
 80068ce:	d105      	bne.n	80068dc <_realloc_r+0x18>
 80068d0:	0011      	movs	r1, r2
 80068d2:	f7ff fa0d 	bl	8005cf0 <_malloc_r>
 80068d6:	0004      	movs	r4, r0
 80068d8:	0020      	movs	r0, r4
 80068da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068dc:	2a00      	cmp	r2, #0
 80068de:	d103      	bne.n	80068e8 <_realloc_r+0x24>
 80068e0:	f7ff f9bc 	bl	8005c5c <_free_r>
 80068e4:	0034      	movs	r4, r6
 80068e6:	e7f7      	b.n	80068d8 <_realloc_r+0x14>
 80068e8:	f000 f870 	bl	80069cc <_malloc_usable_size_r>
 80068ec:	002c      	movs	r4, r5
 80068ee:	42b0      	cmp	r0, r6
 80068f0:	d2f2      	bcs.n	80068d8 <_realloc_r+0x14>
 80068f2:	0031      	movs	r1, r6
 80068f4:	0038      	movs	r0, r7
 80068f6:	f7ff f9fb 	bl	8005cf0 <_malloc_r>
 80068fa:	1e04      	subs	r4, r0, #0
 80068fc:	d0ec      	beq.n	80068d8 <_realloc_r+0x14>
 80068fe:	0029      	movs	r1, r5
 8006900:	0032      	movs	r2, r6
 8006902:	f7ff ffb2 	bl	800686a <memcpy>
 8006906:	0029      	movs	r1, r5
 8006908:	0038      	movs	r0, r7
 800690a:	f7ff f9a7 	bl	8005c5c <_free_r>
 800690e:	e7e3      	b.n	80068d8 <_realloc_r+0x14>

08006910 <_read_r>:
 8006910:	b570      	push	{r4, r5, r6, lr}
 8006912:	0004      	movs	r4, r0
 8006914:	0008      	movs	r0, r1
 8006916:	0011      	movs	r1, r2
 8006918:	001a      	movs	r2, r3
 800691a:	2300      	movs	r3, #0
 800691c:	4d05      	ldr	r5, [pc, #20]	; (8006934 <_read_r+0x24>)
 800691e:	602b      	str	r3, [r5, #0]
 8006920:	f7fb fe1e 	bl	8002560 <_read>
 8006924:	1c43      	adds	r3, r0, #1
 8006926:	d103      	bne.n	8006930 <_read_r+0x20>
 8006928:	682b      	ldr	r3, [r5, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d000      	beq.n	8006930 <_read_r+0x20>
 800692e:	6023      	str	r3, [r4, #0]
 8006930:	bd70      	pop	{r4, r5, r6, pc}
 8006932:	46c0      	nop			; (mov r8, r8)
 8006934:	2000077c 	.word	0x2000077c

08006938 <_raise_r>:
 8006938:	b570      	push	{r4, r5, r6, lr}
 800693a:	0004      	movs	r4, r0
 800693c:	000d      	movs	r5, r1
 800693e:	291f      	cmp	r1, #31
 8006940:	d904      	bls.n	800694c <_raise_r+0x14>
 8006942:	2316      	movs	r3, #22
 8006944:	6003      	str	r3, [r0, #0]
 8006946:	2001      	movs	r0, #1
 8006948:	4240      	negs	r0, r0
 800694a:	bd70      	pop	{r4, r5, r6, pc}
 800694c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800694e:	2b00      	cmp	r3, #0
 8006950:	d004      	beq.n	800695c <_raise_r+0x24>
 8006952:	008a      	lsls	r2, r1, #2
 8006954:	189b      	adds	r3, r3, r2
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	2a00      	cmp	r2, #0
 800695a:	d108      	bne.n	800696e <_raise_r+0x36>
 800695c:	0020      	movs	r0, r4
 800695e:	f000 f831 	bl	80069c4 <_getpid_r>
 8006962:	002a      	movs	r2, r5
 8006964:	0001      	movs	r1, r0
 8006966:	0020      	movs	r0, r4
 8006968:	f000 f81a 	bl	80069a0 <_kill_r>
 800696c:	e7ed      	b.n	800694a <_raise_r+0x12>
 800696e:	2000      	movs	r0, #0
 8006970:	2a01      	cmp	r2, #1
 8006972:	d0ea      	beq.n	800694a <_raise_r+0x12>
 8006974:	1c51      	adds	r1, r2, #1
 8006976:	d103      	bne.n	8006980 <_raise_r+0x48>
 8006978:	2316      	movs	r3, #22
 800697a:	3001      	adds	r0, #1
 800697c:	6023      	str	r3, [r4, #0]
 800697e:	e7e4      	b.n	800694a <_raise_r+0x12>
 8006980:	2400      	movs	r4, #0
 8006982:	0028      	movs	r0, r5
 8006984:	601c      	str	r4, [r3, #0]
 8006986:	4790      	blx	r2
 8006988:	0020      	movs	r0, r4
 800698a:	e7de      	b.n	800694a <_raise_r+0x12>

0800698c <raise>:
 800698c:	b510      	push	{r4, lr}
 800698e:	4b03      	ldr	r3, [pc, #12]	; (800699c <raise+0x10>)
 8006990:	0001      	movs	r1, r0
 8006992:	6818      	ldr	r0, [r3, #0]
 8006994:	f7ff ffd0 	bl	8006938 <_raise_r>
 8006998:	bd10      	pop	{r4, pc}
 800699a:	46c0      	nop			; (mov r8, r8)
 800699c:	20000028 	.word	0x20000028

080069a0 <_kill_r>:
 80069a0:	2300      	movs	r3, #0
 80069a2:	b570      	push	{r4, r5, r6, lr}
 80069a4:	4d06      	ldr	r5, [pc, #24]	; (80069c0 <_kill_r+0x20>)
 80069a6:	0004      	movs	r4, r0
 80069a8:	0008      	movs	r0, r1
 80069aa:	0011      	movs	r1, r2
 80069ac:	602b      	str	r3, [r5, #0]
 80069ae:	f7fb fdbb 	bl	8002528 <_kill>
 80069b2:	1c43      	adds	r3, r0, #1
 80069b4:	d103      	bne.n	80069be <_kill_r+0x1e>
 80069b6:	682b      	ldr	r3, [r5, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d000      	beq.n	80069be <_kill_r+0x1e>
 80069bc:	6023      	str	r3, [r4, #0]
 80069be:	bd70      	pop	{r4, r5, r6, pc}
 80069c0:	2000077c 	.word	0x2000077c

080069c4 <_getpid_r>:
 80069c4:	b510      	push	{r4, lr}
 80069c6:	f7fb fda9 	bl	800251c <_getpid>
 80069ca:	bd10      	pop	{r4, pc}

080069cc <_malloc_usable_size_r>:
 80069cc:	1f0b      	subs	r3, r1, #4
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	1f18      	subs	r0, r3, #4
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	da01      	bge.n	80069da <_malloc_usable_size_r+0xe>
 80069d6:	580b      	ldr	r3, [r1, r0]
 80069d8:	18c0      	adds	r0, r0, r3
 80069da:	4770      	bx	lr

080069dc <_init>:
 80069dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069de:	46c0      	nop			; (mov r8, r8)
 80069e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069e2:	bc08      	pop	{r3}
 80069e4:	469e      	mov	lr, r3
 80069e6:	4770      	bx	lr

080069e8 <_fini>:
 80069e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ea:	46c0      	nop			; (mov r8, r8)
 80069ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ee:	bc08      	pop	{r3}
 80069f0:	469e      	mov	lr, r3
 80069f2:	4770      	bx	lr
