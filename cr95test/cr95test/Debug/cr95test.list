
cr95test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059d0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000071c  08005a90  08005a90  00015a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061ac  080061ac  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080061ac  080061ac  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061ac  080061ac  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061ac  080061ac  000161ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061b0  080061b0  000161b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080061b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  200001e0  08006394  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  08006394  00020464  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000813d  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018c3  00000000  00000000  00028345  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000790  00000000  00000000  00029c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006b8  00000000  00000000  0002a398  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000d3bc  00000000  00000000  0002aa50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007b09  00000000  00000000  00037e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004606e  00000000  00000000  0003f915  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00085983  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002454  00000000  00000000  00085a00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005a78 	.word	0x08005a78

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	08005a78 	.word	0x08005a78

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char const *buf, int n)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	60f8      	str	r0, [r7, #12]
 8000238:	60b9      	str	r1, [r7, #8]
 800023a:	607a      	str	r2, [r7, #4]
    if (printf_en) HAL_UART_Transmit(&huart2, (uint8_t*)(buf), n, HAL_MAX_DELAY);
 800023c:	4b08      	ldr	r3, [pc, #32]	; (8000260 <_write+0x30>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d007      	beq.n	8000254 <_write+0x24>
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	b29a      	uxth	r2, r3
 8000248:	2301      	movs	r3, #1
 800024a:	425b      	negs	r3, r3
 800024c:	68b9      	ldr	r1, [r7, #8]
 800024e:	4805      	ldr	r0, [pc, #20]	; (8000264 <_write+0x34>)
 8000250:	f003 fc3a 	bl	8003ac8 <HAL_UART_Transmit>
    return n;
 8000254:	687b      	ldr	r3, [r7, #4]
}
 8000256:	0018      	movs	r0, r3
 8000258:	46bd      	mov	sp, r7
 800025a:	b004      	add	sp, #16
 800025c:	bd80      	pop	{r7, pc}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	20000000 	.word	0x20000000
 8000264:	200003dc 	.word	0x200003dc

08000268 <cr95write>:

void cr95write(const uint8_t *data, uint8_t length)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
 8000270:	000a      	movs	r2, r1
 8000272:	1cfb      	adds	r3, r7, #3
 8000274:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t *)(data), length, HAL_MAX_DELAY);
 8000276:	1cfb      	adds	r3, r7, #3
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	b29a      	uxth	r2, r3
 800027c:	2301      	movs	r3, #1
 800027e:	425b      	negs	r3, r3
 8000280:	6879      	ldr	r1, [r7, #4]
 8000282:	4803      	ldr	r0, [pc, #12]	; (8000290 <cr95write+0x28>)
 8000284:	f003 fc20 	bl	8003ac8 <HAL_UART_Transmit>
}
 8000288:	46c0      	nop			; (mov r8, r8)
 800028a:	46bd      	mov	sp, r7
 800028c:	b002      	add	sp, #8
 800028e:	bd80      	pop	{r7, pc}
 8000290:	2000035c 	.word	0x2000035c

08000294 <cr95read>:

uint8_t cr95read(uint8_t *data, uint8_t *length)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b086      	sub	sp, #24
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
 800029c:	6039      	str	r1, [r7, #0]
	uint32_t timeout = HAL_GetTick();
 800029e:	f002 f8c3 	bl	8002428 <HAL_GetTick>
 80002a2:	0003      	movs	r3, r0
 80002a4:	613b      	str	r3, [r7, #16]

	do {
		if (HAL_GetTick() - timeout > NFC_TIMEOUT) return 0xFF; // timeout
 80002a6:	f002 f8bf 	bl	8002428 <HAL_GetTick>
 80002aa:	0002      	movs	r2, r0
 80002ac:	693b      	ldr	r3, [r7, #16]
 80002ae:	1ad2      	subs	r2, r2, r3
 80002b0:	23fa      	movs	r3, #250	; 0xfa
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	429a      	cmp	r2, r3
 80002b6:	d901      	bls.n	80002bc <cr95read+0x28>
 80002b8:	23ff      	movs	r3, #255	; 0xff
 80002ba:	e099      	b.n	80003f0 <cr95read+0x15c>
	} while (nfc_rx_read_ptr == nfc_rx_write_ptr);
 80002bc:	4b4e      	ldr	r3, [pc, #312]	; (80003f8 <cr95read+0x164>)
 80002be:	881b      	ldrh	r3, [r3, #0]
 80002c0:	b29b      	uxth	r3, r3
 80002c2:	0019      	movs	r1, r3
 80002c4:	4b4d      	ldr	r3, [pc, #308]	; (80003fc <cr95read+0x168>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	685b      	ldr	r3, [r3, #4]
 80002ca:	2240      	movs	r2, #64	; 0x40
 80002cc:	1ad3      	subs	r3, r2, r3
 80002ce:	4299      	cmp	r1, r3
 80002d0:	d0e9      	beq.n	80002a6 <cr95read+0x12>
	uint8_t resp = nfc_rx_buf[nfc_rx_read_ptr];
 80002d2:	4b49      	ldr	r3, [pc, #292]	; (80003f8 <cr95read+0x164>)
 80002d4:	881b      	ldrh	r3, [r3, #0]
 80002d6:	b29b      	uxth	r3, r3
 80002d8:	0019      	movs	r1, r3
 80002da:	230f      	movs	r3, #15
 80002dc:	18fb      	adds	r3, r7, r3
 80002de:	4a48      	ldr	r2, [pc, #288]	; (8000400 <cr95read+0x16c>)
 80002e0:	5c52      	ldrb	r2, [r2, r1]
 80002e2:	701a      	strb	r2, [r3, #0]
    if (++nfc_rx_read_ptr >= RX_BUFFER_LEN) nfc_rx_read_ptr = 0; // increase read pointer
 80002e4:	4b44      	ldr	r3, [pc, #272]	; (80003f8 <cr95read+0x164>)
 80002e6:	881b      	ldrh	r3, [r3, #0]
 80002e8:	b29b      	uxth	r3, r3
 80002ea:	3301      	adds	r3, #1
 80002ec:	b29b      	uxth	r3, r3
 80002ee:	4a42      	ldr	r2, [pc, #264]	; (80003f8 <cr95read+0x164>)
 80002f0:	1c19      	adds	r1, r3, #0
 80002f2:	8011      	strh	r1, [r2, #0]
 80002f4:	2b3f      	cmp	r3, #63	; 0x3f
 80002f6:	d902      	bls.n	80002fe <cr95read+0x6a>
 80002f8:	4b3f      	ldr	r3, [pc, #252]	; (80003f8 <cr95read+0x164>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	801a      	strh	r2, [r3, #0]

    if (resp == 0x55) return resp;
 80002fe:	230f      	movs	r3, #15
 8000300:	18fb      	adds	r3, r7, r3
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	2b55      	cmp	r3, #85	; 0x55
 8000306:	d103      	bne.n	8000310 <cr95read+0x7c>
 8000308:	230f      	movs	r3, #15
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	e06f      	b.n	80003f0 <cr95read+0x15c>

	do {
		if (HAL_GetTick() - timeout > NFC_TIMEOUT) return 0xFF; // timeout
 8000310:	f002 f88a 	bl	8002428 <HAL_GetTick>
 8000314:	0002      	movs	r2, r0
 8000316:	693b      	ldr	r3, [r7, #16]
 8000318:	1ad2      	subs	r2, r2, r3
 800031a:	23fa      	movs	r3, #250	; 0xfa
 800031c:	009b      	lsls	r3, r3, #2
 800031e:	429a      	cmp	r2, r3
 8000320:	d901      	bls.n	8000326 <cr95read+0x92>
 8000322:	23ff      	movs	r3, #255	; 0xff
 8000324:	e064      	b.n	80003f0 <cr95read+0x15c>
	} while (nfc_rx_read_ptr == nfc_rx_write_ptr);
 8000326:	4b34      	ldr	r3, [pc, #208]	; (80003f8 <cr95read+0x164>)
 8000328:	881b      	ldrh	r3, [r3, #0]
 800032a:	b29b      	uxth	r3, r3
 800032c:	0019      	movs	r1, r3
 800032e:	4b33      	ldr	r3, [pc, #204]	; (80003fc <cr95read+0x168>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	685b      	ldr	r3, [r3, #4]
 8000334:	2240      	movs	r2, #64	; 0x40
 8000336:	1ad3      	subs	r3, r2, r3
 8000338:	4299      	cmp	r1, r3
 800033a:	d0e9      	beq.n	8000310 <cr95read+0x7c>
	uint8_t len = nfc_rx_buf[nfc_rx_read_ptr];
 800033c:	4b2e      	ldr	r3, [pc, #184]	; (80003f8 <cr95read+0x164>)
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	b29b      	uxth	r3, r3
 8000342:	0019      	movs	r1, r3
 8000344:	2317      	movs	r3, #23
 8000346:	18fb      	adds	r3, r7, r3
 8000348:	4a2d      	ldr	r2, [pc, #180]	; (8000400 <cr95read+0x16c>)
 800034a:	5c52      	ldrb	r2, [r2, r1]
 800034c:	701a      	strb	r2, [r3, #0]
    if (++nfc_rx_read_ptr >= RX_BUFFER_LEN) nfc_rx_read_ptr = 0; // increase read pointer
 800034e:	4b2a      	ldr	r3, [pc, #168]	; (80003f8 <cr95read+0x164>)
 8000350:	881b      	ldrh	r3, [r3, #0]
 8000352:	b29b      	uxth	r3, r3
 8000354:	3301      	adds	r3, #1
 8000356:	b29b      	uxth	r3, r3
 8000358:	4a27      	ldr	r2, [pc, #156]	; (80003f8 <cr95read+0x164>)
 800035a:	1c19      	adds	r1, r3, #0
 800035c:	8011      	strh	r1, [r2, #0]
 800035e:	2b3f      	cmp	r3, #63	; 0x3f
 8000360:	d902      	bls.n	8000368 <cr95read+0xd4>
 8000362:	4b25      	ldr	r3, [pc, #148]	; (80003f8 <cr95read+0x164>)
 8000364:	2200      	movs	r2, #0
 8000366:	801a      	strh	r2, [r3, #0]

    if (length) *length = len;
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d035      	beq.n	80003da <cr95read+0x146>
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	2217      	movs	r2, #23
 8000372:	18ba      	adds	r2, r7, r2
 8000374:	7812      	ldrb	r2, [r2, #0]
 8000376:	701a      	strb	r2, [r3, #0]
    while (len--) {
 8000378:	e02f      	b.n	80003da <cr95read+0x146>
    	do {
    		if (HAL_GetTick() - timeout > NFC_TIMEOUT) return 0xFF; // timeout
 800037a:	f002 f855 	bl	8002428 <HAL_GetTick>
 800037e:	0002      	movs	r2, r0
 8000380:	693b      	ldr	r3, [r7, #16]
 8000382:	1ad2      	subs	r2, r2, r3
 8000384:	23fa      	movs	r3, #250	; 0xfa
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	429a      	cmp	r2, r3
 800038a:	d901      	bls.n	8000390 <cr95read+0xfc>
 800038c:	23ff      	movs	r3, #255	; 0xff
 800038e:	e02f      	b.n	80003f0 <cr95read+0x15c>
    	} while (nfc_rx_read_ptr == nfc_rx_write_ptr);
 8000390:	4b19      	ldr	r3, [pc, #100]	; (80003f8 <cr95read+0x164>)
 8000392:	881b      	ldrh	r3, [r3, #0]
 8000394:	b29b      	uxth	r3, r3
 8000396:	0019      	movs	r1, r3
 8000398:	4b18      	ldr	r3, [pc, #96]	; (80003fc <cr95read+0x168>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	2240      	movs	r2, #64	; 0x40
 80003a0:	1ad3      	subs	r3, r2, r3
 80003a2:	4299      	cmp	r1, r3
 80003a4:	d0e9      	beq.n	800037a <cr95read+0xe6>
    	if (data) *data++ = nfc_rx_buf[nfc_rx_read_ptr];
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d009      	beq.n	80003c0 <cr95read+0x12c>
 80003ac:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <cr95read+0x164>)
 80003ae:	881b      	ldrh	r3, [r3, #0]
 80003b0:	b29b      	uxth	r3, r3
 80003b2:	0019      	movs	r1, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	1c5a      	adds	r2, r3, #1
 80003b8:	607a      	str	r2, [r7, #4]
 80003ba:	4a11      	ldr	r2, [pc, #68]	; (8000400 <cr95read+0x16c>)
 80003bc:	5c52      	ldrb	r2, [r2, r1]
 80003be:	701a      	strb	r2, [r3, #0]
        if (++nfc_rx_read_ptr >= RX_BUFFER_LEN) nfc_rx_read_ptr = 0; // increase read pointer
 80003c0:	4b0d      	ldr	r3, [pc, #52]	; (80003f8 <cr95read+0x164>)
 80003c2:	881b      	ldrh	r3, [r3, #0]
 80003c4:	b29b      	uxth	r3, r3
 80003c6:	3301      	adds	r3, #1
 80003c8:	b29b      	uxth	r3, r3
 80003ca:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <cr95read+0x164>)
 80003cc:	1c19      	adds	r1, r3, #0
 80003ce:	8011      	strh	r1, [r2, #0]
 80003d0:	2b3f      	cmp	r3, #63	; 0x3f
 80003d2:	d902      	bls.n	80003da <cr95read+0x146>
 80003d4:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <cr95read+0x164>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	801a      	strh	r2, [r3, #0]
    while (len--) {
 80003da:	2217      	movs	r2, #23
 80003dc:	18bb      	adds	r3, r7, r2
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	18ba      	adds	r2, r7, r2
 80003e2:	1e59      	subs	r1, r3, #1
 80003e4:	7011      	strb	r1, [r2, #0]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d1c7      	bne.n	800037a <cr95read+0xe6>
    }

    return resp;
 80003ea:	230f      	movs	r3, #15
 80003ec:	18fb      	adds	r3, r7, r3
 80003ee:	781b      	ldrb	r3, [r3, #0]
}
 80003f0:	0018      	movs	r0, r3
 80003f2:	46bd      	mov	sp, r7
 80003f4:	b006      	add	sp, #24
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	20000280 	.word	0x20000280
 80003fc:	20000318 	.word	0x20000318
 8000400:	20000240 	.word	0x20000240

08000404 <cr95_wakeup>:

static void cr95_wakeup(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
	const uint8_t wakeup = 0;
 800040a:	1dfb      	adds	r3, r7, #7
 800040c:	2200      	movs	r2, #0
 800040e:	701a      	strb	r2, [r3, #0]
	cr95write(&wakeup, 1);
 8000410:	1dfb      	adds	r3, r7, #7
 8000412:	2101      	movs	r1, #1
 8000414:	0018      	movs	r0, r3
 8000416:	f7ff ff27 	bl	8000268 <cr95write>
	printf("WAKEUP sent\n");
 800041a:	4b04      	ldr	r3, [pc, #16]	; (800042c <cr95_wakeup+0x28>)
 800041c:	0018      	movs	r0, r3
 800041e:	f004 f979 	bl	8004714 <puts>
}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	46bd      	mov	sp, r7
 8000426:	b002      	add	sp, #8
 8000428:	bd80      	pop	{r7, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	08005a90 	.word	0x08005a90

08000430 <cr95_init14>:

static void cr95_init14(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b086      	sub	sp, #24
 8000434:	af00      	add	r7, sp, #0
	const uint8_t cmd_init1[] = { 0x02, 0x02, 0x02, 0x00 };
 8000436:	2014      	movs	r0, #20
 8000438:	183b      	adds	r3, r7, r0
 800043a:	4a27      	ldr	r2, [pc, #156]	; (80004d8 <cr95_init14+0xa8>)
 800043c:	6812      	ldr	r2, [r2, #0]
 800043e:	601a      	str	r2, [r3, #0]
	const uint8_t cmd_init2[] = { 0x09, 0x04, 0x3A, 0x00, 0x58, 0x04 };
 8000440:	230c      	movs	r3, #12
 8000442:	18fb      	adds	r3, r7, r3
 8000444:	4a25      	ldr	r2, [pc, #148]	; (80004dc <cr95_init14+0xac>)
 8000446:	6811      	ldr	r1, [r2, #0]
 8000448:	6019      	str	r1, [r3, #0]
 800044a:	8892      	ldrh	r2, [r2, #4]
 800044c:	809a      	strh	r2, [r3, #4]
	const uint8_t cmd_init3[] = { 0x09, 0x04, 0x68, 0x01, 0x01, 0xD1 };
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	4a23      	ldr	r2, [pc, #140]	; (80004e0 <cr95_init14+0xb0>)
 8000452:	6811      	ldr	r1, [r2, #0]
 8000454:	6019      	str	r1, [r3, #0]
 8000456:	8892      	ldrh	r2, [r2, #4]
 8000458:	809a      	strh	r2, [r3, #4]

	cr95write(cmd_init1, sizeof(cmd_init1));
 800045a:	183b      	adds	r3, r7, r0
 800045c:	2104      	movs	r1, #4
 800045e:	0018      	movs	r0, r3
 8000460:	f7ff ff02 	bl	8000268 <cr95write>
	printf("Initiation of 14 %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 8000464:	2100      	movs	r1, #0
 8000466:	2000      	movs	r0, #0
 8000468:	f7ff ff14 	bl	8000294 <cr95read>
 800046c:	1e03      	subs	r3, r0, #0
 800046e:	d101      	bne.n	8000474 <cr95_init14+0x44>
 8000470:	4b1c      	ldr	r3, [pc, #112]	; (80004e4 <cr95_init14+0xb4>)
 8000472:	e000      	b.n	8000476 <cr95_init14+0x46>
 8000474:	4b1c      	ldr	r3, [pc, #112]	; (80004e8 <cr95_init14+0xb8>)
 8000476:	4a1d      	ldr	r2, [pc, #116]	; (80004ec <cr95_init14+0xbc>)
 8000478:	0019      	movs	r1, r3
 800047a:	0010      	movs	r0, r2
 800047c:	f004 f8bc 	bl	80045f8 <iprintf>
	cr95write(cmd_init2, sizeof(cmd_init2));
 8000480:	230c      	movs	r3, #12
 8000482:	18fb      	adds	r3, r7, r3
 8000484:	2106      	movs	r1, #6
 8000486:	0018      	movs	r0, r3
 8000488:	f7ff feee 	bl	8000268 <cr95write>
	printf(" %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 800048c:	2100      	movs	r1, #0
 800048e:	2000      	movs	r0, #0
 8000490:	f7ff ff00 	bl	8000294 <cr95read>
 8000494:	1e03      	subs	r3, r0, #0
 8000496:	d101      	bne.n	800049c <cr95_init14+0x6c>
 8000498:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <cr95_init14+0xb4>)
 800049a:	e000      	b.n	800049e <cr95_init14+0x6e>
 800049c:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <cr95_init14+0xb8>)
 800049e:	4a14      	ldr	r2, [pc, #80]	; (80004f0 <cr95_init14+0xc0>)
 80004a0:	0019      	movs	r1, r3
 80004a2:	0010      	movs	r0, r2
 80004a4:	f004 f8a8 	bl	80045f8 <iprintf>
	cr95write(cmd_init3, sizeof(cmd_init3));
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2106      	movs	r1, #6
 80004ac:	0018      	movs	r0, r3
 80004ae:	f7ff fedb 	bl	8000268 <cr95write>
	printf(" %s\n", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 80004b2:	2100      	movs	r1, #0
 80004b4:	2000      	movs	r0, #0
 80004b6:	f7ff feed 	bl	8000294 <cr95read>
 80004ba:	1e03      	subs	r3, r0, #0
 80004bc:	d101      	bne.n	80004c2 <cr95_init14+0x92>
 80004be:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <cr95_init14+0xb4>)
 80004c0:	e000      	b.n	80004c4 <cr95_init14+0x94>
 80004c2:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <cr95_init14+0xb8>)
 80004c4:	4a0b      	ldr	r2, [pc, #44]	; (80004f4 <cr95_init14+0xc4>)
 80004c6:	0019      	movs	r1, r3
 80004c8:	0010      	movs	r0, r2
 80004ca:	f004 f895 	bl	80045f8 <iprintf>
}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b006      	add	sp, #24
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	08005ac4 	.word	0x08005ac4
 80004dc:	08005ac8 	.word	0x08005ac8
 80004e0:	08005ad0 	.word	0x08005ad0
 80004e4:	08005a9c 	.word	0x08005a9c
 80004e8:	08005aa0 	.word	0x08005aa0
 80004ec:	08005aa4 	.word	0x08005aa4
 80004f0:	08005ab8 	.word	0x08005ab8
 80004f4:	08005abc 	.word	0x08005abc

080004f8 <cr95_init14B>:

static void cr95_init14B(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0
	const uint8_t cmd_init1B[] = { 0x02, 0x02, 0x03, 0x01 };
 80004fe:	2014      	movs	r0, #20
 8000500:	183b      	adds	r3, r7, r0
 8000502:	4a27      	ldr	r2, [pc, #156]	; (80005a0 <cr95_init14B+0xa8>)
 8000504:	6812      	ldr	r2, [r2, #0]
 8000506:	601a      	str	r2, [r3, #0]
	const uint8_t cmd_init2B[] = { 0x09, 0x04, 0x3A, 0x00, 0x58, 0x04 };
 8000508:	230c      	movs	r3, #12
 800050a:	18fb      	adds	r3, r7, r3
 800050c:	4a25      	ldr	r2, [pc, #148]	; (80005a4 <cr95_init14B+0xac>)
 800050e:	6811      	ldr	r1, [r2, #0]
 8000510:	6019      	str	r1, [r3, #0]
 8000512:	8892      	ldrh	r2, [r2, #4]
 8000514:	809a      	strh	r2, [r3, #4]
	const uint8_t cmd_init3B[] = { 0x09, 0x04, 0x68, 0x01, 0x01, 0x20 };
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	4a23      	ldr	r2, [pc, #140]	; (80005a8 <cr95_init14B+0xb0>)
 800051a:	6811      	ldr	r1, [r2, #0]
 800051c:	6019      	str	r1, [r3, #0]
 800051e:	8892      	ldrh	r2, [r2, #4]
 8000520:	809a      	strh	r2, [r3, #4]

	cr95write(cmd_init1B, sizeof(cmd_init1B));
 8000522:	183b      	adds	r3, r7, r0
 8000524:	2104      	movs	r1, #4
 8000526:	0018      	movs	r0, r3
 8000528:	f7ff fe9e 	bl	8000268 <cr95write>
	printf("Initiation of 14B %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 800052c:	2100      	movs	r1, #0
 800052e:	2000      	movs	r0, #0
 8000530:	f7ff feb0 	bl	8000294 <cr95read>
 8000534:	1e03      	subs	r3, r0, #0
 8000536:	d101      	bne.n	800053c <cr95_init14B+0x44>
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <cr95_init14B+0xb4>)
 800053a:	e000      	b.n	800053e <cr95_init14B+0x46>
 800053c:	4b1c      	ldr	r3, [pc, #112]	; (80005b0 <cr95_init14B+0xb8>)
 800053e:	4a1d      	ldr	r2, [pc, #116]	; (80005b4 <cr95_init14B+0xbc>)
 8000540:	0019      	movs	r1, r3
 8000542:	0010      	movs	r0, r2
 8000544:	f004 f858 	bl	80045f8 <iprintf>
	cr95write(cmd_init2B, sizeof(cmd_init2B));
 8000548:	230c      	movs	r3, #12
 800054a:	18fb      	adds	r3, r7, r3
 800054c:	2106      	movs	r1, #6
 800054e:	0018      	movs	r0, r3
 8000550:	f7ff fe8a 	bl	8000268 <cr95write>
	printf(" %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 8000554:	2100      	movs	r1, #0
 8000556:	2000      	movs	r0, #0
 8000558:	f7ff fe9c 	bl	8000294 <cr95read>
 800055c:	1e03      	subs	r3, r0, #0
 800055e:	d101      	bne.n	8000564 <cr95_init14B+0x6c>
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <cr95_init14B+0xb4>)
 8000562:	e000      	b.n	8000566 <cr95_init14B+0x6e>
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <cr95_init14B+0xb8>)
 8000566:	4a14      	ldr	r2, [pc, #80]	; (80005b8 <cr95_init14B+0xc0>)
 8000568:	0019      	movs	r1, r3
 800056a:	0010      	movs	r0, r2
 800056c:	f004 f844 	bl	80045f8 <iprintf>
	cr95write(cmd_init3B, sizeof(cmd_init3B));
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2106      	movs	r1, #6
 8000574:	0018      	movs	r0, r3
 8000576:	f7ff fe77 	bl	8000268 <cr95write>
	printf(" %s\n", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 800057a:	2100      	movs	r1, #0
 800057c:	2000      	movs	r0, #0
 800057e:	f7ff fe89 	bl	8000294 <cr95read>
 8000582:	1e03      	subs	r3, r0, #0
 8000584:	d101      	bne.n	800058a <cr95_init14B+0x92>
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <cr95_init14B+0xb4>)
 8000588:	e000      	b.n	800058c <cr95_init14B+0x94>
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <cr95_init14B+0xb8>)
 800058c:	4a0b      	ldr	r2, [pc, #44]	; (80005bc <cr95_init14B+0xc4>)
 800058e:	0019      	movs	r1, r3
 8000590:	0010      	movs	r0, r2
 8000592:	f004 f831 	bl	80045f8 <iprintf>
}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b006      	add	sp, #24
 800059c:	bd80      	pop	{r7, pc}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	08005af0 	.word	0x08005af0
 80005a4:	08005ac8 	.word	0x08005ac8
 80005a8:	08005af4 	.word	0x08005af4
 80005ac:	08005a9c 	.word	0x08005a9c
 80005b0:	08005aa0 	.word	0x08005aa0
 80005b4:	08005ad8 	.word	0x08005ad8
 80005b8:	08005ab8 	.word	0x08005ab8
 80005bc:	08005abc 	.word	0x08005abc

080005c0 <cr95_init15>:

static void cr95_init15(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
	const uint8_t cmd_init1_15[] = { 0x02, 0x02, 0x01, 0x03 };
 80005c6:	2014      	movs	r0, #20
 80005c8:	183b      	adds	r3, r7, r0
 80005ca:	4a27      	ldr	r2, [pc, #156]	; (8000668 <cr95_init15+0xa8>)
 80005cc:	6812      	ldr	r2, [r2, #0]
 80005ce:	601a      	str	r2, [r3, #0]
	const uint8_t cmd_init2_15[] = { 0x09, 0x04, 0x3A, 0x00, 0x58, 0x04 };
 80005d0:	230c      	movs	r3, #12
 80005d2:	18fb      	adds	r3, r7, r3
 80005d4:	4a25      	ldr	r2, [pc, #148]	; (800066c <cr95_init15+0xac>)
 80005d6:	6811      	ldr	r1, [r2, #0]
 80005d8:	6019      	str	r1, [r3, #0]
 80005da:	8892      	ldrh	r2, [r2, #4]
 80005dc:	809a      	strh	r2, [r3, #4]
	const uint8_t cmd_init3_15[] = { 0x09, 0x04, 0x68, 0x01, 0x01, 0xD0 };
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	4a23      	ldr	r2, [pc, #140]	; (8000670 <cr95_init15+0xb0>)
 80005e2:	6811      	ldr	r1, [r2, #0]
 80005e4:	6019      	str	r1, [r3, #0]
 80005e6:	8892      	ldrh	r2, [r2, #4]
 80005e8:	809a      	strh	r2, [r3, #4]

	cr95write(cmd_init1_15, sizeof(cmd_init1_15));
 80005ea:	183b      	adds	r3, r7, r0
 80005ec:	2104      	movs	r1, #4
 80005ee:	0018      	movs	r0, r3
 80005f0:	f7ff fe3a 	bl	8000268 <cr95write>
	printf("Initiation of 15 %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 80005f4:	2100      	movs	r1, #0
 80005f6:	2000      	movs	r0, #0
 80005f8:	f7ff fe4c 	bl	8000294 <cr95read>
 80005fc:	1e03      	subs	r3, r0, #0
 80005fe:	d101      	bne.n	8000604 <cr95_init15+0x44>
 8000600:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <cr95_init15+0xb4>)
 8000602:	e000      	b.n	8000606 <cr95_init15+0x46>
 8000604:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <cr95_init15+0xb8>)
 8000606:	4a1d      	ldr	r2, [pc, #116]	; (800067c <cr95_init15+0xbc>)
 8000608:	0019      	movs	r1, r3
 800060a:	0010      	movs	r0, r2
 800060c:	f003 fff4 	bl	80045f8 <iprintf>
	cr95write(cmd_init2_15, sizeof(cmd_init2_15));
 8000610:	230c      	movs	r3, #12
 8000612:	18fb      	adds	r3, r7, r3
 8000614:	2106      	movs	r1, #6
 8000616:	0018      	movs	r0, r3
 8000618:	f7ff fe26 	bl	8000268 <cr95write>
	printf(" %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 800061c:	2100      	movs	r1, #0
 800061e:	2000      	movs	r0, #0
 8000620:	f7ff fe38 	bl	8000294 <cr95read>
 8000624:	1e03      	subs	r3, r0, #0
 8000626:	d101      	bne.n	800062c <cr95_init15+0x6c>
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <cr95_init15+0xb4>)
 800062a:	e000      	b.n	800062e <cr95_init15+0x6e>
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <cr95_init15+0xb8>)
 800062e:	4a14      	ldr	r2, [pc, #80]	; (8000680 <cr95_init15+0xc0>)
 8000630:	0019      	movs	r1, r3
 8000632:	0010      	movs	r0, r2
 8000634:	f003 ffe0 	bl	80045f8 <iprintf>
	cr95write(cmd_init3_15, sizeof(cmd_init3_15));
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2106      	movs	r1, #6
 800063c:	0018      	movs	r0, r3
 800063e:	f7ff fe13 	bl	8000268 <cr95write>
	printf(" %s\n", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 8000642:	2100      	movs	r1, #0
 8000644:	2000      	movs	r0, #0
 8000646:	f7ff fe25 	bl	8000294 <cr95read>
 800064a:	1e03      	subs	r3, r0, #0
 800064c:	d101      	bne.n	8000652 <cr95_init15+0x92>
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <cr95_init15+0xb4>)
 8000650:	e000      	b.n	8000654 <cr95_init15+0x94>
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <cr95_init15+0xb8>)
 8000654:	4a0b      	ldr	r2, [pc, #44]	; (8000684 <cr95_init15+0xc4>)
 8000656:	0019      	movs	r1, r3
 8000658:	0010      	movs	r0, r2
 800065a:	f003 ffcd 	bl	80045f8 <iprintf>
}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	b006      	add	sp, #24
 8000664:	bd80      	pop	{r7, pc}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	08005b10 	.word	0x08005b10
 800066c:	08005ac8 	.word	0x08005ac8
 8000670:	08005b14 	.word	0x08005b14
 8000674:	08005a9c 	.word	0x08005a9c
 8000678:	08005aa0 	.word	0x08005aa0
 800067c:	08005afc 	.word	0x08005afc
 8000680:	08005ab8 	.word	0x08005ab8
 8000684:	08005abc 	.word	0x08005abc

08000688 <cr95_init18>:

static void cr95_init18(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af00      	add	r7, sp, #0
	const uint8_t cmd_init1_18[] = { 0x02, 0x02, 0x04, 0x51 };
 800068e:	201c      	movs	r0, #28
 8000690:	183b      	adds	r3, r7, r0
 8000692:	4a34      	ldr	r2, [pc, #208]	; (8000764 <cr95_init18+0xdc>)
 8000694:	6812      	ldr	r2, [r2, #0]
 8000696:	601a      	str	r2, [r3, #0]
	const uint8_t cmd_init2_18[] = { 0x09, 0x04, 0x3A, 0x00, 0x58, 0x04 };
 8000698:	2314      	movs	r3, #20
 800069a:	18fb      	adds	r3, r7, r3
 800069c:	4a32      	ldr	r2, [pc, #200]	; (8000768 <cr95_init18+0xe0>)
 800069e:	6811      	ldr	r1, [r2, #0]
 80006a0:	6019      	str	r1, [r3, #0]
 80006a2:	8892      	ldrh	r2, [r2, #4]
 80006a4:	809a      	strh	r2, [r3, #4]
	const uint8_t cmd_init3_18[] = { 0x09, 0x04, 0x68, 0x01, 0x01, 0x50 };
 80006a6:	230c      	movs	r3, #12
 80006a8:	18fb      	adds	r3, r7, r3
 80006aa:	4a30      	ldr	r2, [pc, #192]	; (800076c <cr95_init18+0xe4>)
 80006ac:	6811      	ldr	r1, [r2, #0]
 80006ae:	6019      	str	r1, [r3, #0]
 80006b0:	8892      	ldrh	r2, [r2, #4]
 80006b2:	809a      	strh	r2, [r3, #4]
	const uint8_t cmd_init4_18[] = { 0x09, 0x04, 0x0A, 0x01, 0x02, 0xA1 };
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	4a2e      	ldr	r2, [pc, #184]	; (8000770 <cr95_init18+0xe8>)
 80006b8:	6811      	ldr	r1, [r2, #0]
 80006ba:	6019      	str	r1, [r3, #0]
 80006bc:	8892      	ldrh	r2, [r2, #4]
 80006be:	809a      	strh	r2, [r3, #4]


	cr95write(cmd_init1_18, sizeof(cmd_init1_18));
 80006c0:	183b      	adds	r3, r7, r0
 80006c2:	2104      	movs	r1, #4
 80006c4:	0018      	movs	r0, r3
 80006c6:	f7ff fdcf 	bl	8000268 <cr95write>
	printf("Initiation of 18 %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 80006ca:	2100      	movs	r1, #0
 80006cc:	2000      	movs	r0, #0
 80006ce:	f7ff fde1 	bl	8000294 <cr95read>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	d101      	bne.n	80006da <cr95_init18+0x52>
 80006d6:	4b27      	ldr	r3, [pc, #156]	; (8000774 <cr95_init18+0xec>)
 80006d8:	e000      	b.n	80006dc <cr95_init18+0x54>
 80006da:	4b27      	ldr	r3, [pc, #156]	; (8000778 <cr95_init18+0xf0>)
 80006dc:	4a27      	ldr	r2, [pc, #156]	; (800077c <cr95_init18+0xf4>)
 80006de:	0019      	movs	r1, r3
 80006e0:	0010      	movs	r0, r2
 80006e2:	f003 ff89 	bl	80045f8 <iprintf>
	cr95write(cmd_init2_18, sizeof(cmd_init2_18));
 80006e6:	2314      	movs	r3, #20
 80006e8:	18fb      	adds	r3, r7, r3
 80006ea:	2106      	movs	r1, #6
 80006ec:	0018      	movs	r0, r3
 80006ee:	f7ff fdbb 	bl	8000268 <cr95write>
	printf(" %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 80006f2:	2100      	movs	r1, #0
 80006f4:	2000      	movs	r0, #0
 80006f6:	f7ff fdcd 	bl	8000294 <cr95read>
 80006fa:	1e03      	subs	r3, r0, #0
 80006fc:	d101      	bne.n	8000702 <cr95_init18+0x7a>
 80006fe:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <cr95_init18+0xec>)
 8000700:	e000      	b.n	8000704 <cr95_init18+0x7c>
 8000702:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <cr95_init18+0xf0>)
 8000704:	4a1e      	ldr	r2, [pc, #120]	; (8000780 <cr95_init18+0xf8>)
 8000706:	0019      	movs	r1, r3
 8000708:	0010      	movs	r0, r2
 800070a:	f003 ff75 	bl	80045f8 <iprintf>
	cr95write(cmd_init3_18, sizeof(cmd_init3_18));
 800070e:	230c      	movs	r3, #12
 8000710:	18fb      	adds	r3, r7, r3
 8000712:	2106      	movs	r1, #6
 8000714:	0018      	movs	r0, r3
 8000716:	f7ff fda7 	bl	8000268 <cr95write>
	printf(" %s\n", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 800071a:	2100      	movs	r1, #0
 800071c:	2000      	movs	r0, #0
 800071e:	f7ff fdb9 	bl	8000294 <cr95read>
 8000722:	1e03      	subs	r3, r0, #0
 8000724:	d101      	bne.n	800072a <cr95_init18+0xa2>
 8000726:	4b13      	ldr	r3, [pc, #76]	; (8000774 <cr95_init18+0xec>)
 8000728:	e000      	b.n	800072c <cr95_init18+0xa4>
 800072a:	4b13      	ldr	r3, [pc, #76]	; (8000778 <cr95_init18+0xf0>)
 800072c:	4a15      	ldr	r2, [pc, #84]	; (8000784 <cr95_init18+0xfc>)
 800072e:	0019      	movs	r1, r3
 8000730:	0010      	movs	r0, r2
 8000732:	f003 ff61 	bl	80045f8 <iprintf>
	cr95write(cmd_init4_18, sizeof(cmd_init4_18));
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2106      	movs	r1, #6
 800073a:	0018      	movs	r0, r3
 800073c:	f7ff fd94 	bl	8000268 <cr95write>
	printf(" %s\n", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 8000740:	2100      	movs	r1, #0
 8000742:	2000      	movs	r0, #0
 8000744:	f7ff fda6 	bl	8000294 <cr95read>
 8000748:	1e03      	subs	r3, r0, #0
 800074a:	d101      	bne.n	8000750 <cr95_init18+0xc8>
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <cr95_init18+0xec>)
 800074e:	e000      	b.n	8000752 <cr95_init18+0xca>
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <cr95_init18+0xf0>)
 8000752:	4a0c      	ldr	r2, [pc, #48]	; (8000784 <cr95_init18+0xfc>)
 8000754:	0019      	movs	r1, r3
 8000756:	0010      	movs	r0, r2
 8000758:	f003 ff4e 	bl	80045f8 <iprintf>
}
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	b008      	add	sp, #32
 8000762:	bd80      	pop	{r7, pc}
 8000764:	08005b30 	.word	0x08005b30
 8000768:	08005ac8 	.word	0x08005ac8
 800076c:	08005b34 	.word	0x08005b34
 8000770:	08005b3c 	.word	0x08005b3c
 8000774:	08005a9c 	.word	0x08005a9c
 8000778:	08005aa0 	.word	0x08005aa0
 800077c:	08005b1c 	.word	0x08005b1c
 8000780:	08005ab8 	.word	0x08005ab8
 8000784:	08005abc 	.word	0x08005abc

08000788 <cr95_read>:


static void cr95_read(void)
{
 8000788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800078a:	b097      	sub	sp, #92	; 0x5c
 800078c:	af04      	add	r7, sp, #16
	const uint8_t cmd_reqa[] =  { 0x04, 0x02, 0x26, 0x07 };
 800078e:	2040      	movs	r0, #64	; 0x40
 8000790:	183b      	adds	r3, r7, r0
 8000792:	4a88      	ldr	r2, [pc, #544]	; (80009b4 <cr95_read+0x22c>)
 8000794:	6812      	ldr	r2, [r2, #0]
 8000796:	601a      	str	r2, [r3, #0]
	const uint8_t cmd_acl1[] =  { 0x04, 0x03, 0x93, 0x20, 0x08 };
 8000798:	2338      	movs	r3, #56	; 0x38
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	4a86      	ldr	r2, [pc, #536]	; (80009b8 <cr95_read+0x230>)
 800079e:	6811      	ldr	r1, [r2, #0]
 80007a0:	6019      	str	r1, [r3, #0]
 80007a2:	7912      	ldrb	r2, [r2, #4]
 80007a4:	711a      	strb	r2, [r3, #4]
	//const uint8_t cmd_acl2[] =  { 0x04, 0x03, 0x95, 0x20, 0x08 };

	uint8_t data[8];
	uint8_t saved_data[10] =  { 0x04, 0x08, 0x93, 0x70, 0x00, 0x00, 0x00, 0x00,  0x00, 0x28};
 80007a6:	2324      	movs	r3, #36	; 0x24
 80007a8:	18fb      	adds	r3, r7, r3
 80007aa:	4a84      	ldr	r2, [pc, #528]	; (80009bc <cr95_read+0x234>)
 80007ac:	ca12      	ldmia	r2!, {r1, r4}
 80007ae:	c312      	stmia	r3!, {r1, r4}
 80007b0:	8812      	ldrh	r2, [r2, #0]
 80007b2:	801a      	strh	r2, [r3, #0]
	char uid[32];
	uint8_t len;

	cr95write(cmd_reqa, sizeof(cmd_reqa));
 80007b4:	183b      	adds	r3, r7, r0
 80007b6:	2104      	movs	r1, #4
 80007b8:	0018      	movs	r0, r3
 80007ba:	f7ff fd55 	bl	8000268 <cr95write>
	if (cr95read(data, &len) == 0x80) {
 80007be:	1cfa      	adds	r2, r7, #3
 80007c0:	2330      	movs	r3, #48	; 0x30
 80007c2:	18fb      	adds	r3, r7, r3
 80007c4:	0011      	movs	r1, r2
 80007c6:	0018      	movs	r0, r3
 80007c8:	f7ff fd64 	bl	8000294 <cr95read>
 80007cc:	0003      	movs	r3, r0
 80007ce:	2b80      	cmp	r3, #128	; 0x80
 80007d0:	d000      	beq.n	80007d4 <cr95_read+0x4c>
 80007d2:	e0e6      	b.n	80009a2 <cr95_read+0x21a>
		printf("ATQA =");
 80007d4:	4b7a      	ldr	r3, [pc, #488]	; (80009c0 <cr95_read+0x238>)
 80007d6:	0018      	movs	r0, r3
 80007d8:	f003 ff0e 	bl	80045f8 <iprintf>
		for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 80007dc:	2347      	movs	r3, #71	; 0x47
 80007de:	18fb      	adds	r3, r7, r3
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
 80007e4:	e010      	b.n	8000808 <cr95_read+0x80>
 80007e6:	2447      	movs	r4, #71	; 0x47
 80007e8:	193b      	adds	r3, r7, r4
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2230      	movs	r2, #48	; 0x30
 80007ee:	18ba      	adds	r2, r7, r2
 80007f0:	5cd3      	ldrb	r3, [r2, r3]
 80007f2:	001a      	movs	r2, r3
 80007f4:	4b73      	ldr	r3, [pc, #460]	; (80009c4 <cr95_read+0x23c>)
 80007f6:	0011      	movs	r1, r2
 80007f8:	0018      	movs	r0, r3
 80007fa:	f003 fefd 	bl	80045f8 <iprintf>
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	781a      	ldrb	r2, [r3, #0]
 8000802:	193b      	adds	r3, r7, r4
 8000804:	3201      	adds	r2, #1
 8000806:	701a      	strb	r2, [r3, #0]
 8000808:	1cfb      	adds	r3, r7, #3
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2247      	movs	r2, #71	; 0x47
 800080e:	18ba      	adds	r2, r7, r2
 8000810:	7812      	ldrb	r2, [r2, #0]
 8000812:	429a      	cmp	r2, r3
 8000814:	d3e7      	bcc.n	80007e6 <cr95_read+0x5e>
		printf("\n");
 8000816:	200a      	movs	r0, #10
 8000818:	f003 ff08 	bl	800462c <putchar>

    	sprintf(uid, "UID =");
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	4a6a      	ldr	r2, [pc, #424]	; (80009c8 <cr95_read+0x240>)
 8000820:	6811      	ldr	r1, [r2, #0]
 8000822:	6019      	str	r1, [r3, #0]
 8000824:	8892      	ldrh	r2, [r2, #4]
 8000826:	809a      	strh	r2, [r3, #4]

    	cr95write(cmd_acl1, sizeof(cmd_acl1));
 8000828:	2338      	movs	r3, #56	; 0x38
 800082a:	18fb      	adds	r3, r7, r3
 800082c:	2105      	movs	r1, #5
 800082e:	0018      	movs	r0, r3
 8000830:	f7ff fd1a 	bl	8000268 <cr95write>
    	if (cr95read(data, &len) == 0x80 && len == 8 && (data[0]^data[1]^data[2]^data[3]) == data[4]) {
 8000834:	1cfa      	adds	r2, r7, #3
 8000836:	2330      	movs	r3, #48	; 0x30
 8000838:	18fb      	adds	r3, r7, r3
 800083a:	0011      	movs	r1, r2
 800083c:	0018      	movs	r0, r3
 800083e:	f7ff fd29 	bl	8000294 <cr95read>
 8000842:	0003      	movs	r3, r0
 8000844:	2b80      	cmp	r3, #128	; 0x80
 8000846:	d000      	beq.n	800084a <cr95_read+0xc2>
 8000848:	e0a6      	b.n	8000998 <cr95_read+0x210>
 800084a:	1cfb      	adds	r3, r7, #3
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b08      	cmp	r3, #8
 8000850:	d000      	beq.n	8000854 <cr95_read+0xcc>
 8000852:	e0a1      	b.n	8000998 <cr95_read+0x210>
 8000854:	2130      	movs	r1, #48	; 0x30
 8000856:	187b      	adds	r3, r7, r1
 8000858:	781a      	ldrb	r2, [r3, #0]
 800085a:	187b      	adds	r3, r7, r1
 800085c:	785b      	ldrb	r3, [r3, #1]
 800085e:	4053      	eors	r3, r2
 8000860:	b2da      	uxtb	r2, r3
 8000862:	187b      	adds	r3, r7, r1
 8000864:	789b      	ldrb	r3, [r3, #2]
 8000866:	4053      	eors	r3, r2
 8000868:	b2da      	uxtb	r2, r3
 800086a:	187b      	adds	r3, r7, r1
 800086c:	78db      	ldrb	r3, [r3, #3]
 800086e:	4053      	eors	r3, r2
 8000870:	b2da      	uxtb	r2, r3
 8000872:	187b      	adds	r3, r7, r1
 8000874:	791b      	ldrb	r3, [r3, #4]
 8000876:	429a      	cmp	r2, r3
 8000878:	d000      	beq.n	800087c <cr95_read+0xf4>
 800087a:	e08d      	b.n	8000998 <cr95_read+0x210>
    		printf("UID CL1 =");
 800087c:	4b53      	ldr	r3, [pc, #332]	; (80009cc <cr95_read+0x244>)
 800087e:	0018      	movs	r0, r3
 8000880:	f003 feba 	bl	80045f8 <iprintf>
    		for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8000884:	2346      	movs	r3, #70	; 0x46
 8000886:	18fb      	adds	r3, r7, r3
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]
 800088c:	e010      	b.n	80008b0 <cr95_read+0x128>
 800088e:	2446      	movs	r4, #70	; 0x46
 8000890:	193b      	adds	r3, r7, r4
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2230      	movs	r2, #48	; 0x30
 8000896:	18ba      	adds	r2, r7, r2
 8000898:	5cd3      	ldrb	r3, [r2, r3]
 800089a:	001a      	movs	r2, r3
 800089c:	4b49      	ldr	r3, [pc, #292]	; (80009c4 <cr95_read+0x23c>)
 800089e:	0011      	movs	r1, r2
 80008a0:	0018      	movs	r0, r3
 80008a2:	f003 fea9 	bl	80045f8 <iprintf>
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	781a      	ldrb	r2, [r3, #0]
 80008aa:	193b      	adds	r3, r7, r4
 80008ac:	3201      	adds	r2, #1
 80008ae:	701a      	strb	r2, [r3, #0]
 80008b0:	1cfb      	adds	r3, r7, #3
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2246      	movs	r2, #70	; 0x46
 80008b6:	18ba      	adds	r2, r7, r2
 80008b8:	7812      	ldrb	r2, [r2, #0]
 80008ba:	429a      	cmp	r2, r3
 80008bc:	d3e7      	bcc.n	800088e <cr95_read+0x106>
    		printf("\n");
 80008be:	200a      	movs	r0, #10
 80008c0:	f003 feb4 	bl	800462c <putchar>
    		sprintf(uid, "%s %2X %2X %2X %2X\n", uid, data[0], data[1], data[2], data[3]);
 80008c4:	2230      	movs	r2, #48	; 0x30
 80008c6:	18bb      	adds	r3, r7, r2
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	001e      	movs	r6, r3
 80008cc:	18bb      	adds	r3, r7, r2
 80008ce:	785b      	ldrb	r3, [r3, #1]
 80008d0:	001c      	movs	r4, r3
 80008d2:	18bb      	adds	r3, r7, r2
 80008d4:	789b      	ldrb	r3, [r3, #2]
 80008d6:	001d      	movs	r5, r3
 80008d8:	18bb      	adds	r3, r7, r2
 80008da:	78db      	ldrb	r3, [r3, #3]
 80008dc:	1d3a      	adds	r2, r7, #4
 80008de:	493c      	ldr	r1, [pc, #240]	; (80009d0 <cr95_read+0x248>)
 80008e0:	1d38      	adds	r0, r7, #4
 80008e2:	9302      	str	r3, [sp, #8]
 80008e4:	9501      	str	r5, [sp, #4]
 80008e6:	9400      	str	r4, [sp, #0]
 80008e8:	0033      	movs	r3, r6
 80008ea:	f003 ff1d 	bl	8004728 <siprintf>
    		saved_data[4] = data[0];
 80008ee:	2430      	movs	r4, #48	; 0x30
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	781a      	ldrb	r2, [r3, #0]
 80008f4:	2124      	movs	r1, #36	; 0x24
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	711a      	strb	r2, [r3, #4]
    		saved_data[5] = data[1];
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	785a      	ldrb	r2, [r3, #1]
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	715a      	strb	r2, [r3, #5]
    		saved_data[6] = data[2];
 8000902:	193b      	adds	r3, r7, r4
 8000904:	789a      	ldrb	r2, [r3, #2]
 8000906:	187b      	adds	r3, r7, r1
 8000908:	719a      	strb	r2, [r3, #6]
    		saved_data[7] = data[3];
 800090a:	193b      	adds	r3, r7, r4
 800090c:	78da      	ldrb	r2, [r3, #3]
 800090e:	187b      	adds	r3, r7, r1
 8000910:	71da      	strb	r2, [r3, #7]
    		saved_data[8] = data[4];
 8000912:	193b      	adds	r3, r7, r4
 8000914:	791a      	ldrb	r2, [r3, #4]
 8000916:	187b      	adds	r3, r7, r1
 8000918:	721a      	strb	r2, [r3, #8]

    		cr95write(saved_data, sizeof(saved_data));
 800091a:	187b      	adds	r3, r7, r1
 800091c:	210a      	movs	r1, #10
 800091e:	0018      	movs	r0, r3
 8000920:	f7ff fca2 	bl	8000268 <cr95write>
    			if (cr95read(data, &len) == 0x80) {
 8000924:	1cfa      	adds	r2, r7, #3
 8000926:	193b      	adds	r3, r7, r4
 8000928:	0011      	movs	r1, r2
 800092a:	0018      	movs	r0, r3
 800092c:	f7ff fcb2 	bl	8000294 <cr95read>
 8000930:	0003      	movs	r3, r0
 8000932:	2b80      	cmp	r3, #128	; 0x80
 8000934:	d123      	bne.n	800097e <cr95_read+0x1f6>
    				printf("SEL1 Response =");
 8000936:	4b27      	ldr	r3, [pc, #156]	; (80009d4 <cr95_read+0x24c>)
 8000938:	0018      	movs	r0, r3
 800093a:	f003 fe5d 	bl	80045f8 <iprintf>
    				for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 800093e:	2345      	movs	r3, #69	; 0x45
 8000940:	18fb      	adds	r3, r7, r3
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]
 8000946:	e010      	b.n	800096a <cr95_read+0x1e2>
 8000948:	2445      	movs	r4, #69	; 0x45
 800094a:	193b      	adds	r3, r7, r4
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2230      	movs	r2, #48	; 0x30
 8000950:	18ba      	adds	r2, r7, r2
 8000952:	5cd3      	ldrb	r3, [r2, r3]
 8000954:	001a      	movs	r2, r3
 8000956:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <cr95_read+0x23c>)
 8000958:	0011      	movs	r1, r2
 800095a:	0018      	movs	r0, r3
 800095c:	f003 fe4c 	bl	80045f8 <iprintf>
 8000960:	193b      	adds	r3, r7, r4
 8000962:	781a      	ldrb	r2, [r3, #0]
 8000964:	193b      	adds	r3, r7, r4
 8000966:	3201      	adds	r2, #1
 8000968:	701a      	strb	r2, [r3, #0]
 800096a:	1cfb      	adds	r3, r7, #3
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2245      	movs	r2, #69	; 0x45
 8000970:	18ba      	adds	r2, r7, r2
 8000972:	7812      	ldrb	r2, [r2, #0]
 8000974:	429a      	cmp	r2, r3
 8000976:	d3e7      	bcc.n	8000948 <cr95_read+0x1c0>
    				printf("\n");
 8000978:	200a      	movs	r0, #10
 800097a:	f003 fe57 	bl	800462c <putchar>

    		} else {
    			sprintf(uid, "%s %2X %2X %2X %2X\n", uid, data[0], data[1], data[2], data[3]);
    		}*/

    		HAL_UART_Transmit(&huart2, (uint8_t*)(uid), strlen(uid), HAL_MAX_DELAY);
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	0018      	movs	r0, r3
 8000982:	f7ff fbc1 	bl	8000108 <strlen>
 8000986:	0003      	movs	r3, r0
 8000988:	b29a      	uxth	r2, r3
 800098a:	2301      	movs	r3, #1
 800098c:	425b      	negs	r3, r3
 800098e:	1d39      	adds	r1, r7, #4
 8000990:	4811      	ldr	r0, [pc, #68]	; (80009d8 <cr95_read+0x250>)
 8000992:	f003 f899 	bl	8003ac8 <HAL_UART_Transmit>
    	}

	} else {
		printf("REQA error\n");
	}
}
 8000996:	e008      	b.n	80009aa <cr95_read+0x222>
    		printf("UID CL1 error\n");
 8000998:	4b10      	ldr	r3, [pc, #64]	; (80009dc <cr95_read+0x254>)
 800099a:	0018      	movs	r0, r3
 800099c:	f003 feba 	bl	8004714 <puts>
}
 80009a0:	e003      	b.n	80009aa <cr95_read+0x222>
		printf("REQA error\n");
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <cr95_read+0x258>)
 80009a4:	0018      	movs	r0, r3
 80009a6:	f003 feb5 	bl	8004714 <puts>
}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	b013      	add	sp, #76	; 0x4c
 80009b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	08005ba8 	.word	0x08005ba8
 80009b8:	08005bac 	.word	0x08005bac
 80009bc:	08005bb4 	.word	0x08005bb4
 80009c0:	08005b44 	.word	0x08005b44
 80009c4:	08005b4c 	.word	0x08005b4c
 80009c8:	08005b54 	.word	0x08005b54
 80009cc:	08005b5c 	.word	0x08005b5c
 80009d0:	08005b68 	.word	0x08005b68
 80009d4:	08005b7c 	.word	0x08005b7c
 80009d8:	200003dc 	.word	0x200003dc
 80009dc:	08005b8c 	.word	0x08005b8c
 80009e0:	08005b9c 	.word	0x08005b9c

080009e4 <cr95_read8bit>:

static void cr95_read8bit(void)
{
 80009e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009e6:	46d6      	mov	lr, sl
 80009e8:	464f      	mov	r7, r9
 80009ea:	4646      	mov	r6, r8
 80009ec:	b5c0      	push	{r6, r7, lr}
 80009ee:	b09e      	sub	sp, #120	; 0x78
 80009f0:	af06      	add	r7, sp, #24
	const uint8_t cmd_reqa[] =  { 0x04, 0x02, 0x26, 0x07 };
 80009f2:	204c      	movs	r0, #76	; 0x4c
 80009f4:	2508      	movs	r5, #8
 80009f6:	197b      	adds	r3, r7, r5
 80009f8:	181b      	adds	r3, r3, r0
 80009fa:	4acb      	ldr	r2, [pc, #812]	; (8000d28 <cr95_read8bit+0x344>)
 80009fc:	6812      	ldr	r2, [r2, #0]
 80009fe:	601a      	str	r2, [r3, #0]
	const uint8_t cmd_acl1[] =  { 0x04, 0x03, 0x93, 0x20, 0x08 };
 8000a00:	2344      	movs	r3, #68	; 0x44
 8000a02:	2208      	movs	r2, #8
 8000a04:	4694      	mov	ip, r2
 8000a06:	44bc      	add	ip, r7
 8000a08:	4463      	add	r3, ip
 8000a0a:	4ac8      	ldr	r2, [pc, #800]	; (8000d2c <cr95_read8bit+0x348>)
 8000a0c:	6811      	ldr	r1, [r2, #0]
 8000a0e:	6019      	str	r1, [r3, #0]
 8000a10:	7912      	ldrb	r2, [r2, #4]
 8000a12:	711a      	strb	r2, [r3, #4]
	const uint8_t cmd_acl2[] =  { 0x04, 0x03, 0x95, 0x20, 0x08 };
 8000a14:	233c      	movs	r3, #60	; 0x3c
 8000a16:	2208      	movs	r2, #8
 8000a18:	4694      	mov	ip, r2
 8000a1a:	44bc      	add	ip, r7
 8000a1c:	4463      	add	r3, ip
 8000a1e:	4ac4      	ldr	r2, [pc, #784]	; (8000d30 <cr95_read8bit+0x34c>)
 8000a20:	6811      	ldr	r1, [r2, #0]
 8000a22:	6019      	str	r1, [r3, #0]
 8000a24:	7912      	ldrb	r2, [r2, #4]
 8000a26:	711a      	strb	r2, [r3, #4]

	uint8_t data[8];
	uint8_t saved_data[10] =  { 0x04, 0x08, 0x93, 0x70, 0x00, 0x00, 0x00, 0x00,  0x00, 0x28};
 8000a28:	2328      	movs	r3, #40	; 0x28
 8000a2a:	2208      	movs	r2, #8
 8000a2c:	4694      	mov	ip, r2
 8000a2e:	44bc      	add	ip, r7
 8000a30:	4463      	add	r3, ip
 8000a32:	4ac0      	ldr	r2, [pc, #768]	; (8000d34 <cr95_read8bit+0x350>)
 8000a34:	ca12      	ldmia	r2!, {r1, r4}
 8000a36:	c312      	stmia	r3!, {r1, r4}
 8000a38:	8812      	ldrh	r2, [r2, #0]
 8000a3a:	801a      	strh	r2, [r3, #0]
	char uid[32];
	uint8_t len;

	cr95write(cmd_reqa, sizeof(cmd_reqa));
 8000a3c:	197b      	adds	r3, r7, r5
 8000a3e:	181b      	adds	r3, r3, r0
 8000a40:	2104      	movs	r1, #4
 8000a42:	0018      	movs	r0, r3
 8000a44:	f7ff fc10 	bl	8000268 <cr95write>
	if (cr95read(data, &len) == 0x80) {
 8000a48:	230f      	movs	r3, #15
 8000a4a:	18fa      	adds	r2, r7, r3
 8000a4c:	2334      	movs	r3, #52	; 0x34
 8000a4e:	2108      	movs	r1, #8
 8000a50:	468c      	mov	ip, r1
 8000a52:	44bc      	add	ip, r7
 8000a54:	4463      	add	r3, ip
 8000a56:	0011      	movs	r1, r2
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f7ff fc1b 	bl	8000294 <cr95read>
 8000a5e:	0003      	movs	r3, r0
 8000a60:	2b80      	cmp	r3, #128	; 0x80
 8000a62:	d000      	beq.n	8000a66 <cr95_read8bit+0x82>
 8000a64:	e2c5      	b.n	8000ff2 <cr95_read8bit+0x60e>
		printf("ATQA =");
 8000a66:	4bb4      	ldr	r3, [pc, #720]	; (8000d38 <cr95_read8bit+0x354>)
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f003 fdc5 	bl	80045f8 <iprintf>
		for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8000a6e:	2357      	movs	r3, #87	; 0x57
 8000a70:	2208      	movs	r2, #8
 8000a72:	4694      	mov	ip, r2
 8000a74:	44bc      	add	ip, r7
 8000a76:	4463      	add	r3, ip
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
 8000a7c:	e017      	b.n	8000aae <cr95_read8bit+0xca>
 8000a7e:	2457      	movs	r4, #87	; 0x57
 8000a80:	2508      	movs	r5, #8
 8000a82:	197b      	adds	r3, r7, r5
 8000a84:	191b      	adds	r3, r3, r4
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2234      	movs	r2, #52	; 0x34
 8000a8a:	2108      	movs	r1, #8
 8000a8c:	468c      	mov	ip, r1
 8000a8e:	44bc      	add	ip, r7
 8000a90:	4462      	add	r2, ip
 8000a92:	5cd3      	ldrb	r3, [r2, r3]
 8000a94:	001a      	movs	r2, r3
 8000a96:	4ba9      	ldr	r3, [pc, #676]	; (8000d3c <cr95_read8bit+0x358>)
 8000a98:	0011      	movs	r1, r2
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f003 fdac 	bl	80045f8 <iprintf>
 8000aa0:	197b      	adds	r3, r7, r5
 8000aa2:	191b      	adds	r3, r3, r4
 8000aa4:	781a      	ldrb	r2, [r3, #0]
 8000aa6:	197b      	adds	r3, r7, r5
 8000aa8:	191b      	adds	r3, r3, r4
 8000aaa:	3201      	adds	r2, #1
 8000aac:	701a      	strb	r2, [r3, #0]
 8000aae:	230f      	movs	r3, #15
 8000ab0:	18fb      	adds	r3, r7, r3
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2257      	movs	r2, #87	; 0x57
 8000ab6:	2108      	movs	r1, #8
 8000ab8:	468c      	mov	ip, r1
 8000aba:	44bc      	add	ip, r7
 8000abc:	4462      	add	r2, ip
 8000abe:	7812      	ldrb	r2, [r2, #0]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d3dc      	bcc.n	8000a7e <cr95_read8bit+0x9a>
		printf("\n");
 8000ac4:	200a      	movs	r0, #10
 8000ac6:	f003 fdb1 	bl	800462c <putchar>

    	sprintf(uid, "UID =");
 8000aca:	2308      	movs	r3, #8
 8000acc:	2208      	movs	r2, #8
 8000ace:	4694      	mov	ip, r2
 8000ad0:	44bc      	add	ip, r7
 8000ad2:	4463      	add	r3, ip
 8000ad4:	4a9a      	ldr	r2, [pc, #616]	; (8000d40 <cr95_read8bit+0x35c>)
 8000ad6:	6811      	ldr	r1, [r2, #0]
 8000ad8:	6019      	str	r1, [r3, #0]
 8000ada:	8892      	ldrh	r2, [r2, #4]
 8000adc:	809a      	strh	r2, [r3, #4]

    	cr95write(cmd_acl1, sizeof(cmd_acl1));
 8000ade:	2344      	movs	r3, #68	; 0x44
 8000ae0:	2208      	movs	r2, #8
 8000ae2:	4694      	mov	ip, r2
 8000ae4:	44bc      	add	ip, r7
 8000ae6:	4463      	add	r3, ip
 8000ae8:	2105      	movs	r1, #5
 8000aea:	0018      	movs	r0, r3
 8000aec:	f7ff fbbc 	bl	8000268 <cr95write>
    	if (cr95read(data, &len) == 0x80 && len == 8 && (data[0]^data[1]^data[2]^data[3]) == data[4]) {
 8000af0:	230f      	movs	r3, #15
 8000af2:	18fa      	adds	r2, r7, r3
 8000af4:	2334      	movs	r3, #52	; 0x34
 8000af6:	2108      	movs	r1, #8
 8000af8:	468c      	mov	ip, r1
 8000afa:	44bc      	add	ip, r7
 8000afc:	4463      	add	r3, ip
 8000afe:	0011      	movs	r1, r2
 8000b00:	0018      	movs	r0, r3
 8000b02:	f7ff fbc7 	bl	8000294 <cr95read>
 8000b06:	0003      	movs	r3, r0
 8000b08:	2b80      	cmp	r3, #128	; 0x80
 8000b0a:	d000      	beq.n	8000b0e <cr95_read8bit+0x12a>
 8000b0c:	e26c      	b.n	8000fe8 <cr95_read8bit+0x604>
 8000b0e:	230f      	movs	r3, #15
 8000b10:	18fb      	adds	r3, r7, r3
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b08      	cmp	r3, #8
 8000b16:	d000      	beq.n	8000b1a <cr95_read8bit+0x136>
 8000b18:	e266      	b.n	8000fe8 <cr95_read8bit+0x604>
 8000b1a:	2134      	movs	r1, #52	; 0x34
 8000b1c:	2008      	movs	r0, #8
 8000b1e:	183b      	adds	r3, r7, r0
 8000b20:	185b      	adds	r3, r3, r1
 8000b22:	781a      	ldrb	r2, [r3, #0]
 8000b24:	183b      	adds	r3, r7, r0
 8000b26:	185b      	adds	r3, r3, r1
 8000b28:	785b      	ldrb	r3, [r3, #1]
 8000b2a:	4053      	eors	r3, r2
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	183b      	adds	r3, r7, r0
 8000b30:	185b      	adds	r3, r3, r1
 8000b32:	789b      	ldrb	r3, [r3, #2]
 8000b34:	4053      	eors	r3, r2
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	183b      	adds	r3, r7, r0
 8000b3a:	185b      	adds	r3, r3, r1
 8000b3c:	78db      	ldrb	r3, [r3, #3]
 8000b3e:	4053      	eors	r3, r2
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	183b      	adds	r3, r7, r0
 8000b44:	185b      	adds	r3, r3, r1
 8000b46:	791b      	ldrb	r3, [r3, #4]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d000      	beq.n	8000b4e <cr95_read8bit+0x16a>
 8000b4c:	e24c      	b.n	8000fe8 <cr95_read8bit+0x604>
    		printf("UID CL1 =");
 8000b4e:	4b7d      	ldr	r3, [pc, #500]	; (8000d44 <cr95_read8bit+0x360>)
 8000b50:	0018      	movs	r0, r3
 8000b52:	f003 fd51 	bl	80045f8 <iprintf>
    		for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8000b56:	2356      	movs	r3, #86	; 0x56
 8000b58:	2208      	movs	r2, #8
 8000b5a:	4694      	mov	ip, r2
 8000b5c:	44bc      	add	ip, r7
 8000b5e:	4463      	add	r3, ip
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
 8000b64:	e017      	b.n	8000b96 <cr95_read8bit+0x1b2>
 8000b66:	2456      	movs	r4, #86	; 0x56
 8000b68:	2508      	movs	r5, #8
 8000b6a:	197b      	adds	r3, r7, r5
 8000b6c:	191b      	adds	r3, r3, r4
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2234      	movs	r2, #52	; 0x34
 8000b72:	2108      	movs	r1, #8
 8000b74:	468c      	mov	ip, r1
 8000b76:	44bc      	add	ip, r7
 8000b78:	4462      	add	r2, ip
 8000b7a:	5cd3      	ldrb	r3, [r2, r3]
 8000b7c:	001a      	movs	r2, r3
 8000b7e:	4b6f      	ldr	r3, [pc, #444]	; (8000d3c <cr95_read8bit+0x358>)
 8000b80:	0011      	movs	r1, r2
 8000b82:	0018      	movs	r0, r3
 8000b84:	f003 fd38 	bl	80045f8 <iprintf>
 8000b88:	197b      	adds	r3, r7, r5
 8000b8a:	191b      	adds	r3, r3, r4
 8000b8c:	781a      	ldrb	r2, [r3, #0]
 8000b8e:	197b      	adds	r3, r7, r5
 8000b90:	191b      	adds	r3, r3, r4
 8000b92:	3201      	adds	r2, #1
 8000b94:	701a      	strb	r2, [r3, #0]
 8000b96:	230f      	movs	r3, #15
 8000b98:	18fb      	adds	r3, r7, r3
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2256      	movs	r2, #86	; 0x56
 8000b9e:	2108      	movs	r1, #8
 8000ba0:	468c      	mov	ip, r1
 8000ba2:	44bc      	add	ip, r7
 8000ba4:	4462      	add	r2, ip
 8000ba6:	7812      	ldrb	r2, [r2, #0]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d3dc      	bcc.n	8000b66 <cr95_read8bit+0x182>
    		printf("\n");
 8000bac:	200a      	movs	r0, #10
 8000bae:	f003 fd3d 	bl	800462c <putchar>
    		saved_data[4] = data[0];
 8000bb2:	2134      	movs	r1, #52	; 0x34
 8000bb4:	2408      	movs	r4, #8
 8000bb6:	193b      	adds	r3, r7, r4
 8000bb8:	185b      	adds	r3, r3, r1
 8000bba:	781a      	ldrb	r2, [r3, #0]
 8000bbc:	2028      	movs	r0, #40	; 0x28
 8000bbe:	193b      	adds	r3, r7, r4
 8000bc0:	181b      	adds	r3, r3, r0
 8000bc2:	711a      	strb	r2, [r3, #4]
			saved_data[5] = data[1];
 8000bc4:	193b      	adds	r3, r7, r4
 8000bc6:	185b      	adds	r3, r3, r1
 8000bc8:	785a      	ldrb	r2, [r3, #1]
 8000bca:	193b      	adds	r3, r7, r4
 8000bcc:	181b      	adds	r3, r3, r0
 8000bce:	715a      	strb	r2, [r3, #5]
			saved_data[6] = data[2];
 8000bd0:	193b      	adds	r3, r7, r4
 8000bd2:	185b      	adds	r3, r3, r1
 8000bd4:	789a      	ldrb	r2, [r3, #2]
 8000bd6:	193b      	adds	r3, r7, r4
 8000bd8:	181b      	adds	r3, r3, r0
 8000bda:	719a      	strb	r2, [r3, #6]
			saved_data[7] = data[3];
 8000bdc:	193b      	adds	r3, r7, r4
 8000bde:	185b      	adds	r3, r3, r1
 8000be0:	78da      	ldrb	r2, [r3, #3]
 8000be2:	193b      	adds	r3, r7, r4
 8000be4:	181b      	adds	r3, r3, r0
 8000be6:	71da      	strb	r2, [r3, #7]
			saved_data[8] = data[4];
 8000be8:	193b      	adds	r3, r7, r4
 8000bea:	185b      	adds	r3, r3, r1
 8000bec:	791a      	ldrb	r2, [r3, #4]
 8000bee:	193b      	adds	r3, r7, r4
 8000bf0:	181b      	adds	r3, r3, r0
 8000bf2:	721a      	strb	r2, [r3, #8]

			if (data[0] == 0x88) {
 8000bf4:	193b      	adds	r3, r7, r4
 8000bf6:	185b      	adds	r3, r3, r1
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b88      	cmp	r3, #136	; 0x88
 8000bfc:	d000      	beq.n	8000c00 <cr95_read8bit+0x21c>
 8000bfe:	e178      	b.n	8000ef2 <cr95_read8bit+0x50e>
				printf("Collision detected, longer UID!\n");
 8000c00:	4b51      	ldr	r3, [pc, #324]	; (8000d48 <cr95_read8bit+0x364>)
 8000c02:	0018      	movs	r0, r3
 8000c04:	f003 fd86 	bl	8004714 <puts>
				cr95write(saved_data, sizeof(saved_data));
 8000c08:	2328      	movs	r3, #40	; 0x28
 8000c0a:	2208      	movs	r2, #8
 8000c0c:	4694      	mov	ip, r2
 8000c0e:	44bc      	add	ip, r7
 8000c10:	4463      	add	r3, ip
 8000c12:	210a      	movs	r1, #10
 8000c14:	0018      	movs	r0, r3
 8000c16:	f7ff fb27 	bl	8000268 <cr95write>
				if (cr95read(data, &len) == 0x80) {
 8000c1a:	230f      	movs	r3, #15
 8000c1c:	18fa      	adds	r2, r7, r3
 8000c1e:	2334      	movs	r3, #52	; 0x34
 8000c20:	2108      	movs	r1, #8
 8000c22:	468c      	mov	ip, r1
 8000c24:	44bc      	add	ip, r7
 8000c26:	4463      	add	r3, ip
 8000c28:	0011      	movs	r1, r2
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f7ff fb32 	bl	8000294 <cr95read>
 8000c30:	0003      	movs	r3, r0
 8000c32:	2b80      	cmp	r3, #128	; 0x80
 8000c34:	d131      	bne.n	8000c9a <cr95_read8bit+0x2b6>
					printf("SEL1 Response =");
 8000c36:	4b45      	ldr	r3, [pc, #276]	; (8000d4c <cr95_read8bit+0x368>)
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f003 fcdd 	bl	80045f8 <iprintf>
					for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8000c3e:	2355      	movs	r3, #85	; 0x55
 8000c40:	2208      	movs	r2, #8
 8000c42:	4694      	mov	ip, r2
 8000c44:	44bc      	add	ip, r7
 8000c46:	4463      	add	r3, ip
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
 8000c4c:	e017      	b.n	8000c7e <cr95_read8bit+0x29a>
 8000c4e:	2455      	movs	r4, #85	; 0x55
 8000c50:	2508      	movs	r5, #8
 8000c52:	197b      	adds	r3, r7, r5
 8000c54:	191b      	adds	r3, r3, r4
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2234      	movs	r2, #52	; 0x34
 8000c5a:	2108      	movs	r1, #8
 8000c5c:	468c      	mov	ip, r1
 8000c5e:	44bc      	add	ip, r7
 8000c60:	4462      	add	r2, ip
 8000c62:	5cd3      	ldrb	r3, [r2, r3]
 8000c64:	001a      	movs	r2, r3
 8000c66:	4b35      	ldr	r3, [pc, #212]	; (8000d3c <cr95_read8bit+0x358>)
 8000c68:	0011      	movs	r1, r2
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f003 fcc4 	bl	80045f8 <iprintf>
 8000c70:	197b      	adds	r3, r7, r5
 8000c72:	191b      	adds	r3, r3, r4
 8000c74:	781a      	ldrb	r2, [r3, #0]
 8000c76:	197b      	adds	r3, r7, r5
 8000c78:	191b      	adds	r3, r3, r4
 8000c7a:	3201      	adds	r2, #1
 8000c7c:	701a      	strb	r2, [r3, #0]
 8000c7e:	230f      	movs	r3, #15
 8000c80:	18fb      	adds	r3, r7, r3
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2255      	movs	r2, #85	; 0x55
 8000c86:	2108      	movs	r1, #8
 8000c88:	468c      	mov	ip, r1
 8000c8a:	44bc      	add	ip, r7
 8000c8c:	4462      	add	r2, ip
 8000c8e:	7812      	ldrb	r2, [r2, #0]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d3dc      	bcc.n	8000c4e <cr95_read8bit+0x26a>
					printf("\n");
 8000c94:	200a      	movs	r0, #10
 8000c96:	f003 fcc9 	bl	800462c <putchar>
				}

				if (data[0] != 0x00) {
 8000c9a:	2334      	movs	r3, #52	; 0x34
 8000c9c:	2208      	movs	r2, #8
 8000c9e:	4694      	mov	ip, r2
 8000ca0:	44bc      	add	ip, r7
 8000ca2:	4463      	add	r3, ip
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d100      	bne.n	8000cac <cr95_read8bit+0x2c8>
 8000caa:	e11d      	b.n	8000ee8 <cr95_read8bit+0x504>
				   cr95write(cmd_acl2, sizeof(cmd_acl2));
 8000cac:	233c      	movs	r3, #60	; 0x3c
 8000cae:	2208      	movs	r2, #8
 8000cb0:	4694      	mov	ip, r2
 8000cb2:	44bc      	add	ip, r7
 8000cb4:	4463      	add	r3, ip
 8000cb6:	2105      	movs	r1, #5
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f7ff fad5 	bl	8000268 <cr95write>
				   if (cr95read(data, &len) == 0x80 && (data[0]^data[1]^data[2]^data[3]) == data[4]) {
 8000cbe:	230f      	movs	r3, #15
 8000cc0:	18fa      	adds	r2, r7, r3
 8000cc2:	2334      	movs	r3, #52	; 0x34
 8000cc4:	2108      	movs	r1, #8
 8000cc6:	468c      	mov	ip, r1
 8000cc8:	44bc      	add	ip, r7
 8000cca:	4463      	add	r3, ip
 8000ccc:	0011      	movs	r1, r2
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f7ff fae0 	bl	8000294 <cr95read>
 8000cd4:	0003      	movs	r3, r0
 8000cd6:	2b80      	cmp	r3, #128	; 0x80
 8000cd8:	d000      	beq.n	8000cdc <cr95_read8bit+0x2f8>
 8000cda:	e100      	b.n	8000ede <cr95_read8bit+0x4fa>
 8000cdc:	2134      	movs	r1, #52	; 0x34
 8000cde:	2008      	movs	r0, #8
 8000ce0:	183b      	adds	r3, r7, r0
 8000ce2:	185b      	adds	r3, r3, r1
 8000ce4:	781a      	ldrb	r2, [r3, #0]
 8000ce6:	183b      	adds	r3, r7, r0
 8000ce8:	185b      	adds	r3, r3, r1
 8000cea:	785b      	ldrb	r3, [r3, #1]
 8000cec:	4053      	eors	r3, r2
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	183b      	adds	r3, r7, r0
 8000cf2:	185b      	adds	r3, r3, r1
 8000cf4:	789b      	ldrb	r3, [r3, #2]
 8000cf6:	4053      	eors	r3, r2
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	183b      	adds	r3, r7, r0
 8000cfc:	185b      	adds	r3, r3, r1
 8000cfe:	78db      	ldrb	r3, [r3, #3]
 8000d00:	4053      	eors	r3, r2
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	183b      	adds	r3, r7, r0
 8000d06:	185b      	adds	r3, r3, r1
 8000d08:	791b      	ldrb	r3, [r3, #4]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d000      	beq.n	8000d10 <cr95_read8bit+0x32c>
 8000d0e:	e0e6      	b.n	8000ede <cr95_read8bit+0x4fa>
				    	printf("UID CL2 =");
 8000d10:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <cr95_read8bit+0x36c>)
 8000d12:	0018      	movs	r0, r3
 8000d14:	f003 fc70 	bl	80045f8 <iprintf>
				    	for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8000d18:	2354      	movs	r3, #84	; 0x54
 8000d1a:	2208      	movs	r2, #8
 8000d1c:	4694      	mov	ip, r2
 8000d1e:	44bc      	add	ip, r7
 8000d20:	4463      	add	r3, ip
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
 8000d26:	e02d      	b.n	8000d84 <cr95_read8bit+0x3a0>
 8000d28:	08005ba8 	.word	0x08005ba8
 8000d2c:	08005bac 	.word	0x08005bac
 8000d30:	08005c3c 	.word	0x08005c3c
 8000d34:	08005bb4 	.word	0x08005bb4
 8000d38:	08005b44 	.word	0x08005b44
 8000d3c:	08005b4c 	.word	0x08005b4c
 8000d40:	08005b54 	.word	0x08005b54
 8000d44:	08005b5c 	.word	0x08005b5c
 8000d48:	08005bc0 	.word	0x08005bc0
 8000d4c:	08005b7c 	.word	0x08005b7c
 8000d50:	08005be0 	.word	0x08005be0
 8000d54:	2454      	movs	r4, #84	; 0x54
 8000d56:	2508      	movs	r5, #8
 8000d58:	197b      	adds	r3, r7, r5
 8000d5a:	191b      	adds	r3, r3, r4
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2234      	movs	r2, #52	; 0x34
 8000d60:	2108      	movs	r1, #8
 8000d62:	468c      	mov	ip, r1
 8000d64:	44bc      	add	ip, r7
 8000d66:	4462      	add	r2, ip
 8000d68:	5cd3      	ldrb	r3, [r2, r3]
 8000d6a:	001a      	movs	r2, r3
 8000d6c:	4ba7      	ldr	r3, [pc, #668]	; (800100c <cr95_read8bit+0x628>)
 8000d6e:	0011      	movs	r1, r2
 8000d70:	0018      	movs	r0, r3
 8000d72:	f003 fc41 	bl	80045f8 <iprintf>
 8000d76:	197b      	adds	r3, r7, r5
 8000d78:	191b      	adds	r3, r3, r4
 8000d7a:	781a      	ldrb	r2, [r3, #0]
 8000d7c:	197b      	adds	r3, r7, r5
 8000d7e:	191b      	adds	r3, r3, r4
 8000d80:	3201      	adds	r2, #1
 8000d82:	701a      	strb	r2, [r3, #0]
 8000d84:	230f      	movs	r3, #15
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2254      	movs	r2, #84	; 0x54
 8000d8c:	2108      	movs	r1, #8
 8000d8e:	468c      	mov	ip, r1
 8000d90:	44bc      	add	ip, r7
 8000d92:	4462      	add	r2, ip
 8000d94:	7812      	ldrb	r2, [r2, #0]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d3dc      	bcc.n	8000d54 <cr95_read8bit+0x370>
				    	printf("\n");
 8000d9a:	200a      	movs	r0, #10
 8000d9c:	f003 fc46 	bl	800462c <putchar>
				    	sprintf(uid, "%s %2X %2X %2X %2X %2X %2X %2X\n", uid, saved_data[5], saved_data[6], saved_data[7], data[0], data[1], data[2], data[3]);
 8000da0:	2128      	movs	r1, #40	; 0x28
 8000da2:	2208      	movs	r2, #8
 8000da4:	18bb      	adds	r3, r7, r2
 8000da6:	185b      	adds	r3, r3, r1
 8000da8:	795b      	ldrb	r3, [r3, #5]
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	18bb      	adds	r3, r7, r2
 8000dae:	185b      	adds	r3, r3, r1
 8000db0:	799b      	ldrb	r3, [r3, #6]
 8000db2:	001c      	movs	r4, r3
 8000db4:	0010      	movs	r0, r2
 8000db6:	18bb      	adds	r3, r7, r2
 8000db8:	185b      	adds	r3, r3, r1
 8000dba:	79db      	ldrb	r3, [r3, #7]
 8000dbc:	001d      	movs	r5, r3
 8000dbe:	2234      	movs	r2, #52	; 0x34
 8000dc0:	0001      	movs	r1, r0
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	189b      	adds	r3, r3, r2
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	001e      	movs	r6, r3
 8000dca:	187b      	adds	r3, r7, r1
 8000dcc:	189b      	adds	r3, r3, r2
 8000dce:	785b      	ldrb	r3, [r3, #1]
 8000dd0:	469c      	mov	ip, r3
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	189b      	adds	r3, r3, r2
 8000dd6:	789b      	ldrb	r3, [r3, #2]
 8000dd8:	4698      	mov	r8, r3
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	189b      	adds	r3, r3, r2
 8000dde:	78db      	ldrb	r3, [r3, #3]
 8000de0:	469a      	mov	sl, r3
 8000de2:	2008      	movs	r0, #8
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	181a      	adds	r2, r3, r0
 8000de8:	4989      	ldr	r1, [pc, #548]	; (8001010 <cr95_read8bit+0x62c>)
 8000dea:	2308      	movs	r3, #8
 8000dec:	4699      	mov	r9, r3
 8000dee:	44b9      	add	r9, r7
 8000df0:	4448      	add	r0, r9
 8000df2:	4653      	mov	r3, sl
 8000df4:	9305      	str	r3, [sp, #20]
 8000df6:	4643      	mov	r3, r8
 8000df8:	9304      	str	r3, [sp, #16]
 8000dfa:	4663      	mov	r3, ip
 8000dfc:	9303      	str	r3, [sp, #12]
 8000dfe:	9602      	str	r6, [sp, #8]
 8000e00:	9501      	str	r5, [sp, #4]
 8000e02:	9400      	str	r4, [sp, #0]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f003 fc8f 	bl	8004728 <siprintf>
				    	saved_data[2] = 0x95;
 8000e0a:	2128      	movs	r1, #40	; 0x28
 8000e0c:	2508      	movs	r5, #8
 8000e0e:	197b      	adds	r3, r7, r5
 8000e10:	185b      	adds	r3, r3, r1
 8000e12:	2295      	movs	r2, #149	; 0x95
 8000e14:	709a      	strb	r2, [r3, #2]
				    	saved_data[4] = data[0];
 8000e16:	2434      	movs	r4, #52	; 0x34
 8000e18:	197b      	adds	r3, r7, r5
 8000e1a:	191b      	adds	r3, r3, r4
 8000e1c:	781a      	ldrb	r2, [r3, #0]
 8000e1e:	197b      	adds	r3, r7, r5
 8000e20:	185b      	adds	r3, r3, r1
 8000e22:	711a      	strb	r2, [r3, #4]
				    	saved_data[5] = data[1];
 8000e24:	197b      	adds	r3, r7, r5
 8000e26:	191b      	adds	r3, r3, r4
 8000e28:	785a      	ldrb	r2, [r3, #1]
 8000e2a:	197b      	adds	r3, r7, r5
 8000e2c:	185b      	adds	r3, r3, r1
 8000e2e:	715a      	strb	r2, [r3, #5]
				    	saved_data[6] = data[2];
 8000e30:	197b      	adds	r3, r7, r5
 8000e32:	191b      	adds	r3, r3, r4
 8000e34:	789a      	ldrb	r2, [r3, #2]
 8000e36:	197b      	adds	r3, r7, r5
 8000e38:	185b      	adds	r3, r3, r1
 8000e3a:	719a      	strb	r2, [r3, #6]
				    	saved_data[7] = data[3];
 8000e3c:	197b      	adds	r3, r7, r5
 8000e3e:	191b      	adds	r3, r3, r4
 8000e40:	78da      	ldrb	r2, [r3, #3]
 8000e42:	197b      	adds	r3, r7, r5
 8000e44:	185b      	adds	r3, r3, r1
 8000e46:	71da      	strb	r2, [r3, #7]
				    	saved_data[8] = data[4];
 8000e48:	197b      	adds	r3, r7, r5
 8000e4a:	191b      	adds	r3, r3, r4
 8000e4c:	791a      	ldrb	r2, [r3, #4]
 8000e4e:	197b      	adds	r3, r7, r5
 8000e50:	185b      	adds	r3, r3, r1
 8000e52:	721a      	strb	r2, [r3, #8]

				    	cr95write(saved_data, sizeof(saved_data));
 8000e54:	197b      	adds	r3, r7, r5
 8000e56:	185b      	adds	r3, r3, r1
 8000e58:	210a      	movs	r1, #10
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f7ff fa04 	bl	8000268 <cr95write>
				    	if (cr95read(data, &len) == 0x80) {
 8000e60:	230f      	movs	r3, #15
 8000e62:	18fa      	adds	r2, r7, r3
 8000e64:	197b      	adds	r3, r7, r5
 8000e66:	191b      	adds	r3, r3, r4
 8000e68:	0011      	movs	r1, r2
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f7ff fa12 	bl	8000294 <cr95read>
 8000e70:	0003      	movs	r3, r0
 8000e72:	2b80      	cmp	r3, #128	; 0x80
 8000e74:	d000      	beq.n	8000e78 <cr95_read8bit+0x494>
 8000e76:	e0a6      	b.n	8000fc6 <cr95_read8bit+0x5e2>
				    		printf("SEL2 Response =");
 8000e78:	4b66      	ldr	r3, [pc, #408]	; (8001014 <cr95_read8bit+0x630>)
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f003 fbbc 	bl	80045f8 <iprintf>
				    		for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8000e80:	2353      	movs	r3, #83	; 0x53
 8000e82:	2208      	movs	r2, #8
 8000e84:	4694      	mov	ip, r2
 8000e86:	44bc      	add	ip, r7
 8000e88:	4463      	add	r3, ip
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
 8000e8e:	e017      	b.n	8000ec0 <cr95_read8bit+0x4dc>
 8000e90:	2453      	movs	r4, #83	; 0x53
 8000e92:	2508      	movs	r5, #8
 8000e94:	197b      	adds	r3, r7, r5
 8000e96:	191b      	adds	r3, r3, r4
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2234      	movs	r2, #52	; 0x34
 8000e9c:	2108      	movs	r1, #8
 8000e9e:	468c      	mov	ip, r1
 8000ea0:	44bc      	add	ip, r7
 8000ea2:	4462      	add	r2, ip
 8000ea4:	5cd3      	ldrb	r3, [r2, r3]
 8000ea6:	001a      	movs	r2, r3
 8000ea8:	4b58      	ldr	r3, [pc, #352]	; (800100c <cr95_read8bit+0x628>)
 8000eaa:	0011      	movs	r1, r2
 8000eac:	0018      	movs	r0, r3
 8000eae:	f003 fba3 	bl	80045f8 <iprintf>
 8000eb2:	197b      	adds	r3, r7, r5
 8000eb4:	191b      	adds	r3, r3, r4
 8000eb6:	781a      	ldrb	r2, [r3, #0]
 8000eb8:	197b      	adds	r3, r7, r5
 8000eba:	191b      	adds	r3, r3, r4
 8000ebc:	3201      	adds	r2, #1
 8000ebe:	701a      	strb	r2, [r3, #0]
 8000ec0:	230f      	movs	r3, #15
 8000ec2:	18fb      	adds	r3, r7, r3
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2253      	movs	r2, #83	; 0x53
 8000ec8:	2108      	movs	r1, #8
 8000eca:	468c      	mov	ip, r1
 8000ecc:	44bc      	add	ip, r7
 8000ece:	4462      	add	r2, ip
 8000ed0:	7812      	ldrb	r2, [r2, #0]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d3dc      	bcc.n	8000e90 <cr95_read8bit+0x4ac>
				    		printf("\n");
 8000ed6:	200a      	movs	r0, #10
 8000ed8:	f003 fba8 	bl	800462c <putchar>
				    	if (cr95read(data, &len) == 0x80) {
 8000edc:	e073      	b.n	8000fc6 <cr95_read8bit+0x5e2>
				    	}
				    } else {
				    	printf("UID CL2 error\n");
 8000ede:	4b4e      	ldr	r3, [pc, #312]	; (8001018 <cr95_read8bit+0x634>)
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f003 fc17 	bl	8004714 <puts>
 8000ee6:	e06e      	b.n	8000fc6 <cr95_read8bit+0x5e2>
				    }
				} else {
					printf("SEL CL1 error\n");
 8000ee8:	4b4c      	ldr	r3, [pc, #304]	; (800101c <cr95_read8bit+0x638>)
 8000eea:	0018      	movs	r0, r3
 8000eec:	f003 fc12 	bl	8004714 <puts>
 8000ef0:	e069      	b.n	8000fc6 <cr95_read8bit+0x5e2>
				}
    		} else {
    			cr95write(saved_data, sizeof(saved_data));
 8000ef2:	2328      	movs	r3, #40	; 0x28
 8000ef4:	2208      	movs	r2, #8
 8000ef6:	4694      	mov	ip, r2
 8000ef8:	44bc      	add	ip, r7
 8000efa:	4463      	add	r3, ip
 8000efc:	210a      	movs	r1, #10
 8000efe:	0018      	movs	r0, r3
 8000f00:	f7ff f9b2 	bl	8000268 <cr95write>
    			if (cr95read(data, &len) == 0x80) {
 8000f04:	230f      	movs	r3, #15
 8000f06:	18fa      	adds	r2, r7, r3
 8000f08:	2334      	movs	r3, #52	; 0x34
 8000f0a:	2108      	movs	r1, #8
 8000f0c:	468c      	mov	ip, r1
 8000f0e:	44bc      	add	ip, r7
 8000f10:	4463      	add	r3, ip
 8000f12:	0011      	movs	r1, r2
 8000f14:	0018      	movs	r0, r3
 8000f16:	f7ff f9bd 	bl	8000294 <cr95read>
 8000f1a:	0003      	movs	r3, r0
 8000f1c:	2b80      	cmp	r3, #128	; 0x80
 8000f1e:	d131      	bne.n	8000f84 <cr95_read8bit+0x5a0>
    				printf("SEL1 Response =");
 8000f20:	4b3f      	ldr	r3, [pc, #252]	; (8001020 <cr95_read8bit+0x63c>)
 8000f22:	0018      	movs	r0, r3
 8000f24:	f003 fb68 	bl	80045f8 <iprintf>
    				for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8000f28:	2352      	movs	r3, #82	; 0x52
 8000f2a:	2208      	movs	r2, #8
 8000f2c:	4694      	mov	ip, r2
 8000f2e:	44bc      	add	ip, r7
 8000f30:	4463      	add	r3, ip
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
 8000f36:	e017      	b.n	8000f68 <cr95_read8bit+0x584>
 8000f38:	2452      	movs	r4, #82	; 0x52
 8000f3a:	2508      	movs	r5, #8
 8000f3c:	197b      	adds	r3, r7, r5
 8000f3e:	191b      	adds	r3, r3, r4
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2234      	movs	r2, #52	; 0x34
 8000f44:	2108      	movs	r1, #8
 8000f46:	468c      	mov	ip, r1
 8000f48:	44bc      	add	ip, r7
 8000f4a:	4462      	add	r2, ip
 8000f4c:	5cd3      	ldrb	r3, [r2, r3]
 8000f4e:	001a      	movs	r2, r3
 8000f50:	4b2e      	ldr	r3, [pc, #184]	; (800100c <cr95_read8bit+0x628>)
 8000f52:	0011      	movs	r1, r2
 8000f54:	0018      	movs	r0, r3
 8000f56:	f003 fb4f 	bl	80045f8 <iprintf>
 8000f5a:	197b      	adds	r3, r7, r5
 8000f5c:	191b      	adds	r3, r3, r4
 8000f5e:	781a      	ldrb	r2, [r3, #0]
 8000f60:	197b      	adds	r3, r7, r5
 8000f62:	191b      	adds	r3, r3, r4
 8000f64:	3201      	adds	r2, #1
 8000f66:	701a      	strb	r2, [r3, #0]
 8000f68:	230f      	movs	r3, #15
 8000f6a:	18fb      	adds	r3, r7, r3
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2252      	movs	r2, #82	; 0x52
 8000f70:	2108      	movs	r1, #8
 8000f72:	468c      	mov	ip, r1
 8000f74:	44bc      	add	ip, r7
 8000f76:	4462      	add	r2, ip
 8000f78:	7812      	ldrb	r2, [r2, #0]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d3dc      	bcc.n	8000f38 <cr95_read8bit+0x554>
    				printf("\n");
 8000f7e:	200a      	movs	r0, #10
 8000f80:	f003 fb54 	bl	800462c <putchar>
    			}
    			sprintf(uid, "%s %2X %2X %2X %2X\n", uid, saved_data[4], saved_data[5], saved_data[6], saved_data[7]);
 8000f84:	2228      	movs	r2, #40	; 0x28
 8000f86:	2108      	movs	r1, #8
 8000f88:	187b      	adds	r3, r7, r1
 8000f8a:	189b      	adds	r3, r3, r2
 8000f8c:	791b      	ldrb	r3, [r3, #4]
 8000f8e:	001e      	movs	r6, r3
 8000f90:	187b      	adds	r3, r7, r1
 8000f92:	189b      	adds	r3, r3, r2
 8000f94:	795b      	ldrb	r3, [r3, #5]
 8000f96:	001c      	movs	r4, r3
 8000f98:	187b      	adds	r3, r7, r1
 8000f9a:	189b      	adds	r3, r3, r2
 8000f9c:	799b      	ldrb	r3, [r3, #6]
 8000f9e:	001d      	movs	r5, r3
 8000fa0:	187b      	adds	r3, r7, r1
 8000fa2:	189b      	adds	r3, r3, r2
 8000fa4:	79db      	ldrb	r3, [r3, #7]
 8000fa6:	4698      	mov	r8, r3
 8000fa8:	2008      	movs	r0, #8
 8000faa:	187b      	adds	r3, r7, r1
 8000fac:	181a      	adds	r2, r3, r0
 8000fae:	491d      	ldr	r1, [pc, #116]	; (8001024 <cr95_read8bit+0x640>)
 8000fb0:	2308      	movs	r3, #8
 8000fb2:	469c      	mov	ip, r3
 8000fb4:	44bc      	add	ip, r7
 8000fb6:	4460      	add	r0, ip
 8000fb8:	4643      	mov	r3, r8
 8000fba:	9302      	str	r3, [sp, #8]
 8000fbc:	9501      	str	r5, [sp, #4]
 8000fbe:	9400      	str	r4, [sp, #0]
 8000fc0:	0033      	movs	r3, r6
 8000fc2:	f003 fbb1 	bl	8004728 <siprintf>
    		}


    		HAL_UART_Transmit(&huart2, (uint8_t*)(uid), strlen(uid), HAL_MAX_DELAY);
 8000fc6:	2408      	movs	r4, #8
 8000fc8:	2508      	movs	r5, #8
 8000fca:	197b      	adds	r3, r7, r5
 8000fcc:	191b      	adds	r3, r3, r4
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f7ff f89a 	bl	8000108 <strlen>
 8000fd4:	0003      	movs	r3, r0
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	2301      	movs	r3, #1
 8000fda:	425b      	negs	r3, r3
 8000fdc:	1979      	adds	r1, r7, r5
 8000fde:	1909      	adds	r1, r1, r4
 8000fe0:	4811      	ldr	r0, [pc, #68]	; (8001028 <cr95_read8bit+0x644>)
 8000fe2:	f002 fd71 	bl	8003ac8 <HAL_UART_Transmit>
    		printf("UID CL1 error\n");
    	}
	} else {
		printf("REQA error\n");
	}
}
 8000fe6:	e008      	b.n	8000ffa <cr95_read8bit+0x616>
    		printf("UID CL1 error\n");
 8000fe8:	4b10      	ldr	r3, [pc, #64]	; (800102c <cr95_read8bit+0x648>)
 8000fea:	0018      	movs	r0, r3
 8000fec:	f003 fb92 	bl	8004714 <puts>
}
 8000ff0:	e003      	b.n	8000ffa <cr95_read8bit+0x616>
		printf("REQA error\n");
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <cr95_read8bit+0x64c>)
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f003 fb8d 	bl	8004714 <puts>
}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b018      	add	sp, #96	; 0x60
 8001000:	bc1c      	pop	{r2, r3, r4}
 8001002:	4690      	mov	r8, r2
 8001004:	4699      	mov	r9, r3
 8001006:	46a2      	mov	sl, r4
 8001008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	08005b4c 	.word	0x08005b4c
 8001010:	08005bec 	.word	0x08005bec
 8001014:	08005c0c 	.word	0x08005c0c
 8001018:	08005c1c 	.word	0x08005c1c
 800101c:	08005c2c 	.word	0x08005c2c
 8001020:	08005b7c 	.word	0x08005b7c
 8001024:	08005b68 	.word	0x08005b68
 8001028:	200003dc 	.word	0x200003dc
 800102c:	08005b8c 	.word	0x08005b8c
 8001030:	08005b9c 	.word	0x08005b9c

08001034 <cr95_readtopaz>:

static void cr95_readtopaz(void)
{
 8001034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001036:	b097      	sub	sp, #92	; 0x5c
 8001038:	af04      	add	r7, sp, #16
	const uint8_t cmd_reqtopaz[] =  { 0x04, 0x02, 0x26, 0x07 };
 800103a:	2140      	movs	r1, #64	; 0x40
 800103c:	187b      	adds	r3, r7, r1
 800103e:	4a52      	ldr	r2, [pc, #328]	; (8001188 <cr95_readtopaz+0x154>)
 8001040:	6812      	ldr	r2, [r2, #0]
 8001042:	601a      	str	r2, [r3, #0]
	const uint8_t cmd_rid[]      =  { 0x04, 0x08, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA8 };
 8001044:	2334      	movs	r3, #52	; 0x34
 8001046:	18fb      	adds	r3, r7, r3
 8001048:	4a50      	ldr	r2, [pc, #320]	; (800118c <cr95_readtopaz+0x158>)
 800104a:	ca11      	ldmia	r2!, {r0, r4}
 800104c:	c311      	stmia	r3!, {r0, r4}
 800104e:	8812      	ldrh	r2, [r2, #0]
 8001050:	801a      	strh	r2, [r3, #0]

	uint8_t data[16];
	char uid[32];
	uint8_t len;

	cr95write(cmd_reqtopaz, sizeof(cmd_reqtopaz));
 8001052:	187b      	adds	r3, r7, r1
 8001054:	2104      	movs	r1, #4
 8001056:	0018      	movs	r0, r3
 8001058:	f7ff f906 	bl	8000268 <cr95write>
	if (cr95read(data, &len) == 0x80) {
 800105c:	1cfa      	adds	r2, r7, #3
 800105e:	2324      	movs	r3, #36	; 0x24
 8001060:	18fb      	adds	r3, r7, r3
 8001062:	0011      	movs	r1, r2
 8001064:	0018      	movs	r0, r3
 8001066:	f7ff f915 	bl	8000294 <cr95read>
 800106a:	0003      	movs	r3, r0
 800106c:	2b80      	cmp	r3, #128	; 0x80
 800106e:	d000      	beq.n	8001072 <cr95_readtopaz+0x3e>
 8001070:	e085      	b.n	800117e <cr95_readtopaz+0x14a>
		printf("ATQA =");
 8001072:	4b47      	ldr	r3, [pc, #284]	; (8001190 <cr95_readtopaz+0x15c>)
 8001074:	0018      	movs	r0, r3
 8001076:	f003 fabf 	bl	80045f8 <iprintf>
		for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 800107a:	2347      	movs	r3, #71	; 0x47
 800107c:	18fb      	adds	r3, r7, r3
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]
 8001082:	e010      	b.n	80010a6 <cr95_readtopaz+0x72>
 8001084:	2447      	movs	r4, #71	; 0x47
 8001086:	193b      	adds	r3, r7, r4
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2224      	movs	r2, #36	; 0x24
 800108c:	18ba      	adds	r2, r7, r2
 800108e:	5cd3      	ldrb	r3, [r2, r3]
 8001090:	001a      	movs	r2, r3
 8001092:	4b40      	ldr	r3, [pc, #256]	; (8001194 <cr95_readtopaz+0x160>)
 8001094:	0011      	movs	r1, r2
 8001096:	0018      	movs	r0, r3
 8001098:	f003 faae 	bl	80045f8 <iprintf>
 800109c:	193b      	adds	r3, r7, r4
 800109e:	781a      	ldrb	r2, [r3, #0]
 80010a0:	193b      	adds	r3, r7, r4
 80010a2:	3201      	adds	r2, #1
 80010a4:	701a      	strb	r2, [r3, #0]
 80010a6:	1cfb      	adds	r3, r7, #3
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2247      	movs	r2, #71	; 0x47
 80010ac:	18ba      	adds	r2, r7, r2
 80010ae:	7812      	ldrb	r2, [r2, #0]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d3e7      	bcc.n	8001084 <cr95_readtopaz+0x50>
		printf("\n");
 80010b4:	200a      	movs	r0, #10
 80010b6:	f003 fab9 	bl	800462c <putchar>

		sprintf(uid, "UID =");
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	4a36      	ldr	r2, [pc, #216]	; (8001198 <cr95_readtopaz+0x164>)
 80010be:	6811      	ldr	r1, [r2, #0]
 80010c0:	6019      	str	r1, [r3, #0]
 80010c2:	8892      	ldrh	r2, [r2, #4]
 80010c4:	809a      	strh	r2, [r3, #4]

		cr95write(cmd_rid, sizeof(cmd_rid));
 80010c6:	2334      	movs	r3, #52	; 0x34
 80010c8:	18fb      	adds	r3, r7, r3
 80010ca:	210a      	movs	r1, #10
 80010cc:	0018      	movs	r0, r3
 80010ce:	f7ff f8cb 	bl	8000268 <cr95write>
		if (cr95read(data, &len) == 0x80 ) {
 80010d2:	1cfa      	adds	r2, r7, #3
 80010d4:	2324      	movs	r3, #36	; 0x24
 80010d6:	18fb      	adds	r3, r7, r3
 80010d8:	0011      	movs	r1, r2
 80010da:	0018      	movs	r0, r3
 80010dc:	f7ff f8da 	bl	8000294 <cr95read>
 80010e0:	0003      	movs	r3, r0
 80010e2:	2b80      	cmp	r3, #128	; 0x80
 80010e4:	d14b      	bne.n	800117e <cr95_readtopaz+0x14a>
			printf("RID =");
 80010e6:	4b2d      	ldr	r3, [pc, #180]	; (800119c <cr95_readtopaz+0x168>)
 80010e8:	0018      	movs	r0, r3
 80010ea:	f003 fa85 	bl	80045f8 <iprintf>
			for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 80010ee:	2346      	movs	r3, #70	; 0x46
 80010f0:	18fb      	adds	r3, r7, r3
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
 80010f6:	e010      	b.n	800111a <cr95_readtopaz+0xe6>
 80010f8:	2446      	movs	r4, #70	; 0x46
 80010fa:	193b      	adds	r3, r7, r4
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2224      	movs	r2, #36	; 0x24
 8001100:	18ba      	adds	r2, r7, r2
 8001102:	5cd3      	ldrb	r3, [r2, r3]
 8001104:	001a      	movs	r2, r3
 8001106:	4b23      	ldr	r3, [pc, #140]	; (8001194 <cr95_readtopaz+0x160>)
 8001108:	0011      	movs	r1, r2
 800110a:	0018      	movs	r0, r3
 800110c:	f003 fa74 	bl	80045f8 <iprintf>
 8001110:	193b      	adds	r3, r7, r4
 8001112:	781a      	ldrb	r2, [r3, #0]
 8001114:	193b      	adds	r3, r7, r4
 8001116:	3201      	adds	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]
 800111a:	1cfb      	adds	r3, r7, #3
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2246      	movs	r2, #70	; 0x46
 8001120:	18ba      	adds	r2, r7, r2
 8001122:	7812      	ldrb	r2, [r2, #0]
 8001124:	429a      	cmp	r2, r3
 8001126:	d3e7      	bcc.n	80010f8 <cr95_readtopaz+0xc4>
			printf("\n");
 8001128:	200a      	movs	r0, #10
 800112a:	f003 fa7f 	bl	800462c <putchar>
			printf("Header 1 = %2X", data[0]);
 800112e:	2424      	movs	r4, #36	; 0x24
 8001130:	193b      	adds	r3, r7, r4
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	001a      	movs	r2, r3
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <cr95_readtopaz+0x16c>)
 8001138:	0011      	movs	r1, r2
 800113a:	0018      	movs	r0, r3
 800113c:	f003 fa5c 	bl	80045f8 <iprintf>
			printf("Header 2 = %2X", data[1]);
 8001140:	0022      	movs	r2, r4
 8001142:	0014      	movs	r4, r2
 8001144:	18bb      	adds	r3, r7, r2
 8001146:	785b      	ldrb	r3, [r3, #1]
 8001148:	001a      	movs	r2, r3
 800114a:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <cr95_readtopaz+0x170>)
 800114c:	0011      	movs	r1, r2
 800114e:	0018      	movs	r0, r3
 8001150:	f003 fa52 	bl	80045f8 <iprintf>
			sprintf(uid, "%s %2X %2X %2X %2X", uid, data[2], data[3], data[4], data[5]);
 8001154:	0022      	movs	r2, r4
 8001156:	18bb      	adds	r3, r7, r2
 8001158:	789b      	ldrb	r3, [r3, #2]
 800115a:	001e      	movs	r6, r3
 800115c:	18bb      	adds	r3, r7, r2
 800115e:	78db      	ldrb	r3, [r3, #3]
 8001160:	001c      	movs	r4, r3
 8001162:	18bb      	adds	r3, r7, r2
 8001164:	791b      	ldrb	r3, [r3, #4]
 8001166:	001d      	movs	r5, r3
 8001168:	18bb      	adds	r3, r7, r2
 800116a:	795b      	ldrb	r3, [r3, #5]
 800116c:	1d3a      	adds	r2, r7, #4
 800116e:	490e      	ldr	r1, [pc, #56]	; (80011a8 <cr95_readtopaz+0x174>)
 8001170:	1d38      	adds	r0, r7, #4
 8001172:	9302      	str	r3, [sp, #8]
 8001174:	9501      	str	r5, [sp, #4]
 8001176:	9400      	str	r4, [sp, #0]
 8001178:	0033      	movs	r3, r6
 800117a:	f003 fad5 	bl	8004728 <siprintf>
		}
	}
}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	46bd      	mov	sp, r7
 8001182:	b013      	add	sp, #76	; 0x4c
 8001184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	08005ba8 	.word	0x08005ba8
 800118c:	08005c80 	.word	0x08005c80
 8001190:	08005b44 	.word	0x08005b44
 8001194:	08005b4c 	.word	0x08005b4c
 8001198:	08005b54 	.word	0x08005b54
 800119c:	08005c44 	.word	0x08005c44
 80011a0:	08005c4c 	.word	0x08005c4c
 80011a4:	08005c5c 	.word	0x08005c5c
 80011a8:	08005c6c 	.word	0x08005c6c

080011ac <cr95_read14B>:

static void cr95_read14B(void)
{
 80011ac:	b590      	push	{r4, r7, lr}
 80011ae:	b089      	sub	sp, #36	; 0x24
 80011b0:	af00      	add	r7, sp, #0
	const uint8_t cmd_reqb[] =  { 0x04, 0x03, 0x05, 0x00, 0x00 };
 80011b2:	2018      	movs	r0, #24
 80011b4:	183b      	adds	r3, r7, r0
 80011b6:	4a20      	ldr	r2, [pc, #128]	; (8001238 <cr95_read14B+0x8c>)
 80011b8:	6811      	ldr	r1, [r2, #0]
 80011ba:	6019      	str	r1, [r3, #0]
 80011bc:	7912      	ldrb	r2, [r2, #4]
 80011be:	711a      	strb	r2, [r3, #4]

	uint8_t data[16];
	uint8_t len;

	cr95write(cmd_reqb, sizeof(cmd_reqb));
 80011c0:	183b      	adds	r3, r7, r0
 80011c2:	2105      	movs	r1, #5
 80011c4:	0018      	movs	r0, r3
 80011c6:	f7ff f84f 	bl	8000268 <cr95write>
	if (cr95read(data, &len) == 0x80 && data[0] == 0x50) {
 80011ca:	1dfa      	adds	r2, r7, #7
 80011cc:	2308      	movs	r3, #8
 80011ce:	18fb      	adds	r3, r7, r3
 80011d0:	0011      	movs	r1, r2
 80011d2:	0018      	movs	r0, r3
 80011d4:	f7ff f85e 	bl	8000294 <cr95read>
 80011d8:	0003      	movs	r3, r0
 80011da:	2b80      	cmp	r3, #128	; 0x80
 80011dc:	d128      	bne.n	8001230 <cr95_read14B+0x84>
 80011de:	2308      	movs	r3, #8
 80011e0:	18fb      	adds	r3, r7, r3
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b50      	cmp	r3, #80	; 0x50
 80011e6:	d123      	bne.n	8001230 <cr95_read14B+0x84>
		printf("ATQB =");
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <cr95_read14B+0x90>)
 80011ea:	0018      	movs	r0, r3
 80011ec:	f003 fa04 	bl	80045f8 <iprintf>
		for (uint8_t i = 0; i <= len; i++) printf(" %02X", data[i]);
 80011f0:	231f      	movs	r3, #31
 80011f2:	18fb      	adds	r3, r7, r3
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
 80011f8:	e010      	b.n	800121c <cr95_read14B+0x70>
 80011fa:	241f      	movs	r4, #31
 80011fc:	193b      	adds	r3, r7, r4
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2208      	movs	r2, #8
 8001202:	18ba      	adds	r2, r7, r2
 8001204:	5cd3      	ldrb	r3, [r2, r3]
 8001206:	001a      	movs	r2, r3
 8001208:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <cr95_read14B+0x94>)
 800120a:	0011      	movs	r1, r2
 800120c:	0018      	movs	r0, r3
 800120e:	f003 f9f3 	bl	80045f8 <iprintf>
 8001212:	193b      	adds	r3, r7, r4
 8001214:	781a      	ldrb	r2, [r3, #0]
 8001216:	193b      	adds	r3, r7, r4
 8001218:	3201      	adds	r2, #1
 800121a:	701a      	strb	r2, [r3, #0]
 800121c:	1dfb      	adds	r3, r7, #7
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	221f      	movs	r2, #31
 8001222:	18ba      	adds	r2, r7, r2
 8001224:	7812      	ldrb	r2, [r2, #0]
 8001226:	429a      	cmp	r2, r3
 8001228:	d9e7      	bls.n	80011fa <cr95_read14B+0x4e>
		printf("\n");
 800122a:	200a      	movs	r0, #10
 800122c:	f003 f9fe 	bl	800462c <putchar>
	}
}
 8001230:	46c0      	nop			; (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	b009      	add	sp, #36	; 0x24
 8001236:	bd90      	pop	{r4, r7, pc}
 8001238:	08005c94 	.word	0x08005c94
 800123c:	08005c8c 	.word	0x08005c8c
 8001240:	08005b4c 	.word	0x08005b4c

08001244 <cr95_read18>:

static void cr95_read18(void)
{
 8001244:	b590      	push	{r4, r7, lr}
 8001246:	b089      	sub	sp, #36	; 0x24
 8001248:	af00      	add	r7, sp, #0
	const uint8_t cmd_reqc[] =  { 0x04, 0x05, 0x00, 0xFF, 0xFF, 0x00, 0x00 };
 800124a:	2018      	movs	r0, #24
 800124c:	183b      	adds	r3, r7, r0
 800124e:	4a1f      	ldr	r2, [pc, #124]	; (80012cc <cr95_read18+0x88>)
 8001250:	6811      	ldr	r1, [r2, #0]
 8001252:	6019      	str	r1, [r3, #0]
 8001254:	8891      	ldrh	r1, [r2, #4]
 8001256:	8099      	strh	r1, [r3, #4]
 8001258:	7992      	ldrb	r2, [r2, #6]
 800125a:	719a      	strb	r2, [r3, #6]

	uint8_t data[16];
	uint8_t len;

	cr95write(cmd_reqc, sizeof(cmd_reqc));
 800125c:	183b      	adds	r3, r7, r0
 800125e:	2107      	movs	r1, #7
 8001260:	0018      	movs	r0, r3
 8001262:	f7ff f801 	bl	8000268 <cr95write>
	if (cr95read(data, &len) == 0x80) {
 8001266:	1dfa      	adds	r2, r7, #7
 8001268:	2308      	movs	r3, #8
 800126a:	18fb      	adds	r3, r7, r3
 800126c:	0011      	movs	r1, r2
 800126e:	0018      	movs	r0, r3
 8001270:	f7ff f810 	bl	8000294 <cr95read>
 8001274:	0003      	movs	r3, r0
 8001276:	2b80      	cmp	r3, #128	; 0x80
 8001278:	d123      	bne.n	80012c2 <cr95_read18+0x7e>
		printf("ISO/IEC 18092 DATA =");
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <cr95_read18+0x8c>)
 800127c:	0018      	movs	r0, r3
 800127e:	f003 f9bb 	bl	80045f8 <iprintf>
		for (uint8_t i = 0; i <= len; i++) printf(" %02X", data[i]);
 8001282:	231f      	movs	r3, #31
 8001284:	18fb      	adds	r3, r7, r3
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
 800128a:	e010      	b.n	80012ae <cr95_read18+0x6a>
 800128c:	241f      	movs	r4, #31
 800128e:	193b      	adds	r3, r7, r4
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2208      	movs	r2, #8
 8001294:	18ba      	adds	r2, r7, r2
 8001296:	5cd3      	ldrb	r3, [r2, r3]
 8001298:	001a      	movs	r2, r3
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <cr95_read18+0x90>)
 800129c:	0011      	movs	r1, r2
 800129e:	0018      	movs	r0, r3
 80012a0:	f003 f9aa 	bl	80045f8 <iprintf>
 80012a4:	193b      	adds	r3, r7, r4
 80012a6:	781a      	ldrb	r2, [r3, #0]
 80012a8:	193b      	adds	r3, r7, r4
 80012aa:	3201      	adds	r2, #1
 80012ac:	701a      	strb	r2, [r3, #0]
 80012ae:	1dfb      	adds	r3, r7, #7
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	221f      	movs	r2, #31
 80012b4:	18ba      	adds	r2, r7, r2
 80012b6:	7812      	ldrb	r2, [r2, #0]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d9e7      	bls.n	800128c <cr95_read18+0x48>
		printf("\n");
 80012bc:	200a      	movs	r0, #10
 80012be:	f003 f9b5 	bl	800462c <putchar>
	}
}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b009      	add	sp, #36	; 0x24
 80012c8:	bd90      	pop	{r4, r7, pc}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	08005cb4 	.word	0x08005cb4
 80012d0:	08005c9c 	.word	0x08005c9c
 80012d4:	08005b4c 	.word	0x08005b4c

080012d8 <cr95_calibrate>:

static void cr95_calibrate(void)
{
 80012d8:	b5b0      	push	{r4, r5, r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
	uint8_t cmd_cal[] =  	    { 0x07, 0x0E, 0x03, 0xA1, 0x00, 0xF8, 0x01, 0x18, 0x00, 0x20, 0x60, 0x60, 0x00, 0x00, 0x3F, 0x01 };
 80012de:	2118      	movs	r1, #24
 80012e0:	187b      	adds	r3, r7, r1
 80012e2:	4ab7      	ldr	r2, [pc, #732]	; (80015c0 <cr95_calibrate+0x2e8>)
 80012e4:	ca31      	ldmia	r2!, {r0, r4, r5}
 80012e6:	c331      	stmia	r3!, {r0, r4, r5}
 80012e8:	6812      	ldr	r2, [r2, #0]
 80012ea:	601a      	str	r2, [r3, #0]

	uint8_t data[16];
	uint8_t len;

	cmd_cal[13] = 0x00;
 80012ec:	187b      	adds	r3, r7, r1
 80012ee:	2200      	movs	r2, #0
 80012f0:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 80012f2:	000c      	movs	r4, r1
 80012f4:	187b      	adds	r3, r7, r1
 80012f6:	2110      	movs	r1, #16
 80012f8:	0018      	movs	r0, r3
 80012fa:	f7fe ffb5 	bl	8000268 <cr95write>
	printf("CAL #0 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 80012fe:	0021      	movs	r1, r4
 8001300:	187b      	adds	r3, r7, r1
 8001302:	7b5b      	ldrb	r3, [r3, #13]
 8001304:	001c      	movs	r4, r3
 8001306:	1dfa      	adds	r2, r7, #7
 8001308:	2308      	movs	r3, #8
 800130a:	18fb      	adds	r3, r7, r3
 800130c:	0011      	movs	r1, r2
 800130e:	0018      	movs	r0, r3
 8001310:	f7fe ffc0 	bl	8000294 <cr95read>
 8001314:	1e03      	subs	r3, r0, #0
 8001316:	d101      	bne.n	800131c <cr95_calibrate+0x44>
 8001318:	2279      	movs	r2, #121	; 0x79
 800131a:	e000      	b.n	800131e <cr95_calibrate+0x46>
 800131c:	226e      	movs	r2, #110	; 0x6e
 800131e:	2508      	movs	r5, #8
 8001320:	197b      	adds	r3, r7, r5
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	48a7      	ldr	r0, [pc, #668]	; (80015c4 <cr95_calibrate+0x2ec>)
 8001326:	0021      	movs	r1, r4
 8001328:	f003 f966 	bl	80045f8 <iprintf>

	cmd_cal[13] = 0xFC;
 800132c:	2118      	movs	r1, #24
 800132e:	187b      	adds	r3, r7, r1
 8001330:	22fc      	movs	r2, #252	; 0xfc
 8001332:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8001334:	000c      	movs	r4, r1
 8001336:	187b      	adds	r3, r7, r1
 8001338:	2110      	movs	r1, #16
 800133a:	0018      	movs	r0, r3
 800133c:	f7fe ff94 	bl	8000268 <cr95write>
	printf("CAL #1 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8001340:	0021      	movs	r1, r4
 8001342:	187b      	adds	r3, r7, r1
 8001344:	7b5b      	ldrb	r3, [r3, #13]
 8001346:	001c      	movs	r4, r3
 8001348:	1dfa      	adds	r2, r7, #7
 800134a:	197b      	adds	r3, r7, r5
 800134c:	0011      	movs	r1, r2
 800134e:	0018      	movs	r0, r3
 8001350:	f7fe ffa0 	bl	8000294 <cr95read>
 8001354:	1e03      	subs	r3, r0, #0
 8001356:	d101      	bne.n	800135c <cr95_calibrate+0x84>
 8001358:	2279      	movs	r2, #121	; 0x79
 800135a:	e000      	b.n	800135e <cr95_calibrate+0x86>
 800135c:	226e      	movs	r2, #110	; 0x6e
 800135e:	2508      	movs	r5, #8
 8001360:	197b      	adds	r3, r7, r5
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	4898      	ldr	r0, [pc, #608]	; (80015c8 <cr95_calibrate+0x2f0>)
 8001366:	0021      	movs	r1, r4
 8001368:	f003 f946 	bl	80045f8 <iprintf>

	cmd_cal[13] -= 0x80;
 800136c:	2118      	movs	r1, #24
 800136e:	187b      	adds	r3, r7, r1
 8001370:	7b5b      	ldrb	r3, [r3, #13]
 8001372:	3b80      	subs	r3, #128	; 0x80
 8001374:	b2da      	uxtb	r2, r3
 8001376:	187b      	adds	r3, r7, r1
 8001378:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 800137a:	000c      	movs	r4, r1
 800137c:	187b      	adds	r3, r7, r1
 800137e:	2110      	movs	r1, #16
 8001380:	0018      	movs	r0, r3
 8001382:	f7fe ff71 	bl	8000268 <cr95write>
	printf("CAL #2 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8001386:	0021      	movs	r1, r4
 8001388:	187b      	adds	r3, r7, r1
 800138a:	7b5b      	ldrb	r3, [r3, #13]
 800138c:	001c      	movs	r4, r3
 800138e:	1dfa      	adds	r2, r7, #7
 8001390:	197b      	adds	r3, r7, r5
 8001392:	0011      	movs	r1, r2
 8001394:	0018      	movs	r0, r3
 8001396:	f7fe ff7d 	bl	8000294 <cr95read>
 800139a:	1e03      	subs	r3, r0, #0
 800139c:	d101      	bne.n	80013a2 <cr95_calibrate+0xca>
 800139e:	2279      	movs	r2, #121	; 0x79
 80013a0:	e000      	b.n	80013a4 <cr95_calibrate+0xcc>
 80013a2:	226e      	movs	r2, #110	; 0x6e
 80013a4:	2508      	movs	r5, #8
 80013a6:	197b      	adds	r3, r7, r5
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	4888      	ldr	r0, [pc, #544]	; (80015cc <cr95_calibrate+0x2f4>)
 80013ac:	0021      	movs	r1, r4
 80013ae:	f003 f923 	bl	80045f8 <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x40; else cmd_cal[13] += 0x40;
 80013b2:	197b      	adds	r3, r7, r5
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d107      	bne.n	80013ca <cr95_calibrate+0xf2>
 80013ba:	2118      	movs	r1, #24
 80013bc:	187b      	adds	r3, r7, r1
 80013be:	7b5b      	ldrb	r3, [r3, #13]
 80013c0:	3b40      	subs	r3, #64	; 0x40
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	187b      	adds	r3, r7, r1
 80013c6:	735a      	strb	r2, [r3, #13]
 80013c8:	e006      	b.n	80013d8 <cr95_calibrate+0x100>
 80013ca:	2118      	movs	r1, #24
 80013cc:	187b      	adds	r3, r7, r1
 80013ce:	7b5b      	ldrb	r3, [r3, #13]
 80013d0:	3340      	adds	r3, #64	; 0x40
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	187b      	adds	r3, r7, r1
 80013d6:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 80013d8:	2418      	movs	r4, #24
 80013da:	193b      	adds	r3, r7, r4
 80013dc:	2110      	movs	r1, #16
 80013de:	0018      	movs	r0, r3
 80013e0:	f7fe ff42 	bl	8000268 <cr95write>
	printf("CAL #3 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 80013e4:	193b      	adds	r3, r7, r4
 80013e6:	7b5b      	ldrb	r3, [r3, #13]
 80013e8:	001c      	movs	r4, r3
 80013ea:	1dfa      	adds	r2, r7, #7
 80013ec:	2308      	movs	r3, #8
 80013ee:	18fb      	adds	r3, r7, r3
 80013f0:	0011      	movs	r1, r2
 80013f2:	0018      	movs	r0, r3
 80013f4:	f7fe ff4e 	bl	8000294 <cr95read>
 80013f8:	1e03      	subs	r3, r0, #0
 80013fa:	d101      	bne.n	8001400 <cr95_calibrate+0x128>
 80013fc:	2279      	movs	r2, #121	; 0x79
 80013fe:	e000      	b.n	8001402 <cr95_calibrate+0x12a>
 8001400:	226e      	movs	r2, #110	; 0x6e
 8001402:	2508      	movs	r5, #8
 8001404:	197b      	adds	r3, r7, r5
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4871      	ldr	r0, [pc, #452]	; (80015d0 <cr95_calibrate+0x2f8>)
 800140a:	0021      	movs	r1, r4
 800140c:	f003 f8f4 	bl	80045f8 <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x20; else cmd_cal[13] += 0x20;
 8001410:	197b      	adds	r3, r7, r5
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d107      	bne.n	8001428 <cr95_calibrate+0x150>
 8001418:	2118      	movs	r1, #24
 800141a:	187b      	adds	r3, r7, r1
 800141c:	7b5b      	ldrb	r3, [r3, #13]
 800141e:	3b20      	subs	r3, #32
 8001420:	b2da      	uxtb	r2, r3
 8001422:	187b      	adds	r3, r7, r1
 8001424:	735a      	strb	r2, [r3, #13]
 8001426:	e006      	b.n	8001436 <cr95_calibrate+0x15e>
 8001428:	2118      	movs	r1, #24
 800142a:	187b      	adds	r3, r7, r1
 800142c:	7b5b      	ldrb	r3, [r3, #13]
 800142e:	3320      	adds	r3, #32
 8001430:	b2da      	uxtb	r2, r3
 8001432:	187b      	adds	r3, r7, r1
 8001434:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8001436:	2418      	movs	r4, #24
 8001438:	193b      	adds	r3, r7, r4
 800143a:	2110      	movs	r1, #16
 800143c:	0018      	movs	r0, r3
 800143e:	f7fe ff13 	bl	8000268 <cr95write>
	printf("CAL #4 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8001442:	193b      	adds	r3, r7, r4
 8001444:	7b5b      	ldrb	r3, [r3, #13]
 8001446:	001c      	movs	r4, r3
 8001448:	1dfa      	adds	r2, r7, #7
 800144a:	2308      	movs	r3, #8
 800144c:	18fb      	adds	r3, r7, r3
 800144e:	0011      	movs	r1, r2
 8001450:	0018      	movs	r0, r3
 8001452:	f7fe ff1f 	bl	8000294 <cr95read>
 8001456:	1e03      	subs	r3, r0, #0
 8001458:	d101      	bne.n	800145e <cr95_calibrate+0x186>
 800145a:	2279      	movs	r2, #121	; 0x79
 800145c:	e000      	b.n	8001460 <cr95_calibrate+0x188>
 800145e:	226e      	movs	r2, #110	; 0x6e
 8001460:	2508      	movs	r5, #8
 8001462:	197b      	adds	r3, r7, r5
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	485b      	ldr	r0, [pc, #364]	; (80015d4 <cr95_calibrate+0x2fc>)
 8001468:	0021      	movs	r1, r4
 800146a:	f003 f8c5 	bl	80045f8 <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x10; else cmd_cal[13] += 0x10;
 800146e:	197b      	adds	r3, r7, r5
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d107      	bne.n	8001486 <cr95_calibrate+0x1ae>
 8001476:	2118      	movs	r1, #24
 8001478:	187b      	adds	r3, r7, r1
 800147a:	7b5b      	ldrb	r3, [r3, #13]
 800147c:	3b10      	subs	r3, #16
 800147e:	b2da      	uxtb	r2, r3
 8001480:	187b      	adds	r3, r7, r1
 8001482:	735a      	strb	r2, [r3, #13]
 8001484:	e006      	b.n	8001494 <cr95_calibrate+0x1bc>
 8001486:	2118      	movs	r1, #24
 8001488:	187b      	adds	r3, r7, r1
 800148a:	7b5b      	ldrb	r3, [r3, #13]
 800148c:	3310      	adds	r3, #16
 800148e:	b2da      	uxtb	r2, r3
 8001490:	187b      	adds	r3, r7, r1
 8001492:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8001494:	2418      	movs	r4, #24
 8001496:	193b      	adds	r3, r7, r4
 8001498:	2110      	movs	r1, #16
 800149a:	0018      	movs	r0, r3
 800149c:	f7fe fee4 	bl	8000268 <cr95write>
	printf("CAL #5 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 80014a0:	193b      	adds	r3, r7, r4
 80014a2:	7b5b      	ldrb	r3, [r3, #13]
 80014a4:	001c      	movs	r4, r3
 80014a6:	1dfa      	adds	r2, r7, #7
 80014a8:	2308      	movs	r3, #8
 80014aa:	18fb      	adds	r3, r7, r3
 80014ac:	0011      	movs	r1, r2
 80014ae:	0018      	movs	r0, r3
 80014b0:	f7fe fef0 	bl	8000294 <cr95read>
 80014b4:	1e03      	subs	r3, r0, #0
 80014b6:	d101      	bne.n	80014bc <cr95_calibrate+0x1e4>
 80014b8:	2279      	movs	r2, #121	; 0x79
 80014ba:	e000      	b.n	80014be <cr95_calibrate+0x1e6>
 80014bc:	226e      	movs	r2, #110	; 0x6e
 80014be:	2508      	movs	r5, #8
 80014c0:	197b      	adds	r3, r7, r5
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4844      	ldr	r0, [pc, #272]	; (80015d8 <cr95_calibrate+0x300>)
 80014c6:	0021      	movs	r1, r4
 80014c8:	f003 f896 	bl	80045f8 <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x08; else cmd_cal[13] += 0x08;
 80014cc:	197b      	adds	r3, r7, r5
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d107      	bne.n	80014e4 <cr95_calibrate+0x20c>
 80014d4:	2118      	movs	r1, #24
 80014d6:	187b      	adds	r3, r7, r1
 80014d8:	7b5b      	ldrb	r3, [r3, #13]
 80014da:	3b08      	subs	r3, #8
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	187b      	adds	r3, r7, r1
 80014e0:	735a      	strb	r2, [r3, #13]
 80014e2:	e006      	b.n	80014f2 <cr95_calibrate+0x21a>
 80014e4:	2118      	movs	r1, #24
 80014e6:	187b      	adds	r3, r7, r1
 80014e8:	7b5b      	ldrb	r3, [r3, #13]
 80014ea:	3308      	adds	r3, #8
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	187b      	adds	r3, r7, r1
 80014f0:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 80014f2:	2418      	movs	r4, #24
 80014f4:	193b      	adds	r3, r7, r4
 80014f6:	2110      	movs	r1, #16
 80014f8:	0018      	movs	r0, r3
 80014fa:	f7fe feb5 	bl	8000268 <cr95write>
	printf("CAL #6 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 80014fe:	193b      	adds	r3, r7, r4
 8001500:	7b5b      	ldrb	r3, [r3, #13]
 8001502:	001c      	movs	r4, r3
 8001504:	1dfa      	adds	r2, r7, #7
 8001506:	2308      	movs	r3, #8
 8001508:	18fb      	adds	r3, r7, r3
 800150a:	0011      	movs	r1, r2
 800150c:	0018      	movs	r0, r3
 800150e:	f7fe fec1 	bl	8000294 <cr95read>
 8001512:	1e03      	subs	r3, r0, #0
 8001514:	d101      	bne.n	800151a <cr95_calibrate+0x242>
 8001516:	2279      	movs	r2, #121	; 0x79
 8001518:	e000      	b.n	800151c <cr95_calibrate+0x244>
 800151a:	226e      	movs	r2, #110	; 0x6e
 800151c:	2508      	movs	r5, #8
 800151e:	197b      	adds	r3, r7, r5
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	482e      	ldr	r0, [pc, #184]	; (80015dc <cr95_calibrate+0x304>)
 8001524:	0021      	movs	r1, r4
 8001526:	f003 f867 	bl	80045f8 <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x04; else cmd_cal[13] += 0x04;
 800152a:	197b      	adds	r3, r7, r5
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d107      	bne.n	8001542 <cr95_calibrate+0x26a>
 8001532:	2118      	movs	r1, #24
 8001534:	187b      	adds	r3, r7, r1
 8001536:	7b5b      	ldrb	r3, [r3, #13]
 8001538:	3b04      	subs	r3, #4
 800153a:	b2da      	uxtb	r2, r3
 800153c:	187b      	adds	r3, r7, r1
 800153e:	735a      	strb	r2, [r3, #13]
 8001540:	e006      	b.n	8001550 <cr95_calibrate+0x278>
 8001542:	2118      	movs	r1, #24
 8001544:	187b      	adds	r3, r7, r1
 8001546:	7b5b      	ldrb	r3, [r3, #13]
 8001548:	3304      	adds	r3, #4
 800154a:	b2da      	uxtb	r2, r3
 800154c:	187b      	adds	r3, r7, r1
 800154e:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8001550:	2418      	movs	r4, #24
 8001552:	193b      	adds	r3, r7, r4
 8001554:	2110      	movs	r1, #16
 8001556:	0018      	movs	r0, r3
 8001558:	f7fe fe86 	bl	8000268 <cr95write>
	printf("CAL #7 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 800155c:	193b      	adds	r3, r7, r4
 800155e:	7b5b      	ldrb	r3, [r3, #13]
 8001560:	001c      	movs	r4, r3
 8001562:	1dfa      	adds	r2, r7, #7
 8001564:	2308      	movs	r3, #8
 8001566:	18fb      	adds	r3, r7, r3
 8001568:	0011      	movs	r1, r2
 800156a:	0018      	movs	r0, r3
 800156c:	f7fe fe92 	bl	8000294 <cr95read>
 8001570:	1e03      	subs	r3, r0, #0
 8001572:	d101      	bne.n	8001578 <cr95_calibrate+0x2a0>
 8001574:	2279      	movs	r2, #121	; 0x79
 8001576:	e000      	b.n	800157a <cr95_calibrate+0x2a2>
 8001578:	226e      	movs	r2, #110	; 0x6e
 800157a:	2508      	movs	r5, #8
 800157c:	197b      	adds	r3, r7, r5
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	4817      	ldr	r0, [pc, #92]	; (80015e0 <cr95_calibrate+0x308>)
 8001582:	0021      	movs	r1, r4
 8001584:	f003 f838 	bl	80045f8 <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x04;
 8001588:	197b      	adds	r3, r7, r5
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d106      	bne.n	800159e <cr95_calibrate+0x2c6>
 8001590:	2118      	movs	r1, #24
 8001592:	187b      	adds	r3, r7, r1
 8001594:	7b5b      	ldrb	r3, [r3, #13]
 8001596:	3b04      	subs	r3, #4
 8001598:	b2da      	uxtb	r2, r3
 800159a:	187b      	adds	r3, r7, r1
 800159c:	735a      	strb	r2, [r3, #13]
	DacDataRef = cmd_cal[13];
 800159e:	2318      	movs	r3, #24
 80015a0:	18fb      	adds	r3, r7, r3
 80015a2:	7b5a      	ldrb	r2, [r3, #13]
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <cr95_calibrate+0x30c>)
 80015a6:	701a      	strb	r2, [r3, #0]
	printf("CAL finished, DacDataRef=0x%02x\n", DacDataRef);
 80015a8:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <cr95_calibrate+0x30c>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	001a      	movs	r2, r3
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <cr95_calibrate+0x310>)
 80015b0:	0011      	movs	r1, r2
 80015b2:	0018      	movs	r0, r3
 80015b4:	f003 f820 	bl	80045f8 <iprintf>
}
 80015b8:	46c0      	nop			; (mov r8, r8)
 80015ba:	46bd      	mov	sp, r7
 80015bc:	b00a      	add	sp, #40	; 0x28
 80015be:	bdb0      	pop	{r4, r5, r7, pc}
 80015c0:	08005e00 	.word	0x08005e00
 80015c4:	08005cbc 	.word	0x08005cbc
 80015c8:	08005ce0 	.word	0x08005ce0
 80015cc:	08005d04 	.word	0x08005d04
 80015d0:	08005d28 	.word	0x08005d28
 80015d4:	08005d4c 	.word	0x08005d4c
 80015d8:	08005d70 	.word	0x08005d70
 80015dc:	08005d94 	.word	0x08005d94
 80015e0:	08005db8 	.word	0x08005db8
 80015e4:	20000282 	.word	0x20000282
 80015e8:	08005ddc 	.word	0x08005ddc

080015ec <cr95_idle>:

static void cr95_idle(uint8_t mode)
{
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b087      	sub	sp, #28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	0002      	movs	r2, r0
 80015f4:	1dfb      	adds	r3, r7, #7
 80015f6:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_idle[] =  		{ 0x07, 0x0E, 0x0A, 0x21, 0x00, 0x79, 0x01, 0x18, 0x00, 0x20, 0x60, 0x60, 0x00, 0x00, 0x3F, 0x08 };
 80015f8:	2308      	movs	r3, #8
 80015fa:	18fb      	adds	r3, r7, r3
 80015fc:	4a15      	ldr	r2, [pc, #84]	; (8001654 <cr95_idle+0x68>)
 80015fe:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001600:	c313      	stmia	r3!, {r0, r1, r4}
 8001602:	6812      	ldr	r2, [r2, #0]
 8001604:	601a      	str	r2, [r3, #0]

	if (mode == 1) cmd_idle[2] = 0x08;   // Hibernate
 8001606:	1dfb      	adds	r3, r7, #7
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d104      	bne.n	8001618 <cr95_idle+0x2c>
 800160e:	2308      	movs	r3, #8
 8001610:	18fb      	adds	r3, r7, r3
 8001612:	2208      	movs	r2, #8
 8001614:	709a      	strb	r2, [r3, #2]
 8001616:	e003      	b.n	8001620 <cr95_idle+0x34>
	else cmd_idle[2] = 0x0A;             // TagDetect
 8001618:	2308      	movs	r3, #8
 800161a:	18fb      	adds	r3, r7, r3
 800161c:	220a      	movs	r2, #10
 800161e:	709a      	strb	r2, [r3, #2]

	cmd_idle[12] = DacDataRef - 8;
 8001620:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <cr95_idle+0x6c>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	3b08      	subs	r3, #8
 8001626:	b2da      	uxtb	r2, r3
 8001628:	2108      	movs	r1, #8
 800162a:	187b      	adds	r3, r7, r1
 800162c:	731a      	strb	r2, [r3, #12]
	cmd_idle[13] = DacDataRef + 8;
 800162e:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <cr95_idle+0x6c>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	3308      	adds	r3, #8
 8001634:	b2da      	uxtb	r2, r3
 8001636:	187b      	adds	r3, r7, r1
 8001638:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_idle, sizeof(cmd_idle));
 800163a:	187b      	adds	r3, r7, r1
 800163c:	2110      	movs	r1, #16
 800163e:	0018      	movs	r0, r3
 8001640:	f7fe fe12 	bl	8000268 <cr95write>
	printf("IDLE sent\n");
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <cr95_idle+0x70>)
 8001646:	0018      	movs	r0, r3
 8001648:	f003 f864 	bl	8004714 <puts>
}
 800164c:	46c0      	nop			; (mov r8, r8)
 800164e:	46bd      	mov	sp, r7
 8001650:	b007      	add	sp, #28
 8001652:	bd90      	pop	{r4, r7, pc}
 8001654:	08005e1c 	.word	0x08005e1c
 8001658:	20000282 	.word	0x20000282
 800165c:	08005e10 	.word	0x08005e10

08001660 <uart_process_command>:

static void uart_process_command(char *cmd)
{
 8001660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001662:	b08d      	sub	sp, #52	; 0x34
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
    char *token;
    token = strtok(cmd, " ");
 8001668:	4ad1      	ldr	r2, [pc, #836]	; (80019b0 <uart_process_command+0x350>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	0011      	movs	r1, r2
 800166e:	0018      	movs	r0, r3
 8001670:	f003 f898 	bl	80047a4 <strtok>
 8001674:	0003      	movs	r3, r0
 8001676:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t data[16];
	uint8_t len;

	const uint8_t cmd_echo[] =  { 0x55 };
 8001678:	2310      	movs	r3, #16
 800167a:	18fb      	adds	r3, r7, r3
 800167c:	2255      	movs	r2, #85	; 0x55
 800167e:	701a      	strb	r2, [r3, #0]
	const uint8_t cmd_idn[] =   { 0x01, 0x00 };
 8001680:	210c      	movs	r1, #12
 8001682:	187b      	adds	r3, r7, r1
 8001684:	2201      	movs	r2, #1
 8001686:	701a      	strb	r2, [r3, #0]
 8001688:	187b      	adds	r3, r7, r1
 800168a:	2200      	movs	r2, #0
 800168c:	705a      	strb	r2, [r3, #1]

    if (strcasecmp(token, "HELLO") == 0) {
 800168e:	4ac9      	ldr	r2, [pc, #804]	; (80019b4 <uart_process_command+0x354>)
 8001690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001692:	0011      	movs	r1, r2
 8001694:	0018      	movs	r0, r3
 8001696:	f003 f867 	bl	8004768 <strcasecmp>
 800169a:	1e03      	subs	r3, r0, #0
 800169c:	d104      	bne.n	80016a8 <uart_process_command+0x48>
        printf("Komunikace OK\n");
 800169e:	4bc6      	ldr	r3, [pc, #792]	; (80019b8 <uart_process_command+0x358>)
 80016a0:	0018      	movs	r0, r3
 80016a2:	f003 f837 	bl	8004714 <puts>
    	} while (uart_rx_read_ptr == uart_rx_write_ptr);
    }
    else {
        printf("Unknown command\n");
    }
}
 80016a6:	e1f0      	b.n	8001a8a <uart_process_command+0x42a>
    else if (strcasecmp(token, "ON") == 0) {
 80016a8:	4ac4      	ldr	r2, [pc, #784]	; (80019bc <uart_process_command+0x35c>)
 80016aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ac:	0011      	movs	r1, r2
 80016ae:	0018      	movs	r0, r3
 80016b0:	f003 f85a 	bl	8004768 <strcasecmp>
 80016b4:	1e03      	subs	r3, r0, #0
 80016b6:	d125      	bne.n	8001704 <uart_process_command+0xa4>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	0059      	lsls	r1, r3, #1
 80016bc:	2390      	movs	r3, #144	; 0x90
 80016be:	05db      	lsls	r3, r3, #23
 80016c0:	2201      	movs	r2, #1
 80016c2:	0018      	movs	r0, r3
 80016c4:	f001 fc1c 	bl	8002f00 <HAL_GPIO_WritePin>
    	MX_USART1_UART_Init();
 80016c8:	f000 fb26 	bl	8001d18 <MX_USART1_UART_Init>
        HAL_UART_Receive_DMA(&huart1, nfc_rx_buf, RX_BUFFER_LEN);
 80016cc:	49bc      	ldr	r1, [pc, #752]	; (80019c0 <uart_process_command+0x360>)
 80016ce:	4bbd      	ldr	r3, [pc, #756]	; (80019c4 <uart_process_command+0x364>)
 80016d0:	2240      	movs	r2, #64	; 0x40
 80016d2:	0018      	movs	r0, r3
 80016d4:	f002 faa0 	bl	8003c18 <HAL_UART_Receive_DMA>
    	HAL_Delay(5);
 80016d8:	2005      	movs	r0, #5
 80016da:	f000 feaf 	bl	800243c <HAL_Delay>
    	printf("RFID ON\n");
 80016de:	4bba      	ldr	r3, [pc, #744]	; (80019c8 <uart_process_command+0x368>)
 80016e0:	0018      	movs	r0, r3
 80016e2:	f003 f817 	bl	8004714 <puts>
        nfc_rx_read_ptr = nfc_rx_write_ptr;
 80016e6:	4bb9      	ldr	r3, [pc, #740]	; (80019cc <uart_process_command+0x36c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	2240      	movs	r2, #64	; 0x40
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	4bb6      	ldr	r3, [pc, #728]	; (80019d0 <uart_process_command+0x370>)
 80016f6:	801a      	strh	r2, [r3, #0]
    	cr95_wakeup();
 80016f8:	f7fe fe84 	bl	8000404 <cr95_wakeup>
    	nfc_ready = true;
 80016fc:	4bb5      	ldr	r3, [pc, #724]	; (80019d4 <uart_process_command+0x374>)
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
}
 8001702:	e1c2      	b.n	8001a8a <uart_process_command+0x42a>
    else if (strcasecmp(token, "OFF") == 0) {
 8001704:	4ab4      	ldr	r2, [pc, #720]	; (80019d8 <uart_process_command+0x378>)
 8001706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001708:	0011      	movs	r1, r2
 800170a:	0018      	movs	r0, r3
 800170c:	f003 f82c 	bl	8004768 <strcasecmp>
 8001710:	1e03      	subs	r3, r0, #0
 8001712:	d117      	bne.n	8001744 <uart_process_command+0xe4>
    	nfc_ready = false;
 8001714:	4baf      	ldr	r3, [pc, #700]	; (80019d4 <uart_process_command+0x374>)
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
        HAL_UART_AbortReceive(&huart1);
 800171a:	4baa      	ldr	r3, [pc, #680]	; (80019c4 <uart_process_command+0x364>)
 800171c:	0018      	movs	r0, r3
 800171e:	f002 fb13 	bl	8003d48 <HAL_UART_AbortReceive>
    	HAL_UART_DeInit(&huart1);
 8001722:	4ba8      	ldr	r3, [pc, #672]	; (80019c4 <uart_process_command+0x364>)
 8001724:	0018      	movs	r0, r3
 8001726:	f002 f999 	bl	8003a5c <HAL_UART_DeInit>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800172a:	2380      	movs	r3, #128	; 0x80
 800172c:	0059      	lsls	r1, r3, #1
 800172e:	2390      	movs	r3, #144	; 0x90
 8001730:	05db      	lsls	r3, r3, #23
 8001732:	2200      	movs	r2, #0
 8001734:	0018      	movs	r0, r3
 8001736:	f001 fbe3 	bl	8002f00 <HAL_GPIO_WritePin>
    	printf("RFID OFF\n");
 800173a:	4ba8      	ldr	r3, [pc, #672]	; (80019dc <uart_process_command+0x37c>)
 800173c:	0018      	movs	r0, r3
 800173e:	f002 ffe9 	bl	8004714 <puts>
}
 8001742:	e1a2      	b.n	8001a8a <uart_process_command+0x42a>
    else if (strcasecmp(token, "ECHO") == 0) {
 8001744:	4aa6      	ldr	r2, [pc, #664]	; (80019e0 <uart_process_command+0x380>)
 8001746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001748:	0011      	movs	r1, r2
 800174a:	0018      	movs	r0, r3
 800174c:	f003 f80c 	bl	8004768 <strcasecmp>
 8001750:	1e03      	subs	r3, r0, #0
 8001752:	d11c      	bne.n	800178e <uart_process_command+0x12e>
    	cr95write(cmd_echo, sizeof(cmd_echo));
 8001754:	2310      	movs	r3, #16
 8001756:	18fb      	adds	r3, r7, r3
 8001758:	2101      	movs	r1, #1
 800175a:	0018      	movs	r0, r3
 800175c:	f7fe fd84 	bl	8000268 <cr95write>
    	uint8_t resp = cr95read(NULL, NULL);
 8001760:	2525      	movs	r5, #37	; 0x25
 8001762:	197c      	adds	r4, r7, r5
 8001764:	2100      	movs	r1, #0
 8001766:	2000      	movs	r0, #0
 8001768:	f7fe fd94 	bl	8000294 <cr95read>
 800176c:	0003      	movs	r3, r0
 800176e:	7023      	strb	r3, [r4, #0]
    	printf("ECHO %s %02X\n", (resp == 0x55) ? "yes" : "no", resp);
 8001770:	197b      	adds	r3, r7, r5
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b55      	cmp	r3, #85	; 0x55
 8001776:	d101      	bne.n	800177c <uart_process_command+0x11c>
 8001778:	4b9a      	ldr	r3, [pc, #616]	; (80019e4 <uart_process_command+0x384>)
 800177a:	e000      	b.n	800177e <uart_process_command+0x11e>
 800177c:	4b9a      	ldr	r3, [pc, #616]	; (80019e8 <uart_process_command+0x388>)
 800177e:	2225      	movs	r2, #37	; 0x25
 8001780:	18ba      	adds	r2, r7, r2
 8001782:	7812      	ldrb	r2, [r2, #0]
 8001784:	4899      	ldr	r0, [pc, #612]	; (80019ec <uart_process_command+0x38c>)
 8001786:	0019      	movs	r1, r3
 8001788:	f002 ff36 	bl	80045f8 <iprintf>
}
 800178c:	e17d      	b.n	8001a8a <uart_process_command+0x42a>
    else if (strcasecmp(token, "IDN") == 0) {
 800178e:	4a98      	ldr	r2, [pc, #608]	; (80019f0 <uart_process_command+0x390>)
 8001790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001792:	0011      	movs	r1, r2
 8001794:	0018      	movs	r0, r3
 8001796:	f002 ffe7 	bl	8004768 <strcasecmp>
 800179a:	1e03      	subs	r3, r0, #0
 800179c:	d13a      	bne.n	8001814 <uart_process_command+0x1b4>
    	cr95write(cmd_idn, sizeof(cmd_idn));
 800179e:	230c      	movs	r3, #12
 80017a0:	18fb      	adds	r3, r7, r3
 80017a2:	2102      	movs	r1, #2
 80017a4:	0018      	movs	r0, r3
 80017a6:	f7fe fd5f 	bl	8000268 <cr95write>
    	if (cr95read(data, &len) == 0x00) {
 80017aa:	2313      	movs	r3, #19
 80017ac:	18fa      	adds	r2, r7, r3
 80017ae:	2314      	movs	r3, #20
 80017b0:	18fb      	adds	r3, r7, r3
 80017b2:	0011      	movs	r1, r2
 80017b4:	0018      	movs	r0, r3
 80017b6:	f7fe fd6d 	bl	8000294 <cr95read>
 80017ba:	1e03      	subs	r3, r0, #0
 80017bc:	d125      	bne.n	800180a <uart_process_command+0x1aa>
    		printf("IDN =");
 80017be:	4b8d      	ldr	r3, [pc, #564]	; (80019f4 <uart_process_command+0x394>)
 80017c0:	0018      	movs	r0, r3
 80017c2:	f002 ff19 	bl	80045f8 <iprintf>
    		for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 80017c6:	232f      	movs	r3, #47	; 0x2f
 80017c8:	18fb      	adds	r3, r7, r3
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
 80017ce:	e010      	b.n	80017f2 <uart_process_command+0x192>
 80017d0:	242f      	movs	r4, #47	; 0x2f
 80017d2:	193b      	adds	r3, r7, r4
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2214      	movs	r2, #20
 80017d8:	18ba      	adds	r2, r7, r2
 80017da:	5cd3      	ldrb	r3, [r2, r3]
 80017dc:	001a      	movs	r2, r3
 80017de:	4b86      	ldr	r3, [pc, #536]	; (80019f8 <uart_process_command+0x398>)
 80017e0:	0011      	movs	r1, r2
 80017e2:	0018      	movs	r0, r3
 80017e4:	f002 ff08 	bl	80045f8 <iprintf>
 80017e8:	193b      	adds	r3, r7, r4
 80017ea:	781a      	ldrb	r2, [r3, #0]
 80017ec:	193b      	adds	r3, r7, r4
 80017ee:	3201      	adds	r2, #1
 80017f0:	701a      	strb	r2, [r3, #0]
 80017f2:	2313      	movs	r3, #19
 80017f4:	18fb      	adds	r3, r7, r3
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	222f      	movs	r2, #47	; 0x2f
 80017fa:	18ba      	adds	r2, r7, r2
 80017fc:	7812      	ldrb	r2, [r2, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d3e6      	bcc.n	80017d0 <uart_process_command+0x170>
    		printf("\n");
 8001802:	200a      	movs	r0, #10
 8001804:	f002 ff12 	bl	800462c <putchar>
}
 8001808:	e13f      	b.n	8001a8a <uart_process_command+0x42a>
    		printf("IDN error\n");
 800180a:	4b7c      	ldr	r3, [pc, #496]	; (80019fc <uart_process_command+0x39c>)
 800180c:	0018      	movs	r0, r3
 800180e:	f002 ff81 	bl	8004714 <puts>
}
 8001812:	e13a      	b.n	8001a8a <uart_process_command+0x42a>
    else if (strcasecmp(token, "INIT14") == 0) {
 8001814:	4a7a      	ldr	r2, [pc, #488]	; (8001a00 <uart_process_command+0x3a0>)
 8001816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001818:	0011      	movs	r1, r2
 800181a:	0018      	movs	r0, r3
 800181c:	f002 ffa4 	bl	8004768 <strcasecmp>
 8001820:	1e03      	subs	r3, r0, #0
 8001822:	d102      	bne.n	800182a <uart_process_command+0x1ca>
    	cr95_init14();
 8001824:	f7fe fe04 	bl	8000430 <cr95_init14>
}
 8001828:	e12f      	b.n	8001a8a <uart_process_command+0x42a>
    else if (strcasecmp(token, "INIT14B") == 0) {
 800182a:	4a76      	ldr	r2, [pc, #472]	; (8001a04 <uart_process_command+0x3a4>)
 800182c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800182e:	0011      	movs	r1, r2
 8001830:	0018      	movs	r0, r3
 8001832:	f002 ff99 	bl	8004768 <strcasecmp>
 8001836:	1e03      	subs	r3, r0, #0
 8001838:	d102      	bne.n	8001840 <uart_process_command+0x1e0>
        cr95_init14B();
 800183a:	f7fe fe5d 	bl	80004f8 <cr95_init14B>
}
 800183e:	e124      	b.n	8001a8a <uart_process_command+0x42a>
    else if (strcasecmp(token, "INIT15") == 0) {
 8001840:	4a71      	ldr	r2, [pc, #452]	; (8001a08 <uart_process_command+0x3a8>)
 8001842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001844:	0011      	movs	r1, r2
 8001846:	0018      	movs	r0, r3
 8001848:	f002 ff8e 	bl	8004768 <strcasecmp>
 800184c:	1e03      	subs	r3, r0, #0
 800184e:	d102      	bne.n	8001856 <uart_process_command+0x1f6>
        cr95_init15();
 8001850:	f7fe feb6 	bl	80005c0 <cr95_init15>
}
 8001854:	e119      	b.n	8001a8a <uart_process_command+0x42a>
    else if (strcasecmp(token, "INIT18") == 0) {
 8001856:	4a6d      	ldr	r2, [pc, #436]	; (8001a0c <uart_process_command+0x3ac>)
 8001858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800185a:	0011      	movs	r1, r2
 800185c:	0018      	movs	r0, r3
 800185e:	f002 ff83 	bl	8004768 <strcasecmp>
 8001862:	1e03      	subs	r3, r0, #0
 8001864:	d102      	bne.n	800186c <uart_process_command+0x20c>
        cr95_init18();
 8001866:	f7fe ff0f 	bl	8000688 <cr95_init18>
}
 800186a:	e10e      	b.n	8001a8a <uart_process_command+0x42a>
    else if (strcasecmp(token, "READ") == 0) {
 800186c:	4a68      	ldr	r2, [pc, #416]	; (8001a10 <uart_process_command+0x3b0>)
 800186e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001870:	0011      	movs	r1, r2
 8001872:	0018      	movs	r0, r3
 8001874:	f002 ff78 	bl	8004768 <strcasecmp>
 8001878:	1e03      	subs	r3, r0, #0
 800187a:	d102      	bne.n	8001882 <uart_process_command+0x222>
    	cr95_read();
 800187c:	f7fe ff84 	bl	8000788 <cr95_read>
}
 8001880:	e103      	b.n	8001a8a <uart_process_command+0x42a>
    else if (strcasecmp(token, "READ8") == 0) {
 8001882:	4a64      	ldr	r2, [pc, #400]	; (8001a14 <uart_process_command+0x3b4>)
 8001884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001886:	0011      	movs	r1, r2
 8001888:	0018      	movs	r0, r3
 800188a:	f002 ff6d 	bl	8004768 <strcasecmp>
 800188e:	1e03      	subs	r3, r0, #0
 8001890:	d102      	bne.n	8001898 <uart_process_command+0x238>
    	cr95_read8bit();
 8001892:	f7ff f8a7 	bl	80009e4 <cr95_read8bit>
}
 8001896:	e0f8      	b.n	8001a8a <uart_process_command+0x42a>
    else if (strcasecmp(token, "READTOPAZ") == 0) {
 8001898:	4a5f      	ldr	r2, [pc, #380]	; (8001a18 <uart_process_command+0x3b8>)
 800189a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800189c:	0011      	movs	r1, r2
 800189e:	0018      	movs	r0, r3
 80018a0:	f002 ff62 	bl	8004768 <strcasecmp>
 80018a4:	1e03      	subs	r3, r0, #0
 80018a6:	d102      	bne.n	80018ae <uart_process_command+0x24e>
        cr95_readtopaz();
 80018a8:	f7ff fbc4 	bl	8001034 <cr95_readtopaz>
}
 80018ac:	e0ed      	b.n	8001a8a <uart_process_command+0x42a>
    else if (strcasecmp(token, "READ14B") == 0) {
 80018ae:	4a5b      	ldr	r2, [pc, #364]	; (8001a1c <uart_process_command+0x3bc>)
 80018b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b2:	0011      	movs	r1, r2
 80018b4:	0018      	movs	r0, r3
 80018b6:	f002 ff57 	bl	8004768 <strcasecmp>
 80018ba:	1e03      	subs	r3, r0, #0
 80018bc:	d102      	bne.n	80018c4 <uart_process_command+0x264>
        cr95_read14B();
 80018be:	f7ff fc75 	bl	80011ac <cr95_read14B>
}
 80018c2:	e0e2      	b.n	8001a8a <uart_process_command+0x42a>
    else if (strcasecmp(token, "READ18") == 0) {
 80018c4:	4a56      	ldr	r2, [pc, #344]	; (8001a20 <uart_process_command+0x3c0>)
 80018c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c8:	0011      	movs	r1, r2
 80018ca:	0018      	movs	r0, r3
 80018cc:	f002 ff4c 	bl	8004768 <strcasecmp>
 80018d0:	1e03      	subs	r3, r0, #0
 80018d2:	d102      	bne.n	80018da <uart_process_command+0x27a>
        cr95_read18();
 80018d4:	f7ff fcb6 	bl	8001244 <cr95_read18>
}
 80018d8:	e0d7      	b.n	8001a8a <uart_process_command+0x42a>
    else if (strcasecmp(token, "CALIBRATE") == 0) {
 80018da:	4a52      	ldr	r2, [pc, #328]	; (8001a24 <uart_process_command+0x3c4>)
 80018dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018de:	0011      	movs	r1, r2
 80018e0:	0018      	movs	r0, r3
 80018e2:	f002 ff41 	bl	8004768 <strcasecmp>
 80018e6:	1e03      	subs	r3, r0, #0
 80018e8:	d102      	bne.n	80018f0 <uart_process_command+0x290>
    	cr95_calibrate();
 80018ea:	f7ff fcf5 	bl	80012d8 <cr95_calibrate>
}
 80018ee:	e0cc      	b.n	8001a8a <uart_process_command+0x42a>
    else if (strcasecmp(token, "IDLE") == 0) {
 80018f0:	4a4d      	ldr	r2, [pc, #308]	; (8001a28 <uart_process_command+0x3c8>)
 80018f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f4:	0011      	movs	r1, r2
 80018f6:	0018      	movs	r0, r3
 80018f8:	f002 ff36 	bl	8004768 <strcasecmp>
 80018fc:	1e03      	subs	r3, r0, #0
 80018fe:	d103      	bne.n	8001908 <uart_process_command+0x2a8>
    	cr95_idle(1);
 8001900:	2001      	movs	r0, #1
 8001902:	f7ff fe73 	bl	80015ec <cr95_idle>
}
 8001906:	e0c0      	b.n	8001a8a <uart_process_command+0x42a>
    else if (strcasecmp(token, "WAKEUP") == 0) {
 8001908:	4a48      	ldr	r2, [pc, #288]	; (8001a2c <uart_process_command+0x3cc>)
 800190a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800190c:	0011      	movs	r1, r2
 800190e:	0018      	movs	r0, r3
 8001910:	f002 ff2a 	bl	8004768 <strcasecmp>
 8001914:	1e03      	subs	r3, r0, #0
 8001916:	d117      	bne.n	8001948 <uart_process_command+0x2e8>
    	cr95_wakeup();
 8001918:	f7fe fd74 	bl	8000404 <cr95_wakeup>
    	uint8_t resp = cr95read(data, &len);
 800191c:	2526      	movs	r5, #38	; 0x26
 800191e:	197c      	adds	r4, r7, r5
 8001920:	2313      	movs	r3, #19
 8001922:	18fa      	adds	r2, r7, r3
 8001924:	2614      	movs	r6, #20
 8001926:	19bb      	adds	r3, r7, r6
 8001928:	0011      	movs	r1, r2
 800192a:	0018      	movs	r0, r3
 800192c:	f7fe fcb2 	bl	8000294 <cr95read>
 8001930:	0003      	movs	r3, r0
 8001932:	7023      	strb	r3, [r4, #0]
    	printf("Code of wakeup is: %02X with response: %02X\n", data[0],resp);
 8001934:	19bb      	adds	r3, r7, r6
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	0019      	movs	r1, r3
 800193a:	197b      	adds	r3, r7, r5
 800193c:	781a      	ldrb	r2, [r3, #0]
 800193e:	4b3c      	ldr	r3, [pc, #240]	; (8001a30 <uart_process_command+0x3d0>)
 8001940:	0018      	movs	r0, r3
 8001942:	f002 fe59 	bl	80045f8 <iprintf>
}
 8001946:	e0a0      	b.n	8001a8a <uart_process_command+0x42a>
    else if (strcasecmp(token, "AUTO") == 0) {
 8001948:	4a3a      	ldr	r2, [pc, #232]	; (8001a34 <uart_process_command+0x3d4>)
 800194a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800194c:	0011      	movs	r1, r2
 800194e:	0018      	movs	r0, r3
 8001950:	f002 ff0a 	bl	8004768 <strcasecmp>
 8001954:	1e03      	subs	r3, r0, #0
 8001956:	d000      	beq.n	800195a <uart_process_command+0x2fa>
 8001958:	e093      	b.n	8001a82 <uart_process_command+0x422>
    	cr95_calibrate();
 800195a:	f7ff fcbd 	bl	80012d8 <cr95_calibrate>
        	cr95_idle(0);
 800195e:	2000      	movs	r0, #0
 8001960:	f7ff fe44 	bl	80015ec <cr95_idle>
			do {} while (nfc_rx_read_ptr == nfc_rx_write_ptr);
 8001964:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <uart_process_command+0x370>)
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	b29b      	uxth	r3, r3
 800196a:	0019      	movs	r1, r3
 800196c:	4b17      	ldr	r3, [pc, #92]	; (80019cc <uart_process_command+0x36c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2240      	movs	r2, #64	; 0x40
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	4299      	cmp	r1, r3
 8001978:	d0f4      	beq.n	8001964 <uart_process_command+0x304>
			uint8_t resp = cr95read(data, &len);
 800197a:	2527      	movs	r5, #39	; 0x27
 800197c:	197c      	adds	r4, r7, r5
 800197e:	2313      	movs	r3, #19
 8001980:	18fa      	adds	r2, r7, r3
 8001982:	2314      	movs	r3, #20
 8001984:	18fb      	adds	r3, r7, r3
 8001986:	0011      	movs	r1, r2
 8001988:	0018      	movs	r0, r3
 800198a:	f7fe fc83 	bl	8000294 <cr95read>
 800198e:	0003      	movs	r3, r0
 8001990:	7023      	strb	r3, [r4, #0]
			if (resp == 0x00 && data[0] == 0x02) printf("WAKEUP by tag detect\n");
 8001992:	197b      	adds	r3, r7, r5
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d150      	bne.n	8001a3c <uart_process_command+0x3dc>
 800199a:	2314      	movs	r3, #20
 800199c:	18fb      	adds	r3, r7, r3
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d14b      	bne.n	8001a3c <uart_process_command+0x3dc>
 80019a4:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <uart_process_command+0x3d8>)
 80019a6:	0018      	movs	r0, r3
 80019a8:	f002 feb4 	bl	8004714 <puts>
 80019ac:	e04a      	b.n	8001a44 <uart_process_command+0x3e4>
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	08005e2c 	.word	0x08005e2c
 80019b4:	08005e30 	.word	0x08005e30
 80019b8:	08005e38 	.word	0x08005e38
 80019bc:	08005e48 	.word	0x08005e48
 80019c0:	20000240 	.word	0x20000240
 80019c4:	2000035c 	.word	0x2000035c
 80019c8:	08005e4c 	.word	0x08005e4c
 80019cc:	20000318 	.word	0x20000318
 80019d0:	20000280 	.word	0x20000280
 80019d4:	20000283 	.word	0x20000283
 80019d8:	08005e54 	.word	0x08005e54
 80019dc:	08005e58 	.word	0x08005e58
 80019e0:	08005e64 	.word	0x08005e64
 80019e4:	08005a9c 	.word	0x08005a9c
 80019e8:	08005aa0 	.word	0x08005aa0
 80019ec:	08005e6c 	.word	0x08005e6c
 80019f0:	08005e7c 	.word	0x08005e7c
 80019f4:	08005e80 	.word	0x08005e80
 80019f8:	08005b4c 	.word	0x08005b4c
 80019fc:	08005e88 	.word	0x08005e88
 8001a00:	08005e94 	.word	0x08005e94
 8001a04:	08005e9c 	.word	0x08005e9c
 8001a08:	08005ea4 	.word	0x08005ea4
 8001a0c:	08005eac 	.word	0x08005eac
 8001a10:	08005eb4 	.word	0x08005eb4
 8001a14:	08005ebc 	.word	0x08005ebc
 8001a18:	08005ec4 	.word	0x08005ec4
 8001a1c:	08005ed0 	.word	0x08005ed0
 8001a20:	08005ed8 	.word	0x08005ed8
 8001a24:	08005ee0 	.word	0x08005ee0
 8001a28:	08005eec 	.word	0x08005eec
 8001a2c:	08005ef4 	.word	0x08005ef4
 8001a30:	08005efc 	.word	0x08005efc
 8001a34:	08005f2c 	.word	0x08005f2c
 8001a38:	08005f34 	.word	0x08005f34
			else printf("Error\n");
 8001a3c:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <uart_process_command+0x434>)
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f002 fe68 	bl	8004714 <puts>
			printf("Code of wakeup is:%02X\n", data[0]);
 8001a44:	2314      	movs	r3, #20
 8001a46:	18fb      	adds	r3, r7, r3
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	001a      	movs	r2, r3
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <uart_process_command+0x438>)
 8001a4e:	0011      	movs	r1, r2
 8001a50:	0018      	movs	r0, r3
 8001a52:	f002 fdd1 	bl	80045f8 <iprintf>
        	cr95_init14();
 8001a56:	f7fe fceb 	bl	8000430 <cr95_init14>
        	cr95_read();
 8001a5a:	f7fe fe95 	bl	8000788 <cr95_read>
        	HAL_Delay(2000);
 8001a5e:	23fa      	movs	r3, #250	; 0xfa
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	0018      	movs	r0, r3
 8001a64:	f000 fcea 	bl	800243c <HAL_Delay>
    	} while (uart_rx_read_ptr == uart_rx_write_ptr);
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <uart_process_command+0x43c>)
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	0019      	movs	r1, r3
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <uart_process_command+0x440>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2240      	movs	r2, #64	; 0x40
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	4299      	cmp	r1, r3
 8001a7c:	d100      	bne.n	8001a80 <uart_process_command+0x420>
 8001a7e:	e76e      	b.n	800195e <uart_process_command+0x2fe>
}
 8001a80:	e003      	b.n	8001a8a <uart_process_command+0x42a>
        printf("Unknown command\n");
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <uart_process_command+0x444>)
 8001a84:	0018      	movs	r0, r3
 8001a86:	f002 fe45 	bl	8004714 <puts>
}
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b00d      	add	sp, #52	; 0x34
 8001a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	08005f4c 	.word	0x08005f4c
 8001a98:	08005f54 	.word	0x08005f54
 8001a9c:	2000023c 	.word	0x2000023c
 8001aa0:	200002d4 	.word	0x200002d4
 8001aa4:	08005f6c 	.word	0x08005f6c

08001aa8 <uart_byte_available>:


static void uart_byte_available(uint8_t c)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	0002      	movs	r2, r0
 8001ab0:	1dfb      	adds	r3, r7, #7
 8001ab2:	701a      	strb	r2, [r3, #0]
    static uint16_t cnt;
    static char data[CMD_BUFFER_LEN];

    if (cnt < CMD_BUFFER_LEN) data[cnt++] = c;
 8001ab4:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <uart_byte_available+0x5c>)
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	2b3f      	cmp	r3, #63	; 0x3f
 8001aba:	d80a      	bhi.n	8001ad2 <uart_byte_available+0x2a>
 8001abc:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <uart_byte_available+0x5c>)
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	b291      	uxth	r1, r2
 8001ac4:	4a0f      	ldr	r2, [pc, #60]	; (8001b04 <uart_byte_available+0x5c>)
 8001ac6:	8011      	strh	r1, [r2, #0]
 8001ac8:	0019      	movs	r1, r3
 8001aca:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <uart_byte_available+0x60>)
 8001acc:	1dfa      	adds	r2, r7, #7
 8001ace:	7812      	ldrb	r2, [r2, #0]
 8001ad0:	545a      	strb	r2, [r3, r1]
    if (c == '\n' || c == '\r') {
 8001ad2:	1dfb      	adds	r3, r7, #7
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b0a      	cmp	r3, #10
 8001ad8:	d003      	beq.n	8001ae2 <uart_byte_available+0x3a>
 8001ada:	1dfb      	adds	r3, r7, #7
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b0d      	cmp	r3, #13
 8001ae0:	d10c      	bne.n	8001afc <uart_byte_available+0x54>
        data[cnt - 1] = '\0';
 8001ae2:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <uart_byte_available+0x5c>)
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	4a07      	ldr	r2, [pc, #28]	; (8001b08 <uart_byte_available+0x60>)
 8001aea:	2100      	movs	r1, #0
 8001aec:	54d1      	strb	r1, [r2, r3]
        uart_process_command(data);
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <uart_byte_available+0x60>)
 8001af0:	0018      	movs	r0, r3
 8001af2:	f7ff fdb5 	bl	8001660 <uart_process_command>
        cnt = 0;
 8001af6:	4b03      	ldr	r3, [pc, #12]	; (8001b04 <uart_byte_available+0x5c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	801a      	strh	r2, [r3, #0]
    }
}
 8001afc:	46c0      	nop			; (mov r8, r8)
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b002      	add	sp, #8
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000284 	.word	0x20000284
 8001b08:	20000288 	.word	0x20000288

08001b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b0c:	b5b0      	push	{r4, r5, r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b12:	f000 fc2f 	bl	8002374 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b16:	f000 f89d 	bl	8001c54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b1a:	f000 f985 	bl	8001e28 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b1e:	f000 f95d 	bl	8001ddc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001b22:	f000 f92b 	bl	8001d7c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001b26:	f000 f8f7 	bl	8001d18 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_DeInit(&huart1);
 8001b2a:	4b3f      	ldr	r3, [pc, #252]	; (8001c28 <main+0x11c>)
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f001 ff95 	bl	8003a5c <HAL_UART_DeInit>
  HAL_UART_Receive_DMA(&huart2, uart_rx_buf, RX_BUFFER_LEN);
 8001b32:	493e      	ldr	r1, [pc, #248]	; (8001c2c <main+0x120>)
 8001b34:	4b3e      	ldr	r3, [pc, #248]	; (8001c30 <main+0x124>)
 8001b36:	2240      	movs	r2, #64	; 0x40
 8001b38:	0018      	movs	r0, r3
 8001b3a:	f002 f86d 	bl	8003c18 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
#if 1
	  while (uart_rx_read_ptr != uart_rx_write_ptr) {
 8001b3e:	e01b      	b.n	8001b78 <main+0x6c>
	      uint8_t b = uart_rx_buf[uart_rx_read_ptr];
 8001b40:	4b3c      	ldr	r3, [pc, #240]	; (8001c34 <main+0x128>)
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	0019      	movs	r1, r3
 8001b48:	2315      	movs	r3, #21
 8001b4a:	18fb      	adds	r3, r7, r3
 8001b4c:	4a37      	ldr	r2, [pc, #220]	; (8001c2c <main+0x120>)
 8001b4e:	5c52      	ldrb	r2, [r2, r1]
 8001b50:	701a      	strb	r2, [r3, #0]
	      if (++uart_rx_read_ptr >= RX_BUFFER_LEN) uart_rx_read_ptr = 0; // increase read pointer
 8001b52:	4b38      	ldr	r3, [pc, #224]	; (8001c34 <main+0x128>)
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	3301      	adds	r3, #1
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	4a35      	ldr	r2, [pc, #212]	; (8001c34 <main+0x128>)
 8001b5e:	1c19      	adds	r1, r3, #0
 8001b60:	8011      	strh	r1, [r2, #0]
 8001b62:	2b3f      	cmp	r3, #63	; 0x3f
 8001b64:	d902      	bls.n	8001b6c <main+0x60>
 8001b66:	4b33      	ldr	r3, [pc, #204]	; (8001c34 <main+0x128>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	801a      	strh	r2, [r3, #0]

	      uart_byte_available(b); // process every received byte with the RX state machine
 8001b6c:	2315      	movs	r3, #21
 8001b6e:	18fb      	adds	r3, r7, r3
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	0018      	movs	r0, r3
 8001b74:	f7ff ff98 	bl	8001aa8 <uart_byte_available>
	  while (uart_rx_read_ptr != uart_rx_write_ptr) {
 8001b78:	4b2e      	ldr	r3, [pc, #184]	; (8001c34 <main+0x128>)
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	0019      	movs	r1, r3
 8001b80:	4b2d      	ldr	r3, [pc, #180]	; (8001c38 <main+0x12c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2240      	movs	r2, #64	; 0x40
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	4299      	cmp	r1, r3
 8001b8c:	d1d8      	bne.n	8001b40 <main+0x34>
	  }

	  if (nfc_ready && nfc_rx_read_ptr != nfc_rx_write_ptr) {
 8001b8e:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <main+0x130>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0f0      	beq.n	8001b78 <main+0x6c>
 8001b96:	4b2a      	ldr	r3, [pc, #168]	; (8001c40 <main+0x134>)
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	0019      	movs	r1, r3
 8001b9e:	4b29      	ldr	r3, [pc, #164]	; (8001c44 <main+0x138>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2240      	movs	r2, #64	; 0x40
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	4299      	cmp	r1, r3
 8001baa:	d0e5      	beq.n	8001b78 <main+0x6c>
		  uint8_t data[16];
		  uint8_t len;
		  uint8_t resp = cr95read(data, &len);
 8001bac:	2516      	movs	r5, #22
 8001bae:	197c      	adds	r4, r7, r5
 8001bb0:	1cfa      	adds	r2, r7, #3
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	0011      	movs	r1, r2
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f7fe fb6c 	bl	8000294 <cr95read>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	7023      	strb	r3, [r4, #0]

		  if (resp != 0xFF) {
 8001bc0:	197b      	adds	r3, r7, r5
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2bff      	cmp	r3, #255	; 0xff
 8001bc6:	d029      	beq.n	8001c1c <main+0x110>
			  printf("Async response, code = 0x%02x, len = %d, data =", resp, len);
 8001bc8:	2316      	movs	r3, #22
 8001bca:	18fb      	adds	r3, r7, r3
 8001bcc:	7819      	ldrb	r1, [r3, #0]
 8001bce:	1cfb      	adds	r3, r7, #3
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	001a      	movs	r2, r3
 8001bd4:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <main+0x13c>)
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f002 fd0e 	bl	80045f8 <iprintf>
			  for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8001bdc:	2317      	movs	r3, #23
 8001bde:	18fb      	adds	r3, r7, r3
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]
 8001be4:	e00f      	b.n	8001c06 <main+0xfa>
 8001be6:	2417      	movs	r4, #23
 8001be8:	193b      	adds	r3, r7, r4
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	1d3a      	adds	r2, r7, #4
 8001bee:	5cd3      	ldrb	r3, [r2, r3]
 8001bf0:	001a      	movs	r2, r3
 8001bf2:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <main+0x140>)
 8001bf4:	0011      	movs	r1, r2
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f002 fcfe 	bl	80045f8 <iprintf>
 8001bfc:	193b      	adds	r3, r7, r4
 8001bfe:	781a      	ldrb	r2, [r3, #0]
 8001c00:	193b      	adds	r3, r7, r4
 8001c02:	3201      	adds	r2, #1
 8001c04:	701a      	strb	r2, [r3, #0]
 8001c06:	1cfb      	adds	r3, r7, #3
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2217      	movs	r2, #23
 8001c0c:	18ba      	adds	r2, r7, r2
 8001c0e:	7812      	ldrb	r2, [r2, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d3e8      	bcc.n	8001be6 <main+0xda>
			  printf("\n");
 8001c14:	200a      	movs	r0, #10
 8001c16:	f002 fd09 	bl	800462c <putchar>
 8001c1a:	e7ad      	b.n	8001b78 <main+0x6c>
		  } else {
			  printf("Async reponse, invalid (timeout)\n");
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <main+0x144>)
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f002 fd78 	bl	8004714 <puts>
	  while (uart_rx_read_ptr != uart_rx_write_ptr) {
 8001c24:	e7a8      	b.n	8001b78 <main+0x6c>
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	2000035c 	.word	0x2000035c
 8001c2c:	200001fc 	.word	0x200001fc
 8001c30:	200003dc 	.word	0x200003dc
 8001c34:	2000023c 	.word	0x2000023c
 8001c38:	200002d4 	.word	0x200002d4
 8001c3c:	20000283 	.word	0x20000283
 8001c40:	20000280 	.word	0x20000280
 8001c44:	20000318 	.word	0x20000318
 8001c48:	08005f7c 	.word	0x08005f7c
 8001c4c:	08005b4c 	.word	0x08005b4c
 8001c50:	08005fac 	.word	0x08005fac

08001c54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c54:	b590      	push	{r4, r7, lr}
 8001c56:	b095      	sub	sp, #84	; 0x54
 8001c58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c5a:	2420      	movs	r4, #32
 8001c5c:	193b      	adds	r3, r7, r4
 8001c5e:	0018      	movs	r0, r3
 8001c60:	2330      	movs	r3, #48	; 0x30
 8001c62:	001a      	movs	r2, r3
 8001c64:	2100      	movs	r1, #0
 8001c66:	f002 fcbf 	bl	80045e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c6a:	2310      	movs	r3, #16
 8001c6c:	18fb      	adds	r3, r7, r3
 8001c6e:	0018      	movs	r0, r3
 8001c70:	2310      	movs	r3, #16
 8001c72:	001a      	movs	r2, r3
 8001c74:	2100      	movs	r1, #0
 8001c76:	f002 fcb7 	bl	80045e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c7a:	003b      	movs	r3, r7
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	2310      	movs	r3, #16
 8001c80:	001a      	movs	r2, r3
 8001c82:	2100      	movs	r1, #0
 8001c84:	f002 fcb0 	bl	80045e8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c88:	0021      	movs	r1, r4
 8001c8a:	187b      	adds	r3, r7, r1
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c90:	187b      	adds	r3, r7, r1
 8001c92:	2201      	movs	r2, #1
 8001c94:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c96:	187b      	adds	r3, r7, r1
 8001c98:	2210      	movs	r2, #16
 8001c9a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c9c:	187b      	adds	r3, r7, r1
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ca2:	187b      	adds	r3, r7, r1
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001ca8:	187b      	adds	r3, r7, r1
 8001caa:	22a0      	movs	r2, #160	; 0xa0
 8001cac:	0392      	lsls	r2, r2, #14
 8001cae:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001cb0:	187b      	adds	r3, r7, r1
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cb6:	187b      	adds	r3, r7, r1
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f001 f93f 	bl	8002f3c <HAL_RCC_OscConfig>
 8001cbe:	1e03      	subs	r3, r0, #0
 8001cc0:	d001      	beq.n	8001cc6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001cc2:	f000 f937 	bl	8001f34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cc6:	2110      	movs	r1, #16
 8001cc8:	187b      	adds	r3, r7, r1
 8001cca:	2207      	movs	r2, #7
 8001ccc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cce:	187b      	adds	r3, r7, r1
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cd4:	187b      	adds	r3, r7, r1
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cda:	187b      	adds	r3, r7, r1
 8001cdc:	2200      	movs	r2, #0
 8001cde:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ce0:	187b      	adds	r3, r7, r1
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f001 fc45 	bl	8003574 <HAL_RCC_ClockConfig>
 8001cea:	1e03      	subs	r3, r0, #0
 8001cec:	d001      	beq.n	8001cf2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001cee:	f000 f921 	bl	8001f34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001cf2:	003b      	movs	r3, r7
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001cf8:	003b      	movs	r3, r7
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cfe:	003b      	movs	r3, r7
 8001d00:	0018      	movs	r0, r3
 8001d02:	f001 fd89 	bl	8003818 <HAL_RCCEx_PeriphCLKConfig>
 8001d06:	1e03      	subs	r3, r0, #0
 8001d08:	d001      	beq.n	8001d0e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001d0a:	f000 f913 	bl	8001f34 <Error_Handler>
  }
}
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	46bd      	mov	sp, r7
 8001d12:	b015      	add	sp, #84	; 0x54
 8001d14:	bd90      	pop	{r4, r7, pc}
	...

08001d18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d1c:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <MX_USART1_UART_Init+0x5c>)
 8001d1e:	4a16      	ldr	r2, [pc, #88]	; (8001d78 <MX_USART1_UART_Init+0x60>)
 8001d20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001d22:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <MX_USART1_UART_Init+0x5c>)
 8001d24:	22e1      	movs	r2, #225	; 0xe1
 8001d26:	0212      	lsls	r2, r2, #8
 8001d28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d2a:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <MX_USART1_UART_Init+0x5c>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8001d30:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <MX_USART1_UART_Init+0x5c>)
 8001d32:	2280      	movs	r2, #128	; 0x80
 8001d34:	0192      	lsls	r2, r2, #6
 8001d36:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d38:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <MX_USART1_UART_Init+0x5c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <MX_USART1_UART_Init+0x5c>)
 8001d40:	220c      	movs	r2, #12
 8001d42:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <MX_USART1_UART_Init+0x5c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <MX_USART1_UART_Init+0x5c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <MX_USART1_UART_Init+0x5c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d56:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <MX_USART1_UART_Init+0x5c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <MX_USART1_UART_Init+0x5c>)
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f001 fe28 	bl	80039b4 <HAL_UART_Init>
 8001d64:	1e03      	subs	r3, r0, #0
 8001d66:	d001      	beq.n	8001d6c <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8001d68:	f000 f8e4 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d6c:	46c0      	nop			; (mov r8, r8)
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	2000035c 	.word	0x2000035c
 8001d78:	40013800 	.word	0x40013800

08001d7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d80:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001d82:	4a15      	ldr	r2, [pc, #84]	; (8001dd8 <MX_USART2_UART_Init+0x5c>)
 8001d84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001d86:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001d88:	2296      	movs	r2, #150	; 0x96
 8001d8a:	0212      	lsls	r2, r2, #8
 8001d8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8e:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d94:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001da0:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001da2:	220c      	movs	r2, #12
 8001da4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da6:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dac:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001db2:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dbe:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f001 fdf7 	bl	80039b4 <HAL_UART_Init>
 8001dc6:	1e03      	subs	r3, r0, #0
 8001dc8:	d001      	beq.n	8001dce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001dca:	f000 f8b3 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	200003dc 	.word	0x200003dc
 8001dd8:	40004400 	.word	0x40004400

08001ddc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001de2:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <MX_DMA_Init+0x48>)
 8001de4:	695a      	ldr	r2, [r3, #20]
 8001de6:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <MX_DMA_Init+0x48>)
 8001de8:	2101      	movs	r1, #1
 8001dea:	430a      	orrs	r2, r1
 8001dec:	615a      	str	r2, [r3, #20]
 8001dee:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <MX_DMA_Init+0x48>)
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	2201      	movs	r2, #1
 8001df4:	4013      	ands	r3, r2
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	200a      	movs	r0, #10
 8001e00:	f000 fbea 	bl	80025d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001e04:	200a      	movs	r0, #10
 8001e06:	f000 fbfc 	bl	8002602 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	200b      	movs	r0, #11
 8001e10:	f000 fbe2 	bl	80025d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8001e14:	200b      	movs	r0, #11
 8001e16:	f000 fbf4 	bl	8002602 <HAL_NVIC_EnableIRQ>

}
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	b002      	add	sp, #8
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	40021000 	.word	0x40021000

08001e28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e28:	b590      	push	{r4, r7, lr}
 8001e2a:	b089      	sub	sp, #36	; 0x24
 8001e2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2e:	240c      	movs	r4, #12
 8001e30:	193b      	adds	r3, r7, r4
 8001e32:	0018      	movs	r0, r3
 8001e34:	2314      	movs	r3, #20
 8001e36:	001a      	movs	r2, r3
 8001e38:	2100      	movs	r1, #0
 8001e3a:	f002 fbd5 	bl	80045e8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e3e:	4b3a      	ldr	r3, [pc, #232]	; (8001f28 <MX_GPIO_Init+0x100>)
 8001e40:	695a      	ldr	r2, [r3, #20]
 8001e42:	4b39      	ldr	r3, [pc, #228]	; (8001f28 <MX_GPIO_Init+0x100>)
 8001e44:	2180      	movs	r1, #128	; 0x80
 8001e46:	0309      	lsls	r1, r1, #12
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	615a      	str	r2, [r3, #20]
 8001e4c:	4b36      	ldr	r3, [pc, #216]	; (8001f28 <MX_GPIO_Init+0x100>)
 8001e4e:	695a      	ldr	r2, [r3, #20]
 8001e50:	2380      	movs	r3, #128	; 0x80
 8001e52:	031b      	lsls	r3, r3, #12
 8001e54:	4013      	ands	r3, r2
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e5a:	4b33      	ldr	r3, [pc, #204]	; (8001f28 <MX_GPIO_Init+0x100>)
 8001e5c:	695a      	ldr	r2, [r3, #20]
 8001e5e:	4b32      	ldr	r3, [pc, #200]	; (8001f28 <MX_GPIO_Init+0x100>)
 8001e60:	2180      	movs	r1, #128	; 0x80
 8001e62:	03c9      	lsls	r1, r1, #15
 8001e64:	430a      	orrs	r2, r1
 8001e66:	615a      	str	r2, [r3, #20]
 8001e68:	4b2f      	ldr	r3, [pc, #188]	; (8001f28 <MX_GPIO_Init+0x100>)
 8001e6a:	695a      	ldr	r2, [r3, #20]
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	03db      	lsls	r3, r3, #15
 8001e70:	4013      	ands	r3, r2
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e76:	4b2c      	ldr	r3, [pc, #176]	; (8001f28 <MX_GPIO_Init+0x100>)
 8001e78:	695a      	ldr	r2, [r3, #20]
 8001e7a:	4b2b      	ldr	r3, [pc, #172]	; (8001f28 <MX_GPIO_Init+0x100>)
 8001e7c:	2180      	movs	r1, #128	; 0x80
 8001e7e:	0289      	lsls	r1, r1, #10
 8001e80:	430a      	orrs	r2, r1
 8001e82:	615a      	str	r2, [r3, #20]
 8001e84:	4b28      	ldr	r3, [pc, #160]	; (8001f28 <MX_GPIO_Init+0x100>)
 8001e86:	695a      	ldr	r2, [r3, #20]
 8001e88:	2380      	movs	r3, #128	; 0x80
 8001e8a:	029b      	lsls	r3, r3, #10
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8001e92:	2390      	movs	r3, #144	; 0x90
 8001e94:	0059      	lsls	r1, r3, #1
 8001e96:	2390      	movs	r3, #144	; 0x90
 8001e98:	05db      	lsls	r3, r3, #23
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	f001 f82f 	bl	8002f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001ea2:	4b22      	ldr	r3, [pc, #136]	; (8001f2c <MX_GPIO_Init+0x104>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2180      	movs	r1, #128	; 0x80
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f001 f829 	bl	8002f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001eae:	193b      	adds	r3, r7, r4
 8001eb0:	2280      	movs	r2, #128	; 0x80
 8001eb2:	0192      	lsls	r2, r2, #6
 8001eb4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001eb6:	193b      	adds	r3, r7, r4
 8001eb8:	4a1d      	ldr	r2, [pc, #116]	; (8001f30 <MX_GPIO_Init+0x108>)
 8001eba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	193b      	adds	r3, r7, r4
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ec2:	193b      	adds	r3, r7, r4
 8001ec4:	4a19      	ldr	r2, [pc, #100]	; (8001f2c <MX_GPIO_Init+0x104>)
 8001ec6:	0019      	movs	r1, r3
 8001ec8:	0010      	movs	r0, r2
 8001eca:	f000 fddb 	bl	8002a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8001ece:	0021      	movs	r1, r4
 8001ed0:	187b      	adds	r3, r7, r1
 8001ed2:	2290      	movs	r2, #144	; 0x90
 8001ed4:	0052      	lsls	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed8:	187b      	adds	r3, r7, r1
 8001eda:	2201      	movs	r2, #1
 8001edc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	187b      	adds	r3, r7, r1
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee4:	187b      	adds	r3, r7, r1
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eea:	000c      	movs	r4, r1
 8001eec:	187a      	adds	r2, r7, r1
 8001eee:	2390      	movs	r3, #144	; 0x90
 8001ef0:	05db      	lsls	r3, r3, #23
 8001ef2:	0011      	movs	r1, r2
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f000 fdc5 	bl	8002a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001efa:	0021      	movs	r1, r4
 8001efc:	187b      	adds	r3, r7, r1
 8001efe:	2280      	movs	r2, #128	; 0x80
 8001f00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f02:	187b      	adds	r3, r7, r1
 8001f04:	2201      	movs	r2, #1
 8001f06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	187b      	adds	r3, r7, r1
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0e:	187b      	adds	r3, r7, r1
 8001f10:	2200      	movs	r2, #0
 8001f12:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f14:	187b      	adds	r3, r7, r1
 8001f16:	4a05      	ldr	r2, [pc, #20]	; (8001f2c <MX_GPIO_Init+0x104>)
 8001f18:	0019      	movs	r1, r3
 8001f1a:	0010      	movs	r0, r2
 8001f1c:	f000 fdb2 	bl	8002a84 <HAL_GPIO_Init>

}
 8001f20:	46c0      	nop			; (mov r8, r8)
 8001f22:	46bd      	mov	sp, r7
 8001f24:	b009      	add	sp, #36	; 0x24
 8001f26:	bd90      	pop	{r4, r7, pc}
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	48000800 	.word	0x48000800
 8001f30:	10210000 	.word	0x10210000

08001f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f38:	46c0      	nop			; (mov r8, r8)
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f46:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <HAL_MspInit+0x44>)
 8001f48:	699a      	ldr	r2, [r3, #24]
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <HAL_MspInit+0x44>)
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	619a      	str	r2, [r3, #24]
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <HAL_MspInit+0x44>)
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	2201      	movs	r2, #1
 8001f58:	4013      	ands	r3, r2
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <HAL_MspInit+0x44>)
 8001f60:	69da      	ldr	r2, [r3, #28]
 8001f62:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <HAL_MspInit+0x44>)
 8001f64:	2180      	movs	r1, #128	; 0x80
 8001f66:	0549      	lsls	r1, r1, #21
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	61da      	str	r2, [r3, #28]
 8001f6c:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <HAL_MspInit+0x44>)
 8001f6e:	69da      	ldr	r2, [r3, #28]
 8001f70:	2380      	movs	r3, #128	; 0x80
 8001f72:	055b      	lsls	r3, r3, #21
 8001f74:	4013      	ands	r3, r2
 8001f76:	603b      	str	r3, [r7, #0]
 8001f78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f7a:	46c0      	nop			; (mov r8, r8)
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	b002      	add	sp, #8
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	40021000 	.word	0x40021000

08001f88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08c      	sub	sp, #48	; 0x30
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	231c      	movs	r3, #28
 8001f92:	18fb      	adds	r3, r7, r3
 8001f94:	0018      	movs	r0, r3
 8001f96:	2314      	movs	r3, #20
 8001f98:	001a      	movs	r2, r3
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	f002 fb24 	bl	80045e8 <memset>
  if(huart->Instance==USART1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a5f      	ldr	r2, [pc, #380]	; (8002124 <HAL_UART_MspInit+0x19c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d15a      	bne.n	8002060 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001faa:	4b5f      	ldr	r3, [pc, #380]	; (8002128 <HAL_UART_MspInit+0x1a0>)
 8001fac:	699a      	ldr	r2, [r3, #24]
 8001fae:	4b5e      	ldr	r3, [pc, #376]	; (8002128 <HAL_UART_MspInit+0x1a0>)
 8001fb0:	2180      	movs	r1, #128	; 0x80
 8001fb2:	01c9      	lsls	r1, r1, #7
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	619a      	str	r2, [r3, #24]
 8001fb8:	4b5b      	ldr	r3, [pc, #364]	; (8002128 <HAL_UART_MspInit+0x1a0>)
 8001fba:	699a      	ldr	r2, [r3, #24]
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	01db      	lsls	r3, r3, #7
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
 8001fc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc6:	4b58      	ldr	r3, [pc, #352]	; (8002128 <HAL_UART_MspInit+0x1a0>)
 8001fc8:	695a      	ldr	r2, [r3, #20]
 8001fca:	4b57      	ldr	r3, [pc, #348]	; (8002128 <HAL_UART_MspInit+0x1a0>)
 8001fcc:	2180      	movs	r1, #128	; 0x80
 8001fce:	0289      	lsls	r1, r1, #10
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	615a      	str	r2, [r3, #20]
 8001fd4:	4b54      	ldr	r3, [pc, #336]	; (8002128 <HAL_UART_MspInit+0x1a0>)
 8001fd6:	695a      	ldr	r2, [r3, #20]
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	029b      	lsls	r3, r3, #10
 8001fdc:	4013      	ands	r3, r2
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fe2:	211c      	movs	r1, #28
 8001fe4:	187b      	adds	r3, r7, r1
 8001fe6:	22c0      	movs	r2, #192	; 0xc0
 8001fe8:	00d2      	lsls	r2, r2, #3
 8001fea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fec:	187b      	adds	r3, r7, r1
 8001fee:	2202      	movs	r2, #2
 8001ff0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	187b      	adds	r3, r7, r1
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ff8:	187b      	adds	r3, r7, r1
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001ffe:	187b      	adds	r3, r7, r1
 8002000:	2201      	movs	r2, #1
 8002002:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002004:	187a      	adds	r2, r7, r1
 8002006:	2390      	movs	r3, #144	; 0x90
 8002008:	05db      	lsls	r3, r3, #23
 800200a:	0011      	movs	r1, r2
 800200c:	0018      	movs	r0, r3
 800200e:	f000 fd39 	bl	8002a84 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8002012:	4b46      	ldr	r3, [pc, #280]	; (800212c <HAL_UART_MspInit+0x1a4>)
 8002014:	4a46      	ldr	r2, [pc, #280]	; (8002130 <HAL_UART_MspInit+0x1a8>)
 8002016:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002018:	4b44      	ldr	r3, [pc, #272]	; (800212c <HAL_UART_MspInit+0x1a4>)
 800201a:	2200      	movs	r2, #0
 800201c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800201e:	4b43      	ldr	r3, [pc, #268]	; (800212c <HAL_UART_MspInit+0x1a4>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002024:	4b41      	ldr	r3, [pc, #260]	; (800212c <HAL_UART_MspInit+0x1a4>)
 8002026:	2280      	movs	r2, #128	; 0x80
 8002028:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800202a:	4b40      	ldr	r3, [pc, #256]	; (800212c <HAL_UART_MspInit+0x1a4>)
 800202c:	2200      	movs	r2, #0
 800202e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002030:	4b3e      	ldr	r3, [pc, #248]	; (800212c <HAL_UART_MspInit+0x1a4>)
 8002032:	2200      	movs	r2, #0
 8002034:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002036:	4b3d      	ldr	r3, [pc, #244]	; (800212c <HAL_UART_MspInit+0x1a4>)
 8002038:	2220      	movs	r2, #32
 800203a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800203c:	4b3b      	ldr	r3, [pc, #236]	; (800212c <HAL_UART_MspInit+0x1a4>)
 800203e:	2200      	movs	r2, #0
 8002040:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002042:	4b3a      	ldr	r3, [pc, #232]	; (800212c <HAL_UART_MspInit+0x1a4>)
 8002044:	0018      	movs	r0, r3
 8002046:	f000 faf9 	bl	800263c <HAL_DMA_Init>
 800204a:	1e03      	subs	r3, r0, #0
 800204c:	d001      	beq.n	8002052 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800204e:	f7ff ff71 	bl	8001f34 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a35      	ldr	r2, [pc, #212]	; (800212c <HAL_UART_MspInit+0x1a4>)
 8002056:	66da      	str	r2, [r3, #108]	; 0x6c
 8002058:	4b34      	ldr	r3, [pc, #208]	; (800212c <HAL_UART_MspInit+0x1a4>)
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800205e:	e05d      	b.n	800211c <HAL_UART_MspInit+0x194>
  else if(huart->Instance==USART2)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a33      	ldr	r2, [pc, #204]	; (8002134 <HAL_UART_MspInit+0x1ac>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d158      	bne.n	800211c <HAL_UART_MspInit+0x194>
    __HAL_RCC_USART2_CLK_ENABLE();
 800206a:	4b2f      	ldr	r3, [pc, #188]	; (8002128 <HAL_UART_MspInit+0x1a0>)
 800206c:	69da      	ldr	r2, [r3, #28]
 800206e:	4b2e      	ldr	r3, [pc, #184]	; (8002128 <HAL_UART_MspInit+0x1a0>)
 8002070:	2180      	movs	r1, #128	; 0x80
 8002072:	0289      	lsls	r1, r1, #10
 8002074:	430a      	orrs	r2, r1
 8002076:	61da      	str	r2, [r3, #28]
 8002078:	4b2b      	ldr	r3, [pc, #172]	; (8002128 <HAL_UART_MspInit+0x1a0>)
 800207a:	69da      	ldr	r2, [r3, #28]
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	029b      	lsls	r3, r3, #10
 8002080:	4013      	ands	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002086:	4b28      	ldr	r3, [pc, #160]	; (8002128 <HAL_UART_MspInit+0x1a0>)
 8002088:	695a      	ldr	r2, [r3, #20]
 800208a:	4b27      	ldr	r3, [pc, #156]	; (8002128 <HAL_UART_MspInit+0x1a0>)
 800208c:	2180      	movs	r1, #128	; 0x80
 800208e:	0289      	lsls	r1, r1, #10
 8002090:	430a      	orrs	r2, r1
 8002092:	615a      	str	r2, [r3, #20]
 8002094:	4b24      	ldr	r3, [pc, #144]	; (8002128 <HAL_UART_MspInit+0x1a0>)
 8002096:	695a      	ldr	r2, [r3, #20]
 8002098:	2380      	movs	r3, #128	; 0x80
 800209a:	029b      	lsls	r3, r3, #10
 800209c:	4013      	ands	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020a2:	211c      	movs	r1, #28
 80020a4:	187b      	adds	r3, r7, r1
 80020a6:	220c      	movs	r2, #12
 80020a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020aa:	187b      	adds	r3, r7, r1
 80020ac:	2202      	movs	r2, #2
 80020ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	187b      	adds	r3, r7, r1
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b6:	187b      	adds	r3, r7, r1
 80020b8:	2200      	movs	r2, #0
 80020ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80020bc:	187b      	adds	r3, r7, r1
 80020be:	2201      	movs	r2, #1
 80020c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c2:	187a      	adds	r2, r7, r1
 80020c4:	2390      	movs	r3, #144	; 0x90
 80020c6:	05db      	lsls	r3, r3, #23
 80020c8:	0011      	movs	r1, r2
 80020ca:	0018      	movs	r0, r3
 80020cc:	f000 fcda 	bl	8002a84 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 80020d0:	4b19      	ldr	r3, [pc, #100]	; (8002138 <HAL_UART_MspInit+0x1b0>)
 80020d2:	4a1a      	ldr	r2, [pc, #104]	; (800213c <HAL_UART_MspInit+0x1b4>)
 80020d4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020d6:	4b18      	ldr	r3, [pc, #96]	; (8002138 <HAL_UART_MspInit+0x1b0>)
 80020d8:	2200      	movs	r2, #0
 80020da:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020dc:	4b16      	ldr	r3, [pc, #88]	; (8002138 <HAL_UART_MspInit+0x1b0>)
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <HAL_UART_MspInit+0x1b0>)
 80020e4:	2280      	movs	r2, #128	; 0x80
 80020e6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020e8:	4b13      	ldr	r3, [pc, #76]	; (8002138 <HAL_UART_MspInit+0x1b0>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020ee:	4b12      	ldr	r3, [pc, #72]	; (8002138 <HAL_UART_MspInit+0x1b0>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80020f4:	4b10      	ldr	r3, [pc, #64]	; (8002138 <HAL_UART_MspInit+0x1b0>)
 80020f6:	2220      	movs	r2, #32
 80020f8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020fa:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <HAL_UART_MspInit+0x1b0>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002100:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <HAL_UART_MspInit+0x1b0>)
 8002102:	0018      	movs	r0, r3
 8002104:	f000 fa9a 	bl	800263c <HAL_DMA_Init>
 8002108:	1e03      	subs	r3, r0, #0
 800210a:	d001      	beq.n	8002110 <HAL_UART_MspInit+0x188>
      Error_Handler();
 800210c:	f7ff ff12 	bl	8001f34 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a09      	ldr	r2, [pc, #36]	; (8002138 <HAL_UART_MspInit+0x1b0>)
 8002114:	66da      	str	r2, [r3, #108]	; 0x6c
 8002116:	4b08      	ldr	r3, [pc, #32]	; (8002138 <HAL_UART_MspInit+0x1b0>)
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800211c:	46c0      	nop			; (mov r8, r8)
 800211e:	46bd      	mov	sp, r7
 8002120:	b00c      	add	sp, #48	; 0x30
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40013800 	.word	0x40013800
 8002128:	40021000 	.word	0x40021000
 800212c:	20000318 	.word	0x20000318
 8002130:	40020030 	.word	0x40020030
 8002134:	40004400 	.word	0x40004400
 8002138:	200002d4 	.word	0x200002d4
 800213c:	40020058 	.word	0x40020058

08002140 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a18      	ldr	r2, [pc, #96]	; (80021b0 <HAL_UART_MspDeInit+0x70>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d113      	bne.n	800217a <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002152:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <HAL_UART_MspDeInit+0x74>)
 8002154:	699a      	ldr	r2, [r3, #24]
 8002156:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <HAL_UART_MspDeInit+0x74>)
 8002158:	4917      	ldr	r1, [pc, #92]	; (80021b8 <HAL_UART_MspDeInit+0x78>)
 800215a:	400a      	ands	r2, r1
 800215c:	619a      	str	r2, [r3, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800215e:	23c0      	movs	r3, #192	; 0xc0
 8002160:	00da      	lsls	r2, r3, #3
 8002162:	2390      	movs	r3, #144	; 0x90
 8002164:	05db      	lsls	r3, r3, #23
 8002166:	0011      	movs	r1, r2
 8002168:	0018      	movs	r0, r3
 800216a:	f000 fdfb 	bl	8002d64 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002172:	0018      	movs	r0, r3
 8002174:	f000 faaa 	bl	80026cc <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8002178:	e015      	b.n	80021a6 <HAL_UART_MspDeInit+0x66>
  else if(huart->Instance==USART2)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a0f      	ldr	r2, [pc, #60]	; (80021bc <HAL_UART_MspDeInit+0x7c>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d110      	bne.n	80021a6 <HAL_UART_MspDeInit+0x66>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_UART_MspDeInit+0x74>)
 8002186:	69da      	ldr	r2, [r3, #28]
 8002188:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <HAL_UART_MspDeInit+0x74>)
 800218a:	490d      	ldr	r1, [pc, #52]	; (80021c0 <HAL_UART_MspDeInit+0x80>)
 800218c:	400a      	ands	r2, r1
 800218e:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 8002190:	2390      	movs	r3, #144	; 0x90
 8002192:	05db      	lsls	r3, r3, #23
 8002194:	210c      	movs	r1, #12
 8002196:	0018      	movs	r0, r3
 8002198:	f000 fde4 	bl	8002d64 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021a0:	0018      	movs	r0, r3
 80021a2:	f000 fa93 	bl	80026cc <HAL_DMA_DeInit>
}
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	46bd      	mov	sp, r7
 80021aa:	b002      	add	sp, #8
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	40013800 	.word	0x40013800
 80021b4:	40021000 	.word	0x40021000
 80021b8:	ffffbfff 	.word	0xffffbfff
 80021bc:	40004400 	.word	0x40004400
 80021c0:	fffdffff 	.word	0xfffdffff

080021c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021c8:	46c0      	nop			; (mov r8, r8)
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021d2:	e7fe      	b.n	80021d2 <HardFault_Handler+0x4>

080021d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80021d8:	46c0      	nop			; (mov r8, r8)
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ec:	f000 f90a 	bl	8002404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021f0:	46c0      	nop			; (mov r8, r8)
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80021fc:	4b03      	ldr	r3, [pc, #12]	; (800220c <DMA1_Channel2_3_IRQHandler+0x14>)
 80021fe:	0018      	movs	r0, r3
 8002200:	f000 fb4b 	bl	800289a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002204:	46c0      	nop			; (mov r8, r8)
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	20000318 	.word	0x20000318

08002210 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002214:	4b03      	ldr	r3, [pc, #12]	; (8002224 <DMA1_Channel4_5_IRQHandler+0x14>)
 8002216:	0018      	movs	r0, r3
 8002218:	f000 fb3f 	bl	800289a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 800221c:	46c0      	nop			; (mov r8, r8)
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	200002d4 	.word	0x200002d4

08002228 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	e00a      	b.n	8002250 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800223a:	e000      	b.n	800223e <_read+0x16>
 800223c:	bf00      	nop
 800223e:	0001      	movs	r1, r0
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	60ba      	str	r2, [r7, #8]
 8002246:	b2ca      	uxtb	r2, r1
 8002248:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	3301      	adds	r3, #1
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	429a      	cmp	r2, r3
 8002256:	dbf0      	blt.n	800223a <_read+0x12>
	}

return len;
 8002258:	687b      	ldr	r3, [r7, #4]
}
 800225a:	0018      	movs	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	b006      	add	sp, #24
 8002260:	bd80      	pop	{r7, pc}

08002262 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
	return -1;
 800226a:	2301      	movs	r3, #1
 800226c:	425b      	negs	r3, r3
}
 800226e:	0018      	movs	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	b002      	add	sp, #8
 8002274:	bd80      	pop	{r7, pc}

08002276 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	2280      	movs	r2, #128	; 0x80
 8002284:	0192      	lsls	r2, r2, #6
 8002286:	605a      	str	r2, [r3, #4]
	return 0;
 8002288:	2300      	movs	r3, #0
}
 800228a:	0018      	movs	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	b002      	add	sp, #8
 8002290:	bd80      	pop	{r7, pc}

08002292 <_isatty>:

int _isatty(int file)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
	return 1;
 800229a:	2301      	movs	r3, #1
}
 800229c:	0018      	movs	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	b002      	add	sp, #8
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
	return 0;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	0018      	movs	r0, r3
 80022b4:	46bd      	mov	sp, r7
 80022b6:	b004      	add	sp, #16
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <_sbrk+0x50>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d102      	bne.n	80022d2 <_sbrk+0x16>
		heap_end = &end;
 80022cc:	4b0f      	ldr	r3, [pc, #60]	; (800230c <_sbrk+0x50>)
 80022ce:	4a10      	ldr	r2, [pc, #64]	; (8002310 <_sbrk+0x54>)
 80022d0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80022d2:	4b0e      	ldr	r3, [pc, #56]	; (800230c <_sbrk+0x50>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80022d8:	4b0c      	ldr	r3, [pc, #48]	; (800230c <_sbrk+0x50>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	18d3      	adds	r3, r2, r3
 80022e0:	466a      	mov	r2, sp
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d907      	bls.n	80022f6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80022e6:	f002 f955 	bl	8004594 <__errno>
 80022ea:	0003      	movs	r3, r0
 80022ec:	220c      	movs	r2, #12
 80022ee:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80022f0:	2301      	movs	r3, #1
 80022f2:	425b      	negs	r3, r3
 80022f4:	e006      	b.n	8002304 <_sbrk+0x48>
	}

	heap_end += incr;
 80022f6:	4b05      	ldr	r3, [pc, #20]	; (800230c <_sbrk+0x50>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	18d2      	adds	r2, r2, r3
 80022fe:	4b03      	ldr	r3, [pc, #12]	; (800230c <_sbrk+0x50>)
 8002300:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8002302:	68fb      	ldr	r3, [r7, #12]
}
 8002304:	0018      	movs	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	b004      	add	sp, #16
 800230a:	bd80      	pop	{r7, pc}
 800230c:	200002c8 	.word	0x200002c8
 8002310:	20000468 	.word	0x20000468

08002314 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002318:	46c0      	nop			; (mov r8, r8)
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002320:	480d      	ldr	r0, [pc, #52]	; (8002358 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002322:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002324:	480d      	ldr	r0, [pc, #52]	; (800235c <LoopForever+0x6>)
  ldr r1, =_edata
 8002326:	490e      	ldr	r1, [pc, #56]	; (8002360 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002328:	4a0e      	ldr	r2, [pc, #56]	; (8002364 <LoopForever+0xe>)
  movs r3, #0
 800232a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800232c:	e002      	b.n	8002334 <LoopCopyDataInit>

0800232e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800232e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002332:	3304      	adds	r3, #4

08002334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002338:	d3f9      	bcc.n	800232e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800233a:	4a0b      	ldr	r2, [pc, #44]	; (8002368 <LoopForever+0x12>)
  ldr r4, =_ebss
 800233c:	4c0b      	ldr	r4, [pc, #44]	; (800236c <LoopForever+0x16>)
  movs r3, #0
 800233e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002340:	e001      	b.n	8002346 <LoopFillZerobss>

08002342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002344:	3204      	adds	r2, #4

08002346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002348:	d3fb      	bcc.n	8002342 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800234a:	f7ff ffe3 	bl	8002314 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800234e:	f002 f927 	bl	80045a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002352:	f7ff fbdb 	bl	8001b0c <main>

08002356 <LoopForever>:

LoopForever:
    b LoopForever
 8002356:	e7fe      	b.n	8002356 <LoopForever>
  ldr   r0, =_estack
 8002358:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800235c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002360:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002364:	080061b4 	.word	0x080061b4
  ldr r2, =_sbss
 8002368:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800236c:	20000464 	.word	0x20000464

08002370 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002370:	e7fe      	b.n	8002370 <ADC1_IRQHandler>
	...

08002374 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002378:	4b07      	ldr	r3, [pc, #28]	; (8002398 <HAL_Init+0x24>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <HAL_Init+0x24>)
 800237e:	2110      	movs	r1, #16
 8002380:	430a      	orrs	r2, r1
 8002382:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002384:	2000      	movs	r0, #0
 8002386:	f000 f809 	bl	800239c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800238a:	f7ff fdd9 	bl	8001f40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	0018      	movs	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	40022000 	.word	0x40022000

0800239c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800239c:	b590      	push	{r4, r7, lr}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023a4:	4b14      	ldr	r3, [pc, #80]	; (80023f8 <HAL_InitTick+0x5c>)
 80023a6:	681c      	ldr	r4, [r3, #0]
 80023a8:	4b14      	ldr	r3, [pc, #80]	; (80023fc <HAL_InitTick+0x60>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	0019      	movs	r1, r3
 80023ae:	23fa      	movs	r3, #250	; 0xfa
 80023b0:	0098      	lsls	r0, r3, #2
 80023b2:	f7fd feb1 	bl	8000118 <__udivsi3>
 80023b6:	0003      	movs	r3, r0
 80023b8:	0019      	movs	r1, r3
 80023ba:	0020      	movs	r0, r4
 80023bc:	f7fd feac 	bl	8000118 <__udivsi3>
 80023c0:	0003      	movs	r3, r0
 80023c2:	0018      	movs	r0, r3
 80023c4:	f000 f92d 	bl	8002622 <HAL_SYSTICK_Config>
 80023c8:	1e03      	subs	r3, r0, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e00f      	b.n	80023f0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	d80b      	bhi.n	80023ee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	2301      	movs	r3, #1
 80023da:	425b      	negs	r3, r3
 80023dc:	2200      	movs	r2, #0
 80023de:	0018      	movs	r0, r3
 80023e0:	f000 f8fa 	bl	80025d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <HAL_InitTick+0x64>)
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
 80023ec:	e000      	b.n	80023f0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
}
 80023f0:	0018      	movs	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	b003      	add	sp, #12
 80023f6:	bd90      	pop	{r4, r7, pc}
 80023f8:	20000004 	.word	0x20000004
 80023fc:	2000000c 	.word	0x2000000c
 8002400:	20000008 	.word	0x20000008

08002404 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <HAL_IncTick+0x1c>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	001a      	movs	r2, r3
 800240e:	4b05      	ldr	r3, [pc, #20]	; (8002424 <HAL_IncTick+0x20>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	18d2      	adds	r2, r2, r3
 8002414:	4b03      	ldr	r3, [pc, #12]	; (8002424 <HAL_IncTick+0x20>)
 8002416:	601a      	str	r2, [r3, #0]
}
 8002418:	46c0      	nop			; (mov r8, r8)
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	2000000c 	.word	0x2000000c
 8002424:	2000045c 	.word	0x2000045c

08002428 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  return uwTick;
 800242c:	4b02      	ldr	r3, [pc, #8]	; (8002438 <HAL_GetTick+0x10>)
 800242e:	681b      	ldr	r3, [r3, #0]
}
 8002430:	0018      	movs	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	2000045c 	.word	0x2000045c

0800243c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002444:	f7ff fff0 	bl	8002428 <HAL_GetTick>
 8002448:	0003      	movs	r3, r0
 800244a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	3301      	adds	r3, #1
 8002454:	d005      	beq.n	8002462 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002456:	4b09      	ldr	r3, [pc, #36]	; (800247c <HAL_Delay+0x40>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	001a      	movs	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	189b      	adds	r3, r3, r2
 8002460:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	f7ff ffe0 	bl	8002428 <HAL_GetTick>
 8002468:	0002      	movs	r2, r0
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	429a      	cmp	r2, r3
 8002472:	d8f7      	bhi.n	8002464 <HAL_Delay+0x28>
  {
  }
}
 8002474:	46c0      	nop			; (mov r8, r8)
 8002476:	46bd      	mov	sp, r7
 8002478:	b004      	add	sp, #16
 800247a:	bd80      	pop	{r7, pc}
 800247c:	2000000c 	.word	0x2000000c

08002480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	0002      	movs	r2, r0
 8002488:	1dfb      	adds	r3, r7, #7
 800248a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800248c:	1dfb      	adds	r3, r7, #7
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b7f      	cmp	r3, #127	; 0x7f
 8002492:	d809      	bhi.n	80024a8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002494:	1dfb      	adds	r3, r7, #7
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	001a      	movs	r2, r3
 800249a:	231f      	movs	r3, #31
 800249c:	401a      	ands	r2, r3
 800249e:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <__NVIC_EnableIRQ+0x30>)
 80024a0:	2101      	movs	r1, #1
 80024a2:	4091      	lsls	r1, r2
 80024a4:	000a      	movs	r2, r1
 80024a6:	601a      	str	r2, [r3, #0]
  }
}
 80024a8:	46c0      	nop			; (mov r8, r8)
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b002      	add	sp, #8
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	e000e100 	.word	0xe000e100

080024b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024b4:	b590      	push	{r4, r7, lr}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	0002      	movs	r2, r0
 80024bc:	6039      	str	r1, [r7, #0]
 80024be:	1dfb      	adds	r3, r7, #7
 80024c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80024c2:	1dfb      	adds	r3, r7, #7
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b7f      	cmp	r3, #127	; 0x7f
 80024c8:	d828      	bhi.n	800251c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024ca:	4a2f      	ldr	r2, [pc, #188]	; (8002588 <__NVIC_SetPriority+0xd4>)
 80024cc:	1dfb      	adds	r3, r7, #7
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	b25b      	sxtb	r3, r3
 80024d2:	089b      	lsrs	r3, r3, #2
 80024d4:	33c0      	adds	r3, #192	; 0xc0
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	589b      	ldr	r3, [r3, r2]
 80024da:	1dfa      	adds	r2, r7, #7
 80024dc:	7812      	ldrb	r2, [r2, #0]
 80024de:	0011      	movs	r1, r2
 80024e0:	2203      	movs	r2, #3
 80024e2:	400a      	ands	r2, r1
 80024e4:	00d2      	lsls	r2, r2, #3
 80024e6:	21ff      	movs	r1, #255	; 0xff
 80024e8:	4091      	lsls	r1, r2
 80024ea:	000a      	movs	r2, r1
 80024ec:	43d2      	mvns	r2, r2
 80024ee:	401a      	ands	r2, r3
 80024f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	019b      	lsls	r3, r3, #6
 80024f6:	22ff      	movs	r2, #255	; 0xff
 80024f8:	401a      	ands	r2, r3
 80024fa:	1dfb      	adds	r3, r7, #7
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	0018      	movs	r0, r3
 8002500:	2303      	movs	r3, #3
 8002502:	4003      	ands	r3, r0
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002508:	481f      	ldr	r0, [pc, #124]	; (8002588 <__NVIC_SetPriority+0xd4>)
 800250a:	1dfb      	adds	r3, r7, #7
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	b25b      	sxtb	r3, r3
 8002510:	089b      	lsrs	r3, r3, #2
 8002512:	430a      	orrs	r2, r1
 8002514:	33c0      	adds	r3, #192	; 0xc0
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800251a:	e031      	b.n	8002580 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800251c:	4a1b      	ldr	r2, [pc, #108]	; (800258c <__NVIC_SetPriority+0xd8>)
 800251e:	1dfb      	adds	r3, r7, #7
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	0019      	movs	r1, r3
 8002524:	230f      	movs	r3, #15
 8002526:	400b      	ands	r3, r1
 8002528:	3b08      	subs	r3, #8
 800252a:	089b      	lsrs	r3, r3, #2
 800252c:	3306      	adds	r3, #6
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	18d3      	adds	r3, r2, r3
 8002532:	3304      	adds	r3, #4
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	1dfa      	adds	r2, r7, #7
 8002538:	7812      	ldrb	r2, [r2, #0]
 800253a:	0011      	movs	r1, r2
 800253c:	2203      	movs	r2, #3
 800253e:	400a      	ands	r2, r1
 8002540:	00d2      	lsls	r2, r2, #3
 8002542:	21ff      	movs	r1, #255	; 0xff
 8002544:	4091      	lsls	r1, r2
 8002546:	000a      	movs	r2, r1
 8002548:	43d2      	mvns	r2, r2
 800254a:	401a      	ands	r2, r3
 800254c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	019b      	lsls	r3, r3, #6
 8002552:	22ff      	movs	r2, #255	; 0xff
 8002554:	401a      	ands	r2, r3
 8002556:	1dfb      	adds	r3, r7, #7
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	0018      	movs	r0, r3
 800255c:	2303      	movs	r3, #3
 800255e:	4003      	ands	r3, r0
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002564:	4809      	ldr	r0, [pc, #36]	; (800258c <__NVIC_SetPriority+0xd8>)
 8002566:	1dfb      	adds	r3, r7, #7
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	001c      	movs	r4, r3
 800256c:	230f      	movs	r3, #15
 800256e:	4023      	ands	r3, r4
 8002570:	3b08      	subs	r3, #8
 8002572:	089b      	lsrs	r3, r3, #2
 8002574:	430a      	orrs	r2, r1
 8002576:	3306      	adds	r3, #6
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	18c3      	adds	r3, r0, r3
 800257c:	3304      	adds	r3, #4
 800257e:	601a      	str	r2, [r3, #0]
}
 8002580:	46c0      	nop			; (mov r8, r8)
 8002582:	46bd      	mov	sp, r7
 8002584:	b003      	add	sp, #12
 8002586:	bd90      	pop	{r4, r7, pc}
 8002588:	e000e100 	.word	0xe000e100
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3b01      	subs	r3, #1
 800259c:	4a0c      	ldr	r2, [pc, #48]	; (80025d0 <SysTick_Config+0x40>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d901      	bls.n	80025a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025a2:	2301      	movs	r3, #1
 80025a4:	e010      	b.n	80025c8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025a6:	4b0b      	ldr	r3, [pc, #44]	; (80025d4 <SysTick_Config+0x44>)
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	3a01      	subs	r2, #1
 80025ac:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ae:	2301      	movs	r3, #1
 80025b0:	425b      	negs	r3, r3
 80025b2:	2103      	movs	r1, #3
 80025b4:	0018      	movs	r0, r3
 80025b6:	f7ff ff7d 	bl	80024b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025ba:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <SysTick_Config+0x44>)
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025c0:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <SysTick_Config+0x44>)
 80025c2:	2207      	movs	r2, #7
 80025c4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	0018      	movs	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b002      	add	sp, #8
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	00ffffff 	.word	0x00ffffff
 80025d4:	e000e010 	.word	0xe000e010

080025d8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	607a      	str	r2, [r7, #4]
 80025e2:	210f      	movs	r1, #15
 80025e4:	187b      	adds	r3, r7, r1
 80025e6:	1c02      	adds	r2, r0, #0
 80025e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	187b      	adds	r3, r7, r1
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	b25b      	sxtb	r3, r3
 80025f2:	0011      	movs	r1, r2
 80025f4:	0018      	movs	r0, r3
 80025f6:	f7ff ff5d 	bl	80024b4 <__NVIC_SetPriority>
}
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	46bd      	mov	sp, r7
 80025fe:	b004      	add	sp, #16
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b082      	sub	sp, #8
 8002606:	af00      	add	r7, sp, #0
 8002608:	0002      	movs	r2, r0
 800260a:	1dfb      	adds	r3, r7, #7
 800260c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800260e:	1dfb      	adds	r3, r7, #7
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	b25b      	sxtb	r3, r3
 8002614:	0018      	movs	r0, r3
 8002616:	f7ff ff33 	bl	8002480 <__NVIC_EnableIRQ>
}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	46bd      	mov	sp, r7
 800261e:	b002      	add	sp, #8
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	0018      	movs	r0, r3
 800262e:	f7ff ffaf 	bl	8002590 <SysTick_Config>
 8002632:	0003      	movs	r3, r0
}
 8002634:	0018      	movs	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	b002      	add	sp, #8
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e036      	b.n	80026c0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2221      	movs	r2, #33	; 0x21
 8002656:	2102      	movs	r1, #2
 8002658:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4a18      	ldr	r2, [pc, #96]	; (80026c8 <HAL_DMA_Init+0x8c>)
 8002666:	4013      	ands	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002672:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800267e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800268a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	4313      	orrs	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	0018      	movs	r0, r3
 80026a4:	f000 f9d2 	bl	8002a4c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2221      	movs	r2, #33	; 0x21
 80026b2:	2101      	movs	r1, #1
 80026b4:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2220      	movs	r2, #32
 80026ba:	2100      	movs	r1, #0
 80026bc:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}  
 80026c0:	0018      	movs	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	b004      	add	sp, #16
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	ffffc00f 	.word	0xffffc00f

080026cc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e03b      	b.n	8002756 <HAL_DMA_DeInit+0x8a>
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2101      	movs	r1, #1
 80026ea:	438a      	bics	r2, r1
 80026ec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2200      	movs	r2, #0
 80026fc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2200      	movs	r2, #0
 8002704:	609a      	str	r2, [r3, #8]
  
  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2200      	movs	r2, #0
 800270c:	60da      	str	r2, [r3, #12]

/* Get DMA Base Address */  
  DMA_CalcBaseAndBitshift(hdma);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	0018      	movs	r0, r3
 8002712:	f000 f99b 	bl	8002a4c <DMA_CalcBaseAndBitshift>

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271e:	2101      	movs	r1, #1
 8002720:	4091      	lsls	r1, r2
 8002722:	000a      	movs	r2, r1
 8002724:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2221      	movs	r2, #33	; 0x21
 8002748:	2100      	movs	r1, #0
 800274a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2220      	movs	r2, #32
 8002750:	2100      	movs	r1, #0
 8002752:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	0018      	movs	r0, r3
 8002758:	46bd      	mov	sp, r7
 800275a:	b002      	add	sp, #8
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b086      	sub	sp, #24
 8002762:	af00      	add	r7, sp, #0
 8002764:	60f8      	str	r0, [r7, #12]
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	607a      	str	r2, [r7, #4]
 800276a:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800276c:	2317      	movs	r3, #23
 800276e:	18fb      	adds	r3, r7, r3
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2220      	movs	r2, #32
 8002778:	5c9b      	ldrb	r3, [r3, r2]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_DMA_Start_IT+0x24>
 800277e:	2302      	movs	r3, #2
 8002780:	e04f      	b.n	8002822 <HAL_DMA_Start_IT+0xc4>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2220      	movs	r2, #32
 8002786:	2101      	movs	r1, #1
 8002788:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2221      	movs	r2, #33	; 0x21
 800278e:	5c9b      	ldrb	r3, [r3, r2]
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b01      	cmp	r3, #1
 8002794:	d13a      	bne.n	800280c <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2221      	movs	r2, #33	; 0x21
 800279a:	2102      	movs	r1, #2
 800279c:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2101      	movs	r1, #1
 80027b0:	438a      	bics	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68b9      	ldr	r1, [r7, #8]
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 f919 	bl	80029f2 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d008      	beq.n	80027da <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	210e      	movs	r1, #14
 80027d4:	430a      	orrs	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	e00f      	b.n	80027fa <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	210a      	movs	r1, #10
 80027e6:	430a      	orrs	r2, r1
 80027e8:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2104      	movs	r1, #4
 80027f6:	438a      	bics	r2, r1
 80027f8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2101      	movs	r1, #1
 8002806:	430a      	orrs	r2, r1
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	e007      	b.n	800281c <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2220      	movs	r2, #32
 8002810:	2100      	movs	r1, #0
 8002812:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002814:	2317      	movs	r3, #23
 8002816:	18fb      	adds	r3, r7, r3
 8002818:	2202      	movs	r2, #2
 800281a:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 800281c:	2317      	movs	r3, #23
 800281e:	18fb      	adds	r3, r7, r3
 8002820:	781b      	ldrb	r3, [r3, #0]
} 
 8002822:	0018      	movs	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	b006      	add	sp, #24
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2221      	movs	r2, #33	; 0x21
 8002836:	5c9b      	ldrb	r3, [r3, r2]
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d008      	beq.n	8002850 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2204      	movs	r2, #4
 8002842:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2220      	movs	r2, #32
 8002848:	2100      	movs	r1, #0
 800284a:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e020      	b.n	8002892 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	210e      	movs	r1, #14
 800285c:	438a      	bics	r2, r1
 800285e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2101      	movs	r1, #1
 800286c:	438a      	bics	r2, r1
 800286e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002878:	2101      	movs	r1, #1
 800287a:	4091      	lsls	r1, r2
 800287c:	000a      	movs	r2, r1
 800287e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2221      	movs	r2, #33	; 0x21
 8002884:	2101      	movs	r1, #1
 8002886:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2220      	movs	r2, #32
 800288c:	2100      	movs	r1, #0
 800288e:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	0018      	movs	r0, r3
 8002894:	46bd      	mov	sp, r7
 8002896:	b002      	add	sp, #8
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b084      	sub	sp, #16
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	2204      	movs	r2, #4
 80028b8:	409a      	lsls	r2, r3
 80028ba:	0013      	movs	r3, r2
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4013      	ands	r3, r2
 80028c0:	d024      	beq.n	800290c <HAL_DMA_IRQHandler+0x72>
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	2204      	movs	r2, #4
 80028c6:	4013      	ands	r3, r2
 80028c8:	d020      	beq.n	800290c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2220      	movs	r2, #32
 80028d2:	4013      	ands	r3, r2
 80028d4:	d107      	bne.n	80028e6 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2104      	movs	r1, #4
 80028e2:	438a      	bics	r2, r1
 80028e4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ee:	2104      	movs	r1, #4
 80028f0:	4091      	lsls	r1, r2
 80028f2:	000a      	movs	r2, r1
 80028f4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d100      	bne.n	8002900 <HAL_DMA_IRQHandler+0x66>
 80028fe:	e06a      	b.n	80029d6 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	0010      	movs	r0, r2
 8002908:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800290a:	e064      	b.n	80029d6 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	2202      	movs	r2, #2
 8002912:	409a      	lsls	r2, r3
 8002914:	0013      	movs	r3, r2
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4013      	ands	r3, r2
 800291a:	d02b      	beq.n	8002974 <HAL_DMA_IRQHandler+0xda>
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2202      	movs	r2, #2
 8002920:	4013      	ands	r3, r2
 8002922:	d027      	beq.n	8002974 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2220      	movs	r2, #32
 800292c:	4013      	ands	r3, r2
 800292e:	d10b      	bne.n	8002948 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	210a      	movs	r1, #10
 800293c:	438a      	bics	r2, r1
 800293e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2221      	movs	r2, #33	; 0x21
 8002944:	2101      	movs	r1, #1
 8002946:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002950:	2102      	movs	r1, #2
 8002952:	4091      	lsls	r1, r2
 8002954:	000a      	movs	r2, r1
 8002956:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2220      	movs	r2, #32
 800295c:	2100      	movs	r1, #0
 800295e:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	2b00      	cmp	r3, #0
 8002966:	d036      	beq.n	80029d6 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	0010      	movs	r0, r2
 8002970:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002972:	e030      	b.n	80029d6 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	2208      	movs	r2, #8
 800297a:	409a      	lsls	r2, r3
 800297c:	0013      	movs	r3, r2
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4013      	ands	r3, r2
 8002982:	d028      	beq.n	80029d6 <HAL_DMA_IRQHandler+0x13c>
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2208      	movs	r2, #8
 8002988:	4013      	ands	r3, r2
 800298a:	d024      	beq.n	80029d6 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	210e      	movs	r1, #14
 8002998:	438a      	bics	r2, r1
 800299a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a4:	2101      	movs	r1, #1
 80029a6:	4091      	lsls	r1, r2
 80029a8:	000a      	movs	r2, r1
 80029aa:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2221      	movs	r2, #33	; 0x21
 80029b6:	2101      	movs	r1, #1
 80029b8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2220      	movs	r2, #32
 80029be:	2100      	movs	r1, #0
 80029c0:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d005      	beq.n	80029d6 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	0010      	movs	r0, r2
 80029d2:	4798      	blx	r3
    }
   }
}  
 80029d4:	e7ff      	b.n	80029d6 <HAL_DMA_IRQHandler+0x13c>
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	46bd      	mov	sp, r7
 80029da:	b004      	add	sp, #16
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80029ea:	0018      	movs	r0, r3
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b002      	add	sp, #8
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b084      	sub	sp, #16
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	607a      	str	r2, [r7, #4]
 80029fe:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a08:	2101      	movs	r1, #1
 8002a0a:	4091      	lsls	r1, r2
 8002a0c:	000a      	movs	r2, r1
 8002a0e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b10      	cmp	r3, #16
 8002a1e:	d108      	bne.n	8002a32 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a30:	e007      	b.n	8002a42 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	60da      	str	r2, [r3, #12]
}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	46bd      	mov	sp, r7
 8002a46:	b004      	add	sp, #16
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a08      	ldr	r2, [pc, #32]	; (8002a7c <DMA_CalcBaseAndBitshift+0x30>)
 8002a5a:	4694      	mov	ip, r2
 8002a5c:	4463      	add	r3, ip
 8002a5e:	2114      	movs	r1, #20
 8002a60:	0018      	movs	r0, r3
 8002a62:	f7fd fb59 	bl	8000118 <__udivsi3>
 8002a66:	0003      	movs	r3, r0
 8002a68:	009a      	lsls	r2, r3, #2
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a03      	ldr	r2, [pc, #12]	; (8002a80 <DMA_CalcBaseAndBitshift+0x34>)
 8002a72:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002a74:	46c0      	nop			; (mov r8, r8)
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b002      	add	sp, #8
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	bffdfff8 	.word	0xbffdfff8
 8002a80:	40020000 	.word	0x40020000

08002a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a92:	e14f      	b.n	8002d34 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2101      	movs	r1, #1
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	4091      	lsls	r1, r2
 8002a9e:	000a      	movs	r2, r1
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d100      	bne.n	8002aac <HAL_GPIO_Init+0x28>
 8002aaa:	e140      	b.n	8002d2e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d003      	beq.n	8002abc <HAL_GPIO_Init+0x38>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b12      	cmp	r3, #18
 8002aba:	d123      	bne.n	8002b04 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	08da      	lsrs	r2, r3, #3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3208      	adds	r2, #8
 8002ac4:	0092      	lsls	r2, r2, #2
 8002ac6:	58d3      	ldr	r3, [r2, r3]
 8002ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2207      	movs	r2, #7
 8002ace:	4013      	ands	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	220f      	movs	r2, #15
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	0013      	movs	r3, r2
 8002ad8:	43da      	mvns	r2, r3
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4013      	ands	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	2107      	movs	r1, #7
 8002ae8:	400b      	ands	r3, r1
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	409a      	lsls	r2, r3
 8002aee:	0013      	movs	r3, r2
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	08da      	lsrs	r2, r3, #3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3208      	adds	r2, #8
 8002afe:	0092      	lsls	r2, r2, #2
 8002b00:	6939      	ldr	r1, [r7, #16]
 8002b02:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	2203      	movs	r2, #3
 8002b10:	409a      	lsls	r2, r3
 8002b12:	0013      	movs	r3, r2
 8002b14:	43da      	mvns	r2, r3
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2203      	movs	r2, #3
 8002b22:	401a      	ands	r2, r3
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	409a      	lsls	r2, r3
 8002b2a:	0013      	movs	r3, r2
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d00b      	beq.n	8002b58 <HAL_GPIO_Init+0xd4>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d007      	beq.n	8002b58 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b4c:	2b11      	cmp	r3, #17
 8002b4e:	d003      	beq.n	8002b58 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2b12      	cmp	r3, #18
 8002b56:	d130      	bne.n	8002bba <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	2203      	movs	r2, #3
 8002b64:	409a      	lsls	r2, r3
 8002b66:	0013      	movs	r3, r2
 8002b68:	43da      	mvns	r2, r3
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	68da      	ldr	r2, [r3, #12]
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	409a      	lsls	r2, r3
 8002b7a:	0013      	movs	r3, r2
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b8e:	2201      	movs	r2, #1
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	409a      	lsls	r2, r3
 8002b94:	0013      	movs	r3, r2
 8002b96:	43da      	mvns	r2, r3
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	091b      	lsrs	r3, r3, #4
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	409a      	lsls	r2, r3
 8002bac:	0013      	movs	r3, r2
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	409a      	lsls	r2, r3
 8002bc8:	0013      	movs	r3, r2
 8002bca:	43da      	mvns	r2, r3
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	409a      	lsls	r2, r3
 8002bdc:	0013      	movs	r3, r2
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	2380      	movs	r3, #128	; 0x80
 8002bf0:	055b      	lsls	r3, r3, #21
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d100      	bne.n	8002bf8 <HAL_GPIO_Init+0x174>
 8002bf6:	e09a      	b.n	8002d2e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf8:	4b54      	ldr	r3, [pc, #336]	; (8002d4c <HAL_GPIO_Init+0x2c8>)
 8002bfa:	699a      	ldr	r2, [r3, #24]
 8002bfc:	4b53      	ldr	r3, [pc, #332]	; (8002d4c <HAL_GPIO_Init+0x2c8>)
 8002bfe:	2101      	movs	r1, #1
 8002c00:	430a      	orrs	r2, r1
 8002c02:	619a      	str	r2, [r3, #24]
 8002c04:	4b51      	ldr	r3, [pc, #324]	; (8002d4c <HAL_GPIO_Init+0x2c8>)
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c10:	4a4f      	ldr	r2, [pc, #316]	; (8002d50 <HAL_GPIO_Init+0x2cc>)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	089b      	lsrs	r3, r3, #2
 8002c16:	3302      	adds	r3, #2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	589b      	ldr	r3, [r3, r2]
 8002c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2203      	movs	r2, #3
 8002c22:	4013      	ands	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	220f      	movs	r2, #15
 8002c28:	409a      	lsls	r2, r3
 8002c2a:	0013      	movs	r3, r2
 8002c2c:	43da      	mvns	r2, r3
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	4013      	ands	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	2390      	movs	r3, #144	; 0x90
 8002c38:	05db      	lsls	r3, r3, #23
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d013      	beq.n	8002c66 <HAL_GPIO_Init+0x1e2>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a44      	ldr	r2, [pc, #272]	; (8002d54 <HAL_GPIO_Init+0x2d0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d00d      	beq.n	8002c62 <HAL_GPIO_Init+0x1de>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a43      	ldr	r2, [pc, #268]	; (8002d58 <HAL_GPIO_Init+0x2d4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d007      	beq.n	8002c5e <HAL_GPIO_Init+0x1da>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a42      	ldr	r2, [pc, #264]	; (8002d5c <HAL_GPIO_Init+0x2d8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d101      	bne.n	8002c5a <HAL_GPIO_Init+0x1d6>
 8002c56:	2303      	movs	r3, #3
 8002c58:	e006      	b.n	8002c68 <HAL_GPIO_Init+0x1e4>
 8002c5a:	2305      	movs	r3, #5
 8002c5c:	e004      	b.n	8002c68 <HAL_GPIO_Init+0x1e4>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e002      	b.n	8002c68 <HAL_GPIO_Init+0x1e4>
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <HAL_GPIO_Init+0x1e4>
 8002c66:	2300      	movs	r3, #0
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	2103      	movs	r1, #3
 8002c6c:	400a      	ands	r2, r1
 8002c6e:	0092      	lsls	r2, r2, #2
 8002c70:	4093      	lsls	r3, r2
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c78:	4935      	ldr	r1, [pc, #212]	; (8002d50 <HAL_GPIO_Init+0x2cc>)
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	089b      	lsrs	r3, r3, #2
 8002c7e:	3302      	adds	r3, #2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c86:	4b36      	ldr	r3, [pc, #216]	; (8002d60 <HAL_GPIO_Init+0x2dc>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	43da      	mvns	r2, r3
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	4013      	ands	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	2380      	movs	r3, #128	; 0x80
 8002c9c:	025b      	lsls	r3, r3, #9
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	d003      	beq.n	8002caa <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002caa:	4b2d      	ldr	r3, [pc, #180]	; (8002d60 <HAL_GPIO_Init+0x2dc>)
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002cb0:	4b2b      	ldr	r3, [pc, #172]	; (8002d60 <HAL_GPIO_Init+0x2dc>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	43da      	mvns	r2, r3
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	029b      	lsls	r3, r3, #10
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d003      	beq.n	8002cd4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002cd4:	4b22      	ldr	r3, [pc, #136]	; (8002d60 <HAL_GPIO_Init+0x2dc>)
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cda:	4b21      	ldr	r3, [pc, #132]	; (8002d60 <HAL_GPIO_Init+0x2dc>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	43da      	mvns	r2, r3
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	2380      	movs	r3, #128	; 0x80
 8002cf0:	035b      	lsls	r3, r3, #13
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	d003      	beq.n	8002cfe <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002cfe:	4b18      	ldr	r3, [pc, #96]	; (8002d60 <HAL_GPIO_Init+0x2dc>)
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002d04:	4b16      	ldr	r3, [pc, #88]	; (8002d60 <HAL_GPIO_Init+0x2dc>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	43da      	mvns	r2, r3
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4013      	ands	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	039b      	lsls	r3, r3, #14
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d003      	beq.n	8002d28 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d28:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <HAL_GPIO_Init+0x2dc>)
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	3301      	adds	r3, #1
 8002d32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	40da      	lsrs	r2, r3
 8002d3c:	1e13      	subs	r3, r2, #0
 8002d3e:	d000      	beq.n	8002d42 <HAL_GPIO_Init+0x2be>
 8002d40:	e6a8      	b.n	8002a94 <HAL_GPIO_Init+0x10>
  } 
}
 8002d42:	46c0      	nop			; (mov r8, r8)
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b006      	add	sp, #24
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40010000 	.word	0x40010000
 8002d54:	48000400 	.word	0x48000400
 8002d58:	48000800 	.word	0x48000800
 8002d5c:	48000c00 	.word	0x48000c00
 8002d60:	40010400 	.word	0x40010400

08002d64 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002d72:	e0b1      	b.n	8002ed8 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002d74:	2201      	movs	r2, #1
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d100      	bne.n	8002d88 <HAL_GPIO_DeInit+0x24>
 8002d86:	e0a4      	b.n	8002ed2 <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002d88:	4a58      	ldr	r2, [pc, #352]	; (8002eec <HAL_GPIO_DeInit+0x188>)
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	089b      	lsrs	r3, r3, #2
 8002d8e:	3302      	adds	r3, #2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	589b      	ldr	r3, [r3, r2]
 8002d94:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	2203      	movs	r2, #3
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	220f      	movs	r2, #15
 8002da0:	409a      	lsls	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4013      	ands	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	2390      	movs	r3, #144	; 0x90
 8002dac:	05db      	lsls	r3, r3, #23
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d013      	beq.n	8002dda <HAL_GPIO_DeInit+0x76>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a4e      	ldr	r2, [pc, #312]	; (8002ef0 <HAL_GPIO_DeInit+0x18c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d00d      	beq.n	8002dd6 <HAL_GPIO_DeInit+0x72>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a4d      	ldr	r2, [pc, #308]	; (8002ef4 <HAL_GPIO_DeInit+0x190>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d007      	beq.n	8002dd2 <HAL_GPIO_DeInit+0x6e>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a4c      	ldr	r2, [pc, #304]	; (8002ef8 <HAL_GPIO_DeInit+0x194>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d101      	bne.n	8002dce <HAL_GPIO_DeInit+0x6a>
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e006      	b.n	8002ddc <HAL_GPIO_DeInit+0x78>
 8002dce:	2305      	movs	r3, #5
 8002dd0:	e004      	b.n	8002ddc <HAL_GPIO_DeInit+0x78>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e002      	b.n	8002ddc <HAL_GPIO_DeInit+0x78>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <HAL_GPIO_DeInit+0x78>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	2103      	movs	r1, #3
 8002de0:	400a      	ands	r2, r1
 8002de2:	0092      	lsls	r2, r2, #2
 8002de4:	4093      	lsls	r3, r2
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d132      	bne.n	8002e52 <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002dec:	4b43      	ldr	r3, [pc, #268]	; (8002efc <HAL_GPIO_DeInit+0x198>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	43d9      	mvns	r1, r3
 8002df4:	4b41      	ldr	r3, [pc, #260]	; (8002efc <HAL_GPIO_DeInit+0x198>)
 8002df6:	400a      	ands	r2, r1
 8002df8:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002dfa:	4b40      	ldr	r3, [pc, #256]	; (8002efc <HAL_GPIO_DeInit+0x198>)
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	43d9      	mvns	r1, r3
 8002e02:	4b3e      	ldr	r3, [pc, #248]	; (8002efc <HAL_GPIO_DeInit+0x198>)
 8002e04:	400a      	ands	r2, r1
 8002e06:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002e08:	4b3c      	ldr	r3, [pc, #240]	; (8002efc <HAL_GPIO_DeInit+0x198>)
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	43d9      	mvns	r1, r3
 8002e10:	4b3a      	ldr	r3, [pc, #232]	; (8002efc <HAL_GPIO_DeInit+0x198>)
 8002e12:	400a      	ands	r2, r1
 8002e14:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002e16:	4b39      	ldr	r3, [pc, #228]	; (8002efc <HAL_GPIO_DeInit+0x198>)
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	43d9      	mvns	r1, r3
 8002e1e:	4b37      	ldr	r3, [pc, #220]	; (8002efc <HAL_GPIO_DeInit+0x198>)
 8002e20:	400a      	ands	r2, r1
 8002e22:	60da      	str	r2, [r3, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	2203      	movs	r2, #3
 8002e28:	4013      	ands	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	220f      	movs	r2, #15
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	0013      	movs	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002e34:	4a2d      	ldr	r2, [pc, #180]	; (8002eec <HAL_GPIO_DeInit+0x188>)
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	089b      	lsrs	r3, r3, #2
 8002e3a:	3302      	adds	r3, #2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	589a      	ldr	r2, [r3, r2]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	43d9      	mvns	r1, r3
 8002e44:	4829      	ldr	r0, [pc, #164]	; (8002eec <HAL_GPIO_DeInit+0x188>)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	089b      	lsrs	r3, r3, #2
 8002e4a:	400a      	ands	r2, r1
 8002e4c:	3302      	adds	r3, #2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	0052      	lsls	r2, r2, #1
 8002e5a:	2103      	movs	r1, #3
 8002e5c:	4091      	lsls	r1, r2
 8002e5e:	000a      	movs	r2, r1
 8002e60:	43d2      	mvns	r2, r2
 8002e62:	401a      	ands	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	08da      	lsrs	r2, r3, #3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3208      	adds	r2, #8
 8002e70:	0092      	lsls	r2, r2, #2
 8002e72:	58d3      	ldr	r3, [r2, r3]
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	2107      	movs	r1, #7
 8002e78:	400a      	ands	r2, r1
 8002e7a:	0092      	lsls	r2, r2, #2
 8002e7c:	210f      	movs	r1, #15
 8002e7e:	4091      	lsls	r1, r2
 8002e80:	000a      	movs	r2, r1
 8002e82:	43d1      	mvns	r1, r2
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	08d2      	lsrs	r2, r2, #3
 8002e88:	4019      	ands	r1, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3208      	adds	r2, #8
 8002e8e:	0092      	lsls	r2, r2, #2
 8002e90:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	0052      	lsls	r2, r2, #1
 8002e9a:	2103      	movs	r1, #3
 8002e9c:	4091      	lsls	r1, r2
 8002e9e:	000a      	movs	r2, r1
 8002ea0:	43d2      	mvns	r2, r2
 8002ea2:	401a      	ands	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2101      	movs	r1, #1
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	4091      	lsls	r1, r2
 8002eb2:	000a      	movs	r2, r1
 8002eb4:	43d2      	mvns	r2, r2
 8002eb6:	401a      	ands	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	0052      	lsls	r2, r2, #1
 8002ec4:	2103      	movs	r1, #3
 8002ec6:	4091      	lsls	r1, r2
 8002ec8:	000a      	movs	r2, r1
 8002eca:	43d2      	mvns	r2, r2
 8002ecc:	401a      	ands	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	40da      	lsrs	r2, r3
 8002ede:	1e13      	subs	r3, r2, #0
 8002ee0:	d000      	beq.n	8002ee4 <HAL_GPIO_DeInit+0x180>
 8002ee2:	e747      	b.n	8002d74 <HAL_GPIO_DeInit+0x10>
  }
}
 8002ee4:	46c0      	nop			; (mov r8, r8)
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b006      	add	sp, #24
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40010000 	.word	0x40010000
 8002ef0:	48000400 	.word	0x48000400
 8002ef4:	48000800 	.word	0x48000800
 8002ef8:	48000c00 	.word	0x48000c00
 8002efc:	40010400 	.word	0x40010400

08002f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	0008      	movs	r0, r1
 8002f0a:	0011      	movs	r1, r2
 8002f0c:	1cbb      	adds	r3, r7, #2
 8002f0e:	1c02      	adds	r2, r0, #0
 8002f10:	801a      	strh	r2, [r3, #0]
 8002f12:	1c7b      	adds	r3, r7, #1
 8002f14:	1c0a      	adds	r2, r1, #0
 8002f16:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f18:	1c7b      	adds	r3, r7, #1
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d004      	beq.n	8002f2a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f20:	1cbb      	adds	r3, r7, #2
 8002f22:	881a      	ldrh	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f28:	e003      	b.n	8002f32 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f2a:	1cbb      	adds	r3, r7, #2
 8002f2c:	881a      	ldrh	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	46bd      	mov	sp, r7
 8002f36:	b002      	add	sp, #8
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b088      	sub	sp, #32
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e303      	b.n	8003556 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2201      	movs	r2, #1
 8002f54:	4013      	ands	r3, r2
 8002f56:	d100      	bne.n	8002f5a <HAL_RCC_OscConfig+0x1e>
 8002f58:	e08d      	b.n	8003076 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002f5a:	4bc4      	ldr	r3, [pc, #784]	; (800326c <HAL_RCC_OscConfig+0x330>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	220c      	movs	r2, #12
 8002f60:	4013      	ands	r3, r2
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d00e      	beq.n	8002f84 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f66:	4bc1      	ldr	r3, [pc, #772]	; (800326c <HAL_RCC_OscConfig+0x330>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	220c      	movs	r2, #12
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b08      	cmp	r3, #8
 8002f70:	d116      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x64>
 8002f72:	4bbe      	ldr	r3, [pc, #760]	; (800326c <HAL_RCC_OscConfig+0x330>)
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	2380      	movs	r3, #128	; 0x80
 8002f78:	025b      	lsls	r3, r3, #9
 8002f7a:	401a      	ands	r2, r3
 8002f7c:	2380      	movs	r3, #128	; 0x80
 8002f7e:	025b      	lsls	r3, r3, #9
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d10d      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f84:	4bb9      	ldr	r3, [pc, #740]	; (800326c <HAL_RCC_OscConfig+0x330>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	2380      	movs	r3, #128	; 0x80
 8002f8a:	029b      	lsls	r3, r3, #10
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d100      	bne.n	8002f92 <HAL_RCC_OscConfig+0x56>
 8002f90:	e070      	b.n	8003074 <HAL_RCC_OscConfig+0x138>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d000      	beq.n	8002f9c <HAL_RCC_OscConfig+0x60>
 8002f9a:	e06b      	b.n	8003074 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e2da      	b.n	8003556 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d107      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x7c>
 8002fa8:	4bb0      	ldr	r3, [pc, #704]	; (800326c <HAL_RCC_OscConfig+0x330>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	4baf      	ldr	r3, [pc, #700]	; (800326c <HAL_RCC_OscConfig+0x330>)
 8002fae:	2180      	movs	r1, #128	; 0x80
 8002fb0:	0249      	lsls	r1, r1, #9
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	e02f      	b.n	8003018 <HAL_RCC_OscConfig+0xdc>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10c      	bne.n	8002fda <HAL_RCC_OscConfig+0x9e>
 8002fc0:	4baa      	ldr	r3, [pc, #680]	; (800326c <HAL_RCC_OscConfig+0x330>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	4ba9      	ldr	r3, [pc, #676]	; (800326c <HAL_RCC_OscConfig+0x330>)
 8002fc6:	49aa      	ldr	r1, [pc, #680]	; (8003270 <HAL_RCC_OscConfig+0x334>)
 8002fc8:	400a      	ands	r2, r1
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	4ba7      	ldr	r3, [pc, #668]	; (800326c <HAL_RCC_OscConfig+0x330>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4ba6      	ldr	r3, [pc, #664]	; (800326c <HAL_RCC_OscConfig+0x330>)
 8002fd2:	49a8      	ldr	r1, [pc, #672]	; (8003274 <HAL_RCC_OscConfig+0x338>)
 8002fd4:	400a      	ands	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	e01e      	b.n	8003018 <HAL_RCC_OscConfig+0xdc>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b05      	cmp	r3, #5
 8002fe0:	d10e      	bne.n	8003000 <HAL_RCC_OscConfig+0xc4>
 8002fe2:	4ba2      	ldr	r3, [pc, #648]	; (800326c <HAL_RCC_OscConfig+0x330>)
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	4ba1      	ldr	r3, [pc, #644]	; (800326c <HAL_RCC_OscConfig+0x330>)
 8002fe8:	2180      	movs	r1, #128	; 0x80
 8002fea:	02c9      	lsls	r1, r1, #11
 8002fec:	430a      	orrs	r2, r1
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	4b9e      	ldr	r3, [pc, #632]	; (800326c <HAL_RCC_OscConfig+0x330>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	4b9d      	ldr	r3, [pc, #628]	; (800326c <HAL_RCC_OscConfig+0x330>)
 8002ff6:	2180      	movs	r1, #128	; 0x80
 8002ff8:	0249      	lsls	r1, r1, #9
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	e00b      	b.n	8003018 <HAL_RCC_OscConfig+0xdc>
 8003000:	4b9a      	ldr	r3, [pc, #616]	; (800326c <HAL_RCC_OscConfig+0x330>)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	4b99      	ldr	r3, [pc, #612]	; (800326c <HAL_RCC_OscConfig+0x330>)
 8003006:	499a      	ldr	r1, [pc, #616]	; (8003270 <HAL_RCC_OscConfig+0x334>)
 8003008:	400a      	ands	r2, r1
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	4b97      	ldr	r3, [pc, #604]	; (800326c <HAL_RCC_OscConfig+0x330>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	4b96      	ldr	r3, [pc, #600]	; (800326c <HAL_RCC_OscConfig+0x330>)
 8003012:	4998      	ldr	r1, [pc, #608]	; (8003274 <HAL_RCC_OscConfig+0x338>)
 8003014:	400a      	ands	r2, r1
 8003016:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d014      	beq.n	800304a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003020:	f7ff fa02 	bl	8002428 <HAL_GetTick>
 8003024:	0003      	movs	r3, r0
 8003026:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800302a:	f7ff f9fd 	bl	8002428 <HAL_GetTick>
 800302e:	0002      	movs	r2, r0
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b64      	cmp	r3, #100	; 0x64
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e28c      	b.n	8003556 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303c:	4b8b      	ldr	r3, [pc, #556]	; (800326c <HAL_RCC_OscConfig+0x330>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	2380      	movs	r3, #128	; 0x80
 8003042:	029b      	lsls	r3, r3, #10
 8003044:	4013      	ands	r3, r2
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0xee>
 8003048:	e015      	b.n	8003076 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304a:	f7ff f9ed 	bl	8002428 <HAL_GetTick>
 800304e:	0003      	movs	r3, r0
 8003050:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003054:	f7ff f9e8 	bl	8002428 <HAL_GetTick>
 8003058:	0002      	movs	r2, r0
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b64      	cmp	r3, #100	; 0x64
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e277      	b.n	8003556 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003066:	4b81      	ldr	r3, [pc, #516]	; (800326c <HAL_RCC_OscConfig+0x330>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	2380      	movs	r3, #128	; 0x80
 800306c:	029b      	lsls	r3, r3, #10
 800306e:	4013      	ands	r3, r2
 8003070:	d1f0      	bne.n	8003054 <HAL_RCC_OscConfig+0x118>
 8003072:	e000      	b.n	8003076 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003074:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2202      	movs	r2, #2
 800307c:	4013      	ands	r3, r2
 800307e:	d100      	bne.n	8003082 <HAL_RCC_OscConfig+0x146>
 8003080:	e069      	b.n	8003156 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003082:	4b7a      	ldr	r3, [pc, #488]	; (800326c <HAL_RCC_OscConfig+0x330>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	220c      	movs	r2, #12
 8003088:	4013      	ands	r3, r2
 800308a:	d00b      	beq.n	80030a4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800308c:	4b77      	ldr	r3, [pc, #476]	; (800326c <HAL_RCC_OscConfig+0x330>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	220c      	movs	r2, #12
 8003092:	4013      	ands	r3, r2
 8003094:	2b08      	cmp	r3, #8
 8003096:	d11c      	bne.n	80030d2 <HAL_RCC_OscConfig+0x196>
 8003098:	4b74      	ldr	r3, [pc, #464]	; (800326c <HAL_RCC_OscConfig+0x330>)
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	2380      	movs	r3, #128	; 0x80
 800309e:	025b      	lsls	r3, r3, #9
 80030a0:	4013      	ands	r3, r2
 80030a2:	d116      	bne.n	80030d2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030a4:	4b71      	ldr	r3, [pc, #452]	; (800326c <HAL_RCC_OscConfig+0x330>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2202      	movs	r2, #2
 80030aa:	4013      	ands	r3, r2
 80030ac:	d005      	beq.n	80030ba <HAL_RCC_OscConfig+0x17e>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d001      	beq.n	80030ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e24d      	b.n	8003556 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ba:	4b6c      	ldr	r3, [pc, #432]	; (800326c <HAL_RCC_OscConfig+0x330>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	22f8      	movs	r2, #248	; 0xf8
 80030c0:	4393      	bics	r3, r2
 80030c2:	0019      	movs	r1, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	00da      	lsls	r2, r3, #3
 80030ca:	4b68      	ldr	r3, [pc, #416]	; (800326c <HAL_RCC_OscConfig+0x330>)
 80030cc:	430a      	orrs	r2, r1
 80030ce:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030d0:	e041      	b.n	8003156 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d024      	beq.n	8003124 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030da:	4b64      	ldr	r3, [pc, #400]	; (800326c <HAL_RCC_OscConfig+0x330>)
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	4b63      	ldr	r3, [pc, #396]	; (800326c <HAL_RCC_OscConfig+0x330>)
 80030e0:	2101      	movs	r1, #1
 80030e2:	430a      	orrs	r2, r1
 80030e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e6:	f7ff f99f 	bl	8002428 <HAL_GetTick>
 80030ea:	0003      	movs	r3, r0
 80030ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030f0:	f7ff f99a 	bl	8002428 <HAL_GetTick>
 80030f4:	0002      	movs	r2, r0
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e229      	b.n	8003556 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003102:	4b5a      	ldr	r3, [pc, #360]	; (800326c <HAL_RCC_OscConfig+0x330>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2202      	movs	r2, #2
 8003108:	4013      	ands	r3, r2
 800310a:	d0f1      	beq.n	80030f0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800310c:	4b57      	ldr	r3, [pc, #348]	; (800326c <HAL_RCC_OscConfig+0x330>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	22f8      	movs	r2, #248	; 0xf8
 8003112:	4393      	bics	r3, r2
 8003114:	0019      	movs	r1, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	00da      	lsls	r2, r3, #3
 800311c:	4b53      	ldr	r3, [pc, #332]	; (800326c <HAL_RCC_OscConfig+0x330>)
 800311e:	430a      	orrs	r2, r1
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	e018      	b.n	8003156 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003124:	4b51      	ldr	r3, [pc, #324]	; (800326c <HAL_RCC_OscConfig+0x330>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	4b50      	ldr	r3, [pc, #320]	; (800326c <HAL_RCC_OscConfig+0x330>)
 800312a:	2101      	movs	r1, #1
 800312c:	438a      	bics	r2, r1
 800312e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003130:	f7ff f97a 	bl	8002428 <HAL_GetTick>
 8003134:	0003      	movs	r3, r0
 8003136:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800313a:	f7ff f975 	bl	8002428 <HAL_GetTick>
 800313e:	0002      	movs	r2, r0
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e204      	b.n	8003556 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314c:	4b47      	ldr	r3, [pc, #284]	; (800326c <HAL_RCC_OscConfig+0x330>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2202      	movs	r2, #2
 8003152:	4013      	ands	r3, r2
 8003154:	d1f1      	bne.n	800313a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2208      	movs	r2, #8
 800315c:	4013      	ands	r3, r2
 800315e:	d036      	beq.n	80031ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d019      	beq.n	800319c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003168:	4b40      	ldr	r3, [pc, #256]	; (800326c <HAL_RCC_OscConfig+0x330>)
 800316a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800316c:	4b3f      	ldr	r3, [pc, #252]	; (800326c <HAL_RCC_OscConfig+0x330>)
 800316e:	2101      	movs	r1, #1
 8003170:	430a      	orrs	r2, r1
 8003172:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003174:	f7ff f958 	bl	8002428 <HAL_GetTick>
 8003178:	0003      	movs	r3, r0
 800317a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800317e:	f7ff f953 	bl	8002428 <HAL_GetTick>
 8003182:	0002      	movs	r2, r0
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e1e2      	b.n	8003556 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003190:	4b36      	ldr	r3, [pc, #216]	; (800326c <HAL_RCC_OscConfig+0x330>)
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	2202      	movs	r2, #2
 8003196:	4013      	ands	r3, r2
 8003198:	d0f1      	beq.n	800317e <HAL_RCC_OscConfig+0x242>
 800319a:	e018      	b.n	80031ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800319c:	4b33      	ldr	r3, [pc, #204]	; (800326c <HAL_RCC_OscConfig+0x330>)
 800319e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031a0:	4b32      	ldr	r3, [pc, #200]	; (800326c <HAL_RCC_OscConfig+0x330>)
 80031a2:	2101      	movs	r1, #1
 80031a4:	438a      	bics	r2, r1
 80031a6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a8:	f7ff f93e 	bl	8002428 <HAL_GetTick>
 80031ac:	0003      	movs	r3, r0
 80031ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031b2:	f7ff f939 	bl	8002428 <HAL_GetTick>
 80031b6:	0002      	movs	r2, r0
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e1c8      	b.n	8003556 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c4:	4b29      	ldr	r3, [pc, #164]	; (800326c <HAL_RCC_OscConfig+0x330>)
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	2202      	movs	r2, #2
 80031ca:	4013      	ands	r3, r2
 80031cc:	d1f1      	bne.n	80031b2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2204      	movs	r2, #4
 80031d4:	4013      	ands	r3, r2
 80031d6:	d100      	bne.n	80031da <HAL_RCC_OscConfig+0x29e>
 80031d8:	e0b6      	b.n	8003348 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031da:	231f      	movs	r3, #31
 80031dc:	18fb      	adds	r3, r7, r3
 80031de:	2200      	movs	r2, #0
 80031e0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031e2:	4b22      	ldr	r3, [pc, #136]	; (800326c <HAL_RCC_OscConfig+0x330>)
 80031e4:	69da      	ldr	r2, [r3, #28]
 80031e6:	2380      	movs	r3, #128	; 0x80
 80031e8:	055b      	lsls	r3, r3, #21
 80031ea:	4013      	ands	r3, r2
 80031ec:	d111      	bne.n	8003212 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ee:	4b1f      	ldr	r3, [pc, #124]	; (800326c <HAL_RCC_OscConfig+0x330>)
 80031f0:	69da      	ldr	r2, [r3, #28]
 80031f2:	4b1e      	ldr	r3, [pc, #120]	; (800326c <HAL_RCC_OscConfig+0x330>)
 80031f4:	2180      	movs	r1, #128	; 0x80
 80031f6:	0549      	lsls	r1, r1, #21
 80031f8:	430a      	orrs	r2, r1
 80031fa:	61da      	str	r2, [r3, #28]
 80031fc:	4b1b      	ldr	r3, [pc, #108]	; (800326c <HAL_RCC_OscConfig+0x330>)
 80031fe:	69da      	ldr	r2, [r3, #28]
 8003200:	2380      	movs	r3, #128	; 0x80
 8003202:	055b      	lsls	r3, r3, #21
 8003204:	4013      	ands	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800320a:	231f      	movs	r3, #31
 800320c:	18fb      	adds	r3, r7, r3
 800320e:	2201      	movs	r2, #1
 8003210:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003212:	4b19      	ldr	r3, [pc, #100]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	2380      	movs	r3, #128	; 0x80
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	4013      	ands	r3, r2
 800321c:	d11a      	bne.n	8003254 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800321e:	4b16      	ldr	r3, [pc, #88]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	4b15      	ldr	r3, [pc, #84]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 8003224:	2180      	movs	r1, #128	; 0x80
 8003226:	0049      	lsls	r1, r1, #1
 8003228:	430a      	orrs	r2, r1
 800322a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800322c:	f7ff f8fc 	bl	8002428 <HAL_GetTick>
 8003230:	0003      	movs	r3, r0
 8003232:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003236:	f7ff f8f7 	bl	8002428 <HAL_GetTick>
 800323a:	0002      	movs	r2, r0
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b64      	cmp	r3, #100	; 0x64
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e186      	b.n	8003556 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003248:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	2380      	movs	r3, #128	; 0x80
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	4013      	ands	r3, r2
 8003252:	d0f0      	beq.n	8003236 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d10f      	bne.n	800327c <HAL_RCC_OscConfig+0x340>
 800325c:	4b03      	ldr	r3, [pc, #12]	; (800326c <HAL_RCC_OscConfig+0x330>)
 800325e:	6a1a      	ldr	r2, [r3, #32]
 8003260:	4b02      	ldr	r3, [pc, #8]	; (800326c <HAL_RCC_OscConfig+0x330>)
 8003262:	2101      	movs	r1, #1
 8003264:	430a      	orrs	r2, r1
 8003266:	621a      	str	r2, [r3, #32]
 8003268:	e036      	b.n	80032d8 <HAL_RCC_OscConfig+0x39c>
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	40021000 	.word	0x40021000
 8003270:	fffeffff 	.word	0xfffeffff
 8003274:	fffbffff 	.word	0xfffbffff
 8003278:	40007000 	.word	0x40007000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10c      	bne.n	800329e <HAL_RCC_OscConfig+0x362>
 8003284:	4bb6      	ldr	r3, [pc, #728]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 8003286:	6a1a      	ldr	r2, [r3, #32]
 8003288:	4bb5      	ldr	r3, [pc, #724]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 800328a:	2101      	movs	r1, #1
 800328c:	438a      	bics	r2, r1
 800328e:	621a      	str	r2, [r3, #32]
 8003290:	4bb3      	ldr	r3, [pc, #716]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 8003292:	6a1a      	ldr	r2, [r3, #32]
 8003294:	4bb2      	ldr	r3, [pc, #712]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 8003296:	2104      	movs	r1, #4
 8003298:	438a      	bics	r2, r1
 800329a:	621a      	str	r2, [r3, #32]
 800329c:	e01c      	b.n	80032d8 <HAL_RCC_OscConfig+0x39c>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b05      	cmp	r3, #5
 80032a4:	d10c      	bne.n	80032c0 <HAL_RCC_OscConfig+0x384>
 80032a6:	4bae      	ldr	r3, [pc, #696]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 80032a8:	6a1a      	ldr	r2, [r3, #32]
 80032aa:	4bad      	ldr	r3, [pc, #692]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 80032ac:	2104      	movs	r1, #4
 80032ae:	430a      	orrs	r2, r1
 80032b0:	621a      	str	r2, [r3, #32]
 80032b2:	4bab      	ldr	r3, [pc, #684]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 80032b4:	6a1a      	ldr	r2, [r3, #32]
 80032b6:	4baa      	ldr	r3, [pc, #680]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 80032b8:	2101      	movs	r1, #1
 80032ba:	430a      	orrs	r2, r1
 80032bc:	621a      	str	r2, [r3, #32]
 80032be:	e00b      	b.n	80032d8 <HAL_RCC_OscConfig+0x39c>
 80032c0:	4ba7      	ldr	r3, [pc, #668]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 80032c2:	6a1a      	ldr	r2, [r3, #32]
 80032c4:	4ba6      	ldr	r3, [pc, #664]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 80032c6:	2101      	movs	r1, #1
 80032c8:	438a      	bics	r2, r1
 80032ca:	621a      	str	r2, [r3, #32]
 80032cc:	4ba4      	ldr	r3, [pc, #656]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 80032ce:	6a1a      	ldr	r2, [r3, #32]
 80032d0:	4ba3      	ldr	r3, [pc, #652]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 80032d2:	2104      	movs	r1, #4
 80032d4:	438a      	bics	r2, r1
 80032d6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d014      	beq.n	800330a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e0:	f7ff f8a2 	bl	8002428 <HAL_GetTick>
 80032e4:	0003      	movs	r3, r0
 80032e6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e8:	e009      	b.n	80032fe <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ea:	f7ff f89d 	bl	8002428 <HAL_GetTick>
 80032ee:	0002      	movs	r2, r0
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	4a9b      	ldr	r2, [pc, #620]	; (8003564 <HAL_RCC_OscConfig+0x628>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e12b      	b.n	8003556 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fe:	4b98      	ldr	r3, [pc, #608]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	2202      	movs	r2, #2
 8003304:	4013      	ands	r3, r2
 8003306:	d0f0      	beq.n	80032ea <HAL_RCC_OscConfig+0x3ae>
 8003308:	e013      	b.n	8003332 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800330a:	f7ff f88d 	bl	8002428 <HAL_GetTick>
 800330e:	0003      	movs	r3, r0
 8003310:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003312:	e009      	b.n	8003328 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003314:	f7ff f888 	bl	8002428 <HAL_GetTick>
 8003318:	0002      	movs	r2, r0
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	4a91      	ldr	r2, [pc, #580]	; (8003564 <HAL_RCC_OscConfig+0x628>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e116      	b.n	8003556 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003328:	4b8d      	ldr	r3, [pc, #564]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	2202      	movs	r2, #2
 800332e:	4013      	ands	r3, r2
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003332:	231f      	movs	r3, #31
 8003334:	18fb      	adds	r3, r7, r3
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d105      	bne.n	8003348 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800333c:	4b88      	ldr	r3, [pc, #544]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 800333e:	69da      	ldr	r2, [r3, #28]
 8003340:	4b87      	ldr	r3, [pc, #540]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 8003342:	4989      	ldr	r1, [pc, #548]	; (8003568 <HAL_RCC_OscConfig+0x62c>)
 8003344:	400a      	ands	r2, r1
 8003346:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2210      	movs	r2, #16
 800334e:	4013      	ands	r3, r2
 8003350:	d063      	beq.n	800341a <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d12a      	bne.n	80033b0 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800335a:	4b81      	ldr	r3, [pc, #516]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 800335c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800335e:	4b80      	ldr	r3, [pc, #512]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 8003360:	2104      	movs	r1, #4
 8003362:	430a      	orrs	r2, r1
 8003364:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003366:	4b7e      	ldr	r3, [pc, #504]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 8003368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800336a:	4b7d      	ldr	r3, [pc, #500]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 800336c:	2101      	movs	r1, #1
 800336e:	430a      	orrs	r2, r1
 8003370:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003372:	f7ff f859 	bl	8002428 <HAL_GetTick>
 8003376:	0003      	movs	r3, r0
 8003378:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800337c:	f7ff f854 	bl	8002428 <HAL_GetTick>
 8003380:	0002      	movs	r2, r0
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e0e3      	b.n	8003556 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800338e:	4b74      	ldr	r3, [pc, #464]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 8003390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003392:	2202      	movs	r2, #2
 8003394:	4013      	ands	r3, r2
 8003396:	d0f1      	beq.n	800337c <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003398:	4b71      	ldr	r3, [pc, #452]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 800339a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339c:	22f8      	movs	r2, #248	; 0xf8
 800339e:	4393      	bics	r3, r2
 80033a0:	0019      	movs	r1, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	00da      	lsls	r2, r3, #3
 80033a8:	4b6d      	ldr	r3, [pc, #436]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 80033aa:	430a      	orrs	r2, r1
 80033ac:	635a      	str	r2, [r3, #52]	; 0x34
 80033ae:	e034      	b.n	800341a <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	3305      	adds	r3, #5
 80033b6:	d111      	bne.n	80033dc <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80033b8:	4b69      	ldr	r3, [pc, #420]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 80033ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033bc:	4b68      	ldr	r3, [pc, #416]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 80033be:	2104      	movs	r1, #4
 80033c0:	438a      	bics	r2, r1
 80033c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80033c4:	4b66      	ldr	r3, [pc, #408]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 80033c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c8:	22f8      	movs	r2, #248	; 0xf8
 80033ca:	4393      	bics	r3, r2
 80033cc:	0019      	movs	r1, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	00da      	lsls	r2, r3, #3
 80033d4:	4b62      	ldr	r3, [pc, #392]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 80033d6:	430a      	orrs	r2, r1
 80033d8:	635a      	str	r2, [r3, #52]	; 0x34
 80033da:	e01e      	b.n	800341a <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80033dc:	4b60      	ldr	r3, [pc, #384]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 80033de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033e0:	4b5f      	ldr	r3, [pc, #380]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 80033e2:	2104      	movs	r1, #4
 80033e4:	430a      	orrs	r2, r1
 80033e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80033e8:	4b5d      	ldr	r3, [pc, #372]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 80033ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ec:	4b5c      	ldr	r3, [pc, #368]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 80033ee:	2101      	movs	r1, #1
 80033f0:	438a      	bics	r2, r1
 80033f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f4:	f7ff f818 	bl	8002428 <HAL_GetTick>
 80033f8:	0003      	movs	r3, r0
 80033fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80033fe:	f7ff f813 	bl	8002428 <HAL_GetTick>
 8003402:	0002      	movs	r2, r0
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e0a2      	b.n	8003556 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003410:	4b53      	ldr	r3, [pc, #332]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 8003412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003414:	2202      	movs	r2, #2
 8003416:	4013      	ands	r3, r2
 8003418:	d1f1      	bne.n	80033fe <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d100      	bne.n	8003424 <HAL_RCC_OscConfig+0x4e8>
 8003422:	e097      	b.n	8003554 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003424:	4b4e      	ldr	r3, [pc, #312]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	220c      	movs	r2, #12
 800342a:	4013      	ands	r3, r2
 800342c:	2b08      	cmp	r3, #8
 800342e:	d100      	bne.n	8003432 <HAL_RCC_OscConfig+0x4f6>
 8003430:	e06b      	b.n	800350a <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d14c      	bne.n	80034d4 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343a:	4b49      	ldr	r3, [pc, #292]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	4b48      	ldr	r3, [pc, #288]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 8003440:	494a      	ldr	r1, [pc, #296]	; (800356c <HAL_RCC_OscConfig+0x630>)
 8003442:	400a      	ands	r2, r1
 8003444:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003446:	f7fe ffef 	bl	8002428 <HAL_GetTick>
 800344a:	0003      	movs	r3, r0
 800344c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003450:	f7fe ffea 	bl	8002428 <HAL_GetTick>
 8003454:	0002      	movs	r2, r0
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e079      	b.n	8003556 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003462:	4b3f      	ldr	r3, [pc, #252]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	2380      	movs	r3, #128	; 0x80
 8003468:	049b      	lsls	r3, r3, #18
 800346a:	4013      	ands	r3, r2
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800346e:	4b3c      	ldr	r3, [pc, #240]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 8003470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003472:	220f      	movs	r2, #15
 8003474:	4393      	bics	r3, r2
 8003476:	0019      	movs	r1, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800347c:	4b38      	ldr	r3, [pc, #224]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 800347e:	430a      	orrs	r2, r1
 8003480:	62da      	str	r2, [r3, #44]	; 0x2c
 8003482:	4b37      	ldr	r3, [pc, #220]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	4a3a      	ldr	r2, [pc, #232]	; (8003570 <HAL_RCC_OscConfig+0x634>)
 8003488:	4013      	ands	r3, r2
 800348a:	0019      	movs	r1, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	431a      	orrs	r2, r3
 8003496:	4b32      	ldr	r3, [pc, #200]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 8003498:	430a      	orrs	r2, r1
 800349a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800349c:	4b30      	ldr	r3, [pc, #192]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	4b2f      	ldr	r3, [pc, #188]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 80034a2:	2180      	movs	r1, #128	; 0x80
 80034a4:	0449      	lsls	r1, r1, #17
 80034a6:	430a      	orrs	r2, r1
 80034a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034aa:	f7fe ffbd 	bl	8002428 <HAL_GetTick>
 80034ae:	0003      	movs	r3, r0
 80034b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b4:	f7fe ffb8 	bl	8002428 <HAL_GetTick>
 80034b8:	0002      	movs	r2, r0
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e047      	b.n	8003556 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034c6:	4b26      	ldr	r3, [pc, #152]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	2380      	movs	r3, #128	; 0x80
 80034cc:	049b      	lsls	r3, r3, #18
 80034ce:	4013      	ands	r3, r2
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0x578>
 80034d2:	e03f      	b.n	8003554 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d4:	4b22      	ldr	r3, [pc, #136]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	4b21      	ldr	r3, [pc, #132]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 80034da:	4924      	ldr	r1, [pc, #144]	; (800356c <HAL_RCC_OscConfig+0x630>)
 80034dc:	400a      	ands	r2, r1
 80034de:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e0:	f7fe ffa2 	bl	8002428 <HAL_GetTick>
 80034e4:	0003      	movs	r3, r0
 80034e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ea:	f7fe ff9d 	bl	8002428 <HAL_GetTick>
 80034ee:	0002      	movs	r2, r0
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e02c      	b.n	8003556 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034fc:	4b18      	ldr	r3, [pc, #96]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	2380      	movs	r3, #128	; 0x80
 8003502:	049b      	lsls	r3, r3, #18
 8003504:	4013      	ands	r3, r2
 8003506:	d1f0      	bne.n	80034ea <HAL_RCC_OscConfig+0x5ae>
 8003508:	e024      	b.n	8003554 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d101      	bne.n	8003516 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e01f      	b.n	8003556 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003516:	4b12      	ldr	r3, [pc, #72]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800351c:	4b10      	ldr	r3, [pc, #64]	; (8003560 <HAL_RCC_OscConfig+0x624>)
 800351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003520:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	2380      	movs	r3, #128	; 0x80
 8003526:	025b      	lsls	r3, r3, #9
 8003528:	401a      	ands	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	429a      	cmp	r2, r3
 8003530:	d10e      	bne.n	8003550 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	220f      	movs	r2, #15
 8003536:	401a      	ands	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800353c:	429a      	cmp	r2, r3
 800353e:	d107      	bne.n	8003550 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	23f0      	movs	r3, #240	; 0xf0
 8003544:	039b      	lsls	r3, r3, #14
 8003546:	401a      	ands	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800354c:	429a      	cmp	r2, r3
 800354e:	d001      	beq.n	8003554 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e000      	b.n	8003556 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	0018      	movs	r0, r3
 8003558:	46bd      	mov	sp, r7
 800355a:	b008      	add	sp, #32
 800355c:	bd80      	pop	{r7, pc}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	40021000 	.word	0x40021000
 8003564:	00001388 	.word	0x00001388
 8003568:	efffffff 	.word	0xefffffff
 800356c:	feffffff 	.word	0xfeffffff
 8003570:	ffc2ffff 	.word	0xffc2ffff

08003574 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0b3      	b.n	80036f0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003588:	4b5b      	ldr	r3, [pc, #364]	; (80036f8 <HAL_RCC_ClockConfig+0x184>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2201      	movs	r2, #1
 800358e:	4013      	ands	r3, r2
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d911      	bls.n	80035ba <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003596:	4b58      	ldr	r3, [pc, #352]	; (80036f8 <HAL_RCC_ClockConfig+0x184>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2201      	movs	r2, #1
 800359c:	4393      	bics	r3, r2
 800359e:	0019      	movs	r1, r3
 80035a0:	4b55      	ldr	r3, [pc, #340]	; (80036f8 <HAL_RCC_ClockConfig+0x184>)
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a8:	4b53      	ldr	r3, [pc, #332]	; (80036f8 <HAL_RCC_ClockConfig+0x184>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2201      	movs	r2, #1
 80035ae:	4013      	ands	r3, r2
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d001      	beq.n	80035ba <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e09a      	b.n	80036f0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2202      	movs	r2, #2
 80035c0:	4013      	ands	r3, r2
 80035c2:	d015      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2204      	movs	r2, #4
 80035ca:	4013      	ands	r3, r2
 80035cc:	d006      	beq.n	80035dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80035ce:	4b4b      	ldr	r3, [pc, #300]	; (80036fc <HAL_RCC_ClockConfig+0x188>)
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	4b4a      	ldr	r3, [pc, #296]	; (80036fc <HAL_RCC_ClockConfig+0x188>)
 80035d4:	21e0      	movs	r1, #224	; 0xe0
 80035d6:	00c9      	lsls	r1, r1, #3
 80035d8:	430a      	orrs	r2, r1
 80035da:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035dc:	4b47      	ldr	r3, [pc, #284]	; (80036fc <HAL_RCC_ClockConfig+0x188>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	22f0      	movs	r2, #240	; 0xf0
 80035e2:	4393      	bics	r3, r2
 80035e4:	0019      	movs	r1, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	4b44      	ldr	r3, [pc, #272]	; (80036fc <HAL_RCC_ClockConfig+0x188>)
 80035ec:	430a      	orrs	r2, r1
 80035ee:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2201      	movs	r2, #1
 80035f6:	4013      	ands	r3, r2
 80035f8:	d040      	beq.n	800367c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d107      	bne.n	8003612 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003602:	4b3e      	ldr	r3, [pc, #248]	; (80036fc <HAL_RCC_ClockConfig+0x188>)
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	2380      	movs	r3, #128	; 0x80
 8003608:	029b      	lsls	r3, r3, #10
 800360a:	4013      	ands	r3, r2
 800360c:	d114      	bne.n	8003638 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e06e      	b.n	80036f0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b02      	cmp	r3, #2
 8003618:	d107      	bne.n	800362a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800361a:	4b38      	ldr	r3, [pc, #224]	; (80036fc <HAL_RCC_ClockConfig+0x188>)
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	2380      	movs	r3, #128	; 0x80
 8003620:	049b      	lsls	r3, r3, #18
 8003622:	4013      	ands	r3, r2
 8003624:	d108      	bne.n	8003638 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e062      	b.n	80036f0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362a:	4b34      	ldr	r3, [pc, #208]	; (80036fc <HAL_RCC_ClockConfig+0x188>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2202      	movs	r2, #2
 8003630:	4013      	ands	r3, r2
 8003632:	d101      	bne.n	8003638 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e05b      	b.n	80036f0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003638:	4b30      	ldr	r3, [pc, #192]	; (80036fc <HAL_RCC_ClockConfig+0x188>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2203      	movs	r2, #3
 800363e:	4393      	bics	r3, r2
 8003640:	0019      	movs	r1, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	4b2d      	ldr	r3, [pc, #180]	; (80036fc <HAL_RCC_ClockConfig+0x188>)
 8003648:	430a      	orrs	r2, r1
 800364a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800364c:	f7fe feec 	bl	8002428 <HAL_GetTick>
 8003650:	0003      	movs	r3, r0
 8003652:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003654:	e009      	b.n	800366a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003656:	f7fe fee7 	bl	8002428 <HAL_GetTick>
 800365a:	0002      	movs	r2, r0
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	4a27      	ldr	r2, [pc, #156]	; (8003700 <HAL_RCC_ClockConfig+0x18c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d901      	bls.n	800366a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e042      	b.n	80036f0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366a:	4b24      	ldr	r3, [pc, #144]	; (80036fc <HAL_RCC_ClockConfig+0x188>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	220c      	movs	r2, #12
 8003670:	401a      	ands	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	429a      	cmp	r2, r3
 800367a:	d1ec      	bne.n	8003656 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800367c:	4b1e      	ldr	r3, [pc, #120]	; (80036f8 <HAL_RCC_ClockConfig+0x184>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2201      	movs	r2, #1
 8003682:	4013      	ands	r3, r2
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d211      	bcs.n	80036ae <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368a:	4b1b      	ldr	r3, [pc, #108]	; (80036f8 <HAL_RCC_ClockConfig+0x184>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2201      	movs	r2, #1
 8003690:	4393      	bics	r3, r2
 8003692:	0019      	movs	r1, r3
 8003694:	4b18      	ldr	r3, [pc, #96]	; (80036f8 <HAL_RCC_ClockConfig+0x184>)
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800369c:	4b16      	ldr	r3, [pc, #88]	; (80036f8 <HAL_RCC_ClockConfig+0x184>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2201      	movs	r2, #1
 80036a2:	4013      	ands	r3, r2
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d001      	beq.n	80036ae <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e020      	b.n	80036f0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2204      	movs	r2, #4
 80036b4:	4013      	ands	r3, r2
 80036b6:	d009      	beq.n	80036cc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80036b8:	4b10      	ldr	r3, [pc, #64]	; (80036fc <HAL_RCC_ClockConfig+0x188>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	4a11      	ldr	r2, [pc, #68]	; (8003704 <HAL_RCC_ClockConfig+0x190>)
 80036be:	4013      	ands	r3, r2
 80036c0:	0019      	movs	r1, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	4b0d      	ldr	r3, [pc, #52]	; (80036fc <HAL_RCC_ClockConfig+0x188>)
 80036c8:	430a      	orrs	r2, r1
 80036ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036cc:	f000 f820 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 80036d0:	0001      	movs	r1, r0
 80036d2:	4b0a      	ldr	r3, [pc, #40]	; (80036fc <HAL_RCC_ClockConfig+0x188>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	091b      	lsrs	r3, r3, #4
 80036d8:	220f      	movs	r2, #15
 80036da:	4013      	ands	r3, r2
 80036dc:	4a0a      	ldr	r2, [pc, #40]	; (8003708 <HAL_RCC_ClockConfig+0x194>)
 80036de:	5cd3      	ldrb	r3, [r2, r3]
 80036e0:	000a      	movs	r2, r1
 80036e2:	40da      	lsrs	r2, r3
 80036e4:	4b09      	ldr	r3, [pc, #36]	; (800370c <HAL_RCC_ClockConfig+0x198>)
 80036e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80036e8:	2000      	movs	r0, #0
 80036ea:	f7fe fe57 	bl	800239c <HAL_InitTick>
  
  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	0018      	movs	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40022000 	.word	0x40022000
 80036fc:	40021000 	.word	0x40021000
 8003700:	00001388 	.word	0x00001388
 8003704:	fffff8ff 	.word	0xfffff8ff
 8003708:	08005ff0 	.word	0x08005ff0
 800370c:	20000004 	.word	0x20000004

08003710 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003710:	b590      	push	{r4, r7, lr}
 8003712:	b08f      	sub	sp, #60	; 0x3c
 8003714:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003716:	2314      	movs	r3, #20
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	4a2b      	ldr	r2, [pc, #172]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800371c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800371e:	c313      	stmia	r3!, {r0, r1, r4}
 8003720:	6812      	ldr	r2, [r2, #0]
 8003722:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003724:	1d3b      	adds	r3, r7, #4
 8003726:	4a29      	ldr	r2, [pc, #164]	; (80037cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003728:	ca13      	ldmia	r2!, {r0, r1, r4}
 800372a:	c313      	stmia	r3!, {r0, r1, r4}
 800372c:	6812      	ldr	r2, [r2, #0]
 800372e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003734:	2300      	movs	r3, #0
 8003736:	62bb      	str	r3, [r7, #40]	; 0x28
 8003738:	2300      	movs	r3, #0
 800373a:	637b      	str	r3, [r7, #52]	; 0x34
 800373c:	2300      	movs	r3, #0
 800373e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003744:	4b22      	ldr	r3, [pc, #136]	; (80037d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800374a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374c:	220c      	movs	r2, #12
 800374e:	4013      	ands	r3, r2
 8003750:	2b04      	cmp	r3, #4
 8003752:	d002      	beq.n	800375a <HAL_RCC_GetSysClockFreq+0x4a>
 8003754:	2b08      	cmp	r3, #8
 8003756:	d003      	beq.n	8003760 <HAL_RCC_GetSysClockFreq+0x50>
 8003758:	e02d      	b.n	80037b6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800375a:	4b1e      	ldr	r3, [pc, #120]	; (80037d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800375c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800375e:	e02d      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003762:	0c9b      	lsrs	r3, r3, #18
 8003764:	220f      	movs	r2, #15
 8003766:	4013      	ands	r3, r2
 8003768:	2214      	movs	r2, #20
 800376a:	18ba      	adds	r2, r7, r2
 800376c:	5cd3      	ldrb	r3, [r2, r3]
 800376e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003770:	4b17      	ldr	r3, [pc, #92]	; (80037d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	220f      	movs	r2, #15
 8003776:	4013      	ands	r3, r2
 8003778:	1d3a      	adds	r2, r7, #4
 800377a:	5cd3      	ldrb	r3, [r2, r3]
 800377c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800377e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	025b      	lsls	r3, r3, #9
 8003784:	4013      	ands	r3, r2
 8003786:	d009      	beq.n	800379c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003788:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800378a:	4812      	ldr	r0, [pc, #72]	; (80037d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800378c:	f7fc fcc4 	bl	8000118 <__udivsi3>
 8003790:	0003      	movs	r3, r0
 8003792:	001a      	movs	r2, r3
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	4353      	muls	r3, r2
 8003798:	637b      	str	r3, [r7, #52]	; 0x34
 800379a:	e009      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800379c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800379e:	000a      	movs	r2, r1
 80037a0:	0152      	lsls	r2, r2, #5
 80037a2:	1a52      	subs	r2, r2, r1
 80037a4:	0193      	lsls	r3, r2, #6
 80037a6:	1a9b      	subs	r3, r3, r2
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	185b      	adds	r3, r3, r1
 80037ac:	021b      	lsls	r3, r3, #8
 80037ae:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80037b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037b4:	e002      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037b6:	4b07      	ldr	r3, [pc, #28]	; (80037d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037b8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037ba:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80037bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80037be:	0018      	movs	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b00f      	add	sp, #60	; 0x3c
 80037c4:	bd90      	pop	{r4, r7, pc}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	08005fd0 	.word	0x08005fd0
 80037cc:	08005fe0 	.word	0x08005fe0
 80037d0:	40021000 	.word	0x40021000
 80037d4:	007a1200 	.word	0x007a1200

080037d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037dc:	4b02      	ldr	r3, [pc, #8]	; (80037e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80037de:	681b      	ldr	r3, [r3, #0]
}
 80037e0:	0018      	movs	r0, r3
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	20000004 	.word	0x20000004

080037ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80037f0:	f7ff fff2 	bl	80037d8 <HAL_RCC_GetHCLKFreq>
 80037f4:	0001      	movs	r1, r0
 80037f6:	4b06      	ldr	r3, [pc, #24]	; (8003810 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	0a1b      	lsrs	r3, r3, #8
 80037fc:	2207      	movs	r2, #7
 80037fe:	4013      	ands	r3, r2
 8003800:	4a04      	ldr	r2, [pc, #16]	; (8003814 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003802:	5cd3      	ldrb	r3, [r2, r3]
 8003804:	40d9      	lsrs	r1, r3
 8003806:	000b      	movs	r3, r1
}    
 8003808:	0018      	movs	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	40021000 	.word	0x40021000
 8003814:	08006000 	.word	0x08006000

08003818 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003820:	2300      	movs	r3, #0
 8003822:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	2380      	movs	r3, #128	; 0x80
 800382e:	025b      	lsls	r3, r3, #9
 8003830:	4013      	ands	r3, r2
 8003832:	d100      	bne.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003834:	e08f      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003836:	2317      	movs	r3, #23
 8003838:	18fb      	adds	r3, r7, r3
 800383a:	2200      	movs	r2, #0
 800383c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800383e:	4b57      	ldr	r3, [pc, #348]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003840:	69da      	ldr	r2, [r3, #28]
 8003842:	2380      	movs	r3, #128	; 0x80
 8003844:	055b      	lsls	r3, r3, #21
 8003846:	4013      	ands	r3, r2
 8003848:	d111      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800384a:	4b54      	ldr	r3, [pc, #336]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800384c:	69da      	ldr	r2, [r3, #28]
 800384e:	4b53      	ldr	r3, [pc, #332]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003850:	2180      	movs	r1, #128	; 0x80
 8003852:	0549      	lsls	r1, r1, #21
 8003854:	430a      	orrs	r2, r1
 8003856:	61da      	str	r2, [r3, #28]
 8003858:	4b50      	ldr	r3, [pc, #320]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800385a:	69da      	ldr	r2, [r3, #28]
 800385c:	2380      	movs	r3, #128	; 0x80
 800385e:	055b      	lsls	r3, r3, #21
 8003860:	4013      	ands	r3, r2
 8003862:	60bb      	str	r3, [r7, #8]
 8003864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003866:	2317      	movs	r3, #23
 8003868:	18fb      	adds	r3, r7, r3
 800386a:	2201      	movs	r2, #1
 800386c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386e:	4b4c      	ldr	r3, [pc, #304]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	2380      	movs	r3, #128	; 0x80
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	4013      	ands	r3, r2
 8003878:	d11a      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800387a:	4b49      	ldr	r3, [pc, #292]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	4b48      	ldr	r3, [pc, #288]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003880:	2180      	movs	r1, #128	; 0x80
 8003882:	0049      	lsls	r1, r1, #1
 8003884:	430a      	orrs	r2, r1
 8003886:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003888:	f7fe fdce 	bl	8002428 <HAL_GetTick>
 800388c:	0003      	movs	r3, r0
 800388e:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003890:	e008      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003892:	f7fe fdc9 	bl	8002428 <HAL_GetTick>
 8003896:	0002      	movs	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b64      	cmp	r3, #100	; 0x64
 800389e:	d901      	bls.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e077      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a4:	4b3e      	ldr	r3, [pc, #248]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	2380      	movs	r3, #128	; 0x80
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	4013      	ands	r3, r2
 80038ae:	d0f0      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038b0:	4b3a      	ldr	r3, [pc, #232]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038b2:	6a1a      	ldr	r2, [r3, #32]
 80038b4:	23c0      	movs	r3, #192	; 0xc0
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4013      	ands	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d034      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x114>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	23c0      	movs	r3, #192	; 0xc0
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4013      	ands	r3, r2
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d02c      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038d2:	4b32      	ldr	r3, [pc, #200]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	4a33      	ldr	r2, [pc, #204]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80038d8:	4013      	ands	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038dc:	4b2f      	ldr	r3, [pc, #188]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038de:	6a1a      	ldr	r2, [r3, #32]
 80038e0:	4b2e      	ldr	r3, [pc, #184]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038e2:	2180      	movs	r1, #128	; 0x80
 80038e4:	0249      	lsls	r1, r1, #9
 80038e6:	430a      	orrs	r2, r1
 80038e8:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038ea:	4b2c      	ldr	r3, [pc, #176]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038ec:	6a1a      	ldr	r2, [r3, #32]
 80038ee:	4b2b      	ldr	r3, [pc, #172]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038f0:	492d      	ldr	r1, [pc, #180]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80038f2:	400a      	ands	r2, r1
 80038f4:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038f6:	4b29      	ldr	r3, [pc, #164]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2201      	movs	r2, #1
 8003900:	4013      	ands	r3, r2
 8003902:	d013      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003904:	f7fe fd90 	bl	8002428 <HAL_GetTick>
 8003908:	0003      	movs	r3, r0
 800390a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800390c:	e009      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800390e:	f7fe fd8b 	bl	8002428 <HAL_GetTick>
 8003912:	0002      	movs	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	4a24      	ldr	r2, [pc, #144]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d901      	bls.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e038      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003922:	4b1e      	ldr	r3, [pc, #120]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	2202      	movs	r2, #2
 8003928:	4013      	ands	r3, r2
 800392a:	d0f0      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800392c:	4b1b      	ldr	r3, [pc, #108]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	4a1c      	ldr	r2, [pc, #112]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003932:	4013      	ands	r3, r2
 8003934:	0019      	movs	r1, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	4b18      	ldr	r3, [pc, #96]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800393c:	430a      	orrs	r2, r1
 800393e:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003940:	2317      	movs	r3, #23
 8003942:	18fb      	adds	r3, r7, r3
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d105      	bne.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800394a:	4b14      	ldr	r3, [pc, #80]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800394c:	69da      	ldr	r2, [r3, #28]
 800394e:	4b13      	ldr	r3, [pc, #76]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003950:	4917      	ldr	r1, [pc, #92]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003952:	400a      	ands	r2, r1
 8003954:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2201      	movs	r2, #1
 800395c:	4013      	ands	r3, r2
 800395e:	d009      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003960:	4b0e      	ldr	r3, [pc, #56]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003964:	2203      	movs	r2, #3
 8003966:	4393      	bics	r3, r2
 8003968:	0019      	movs	r1, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	4b0b      	ldr	r3, [pc, #44]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003970:	430a      	orrs	r2, r1
 8003972:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2220      	movs	r2, #32
 800397a:	4013      	ands	r3, r2
 800397c:	d009      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800397e:	4b07      	ldr	r3, [pc, #28]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	2210      	movs	r2, #16
 8003984:	4393      	bics	r3, r2
 8003986:	0019      	movs	r1, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	4b03      	ldr	r3, [pc, #12]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800398e:	430a      	orrs	r2, r1
 8003990:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	0018      	movs	r0, r3
 8003996:	46bd      	mov	sp, r7
 8003998:	b006      	add	sp, #24
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40021000 	.word	0x40021000
 80039a0:	40007000 	.word	0x40007000
 80039a4:	fffffcff 	.word	0xfffffcff
 80039a8:	fffeffff 	.word	0xfffeffff
 80039ac:	00001388 	.word	0x00001388
 80039b0:	efffffff 	.word	0xefffffff

080039b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e044      	b.n	8003a50 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d107      	bne.n	80039de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2270      	movs	r2, #112	; 0x70
 80039d2:	2100      	movs	r1, #0
 80039d4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	0018      	movs	r0, r3
 80039da:	f7fe fad5 	bl	8001f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2224      	movs	r2, #36	; 0x24
 80039e2:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2101      	movs	r1, #1
 80039f0:	438a      	bics	r2, r1
 80039f2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	0018      	movs	r0, r3
 80039f8:	f000 fa18 	bl	8003e2c <UART_SetConfig>
 80039fc:	0003      	movs	r3, r0
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e024      	b.n	8003a50 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	0018      	movs	r0, r3
 8003a12:	f000 fb91 	bl	8004138 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	490d      	ldr	r1, [pc, #52]	; (8003a58 <HAL_UART_Init+0xa4>)
 8003a22:	400a      	ands	r2, r1
 8003a24:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2108      	movs	r1, #8
 8003a32:	438a      	bics	r2, r1
 8003a34:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2101      	movs	r1, #1
 8003a42:	430a      	orrs	r2, r1
 8003a44:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	0018      	movs	r0, r3
 8003a4a:	f000 fc29 	bl	80042a0 <UART_CheckIdleState>
 8003a4e:	0003      	movs	r3, r0
}
 8003a50:	0018      	movs	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	b002      	add	sp, #8
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	fffff7ff 	.word	0xfffff7ff

08003a5c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e028      	b.n	8003ac0 <HAL_UART_DeInit+0x64>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2224      	movs	r2, #36	; 0x24
 8003a72:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2101      	movs	r1, #1
 8003a80:	438a      	bics	r2, r1
 8003a82:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2200      	movs	r2, #0
 8003a92:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	f7fe fb4e 	bl	8002140 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2270      	movs	r2, #112	; 0x70
 8003aba:	2100      	movs	r1, #0
 8003abc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b002      	add	sp, #8
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b08a      	sub	sp, #40	; 0x28
 8003acc:	af02      	add	r7, sp, #8
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	603b      	str	r3, [r7, #0]
 8003ad4:	1dbb      	adds	r3, r7, #6
 8003ad6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003adc:	2b20      	cmp	r3, #32
 8003ade:	d000      	beq.n	8003ae2 <HAL_UART_Transmit+0x1a>
 8003ae0:	e095      	b.n	8003c0e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_UART_Transmit+0x28>
 8003ae8:	1dbb      	adds	r3, r7, #6
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d101      	bne.n	8003af4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e08d      	b.n	8003c10 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	2380      	movs	r3, #128	; 0x80
 8003afa:	015b      	lsls	r3, r3, #5
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d109      	bne.n	8003b14 <HAL_UART_Transmit+0x4c>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d105      	bne.n	8003b14 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	d001      	beq.n	8003b14 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e07d      	b.n	8003c10 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2270      	movs	r2, #112	; 0x70
 8003b18:	5c9b      	ldrb	r3, [r3, r2]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d101      	bne.n	8003b22 <HAL_UART_Transmit+0x5a>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e076      	b.n	8003c10 <HAL_UART_Transmit+0x148>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2270      	movs	r2, #112	; 0x70
 8003b26:	2101      	movs	r1, #1
 8003b28:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2221      	movs	r2, #33	; 0x21
 8003b34:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003b36:	f7fe fc77 	bl	8002428 <HAL_GetTick>
 8003b3a:	0003      	movs	r3, r0
 8003b3c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	1dba      	adds	r2, r7, #6
 8003b42:	2150      	movs	r1, #80	; 0x50
 8003b44:	8812      	ldrh	r2, [r2, #0]
 8003b46:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	1dba      	adds	r2, r7, #6
 8003b4c:	2152      	movs	r1, #82	; 0x52
 8003b4e:	8812      	ldrh	r2, [r2, #0]
 8003b50:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	2380      	movs	r3, #128	; 0x80
 8003b58:	015b      	lsls	r3, r3, #5
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d108      	bne.n	8003b70 <HAL_UART_Transmit+0xa8>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d104      	bne.n	8003b70 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	61bb      	str	r3, [r7, #24]
 8003b6e:	e003      	b.n	8003b78 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b74:	2300      	movs	r3, #0
 8003b76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b78:	e02d      	b.n	8003bd6 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	0013      	movs	r3, r2
 8003b84:	2200      	movs	r2, #0
 8003b86:	2180      	movs	r1, #128	; 0x80
 8003b88:	f000 fbd0 	bl	800432c <UART_WaitOnFlagUntilTimeout>
 8003b8c:	1e03      	subs	r3, r0, #0
 8003b8e:	d001      	beq.n	8003b94 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e03d      	b.n	8003c10 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10b      	bne.n	8003bb2 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	881a      	ldrh	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	05d2      	lsls	r2, r2, #23
 8003ba4:	0dd2      	lsrs	r2, r2, #23
 8003ba6:	b292      	uxth	r2, r2
 8003ba8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	3302      	adds	r3, #2
 8003bae:	61bb      	str	r3, [r7, #24]
 8003bb0:	e008      	b.n	8003bc4 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	781a      	ldrb	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	b292      	uxth	r2, r2
 8003bbc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2252      	movs	r2, #82	; 0x52
 8003bc8:	5a9b      	ldrh	r3, [r3, r2]
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	b299      	uxth	r1, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2252      	movs	r2, #82	; 0x52
 8003bd4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2252      	movs	r2, #82	; 0x52
 8003bda:	5a9b      	ldrh	r3, [r3, r2]
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1cb      	bne.n	8003b7a <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	0013      	movs	r3, r2
 8003bec:	2200      	movs	r2, #0
 8003bee:	2140      	movs	r1, #64	; 0x40
 8003bf0:	f000 fb9c 	bl	800432c <UART_WaitOnFlagUntilTimeout>
 8003bf4:	1e03      	subs	r3, r0, #0
 8003bf6:	d001      	beq.n	8003bfc <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e009      	b.n	8003c10 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2270      	movs	r2, #112	; 0x70
 8003c06:	2100      	movs	r1, #0
 8003c08:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	e000      	b.n	8003c10 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8003c0e:	2302      	movs	r3, #2
  }
}
 8003c10:	0018      	movs	r0, r3
 8003c12:	46bd      	mov	sp, r7
 8003c14:	b008      	add	sp, #32
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	1dbb      	adds	r3, r7, #6
 8003c24:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c2a:	2b20      	cmp	r3, #32
 8003c2c:	d000      	beq.n	8003c30 <HAL_UART_Receive_DMA+0x18>
 8003c2e:	e07f      	b.n	8003d30 <HAL_UART_Receive_DMA+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_UART_Receive_DMA+0x26>
 8003c36:	1dbb      	adds	r3, r7, #6
 8003c38:	881b      	ldrh	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e077      	b.n	8003d32 <HAL_UART_Receive_DMA+0x11a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	2380      	movs	r3, #128	; 0x80
 8003c48:	015b      	lsls	r3, r3, #5
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d109      	bne.n	8003c62 <HAL_UART_Receive_DMA+0x4a>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d105      	bne.n	8003c62 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d001      	beq.n	8003c62 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e067      	b.n	8003d32 <HAL_UART_Receive_DMA+0x11a>
      }
    }

    __HAL_LOCK(huart);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2270      	movs	r2, #112	; 0x70
 8003c66:	5c9b      	ldrb	r3, [r3, r2]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d101      	bne.n	8003c70 <HAL_UART_Receive_DMA+0x58>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	e060      	b.n	8003d32 <HAL_UART_Receive_DMA+0x11a>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2270      	movs	r2, #112	; 0x70
 8003c74:	2101      	movs	r1, #1
 8003c76:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	1dba      	adds	r2, r7, #6
 8003c82:	2158      	movs	r1, #88	; 0x58
 8003c84:	8812      	ldrh	r2, [r2, #0]
 8003c86:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2222      	movs	r2, #34	; 0x22
 8003c92:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d02a      	beq.n	8003cf2 <HAL_UART_Receive_DMA+0xda>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ca0:	4a26      	ldr	r2, [pc, #152]	; (8003d3c <HAL_UART_Receive_DMA+0x124>)
 8003ca2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ca8:	4a25      	ldr	r2, [pc, #148]	; (8003d40 <HAL_UART_Receive_DMA+0x128>)
 8003caa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cb0:	4a24      	ldr	r2, [pc, #144]	; (8003d44 <HAL_UART_Receive_DMA+0x12c>)
 8003cb2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cb8:	2200      	movs	r2, #0
 8003cba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	3324      	adds	r3, #36	; 0x24
 8003cc6:	0019      	movs	r1, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ccc:	001a      	movs	r2, r3
 8003cce:	1dbb      	adds	r3, r7, #6
 8003cd0:	881b      	ldrh	r3, [r3, #0]
 8003cd2:	f7fe fd44 	bl	800275e <HAL_DMA_Start_IT>
 8003cd6:	1e03      	subs	r3, r0, #0
 8003cd8:	d00b      	beq.n	8003cf2 <HAL_UART_Receive_DMA+0xda>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2210      	movs	r2, #16
 8003cde:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2270      	movs	r2, #112	; 0x70
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2220      	movs	r2, #32
 8003cec:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e01f      	b.n	8003d32 <HAL_UART_Receive_DMA+0x11a>
      }
    }
    __HAL_UNLOCK(huart);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2270      	movs	r2, #112	; 0x70
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2180      	movs	r1, #128	; 0x80
 8003d06:	0049      	lsls	r1, r1, #1
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2101      	movs	r1, #1
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2140      	movs	r1, #64	; 0x40
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	e000      	b.n	8003d32 <HAL_UART_Receive_DMA+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003d30:	2302      	movs	r3, #2
  }
}
 8003d32:	0018      	movs	r0, r3
 8003d34:	46bd      	mov	sp, r7
 8003d36:	b004      	add	sp, #16
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	08004491 	.word	0x08004491
 8003d40:	080044f9 	.word	0x080044f9
 8003d44:	08004517 	.word	0x08004517

08003d48 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4927      	ldr	r1, [pc, #156]	; (8003df8 <HAL_UART_AbortReceive+0xb0>)
 8003d5c:	400a      	ands	r2, r1
 8003d5e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	438a      	bics	r2, r1
 8003d6e:	609a      	str	r2, [r3, #8]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2240      	movs	r2, #64	; 0x40
 8003d78:	4013      	ands	r3, r2
 8003d7a:	2b40      	cmp	r3, #64	; 0x40
 8003d7c:	d123      	bne.n	8003dc6 <HAL_UART_AbortReceive+0x7e>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2140      	movs	r1, #64	; 0x40
 8003d8a:	438a      	bics	r2, r1
 8003d8c:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d017      	beq.n	8003dc6 <HAL_UART_AbortReceive+0x7e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003da2:	0018      	movs	r0, r3
 8003da4:	f7fe fd41 	bl	800282a <HAL_DMA_Abort>
 8003da8:	1e03      	subs	r3, r0, #0
 8003daa:	d00c      	beq.n	8003dc6 <HAL_UART_AbortReceive+0x7e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003db0:	0018      	movs	r0, r3
 8003db2:	f7fe fe14 	bl	80029de <HAL_DMA_GetError>
 8003db6:	0003      	movs	r3, r0
 8003db8:	2b20      	cmp	r3, #32
 8003dba:	d104      	bne.n	8003dc6 <HAL_UART_AbortReceive+0x7e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2210      	movs	r2, #16
 8003dc0:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e013      	b.n	8003dee <HAL_UART_AbortReceive+0xa6>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	225a      	movs	r2, #90	; 0x5a
 8003dca:	2100      	movs	r1, #0
 8003dcc:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	220f      	movs	r2, #15
 8003dd4:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	699a      	ldr	r2, [r3, #24]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2108      	movs	r1, #8
 8003de2:	430a      	orrs	r2, r1
 8003de4:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2220      	movs	r2, #32
 8003dea:	679a      	str	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	0018      	movs	r0, r3
 8003df0:	46bd      	mov	sp, r7
 8003df2:	b002      	add	sp, #8
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	46c0      	nop			; (mov r8, r8)
 8003df8:	fffffedf 	.word	0xfffffedf

08003dfc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003e04:	46c0      	nop			; (mov r8, r8)
 8003e06:	46bd      	mov	sp, r7
 8003e08:	b002      	add	sp, #8
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003e14:	46c0      	nop			; (mov r8, r8)
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b002      	add	sp, #8
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003e24:	46c0      	nop			; (mov r8, r8)
 8003e26:	46bd      	mov	sp, r7
 8003e28:	b002      	add	sp, #8
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b088      	sub	sp, #32
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e38:	2317      	movs	r3, #23
 8003e3a:	18fb      	adds	r3, r7, r3
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4aad      	ldr	r2, [pc, #692]	; (8004114 <UART_SetConfig+0x2e8>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	0019      	movs	r1, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	4aa8      	ldr	r2, [pc, #672]	; (8004118 <UART_SetConfig+0x2ec>)
 8003e76:	4013      	ands	r3, r2
 8003e78:	0019      	movs	r1, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	4a9f      	ldr	r2, [pc, #636]	; (800411c <UART_SetConfig+0x2f0>)
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	0019      	movs	r1, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a9b      	ldr	r2, [pc, #620]	; (8004120 <UART_SetConfig+0x2f4>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d125      	bne.n	8003f02 <UART_SetConfig+0xd6>
 8003eb6:	4b9b      	ldr	r3, [pc, #620]	; (8004124 <UART_SetConfig+0x2f8>)
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eba:	2203      	movs	r2, #3
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d00f      	beq.n	8003ee2 <UART_SetConfig+0xb6>
 8003ec2:	d304      	bcc.n	8003ece <UART_SetConfig+0xa2>
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d011      	beq.n	8003eec <UART_SetConfig+0xc0>
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d005      	beq.n	8003ed8 <UART_SetConfig+0xac>
 8003ecc:	e013      	b.n	8003ef6 <UART_SetConfig+0xca>
 8003ece:	231f      	movs	r3, #31
 8003ed0:	18fb      	adds	r3, r7, r3
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	701a      	strb	r2, [r3, #0]
 8003ed6:	e022      	b.n	8003f1e <UART_SetConfig+0xf2>
 8003ed8:	231f      	movs	r3, #31
 8003eda:	18fb      	adds	r3, r7, r3
 8003edc:	2202      	movs	r2, #2
 8003ede:	701a      	strb	r2, [r3, #0]
 8003ee0:	e01d      	b.n	8003f1e <UART_SetConfig+0xf2>
 8003ee2:	231f      	movs	r3, #31
 8003ee4:	18fb      	adds	r3, r7, r3
 8003ee6:	2204      	movs	r2, #4
 8003ee8:	701a      	strb	r2, [r3, #0]
 8003eea:	e018      	b.n	8003f1e <UART_SetConfig+0xf2>
 8003eec:	231f      	movs	r3, #31
 8003eee:	18fb      	adds	r3, r7, r3
 8003ef0:	2208      	movs	r2, #8
 8003ef2:	701a      	strb	r2, [r3, #0]
 8003ef4:	e013      	b.n	8003f1e <UART_SetConfig+0xf2>
 8003ef6:	231f      	movs	r3, #31
 8003ef8:	18fb      	adds	r3, r7, r3
 8003efa:	2210      	movs	r2, #16
 8003efc:	701a      	strb	r2, [r3, #0]
 8003efe:	46c0      	nop			; (mov r8, r8)
 8003f00:	e00d      	b.n	8003f1e <UART_SetConfig+0xf2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a88      	ldr	r2, [pc, #544]	; (8004128 <UART_SetConfig+0x2fc>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d104      	bne.n	8003f16 <UART_SetConfig+0xea>
 8003f0c:	231f      	movs	r3, #31
 8003f0e:	18fb      	adds	r3, r7, r3
 8003f10:	2200      	movs	r2, #0
 8003f12:	701a      	strb	r2, [r3, #0]
 8003f14:	e003      	b.n	8003f1e <UART_SetConfig+0xf2>
 8003f16:	231f      	movs	r3, #31
 8003f18:	18fb      	adds	r3, r7, r3
 8003f1a:	2210      	movs	r2, #16
 8003f1c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69da      	ldr	r2, [r3, #28]
 8003f22:	2380      	movs	r3, #128	; 0x80
 8003f24:	021b      	lsls	r3, r3, #8
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d000      	beq.n	8003f2c <UART_SetConfig+0x100>
 8003f2a:	e07d      	b.n	8004028 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8003f2c:	231f      	movs	r3, #31
 8003f2e:	18fb      	adds	r3, r7, r3
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d01c      	beq.n	8003f70 <UART_SetConfig+0x144>
 8003f36:	dc02      	bgt.n	8003f3e <UART_SetConfig+0x112>
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d005      	beq.n	8003f48 <UART_SetConfig+0x11c>
 8003f3c:	e04b      	b.n	8003fd6 <UART_SetConfig+0x1aa>
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d025      	beq.n	8003f8e <UART_SetConfig+0x162>
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d037      	beq.n	8003fb6 <UART_SetConfig+0x18a>
 8003f46:	e046      	b.n	8003fd6 <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f48:	f7ff fc50 	bl	80037ec <HAL_RCC_GetPCLK1Freq>
 8003f4c:	0003      	movs	r3, r0
 8003f4e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	005a      	lsls	r2, r3, #1
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	085b      	lsrs	r3, r3, #1
 8003f5a:	18d2      	adds	r2, r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	0019      	movs	r1, r3
 8003f62:	0010      	movs	r0, r2
 8003f64:	f7fc f8d8 	bl	8000118 <__udivsi3>
 8003f68:	0003      	movs	r3, r0
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	61bb      	str	r3, [r7, #24]
        break;
 8003f6e:	e037      	b.n	8003fe0 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	085b      	lsrs	r3, r3, #1
 8003f76:	4a6d      	ldr	r2, [pc, #436]	; (800412c <UART_SetConfig+0x300>)
 8003f78:	189a      	adds	r2, r3, r2
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	0019      	movs	r1, r3
 8003f80:	0010      	movs	r0, r2
 8003f82:	f7fc f8c9 	bl	8000118 <__udivsi3>
 8003f86:	0003      	movs	r3, r0
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	61bb      	str	r3, [r7, #24]
        break;
 8003f8c:	e028      	b.n	8003fe0 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f8e:	f7ff fbbf 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 8003f92:	0003      	movs	r3, r0
 8003f94:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	005a      	lsls	r2, r3, #1
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	085b      	lsrs	r3, r3, #1
 8003fa0:	18d2      	adds	r2, r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	0019      	movs	r1, r3
 8003fa8:	0010      	movs	r0, r2
 8003faa:	f7fc f8b5 	bl	8000118 <__udivsi3>
 8003fae:	0003      	movs	r3, r0
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	61bb      	str	r3, [r7, #24]
        break;
 8003fb4:	e014      	b.n	8003fe0 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	085b      	lsrs	r3, r3, #1
 8003fbc:	2280      	movs	r2, #128	; 0x80
 8003fbe:	0252      	lsls	r2, r2, #9
 8003fc0:	189a      	adds	r2, r3, r2
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	0019      	movs	r1, r3
 8003fc8:	0010      	movs	r0, r2
 8003fca:	f7fc f8a5 	bl	8000118 <__udivsi3>
 8003fce:	0003      	movs	r3, r0
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	61bb      	str	r3, [r7, #24]
        break;
 8003fd4:	e004      	b.n	8003fe0 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8003fd6:	2317      	movs	r3, #23
 8003fd8:	18fb      	adds	r3, r7, r3
 8003fda:	2201      	movs	r2, #1
 8003fdc:	701a      	strb	r2, [r3, #0]
        break;
 8003fde:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	2b0f      	cmp	r3, #15
 8003fe4:	d91b      	bls.n	800401e <UART_SetConfig+0x1f2>
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	4a51      	ldr	r2, [pc, #324]	; (8004130 <UART_SetConfig+0x304>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d817      	bhi.n	800401e <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	200a      	movs	r0, #10
 8003ff4:	183b      	adds	r3, r7, r0
 8003ff6:	210f      	movs	r1, #15
 8003ff8:	438a      	bics	r2, r1
 8003ffa:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	085b      	lsrs	r3, r3, #1
 8004000:	b29b      	uxth	r3, r3
 8004002:	2207      	movs	r2, #7
 8004004:	4013      	ands	r3, r2
 8004006:	b299      	uxth	r1, r3
 8004008:	183b      	adds	r3, r7, r0
 800400a:	183a      	adds	r2, r7, r0
 800400c:	8812      	ldrh	r2, [r2, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	183a      	adds	r2, r7, r0
 8004018:	8812      	ldrh	r2, [r2, #0]
 800401a:	60da      	str	r2, [r3, #12]
 800401c:	e06c      	b.n	80040f8 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 800401e:	2317      	movs	r3, #23
 8004020:	18fb      	adds	r3, r7, r3
 8004022:	2201      	movs	r2, #1
 8004024:	701a      	strb	r2, [r3, #0]
 8004026:	e067      	b.n	80040f8 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8004028:	231f      	movs	r3, #31
 800402a:	18fb      	adds	r3, r7, r3
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	2b02      	cmp	r3, #2
 8004030:	d01b      	beq.n	800406a <UART_SetConfig+0x23e>
 8004032:	dc02      	bgt.n	800403a <UART_SetConfig+0x20e>
 8004034:	2b00      	cmp	r3, #0
 8004036:	d005      	beq.n	8004044 <UART_SetConfig+0x218>
 8004038:	e049      	b.n	80040ce <UART_SetConfig+0x2a2>
 800403a:	2b04      	cmp	r3, #4
 800403c:	d024      	beq.n	8004088 <UART_SetConfig+0x25c>
 800403e:	2b08      	cmp	r3, #8
 8004040:	d035      	beq.n	80040ae <UART_SetConfig+0x282>
 8004042:	e044      	b.n	80040ce <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004044:	f7ff fbd2 	bl	80037ec <HAL_RCC_GetPCLK1Freq>
 8004048:	0003      	movs	r3, r0
 800404a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	085a      	lsrs	r2, r3, #1
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	18d2      	adds	r2, r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	0019      	movs	r1, r3
 800405c:	0010      	movs	r0, r2
 800405e:	f7fc f85b 	bl	8000118 <__udivsi3>
 8004062:	0003      	movs	r3, r0
 8004064:	b29b      	uxth	r3, r3
 8004066:	61bb      	str	r3, [r7, #24]
        break;
 8004068:	e036      	b.n	80040d8 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	085b      	lsrs	r3, r3, #1
 8004070:	4a30      	ldr	r2, [pc, #192]	; (8004134 <UART_SetConfig+0x308>)
 8004072:	189a      	adds	r2, r3, r2
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	0019      	movs	r1, r3
 800407a:	0010      	movs	r0, r2
 800407c:	f7fc f84c 	bl	8000118 <__udivsi3>
 8004080:	0003      	movs	r3, r0
 8004082:	b29b      	uxth	r3, r3
 8004084:	61bb      	str	r3, [r7, #24]
        break;
 8004086:	e027      	b.n	80040d8 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004088:	f7ff fb42 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 800408c:	0003      	movs	r3, r0
 800408e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	085a      	lsrs	r2, r3, #1
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	18d2      	adds	r2, r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	0019      	movs	r1, r3
 80040a0:	0010      	movs	r0, r2
 80040a2:	f7fc f839 	bl	8000118 <__udivsi3>
 80040a6:	0003      	movs	r3, r0
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	61bb      	str	r3, [r7, #24]
        break;
 80040ac:	e014      	b.n	80040d8 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	085b      	lsrs	r3, r3, #1
 80040b4:	2280      	movs	r2, #128	; 0x80
 80040b6:	0212      	lsls	r2, r2, #8
 80040b8:	189a      	adds	r2, r3, r2
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	0019      	movs	r1, r3
 80040c0:	0010      	movs	r0, r2
 80040c2:	f7fc f829 	bl	8000118 <__udivsi3>
 80040c6:	0003      	movs	r3, r0
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	61bb      	str	r3, [r7, #24]
        break;
 80040cc:	e004      	b.n	80040d8 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 80040ce:	2317      	movs	r3, #23
 80040d0:	18fb      	adds	r3, r7, r3
 80040d2:	2201      	movs	r2, #1
 80040d4:	701a      	strb	r2, [r3, #0]
        break;
 80040d6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	2b0f      	cmp	r3, #15
 80040dc:	d908      	bls.n	80040f0 <UART_SetConfig+0x2c4>
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	4a13      	ldr	r2, [pc, #76]	; (8004130 <UART_SetConfig+0x304>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d804      	bhi.n	80040f0 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	60da      	str	r2, [r3, #12]
 80040ee:	e003      	b.n	80040f8 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 80040f0:	2317      	movs	r3, #23
 80040f2:	18fb      	adds	r3, r7, r3
 80040f4:	2201      	movs	r2, #1
 80040f6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004104:	2317      	movs	r3, #23
 8004106:	18fb      	adds	r3, r7, r3
 8004108:	781b      	ldrb	r3, [r3, #0]
}
 800410a:	0018      	movs	r0, r3
 800410c:	46bd      	mov	sp, r7
 800410e:	b008      	add	sp, #32
 8004110:	bd80      	pop	{r7, pc}
 8004112:	46c0      	nop			; (mov r8, r8)
 8004114:	ffff69f3 	.word	0xffff69f3
 8004118:	ffffcfff 	.word	0xffffcfff
 800411c:	fffff4ff 	.word	0xfffff4ff
 8004120:	40013800 	.word	0x40013800
 8004124:	40021000 	.word	0x40021000
 8004128:	40004400 	.word	0x40004400
 800412c:	00f42400 	.word	0x00f42400
 8004130:	0000ffff 	.word	0x0000ffff
 8004134:	007a1200 	.word	0x007a1200

08004138 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	2201      	movs	r2, #1
 8004146:	4013      	ands	r3, r2
 8004148:	d00b      	beq.n	8004162 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	4a4a      	ldr	r2, [pc, #296]	; (800427c <UART_AdvFeatureConfig+0x144>)
 8004152:	4013      	ands	r3, r2
 8004154:	0019      	movs	r1, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	2202      	movs	r2, #2
 8004168:	4013      	ands	r3, r2
 800416a:	d00b      	beq.n	8004184 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	4a43      	ldr	r2, [pc, #268]	; (8004280 <UART_AdvFeatureConfig+0x148>)
 8004174:	4013      	ands	r3, r2
 8004176:	0019      	movs	r1, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	2204      	movs	r2, #4
 800418a:	4013      	ands	r3, r2
 800418c:	d00b      	beq.n	80041a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	4a3b      	ldr	r2, [pc, #236]	; (8004284 <UART_AdvFeatureConfig+0x14c>)
 8004196:	4013      	ands	r3, r2
 8004198:	0019      	movs	r1, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	2208      	movs	r2, #8
 80041ac:	4013      	ands	r3, r2
 80041ae:	d00b      	beq.n	80041c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	4a34      	ldr	r2, [pc, #208]	; (8004288 <UART_AdvFeatureConfig+0x150>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	0019      	movs	r1, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	2210      	movs	r2, #16
 80041ce:	4013      	ands	r3, r2
 80041d0:	d00b      	beq.n	80041ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	4a2c      	ldr	r2, [pc, #176]	; (800428c <UART_AdvFeatureConfig+0x154>)
 80041da:	4013      	ands	r3, r2
 80041dc:	0019      	movs	r1, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	2220      	movs	r2, #32
 80041f0:	4013      	ands	r3, r2
 80041f2:	d00b      	beq.n	800420c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	4a25      	ldr	r2, [pc, #148]	; (8004290 <UART_AdvFeatureConfig+0x158>)
 80041fc:	4013      	ands	r3, r2
 80041fe:	0019      	movs	r1, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	2240      	movs	r2, #64	; 0x40
 8004212:	4013      	ands	r3, r2
 8004214:	d01d      	beq.n	8004252 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	4a1d      	ldr	r2, [pc, #116]	; (8004294 <UART_AdvFeatureConfig+0x15c>)
 800421e:	4013      	ands	r3, r2
 8004220:	0019      	movs	r1, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004232:	2380      	movs	r3, #128	; 0x80
 8004234:	035b      	lsls	r3, r3, #13
 8004236:	429a      	cmp	r2, r3
 8004238:	d10b      	bne.n	8004252 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	4a15      	ldr	r2, [pc, #84]	; (8004298 <UART_AdvFeatureConfig+0x160>)
 8004242:	4013      	ands	r3, r2
 8004244:	0019      	movs	r1, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	2280      	movs	r2, #128	; 0x80
 8004258:	4013      	ands	r3, r2
 800425a:	d00b      	beq.n	8004274 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	4a0e      	ldr	r2, [pc, #56]	; (800429c <UART_AdvFeatureConfig+0x164>)
 8004264:	4013      	ands	r3, r2
 8004266:	0019      	movs	r1, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	605a      	str	r2, [r3, #4]
  }
}
 8004274:	46c0      	nop			; (mov r8, r8)
 8004276:	46bd      	mov	sp, r7
 8004278:	b002      	add	sp, #8
 800427a:	bd80      	pop	{r7, pc}
 800427c:	fffdffff 	.word	0xfffdffff
 8004280:	fffeffff 	.word	0xfffeffff
 8004284:	fffbffff 	.word	0xfffbffff
 8004288:	ffff7fff 	.word	0xffff7fff
 800428c:	ffffefff 	.word	0xffffefff
 8004290:	ffffdfff 	.word	0xffffdfff
 8004294:	ffefffff 	.word	0xffefffff
 8004298:	ff9fffff 	.word	0xff9fffff
 800429c:	fff7ffff 	.word	0xfff7ffff

080042a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af02      	add	r7, sp, #8
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80042ae:	f7fe f8bb 	bl	8002428 <HAL_GetTick>
 80042b2:	0003      	movs	r3, r0
 80042b4:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2208      	movs	r2, #8
 80042be:	4013      	ands	r3, r2
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d10d      	bne.n	80042e0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	2380      	movs	r3, #128	; 0x80
 80042c8:	0399      	lsls	r1, r3, #14
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	4b16      	ldr	r3, [pc, #88]	; (8004328 <UART_CheckIdleState+0x88>)
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	0013      	movs	r3, r2
 80042d2:	2200      	movs	r2, #0
 80042d4:	f000 f82a 	bl	800432c <UART_WaitOnFlagUntilTimeout>
 80042d8:	1e03      	subs	r3, r0, #0
 80042da:	d001      	beq.n	80042e0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e01f      	b.n	8004320 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2204      	movs	r2, #4
 80042e8:	4013      	ands	r3, r2
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	d10d      	bne.n	800430a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	2380      	movs	r3, #128	; 0x80
 80042f2:	03d9      	lsls	r1, r3, #15
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	4b0c      	ldr	r3, [pc, #48]	; (8004328 <UART_CheckIdleState+0x88>)
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	0013      	movs	r3, r2
 80042fc:	2200      	movs	r2, #0
 80042fe:	f000 f815 	bl	800432c <UART_WaitOnFlagUntilTimeout>
 8004302:	1e03      	subs	r3, r0, #0
 8004304:	d001      	beq.n	800430a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e00a      	b.n	8004320 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2220      	movs	r2, #32
 800430e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2270      	movs	r2, #112	; 0x70
 800431a:	2100      	movs	r1, #0
 800431c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	0018      	movs	r0, r3
 8004322:	46bd      	mov	sp, r7
 8004324:	b004      	add	sp, #16
 8004326:	bd80      	pop	{r7, pc}
 8004328:	01ffffff 	.word	0x01ffffff

0800432c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	603b      	str	r3, [r7, #0]
 8004338:	1dfb      	adds	r3, r7, #7
 800433a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800433c:	e05d      	b.n	80043fa <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	3301      	adds	r3, #1
 8004342:	d05a      	beq.n	80043fa <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004344:	f7fe f870 	bl	8002428 <HAL_GetTick>
 8004348:	0002      	movs	r2, r0
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	429a      	cmp	r2, r3
 8004352:	d302      	bcc.n	800435a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d11b      	bne.n	8004392 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	492f      	ldr	r1, [pc, #188]	; (8004424 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004366:	400a      	ands	r2, r1
 8004368:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2101      	movs	r1, #1
 8004376:	438a      	bics	r2, r1
 8004378:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2220      	movs	r2, #32
 800437e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2220      	movs	r2, #32
 8004384:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2270      	movs	r2, #112	; 0x70
 800438a:	2100      	movs	r1, #0
 800438c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e043      	b.n	800441a <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2204      	movs	r2, #4
 800439a:	4013      	ands	r3, r2
 800439c:	d02d      	beq.n	80043fa <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	69da      	ldr	r2, [r3, #28]
 80043a4:	2380      	movs	r3, #128	; 0x80
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	401a      	ands	r2, r3
 80043aa:	2380      	movs	r3, #128	; 0x80
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d123      	bne.n	80043fa <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2280      	movs	r2, #128	; 0x80
 80043b8:	0112      	lsls	r2, r2, #4
 80043ba:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4917      	ldr	r1, [pc, #92]	; (8004424 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80043c8:	400a      	ands	r2, r1
 80043ca:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689a      	ldr	r2, [r3, #8]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2101      	movs	r1, #1
 80043d8:	438a      	bics	r2, r1
 80043da:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2220      	movs	r2, #32
 80043e0:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2220      	movs	r2, #32
 80043e6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2220      	movs	r2, #32
 80043ec:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2270      	movs	r2, #112	; 0x70
 80043f2:	2100      	movs	r1, #0
 80043f4:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e00f      	b.n	800441a <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	4013      	ands	r3, r2
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	425a      	negs	r2, r3
 800440a:	4153      	adcs	r3, r2
 800440c:	b2db      	uxtb	r3, r3
 800440e:	001a      	movs	r2, r3
 8004410:	1dfb      	adds	r3, r7, #7
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	429a      	cmp	r2, r3
 8004416:	d092      	beq.n	800433e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	0018      	movs	r0, r3
 800441c:	46bd      	mov	sp, r7
 800441e:	b004      	add	sp, #16
 8004420:	bd80      	pop	{r7, pc}
 8004422:	46c0      	nop			; (mov r8, r8)
 8004424:	fffffe5f 	.word	0xfffffe5f

08004428 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	21c0      	movs	r1, #192	; 0xc0
 800443c:	438a      	bics	r2, r1
 800443e:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2220      	movs	r2, #32
 8004444:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	46bd      	mov	sp, r7
 800444a:	b002      	add	sp, #8
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	490a      	ldr	r1, [pc, #40]	; (800448c <UART_EndRxTransfer+0x3c>)
 8004464:	400a      	ands	r2, r1
 8004466:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2101      	movs	r1, #1
 8004474:	438a      	bics	r2, r1
 8004476:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2220      	movs	r2, #32
 800447c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004484:	46c0      	nop			; (mov r8, r8)
 8004486:	46bd      	mov	sp, r7
 8004488:	b002      	add	sp, #8
 800448a:	bd80      	pop	{r7, pc}
 800448c:	fffffedf 	.word	0xfffffedf

08004490 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	2b20      	cmp	r3, #32
 80044a4:	d01e      	beq.n	80044e4 <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	225a      	movs	r2, #90	; 0x5a
 80044aa:	2100      	movs	r1, #0
 80044ac:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	490e      	ldr	r1, [pc, #56]	; (80044f4 <UART_DMAReceiveCplt+0x64>)
 80044ba:	400a      	ands	r2, r1
 80044bc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2101      	movs	r1, #1
 80044ca:	438a      	bics	r2, r1
 80044cc:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2140      	movs	r1, #64	; 0x40
 80044da:	438a      	bics	r2, r1
 80044dc:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2220      	movs	r2, #32
 80044e2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	0018      	movs	r0, r3
 80044e8:	f7ff fc88 	bl	8003dfc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044ec:	46c0      	nop			; (mov r8, r8)
 80044ee:	46bd      	mov	sp, r7
 80044f0:	b004      	add	sp, #16
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	fffffeff 	.word	0xfffffeff

080044f8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	0018      	movs	r0, r3
 800450a:	f7ff fc7f 	bl	8003e0c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800450e:	46c0      	nop			; (mov r8, r8)
 8004510:	46bd      	mov	sp, r7
 8004512:	b004      	add	sp, #16
 8004514:	bd80      	pop	{r7, pc}

08004516 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b086      	sub	sp, #24
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004528:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800452e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	2280      	movs	r2, #128	; 0x80
 8004538:	4013      	ands	r3, r2
 800453a:	2b80      	cmp	r3, #128	; 0x80
 800453c:	d10a      	bne.n	8004554 <UART_DMAError+0x3e>
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	2b21      	cmp	r3, #33	; 0x21
 8004542:	d107      	bne.n	8004554 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	2252      	movs	r2, #82	; 0x52
 8004548:	2100      	movs	r1, #0
 800454a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	0018      	movs	r0, r3
 8004550:	f7ff ff6a 	bl	8004428 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	2240      	movs	r2, #64	; 0x40
 800455c:	4013      	ands	r3, r2
 800455e:	2b40      	cmp	r3, #64	; 0x40
 8004560:	d10a      	bne.n	8004578 <UART_DMAError+0x62>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2b22      	cmp	r3, #34	; 0x22
 8004566:	d107      	bne.n	8004578 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	225a      	movs	r2, #90	; 0x5a
 800456c:	2100      	movs	r1, #0
 800456e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	0018      	movs	r0, r3
 8004574:	f7ff ff6c 	bl	8004450 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800457c:	2210      	movs	r2, #16
 800457e:	431a      	orrs	r2, r3
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	0018      	movs	r0, r3
 8004588:	f7ff fc48 	bl	8003e1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800458c:	46c0      	nop			; (mov r8, r8)
 800458e:	46bd      	mov	sp, r7
 8004590:	b006      	add	sp, #24
 8004592:	bd80      	pop	{r7, pc}

08004594 <__errno>:
 8004594:	4b01      	ldr	r3, [pc, #4]	; (800459c <__errno+0x8>)
 8004596:	6818      	ldr	r0, [r3, #0]
 8004598:	4770      	bx	lr
 800459a:	46c0      	nop			; (mov r8, r8)
 800459c:	20000010 	.word	0x20000010

080045a0 <__libc_init_array>:
 80045a0:	b570      	push	{r4, r5, r6, lr}
 80045a2:	2600      	movs	r6, #0
 80045a4:	4d0c      	ldr	r5, [pc, #48]	; (80045d8 <__libc_init_array+0x38>)
 80045a6:	4c0d      	ldr	r4, [pc, #52]	; (80045dc <__libc_init_array+0x3c>)
 80045a8:	1b64      	subs	r4, r4, r5
 80045aa:	10a4      	asrs	r4, r4, #2
 80045ac:	42a6      	cmp	r6, r4
 80045ae:	d109      	bne.n	80045c4 <__libc_init_array+0x24>
 80045b0:	2600      	movs	r6, #0
 80045b2:	f001 fa61 	bl	8005a78 <_init>
 80045b6:	4d0a      	ldr	r5, [pc, #40]	; (80045e0 <__libc_init_array+0x40>)
 80045b8:	4c0a      	ldr	r4, [pc, #40]	; (80045e4 <__libc_init_array+0x44>)
 80045ba:	1b64      	subs	r4, r4, r5
 80045bc:	10a4      	asrs	r4, r4, #2
 80045be:	42a6      	cmp	r6, r4
 80045c0:	d105      	bne.n	80045ce <__libc_init_array+0x2e>
 80045c2:	bd70      	pop	{r4, r5, r6, pc}
 80045c4:	00b3      	lsls	r3, r6, #2
 80045c6:	58eb      	ldr	r3, [r5, r3]
 80045c8:	4798      	blx	r3
 80045ca:	3601      	adds	r6, #1
 80045cc:	e7ee      	b.n	80045ac <__libc_init_array+0xc>
 80045ce:	00b3      	lsls	r3, r6, #2
 80045d0:	58eb      	ldr	r3, [r5, r3]
 80045d2:	4798      	blx	r3
 80045d4:	3601      	adds	r6, #1
 80045d6:	e7f2      	b.n	80045be <__libc_init_array+0x1e>
 80045d8:	080061ac 	.word	0x080061ac
 80045dc:	080061ac 	.word	0x080061ac
 80045e0:	080061ac 	.word	0x080061ac
 80045e4:	080061b0 	.word	0x080061b0

080045e8 <memset>:
 80045e8:	0003      	movs	r3, r0
 80045ea:	1812      	adds	r2, r2, r0
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d100      	bne.n	80045f2 <memset+0xa>
 80045f0:	4770      	bx	lr
 80045f2:	7019      	strb	r1, [r3, #0]
 80045f4:	3301      	adds	r3, #1
 80045f6:	e7f9      	b.n	80045ec <memset+0x4>

080045f8 <iprintf>:
 80045f8:	b40f      	push	{r0, r1, r2, r3}
 80045fa:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <iprintf+0x30>)
 80045fc:	b513      	push	{r0, r1, r4, lr}
 80045fe:	681c      	ldr	r4, [r3, #0]
 8004600:	2c00      	cmp	r4, #0
 8004602:	d005      	beq.n	8004610 <iprintf+0x18>
 8004604:	69a3      	ldr	r3, [r4, #24]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d102      	bne.n	8004610 <iprintf+0x18>
 800460a:	0020      	movs	r0, r4
 800460c:	f000 fae4 	bl	8004bd8 <__sinit>
 8004610:	ab05      	add	r3, sp, #20
 8004612:	9a04      	ldr	r2, [sp, #16]
 8004614:	68a1      	ldr	r1, [r4, #8]
 8004616:	0020      	movs	r0, r4
 8004618:	9301      	str	r3, [sp, #4]
 800461a:	f000 fe37 	bl	800528c <_vfiprintf_r>
 800461e:	bc16      	pop	{r1, r2, r4}
 8004620:	bc08      	pop	{r3}
 8004622:	b004      	add	sp, #16
 8004624:	4718      	bx	r3
 8004626:	46c0      	nop			; (mov r8, r8)
 8004628:	20000010 	.word	0x20000010

0800462c <putchar>:
 800462c:	4b08      	ldr	r3, [pc, #32]	; (8004650 <putchar+0x24>)
 800462e:	b570      	push	{r4, r5, r6, lr}
 8004630:	681c      	ldr	r4, [r3, #0]
 8004632:	0005      	movs	r5, r0
 8004634:	2c00      	cmp	r4, #0
 8004636:	d005      	beq.n	8004644 <putchar+0x18>
 8004638:	69a3      	ldr	r3, [r4, #24]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d102      	bne.n	8004644 <putchar+0x18>
 800463e:	0020      	movs	r0, r4
 8004640:	f000 faca 	bl	8004bd8 <__sinit>
 8004644:	0029      	movs	r1, r5
 8004646:	68a2      	ldr	r2, [r4, #8]
 8004648:	0020      	movs	r0, r4
 800464a:	f001 f8ab 	bl	80057a4 <_putc_r>
 800464e:	bd70      	pop	{r4, r5, r6, pc}
 8004650:	20000010 	.word	0x20000010

08004654 <_puts_r>:
 8004654:	b570      	push	{r4, r5, r6, lr}
 8004656:	0005      	movs	r5, r0
 8004658:	000e      	movs	r6, r1
 800465a:	2800      	cmp	r0, #0
 800465c:	d004      	beq.n	8004668 <_puts_r+0x14>
 800465e:	6983      	ldr	r3, [r0, #24]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <_puts_r+0x14>
 8004664:	f000 fab8 	bl	8004bd8 <__sinit>
 8004668:	69ab      	ldr	r3, [r5, #24]
 800466a:	68ac      	ldr	r4, [r5, #8]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d102      	bne.n	8004676 <_puts_r+0x22>
 8004670:	0028      	movs	r0, r5
 8004672:	f000 fab1 	bl	8004bd8 <__sinit>
 8004676:	4b24      	ldr	r3, [pc, #144]	; (8004708 <_puts_r+0xb4>)
 8004678:	429c      	cmp	r4, r3
 800467a:	d10f      	bne.n	800469c <_puts_r+0x48>
 800467c:	686c      	ldr	r4, [r5, #4]
 800467e:	89a3      	ldrh	r3, [r4, #12]
 8004680:	071b      	lsls	r3, r3, #28
 8004682:	d502      	bpl.n	800468a <_puts_r+0x36>
 8004684:	6923      	ldr	r3, [r4, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d11f      	bne.n	80046ca <_puts_r+0x76>
 800468a:	0021      	movs	r1, r4
 800468c:	0028      	movs	r0, r5
 800468e:	f000 f935 	bl	80048fc <__swsetup_r>
 8004692:	2800      	cmp	r0, #0
 8004694:	d019      	beq.n	80046ca <_puts_r+0x76>
 8004696:	2001      	movs	r0, #1
 8004698:	4240      	negs	r0, r0
 800469a:	bd70      	pop	{r4, r5, r6, pc}
 800469c:	4b1b      	ldr	r3, [pc, #108]	; (800470c <_puts_r+0xb8>)
 800469e:	429c      	cmp	r4, r3
 80046a0:	d101      	bne.n	80046a6 <_puts_r+0x52>
 80046a2:	68ac      	ldr	r4, [r5, #8]
 80046a4:	e7eb      	b.n	800467e <_puts_r+0x2a>
 80046a6:	4b1a      	ldr	r3, [pc, #104]	; (8004710 <_puts_r+0xbc>)
 80046a8:	429c      	cmp	r4, r3
 80046aa:	d1e8      	bne.n	800467e <_puts_r+0x2a>
 80046ac:	68ec      	ldr	r4, [r5, #12]
 80046ae:	e7e6      	b.n	800467e <_puts_r+0x2a>
 80046b0:	3601      	adds	r6, #1
 80046b2:	60a3      	str	r3, [r4, #8]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	da04      	bge.n	80046c2 <_puts_r+0x6e>
 80046b8:	69a2      	ldr	r2, [r4, #24]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	dc16      	bgt.n	80046ec <_puts_r+0x98>
 80046be:	290a      	cmp	r1, #10
 80046c0:	d014      	beq.n	80046ec <_puts_r+0x98>
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	6022      	str	r2, [r4, #0]
 80046c8:	7019      	strb	r1, [r3, #0]
 80046ca:	68a3      	ldr	r3, [r4, #8]
 80046cc:	7831      	ldrb	r1, [r6, #0]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	2900      	cmp	r1, #0
 80046d2:	d1ed      	bne.n	80046b0 <_puts_r+0x5c>
 80046d4:	60a3      	str	r3, [r4, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	da0f      	bge.n	80046fa <_puts_r+0xa6>
 80046da:	0022      	movs	r2, r4
 80046dc:	310a      	adds	r1, #10
 80046de:	0028      	movs	r0, r5
 80046e0:	f000 f8b6 	bl	8004850 <__swbuf_r>
 80046e4:	1c43      	adds	r3, r0, #1
 80046e6:	d0d6      	beq.n	8004696 <_puts_r+0x42>
 80046e8:	200a      	movs	r0, #10
 80046ea:	e7d6      	b.n	800469a <_puts_r+0x46>
 80046ec:	0022      	movs	r2, r4
 80046ee:	0028      	movs	r0, r5
 80046f0:	f000 f8ae 	bl	8004850 <__swbuf_r>
 80046f4:	1c43      	adds	r3, r0, #1
 80046f6:	d1e8      	bne.n	80046ca <_puts_r+0x76>
 80046f8:	e7cd      	b.n	8004696 <_puts_r+0x42>
 80046fa:	200a      	movs	r0, #10
 80046fc:	6823      	ldr	r3, [r4, #0]
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	6022      	str	r2, [r4, #0]
 8004702:	7018      	strb	r0, [r3, #0]
 8004704:	e7c9      	b.n	800469a <_puts_r+0x46>
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	0800602c 	.word	0x0800602c
 800470c:	0800604c 	.word	0x0800604c
 8004710:	0800600c 	.word	0x0800600c

08004714 <puts>:
 8004714:	b510      	push	{r4, lr}
 8004716:	4b03      	ldr	r3, [pc, #12]	; (8004724 <puts+0x10>)
 8004718:	0001      	movs	r1, r0
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	f7ff ff9a 	bl	8004654 <_puts_r>
 8004720:	bd10      	pop	{r4, pc}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	20000010 	.word	0x20000010

08004728 <siprintf>:
 8004728:	b40e      	push	{r1, r2, r3}
 800472a:	b500      	push	{lr}
 800472c:	490b      	ldr	r1, [pc, #44]	; (800475c <siprintf+0x34>)
 800472e:	b09c      	sub	sp, #112	; 0x70
 8004730:	ab1d      	add	r3, sp, #116	; 0x74
 8004732:	9002      	str	r0, [sp, #8]
 8004734:	9006      	str	r0, [sp, #24]
 8004736:	9107      	str	r1, [sp, #28]
 8004738:	9104      	str	r1, [sp, #16]
 800473a:	4809      	ldr	r0, [pc, #36]	; (8004760 <siprintf+0x38>)
 800473c:	4909      	ldr	r1, [pc, #36]	; (8004764 <siprintf+0x3c>)
 800473e:	cb04      	ldmia	r3!, {r2}
 8004740:	9105      	str	r1, [sp, #20]
 8004742:	6800      	ldr	r0, [r0, #0]
 8004744:	a902      	add	r1, sp, #8
 8004746:	9301      	str	r3, [sp, #4]
 8004748:	f000 fc7a 	bl	8005040 <_svfiprintf_r>
 800474c:	2300      	movs	r3, #0
 800474e:	9a02      	ldr	r2, [sp, #8]
 8004750:	7013      	strb	r3, [r2, #0]
 8004752:	b01c      	add	sp, #112	; 0x70
 8004754:	bc08      	pop	{r3}
 8004756:	b003      	add	sp, #12
 8004758:	4718      	bx	r3
 800475a:	46c0      	nop			; (mov r8, r8)
 800475c:	7fffffff 	.word	0x7fffffff
 8004760:	20000010 	.word	0x20000010
 8004764:	ffff0208 	.word	0xffff0208

08004768 <strcasecmp>:
 8004768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476a:	0007      	movs	r7, r0
 800476c:	000e      	movs	r6, r1
 800476e:	783c      	ldrb	r4, [r7, #0]
 8004770:	f000 fac6 	bl	8004d00 <__locale_ctype_ptr>
 8004774:	2203      	movs	r2, #3
 8004776:	1900      	adds	r0, r0, r4
 8004778:	7843      	ldrb	r3, [r0, #1]
 800477a:	4013      	ands	r3, r2
 800477c:	2b01      	cmp	r3, #1
 800477e:	d100      	bne.n	8004782 <strcasecmp+0x1a>
 8004780:	3420      	adds	r4, #32
 8004782:	7835      	ldrb	r5, [r6, #0]
 8004784:	f000 fabc 	bl	8004d00 <__locale_ctype_ptr>
 8004788:	2203      	movs	r2, #3
 800478a:	1940      	adds	r0, r0, r5
 800478c:	7843      	ldrb	r3, [r0, #1]
 800478e:	4013      	ands	r3, r2
 8004790:	2b01      	cmp	r3, #1
 8004792:	d100      	bne.n	8004796 <strcasecmp+0x2e>
 8004794:	3520      	adds	r5, #32
 8004796:	1b60      	subs	r0, r4, r5
 8004798:	d103      	bne.n	80047a2 <strcasecmp+0x3a>
 800479a:	3701      	adds	r7, #1
 800479c:	3601      	adds	r6, #1
 800479e:	2d00      	cmp	r5, #0
 80047a0:	d1e5      	bne.n	800476e <strcasecmp+0x6>
 80047a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080047a4 <strtok>:
 80047a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a6:	4b12      	ldr	r3, [pc, #72]	; (80047f0 <strtok+0x4c>)
 80047a8:	0006      	movs	r6, r0
 80047aa:	681d      	ldr	r5, [r3, #0]
 80047ac:	000f      	movs	r7, r1
 80047ae:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80047b0:	2c00      	cmp	r4, #0
 80047b2:	d116      	bne.n	80047e2 <strtok+0x3e>
 80047b4:	2050      	movs	r0, #80	; 0x50
 80047b6:	f000 fb1d 	bl	8004df4 <malloc>
 80047ba:	65a8      	str	r0, [r5, #88]	; 0x58
 80047bc:	6004      	str	r4, [r0, #0]
 80047be:	6044      	str	r4, [r0, #4]
 80047c0:	6084      	str	r4, [r0, #8]
 80047c2:	60c4      	str	r4, [r0, #12]
 80047c4:	6104      	str	r4, [r0, #16]
 80047c6:	6144      	str	r4, [r0, #20]
 80047c8:	6184      	str	r4, [r0, #24]
 80047ca:	6284      	str	r4, [r0, #40]	; 0x28
 80047cc:	62c4      	str	r4, [r0, #44]	; 0x2c
 80047ce:	6304      	str	r4, [r0, #48]	; 0x30
 80047d0:	6344      	str	r4, [r0, #52]	; 0x34
 80047d2:	6384      	str	r4, [r0, #56]	; 0x38
 80047d4:	63c4      	str	r4, [r0, #60]	; 0x3c
 80047d6:	6404      	str	r4, [r0, #64]	; 0x40
 80047d8:	6444      	str	r4, [r0, #68]	; 0x44
 80047da:	6484      	str	r4, [r0, #72]	; 0x48
 80047dc:	64c4      	str	r4, [r0, #76]	; 0x4c
 80047de:	7704      	strb	r4, [r0, #28]
 80047e0:	6244      	str	r4, [r0, #36]	; 0x24
 80047e2:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80047e4:	0039      	movs	r1, r7
 80047e6:	0030      	movs	r0, r6
 80047e8:	2301      	movs	r3, #1
 80047ea:	f000 f803 	bl	80047f4 <__strtok_r>
 80047ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047f0:	20000010 	.word	0x20000010

080047f4 <__strtok_r>:
 80047f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047f6:	2800      	cmp	r0, #0
 80047f8:	d104      	bne.n	8004804 <__strtok_r+0x10>
 80047fa:	6810      	ldr	r0, [r2, #0]
 80047fc:	2800      	cmp	r0, #0
 80047fe:	d101      	bne.n	8004804 <__strtok_r+0x10>
 8004800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004802:	0020      	movs	r0, r4
 8004804:	000e      	movs	r6, r1
 8004806:	7805      	ldrb	r5, [r0, #0]
 8004808:	1c44      	adds	r4, r0, #1
 800480a:	7837      	ldrb	r7, [r6, #0]
 800480c:	2f00      	cmp	r7, #0
 800480e:	d104      	bne.n	800481a <__strtok_r+0x26>
 8004810:	2d00      	cmp	r5, #0
 8004812:	d110      	bne.n	8004836 <__strtok_r+0x42>
 8004814:	6015      	str	r5, [r2, #0]
 8004816:	0028      	movs	r0, r5
 8004818:	e7f2      	b.n	8004800 <__strtok_r+0xc>
 800481a:	3601      	adds	r6, #1
 800481c:	42bd      	cmp	r5, r7
 800481e:	d1f4      	bne.n	800480a <__strtok_r+0x16>
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1ee      	bne.n	8004802 <__strtok_r+0xe>
 8004824:	6014      	str	r4, [r2, #0]
 8004826:	7003      	strb	r3, [r0, #0]
 8004828:	e7ea      	b.n	8004800 <__strtok_r+0xc>
 800482a:	0033      	movs	r3, r6
 800482c:	e00d      	b.n	800484a <__strtok_r+0x56>
 800482e:	3501      	adds	r5, #1
 8004830:	2f00      	cmp	r7, #0
 8004832:	d103      	bne.n	800483c <__strtok_r+0x48>
 8004834:	001c      	movs	r4, r3
 8004836:	000d      	movs	r5, r1
 8004838:	7826      	ldrb	r6, [r4, #0]
 800483a:	1c63      	adds	r3, r4, #1
 800483c:	782f      	ldrb	r7, [r5, #0]
 800483e:	42be      	cmp	r6, r7
 8004840:	d1f5      	bne.n	800482e <__strtok_r+0x3a>
 8004842:	2e00      	cmp	r6, #0
 8004844:	d0f1      	beq.n	800482a <__strtok_r+0x36>
 8004846:	2100      	movs	r1, #0
 8004848:	7021      	strb	r1, [r4, #0]
 800484a:	6013      	str	r3, [r2, #0]
 800484c:	e7d8      	b.n	8004800 <__strtok_r+0xc>
	...

08004850 <__swbuf_r>:
 8004850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004852:	0005      	movs	r5, r0
 8004854:	000e      	movs	r6, r1
 8004856:	0014      	movs	r4, r2
 8004858:	2800      	cmp	r0, #0
 800485a:	d004      	beq.n	8004866 <__swbuf_r+0x16>
 800485c:	6983      	ldr	r3, [r0, #24]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <__swbuf_r+0x16>
 8004862:	f000 f9b9 	bl	8004bd8 <__sinit>
 8004866:	4b22      	ldr	r3, [pc, #136]	; (80048f0 <__swbuf_r+0xa0>)
 8004868:	429c      	cmp	r4, r3
 800486a:	d12d      	bne.n	80048c8 <__swbuf_r+0x78>
 800486c:	686c      	ldr	r4, [r5, #4]
 800486e:	69a3      	ldr	r3, [r4, #24]
 8004870:	60a3      	str	r3, [r4, #8]
 8004872:	89a3      	ldrh	r3, [r4, #12]
 8004874:	071b      	lsls	r3, r3, #28
 8004876:	d531      	bpl.n	80048dc <__swbuf_r+0x8c>
 8004878:	6923      	ldr	r3, [r4, #16]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d02e      	beq.n	80048dc <__swbuf_r+0x8c>
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	6922      	ldr	r2, [r4, #16]
 8004882:	b2f7      	uxtb	r7, r6
 8004884:	1a98      	subs	r0, r3, r2
 8004886:	6963      	ldr	r3, [r4, #20]
 8004888:	b2f6      	uxtb	r6, r6
 800488a:	4283      	cmp	r3, r0
 800488c:	dc05      	bgt.n	800489a <__swbuf_r+0x4a>
 800488e:	0021      	movs	r1, r4
 8004890:	0028      	movs	r0, r5
 8004892:	f000 f933 	bl	8004afc <_fflush_r>
 8004896:	2800      	cmp	r0, #0
 8004898:	d126      	bne.n	80048e8 <__swbuf_r+0x98>
 800489a:	68a3      	ldr	r3, [r4, #8]
 800489c:	3001      	adds	r0, #1
 800489e:	3b01      	subs	r3, #1
 80048a0:	60a3      	str	r3, [r4, #8]
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	1c5a      	adds	r2, r3, #1
 80048a6:	6022      	str	r2, [r4, #0]
 80048a8:	701f      	strb	r7, [r3, #0]
 80048aa:	6963      	ldr	r3, [r4, #20]
 80048ac:	4283      	cmp	r3, r0
 80048ae:	d004      	beq.n	80048ba <__swbuf_r+0x6a>
 80048b0:	89a3      	ldrh	r3, [r4, #12]
 80048b2:	07db      	lsls	r3, r3, #31
 80048b4:	d51a      	bpl.n	80048ec <__swbuf_r+0x9c>
 80048b6:	2e0a      	cmp	r6, #10
 80048b8:	d118      	bne.n	80048ec <__swbuf_r+0x9c>
 80048ba:	0021      	movs	r1, r4
 80048bc:	0028      	movs	r0, r5
 80048be:	f000 f91d 	bl	8004afc <_fflush_r>
 80048c2:	2800      	cmp	r0, #0
 80048c4:	d012      	beq.n	80048ec <__swbuf_r+0x9c>
 80048c6:	e00f      	b.n	80048e8 <__swbuf_r+0x98>
 80048c8:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <__swbuf_r+0xa4>)
 80048ca:	429c      	cmp	r4, r3
 80048cc:	d101      	bne.n	80048d2 <__swbuf_r+0x82>
 80048ce:	68ac      	ldr	r4, [r5, #8]
 80048d0:	e7cd      	b.n	800486e <__swbuf_r+0x1e>
 80048d2:	4b09      	ldr	r3, [pc, #36]	; (80048f8 <__swbuf_r+0xa8>)
 80048d4:	429c      	cmp	r4, r3
 80048d6:	d1ca      	bne.n	800486e <__swbuf_r+0x1e>
 80048d8:	68ec      	ldr	r4, [r5, #12]
 80048da:	e7c8      	b.n	800486e <__swbuf_r+0x1e>
 80048dc:	0021      	movs	r1, r4
 80048de:	0028      	movs	r0, r5
 80048e0:	f000 f80c 	bl	80048fc <__swsetup_r>
 80048e4:	2800      	cmp	r0, #0
 80048e6:	d0ca      	beq.n	800487e <__swbuf_r+0x2e>
 80048e8:	2601      	movs	r6, #1
 80048ea:	4276      	negs	r6, r6
 80048ec:	0030      	movs	r0, r6
 80048ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048f0:	0800602c 	.word	0x0800602c
 80048f4:	0800604c 	.word	0x0800604c
 80048f8:	0800600c 	.word	0x0800600c

080048fc <__swsetup_r>:
 80048fc:	4b36      	ldr	r3, [pc, #216]	; (80049d8 <__swsetup_r+0xdc>)
 80048fe:	b570      	push	{r4, r5, r6, lr}
 8004900:	681d      	ldr	r5, [r3, #0]
 8004902:	0006      	movs	r6, r0
 8004904:	000c      	movs	r4, r1
 8004906:	2d00      	cmp	r5, #0
 8004908:	d005      	beq.n	8004916 <__swsetup_r+0x1a>
 800490a:	69ab      	ldr	r3, [r5, #24]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d102      	bne.n	8004916 <__swsetup_r+0x1a>
 8004910:	0028      	movs	r0, r5
 8004912:	f000 f961 	bl	8004bd8 <__sinit>
 8004916:	4b31      	ldr	r3, [pc, #196]	; (80049dc <__swsetup_r+0xe0>)
 8004918:	429c      	cmp	r4, r3
 800491a:	d10f      	bne.n	800493c <__swsetup_r+0x40>
 800491c:	686c      	ldr	r4, [r5, #4]
 800491e:	230c      	movs	r3, #12
 8004920:	5ee2      	ldrsh	r2, [r4, r3]
 8004922:	b293      	uxth	r3, r2
 8004924:	0719      	lsls	r1, r3, #28
 8004926:	d42d      	bmi.n	8004984 <__swsetup_r+0x88>
 8004928:	06d9      	lsls	r1, r3, #27
 800492a:	d411      	bmi.n	8004950 <__swsetup_r+0x54>
 800492c:	2309      	movs	r3, #9
 800492e:	2001      	movs	r0, #1
 8004930:	6033      	str	r3, [r6, #0]
 8004932:	3337      	adds	r3, #55	; 0x37
 8004934:	4313      	orrs	r3, r2
 8004936:	81a3      	strh	r3, [r4, #12]
 8004938:	4240      	negs	r0, r0
 800493a:	bd70      	pop	{r4, r5, r6, pc}
 800493c:	4b28      	ldr	r3, [pc, #160]	; (80049e0 <__swsetup_r+0xe4>)
 800493e:	429c      	cmp	r4, r3
 8004940:	d101      	bne.n	8004946 <__swsetup_r+0x4a>
 8004942:	68ac      	ldr	r4, [r5, #8]
 8004944:	e7eb      	b.n	800491e <__swsetup_r+0x22>
 8004946:	4b27      	ldr	r3, [pc, #156]	; (80049e4 <__swsetup_r+0xe8>)
 8004948:	429c      	cmp	r4, r3
 800494a:	d1e8      	bne.n	800491e <__swsetup_r+0x22>
 800494c:	68ec      	ldr	r4, [r5, #12]
 800494e:	e7e6      	b.n	800491e <__swsetup_r+0x22>
 8004950:	075b      	lsls	r3, r3, #29
 8004952:	d513      	bpl.n	800497c <__swsetup_r+0x80>
 8004954:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004956:	2900      	cmp	r1, #0
 8004958:	d008      	beq.n	800496c <__swsetup_r+0x70>
 800495a:	0023      	movs	r3, r4
 800495c:	3344      	adds	r3, #68	; 0x44
 800495e:	4299      	cmp	r1, r3
 8004960:	d002      	beq.n	8004968 <__swsetup_r+0x6c>
 8004962:	0030      	movs	r0, r6
 8004964:	f000 fa62 	bl	8004e2c <_free_r>
 8004968:	2300      	movs	r3, #0
 800496a:	6363      	str	r3, [r4, #52]	; 0x34
 800496c:	2224      	movs	r2, #36	; 0x24
 800496e:	89a3      	ldrh	r3, [r4, #12]
 8004970:	4393      	bics	r3, r2
 8004972:	81a3      	strh	r3, [r4, #12]
 8004974:	2300      	movs	r3, #0
 8004976:	6063      	str	r3, [r4, #4]
 8004978:	6923      	ldr	r3, [r4, #16]
 800497a:	6023      	str	r3, [r4, #0]
 800497c:	2308      	movs	r3, #8
 800497e:	89a2      	ldrh	r2, [r4, #12]
 8004980:	4313      	orrs	r3, r2
 8004982:	81a3      	strh	r3, [r4, #12]
 8004984:	6923      	ldr	r3, [r4, #16]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10b      	bne.n	80049a2 <__swsetup_r+0xa6>
 800498a:	21a0      	movs	r1, #160	; 0xa0
 800498c:	2280      	movs	r2, #128	; 0x80
 800498e:	89a3      	ldrh	r3, [r4, #12]
 8004990:	0089      	lsls	r1, r1, #2
 8004992:	0092      	lsls	r2, r2, #2
 8004994:	400b      	ands	r3, r1
 8004996:	4293      	cmp	r3, r2
 8004998:	d003      	beq.n	80049a2 <__swsetup_r+0xa6>
 800499a:	0021      	movs	r1, r4
 800499c:	0030      	movs	r0, r6
 800499e:	f000 f9e5 	bl	8004d6c <__smakebuf_r>
 80049a2:	2301      	movs	r3, #1
 80049a4:	89a2      	ldrh	r2, [r4, #12]
 80049a6:	4013      	ands	r3, r2
 80049a8:	d011      	beq.n	80049ce <__swsetup_r+0xd2>
 80049aa:	2300      	movs	r3, #0
 80049ac:	60a3      	str	r3, [r4, #8]
 80049ae:	6963      	ldr	r3, [r4, #20]
 80049b0:	425b      	negs	r3, r3
 80049b2:	61a3      	str	r3, [r4, #24]
 80049b4:	2000      	movs	r0, #0
 80049b6:	6923      	ldr	r3, [r4, #16]
 80049b8:	4283      	cmp	r3, r0
 80049ba:	d1be      	bne.n	800493a <__swsetup_r+0x3e>
 80049bc:	230c      	movs	r3, #12
 80049be:	5ee2      	ldrsh	r2, [r4, r3]
 80049c0:	0613      	lsls	r3, r2, #24
 80049c2:	d5ba      	bpl.n	800493a <__swsetup_r+0x3e>
 80049c4:	2340      	movs	r3, #64	; 0x40
 80049c6:	4313      	orrs	r3, r2
 80049c8:	81a3      	strh	r3, [r4, #12]
 80049ca:	3801      	subs	r0, #1
 80049cc:	e7b5      	b.n	800493a <__swsetup_r+0x3e>
 80049ce:	0792      	lsls	r2, r2, #30
 80049d0:	d400      	bmi.n	80049d4 <__swsetup_r+0xd8>
 80049d2:	6963      	ldr	r3, [r4, #20]
 80049d4:	60a3      	str	r3, [r4, #8]
 80049d6:	e7ed      	b.n	80049b4 <__swsetup_r+0xb8>
 80049d8:	20000010 	.word	0x20000010
 80049dc:	0800602c 	.word	0x0800602c
 80049e0:	0800604c 	.word	0x0800604c
 80049e4:	0800600c 	.word	0x0800600c

080049e8 <__sflush_r>:
 80049e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049ea:	898a      	ldrh	r2, [r1, #12]
 80049ec:	0005      	movs	r5, r0
 80049ee:	000c      	movs	r4, r1
 80049f0:	0713      	lsls	r3, r2, #28
 80049f2:	d460      	bmi.n	8004ab6 <__sflush_r+0xce>
 80049f4:	684b      	ldr	r3, [r1, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	dc04      	bgt.n	8004a04 <__sflush_r+0x1c>
 80049fa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	dc01      	bgt.n	8004a04 <__sflush_r+0x1c>
 8004a00:	2000      	movs	r0, #0
 8004a02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a04:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004a06:	2f00      	cmp	r7, #0
 8004a08:	d0fa      	beq.n	8004a00 <__sflush_r+0x18>
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	682e      	ldr	r6, [r5, #0]
 8004a0e:	602b      	str	r3, [r5, #0]
 8004a10:	2380      	movs	r3, #128	; 0x80
 8004a12:	015b      	lsls	r3, r3, #5
 8004a14:	6a21      	ldr	r1, [r4, #32]
 8004a16:	401a      	ands	r2, r3
 8004a18:	d034      	beq.n	8004a84 <__sflush_r+0x9c>
 8004a1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a1c:	89a3      	ldrh	r3, [r4, #12]
 8004a1e:	075b      	lsls	r3, r3, #29
 8004a20:	d506      	bpl.n	8004a30 <__sflush_r+0x48>
 8004a22:	6863      	ldr	r3, [r4, #4]
 8004a24:	1ac0      	subs	r0, r0, r3
 8004a26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <__sflush_r+0x48>
 8004a2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a2e:	1ac0      	subs	r0, r0, r3
 8004a30:	0002      	movs	r2, r0
 8004a32:	6a21      	ldr	r1, [r4, #32]
 8004a34:	2300      	movs	r3, #0
 8004a36:	0028      	movs	r0, r5
 8004a38:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004a3a:	47b8      	blx	r7
 8004a3c:	89a1      	ldrh	r1, [r4, #12]
 8004a3e:	1c43      	adds	r3, r0, #1
 8004a40:	d106      	bne.n	8004a50 <__sflush_r+0x68>
 8004a42:	682b      	ldr	r3, [r5, #0]
 8004a44:	2b1d      	cmp	r3, #29
 8004a46:	d830      	bhi.n	8004aaa <__sflush_r+0xc2>
 8004a48:	4a2b      	ldr	r2, [pc, #172]	; (8004af8 <__sflush_r+0x110>)
 8004a4a:	40da      	lsrs	r2, r3
 8004a4c:	07d3      	lsls	r3, r2, #31
 8004a4e:	d52c      	bpl.n	8004aaa <__sflush_r+0xc2>
 8004a50:	2300      	movs	r3, #0
 8004a52:	6063      	str	r3, [r4, #4]
 8004a54:	6923      	ldr	r3, [r4, #16]
 8004a56:	6023      	str	r3, [r4, #0]
 8004a58:	04cb      	lsls	r3, r1, #19
 8004a5a:	d505      	bpl.n	8004a68 <__sflush_r+0x80>
 8004a5c:	1c43      	adds	r3, r0, #1
 8004a5e:	d102      	bne.n	8004a66 <__sflush_r+0x7e>
 8004a60:	682b      	ldr	r3, [r5, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d100      	bne.n	8004a68 <__sflush_r+0x80>
 8004a66:	6560      	str	r0, [r4, #84]	; 0x54
 8004a68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a6a:	602e      	str	r6, [r5, #0]
 8004a6c:	2900      	cmp	r1, #0
 8004a6e:	d0c7      	beq.n	8004a00 <__sflush_r+0x18>
 8004a70:	0023      	movs	r3, r4
 8004a72:	3344      	adds	r3, #68	; 0x44
 8004a74:	4299      	cmp	r1, r3
 8004a76:	d002      	beq.n	8004a7e <__sflush_r+0x96>
 8004a78:	0028      	movs	r0, r5
 8004a7a:	f000 f9d7 	bl	8004e2c <_free_r>
 8004a7e:	2000      	movs	r0, #0
 8004a80:	6360      	str	r0, [r4, #52]	; 0x34
 8004a82:	e7be      	b.n	8004a02 <__sflush_r+0x1a>
 8004a84:	2301      	movs	r3, #1
 8004a86:	0028      	movs	r0, r5
 8004a88:	47b8      	blx	r7
 8004a8a:	1c43      	adds	r3, r0, #1
 8004a8c:	d1c6      	bne.n	8004a1c <__sflush_r+0x34>
 8004a8e:	682b      	ldr	r3, [r5, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d0c3      	beq.n	8004a1c <__sflush_r+0x34>
 8004a94:	2b1d      	cmp	r3, #29
 8004a96:	d001      	beq.n	8004a9c <__sflush_r+0xb4>
 8004a98:	2b16      	cmp	r3, #22
 8004a9a:	d101      	bne.n	8004aa0 <__sflush_r+0xb8>
 8004a9c:	602e      	str	r6, [r5, #0]
 8004a9e:	e7af      	b.n	8004a00 <__sflush_r+0x18>
 8004aa0:	2340      	movs	r3, #64	; 0x40
 8004aa2:	89a2      	ldrh	r2, [r4, #12]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	81a3      	strh	r3, [r4, #12]
 8004aa8:	e7ab      	b.n	8004a02 <__sflush_r+0x1a>
 8004aaa:	2340      	movs	r3, #64	; 0x40
 8004aac:	430b      	orrs	r3, r1
 8004aae:	2001      	movs	r0, #1
 8004ab0:	81a3      	strh	r3, [r4, #12]
 8004ab2:	4240      	negs	r0, r0
 8004ab4:	e7a5      	b.n	8004a02 <__sflush_r+0x1a>
 8004ab6:	690f      	ldr	r7, [r1, #16]
 8004ab8:	2f00      	cmp	r7, #0
 8004aba:	d0a1      	beq.n	8004a00 <__sflush_r+0x18>
 8004abc:	680b      	ldr	r3, [r1, #0]
 8004abe:	600f      	str	r7, [r1, #0]
 8004ac0:	1bdb      	subs	r3, r3, r7
 8004ac2:	9301      	str	r3, [sp, #4]
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	0792      	lsls	r2, r2, #30
 8004ac8:	d100      	bne.n	8004acc <__sflush_r+0xe4>
 8004aca:	694b      	ldr	r3, [r1, #20]
 8004acc:	60a3      	str	r3, [r4, #8]
 8004ace:	9b01      	ldr	r3, [sp, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	dc00      	bgt.n	8004ad6 <__sflush_r+0xee>
 8004ad4:	e794      	b.n	8004a00 <__sflush_r+0x18>
 8004ad6:	9b01      	ldr	r3, [sp, #4]
 8004ad8:	003a      	movs	r2, r7
 8004ada:	6a21      	ldr	r1, [r4, #32]
 8004adc:	0028      	movs	r0, r5
 8004ade:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ae0:	47b0      	blx	r6
 8004ae2:	2800      	cmp	r0, #0
 8004ae4:	dc03      	bgt.n	8004aee <__sflush_r+0x106>
 8004ae6:	2340      	movs	r3, #64	; 0x40
 8004ae8:	89a2      	ldrh	r2, [r4, #12]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	e7df      	b.n	8004aae <__sflush_r+0xc6>
 8004aee:	9b01      	ldr	r3, [sp, #4]
 8004af0:	183f      	adds	r7, r7, r0
 8004af2:	1a1b      	subs	r3, r3, r0
 8004af4:	9301      	str	r3, [sp, #4]
 8004af6:	e7ea      	b.n	8004ace <__sflush_r+0xe6>
 8004af8:	20400001 	.word	0x20400001

08004afc <_fflush_r>:
 8004afc:	690b      	ldr	r3, [r1, #16]
 8004afe:	b570      	push	{r4, r5, r6, lr}
 8004b00:	0005      	movs	r5, r0
 8004b02:	000c      	movs	r4, r1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <_fflush_r+0x10>
 8004b08:	2000      	movs	r0, #0
 8004b0a:	bd70      	pop	{r4, r5, r6, pc}
 8004b0c:	2800      	cmp	r0, #0
 8004b0e:	d004      	beq.n	8004b1a <_fflush_r+0x1e>
 8004b10:	6983      	ldr	r3, [r0, #24]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <_fflush_r+0x1e>
 8004b16:	f000 f85f 	bl	8004bd8 <__sinit>
 8004b1a:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <_fflush_r+0x4c>)
 8004b1c:	429c      	cmp	r4, r3
 8004b1e:	d109      	bne.n	8004b34 <_fflush_r+0x38>
 8004b20:	686c      	ldr	r4, [r5, #4]
 8004b22:	220c      	movs	r2, #12
 8004b24:	5ea3      	ldrsh	r3, [r4, r2]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0ee      	beq.n	8004b08 <_fflush_r+0xc>
 8004b2a:	0021      	movs	r1, r4
 8004b2c:	0028      	movs	r0, r5
 8004b2e:	f7ff ff5b 	bl	80049e8 <__sflush_r>
 8004b32:	e7ea      	b.n	8004b0a <_fflush_r+0xe>
 8004b34:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <_fflush_r+0x50>)
 8004b36:	429c      	cmp	r4, r3
 8004b38:	d101      	bne.n	8004b3e <_fflush_r+0x42>
 8004b3a:	68ac      	ldr	r4, [r5, #8]
 8004b3c:	e7f1      	b.n	8004b22 <_fflush_r+0x26>
 8004b3e:	4b04      	ldr	r3, [pc, #16]	; (8004b50 <_fflush_r+0x54>)
 8004b40:	429c      	cmp	r4, r3
 8004b42:	d1ee      	bne.n	8004b22 <_fflush_r+0x26>
 8004b44:	68ec      	ldr	r4, [r5, #12]
 8004b46:	e7ec      	b.n	8004b22 <_fflush_r+0x26>
 8004b48:	0800602c 	.word	0x0800602c
 8004b4c:	0800604c 	.word	0x0800604c
 8004b50:	0800600c 	.word	0x0800600c

08004b54 <std>:
 8004b54:	2300      	movs	r3, #0
 8004b56:	b510      	push	{r4, lr}
 8004b58:	0004      	movs	r4, r0
 8004b5a:	6003      	str	r3, [r0, #0]
 8004b5c:	6043      	str	r3, [r0, #4]
 8004b5e:	6083      	str	r3, [r0, #8]
 8004b60:	8181      	strh	r1, [r0, #12]
 8004b62:	6643      	str	r3, [r0, #100]	; 0x64
 8004b64:	81c2      	strh	r2, [r0, #14]
 8004b66:	6103      	str	r3, [r0, #16]
 8004b68:	6143      	str	r3, [r0, #20]
 8004b6a:	6183      	str	r3, [r0, #24]
 8004b6c:	0019      	movs	r1, r3
 8004b6e:	2208      	movs	r2, #8
 8004b70:	305c      	adds	r0, #92	; 0x5c
 8004b72:	f7ff fd39 	bl	80045e8 <memset>
 8004b76:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <std+0x38>)
 8004b78:	6224      	str	r4, [r4, #32]
 8004b7a:	6263      	str	r3, [r4, #36]	; 0x24
 8004b7c:	4b04      	ldr	r3, [pc, #16]	; (8004b90 <std+0x3c>)
 8004b7e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b80:	4b04      	ldr	r3, [pc, #16]	; (8004b94 <std+0x40>)
 8004b82:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b84:	4b04      	ldr	r3, [pc, #16]	; (8004b98 <std+0x44>)
 8004b86:	6323      	str	r3, [r4, #48]	; 0x30
 8004b88:	bd10      	pop	{r4, pc}
 8004b8a:	46c0      	nop			; (mov r8, r8)
 8004b8c:	08005835 	.word	0x08005835
 8004b90:	0800585d 	.word	0x0800585d
 8004b94:	08005895 	.word	0x08005895
 8004b98:	080058c1 	.word	0x080058c1

08004b9c <_cleanup_r>:
 8004b9c:	b510      	push	{r4, lr}
 8004b9e:	4902      	ldr	r1, [pc, #8]	; (8004ba8 <_cleanup_r+0xc>)
 8004ba0:	f000 f88c 	bl	8004cbc <_fwalk_reent>
 8004ba4:	bd10      	pop	{r4, pc}
 8004ba6:	46c0      	nop			; (mov r8, r8)
 8004ba8:	08004afd 	.word	0x08004afd

08004bac <__sfmoreglue>:
 8004bac:	b570      	push	{r4, r5, r6, lr}
 8004bae:	2568      	movs	r5, #104	; 0x68
 8004bb0:	1e4a      	subs	r2, r1, #1
 8004bb2:	4355      	muls	r5, r2
 8004bb4:	000e      	movs	r6, r1
 8004bb6:	0029      	movs	r1, r5
 8004bb8:	3174      	adds	r1, #116	; 0x74
 8004bba:	f000 f981 	bl	8004ec0 <_malloc_r>
 8004bbe:	1e04      	subs	r4, r0, #0
 8004bc0:	d008      	beq.n	8004bd4 <__sfmoreglue+0x28>
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	002a      	movs	r2, r5
 8004bc6:	6001      	str	r1, [r0, #0]
 8004bc8:	6046      	str	r6, [r0, #4]
 8004bca:	300c      	adds	r0, #12
 8004bcc:	60a0      	str	r0, [r4, #8]
 8004bce:	3268      	adds	r2, #104	; 0x68
 8004bd0:	f7ff fd0a 	bl	80045e8 <memset>
 8004bd4:	0020      	movs	r0, r4
 8004bd6:	bd70      	pop	{r4, r5, r6, pc}

08004bd8 <__sinit>:
 8004bd8:	6983      	ldr	r3, [r0, #24]
 8004bda:	b513      	push	{r0, r1, r4, lr}
 8004bdc:	0004      	movs	r4, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d128      	bne.n	8004c34 <__sinit+0x5c>
 8004be2:	6483      	str	r3, [r0, #72]	; 0x48
 8004be4:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004be6:	6503      	str	r3, [r0, #80]	; 0x50
 8004be8:	4b13      	ldr	r3, [pc, #76]	; (8004c38 <__sinit+0x60>)
 8004bea:	4a14      	ldr	r2, [pc, #80]	; (8004c3c <__sinit+0x64>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6282      	str	r2, [r0, #40]	; 0x28
 8004bf0:	9301      	str	r3, [sp, #4]
 8004bf2:	4298      	cmp	r0, r3
 8004bf4:	d101      	bne.n	8004bfa <__sinit+0x22>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	6183      	str	r3, [r0, #24]
 8004bfa:	0020      	movs	r0, r4
 8004bfc:	f000 f820 	bl	8004c40 <__sfp>
 8004c00:	6060      	str	r0, [r4, #4]
 8004c02:	0020      	movs	r0, r4
 8004c04:	f000 f81c 	bl	8004c40 <__sfp>
 8004c08:	60a0      	str	r0, [r4, #8]
 8004c0a:	0020      	movs	r0, r4
 8004c0c:	f000 f818 	bl	8004c40 <__sfp>
 8004c10:	2200      	movs	r2, #0
 8004c12:	60e0      	str	r0, [r4, #12]
 8004c14:	2104      	movs	r1, #4
 8004c16:	6860      	ldr	r0, [r4, #4]
 8004c18:	f7ff ff9c 	bl	8004b54 <std>
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	2109      	movs	r1, #9
 8004c20:	68a0      	ldr	r0, [r4, #8]
 8004c22:	f7ff ff97 	bl	8004b54 <std>
 8004c26:	2202      	movs	r2, #2
 8004c28:	2112      	movs	r1, #18
 8004c2a:	68e0      	ldr	r0, [r4, #12]
 8004c2c:	f7ff ff92 	bl	8004b54 <std>
 8004c30:	2301      	movs	r3, #1
 8004c32:	61a3      	str	r3, [r4, #24]
 8004c34:	bd13      	pop	{r0, r1, r4, pc}
 8004c36:	46c0      	nop			; (mov r8, r8)
 8004c38:	08006008 	.word	0x08006008
 8004c3c:	08004b9d 	.word	0x08004b9d

08004c40 <__sfp>:
 8004c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c42:	4b1c      	ldr	r3, [pc, #112]	; (8004cb4 <__sfp+0x74>)
 8004c44:	0007      	movs	r7, r0
 8004c46:	681e      	ldr	r6, [r3, #0]
 8004c48:	69b3      	ldr	r3, [r6, #24]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d102      	bne.n	8004c54 <__sfp+0x14>
 8004c4e:	0030      	movs	r0, r6
 8004c50:	f7ff ffc2 	bl	8004bd8 <__sinit>
 8004c54:	3648      	adds	r6, #72	; 0x48
 8004c56:	68b4      	ldr	r4, [r6, #8]
 8004c58:	6873      	ldr	r3, [r6, #4]
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	d504      	bpl.n	8004c68 <__sfp+0x28>
 8004c5e:	6833      	ldr	r3, [r6, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d007      	beq.n	8004c74 <__sfp+0x34>
 8004c64:	6836      	ldr	r6, [r6, #0]
 8004c66:	e7f6      	b.n	8004c56 <__sfp+0x16>
 8004c68:	220c      	movs	r2, #12
 8004c6a:	5ea5      	ldrsh	r5, [r4, r2]
 8004c6c:	2d00      	cmp	r5, #0
 8004c6e:	d00d      	beq.n	8004c8c <__sfp+0x4c>
 8004c70:	3468      	adds	r4, #104	; 0x68
 8004c72:	e7f2      	b.n	8004c5a <__sfp+0x1a>
 8004c74:	2104      	movs	r1, #4
 8004c76:	0038      	movs	r0, r7
 8004c78:	f7ff ff98 	bl	8004bac <__sfmoreglue>
 8004c7c:	6030      	str	r0, [r6, #0]
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	d1f0      	bne.n	8004c64 <__sfp+0x24>
 8004c82:	230c      	movs	r3, #12
 8004c84:	0004      	movs	r4, r0
 8004c86:	603b      	str	r3, [r7, #0]
 8004c88:	0020      	movs	r0, r4
 8004c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c8c:	0020      	movs	r0, r4
 8004c8e:	4b0a      	ldr	r3, [pc, #40]	; (8004cb8 <__sfp+0x78>)
 8004c90:	6665      	str	r5, [r4, #100]	; 0x64
 8004c92:	6025      	str	r5, [r4, #0]
 8004c94:	6065      	str	r5, [r4, #4]
 8004c96:	60a5      	str	r5, [r4, #8]
 8004c98:	60e3      	str	r3, [r4, #12]
 8004c9a:	6125      	str	r5, [r4, #16]
 8004c9c:	6165      	str	r5, [r4, #20]
 8004c9e:	61a5      	str	r5, [r4, #24]
 8004ca0:	2208      	movs	r2, #8
 8004ca2:	0029      	movs	r1, r5
 8004ca4:	305c      	adds	r0, #92	; 0x5c
 8004ca6:	f7ff fc9f 	bl	80045e8 <memset>
 8004caa:	6365      	str	r5, [r4, #52]	; 0x34
 8004cac:	63a5      	str	r5, [r4, #56]	; 0x38
 8004cae:	64a5      	str	r5, [r4, #72]	; 0x48
 8004cb0:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004cb2:	e7e9      	b.n	8004c88 <__sfp+0x48>
 8004cb4:	08006008 	.word	0x08006008
 8004cb8:	ffff0001 	.word	0xffff0001

08004cbc <_fwalk_reent>:
 8004cbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cbe:	0004      	movs	r4, r0
 8004cc0:	0007      	movs	r7, r0
 8004cc2:	2600      	movs	r6, #0
 8004cc4:	9101      	str	r1, [sp, #4]
 8004cc6:	3448      	adds	r4, #72	; 0x48
 8004cc8:	2c00      	cmp	r4, #0
 8004cca:	d101      	bne.n	8004cd0 <_fwalk_reent+0x14>
 8004ccc:	0030      	movs	r0, r6
 8004cce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004cd0:	6863      	ldr	r3, [r4, #4]
 8004cd2:	68a5      	ldr	r5, [r4, #8]
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	9b00      	ldr	r3, [sp, #0]
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	d501      	bpl.n	8004ce2 <_fwalk_reent+0x26>
 8004cde:	6824      	ldr	r4, [r4, #0]
 8004ce0:	e7f2      	b.n	8004cc8 <_fwalk_reent+0xc>
 8004ce2:	89ab      	ldrh	r3, [r5, #12]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d908      	bls.n	8004cfa <_fwalk_reent+0x3e>
 8004ce8:	220e      	movs	r2, #14
 8004cea:	5eab      	ldrsh	r3, [r5, r2]
 8004cec:	3301      	adds	r3, #1
 8004cee:	d004      	beq.n	8004cfa <_fwalk_reent+0x3e>
 8004cf0:	0029      	movs	r1, r5
 8004cf2:	0038      	movs	r0, r7
 8004cf4:	9b01      	ldr	r3, [sp, #4]
 8004cf6:	4798      	blx	r3
 8004cf8:	4306      	orrs	r6, r0
 8004cfa:	3568      	adds	r5, #104	; 0x68
 8004cfc:	e7eb      	b.n	8004cd6 <_fwalk_reent+0x1a>
	...

08004d00 <__locale_ctype_ptr>:
 8004d00:	4b04      	ldr	r3, [pc, #16]	; (8004d14 <__locale_ctype_ptr+0x14>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d100      	bne.n	8004d0c <__locale_ctype_ptr+0xc>
 8004d0a:	4b03      	ldr	r3, [pc, #12]	; (8004d18 <__locale_ctype_ptr+0x18>)
 8004d0c:	33ec      	adds	r3, #236	; 0xec
 8004d0e:	6818      	ldr	r0, [r3, #0]
 8004d10:	4770      	bx	lr
 8004d12:	46c0      	nop			; (mov r8, r8)
 8004d14:	20000010 	.word	0x20000010
 8004d18:	20000074 	.word	0x20000074

08004d1c <__swhatbuf_r>:
 8004d1c:	b570      	push	{r4, r5, r6, lr}
 8004d1e:	000e      	movs	r6, r1
 8004d20:	001d      	movs	r5, r3
 8004d22:	230e      	movs	r3, #14
 8004d24:	5ec9      	ldrsh	r1, [r1, r3]
 8004d26:	b096      	sub	sp, #88	; 0x58
 8004d28:	0014      	movs	r4, r2
 8004d2a:	2900      	cmp	r1, #0
 8004d2c:	da07      	bge.n	8004d3e <__swhatbuf_r+0x22>
 8004d2e:	2300      	movs	r3, #0
 8004d30:	602b      	str	r3, [r5, #0]
 8004d32:	89b3      	ldrh	r3, [r6, #12]
 8004d34:	061b      	lsls	r3, r3, #24
 8004d36:	d411      	bmi.n	8004d5c <__swhatbuf_r+0x40>
 8004d38:	2380      	movs	r3, #128	; 0x80
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	e00f      	b.n	8004d5e <__swhatbuf_r+0x42>
 8004d3e:	466a      	mov	r2, sp
 8004d40:	f000 fdf6 	bl	8005930 <_fstat_r>
 8004d44:	2800      	cmp	r0, #0
 8004d46:	dbf2      	blt.n	8004d2e <__swhatbuf_r+0x12>
 8004d48:	22f0      	movs	r2, #240	; 0xf0
 8004d4a:	9b01      	ldr	r3, [sp, #4]
 8004d4c:	0212      	lsls	r2, r2, #8
 8004d4e:	4013      	ands	r3, r2
 8004d50:	4a05      	ldr	r2, [pc, #20]	; (8004d68 <__swhatbuf_r+0x4c>)
 8004d52:	189b      	adds	r3, r3, r2
 8004d54:	425a      	negs	r2, r3
 8004d56:	4153      	adcs	r3, r2
 8004d58:	602b      	str	r3, [r5, #0]
 8004d5a:	e7ed      	b.n	8004d38 <__swhatbuf_r+0x1c>
 8004d5c:	2340      	movs	r3, #64	; 0x40
 8004d5e:	2000      	movs	r0, #0
 8004d60:	6023      	str	r3, [r4, #0]
 8004d62:	b016      	add	sp, #88	; 0x58
 8004d64:	bd70      	pop	{r4, r5, r6, pc}
 8004d66:	46c0      	nop			; (mov r8, r8)
 8004d68:	ffffe000 	.word	0xffffe000

08004d6c <__smakebuf_r>:
 8004d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d6e:	2602      	movs	r6, #2
 8004d70:	898b      	ldrh	r3, [r1, #12]
 8004d72:	0005      	movs	r5, r0
 8004d74:	000c      	movs	r4, r1
 8004d76:	4233      	tst	r3, r6
 8004d78:	d006      	beq.n	8004d88 <__smakebuf_r+0x1c>
 8004d7a:	0023      	movs	r3, r4
 8004d7c:	3347      	adds	r3, #71	; 0x47
 8004d7e:	6023      	str	r3, [r4, #0]
 8004d80:	6123      	str	r3, [r4, #16]
 8004d82:	2301      	movs	r3, #1
 8004d84:	6163      	str	r3, [r4, #20]
 8004d86:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004d88:	ab01      	add	r3, sp, #4
 8004d8a:	466a      	mov	r2, sp
 8004d8c:	f7ff ffc6 	bl	8004d1c <__swhatbuf_r>
 8004d90:	9900      	ldr	r1, [sp, #0]
 8004d92:	0007      	movs	r7, r0
 8004d94:	0028      	movs	r0, r5
 8004d96:	f000 f893 	bl	8004ec0 <_malloc_r>
 8004d9a:	2800      	cmp	r0, #0
 8004d9c:	d108      	bne.n	8004db0 <__smakebuf_r+0x44>
 8004d9e:	220c      	movs	r2, #12
 8004da0:	5ea3      	ldrsh	r3, [r4, r2]
 8004da2:	059a      	lsls	r2, r3, #22
 8004da4:	d4ef      	bmi.n	8004d86 <__smakebuf_r+0x1a>
 8004da6:	2203      	movs	r2, #3
 8004da8:	4393      	bics	r3, r2
 8004daa:	431e      	orrs	r6, r3
 8004dac:	81a6      	strh	r6, [r4, #12]
 8004dae:	e7e4      	b.n	8004d7a <__smakebuf_r+0xe>
 8004db0:	4b0f      	ldr	r3, [pc, #60]	; (8004df0 <__smakebuf_r+0x84>)
 8004db2:	62ab      	str	r3, [r5, #40]	; 0x28
 8004db4:	2380      	movs	r3, #128	; 0x80
 8004db6:	89a2      	ldrh	r2, [r4, #12]
 8004db8:	6020      	str	r0, [r4, #0]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	81a3      	strh	r3, [r4, #12]
 8004dbe:	9b00      	ldr	r3, [sp, #0]
 8004dc0:	6120      	str	r0, [r4, #16]
 8004dc2:	6163      	str	r3, [r4, #20]
 8004dc4:	9b01      	ldr	r3, [sp, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00d      	beq.n	8004de6 <__smakebuf_r+0x7a>
 8004dca:	230e      	movs	r3, #14
 8004dcc:	5ee1      	ldrsh	r1, [r4, r3]
 8004dce:	0028      	movs	r0, r5
 8004dd0:	f000 fdc0 	bl	8005954 <_isatty_r>
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	d006      	beq.n	8004de6 <__smakebuf_r+0x7a>
 8004dd8:	2203      	movs	r2, #3
 8004dda:	89a3      	ldrh	r3, [r4, #12]
 8004ddc:	4393      	bics	r3, r2
 8004dde:	001a      	movs	r2, r3
 8004de0:	2301      	movs	r3, #1
 8004de2:	4313      	orrs	r3, r2
 8004de4:	81a3      	strh	r3, [r4, #12]
 8004de6:	89a0      	ldrh	r0, [r4, #12]
 8004de8:	4338      	orrs	r0, r7
 8004dea:	81a0      	strh	r0, [r4, #12]
 8004dec:	e7cb      	b.n	8004d86 <__smakebuf_r+0x1a>
 8004dee:	46c0      	nop			; (mov r8, r8)
 8004df0:	08004b9d 	.word	0x08004b9d

08004df4 <malloc>:
 8004df4:	b510      	push	{r4, lr}
 8004df6:	4b03      	ldr	r3, [pc, #12]	; (8004e04 <malloc+0x10>)
 8004df8:	0001      	movs	r1, r0
 8004dfa:	6818      	ldr	r0, [r3, #0]
 8004dfc:	f000 f860 	bl	8004ec0 <_malloc_r>
 8004e00:	bd10      	pop	{r4, pc}
 8004e02:	46c0      	nop			; (mov r8, r8)
 8004e04:	20000010 	.word	0x20000010

08004e08 <__ascii_mbtowc>:
 8004e08:	b082      	sub	sp, #8
 8004e0a:	2900      	cmp	r1, #0
 8004e0c:	d100      	bne.n	8004e10 <__ascii_mbtowc+0x8>
 8004e0e:	a901      	add	r1, sp, #4
 8004e10:	1e10      	subs	r0, r2, #0
 8004e12:	d006      	beq.n	8004e22 <__ascii_mbtowc+0x1a>
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d006      	beq.n	8004e26 <__ascii_mbtowc+0x1e>
 8004e18:	7813      	ldrb	r3, [r2, #0]
 8004e1a:	600b      	str	r3, [r1, #0]
 8004e1c:	7810      	ldrb	r0, [r2, #0]
 8004e1e:	1e43      	subs	r3, r0, #1
 8004e20:	4198      	sbcs	r0, r3
 8004e22:	b002      	add	sp, #8
 8004e24:	4770      	bx	lr
 8004e26:	2002      	movs	r0, #2
 8004e28:	4240      	negs	r0, r0
 8004e2a:	e7fa      	b.n	8004e22 <__ascii_mbtowc+0x1a>

08004e2c <_free_r>:
 8004e2c:	b570      	push	{r4, r5, r6, lr}
 8004e2e:	0005      	movs	r5, r0
 8004e30:	2900      	cmp	r1, #0
 8004e32:	d010      	beq.n	8004e56 <_free_r+0x2a>
 8004e34:	1f0c      	subs	r4, r1, #4
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	da00      	bge.n	8004e3e <_free_r+0x12>
 8004e3c:	18e4      	adds	r4, r4, r3
 8004e3e:	0028      	movs	r0, r5
 8004e40:	f000 fdd5 	bl	80059ee <__malloc_lock>
 8004e44:	4a1d      	ldr	r2, [pc, #116]	; (8004ebc <_free_r+0x90>)
 8004e46:	6813      	ldr	r3, [r2, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d105      	bne.n	8004e58 <_free_r+0x2c>
 8004e4c:	6063      	str	r3, [r4, #4]
 8004e4e:	6014      	str	r4, [r2, #0]
 8004e50:	0028      	movs	r0, r5
 8004e52:	f000 fdcd 	bl	80059f0 <__malloc_unlock>
 8004e56:	bd70      	pop	{r4, r5, r6, pc}
 8004e58:	42a3      	cmp	r3, r4
 8004e5a:	d909      	bls.n	8004e70 <_free_r+0x44>
 8004e5c:	6821      	ldr	r1, [r4, #0]
 8004e5e:	1860      	adds	r0, r4, r1
 8004e60:	4283      	cmp	r3, r0
 8004e62:	d1f3      	bne.n	8004e4c <_free_r+0x20>
 8004e64:	6818      	ldr	r0, [r3, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	1841      	adds	r1, r0, r1
 8004e6a:	6021      	str	r1, [r4, #0]
 8004e6c:	e7ee      	b.n	8004e4c <_free_r+0x20>
 8004e6e:	0013      	movs	r3, r2
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	2a00      	cmp	r2, #0
 8004e74:	d001      	beq.n	8004e7a <_free_r+0x4e>
 8004e76:	42a2      	cmp	r2, r4
 8004e78:	d9f9      	bls.n	8004e6e <_free_r+0x42>
 8004e7a:	6819      	ldr	r1, [r3, #0]
 8004e7c:	1858      	adds	r0, r3, r1
 8004e7e:	42a0      	cmp	r0, r4
 8004e80:	d10b      	bne.n	8004e9a <_free_r+0x6e>
 8004e82:	6820      	ldr	r0, [r4, #0]
 8004e84:	1809      	adds	r1, r1, r0
 8004e86:	1858      	adds	r0, r3, r1
 8004e88:	6019      	str	r1, [r3, #0]
 8004e8a:	4282      	cmp	r2, r0
 8004e8c:	d1e0      	bne.n	8004e50 <_free_r+0x24>
 8004e8e:	6810      	ldr	r0, [r2, #0]
 8004e90:	6852      	ldr	r2, [r2, #4]
 8004e92:	1841      	adds	r1, r0, r1
 8004e94:	6019      	str	r1, [r3, #0]
 8004e96:	605a      	str	r2, [r3, #4]
 8004e98:	e7da      	b.n	8004e50 <_free_r+0x24>
 8004e9a:	42a0      	cmp	r0, r4
 8004e9c:	d902      	bls.n	8004ea4 <_free_r+0x78>
 8004e9e:	230c      	movs	r3, #12
 8004ea0:	602b      	str	r3, [r5, #0]
 8004ea2:	e7d5      	b.n	8004e50 <_free_r+0x24>
 8004ea4:	6821      	ldr	r1, [r4, #0]
 8004ea6:	1860      	adds	r0, r4, r1
 8004ea8:	4282      	cmp	r2, r0
 8004eaa:	d103      	bne.n	8004eb4 <_free_r+0x88>
 8004eac:	6810      	ldr	r0, [r2, #0]
 8004eae:	6852      	ldr	r2, [r2, #4]
 8004eb0:	1841      	adds	r1, r0, r1
 8004eb2:	6021      	str	r1, [r4, #0]
 8004eb4:	6062      	str	r2, [r4, #4]
 8004eb6:	605c      	str	r4, [r3, #4]
 8004eb8:	e7ca      	b.n	8004e50 <_free_r+0x24>
 8004eba:	46c0      	nop			; (mov r8, r8)
 8004ebc:	200002cc 	.word	0x200002cc

08004ec0 <_malloc_r>:
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	b570      	push	{r4, r5, r6, lr}
 8004ec4:	1ccd      	adds	r5, r1, #3
 8004ec6:	439d      	bics	r5, r3
 8004ec8:	3508      	adds	r5, #8
 8004eca:	0006      	movs	r6, r0
 8004ecc:	2d0c      	cmp	r5, #12
 8004ece:	d21e      	bcs.n	8004f0e <_malloc_r+0x4e>
 8004ed0:	250c      	movs	r5, #12
 8004ed2:	42a9      	cmp	r1, r5
 8004ed4:	d81d      	bhi.n	8004f12 <_malloc_r+0x52>
 8004ed6:	0030      	movs	r0, r6
 8004ed8:	f000 fd89 	bl	80059ee <__malloc_lock>
 8004edc:	4a25      	ldr	r2, [pc, #148]	; (8004f74 <_malloc_r+0xb4>)
 8004ede:	6814      	ldr	r4, [r2, #0]
 8004ee0:	0021      	movs	r1, r4
 8004ee2:	2900      	cmp	r1, #0
 8004ee4:	d119      	bne.n	8004f1a <_malloc_r+0x5a>
 8004ee6:	4c24      	ldr	r4, [pc, #144]	; (8004f78 <_malloc_r+0xb8>)
 8004ee8:	6823      	ldr	r3, [r4, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d103      	bne.n	8004ef6 <_malloc_r+0x36>
 8004eee:	0030      	movs	r0, r6
 8004ef0:	f000 fc8e 	bl	8005810 <_sbrk_r>
 8004ef4:	6020      	str	r0, [r4, #0]
 8004ef6:	0029      	movs	r1, r5
 8004ef8:	0030      	movs	r0, r6
 8004efa:	f000 fc89 	bl	8005810 <_sbrk_r>
 8004efe:	1c43      	adds	r3, r0, #1
 8004f00:	d12b      	bne.n	8004f5a <_malloc_r+0x9a>
 8004f02:	230c      	movs	r3, #12
 8004f04:	0030      	movs	r0, r6
 8004f06:	6033      	str	r3, [r6, #0]
 8004f08:	f000 fd72 	bl	80059f0 <__malloc_unlock>
 8004f0c:	e003      	b.n	8004f16 <_malloc_r+0x56>
 8004f0e:	2d00      	cmp	r5, #0
 8004f10:	dadf      	bge.n	8004ed2 <_malloc_r+0x12>
 8004f12:	230c      	movs	r3, #12
 8004f14:	6033      	str	r3, [r6, #0]
 8004f16:	2000      	movs	r0, #0
 8004f18:	bd70      	pop	{r4, r5, r6, pc}
 8004f1a:	680b      	ldr	r3, [r1, #0]
 8004f1c:	1b5b      	subs	r3, r3, r5
 8004f1e:	d419      	bmi.n	8004f54 <_malloc_r+0x94>
 8004f20:	2b0b      	cmp	r3, #11
 8004f22:	d903      	bls.n	8004f2c <_malloc_r+0x6c>
 8004f24:	600b      	str	r3, [r1, #0]
 8004f26:	18cc      	adds	r4, r1, r3
 8004f28:	6025      	str	r5, [r4, #0]
 8004f2a:	e003      	b.n	8004f34 <_malloc_r+0x74>
 8004f2c:	684b      	ldr	r3, [r1, #4]
 8004f2e:	428c      	cmp	r4, r1
 8004f30:	d10d      	bne.n	8004f4e <_malloc_r+0x8e>
 8004f32:	6013      	str	r3, [r2, #0]
 8004f34:	0030      	movs	r0, r6
 8004f36:	f000 fd5b 	bl	80059f0 <__malloc_unlock>
 8004f3a:	0020      	movs	r0, r4
 8004f3c:	2207      	movs	r2, #7
 8004f3e:	300b      	adds	r0, #11
 8004f40:	1d23      	adds	r3, r4, #4
 8004f42:	4390      	bics	r0, r2
 8004f44:	1ac3      	subs	r3, r0, r3
 8004f46:	d0e7      	beq.n	8004f18 <_malloc_r+0x58>
 8004f48:	425a      	negs	r2, r3
 8004f4a:	50e2      	str	r2, [r4, r3]
 8004f4c:	e7e4      	b.n	8004f18 <_malloc_r+0x58>
 8004f4e:	6063      	str	r3, [r4, #4]
 8004f50:	000c      	movs	r4, r1
 8004f52:	e7ef      	b.n	8004f34 <_malloc_r+0x74>
 8004f54:	000c      	movs	r4, r1
 8004f56:	6849      	ldr	r1, [r1, #4]
 8004f58:	e7c3      	b.n	8004ee2 <_malloc_r+0x22>
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	1cc4      	adds	r4, r0, #3
 8004f5e:	439c      	bics	r4, r3
 8004f60:	42a0      	cmp	r0, r4
 8004f62:	d0e1      	beq.n	8004f28 <_malloc_r+0x68>
 8004f64:	1a21      	subs	r1, r4, r0
 8004f66:	0030      	movs	r0, r6
 8004f68:	f000 fc52 	bl	8005810 <_sbrk_r>
 8004f6c:	1c43      	adds	r3, r0, #1
 8004f6e:	d1db      	bne.n	8004f28 <_malloc_r+0x68>
 8004f70:	e7c7      	b.n	8004f02 <_malloc_r+0x42>
 8004f72:	46c0      	nop			; (mov r8, r8)
 8004f74:	200002cc 	.word	0x200002cc
 8004f78:	200002d0 	.word	0x200002d0

08004f7c <__ssputs_r>:
 8004f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f7e:	688e      	ldr	r6, [r1, #8]
 8004f80:	b085      	sub	sp, #20
 8004f82:	0007      	movs	r7, r0
 8004f84:	000c      	movs	r4, r1
 8004f86:	9203      	str	r2, [sp, #12]
 8004f88:	9301      	str	r3, [sp, #4]
 8004f8a:	429e      	cmp	r6, r3
 8004f8c:	d83c      	bhi.n	8005008 <__ssputs_r+0x8c>
 8004f8e:	2390      	movs	r3, #144	; 0x90
 8004f90:	898a      	ldrh	r2, [r1, #12]
 8004f92:	00db      	lsls	r3, r3, #3
 8004f94:	421a      	tst	r2, r3
 8004f96:	d034      	beq.n	8005002 <__ssputs_r+0x86>
 8004f98:	2503      	movs	r5, #3
 8004f9a:	6909      	ldr	r1, [r1, #16]
 8004f9c:	6823      	ldr	r3, [r4, #0]
 8004f9e:	1a5b      	subs	r3, r3, r1
 8004fa0:	9302      	str	r3, [sp, #8]
 8004fa2:	6963      	ldr	r3, [r4, #20]
 8004fa4:	9802      	ldr	r0, [sp, #8]
 8004fa6:	435d      	muls	r5, r3
 8004fa8:	0feb      	lsrs	r3, r5, #31
 8004faa:	195d      	adds	r5, r3, r5
 8004fac:	9b01      	ldr	r3, [sp, #4]
 8004fae:	106d      	asrs	r5, r5, #1
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	181b      	adds	r3, r3, r0
 8004fb4:	42ab      	cmp	r3, r5
 8004fb6:	d900      	bls.n	8004fba <__ssputs_r+0x3e>
 8004fb8:	001d      	movs	r5, r3
 8004fba:	0553      	lsls	r3, r2, #21
 8004fbc:	d532      	bpl.n	8005024 <__ssputs_r+0xa8>
 8004fbe:	0029      	movs	r1, r5
 8004fc0:	0038      	movs	r0, r7
 8004fc2:	f7ff ff7d 	bl	8004ec0 <_malloc_r>
 8004fc6:	1e06      	subs	r6, r0, #0
 8004fc8:	d109      	bne.n	8004fde <__ssputs_r+0x62>
 8004fca:	230c      	movs	r3, #12
 8004fcc:	603b      	str	r3, [r7, #0]
 8004fce:	2340      	movs	r3, #64	; 0x40
 8004fd0:	2001      	movs	r0, #1
 8004fd2:	89a2      	ldrh	r2, [r4, #12]
 8004fd4:	4240      	negs	r0, r0
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	81a3      	strh	r3, [r4, #12]
 8004fda:	b005      	add	sp, #20
 8004fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fde:	9a02      	ldr	r2, [sp, #8]
 8004fe0:	6921      	ldr	r1, [r4, #16]
 8004fe2:	f000 fce8 	bl	80059b6 <memcpy>
 8004fe6:	89a3      	ldrh	r3, [r4, #12]
 8004fe8:	4a14      	ldr	r2, [pc, #80]	; (800503c <__ssputs_r+0xc0>)
 8004fea:	401a      	ands	r2, r3
 8004fec:	2380      	movs	r3, #128	; 0x80
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	81a3      	strh	r3, [r4, #12]
 8004ff2:	9b02      	ldr	r3, [sp, #8]
 8004ff4:	6126      	str	r6, [r4, #16]
 8004ff6:	18f6      	adds	r6, r6, r3
 8004ff8:	6026      	str	r6, [r4, #0]
 8004ffa:	6165      	str	r5, [r4, #20]
 8004ffc:	9e01      	ldr	r6, [sp, #4]
 8004ffe:	1aed      	subs	r5, r5, r3
 8005000:	60a5      	str	r5, [r4, #8]
 8005002:	9b01      	ldr	r3, [sp, #4]
 8005004:	429e      	cmp	r6, r3
 8005006:	d900      	bls.n	800500a <__ssputs_r+0x8e>
 8005008:	9e01      	ldr	r6, [sp, #4]
 800500a:	0032      	movs	r2, r6
 800500c:	9903      	ldr	r1, [sp, #12]
 800500e:	6820      	ldr	r0, [r4, #0]
 8005010:	f000 fcda 	bl	80059c8 <memmove>
 8005014:	68a3      	ldr	r3, [r4, #8]
 8005016:	2000      	movs	r0, #0
 8005018:	1b9b      	subs	r3, r3, r6
 800501a:	60a3      	str	r3, [r4, #8]
 800501c:	6823      	ldr	r3, [r4, #0]
 800501e:	199e      	adds	r6, r3, r6
 8005020:	6026      	str	r6, [r4, #0]
 8005022:	e7da      	b.n	8004fda <__ssputs_r+0x5e>
 8005024:	002a      	movs	r2, r5
 8005026:	0038      	movs	r0, r7
 8005028:	f000 fce3 	bl	80059f2 <_realloc_r>
 800502c:	1e06      	subs	r6, r0, #0
 800502e:	d1e0      	bne.n	8004ff2 <__ssputs_r+0x76>
 8005030:	6921      	ldr	r1, [r4, #16]
 8005032:	0038      	movs	r0, r7
 8005034:	f7ff fefa 	bl	8004e2c <_free_r>
 8005038:	e7c7      	b.n	8004fca <__ssputs_r+0x4e>
 800503a:	46c0      	nop			; (mov r8, r8)
 800503c:	fffffb7f 	.word	0xfffffb7f

08005040 <_svfiprintf_r>:
 8005040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005042:	b0a1      	sub	sp, #132	; 0x84
 8005044:	9003      	str	r0, [sp, #12]
 8005046:	001d      	movs	r5, r3
 8005048:	898b      	ldrh	r3, [r1, #12]
 800504a:	000f      	movs	r7, r1
 800504c:	0016      	movs	r6, r2
 800504e:	061b      	lsls	r3, r3, #24
 8005050:	d511      	bpl.n	8005076 <_svfiprintf_r+0x36>
 8005052:	690b      	ldr	r3, [r1, #16]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10e      	bne.n	8005076 <_svfiprintf_r+0x36>
 8005058:	2140      	movs	r1, #64	; 0x40
 800505a:	f7ff ff31 	bl	8004ec0 <_malloc_r>
 800505e:	6038      	str	r0, [r7, #0]
 8005060:	6138      	str	r0, [r7, #16]
 8005062:	2800      	cmp	r0, #0
 8005064:	d105      	bne.n	8005072 <_svfiprintf_r+0x32>
 8005066:	230c      	movs	r3, #12
 8005068:	9a03      	ldr	r2, [sp, #12]
 800506a:	3801      	subs	r0, #1
 800506c:	6013      	str	r3, [r2, #0]
 800506e:	b021      	add	sp, #132	; 0x84
 8005070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005072:	2340      	movs	r3, #64	; 0x40
 8005074:	617b      	str	r3, [r7, #20]
 8005076:	2300      	movs	r3, #0
 8005078:	ac08      	add	r4, sp, #32
 800507a:	6163      	str	r3, [r4, #20]
 800507c:	3320      	adds	r3, #32
 800507e:	7663      	strb	r3, [r4, #25]
 8005080:	3310      	adds	r3, #16
 8005082:	76a3      	strb	r3, [r4, #26]
 8005084:	9507      	str	r5, [sp, #28]
 8005086:	0035      	movs	r5, r6
 8005088:	782b      	ldrb	r3, [r5, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <_svfiprintf_r+0x52>
 800508e:	2b25      	cmp	r3, #37	; 0x25
 8005090:	d146      	bne.n	8005120 <_svfiprintf_r+0xe0>
 8005092:	1bab      	subs	r3, r5, r6
 8005094:	9305      	str	r3, [sp, #20]
 8005096:	d00c      	beq.n	80050b2 <_svfiprintf_r+0x72>
 8005098:	0032      	movs	r2, r6
 800509a:	0039      	movs	r1, r7
 800509c:	9803      	ldr	r0, [sp, #12]
 800509e:	f7ff ff6d 	bl	8004f7c <__ssputs_r>
 80050a2:	1c43      	adds	r3, r0, #1
 80050a4:	d100      	bne.n	80050a8 <_svfiprintf_r+0x68>
 80050a6:	e0ae      	b.n	8005206 <_svfiprintf_r+0x1c6>
 80050a8:	6962      	ldr	r2, [r4, #20]
 80050aa:	9b05      	ldr	r3, [sp, #20]
 80050ac:	4694      	mov	ip, r2
 80050ae:	4463      	add	r3, ip
 80050b0:	6163      	str	r3, [r4, #20]
 80050b2:	782b      	ldrb	r3, [r5, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d100      	bne.n	80050ba <_svfiprintf_r+0x7a>
 80050b8:	e0a5      	b.n	8005206 <_svfiprintf_r+0x1c6>
 80050ba:	2201      	movs	r2, #1
 80050bc:	2300      	movs	r3, #0
 80050be:	4252      	negs	r2, r2
 80050c0:	6062      	str	r2, [r4, #4]
 80050c2:	a904      	add	r1, sp, #16
 80050c4:	3254      	adds	r2, #84	; 0x54
 80050c6:	1852      	adds	r2, r2, r1
 80050c8:	1c6e      	adds	r6, r5, #1
 80050ca:	6023      	str	r3, [r4, #0]
 80050cc:	60e3      	str	r3, [r4, #12]
 80050ce:	60a3      	str	r3, [r4, #8]
 80050d0:	7013      	strb	r3, [r2, #0]
 80050d2:	65a3      	str	r3, [r4, #88]	; 0x58
 80050d4:	7831      	ldrb	r1, [r6, #0]
 80050d6:	2205      	movs	r2, #5
 80050d8:	4853      	ldr	r0, [pc, #332]	; (8005228 <_svfiprintf_r+0x1e8>)
 80050da:	f000 fc61 	bl	80059a0 <memchr>
 80050de:	1c75      	adds	r5, r6, #1
 80050e0:	2800      	cmp	r0, #0
 80050e2:	d11f      	bne.n	8005124 <_svfiprintf_r+0xe4>
 80050e4:	6822      	ldr	r2, [r4, #0]
 80050e6:	06d3      	lsls	r3, r2, #27
 80050e8:	d504      	bpl.n	80050f4 <_svfiprintf_r+0xb4>
 80050ea:	2353      	movs	r3, #83	; 0x53
 80050ec:	a904      	add	r1, sp, #16
 80050ee:	185b      	adds	r3, r3, r1
 80050f0:	2120      	movs	r1, #32
 80050f2:	7019      	strb	r1, [r3, #0]
 80050f4:	0713      	lsls	r3, r2, #28
 80050f6:	d504      	bpl.n	8005102 <_svfiprintf_r+0xc2>
 80050f8:	2353      	movs	r3, #83	; 0x53
 80050fa:	a904      	add	r1, sp, #16
 80050fc:	185b      	adds	r3, r3, r1
 80050fe:	212b      	movs	r1, #43	; 0x2b
 8005100:	7019      	strb	r1, [r3, #0]
 8005102:	7833      	ldrb	r3, [r6, #0]
 8005104:	2b2a      	cmp	r3, #42	; 0x2a
 8005106:	d016      	beq.n	8005136 <_svfiprintf_r+0xf6>
 8005108:	0035      	movs	r5, r6
 800510a:	2100      	movs	r1, #0
 800510c:	200a      	movs	r0, #10
 800510e:	68e3      	ldr	r3, [r4, #12]
 8005110:	782a      	ldrb	r2, [r5, #0]
 8005112:	1c6e      	adds	r6, r5, #1
 8005114:	3a30      	subs	r2, #48	; 0x30
 8005116:	2a09      	cmp	r2, #9
 8005118:	d94e      	bls.n	80051b8 <_svfiprintf_r+0x178>
 800511a:	2900      	cmp	r1, #0
 800511c:	d018      	beq.n	8005150 <_svfiprintf_r+0x110>
 800511e:	e010      	b.n	8005142 <_svfiprintf_r+0x102>
 8005120:	3501      	adds	r5, #1
 8005122:	e7b1      	b.n	8005088 <_svfiprintf_r+0x48>
 8005124:	4b40      	ldr	r3, [pc, #256]	; (8005228 <_svfiprintf_r+0x1e8>)
 8005126:	6822      	ldr	r2, [r4, #0]
 8005128:	1ac0      	subs	r0, r0, r3
 800512a:	2301      	movs	r3, #1
 800512c:	4083      	lsls	r3, r0
 800512e:	4313      	orrs	r3, r2
 8005130:	6023      	str	r3, [r4, #0]
 8005132:	002e      	movs	r6, r5
 8005134:	e7ce      	b.n	80050d4 <_svfiprintf_r+0x94>
 8005136:	9b07      	ldr	r3, [sp, #28]
 8005138:	1d19      	adds	r1, r3, #4
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	9107      	str	r1, [sp, #28]
 800513e:	2b00      	cmp	r3, #0
 8005140:	db01      	blt.n	8005146 <_svfiprintf_r+0x106>
 8005142:	930b      	str	r3, [sp, #44]	; 0x2c
 8005144:	e004      	b.n	8005150 <_svfiprintf_r+0x110>
 8005146:	425b      	negs	r3, r3
 8005148:	60e3      	str	r3, [r4, #12]
 800514a:	2302      	movs	r3, #2
 800514c:	4313      	orrs	r3, r2
 800514e:	6023      	str	r3, [r4, #0]
 8005150:	782b      	ldrb	r3, [r5, #0]
 8005152:	2b2e      	cmp	r3, #46	; 0x2e
 8005154:	d10a      	bne.n	800516c <_svfiprintf_r+0x12c>
 8005156:	786b      	ldrb	r3, [r5, #1]
 8005158:	2b2a      	cmp	r3, #42	; 0x2a
 800515a:	d135      	bne.n	80051c8 <_svfiprintf_r+0x188>
 800515c:	9b07      	ldr	r3, [sp, #28]
 800515e:	3502      	adds	r5, #2
 8005160:	1d1a      	adds	r2, r3, #4
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	9207      	str	r2, [sp, #28]
 8005166:	2b00      	cmp	r3, #0
 8005168:	db2b      	blt.n	80051c2 <_svfiprintf_r+0x182>
 800516a:	9309      	str	r3, [sp, #36]	; 0x24
 800516c:	4e2f      	ldr	r6, [pc, #188]	; (800522c <_svfiprintf_r+0x1ec>)
 800516e:	7829      	ldrb	r1, [r5, #0]
 8005170:	2203      	movs	r2, #3
 8005172:	0030      	movs	r0, r6
 8005174:	f000 fc14 	bl	80059a0 <memchr>
 8005178:	2800      	cmp	r0, #0
 800517a:	d006      	beq.n	800518a <_svfiprintf_r+0x14a>
 800517c:	2340      	movs	r3, #64	; 0x40
 800517e:	1b80      	subs	r0, r0, r6
 8005180:	4083      	lsls	r3, r0
 8005182:	6822      	ldr	r2, [r4, #0]
 8005184:	3501      	adds	r5, #1
 8005186:	4313      	orrs	r3, r2
 8005188:	6023      	str	r3, [r4, #0]
 800518a:	7829      	ldrb	r1, [r5, #0]
 800518c:	2206      	movs	r2, #6
 800518e:	4828      	ldr	r0, [pc, #160]	; (8005230 <_svfiprintf_r+0x1f0>)
 8005190:	1c6e      	adds	r6, r5, #1
 8005192:	7621      	strb	r1, [r4, #24]
 8005194:	f000 fc04 	bl	80059a0 <memchr>
 8005198:	2800      	cmp	r0, #0
 800519a:	d03c      	beq.n	8005216 <_svfiprintf_r+0x1d6>
 800519c:	4b25      	ldr	r3, [pc, #148]	; (8005234 <_svfiprintf_r+0x1f4>)
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d125      	bne.n	80051ee <_svfiprintf_r+0x1ae>
 80051a2:	2207      	movs	r2, #7
 80051a4:	9b07      	ldr	r3, [sp, #28]
 80051a6:	3307      	adds	r3, #7
 80051a8:	4393      	bics	r3, r2
 80051aa:	3308      	adds	r3, #8
 80051ac:	9307      	str	r3, [sp, #28]
 80051ae:	6963      	ldr	r3, [r4, #20]
 80051b0:	9a04      	ldr	r2, [sp, #16]
 80051b2:	189b      	adds	r3, r3, r2
 80051b4:	6163      	str	r3, [r4, #20]
 80051b6:	e766      	b.n	8005086 <_svfiprintf_r+0x46>
 80051b8:	4343      	muls	r3, r0
 80051ba:	2101      	movs	r1, #1
 80051bc:	189b      	adds	r3, r3, r2
 80051be:	0035      	movs	r5, r6
 80051c0:	e7a6      	b.n	8005110 <_svfiprintf_r+0xd0>
 80051c2:	2301      	movs	r3, #1
 80051c4:	425b      	negs	r3, r3
 80051c6:	e7d0      	b.n	800516a <_svfiprintf_r+0x12a>
 80051c8:	2300      	movs	r3, #0
 80051ca:	200a      	movs	r0, #10
 80051cc:	001a      	movs	r2, r3
 80051ce:	3501      	adds	r5, #1
 80051d0:	6063      	str	r3, [r4, #4]
 80051d2:	7829      	ldrb	r1, [r5, #0]
 80051d4:	1c6e      	adds	r6, r5, #1
 80051d6:	3930      	subs	r1, #48	; 0x30
 80051d8:	2909      	cmp	r1, #9
 80051da:	d903      	bls.n	80051e4 <_svfiprintf_r+0x1a4>
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d0c5      	beq.n	800516c <_svfiprintf_r+0x12c>
 80051e0:	9209      	str	r2, [sp, #36]	; 0x24
 80051e2:	e7c3      	b.n	800516c <_svfiprintf_r+0x12c>
 80051e4:	4342      	muls	r2, r0
 80051e6:	2301      	movs	r3, #1
 80051e8:	1852      	adds	r2, r2, r1
 80051ea:	0035      	movs	r5, r6
 80051ec:	e7f1      	b.n	80051d2 <_svfiprintf_r+0x192>
 80051ee:	ab07      	add	r3, sp, #28
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	003a      	movs	r2, r7
 80051f4:	4b10      	ldr	r3, [pc, #64]	; (8005238 <_svfiprintf_r+0x1f8>)
 80051f6:	0021      	movs	r1, r4
 80051f8:	9803      	ldr	r0, [sp, #12]
 80051fa:	e000      	b.n	80051fe <_svfiprintf_r+0x1be>
 80051fc:	bf00      	nop
 80051fe:	9004      	str	r0, [sp, #16]
 8005200:	9b04      	ldr	r3, [sp, #16]
 8005202:	3301      	adds	r3, #1
 8005204:	d1d3      	bne.n	80051ae <_svfiprintf_r+0x16e>
 8005206:	89bb      	ldrh	r3, [r7, #12]
 8005208:	980d      	ldr	r0, [sp, #52]	; 0x34
 800520a:	065b      	lsls	r3, r3, #25
 800520c:	d400      	bmi.n	8005210 <_svfiprintf_r+0x1d0>
 800520e:	e72e      	b.n	800506e <_svfiprintf_r+0x2e>
 8005210:	2001      	movs	r0, #1
 8005212:	4240      	negs	r0, r0
 8005214:	e72b      	b.n	800506e <_svfiprintf_r+0x2e>
 8005216:	ab07      	add	r3, sp, #28
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	003a      	movs	r2, r7
 800521c:	4b06      	ldr	r3, [pc, #24]	; (8005238 <_svfiprintf_r+0x1f8>)
 800521e:	0021      	movs	r1, r4
 8005220:	9803      	ldr	r0, [sp, #12]
 8005222:	f000 f9b7 	bl	8005594 <_printf_i>
 8005226:	e7ea      	b.n	80051fe <_svfiprintf_r+0x1be>
 8005228:	08006076 	.word	0x08006076
 800522c:	0800607c 	.word	0x0800607c
 8005230:	08006080 	.word	0x08006080
 8005234:	00000000 	.word	0x00000000
 8005238:	08004f7d 	.word	0x08004f7d

0800523c <__sfputc_r>:
 800523c:	6893      	ldr	r3, [r2, #8]
 800523e:	b510      	push	{r4, lr}
 8005240:	3b01      	subs	r3, #1
 8005242:	6093      	str	r3, [r2, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	da04      	bge.n	8005252 <__sfputc_r+0x16>
 8005248:	6994      	ldr	r4, [r2, #24]
 800524a:	42a3      	cmp	r3, r4
 800524c:	db07      	blt.n	800525e <__sfputc_r+0x22>
 800524e:	290a      	cmp	r1, #10
 8005250:	d005      	beq.n	800525e <__sfputc_r+0x22>
 8005252:	6813      	ldr	r3, [r2, #0]
 8005254:	1c58      	adds	r0, r3, #1
 8005256:	6010      	str	r0, [r2, #0]
 8005258:	7019      	strb	r1, [r3, #0]
 800525a:	0008      	movs	r0, r1
 800525c:	bd10      	pop	{r4, pc}
 800525e:	f7ff faf7 	bl	8004850 <__swbuf_r>
 8005262:	0001      	movs	r1, r0
 8005264:	e7f9      	b.n	800525a <__sfputc_r+0x1e>

08005266 <__sfputs_r>:
 8005266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005268:	0006      	movs	r6, r0
 800526a:	000f      	movs	r7, r1
 800526c:	0014      	movs	r4, r2
 800526e:	18d5      	adds	r5, r2, r3
 8005270:	42ac      	cmp	r4, r5
 8005272:	d101      	bne.n	8005278 <__sfputs_r+0x12>
 8005274:	2000      	movs	r0, #0
 8005276:	e007      	b.n	8005288 <__sfputs_r+0x22>
 8005278:	7821      	ldrb	r1, [r4, #0]
 800527a:	003a      	movs	r2, r7
 800527c:	0030      	movs	r0, r6
 800527e:	f7ff ffdd 	bl	800523c <__sfputc_r>
 8005282:	3401      	adds	r4, #1
 8005284:	1c43      	adds	r3, r0, #1
 8005286:	d1f3      	bne.n	8005270 <__sfputs_r+0xa>
 8005288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800528c <_vfiprintf_r>:
 800528c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800528e:	b0a1      	sub	sp, #132	; 0x84
 8005290:	9003      	str	r0, [sp, #12]
 8005292:	000f      	movs	r7, r1
 8005294:	0016      	movs	r6, r2
 8005296:	001d      	movs	r5, r3
 8005298:	2800      	cmp	r0, #0
 800529a:	d005      	beq.n	80052a8 <_vfiprintf_r+0x1c>
 800529c:	6983      	ldr	r3, [r0, #24]
 800529e:	9305      	str	r3, [sp, #20]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <_vfiprintf_r+0x1c>
 80052a4:	f7ff fc98 	bl	8004bd8 <__sinit>
 80052a8:	4b7b      	ldr	r3, [pc, #492]	; (8005498 <_vfiprintf_r+0x20c>)
 80052aa:	429f      	cmp	r7, r3
 80052ac:	d15c      	bne.n	8005368 <_vfiprintf_r+0xdc>
 80052ae:	9b03      	ldr	r3, [sp, #12]
 80052b0:	685f      	ldr	r7, [r3, #4]
 80052b2:	89bb      	ldrh	r3, [r7, #12]
 80052b4:	071b      	lsls	r3, r3, #28
 80052b6:	d563      	bpl.n	8005380 <_vfiprintf_r+0xf4>
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d060      	beq.n	8005380 <_vfiprintf_r+0xf4>
 80052be:	2300      	movs	r3, #0
 80052c0:	ac08      	add	r4, sp, #32
 80052c2:	6163      	str	r3, [r4, #20]
 80052c4:	3320      	adds	r3, #32
 80052c6:	7663      	strb	r3, [r4, #25]
 80052c8:	3310      	adds	r3, #16
 80052ca:	76a3      	strb	r3, [r4, #26]
 80052cc:	9507      	str	r5, [sp, #28]
 80052ce:	0035      	movs	r5, r6
 80052d0:	782b      	ldrb	r3, [r5, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <_vfiprintf_r+0x4e>
 80052d6:	2b25      	cmp	r3, #37	; 0x25
 80052d8:	d15c      	bne.n	8005394 <_vfiprintf_r+0x108>
 80052da:	1bab      	subs	r3, r5, r6
 80052dc:	9305      	str	r3, [sp, #20]
 80052de:	d00c      	beq.n	80052fa <_vfiprintf_r+0x6e>
 80052e0:	0032      	movs	r2, r6
 80052e2:	0039      	movs	r1, r7
 80052e4:	9803      	ldr	r0, [sp, #12]
 80052e6:	f7ff ffbe 	bl	8005266 <__sfputs_r>
 80052ea:	1c43      	adds	r3, r0, #1
 80052ec:	d100      	bne.n	80052f0 <_vfiprintf_r+0x64>
 80052ee:	e0c4      	b.n	800547a <_vfiprintf_r+0x1ee>
 80052f0:	6962      	ldr	r2, [r4, #20]
 80052f2:	9b05      	ldr	r3, [sp, #20]
 80052f4:	4694      	mov	ip, r2
 80052f6:	4463      	add	r3, ip
 80052f8:	6163      	str	r3, [r4, #20]
 80052fa:	782b      	ldrb	r3, [r5, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d100      	bne.n	8005302 <_vfiprintf_r+0x76>
 8005300:	e0bb      	b.n	800547a <_vfiprintf_r+0x1ee>
 8005302:	2201      	movs	r2, #1
 8005304:	2300      	movs	r3, #0
 8005306:	4252      	negs	r2, r2
 8005308:	6062      	str	r2, [r4, #4]
 800530a:	a904      	add	r1, sp, #16
 800530c:	3254      	adds	r2, #84	; 0x54
 800530e:	1852      	adds	r2, r2, r1
 8005310:	1c6e      	adds	r6, r5, #1
 8005312:	6023      	str	r3, [r4, #0]
 8005314:	60e3      	str	r3, [r4, #12]
 8005316:	60a3      	str	r3, [r4, #8]
 8005318:	7013      	strb	r3, [r2, #0]
 800531a:	65a3      	str	r3, [r4, #88]	; 0x58
 800531c:	7831      	ldrb	r1, [r6, #0]
 800531e:	2205      	movs	r2, #5
 8005320:	485e      	ldr	r0, [pc, #376]	; (800549c <_vfiprintf_r+0x210>)
 8005322:	f000 fb3d 	bl	80059a0 <memchr>
 8005326:	1c75      	adds	r5, r6, #1
 8005328:	2800      	cmp	r0, #0
 800532a:	d135      	bne.n	8005398 <_vfiprintf_r+0x10c>
 800532c:	6822      	ldr	r2, [r4, #0]
 800532e:	06d3      	lsls	r3, r2, #27
 8005330:	d504      	bpl.n	800533c <_vfiprintf_r+0xb0>
 8005332:	2353      	movs	r3, #83	; 0x53
 8005334:	a904      	add	r1, sp, #16
 8005336:	185b      	adds	r3, r3, r1
 8005338:	2120      	movs	r1, #32
 800533a:	7019      	strb	r1, [r3, #0]
 800533c:	0713      	lsls	r3, r2, #28
 800533e:	d504      	bpl.n	800534a <_vfiprintf_r+0xbe>
 8005340:	2353      	movs	r3, #83	; 0x53
 8005342:	a904      	add	r1, sp, #16
 8005344:	185b      	adds	r3, r3, r1
 8005346:	212b      	movs	r1, #43	; 0x2b
 8005348:	7019      	strb	r1, [r3, #0]
 800534a:	7833      	ldrb	r3, [r6, #0]
 800534c:	2b2a      	cmp	r3, #42	; 0x2a
 800534e:	d02c      	beq.n	80053aa <_vfiprintf_r+0x11e>
 8005350:	0035      	movs	r5, r6
 8005352:	2100      	movs	r1, #0
 8005354:	200a      	movs	r0, #10
 8005356:	68e3      	ldr	r3, [r4, #12]
 8005358:	782a      	ldrb	r2, [r5, #0]
 800535a:	1c6e      	adds	r6, r5, #1
 800535c:	3a30      	subs	r2, #48	; 0x30
 800535e:	2a09      	cmp	r2, #9
 8005360:	d964      	bls.n	800542c <_vfiprintf_r+0x1a0>
 8005362:	2900      	cmp	r1, #0
 8005364:	d02e      	beq.n	80053c4 <_vfiprintf_r+0x138>
 8005366:	e026      	b.n	80053b6 <_vfiprintf_r+0x12a>
 8005368:	4b4d      	ldr	r3, [pc, #308]	; (80054a0 <_vfiprintf_r+0x214>)
 800536a:	429f      	cmp	r7, r3
 800536c:	d102      	bne.n	8005374 <_vfiprintf_r+0xe8>
 800536e:	9b03      	ldr	r3, [sp, #12]
 8005370:	689f      	ldr	r7, [r3, #8]
 8005372:	e79e      	b.n	80052b2 <_vfiprintf_r+0x26>
 8005374:	4b4b      	ldr	r3, [pc, #300]	; (80054a4 <_vfiprintf_r+0x218>)
 8005376:	429f      	cmp	r7, r3
 8005378:	d19b      	bne.n	80052b2 <_vfiprintf_r+0x26>
 800537a:	9b03      	ldr	r3, [sp, #12]
 800537c:	68df      	ldr	r7, [r3, #12]
 800537e:	e798      	b.n	80052b2 <_vfiprintf_r+0x26>
 8005380:	0039      	movs	r1, r7
 8005382:	9803      	ldr	r0, [sp, #12]
 8005384:	f7ff faba 	bl	80048fc <__swsetup_r>
 8005388:	2800      	cmp	r0, #0
 800538a:	d098      	beq.n	80052be <_vfiprintf_r+0x32>
 800538c:	2001      	movs	r0, #1
 800538e:	4240      	negs	r0, r0
 8005390:	b021      	add	sp, #132	; 0x84
 8005392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005394:	3501      	adds	r5, #1
 8005396:	e79b      	b.n	80052d0 <_vfiprintf_r+0x44>
 8005398:	4b40      	ldr	r3, [pc, #256]	; (800549c <_vfiprintf_r+0x210>)
 800539a:	6822      	ldr	r2, [r4, #0]
 800539c:	1ac0      	subs	r0, r0, r3
 800539e:	2301      	movs	r3, #1
 80053a0:	4083      	lsls	r3, r0
 80053a2:	4313      	orrs	r3, r2
 80053a4:	6023      	str	r3, [r4, #0]
 80053a6:	002e      	movs	r6, r5
 80053a8:	e7b8      	b.n	800531c <_vfiprintf_r+0x90>
 80053aa:	9b07      	ldr	r3, [sp, #28]
 80053ac:	1d19      	adds	r1, r3, #4
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	9107      	str	r1, [sp, #28]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	db01      	blt.n	80053ba <_vfiprintf_r+0x12e>
 80053b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80053b8:	e004      	b.n	80053c4 <_vfiprintf_r+0x138>
 80053ba:	425b      	negs	r3, r3
 80053bc:	60e3      	str	r3, [r4, #12]
 80053be:	2302      	movs	r3, #2
 80053c0:	4313      	orrs	r3, r2
 80053c2:	6023      	str	r3, [r4, #0]
 80053c4:	782b      	ldrb	r3, [r5, #0]
 80053c6:	2b2e      	cmp	r3, #46	; 0x2e
 80053c8:	d10a      	bne.n	80053e0 <_vfiprintf_r+0x154>
 80053ca:	786b      	ldrb	r3, [r5, #1]
 80053cc:	2b2a      	cmp	r3, #42	; 0x2a
 80053ce:	d135      	bne.n	800543c <_vfiprintf_r+0x1b0>
 80053d0:	9b07      	ldr	r3, [sp, #28]
 80053d2:	3502      	adds	r5, #2
 80053d4:	1d1a      	adds	r2, r3, #4
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	9207      	str	r2, [sp, #28]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	db2b      	blt.n	8005436 <_vfiprintf_r+0x1aa>
 80053de:	9309      	str	r3, [sp, #36]	; 0x24
 80053e0:	4e31      	ldr	r6, [pc, #196]	; (80054a8 <_vfiprintf_r+0x21c>)
 80053e2:	7829      	ldrb	r1, [r5, #0]
 80053e4:	2203      	movs	r2, #3
 80053e6:	0030      	movs	r0, r6
 80053e8:	f000 fada 	bl	80059a0 <memchr>
 80053ec:	2800      	cmp	r0, #0
 80053ee:	d006      	beq.n	80053fe <_vfiprintf_r+0x172>
 80053f0:	2340      	movs	r3, #64	; 0x40
 80053f2:	1b80      	subs	r0, r0, r6
 80053f4:	4083      	lsls	r3, r0
 80053f6:	6822      	ldr	r2, [r4, #0]
 80053f8:	3501      	adds	r5, #1
 80053fa:	4313      	orrs	r3, r2
 80053fc:	6023      	str	r3, [r4, #0]
 80053fe:	7829      	ldrb	r1, [r5, #0]
 8005400:	2206      	movs	r2, #6
 8005402:	482a      	ldr	r0, [pc, #168]	; (80054ac <_vfiprintf_r+0x220>)
 8005404:	1c6e      	adds	r6, r5, #1
 8005406:	7621      	strb	r1, [r4, #24]
 8005408:	f000 faca 	bl	80059a0 <memchr>
 800540c:	2800      	cmp	r0, #0
 800540e:	d03a      	beq.n	8005486 <_vfiprintf_r+0x1fa>
 8005410:	4b27      	ldr	r3, [pc, #156]	; (80054b0 <_vfiprintf_r+0x224>)
 8005412:	2b00      	cmp	r3, #0
 8005414:	d125      	bne.n	8005462 <_vfiprintf_r+0x1d6>
 8005416:	2207      	movs	r2, #7
 8005418:	9b07      	ldr	r3, [sp, #28]
 800541a:	3307      	adds	r3, #7
 800541c:	4393      	bics	r3, r2
 800541e:	3308      	adds	r3, #8
 8005420:	9307      	str	r3, [sp, #28]
 8005422:	6963      	ldr	r3, [r4, #20]
 8005424:	9a04      	ldr	r2, [sp, #16]
 8005426:	189b      	adds	r3, r3, r2
 8005428:	6163      	str	r3, [r4, #20]
 800542a:	e750      	b.n	80052ce <_vfiprintf_r+0x42>
 800542c:	4343      	muls	r3, r0
 800542e:	2101      	movs	r1, #1
 8005430:	189b      	adds	r3, r3, r2
 8005432:	0035      	movs	r5, r6
 8005434:	e790      	b.n	8005358 <_vfiprintf_r+0xcc>
 8005436:	2301      	movs	r3, #1
 8005438:	425b      	negs	r3, r3
 800543a:	e7d0      	b.n	80053de <_vfiprintf_r+0x152>
 800543c:	2300      	movs	r3, #0
 800543e:	200a      	movs	r0, #10
 8005440:	001a      	movs	r2, r3
 8005442:	3501      	adds	r5, #1
 8005444:	6063      	str	r3, [r4, #4]
 8005446:	7829      	ldrb	r1, [r5, #0]
 8005448:	1c6e      	adds	r6, r5, #1
 800544a:	3930      	subs	r1, #48	; 0x30
 800544c:	2909      	cmp	r1, #9
 800544e:	d903      	bls.n	8005458 <_vfiprintf_r+0x1cc>
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0c5      	beq.n	80053e0 <_vfiprintf_r+0x154>
 8005454:	9209      	str	r2, [sp, #36]	; 0x24
 8005456:	e7c3      	b.n	80053e0 <_vfiprintf_r+0x154>
 8005458:	4342      	muls	r2, r0
 800545a:	2301      	movs	r3, #1
 800545c:	1852      	adds	r2, r2, r1
 800545e:	0035      	movs	r5, r6
 8005460:	e7f1      	b.n	8005446 <_vfiprintf_r+0x1ba>
 8005462:	ab07      	add	r3, sp, #28
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	003a      	movs	r2, r7
 8005468:	4b12      	ldr	r3, [pc, #72]	; (80054b4 <_vfiprintf_r+0x228>)
 800546a:	0021      	movs	r1, r4
 800546c:	9803      	ldr	r0, [sp, #12]
 800546e:	e000      	b.n	8005472 <_vfiprintf_r+0x1e6>
 8005470:	bf00      	nop
 8005472:	9004      	str	r0, [sp, #16]
 8005474:	9b04      	ldr	r3, [sp, #16]
 8005476:	3301      	adds	r3, #1
 8005478:	d1d3      	bne.n	8005422 <_vfiprintf_r+0x196>
 800547a:	89bb      	ldrh	r3, [r7, #12]
 800547c:	065b      	lsls	r3, r3, #25
 800547e:	d500      	bpl.n	8005482 <_vfiprintf_r+0x1f6>
 8005480:	e784      	b.n	800538c <_vfiprintf_r+0x100>
 8005482:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005484:	e784      	b.n	8005390 <_vfiprintf_r+0x104>
 8005486:	ab07      	add	r3, sp, #28
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	003a      	movs	r2, r7
 800548c:	4b09      	ldr	r3, [pc, #36]	; (80054b4 <_vfiprintf_r+0x228>)
 800548e:	0021      	movs	r1, r4
 8005490:	9803      	ldr	r0, [sp, #12]
 8005492:	f000 f87f 	bl	8005594 <_printf_i>
 8005496:	e7ec      	b.n	8005472 <_vfiprintf_r+0x1e6>
 8005498:	0800602c 	.word	0x0800602c
 800549c:	08006076 	.word	0x08006076
 80054a0:	0800604c 	.word	0x0800604c
 80054a4:	0800600c 	.word	0x0800600c
 80054a8:	0800607c 	.word	0x0800607c
 80054ac:	08006080 	.word	0x08006080
 80054b0:	00000000 	.word	0x00000000
 80054b4:	08005267 	.word	0x08005267

080054b8 <_printf_common>:
 80054b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054ba:	0015      	movs	r5, r2
 80054bc:	9301      	str	r3, [sp, #4]
 80054be:	688a      	ldr	r2, [r1, #8]
 80054c0:	690b      	ldr	r3, [r1, #16]
 80054c2:	9000      	str	r0, [sp, #0]
 80054c4:	000c      	movs	r4, r1
 80054c6:	4293      	cmp	r3, r2
 80054c8:	da00      	bge.n	80054cc <_printf_common+0x14>
 80054ca:	0013      	movs	r3, r2
 80054cc:	0022      	movs	r2, r4
 80054ce:	602b      	str	r3, [r5, #0]
 80054d0:	3243      	adds	r2, #67	; 0x43
 80054d2:	7812      	ldrb	r2, [r2, #0]
 80054d4:	2a00      	cmp	r2, #0
 80054d6:	d001      	beq.n	80054dc <_printf_common+0x24>
 80054d8:	3301      	adds	r3, #1
 80054da:	602b      	str	r3, [r5, #0]
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	069b      	lsls	r3, r3, #26
 80054e0:	d502      	bpl.n	80054e8 <_printf_common+0x30>
 80054e2:	682b      	ldr	r3, [r5, #0]
 80054e4:	3302      	adds	r3, #2
 80054e6:	602b      	str	r3, [r5, #0]
 80054e8:	2706      	movs	r7, #6
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	401f      	ands	r7, r3
 80054ee:	d027      	beq.n	8005540 <_printf_common+0x88>
 80054f0:	0023      	movs	r3, r4
 80054f2:	3343      	adds	r3, #67	; 0x43
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	1e5a      	subs	r2, r3, #1
 80054f8:	4193      	sbcs	r3, r2
 80054fa:	6822      	ldr	r2, [r4, #0]
 80054fc:	0692      	lsls	r2, r2, #26
 80054fe:	d430      	bmi.n	8005562 <_printf_common+0xaa>
 8005500:	0022      	movs	r2, r4
 8005502:	9901      	ldr	r1, [sp, #4]
 8005504:	3243      	adds	r2, #67	; 0x43
 8005506:	9800      	ldr	r0, [sp, #0]
 8005508:	9e08      	ldr	r6, [sp, #32]
 800550a:	47b0      	blx	r6
 800550c:	1c43      	adds	r3, r0, #1
 800550e:	d025      	beq.n	800555c <_printf_common+0xa4>
 8005510:	2306      	movs	r3, #6
 8005512:	6820      	ldr	r0, [r4, #0]
 8005514:	682a      	ldr	r2, [r5, #0]
 8005516:	68e1      	ldr	r1, [r4, #12]
 8005518:	4003      	ands	r3, r0
 800551a:	2500      	movs	r5, #0
 800551c:	2b04      	cmp	r3, #4
 800551e:	d103      	bne.n	8005528 <_printf_common+0x70>
 8005520:	1a8d      	subs	r5, r1, r2
 8005522:	43eb      	mvns	r3, r5
 8005524:	17db      	asrs	r3, r3, #31
 8005526:	401d      	ands	r5, r3
 8005528:	68a3      	ldr	r3, [r4, #8]
 800552a:	6922      	ldr	r2, [r4, #16]
 800552c:	4293      	cmp	r3, r2
 800552e:	dd01      	ble.n	8005534 <_printf_common+0x7c>
 8005530:	1a9b      	subs	r3, r3, r2
 8005532:	18ed      	adds	r5, r5, r3
 8005534:	2700      	movs	r7, #0
 8005536:	42bd      	cmp	r5, r7
 8005538:	d120      	bne.n	800557c <_printf_common+0xc4>
 800553a:	2000      	movs	r0, #0
 800553c:	e010      	b.n	8005560 <_printf_common+0xa8>
 800553e:	3701      	adds	r7, #1
 8005540:	68e3      	ldr	r3, [r4, #12]
 8005542:	682a      	ldr	r2, [r5, #0]
 8005544:	1a9b      	subs	r3, r3, r2
 8005546:	42bb      	cmp	r3, r7
 8005548:	ddd2      	ble.n	80054f0 <_printf_common+0x38>
 800554a:	0022      	movs	r2, r4
 800554c:	2301      	movs	r3, #1
 800554e:	3219      	adds	r2, #25
 8005550:	9901      	ldr	r1, [sp, #4]
 8005552:	9800      	ldr	r0, [sp, #0]
 8005554:	9e08      	ldr	r6, [sp, #32]
 8005556:	47b0      	blx	r6
 8005558:	1c43      	adds	r3, r0, #1
 800555a:	d1f0      	bne.n	800553e <_printf_common+0x86>
 800555c:	2001      	movs	r0, #1
 800555e:	4240      	negs	r0, r0
 8005560:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005562:	2030      	movs	r0, #48	; 0x30
 8005564:	18e1      	adds	r1, r4, r3
 8005566:	3143      	adds	r1, #67	; 0x43
 8005568:	7008      	strb	r0, [r1, #0]
 800556a:	0021      	movs	r1, r4
 800556c:	1c5a      	adds	r2, r3, #1
 800556e:	3145      	adds	r1, #69	; 0x45
 8005570:	7809      	ldrb	r1, [r1, #0]
 8005572:	18a2      	adds	r2, r4, r2
 8005574:	3243      	adds	r2, #67	; 0x43
 8005576:	3302      	adds	r3, #2
 8005578:	7011      	strb	r1, [r2, #0]
 800557a:	e7c1      	b.n	8005500 <_printf_common+0x48>
 800557c:	0022      	movs	r2, r4
 800557e:	2301      	movs	r3, #1
 8005580:	321a      	adds	r2, #26
 8005582:	9901      	ldr	r1, [sp, #4]
 8005584:	9800      	ldr	r0, [sp, #0]
 8005586:	9e08      	ldr	r6, [sp, #32]
 8005588:	47b0      	blx	r6
 800558a:	1c43      	adds	r3, r0, #1
 800558c:	d0e6      	beq.n	800555c <_printf_common+0xa4>
 800558e:	3701      	adds	r7, #1
 8005590:	e7d1      	b.n	8005536 <_printf_common+0x7e>
	...

08005594 <_printf_i>:
 8005594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005596:	b089      	sub	sp, #36	; 0x24
 8005598:	9204      	str	r2, [sp, #16]
 800559a:	000a      	movs	r2, r1
 800559c:	3243      	adds	r2, #67	; 0x43
 800559e:	9305      	str	r3, [sp, #20]
 80055a0:	9003      	str	r0, [sp, #12]
 80055a2:	9202      	str	r2, [sp, #8]
 80055a4:	7e0a      	ldrb	r2, [r1, #24]
 80055a6:	000c      	movs	r4, r1
 80055a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055aa:	2a6e      	cmp	r2, #110	; 0x6e
 80055ac:	d100      	bne.n	80055b0 <_printf_i+0x1c>
 80055ae:	e086      	b.n	80056be <_printf_i+0x12a>
 80055b0:	d81f      	bhi.n	80055f2 <_printf_i+0x5e>
 80055b2:	2a63      	cmp	r2, #99	; 0x63
 80055b4:	d033      	beq.n	800561e <_printf_i+0x8a>
 80055b6:	d808      	bhi.n	80055ca <_printf_i+0x36>
 80055b8:	2a00      	cmp	r2, #0
 80055ba:	d100      	bne.n	80055be <_printf_i+0x2a>
 80055bc:	e08c      	b.n	80056d8 <_printf_i+0x144>
 80055be:	2a58      	cmp	r2, #88	; 0x58
 80055c0:	d04d      	beq.n	800565e <_printf_i+0xca>
 80055c2:	0025      	movs	r5, r4
 80055c4:	3542      	adds	r5, #66	; 0x42
 80055c6:	702a      	strb	r2, [r5, #0]
 80055c8:	e030      	b.n	800562c <_printf_i+0x98>
 80055ca:	2a64      	cmp	r2, #100	; 0x64
 80055cc:	d001      	beq.n	80055d2 <_printf_i+0x3e>
 80055ce:	2a69      	cmp	r2, #105	; 0x69
 80055d0:	d1f7      	bne.n	80055c2 <_printf_i+0x2e>
 80055d2:	6819      	ldr	r1, [r3, #0]
 80055d4:	6825      	ldr	r5, [r4, #0]
 80055d6:	1d0a      	adds	r2, r1, #4
 80055d8:	0628      	lsls	r0, r5, #24
 80055da:	d529      	bpl.n	8005630 <_printf_i+0x9c>
 80055dc:	6808      	ldr	r0, [r1, #0]
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	2800      	cmp	r0, #0
 80055e2:	da03      	bge.n	80055ec <_printf_i+0x58>
 80055e4:	232d      	movs	r3, #45	; 0x2d
 80055e6:	9a02      	ldr	r2, [sp, #8]
 80055e8:	4240      	negs	r0, r0
 80055ea:	7013      	strb	r3, [r2, #0]
 80055ec:	4e6b      	ldr	r6, [pc, #428]	; (800579c <_printf_i+0x208>)
 80055ee:	270a      	movs	r7, #10
 80055f0:	e04f      	b.n	8005692 <_printf_i+0xfe>
 80055f2:	2a73      	cmp	r2, #115	; 0x73
 80055f4:	d074      	beq.n	80056e0 <_printf_i+0x14c>
 80055f6:	d808      	bhi.n	800560a <_printf_i+0x76>
 80055f8:	2a6f      	cmp	r2, #111	; 0x6f
 80055fa:	d01f      	beq.n	800563c <_printf_i+0xa8>
 80055fc:	2a70      	cmp	r2, #112	; 0x70
 80055fe:	d1e0      	bne.n	80055c2 <_printf_i+0x2e>
 8005600:	2220      	movs	r2, #32
 8005602:	6809      	ldr	r1, [r1, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	6022      	str	r2, [r4, #0]
 8005608:	e003      	b.n	8005612 <_printf_i+0x7e>
 800560a:	2a75      	cmp	r2, #117	; 0x75
 800560c:	d016      	beq.n	800563c <_printf_i+0xa8>
 800560e:	2a78      	cmp	r2, #120	; 0x78
 8005610:	d1d7      	bne.n	80055c2 <_printf_i+0x2e>
 8005612:	0022      	movs	r2, r4
 8005614:	2178      	movs	r1, #120	; 0x78
 8005616:	3245      	adds	r2, #69	; 0x45
 8005618:	7011      	strb	r1, [r2, #0]
 800561a:	4e61      	ldr	r6, [pc, #388]	; (80057a0 <_printf_i+0x20c>)
 800561c:	e022      	b.n	8005664 <_printf_i+0xd0>
 800561e:	0025      	movs	r5, r4
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	3542      	adds	r5, #66	; 0x42
 8005624:	1d11      	adds	r1, r2, #4
 8005626:	6019      	str	r1, [r3, #0]
 8005628:	6813      	ldr	r3, [r2, #0]
 800562a:	702b      	strb	r3, [r5, #0]
 800562c:	2301      	movs	r3, #1
 800562e:	e065      	b.n	80056fc <_printf_i+0x168>
 8005630:	6808      	ldr	r0, [r1, #0]
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	0669      	lsls	r1, r5, #25
 8005636:	d5d3      	bpl.n	80055e0 <_printf_i+0x4c>
 8005638:	b200      	sxth	r0, r0
 800563a:	e7d1      	b.n	80055e0 <_printf_i+0x4c>
 800563c:	6819      	ldr	r1, [r3, #0]
 800563e:	6825      	ldr	r5, [r4, #0]
 8005640:	1d08      	adds	r0, r1, #4
 8005642:	6018      	str	r0, [r3, #0]
 8005644:	6808      	ldr	r0, [r1, #0]
 8005646:	062e      	lsls	r6, r5, #24
 8005648:	d505      	bpl.n	8005656 <_printf_i+0xc2>
 800564a:	4e54      	ldr	r6, [pc, #336]	; (800579c <_printf_i+0x208>)
 800564c:	2708      	movs	r7, #8
 800564e:	2a6f      	cmp	r2, #111	; 0x6f
 8005650:	d01b      	beq.n	800568a <_printf_i+0xf6>
 8005652:	270a      	movs	r7, #10
 8005654:	e019      	b.n	800568a <_printf_i+0xf6>
 8005656:	066d      	lsls	r5, r5, #25
 8005658:	d5f7      	bpl.n	800564a <_printf_i+0xb6>
 800565a:	b280      	uxth	r0, r0
 800565c:	e7f5      	b.n	800564a <_printf_i+0xb6>
 800565e:	3145      	adds	r1, #69	; 0x45
 8005660:	4e4e      	ldr	r6, [pc, #312]	; (800579c <_printf_i+0x208>)
 8005662:	700a      	strb	r2, [r1, #0]
 8005664:	6818      	ldr	r0, [r3, #0]
 8005666:	6822      	ldr	r2, [r4, #0]
 8005668:	1d01      	adds	r1, r0, #4
 800566a:	6800      	ldr	r0, [r0, #0]
 800566c:	6019      	str	r1, [r3, #0]
 800566e:	0615      	lsls	r5, r2, #24
 8005670:	d521      	bpl.n	80056b6 <_printf_i+0x122>
 8005672:	07d3      	lsls	r3, r2, #31
 8005674:	d502      	bpl.n	800567c <_printf_i+0xe8>
 8005676:	2320      	movs	r3, #32
 8005678:	431a      	orrs	r2, r3
 800567a:	6022      	str	r2, [r4, #0]
 800567c:	2710      	movs	r7, #16
 800567e:	2800      	cmp	r0, #0
 8005680:	d103      	bne.n	800568a <_printf_i+0xf6>
 8005682:	2320      	movs	r3, #32
 8005684:	6822      	ldr	r2, [r4, #0]
 8005686:	439a      	bics	r2, r3
 8005688:	6022      	str	r2, [r4, #0]
 800568a:	0023      	movs	r3, r4
 800568c:	2200      	movs	r2, #0
 800568e:	3343      	adds	r3, #67	; 0x43
 8005690:	701a      	strb	r2, [r3, #0]
 8005692:	6863      	ldr	r3, [r4, #4]
 8005694:	60a3      	str	r3, [r4, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	db58      	blt.n	800574c <_printf_i+0x1b8>
 800569a:	2204      	movs	r2, #4
 800569c:	6821      	ldr	r1, [r4, #0]
 800569e:	4391      	bics	r1, r2
 80056a0:	6021      	str	r1, [r4, #0]
 80056a2:	2800      	cmp	r0, #0
 80056a4:	d154      	bne.n	8005750 <_printf_i+0x1bc>
 80056a6:	9d02      	ldr	r5, [sp, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d05a      	beq.n	8005762 <_printf_i+0x1ce>
 80056ac:	0025      	movs	r5, r4
 80056ae:	7833      	ldrb	r3, [r6, #0]
 80056b0:	3542      	adds	r5, #66	; 0x42
 80056b2:	702b      	strb	r3, [r5, #0]
 80056b4:	e055      	b.n	8005762 <_printf_i+0x1ce>
 80056b6:	0655      	lsls	r5, r2, #25
 80056b8:	d5db      	bpl.n	8005672 <_printf_i+0xde>
 80056ba:	b280      	uxth	r0, r0
 80056bc:	e7d9      	b.n	8005672 <_printf_i+0xde>
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	680d      	ldr	r5, [r1, #0]
 80056c2:	1d10      	adds	r0, r2, #4
 80056c4:	6949      	ldr	r1, [r1, #20]
 80056c6:	6018      	str	r0, [r3, #0]
 80056c8:	6813      	ldr	r3, [r2, #0]
 80056ca:	062e      	lsls	r6, r5, #24
 80056cc:	d501      	bpl.n	80056d2 <_printf_i+0x13e>
 80056ce:	6019      	str	r1, [r3, #0]
 80056d0:	e002      	b.n	80056d8 <_printf_i+0x144>
 80056d2:	066d      	lsls	r5, r5, #25
 80056d4:	d5fb      	bpl.n	80056ce <_printf_i+0x13a>
 80056d6:	8019      	strh	r1, [r3, #0]
 80056d8:	2300      	movs	r3, #0
 80056da:	9d02      	ldr	r5, [sp, #8]
 80056dc:	6123      	str	r3, [r4, #16]
 80056de:	e04f      	b.n	8005780 <_printf_i+0x1ec>
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	1d11      	adds	r1, r2, #4
 80056e4:	6019      	str	r1, [r3, #0]
 80056e6:	6815      	ldr	r5, [r2, #0]
 80056e8:	2100      	movs	r1, #0
 80056ea:	6862      	ldr	r2, [r4, #4]
 80056ec:	0028      	movs	r0, r5
 80056ee:	f000 f957 	bl	80059a0 <memchr>
 80056f2:	2800      	cmp	r0, #0
 80056f4:	d001      	beq.n	80056fa <_printf_i+0x166>
 80056f6:	1b40      	subs	r0, r0, r5
 80056f8:	6060      	str	r0, [r4, #4]
 80056fa:	6863      	ldr	r3, [r4, #4]
 80056fc:	6123      	str	r3, [r4, #16]
 80056fe:	2300      	movs	r3, #0
 8005700:	9a02      	ldr	r2, [sp, #8]
 8005702:	7013      	strb	r3, [r2, #0]
 8005704:	e03c      	b.n	8005780 <_printf_i+0x1ec>
 8005706:	6923      	ldr	r3, [r4, #16]
 8005708:	002a      	movs	r2, r5
 800570a:	9904      	ldr	r1, [sp, #16]
 800570c:	9803      	ldr	r0, [sp, #12]
 800570e:	9d05      	ldr	r5, [sp, #20]
 8005710:	47a8      	blx	r5
 8005712:	1c43      	adds	r3, r0, #1
 8005714:	d03e      	beq.n	8005794 <_printf_i+0x200>
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	079b      	lsls	r3, r3, #30
 800571a:	d415      	bmi.n	8005748 <_printf_i+0x1b4>
 800571c:	9b07      	ldr	r3, [sp, #28]
 800571e:	68e0      	ldr	r0, [r4, #12]
 8005720:	4298      	cmp	r0, r3
 8005722:	da39      	bge.n	8005798 <_printf_i+0x204>
 8005724:	0018      	movs	r0, r3
 8005726:	e037      	b.n	8005798 <_printf_i+0x204>
 8005728:	0022      	movs	r2, r4
 800572a:	2301      	movs	r3, #1
 800572c:	3219      	adds	r2, #25
 800572e:	9904      	ldr	r1, [sp, #16]
 8005730:	9803      	ldr	r0, [sp, #12]
 8005732:	9e05      	ldr	r6, [sp, #20]
 8005734:	47b0      	blx	r6
 8005736:	1c43      	adds	r3, r0, #1
 8005738:	d02c      	beq.n	8005794 <_printf_i+0x200>
 800573a:	3501      	adds	r5, #1
 800573c:	68e3      	ldr	r3, [r4, #12]
 800573e:	9a07      	ldr	r2, [sp, #28]
 8005740:	1a9b      	subs	r3, r3, r2
 8005742:	42ab      	cmp	r3, r5
 8005744:	dcf0      	bgt.n	8005728 <_printf_i+0x194>
 8005746:	e7e9      	b.n	800571c <_printf_i+0x188>
 8005748:	2500      	movs	r5, #0
 800574a:	e7f7      	b.n	800573c <_printf_i+0x1a8>
 800574c:	2800      	cmp	r0, #0
 800574e:	d0ad      	beq.n	80056ac <_printf_i+0x118>
 8005750:	9d02      	ldr	r5, [sp, #8]
 8005752:	0039      	movs	r1, r7
 8005754:	f7fa fd66 	bl	8000224 <__aeabi_uidivmod>
 8005758:	5c73      	ldrb	r3, [r6, r1]
 800575a:	3d01      	subs	r5, #1
 800575c:	702b      	strb	r3, [r5, #0]
 800575e:	2800      	cmp	r0, #0
 8005760:	d1f7      	bne.n	8005752 <_printf_i+0x1be>
 8005762:	2f08      	cmp	r7, #8
 8005764:	d109      	bne.n	800577a <_printf_i+0x1e6>
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	07db      	lsls	r3, r3, #31
 800576a:	d506      	bpl.n	800577a <_printf_i+0x1e6>
 800576c:	6863      	ldr	r3, [r4, #4]
 800576e:	6922      	ldr	r2, [r4, #16]
 8005770:	4293      	cmp	r3, r2
 8005772:	dc02      	bgt.n	800577a <_printf_i+0x1e6>
 8005774:	2330      	movs	r3, #48	; 0x30
 8005776:	3d01      	subs	r5, #1
 8005778:	702b      	strb	r3, [r5, #0]
 800577a:	9b02      	ldr	r3, [sp, #8]
 800577c:	1b5b      	subs	r3, r3, r5
 800577e:	6123      	str	r3, [r4, #16]
 8005780:	9b05      	ldr	r3, [sp, #20]
 8005782:	aa07      	add	r2, sp, #28
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	0021      	movs	r1, r4
 8005788:	9b04      	ldr	r3, [sp, #16]
 800578a:	9803      	ldr	r0, [sp, #12]
 800578c:	f7ff fe94 	bl	80054b8 <_printf_common>
 8005790:	1c43      	adds	r3, r0, #1
 8005792:	d1b8      	bne.n	8005706 <_printf_i+0x172>
 8005794:	2001      	movs	r0, #1
 8005796:	4240      	negs	r0, r0
 8005798:	b009      	add	sp, #36	; 0x24
 800579a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800579c:	08006087 	.word	0x08006087
 80057a0:	08006098 	.word	0x08006098

080057a4 <_putc_r>:
 80057a4:	b570      	push	{r4, r5, r6, lr}
 80057a6:	0006      	movs	r6, r0
 80057a8:	000d      	movs	r5, r1
 80057aa:	0014      	movs	r4, r2
 80057ac:	2800      	cmp	r0, #0
 80057ae:	d004      	beq.n	80057ba <_putc_r+0x16>
 80057b0:	6983      	ldr	r3, [r0, #24]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <_putc_r+0x16>
 80057b6:	f7ff fa0f 	bl	8004bd8 <__sinit>
 80057ba:	4b12      	ldr	r3, [pc, #72]	; (8005804 <_putc_r+0x60>)
 80057bc:	429c      	cmp	r4, r3
 80057be:	d111      	bne.n	80057e4 <_putc_r+0x40>
 80057c0:	6874      	ldr	r4, [r6, #4]
 80057c2:	68a3      	ldr	r3, [r4, #8]
 80057c4:	3b01      	subs	r3, #1
 80057c6:	60a3      	str	r3, [r4, #8]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	da05      	bge.n	80057d8 <_putc_r+0x34>
 80057cc:	69a2      	ldr	r2, [r4, #24]
 80057ce:	4293      	cmp	r3, r2
 80057d0:	db12      	blt.n	80057f8 <_putc_r+0x54>
 80057d2:	b2eb      	uxtb	r3, r5
 80057d4:	2b0a      	cmp	r3, #10
 80057d6:	d00f      	beq.n	80057f8 <_putc_r+0x54>
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	b2e8      	uxtb	r0, r5
 80057dc:	1c5a      	adds	r2, r3, #1
 80057de:	6022      	str	r2, [r4, #0]
 80057e0:	701d      	strb	r5, [r3, #0]
 80057e2:	bd70      	pop	{r4, r5, r6, pc}
 80057e4:	4b08      	ldr	r3, [pc, #32]	; (8005808 <_putc_r+0x64>)
 80057e6:	429c      	cmp	r4, r3
 80057e8:	d101      	bne.n	80057ee <_putc_r+0x4a>
 80057ea:	68b4      	ldr	r4, [r6, #8]
 80057ec:	e7e9      	b.n	80057c2 <_putc_r+0x1e>
 80057ee:	4b07      	ldr	r3, [pc, #28]	; (800580c <_putc_r+0x68>)
 80057f0:	429c      	cmp	r4, r3
 80057f2:	d1e6      	bne.n	80057c2 <_putc_r+0x1e>
 80057f4:	68f4      	ldr	r4, [r6, #12]
 80057f6:	e7e4      	b.n	80057c2 <_putc_r+0x1e>
 80057f8:	0022      	movs	r2, r4
 80057fa:	0029      	movs	r1, r5
 80057fc:	0030      	movs	r0, r6
 80057fe:	f7ff f827 	bl	8004850 <__swbuf_r>
 8005802:	e7ee      	b.n	80057e2 <_putc_r+0x3e>
 8005804:	0800602c 	.word	0x0800602c
 8005808:	0800604c 	.word	0x0800604c
 800580c:	0800600c 	.word	0x0800600c

08005810 <_sbrk_r>:
 8005810:	2300      	movs	r3, #0
 8005812:	b570      	push	{r4, r5, r6, lr}
 8005814:	4c06      	ldr	r4, [pc, #24]	; (8005830 <_sbrk_r+0x20>)
 8005816:	0005      	movs	r5, r0
 8005818:	0008      	movs	r0, r1
 800581a:	6023      	str	r3, [r4, #0]
 800581c:	f7fc fd4e 	bl	80022bc <_sbrk>
 8005820:	1c43      	adds	r3, r0, #1
 8005822:	d103      	bne.n	800582c <_sbrk_r+0x1c>
 8005824:	6823      	ldr	r3, [r4, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d000      	beq.n	800582c <_sbrk_r+0x1c>
 800582a:	602b      	str	r3, [r5, #0]
 800582c:	bd70      	pop	{r4, r5, r6, pc}
 800582e:	46c0      	nop			; (mov r8, r8)
 8005830:	20000460 	.word	0x20000460

08005834 <__sread>:
 8005834:	b570      	push	{r4, r5, r6, lr}
 8005836:	000c      	movs	r4, r1
 8005838:	250e      	movs	r5, #14
 800583a:	5f49      	ldrsh	r1, [r1, r5]
 800583c:	f000 f900 	bl	8005a40 <_read_r>
 8005840:	2800      	cmp	r0, #0
 8005842:	db03      	blt.n	800584c <__sread+0x18>
 8005844:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005846:	181b      	adds	r3, r3, r0
 8005848:	6563      	str	r3, [r4, #84]	; 0x54
 800584a:	bd70      	pop	{r4, r5, r6, pc}
 800584c:	89a3      	ldrh	r3, [r4, #12]
 800584e:	4a02      	ldr	r2, [pc, #8]	; (8005858 <__sread+0x24>)
 8005850:	4013      	ands	r3, r2
 8005852:	81a3      	strh	r3, [r4, #12]
 8005854:	e7f9      	b.n	800584a <__sread+0x16>
 8005856:	46c0      	nop			; (mov r8, r8)
 8005858:	ffffefff 	.word	0xffffefff

0800585c <__swrite>:
 800585c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585e:	001f      	movs	r7, r3
 8005860:	898b      	ldrh	r3, [r1, #12]
 8005862:	0005      	movs	r5, r0
 8005864:	000c      	movs	r4, r1
 8005866:	0016      	movs	r6, r2
 8005868:	05db      	lsls	r3, r3, #23
 800586a:	d505      	bpl.n	8005878 <__swrite+0x1c>
 800586c:	230e      	movs	r3, #14
 800586e:	5ec9      	ldrsh	r1, [r1, r3]
 8005870:	2200      	movs	r2, #0
 8005872:	2302      	movs	r3, #2
 8005874:	f000 f880 	bl	8005978 <_lseek_r>
 8005878:	89a3      	ldrh	r3, [r4, #12]
 800587a:	4a05      	ldr	r2, [pc, #20]	; (8005890 <__swrite+0x34>)
 800587c:	0028      	movs	r0, r5
 800587e:	4013      	ands	r3, r2
 8005880:	81a3      	strh	r3, [r4, #12]
 8005882:	0032      	movs	r2, r6
 8005884:	230e      	movs	r3, #14
 8005886:	5ee1      	ldrsh	r1, [r4, r3]
 8005888:	003b      	movs	r3, r7
 800588a:	f000 f82b 	bl	80058e4 <_write_r>
 800588e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005890:	ffffefff 	.word	0xffffefff

08005894 <__sseek>:
 8005894:	b570      	push	{r4, r5, r6, lr}
 8005896:	000c      	movs	r4, r1
 8005898:	250e      	movs	r5, #14
 800589a:	5f49      	ldrsh	r1, [r1, r5]
 800589c:	f000 f86c 	bl	8005978 <_lseek_r>
 80058a0:	89a3      	ldrh	r3, [r4, #12]
 80058a2:	1c42      	adds	r2, r0, #1
 80058a4:	d103      	bne.n	80058ae <__sseek+0x1a>
 80058a6:	4a05      	ldr	r2, [pc, #20]	; (80058bc <__sseek+0x28>)
 80058a8:	4013      	ands	r3, r2
 80058aa:	81a3      	strh	r3, [r4, #12]
 80058ac:	bd70      	pop	{r4, r5, r6, pc}
 80058ae:	2280      	movs	r2, #128	; 0x80
 80058b0:	0152      	lsls	r2, r2, #5
 80058b2:	4313      	orrs	r3, r2
 80058b4:	81a3      	strh	r3, [r4, #12]
 80058b6:	6560      	str	r0, [r4, #84]	; 0x54
 80058b8:	e7f8      	b.n	80058ac <__sseek+0x18>
 80058ba:	46c0      	nop			; (mov r8, r8)
 80058bc:	ffffefff 	.word	0xffffefff

080058c0 <__sclose>:
 80058c0:	b510      	push	{r4, lr}
 80058c2:	230e      	movs	r3, #14
 80058c4:	5ec9      	ldrsh	r1, [r1, r3]
 80058c6:	f000 f821 	bl	800590c <_close_r>
 80058ca:	bd10      	pop	{r4, pc}

080058cc <__ascii_wctomb>:
 80058cc:	1e0b      	subs	r3, r1, #0
 80058ce:	d004      	beq.n	80058da <__ascii_wctomb+0xe>
 80058d0:	2aff      	cmp	r2, #255	; 0xff
 80058d2:	d904      	bls.n	80058de <__ascii_wctomb+0x12>
 80058d4:	238a      	movs	r3, #138	; 0x8a
 80058d6:	6003      	str	r3, [r0, #0]
 80058d8:	3b8b      	subs	r3, #139	; 0x8b
 80058da:	0018      	movs	r0, r3
 80058dc:	4770      	bx	lr
 80058de:	700a      	strb	r2, [r1, #0]
 80058e0:	2301      	movs	r3, #1
 80058e2:	e7fa      	b.n	80058da <__ascii_wctomb+0xe>

080058e4 <_write_r>:
 80058e4:	b570      	push	{r4, r5, r6, lr}
 80058e6:	0005      	movs	r5, r0
 80058e8:	0008      	movs	r0, r1
 80058ea:	0011      	movs	r1, r2
 80058ec:	2200      	movs	r2, #0
 80058ee:	4c06      	ldr	r4, [pc, #24]	; (8005908 <_write_r+0x24>)
 80058f0:	6022      	str	r2, [r4, #0]
 80058f2:	001a      	movs	r2, r3
 80058f4:	f7fa fc9c 	bl	8000230 <_write>
 80058f8:	1c43      	adds	r3, r0, #1
 80058fa:	d103      	bne.n	8005904 <_write_r+0x20>
 80058fc:	6823      	ldr	r3, [r4, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d000      	beq.n	8005904 <_write_r+0x20>
 8005902:	602b      	str	r3, [r5, #0]
 8005904:	bd70      	pop	{r4, r5, r6, pc}
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	20000460 	.word	0x20000460

0800590c <_close_r>:
 800590c:	2300      	movs	r3, #0
 800590e:	b570      	push	{r4, r5, r6, lr}
 8005910:	4c06      	ldr	r4, [pc, #24]	; (800592c <_close_r+0x20>)
 8005912:	0005      	movs	r5, r0
 8005914:	0008      	movs	r0, r1
 8005916:	6023      	str	r3, [r4, #0]
 8005918:	f7fc fca3 	bl	8002262 <_close>
 800591c:	1c43      	adds	r3, r0, #1
 800591e:	d103      	bne.n	8005928 <_close_r+0x1c>
 8005920:	6823      	ldr	r3, [r4, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d000      	beq.n	8005928 <_close_r+0x1c>
 8005926:	602b      	str	r3, [r5, #0]
 8005928:	bd70      	pop	{r4, r5, r6, pc}
 800592a:	46c0      	nop			; (mov r8, r8)
 800592c:	20000460 	.word	0x20000460

08005930 <_fstat_r>:
 8005930:	2300      	movs	r3, #0
 8005932:	b570      	push	{r4, r5, r6, lr}
 8005934:	4c06      	ldr	r4, [pc, #24]	; (8005950 <_fstat_r+0x20>)
 8005936:	0005      	movs	r5, r0
 8005938:	0008      	movs	r0, r1
 800593a:	0011      	movs	r1, r2
 800593c:	6023      	str	r3, [r4, #0]
 800593e:	f7fc fc9a 	bl	8002276 <_fstat>
 8005942:	1c43      	adds	r3, r0, #1
 8005944:	d103      	bne.n	800594e <_fstat_r+0x1e>
 8005946:	6823      	ldr	r3, [r4, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d000      	beq.n	800594e <_fstat_r+0x1e>
 800594c:	602b      	str	r3, [r5, #0]
 800594e:	bd70      	pop	{r4, r5, r6, pc}
 8005950:	20000460 	.word	0x20000460

08005954 <_isatty_r>:
 8005954:	2300      	movs	r3, #0
 8005956:	b570      	push	{r4, r5, r6, lr}
 8005958:	4c06      	ldr	r4, [pc, #24]	; (8005974 <_isatty_r+0x20>)
 800595a:	0005      	movs	r5, r0
 800595c:	0008      	movs	r0, r1
 800595e:	6023      	str	r3, [r4, #0]
 8005960:	f7fc fc97 	bl	8002292 <_isatty>
 8005964:	1c43      	adds	r3, r0, #1
 8005966:	d103      	bne.n	8005970 <_isatty_r+0x1c>
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d000      	beq.n	8005970 <_isatty_r+0x1c>
 800596e:	602b      	str	r3, [r5, #0]
 8005970:	bd70      	pop	{r4, r5, r6, pc}
 8005972:	46c0      	nop			; (mov r8, r8)
 8005974:	20000460 	.word	0x20000460

08005978 <_lseek_r>:
 8005978:	b570      	push	{r4, r5, r6, lr}
 800597a:	0005      	movs	r5, r0
 800597c:	0008      	movs	r0, r1
 800597e:	0011      	movs	r1, r2
 8005980:	2200      	movs	r2, #0
 8005982:	4c06      	ldr	r4, [pc, #24]	; (800599c <_lseek_r+0x24>)
 8005984:	6022      	str	r2, [r4, #0]
 8005986:	001a      	movs	r2, r3
 8005988:	f7fc fc8c 	bl	80022a4 <_lseek>
 800598c:	1c43      	adds	r3, r0, #1
 800598e:	d103      	bne.n	8005998 <_lseek_r+0x20>
 8005990:	6823      	ldr	r3, [r4, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d000      	beq.n	8005998 <_lseek_r+0x20>
 8005996:	602b      	str	r3, [r5, #0]
 8005998:	bd70      	pop	{r4, r5, r6, pc}
 800599a:	46c0      	nop			; (mov r8, r8)
 800599c:	20000460 	.word	0x20000460

080059a0 <memchr>:
 80059a0:	b2c9      	uxtb	r1, r1
 80059a2:	1882      	adds	r2, r0, r2
 80059a4:	4290      	cmp	r0, r2
 80059a6:	d101      	bne.n	80059ac <memchr+0xc>
 80059a8:	2000      	movs	r0, #0
 80059aa:	4770      	bx	lr
 80059ac:	7803      	ldrb	r3, [r0, #0]
 80059ae:	428b      	cmp	r3, r1
 80059b0:	d0fb      	beq.n	80059aa <memchr+0xa>
 80059b2:	3001      	adds	r0, #1
 80059b4:	e7f6      	b.n	80059a4 <memchr+0x4>

080059b6 <memcpy>:
 80059b6:	2300      	movs	r3, #0
 80059b8:	b510      	push	{r4, lr}
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d100      	bne.n	80059c0 <memcpy+0xa>
 80059be:	bd10      	pop	{r4, pc}
 80059c0:	5ccc      	ldrb	r4, [r1, r3]
 80059c2:	54c4      	strb	r4, [r0, r3]
 80059c4:	3301      	adds	r3, #1
 80059c6:	e7f8      	b.n	80059ba <memcpy+0x4>

080059c8 <memmove>:
 80059c8:	b510      	push	{r4, lr}
 80059ca:	4288      	cmp	r0, r1
 80059cc:	d902      	bls.n	80059d4 <memmove+0xc>
 80059ce:	188b      	adds	r3, r1, r2
 80059d0:	4298      	cmp	r0, r3
 80059d2:	d303      	bcc.n	80059dc <memmove+0x14>
 80059d4:	2300      	movs	r3, #0
 80059d6:	e007      	b.n	80059e8 <memmove+0x20>
 80059d8:	5c8b      	ldrb	r3, [r1, r2]
 80059da:	5483      	strb	r3, [r0, r2]
 80059dc:	3a01      	subs	r2, #1
 80059de:	d2fb      	bcs.n	80059d8 <memmove+0x10>
 80059e0:	bd10      	pop	{r4, pc}
 80059e2:	5ccc      	ldrb	r4, [r1, r3]
 80059e4:	54c4      	strb	r4, [r0, r3]
 80059e6:	3301      	adds	r3, #1
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d1fa      	bne.n	80059e2 <memmove+0x1a>
 80059ec:	e7f8      	b.n	80059e0 <memmove+0x18>

080059ee <__malloc_lock>:
 80059ee:	4770      	bx	lr

080059f0 <__malloc_unlock>:
 80059f0:	4770      	bx	lr

080059f2 <_realloc_r>:
 80059f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059f4:	0007      	movs	r7, r0
 80059f6:	000d      	movs	r5, r1
 80059f8:	0016      	movs	r6, r2
 80059fa:	2900      	cmp	r1, #0
 80059fc:	d105      	bne.n	8005a0a <_realloc_r+0x18>
 80059fe:	0011      	movs	r1, r2
 8005a00:	f7ff fa5e 	bl	8004ec0 <_malloc_r>
 8005a04:	0004      	movs	r4, r0
 8005a06:	0020      	movs	r0, r4
 8005a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a0a:	2a00      	cmp	r2, #0
 8005a0c:	d103      	bne.n	8005a16 <_realloc_r+0x24>
 8005a0e:	f7ff fa0d 	bl	8004e2c <_free_r>
 8005a12:	0034      	movs	r4, r6
 8005a14:	e7f7      	b.n	8005a06 <_realloc_r+0x14>
 8005a16:	f000 f827 	bl	8005a68 <_malloc_usable_size_r>
 8005a1a:	002c      	movs	r4, r5
 8005a1c:	42b0      	cmp	r0, r6
 8005a1e:	d2f2      	bcs.n	8005a06 <_realloc_r+0x14>
 8005a20:	0031      	movs	r1, r6
 8005a22:	0038      	movs	r0, r7
 8005a24:	f7ff fa4c 	bl	8004ec0 <_malloc_r>
 8005a28:	1e04      	subs	r4, r0, #0
 8005a2a:	d0ec      	beq.n	8005a06 <_realloc_r+0x14>
 8005a2c:	0029      	movs	r1, r5
 8005a2e:	0032      	movs	r2, r6
 8005a30:	f7ff ffc1 	bl	80059b6 <memcpy>
 8005a34:	0029      	movs	r1, r5
 8005a36:	0038      	movs	r0, r7
 8005a38:	f7ff f9f8 	bl	8004e2c <_free_r>
 8005a3c:	e7e3      	b.n	8005a06 <_realloc_r+0x14>
	...

08005a40 <_read_r>:
 8005a40:	b570      	push	{r4, r5, r6, lr}
 8005a42:	0005      	movs	r5, r0
 8005a44:	0008      	movs	r0, r1
 8005a46:	0011      	movs	r1, r2
 8005a48:	2200      	movs	r2, #0
 8005a4a:	4c06      	ldr	r4, [pc, #24]	; (8005a64 <_read_r+0x24>)
 8005a4c:	6022      	str	r2, [r4, #0]
 8005a4e:	001a      	movs	r2, r3
 8005a50:	f7fc fbea 	bl	8002228 <_read>
 8005a54:	1c43      	adds	r3, r0, #1
 8005a56:	d103      	bne.n	8005a60 <_read_r+0x20>
 8005a58:	6823      	ldr	r3, [r4, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d000      	beq.n	8005a60 <_read_r+0x20>
 8005a5e:	602b      	str	r3, [r5, #0]
 8005a60:	bd70      	pop	{r4, r5, r6, pc}
 8005a62:	46c0      	nop			; (mov r8, r8)
 8005a64:	20000460 	.word	0x20000460

08005a68 <_malloc_usable_size_r>:
 8005a68:	1f0b      	subs	r3, r1, #4
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	1f18      	subs	r0, r3, #4
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	da01      	bge.n	8005a76 <_malloc_usable_size_r+0xe>
 8005a72:	580b      	ldr	r3, [r1, r0]
 8005a74:	18c0      	adds	r0, r0, r3
 8005a76:	4770      	bx	lr

08005a78 <_init>:
 8005a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a7a:	46c0      	nop			; (mov r8, r8)
 8005a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a7e:	bc08      	pop	{r3}
 8005a80:	469e      	mov	lr, r3
 8005a82:	4770      	bx	lr

08005a84 <_fini>:
 8005a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a86:	46c0      	nop			; (mov r8, r8)
 8005a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a8a:	bc08      	pop	{r3}
 8005a8c:	469e      	mov	lr, r3
 8005a8e:	4770      	bx	lr
