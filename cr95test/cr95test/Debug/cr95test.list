
cr95test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005774  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  08005834  08005834  00015834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f54  08005f54  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08005f54  08005f54  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f54  08005f54  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f54  08005f54  00015f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f58  08005f58  00015f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08005f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  200001e0  0800613c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  0800613c  00020464  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000807a  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018c3  00000000  00000000  00028282  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000788  00000000  00000000  00029b48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006b0  00000000  00000000  0002a2d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000d3bc  00000000  00000000  0002a980  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007a9c  00000000  00000000  00037d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00046060  00000000  00000000  0003f7d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00085838  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002430  00000000  00000000  000858b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800581c 	.word	0x0800581c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800581c 	.word	0x0800581c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char const *buf, int n)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	60f8      	str	r0, [r7, #12]
 8000238:	60b9      	str	r1, [r7, #8]
 800023a:	607a      	str	r2, [r7, #4]
    if (printf_en) HAL_UART_Transmit(&huart2, (uint8_t*)(buf), n, HAL_MAX_DELAY);
 800023c:	4b08      	ldr	r3, [pc, #32]	; (8000260 <_write+0x30>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d007      	beq.n	8000254 <_write+0x24>
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	b29a      	uxth	r2, r3
 8000248:	2301      	movs	r3, #1
 800024a:	425b      	negs	r3, r3
 800024c:	68b9      	ldr	r1, [r7, #8]
 800024e:	4805      	ldr	r0, [pc, #20]	; (8000264 <_write+0x34>)
 8000250:	f003 fb0c 	bl	800386c <HAL_UART_Transmit>
    return n;
 8000254:	687b      	ldr	r3, [r7, #4]
}
 8000256:	0018      	movs	r0, r3
 8000258:	46bd      	mov	sp, r7
 800025a:	b004      	add	sp, #16
 800025c:	bd80      	pop	{r7, pc}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	20000000 	.word	0x20000000
 8000264:	200003dc 	.word	0x200003dc

08000268 <cr95write>:

void cr95write(const uint8_t *data, uint8_t length)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
 8000270:	000a      	movs	r2, r1
 8000272:	1cfb      	adds	r3, r7, #3
 8000274:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t *)(data), length, HAL_MAX_DELAY);
 8000276:	1cfb      	adds	r3, r7, #3
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	b29a      	uxth	r2, r3
 800027c:	2301      	movs	r3, #1
 800027e:	425b      	negs	r3, r3
 8000280:	6879      	ldr	r1, [r7, #4]
 8000282:	4803      	ldr	r0, [pc, #12]	; (8000290 <cr95write+0x28>)
 8000284:	f003 faf2 	bl	800386c <HAL_UART_Transmit>
}
 8000288:	46c0      	nop			; (mov r8, r8)
 800028a:	46bd      	mov	sp, r7
 800028c:	b002      	add	sp, #8
 800028e:	bd80      	pop	{r7, pc}
 8000290:	2000035c 	.word	0x2000035c

08000294 <cr95read>:

uint8_t cr95read(uint8_t *data, uint8_t *length)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b086      	sub	sp, #24
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
 800029c:	6039      	str	r1, [r7, #0]
	uint32_t timeout = HAL_GetTick();
 800029e:	f001 ff95 	bl	80021cc <HAL_GetTick>
 80002a2:	0003      	movs	r3, r0
 80002a4:	613b      	str	r3, [r7, #16]

	do {
		if (HAL_GetTick() - timeout > NFC_TIMEOUT) return 0xFF; // timeout
 80002a6:	f001 ff91 	bl	80021cc <HAL_GetTick>
 80002aa:	0002      	movs	r2, r0
 80002ac:	693b      	ldr	r3, [r7, #16]
 80002ae:	1ad2      	subs	r2, r2, r3
 80002b0:	23fa      	movs	r3, #250	; 0xfa
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	429a      	cmp	r2, r3
 80002b6:	d901      	bls.n	80002bc <cr95read+0x28>
 80002b8:	23ff      	movs	r3, #255	; 0xff
 80002ba:	e099      	b.n	80003f0 <cr95read+0x15c>
	} while (nfc_rx_read_ptr == nfc_rx_write_ptr);
 80002bc:	4b4e      	ldr	r3, [pc, #312]	; (80003f8 <cr95read+0x164>)
 80002be:	881b      	ldrh	r3, [r3, #0]
 80002c0:	b29b      	uxth	r3, r3
 80002c2:	0019      	movs	r1, r3
 80002c4:	4b4d      	ldr	r3, [pc, #308]	; (80003fc <cr95read+0x168>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	685b      	ldr	r3, [r3, #4]
 80002ca:	2240      	movs	r2, #64	; 0x40
 80002cc:	1ad3      	subs	r3, r2, r3
 80002ce:	4299      	cmp	r1, r3
 80002d0:	d0e9      	beq.n	80002a6 <cr95read+0x12>
	uint8_t resp = nfc_rx_buf[nfc_rx_read_ptr];
 80002d2:	4b49      	ldr	r3, [pc, #292]	; (80003f8 <cr95read+0x164>)
 80002d4:	881b      	ldrh	r3, [r3, #0]
 80002d6:	b29b      	uxth	r3, r3
 80002d8:	0019      	movs	r1, r3
 80002da:	230f      	movs	r3, #15
 80002dc:	18fb      	adds	r3, r7, r3
 80002de:	4a48      	ldr	r2, [pc, #288]	; (8000400 <cr95read+0x16c>)
 80002e0:	5c52      	ldrb	r2, [r2, r1]
 80002e2:	701a      	strb	r2, [r3, #0]
    if (++nfc_rx_read_ptr >= RX_BUFFER_LEN) nfc_rx_read_ptr = 0; // increase read pointer
 80002e4:	4b44      	ldr	r3, [pc, #272]	; (80003f8 <cr95read+0x164>)
 80002e6:	881b      	ldrh	r3, [r3, #0]
 80002e8:	b29b      	uxth	r3, r3
 80002ea:	3301      	adds	r3, #1
 80002ec:	b29b      	uxth	r3, r3
 80002ee:	4a42      	ldr	r2, [pc, #264]	; (80003f8 <cr95read+0x164>)
 80002f0:	1c19      	adds	r1, r3, #0
 80002f2:	8011      	strh	r1, [r2, #0]
 80002f4:	2b3f      	cmp	r3, #63	; 0x3f
 80002f6:	d902      	bls.n	80002fe <cr95read+0x6a>
 80002f8:	4b3f      	ldr	r3, [pc, #252]	; (80003f8 <cr95read+0x164>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	801a      	strh	r2, [r3, #0]

    if (resp == 0x55) return resp;
 80002fe:	230f      	movs	r3, #15
 8000300:	18fb      	adds	r3, r7, r3
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	2b55      	cmp	r3, #85	; 0x55
 8000306:	d103      	bne.n	8000310 <cr95read+0x7c>
 8000308:	230f      	movs	r3, #15
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	e06f      	b.n	80003f0 <cr95read+0x15c>

	do {
		if (HAL_GetTick() - timeout > NFC_TIMEOUT) return 0xFF; // timeout
 8000310:	f001 ff5c 	bl	80021cc <HAL_GetTick>
 8000314:	0002      	movs	r2, r0
 8000316:	693b      	ldr	r3, [r7, #16]
 8000318:	1ad2      	subs	r2, r2, r3
 800031a:	23fa      	movs	r3, #250	; 0xfa
 800031c:	009b      	lsls	r3, r3, #2
 800031e:	429a      	cmp	r2, r3
 8000320:	d901      	bls.n	8000326 <cr95read+0x92>
 8000322:	23ff      	movs	r3, #255	; 0xff
 8000324:	e064      	b.n	80003f0 <cr95read+0x15c>
	} while (nfc_rx_read_ptr == nfc_rx_write_ptr);
 8000326:	4b34      	ldr	r3, [pc, #208]	; (80003f8 <cr95read+0x164>)
 8000328:	881b      	ldrh	r3, [r3, #0]
 800032a:	b29b      	uxth	r3, r3
 800032c:	0019      	movs	r1, r3
 800032e:	4b33      	ldr	r3, [pc, #204]	; (80003fc <cr95read+0x168>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	685b      	ldr	r3, [r3, #4]
 8000334:	2240      	movs	r2, #64	; 0x40
 8000336:	1ad3      	subs	r3, r2, r3
 8000338:	4299      	cmp	r1, r3
 800033a:	d0e9      	beq.n	8000310 <cr95read+0x7c>
	uint8_t len = nfc_rx_buf[nfc_rx_read_ptr];
 800033c:	4b2e      	ldr	r3, [pc, #184]	; (80003f8 <cr95read+0x164>)
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	b29b      	uxth	r3, r3
 8000342:	0019      	movs	r1, r3
 8000344:	2317      	movs	r3, #23
 8000346:	18fb      	adds	r3, r7, r3
 8000348:	4a2d      	ldr	r2, [pc, #180]	; (8000400 <cr95read+0x16c>)
 800034a:	5c52      	ldrb	r2, [r2, r1]
 800034c:	701a      	strb	r2, [r3, #0]
    if (++nfc_rx_read_ptr >= RX_BUFFER_LEN) nfc_rx_read_ptr = 0; // increase read pointer
 800034e:	4b2a      	ldr	r3, [pc, #168]	; (80003f8 <cr95read+0x164>)
 8000350:	881b      	ldrh	r3, [r3, #0]
 8000352:	b29b      	uxth	r3, r3
 8000354:	3301      	adds	r3, #1
 8000356:	b29b      	uxth	r3, r3
 8000358:	4a27      	ldr	r2, [pc, #156]	; (80003f8 <cr95read+0x164>)
 800035a:	1c19      	adds	r1, r3, #0
 800035c:	8011      	strh	r1, [r2, #0]
 800035e:	2b3f      	cmp	r3, #63	; 0x3f
 8000360:	d902      	bls.n	8000368 <cr95read+0xd4>
 8000362:	4b25      	ldr	r3, [pc, #148]	; (80003f8 <cr95read+0x164>)
 8000364:	2200      	movs	r2, #0
 8000366:	801a      	strh	r2, [r3, #0]

    if (length) *length = len;
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d035      	beq.n	80003da <cr95read+0x146>
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	2217      	movs	r2, #23
 8000372:	18ba      	adds	r2, r7, r2
 8000374:	7812      	ldrb	r2, [r2, #0]
 8000376:	701a      	strb	r2, [r3, #0]
    while (len--) {
 8000378:	e02f      	b.n	80003da <cr95read+0x146>
    	do {
    		if (HAL_GetTick() - timeout > NFC_TIMEOUT) return 0xFF; // timeout
 800037a:	f001 ff27 	bl	80021cc <HAL_GetTick>
 800037e:	0002      	movs	r2, r0
 8000380:	693b      	ldr	r3, [r7, #16]
 8000382:	1ad2      	subs	r2, r2, r3
 8000384:	23fa      	movs	r3, #250	; 0xfa
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	429a      	cmp	r2, r3
 800038a:	d901      	bls.n	8000390 <cr95read+0xfc>
 800038c:	23ff      	movs	r3, #255	; 0xff
 800038e:	e02f      	b.n	80003f0 <cr95read+0x15c>
    	} while (nfc_rx_read_ptr == nfc_rx_write_ptr);
 8000390:	4b19      	ldr	r3, [pc, #100]	; (80003f8 <cr95read+0x164>)
 8000392:	881b      	ldrh	r3, [r3, #0]
 8000394:	b29b      	uxth	r3, r3
 8000396:	0019      	movs	r1, r3
 8000398:	4b18      	ldr	r3, [pc, #96]	; (80003fc <cr95read+0x168>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	2240      	movs	r2, #64	; 0x40
 80003a0:	1ad3      	subs	r3, r2, r3
 80003a2:	4299      	cmp	r1, r3
 80003a4:	d0e9      	beq.n	800037a <cr95read+0xe6>
    	if (data) *data++ = nfc_rx_buf[nfc_rx_read_ptr];
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d009      	beq.n	80003c0 <cr95read+0x12c>
 80003ac:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <cr95read+0x164>)
 80003ae:	881b      	ldrh	r3, [r3, #0]
 80003b0:	b29b      	uxth	r3, r3
 80003b2:	0019      	movs	r1, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	1c5a      	adds	r2, r3, #1
 80003b8:	607a      	str	r2, [r7, #4]
 80003ba:	4a11      	ldr	r2, [pc, #68]	; (8000400 <cr95read+0x16c>)
 80003bc:	5c52      	ldrb	r2, [r2, r1]
 80003be:	701a      	strb	r2, [r3, #0]
        if (++nfc_rx_read_ptr >= RX_BUFFER_LEN) nfc_rx_read_ptr = 0; // increase read pointer
 80003c0:	4b0d      	ldr	r3, [pc, #52]	; (80003f8 <cr95read+0x164>)
 80003c2:	881b      	ldrh	r3, [r3, #0]
 80003c4:	b29b      	uxth	r3, r3
 80003c6:	3301      	adds	r3, #1
 80003c8:	b29b      	uxth	r3, r3
 80003ca:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <cr95read+0x164>)
 80003cc:	1c19      	adds	r1, r3, #0
 80003ce:	8011      	strh	r1, [r2, #0]
 80003d0:	2b3f      	cmp	r3, #63	; 0x3f
 80003d2:	d902      	bls.n	80003da <cr95read+0x146>
 80003d4:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <cr95read+0x164>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	801a      	strh	r2, [r3, #0]
    while (len--) {
 80003da:	2217      	movs	r2, #23
 80003dc:	18bb      	adds	r3, r7, r2
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	18ba      	adds	r2, r7, r2
 80003e2:	1e59      	subs	r1, r3, #1
 80003e4:	7011      	strb	r1, [r2, #0]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d1c7      	bne.n	800037a <cr95read+0xe6>
    }

    return resp;
 80003ea:	230f      	movs	r3, #15
 80003ec:	18fb      	adds	r3, r7, r3
 80003ee:	781b      	ldrb	r3, [r3, #0]
}
 80003f0:	0018      	movs	r0, r3
 80003f2:	46bd      	mov	sp, r7
 80003f4:	b006      	add	sp, #24
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	20000280 	.word	0x20000280
 80003fc:	20000318 	.word	0x20000318
 8000400:	20000240 	.word	0x20000240

08000404 <cr95_wakeup>:

static void cr95_wakeup(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
	const uint8_t wakeup = 0;
 800040a:	1dfb      	adds	r3, r7, #7
 800040c:	2200      	movs	r2, #0
 800040e:	701a      	strb	r2, [r3, #0]
	cr95write(&wakeup, 1);
 8000410:	1dfb      	adds	r3, r7, #7
 8000412:	2101      	movs	r1, #1
 8000414:	0018      	movs	r0, r3
 8000416:	f7ff ff27 	bl	8000268 <cr95write>
	printf("WAKEUP sent\n");
 800041a:	4b04      	ldr	r3, [pc, #16]	; (800042c <cr95_wakeup+0x28>)
 800041c:	0018      	movs	r0, r3
 800041e:	f004 f84b 	bl	80044b8 <puts>
}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	46bd      	mov	sp, r7
 8000426:	b002      	add	sp, #8
 8000428:	bd80      	pop	{r7, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	08005834 	.word	0x08005834

08000430 <cr95_init14>:

static void cr95_init14(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b086      	sub	sp, #24
 8000434:	af00      	add	r7, sp, #0
	const uint8_t cmd_init1[] = { 0x02, 0x02, 0x02, 0x00 };
 8000436:	2014      	movs	r0, #20
 8000438:	183b      	adds	r3, r7, r0
 800043a:	4a27      	ldr	r2, [pc, #156]	; (80004d8 <cr95_init14+0xa8>)
 800043c:	6812      	ldr	r2, [r2, #0]
 800043e:	601a      	str	r2, [r3, #0]
	const uint8_t cmd_init2[] = { 0x09, 0x04, 0x3A, 0x00, 0x58, 0x04 };
 8000440:	230c      	movs	r3, #12
 8000442:	18fb      	adds	r3, r7, r3
 8000444:	4a25      	ldr	r2, [pc, #148]	; (80004dc <cr95_init14+0xac>)
 8000446:	6811      	ldr	r1, [r2, #0]
 8000448:	6019      	str	r1, [r3, #0]
 800044a:	8892      	ldrh	r2, [r2, #4]
 800044c:	809a      	strh	r2, [r3, #4]
	const uint8_t cmd_init3[] = { 0x09, 0x04, 0x68, 0x01, 0x01, 0xD1 };
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	4a23      	ldr	r2, [pc, #140]	; (80004e0 <cr95_init14+0xb0>)
 8000452:	6811      	ldr	r1, [r2, #0]
 8000454:	6019      	str	r1, [r3, #0]
 8000456:	8892      	ldrh	r2, [r2, #4]
 8000458:	809a      	strh	r2, [r3, #4]

	cr95write(cmd_init1, sizeof(cmd_init1));
 800045a:	183b      	adds	r3, r7, r0
 800045c:	2104      	movs	r1, #4
 800045e:	0018      	movs	r0, r3
 8000460:	f7ff ff02 	bl	8000268 <cr95write>
	printf("Initiation of 14 %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 8000464:	2100      	movs	r1, #0
 8000466:	2000      	movs	r0, #0
 8000468:	f7ff ff14 	bl	8000294 <cr95read>
 800046c:	1e03      	subs	r3, r0, #0
 800046e:	d101      	bne.n	8000474 <cr95_init14+0x44>
 8000470:	4b1c      	ldr	r3, [pc, #112]	; (80004e4 <cr95_init14+0xb4>)
 8000472:	e000      	b.n	8000476 <cr95_init14+0x46>
 8000474:	4b1c      	ldr	r3, [pc, #112]	; (80004e8 <cr95_init14+0xb8>)
 8000476:	4a1d      	ldr	r2, [pc, #116]	; (80004ec <cr95_init14+0xbc>)
 8000478:	0019      	movs	r1, r3
 800047a:	0010      	movs	r0, r2
 800047c:	f003 ff8e 	bl	800439c <iprintf>
	cr95write(cmd_init2, sizeof(cmd_init2));
 8000480:	230c      	movs	r3, #12
 8000482:	18fb      	adds	r3, r7, r3
 8000484:	2106      	movs	r1, #6
 8000486:	0018      	movs	r0, r3
 8000488:	f7ff feee 	bl	8000268 <cr95write>
	printf(" %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 800048c:	2100      	movs	r1, #0
 800048e:	2000      	movs	r0, #0
 8000490:	f7ff ff00 	bl	8000294 <cr95read>
 8000494:	1e03      	subs	r3, r0, #0
 8000496:	d101      	bne.n	800049c <cr95_init14+0x6c>
 8000498:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <cr95_init14+0xb4>)
 800049a:	e000      	b.n	800049e <cr95_init14+0x6e>
 800049c:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <cr95_init14+0xb8>)
 800049e:	4a14      	ldr	r2, [pc, #80]	; (80004f0 <cr95_init14+0xc0>)
 80004a0:	0019      	movs	r1, r3
 80004a2:	0010      	movs	r0, r2
 80004a4:	f003 ff7a 	bl	800439c <iprintf>
	cr95write(cmd_init3, sizeof(cmd_init3));
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2106      	movs	r1, #6
 80004ac:	0018      	movs	r0, r3
 80004ae:	f7ff fedb 	bl	8000268 <cr95write>
	printf(" %s\n", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 80004b2:	2100      	movs	r1, #0
 80004b4:	2000      	movs	r0, #0
 80004b6:	f7ff feed 	bl	8000294 <cr95read>
 80004ba:	1e03      	subs	r3, r0, #0
 80004bc:	d101      	bne.n	80004c2 <cr95_init14+0x92>
 80004be:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <cr95_init14+0xb4>)
 80004c0:	e000      	b.n	80004c4 <cr95_init14+0x94>
 80004c2:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <cr95_init14+0xb8>)
 80004c4:	4a0b      	ldr	r2, [pc, #44]	; (80004f4 <cr95_init14+0xc4>)
 80004c6:	0019      	movs	r1, r3
 80004c8:	0010      	movs	r0, r2
 80004ca:	f003 ff67 	bl	800439c <iprintf>
}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b006      	add	sp, #24
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	08005868 	.word	0x08005868
 80004dc:	0800586c 	.word	0x0800586c
 80004e0:	08005874 	.word	0x08005874
 80004e4:	08005840 	.word	0x08005840
 80004e8:	08005844 	.word	0x08005844
 80004ec:	08005848 	.word	0x08005848
 80004f0:	0800585c 	.word	0x0800585c
 80004f4:	08005860 	.word	0x08005860

080004f8 <cr95_init14B>:

static void cr95_init14B(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0
	const uint8_t cmd_init1B[] = { 0x02, 0x02, 0x03, 0xF1 };
 80004fe:	2014      	movs	r0, #20
 8000500:	183b      	adds	r3, r7, r0
 8000502:	4a27      	ldr	r2, [pc, #156]	; (80005a0 <cr95_init14B+0xa8>)
 8000504:	6812      	ldr	r2, [r2, #0]
 8000506:	601a      	str	r2, [r3, #0]
	const uint8_t cmd_init2B[] = { 0x09, 0x04, 0x3A, 0x00, 0x58, 0x04 };
 8000508:	230c      	movs	r3, #12
 800050a:	18fb      	adds	r3, r7, r3
 800050c:	4a25      	ldr	r2, [pc, #148]	; (80005a4 <cr95_init14B+0xac>)
 800050e:	6811      	ldr	r1, [r2, #0]
 8000510:	6019      	str	r1, [r3, #0]
 8000512:	8892      	ldrh	r2, [r2, #4]
 8000514:	809a      	strh	r2, [r3, #4]
	const uint8_t cmd_init3B[] = { 0x09, 0x04, 0x68, 0x01, 0x01, 0x20 };
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	4a23      	ldr	r2, [pc, #140]	; (80005a8 <cr95_init14B+0xb0>)
 800051a:	6811      	ldr	r1, [r2, #0]
 800051c:	6019      	str	r1, [r3, #0]
 800051e:	8892      	ldrh	r2, [r2, #4]
 8000520:	809a      	strh	r2, [r3, #4]

	cr95write(cmd_init1B, sizeof(cmd_init1B));
 8000522:	183b      	adds	r3, r7, r0
 8000524:	2104      	movs	r1, #4
 8000526:	0018      	movs	r0, r3
 8000528:	f7ff fe9e 	bl	8000268 <cr95write>
	printf("Initiation of 14B %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 800052c:	2100      	movs	r1, #0
 800052e:	2000      	movs	r0, #0
 8000530:	f7ff feb0 	bl	8000294 <cr95read>
 8000534:	1e03      	subs	r3, r0, #0
 8000536:	d101      	bne.n	800053c <cr95_init14B+0x44>
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <cr95_init14B+0xb4>)
 800053a:	e000      	b.n	800053e <cr95_init14B+0x46>
 800053c:	4b1c      	ldr	r3, [pc, #112]	; (80005b0 <cr95_init14B+0xb8>)
 800053e:	4a1d      	ldr	r2, [pc, #116]	; (80005b4 <cr95_init14B+0xbc>)
 8000540:	0019      	movs	r1, r3
 8000542:	0010      	movs	r0, r2
 8000544:	f003 ff2a 	bl	800439c <iprintf>
	cr95write(cmd_init2B, sizeof(cmd_init2B));
 8000548:	230c      	movs	r3, #12
 800054a:	18fb      	adds	r3, r7, r3
 800054c:	2106      	movs	r1, #6
 800054e:	0018      	movs	r0, r3
 8000550:	f7ff fe8a 	bl	8000268 <cr95write>
	printf(" %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 8000554:	2100      	movs	r1, #0
 8000556:	2000      	movs	r0, #0
 8000558:	f7ff fe9c 	bl	8000294 <cr95read>
 800055c:	1e03      	subs	r3, r0, #0
 800055e:	d101      	bne.n	8000564 <cr95_init14B+0x6c>
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <cr95_init14B+0xb4>)
 8000562:	e000      	b.n	8000566 <cr95_init14B+0x6e>
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <cr95_init14B+0xb8>)
 8000566:	4a14      	ldr	r2, [pc, #80]	; (80005b8 <cr95_init14B+0xc0>)
 8000568:	0019      	movs	r1, r3
 800056a:	0010      	movs	r0, r2
 800056c:	f003 ff16 	bl	800439c <iprintf>
	cr95write(cmd_init3B, sizeof(cmd_init3B));
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2106      	movs	r1, #6
 8000574:	0018      	movs	r0, r3
 8000576:	f7ff fe77 	bl	8000268 <cr95write>
	printf(" %s\n", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 800057a:	2100      	movs	r1, #0
 800057c:	2000      	movs	r0, #0
 800057e:	f7ff fe89 	bl	8000294 <cr95read>
 8000582:	1e03      	subs	r3, r0, #0
 8000584:	d101      	bne.n	800058a <cr95_init14B+0x92>
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <cr95_init14B+0xb4>)
 8000588:	e000      	b.n	800058c <cr95_init14B+0x94>
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <cr95_init14B+0xb8>)
 800058c:	4a0b      	ldr	r2, [pc, #44]	; (80005bc <cr95_init14B+0xc4>)
 800058e:	0019      	movs	r1, r3
 8000590:	0010      	movs	r0, r2
 8000592:	f003 ff03 	bl	800439c <iprintf>
}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b006      	add	sp, #24
 800059c:	bd80      	pop	{r7, pc}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	08005894 	.word	0x08005894
 80005a4:	0800586c 	.word	0x0800586c
 80005a8:	08005898 	.word	0x08005898
 80005ac:	08005840 	.word	0x08005840
 80005b0:	08005844 	.word	0x08005844
 80005b4:	0800587c 	.word	0x0800587c
 80005b8:	0800585c 	.word	0x0800585c
 80005bc:	08005860 	.word	0x08005860

080005c0 <cr95_init15>:

static void cr95_init15(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
	const uint8_t cmd_init1_15[] = { 0x02, 0x02, 0x01, 0x03 };
 80005c6:	2014      	movs	r0, #20
 80005c8:	183b      	adds	r3, r7, r0
 80005ca:	4a27      	ldr	r2, [pc, #156]	; (8000668 <cr95_init15+0xa8>)
 80005cc:	6812      	ldr	r2, [r2, #0]
 80005ce:	601a      	str	r2, [r3, #0]
	const uint8_t cmd_init2_15[] = { 0x09, 0x04, 0x3A, 0x00, 0x58, 0x04 };
 80005d0:	230c      	movs	r3, #12
 80005d2:	18fb      	adds	r3, r7, r3
 80005d4:	4a25      	ldr	r2, [pc, #148]	; (800066c <cr95_init15+0xac>)
 80005d6:	6811      	ldr	r1, [r2, #0]
 80005d8:	6019      	str	r1, [r3, #0]
 80005da:	8892      	ldrh	r2, [r2, #4]
 80005dc:	809a      	strh	r2, [r3, #4]
	const uint8_t cmd_init3_15[] = { 0x09, 0x04, 0x68, 0x01, 0x01, 0xD0 };
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	4a23      	ldr	r2, [pc, #140]	; (8000670 <cr95_init15+0xb0>)
 80005e2:	6811      	ldr	r1, [r2, #0]
 80005e4:	6019      	str	r1, [r3, #0]
 80005e6:	8892      	ldrh	r2, [r2, #4]
 80005e8:	809a      	strh	r2, [r3, #4]

	cr95write(cmd_init1_15, sizeof(cmd_init1_15));
 80005ea:	183b      	adds	r3, r7, r0
 80005ec:	2104      	movs	r1, #4
 80005ee:	0018      	movs	r0, r3
 80005f0:	f7ff fe3a 	bl	8000268 <cr95write>
	printf("Initiation of 15 %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 80005f4:	2100      	movs	r1, #0
 80005f6:	2000      	movs	r0, #0
 80005f8:	f7ff fe4c 	bl	8000294 <cr95read>
 80005fc:	1e03      	subs	r3, r0, #0
 80005fe:	d101      	bne.n	8000604 <cr95_init15+0x44>
 8000600:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <cr95_init15+0xb4>)
 8000602:	e000      	b.n	8000606 <cr95_init15+0x46>
 8000604:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <cr95_init15+0xb8>)
 8000606:	4a1d      	ldr	r2, [pc, #116]	; (800067c <cr95_init15+0xbc>)
 8000608:	0019      	movs	r1, r3
 800060a:	0010      	movs	r0, r2
 800060c:	f003 fec6 	bl	800439c <iprintf>
	cr95write(cmd_init2_15, sizeof(cmd_init2_15));
 8000610:	230c      	movs	r3, #12
 8000612:	18fb      	adds	r3, r7, r3
 8000614:	2106      	movs	r1, #6
 8000616:	0018      	movs	r0, r3
 8000618:	f7ff fe26 	bl	8000268 <cr95write>
	printf(" %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 800061c:	2100      	movs	r1, #0
 800061e:	2000      	movs	r0, #0
 8000620:	f7ff fe38 	bl	8000294 <cr95read>
 8000624:	1e03      	subs	r3, r0, #0
 8000626:	d101      	bne.n	800062c <cr95_init15+0x6c>
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <cr95_init15+0xb4>)
 800062a:	e000      	b.n	800062e <cr95_init15+0x6e>
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <cr95_init15+0xb8>)
 800062e:	4a14      	ldr	r2, [pc, #80]	; (8000680 <cr95_init15+0xc0>)
 8000630:	0019      	movs	r1, r3
 8000632:	0010      	movs	r0, r2
 8000634:	f003 feb2 	bl	800439c <iprintf>
	cr95write(cmd_init3_15, sizeof(cmd_init3_15));
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2106      	movs	r1, #6
 800063c:	0018      	movs	r0, r3
 800063e:	f7ff fe13 	bl	8000268 <cr95write>
	printf(" %s\n", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 8000642:	2100      	movs	r1, #0
 8000644:	2000      	movs	r0, #0
 8000646:	f7ff fe25 	bl	8000294 <cr95read>
 800064a:	1e03      	subs	r3, r0, #0
 800064c:	d101      	bne.n	8000652 <cr95_init15+0x92>
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <cr95_init15+0xb4>)
 8000650:	e000      	b.n	8000654 <cr95_init15+0x94>
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <cr95_init15+0xb8>)
 8000654:	4a0b      	ldr	r2, [pc, #44]	; (8000684 <cr95_init15+0xc4>)
 8000656:	0019      	movs	r1, r3
 8000658:	0010      	movs	r0, r2
 800065a:	f003 fe9f 	bl	800439c <iprintf>
}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	b006      	add	sp, #24
 8000664:	bd80      	pop	{r7, pc}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	080058b4 	.word	0x080058b4
 800066c:	0800586c 	.word	0x0800586c
 8000670:	080058b8 	.word	0x080058b8
 8000674:	08005840 	.word	0x08005840
 8000678:	08005844 	.word	0x08005844
 800067c:	080058a0 	.word	0x080058a0
 8000680:	0800585c 	.word	0x0800585c
 8000684:	08005860 	.word	0x08005860

08000688 <cr95_init18>:

static void cr95_init18(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af00      	add	r7, sp, #0
	const uint8_t cmd_init1_18[] = { 0x02, 0x02, 0x04, 0x51 };
 800068e:	201c      	movs	r0, #28
 8000690:	183b      	adds	r3, r7, r0
 8000692:	4a34      	ldr	r2, [pc, #208]	; (8000764 <cr95_init18+0xdc>)
 8000694:	6812      	ldr	r2, [r2, #0]
 8000696:	601a      	str	r2, [r3, #0]
	const uint8_t cmd_init2_18[] = { 0x09, 0x04, 0x3A, 0x00, 0x58, 0x04 };
 8000698:	2314      	movs	r3, #20
 800069a:	18fb      	adds	r3, r7, r3
 800069c:	4a32      	ldr	r2, [pc, #200]	; (8000768 <cr95_init18+0xe0>)
 800069e:	6811      	ldr	r1, [r2, #0]
 80006a0:	6019      	str	r1, [r3, #0]
 80006a2:	8892      	ldrh	r2, [r2, #4]
 80006a4:	809a      	strh	r2, [r3, #4]
	const uint8_t cmd_init3_18[] = { 0x09, 0x04, 0x68, 0x01, 0x01, 0x50 };
 80006a6:	230c      	movs	r3, #12
 80006a8:	18fb      	adds	r3, r7, r3
 80006aa:	4a30      	ldr	r2, [pc, #192]	; (800076c <cr95_init18+0xe4>)
 80006ac:	6811      	ldr	r1, [r2, #0]
 80006ae:	6019      	str	r1, [r3, #0]
 80006b0:	8892      	ldrh	r2, [r2, #4]
 80006b2:	809a      	strh	r2, [r3, #4]
	const uint8_t cmd_init4_18[] = { 0x09, 0x04, 0x0A, 0x01, 0x02, 0xA1 };
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	4a2e      	ldr	r2, [pc, #184]	; (8000770 <cr95_init18+0xe8>)
 80006b8:	6811      	ldr	r1, [r2, #0]
 80006ba:	6019      	str	r1, [r3, #0]
 80006bc:	8892      	ldrh	r2, [r2, #4]
 80006be:	809a      	strh	r2, [r3, #4]


	cr95write(cmd_init1_18, sizeof(cmd_init1_18));
 80006c0:	183b      	adds	r3, r7, r0
 80006c2:	2104      	movs	r1, #4
 80006c4:	0018      	movs	r0, r3
 80006c6:	f7ff fdcf 	bl	8000268 <cr95write>
	printf("Initiation of 18 %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 80006ca:	2100      	movs	r1, #0
 80006cc:	2000      	movs	r0, #0
 80006ce:	f7ff fde1 	bl	8000294 <cr95read>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	d101      	bne.n	80006da <cr95_init18+0x52>
 80006d6:	4b27      	ldr	r3, [pc, #156]	; (8000774 <cr95_init18+0xec>)
 80006d8:	e000      	b.n	80006dc <cr95_init18+0x54>
 80006da:	4b27      	ldr	r3, [pc, #156]	; (8000778 <cr95_init18+0xf0>)
 80006dc:	4a27      	ldr	r2, [pc, #156]	; (800077c <cr95_init18+0xf4>)
 80006de:	0019      	movs	r1, r3
 80006e0:	0010      	movs	r0, r2
 80006e2:	f003 fe5b 	bl	800439c <iprintf>
	cr95write(cmd_init2_18, sizeof(cmd_init2_18));
 80006e6:	2314      	movs	r3, #20
 80006e8:	18fb      	adds	r3, r7, r3
 80006ea:	2106      	movs	r1, #6
 80006ec:	0018      	movs	r0, r3
 80006ee:	f7ff fdbb 	bl	8000268 <cr95write>
	printf(" %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 80006f2:	2100      	movs	r1, #0
 80006f4:	2000      	movs	r0, #0
 80006f6:	f7ff fdcd 	bl	8000294 <cr95read>
 80006fa:	1e03      	subs	r3, r0, #0
 80006fc:	d101      	bne.n	8000702 <cr95_init18+0x7a>
 80006fe:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <cr95_init18+0xec>)
 8000700:	e000      	b.n	8000704 <cr95_init18+0x7c>
 8000702:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <cr95_init18+0xf0>)
 8000704:	4a1e      	ldr	r2, [pc, #120]	; (8000780 <cr95_init18+0xf8>)
 8000706:	0019      	movs	r1, r3
 8000708:	0010      	movs	r0, r2
 800070a:	f003 fe47 	bl	800439c <iprintf>
	cr95write(cmd_init3_18, sizeof(cmd_init3_18));
 800070e:	230c      	movs	r3, #12
 8000710:	18fb      	adds	r3, r7, r3
 8000712:	2106      	movs	r1, #6
 8000714:	0018      	movs	r0, r3
 8000716:	f7ff fda7 	bl	8000268 <cr95write>
	printf(" %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 800071a:	2100      	movs	r1, #0
 800071c:	2000      	movs	r0, #0
 800071e:	f7ff fdb9 	bl	8000294 <cr95read>
 8000722:	1e03      	subs	r3, r0, #0
 8000724:	d101      	bne.n	800072a <cr95_init18+0xa2>
 8000726:	4b13      	ldr	r3, [pc, #76]	; (8000774 <cr95_init18+0xec>)
 8000728:	e000      	b.n	800072c <cr95_init18+0xa4>
 800072a:	4b13      	ldr	r3, [pc, #76]	; (8000778 <cr95_init18+0xf0>)
 800072c:	4a14      	ldr	r2, [pc, #80]	; (8000780 <cr95_init18+0xf8>)
 800072e:	0019      	movs	r1, r3
 8000730:	0010      	movs	r0, r2
 8000732:	f003 fe33 	bl	800439c <iprintf>
	cr95write(cmd_init4_18, sizeof(cmd_init4_18));
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2106      	movs	r1, #6
 800073a:	0018      	movs	r0, r3
 800073c:	f7ff fd94 	bl	8000268 <cr95write>
	printf(" %s\n", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 8000740:	2100      	movs	r1, #0
 8000742:	2000      	movs	r0, #0
 8000744:	f7ff fda6 	bl	8000294 <cr95read>
 8000748:	1e03      	subs	r3, r0, #0
 800074a:	d101      	bne.n	8000750 <cr95_init18+0xc8>
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <cr95_init18+0xec>)
 800074e:	e000      	b.n	8000752 <cr95_init18+0xca>
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <cr95_init18+0xf0>)
 8000752:	4a0c      	ldr	r2, [pc, #48]	; (8000784 <cr95_init18+0xfc>)
 8000754:	0019      	movs	r1, r3
 8000756:	0010      	movs	r0, r2
 8000758:	f003 fe20 	bl	800439c <iprintf>
}
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	b008      	add	sp, #32
 8000762:	bd80      	pop	{r7, pc}
 8000764:	080058d4 	.word	0x080058d4
 8000768:	0800586c 	.word	0x0800586c
 800076c:	080058d8 	.word	0x080058d8
 8000770:	080058e0 	.word	0x080058e0
 8000774:	08005840 	.word	0x08005840
 8000778:	08005844 	.word	0x08005844
 800077c:	080058c0 	.word	0x080058c0
 8000780:	0800585c 	.word	0x0800585c
 8000784:	08005860 	.word	0x08005860

08000788 <cr95_read>:

static void cr95_read(void)
{
 8000788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800078a:	46d6      	mov	lr, sl
 800078c:	464f      	mov	r7, r9
 800078e:	4646      	mov	r6, r8
 8000790:	b5c0      	push	{r6, r7, lr}
 8000792:	b09e      	sub	sp, #120	; 0x78
 8000794:	af06      	add	r7, sp, #24
	const uint8_t cmd_reqa[] =  { 0x04, 0x02, 0x26, 0x07 };
 8000796:	204c      	movs	r0, #76	; 0x4c
 8000798:	2508      	movs	r5, #8
 800079a:	197b      	adds	r3, r7, r5
 800079c:	181b      	adds	r3, r3, r0
 800079e:	4acb      	ldr	r2, [pc, #812]	; (8000acc <cr95_read+0x344>)
 80007a0:	6812      	ldr	r2, [r2, #0]
 80007a2:	601a      	str	r2, [r3, #0]
	const uint8_t cmd_acl1[] =  { 0x04, 0x03, 0x93, 0x20, 0x08 };
 80007a4:	2344      	movs	r3, #68	; 0x44
 80007a6:	2208      	movs	r2, #8
 80007a8:	4694      	mov	ip, r2
 80007aa:	44bc      	add	ip, r7
 80007ac:	4463      	add	r3, ip
 80007ae:	4ac8      	ldr	r2, [pc, #800]	; (8000ad0 <cr95_read+0x348>)
 80007b0:	6811      	ldr	r1, [r2, #0]
 80007b2:	6019      	str	r1, [r3, #0]
 80007b4:	7912      	ldrb	r2, [r2, #4]
 80007b6:	711a      	strb	r2, [r3, #4]
	const uint8_t cmd_acl2[] =  { 0x04, 0x03, 0x95, 0x20, 0x08 };
 80007b8:	233c      	movs	r3, #60	; 0x3c
 80007ba:	2208      	movs	r2, #8
 80007bc:	4694      	mov	ip, r2
 80007be:	44bc      	add	ip, r7
 80007c0:	4463      	add	r3, ip
 80007c2:	4ac4      	ldr	r2, [pc, #784]	; (8000ad4 <cr95_read+0x34c>)
 80007c4:	6811      	ldr	r1, [r2, #0]
 80007c6:	6019      	str	r1, [r3, #0]
 80007c8:	7912      	ldrb	r2, [r2, #4]
 80007ca:	711a      	strb	r2, [r3, #4]

	uint8_t data[8];
	uint8_t saved_data[10] =  { 0x04, 0x08, 0x93, 0x70, 0x00, 0x00, 0x00, 0x00,  0x00, 0x28};
 80007cc:	2328      	movs	r3, #40	; 0x28
 80007ce:	2208      	movs	r2, #8
 80007d0:	4694      	mov	ip, r2
 80007d2:	44bc      	add	ip, r7
 80007d4:	4463      	add	r3, ip
 80007d6:	4ac0      	ldr	r2, [pc, #768]	; (8000ad8 <cr95_read+0x350>)
 80007d8:	ca12      	ldmia	r2!, {r1, r4}
 80007da:	c312      	stmia	r3!, {r1, r4}
 80007dc:	8812      	ldrh	r2, [r2, #0]
 80007de:	801a      	strh	r2, [r3, #0]
	char uid[32];
	uint8_t len;

	cr95write(cmd_reqa, sizeof(cmd_reqa));
 80007e0:	197b      	adds	r3, r7, r5
 80007e2:	181b      	adds	r3, r3, r0
 80007e4:	2104      	movs	r1, #4
 80007e6:	0018      	movs	r0, r3
 80007e8:	f7ff fd3e 	bl	8000268 <cr95write>
	if (cr95read(data, &len) == 0x80) {
 80007ec:	230f      	movs	r3, #15
 80007ee:	18fa      	adds	r2, r7, r3
 80007f0:	2334      	movs	r3, #52	; 0x34
 80007f2:	2108      	movs	r1, #8
 80007f4:	468c      	mov	ip, r1
 80007f6:	44bc      	add	ip, r7
 80007f8:	4463      	add	r3, ip
 80007fa:	0011      	movs	r1, r2
 80007fc:	0018      	movs	r0, r3
 80007fe:	f7ff fd49 	bl	8000294 <cr95read>
 8000802:	0003      	movs	r3, r0
 8000804:	2b80      	cmp	r3, #128	; 0x80
 8000806:	d000      	beq.n	800080a <cr95_read+0x82>
 8000808:	e2c5      	b.n	8000d96 <cr95_read+0x60e>
		printf("ATQA =");
 800080a:	4bb4      	ldr	r3, [pc, #720]	; (8000adc <cr95_read+0x354>)
 800080c:	0018      	movs	r0, r3
 800080e:	f003 fdc5 	bl	800439c <iprintf>
		for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8000812:	2357      	movs	r3, #87	; 0x57
 8000814:	2208      	movs	r2, #8
 8000816:	4694      	mov	ip, r2
 8000818:	44bc      	add	ip, r7
 800081a:	4463      	add	r3, ip
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]
 8000820:	e017      	b.n	8000852 <cr95_read+0xca>
 8000822:	2457      	movs	r4, #87	; 0x57
 8000824:	2508      	movs	r5, #8
 8000826:	197b      	adds	r3, r7, r5
 8000828:	191b      	adds	r3, r3, r4
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2234      	movs	r2, #52	; 0x34
 800082e:	2108      	movs	r1, #8
 8000830:	468c      	mov	ip, r1
 8000832:	44bc      	add	ip, r7
 8000834:	4462      	add	r2, ip
 8000836:	5cd3      	ldrb	r3, [r2, r3]
 8000838:	001a      	movs	r2, r3
 800083a:	4ba9      	ldr	r3, [pc, #676]	; (8000ae0 <cr95_read+0x358>)
 800083c:	0011      	movs	r1, r2
 800083e:	0018      	movs	r0, r3
 8000840:	f003 fdac 	bl	800439c <iprintf>
 8000844:	197b      	adds	r3, r7, r5
 8000846:	191b      	adds	r3, r3, r4
 8000848:	781a      	ldrb	r2, [r3, #0]
 800084a:	197b      	adds	r3, r7, r5
 800084c:	191b      	adds	r3, r3, r4
 800084e:	3201      	adds	r2, #1
 8000850:	701a      	strb	r2, [r3, #0]
 8000852:	230f      	movs	r3, #15
 8000854:	18fb      	adds	r3, r7, r3
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2257      	movs	r2, #87	; 0x57
 800085a:	2108      	movs	r1, #8
 800085c:	468c      	mov	ip, r1
 800085e:	44bc      	add	ip, r7
 8000860:	4462      	add	r2, ip
 8000862:	7812      	ldrb	r2, [r2, #0]
 8000864:	429a      	cmp	r2, r3
 8000866:	d3dc      	bcc.n	8000822 <cr95_read+0x9a>
		printf("\n");
 8000868:	200a      	movs	r0, #10
 800086a:	f003 fdb1 	bl	80043d0 <putchar>

    	sprintf(uid, "UID =");
 800086e:	2308      	movs	r3, #8
 8000870:	2208      	movs	r2, #8
 8000872:	4694      	mov	ip, r2
 8000874:	44bc      	add	ip, r7
 8000876:	4463      	add	r3, ip
 8000878:	4a9a      	ldr	r2, [pc, #616]	; (8000ae4 <cr95_read+0x35c>)
 800087a:	6811      	ldr	r1, [r2, #0]
 800087c:	6019      	str	r1, [r3, #0]
 800087e:	8892      	ldrh	r2, [r2, #4]
 8000880:	809a      	strh	r2, [r3, #4]

    	cr95write(cmd_acl1, sizeof(cmd_acl1));
 8000882:	2344      	movs	r3, #68	; 0x44
 8000884:	2208      	movs	r2, #8
 8000886:	4694      	mov	ip, r2
 8000888:	44bc      	add	ip, r7
 800088a:	4463      	add	r3, ip
 800088c:	2105      	movs	r1, #5
 800088e:	0018      	movs	r0, r3
 8000890:	f7ff fcea 	bl	8000268 <cr95write>
    	if (cr95read(data, &len) == 0x80 && len == 8 && (data[0]^data[1]^data[2]^data[3]) == data[4]) {
 8000894:	230f      	movs	r3, #15
 8000896:	18fa      	adds	r2, r7, r3
 8000898:	2334      	movs	r3, #52	; 0x34
 800089a:	2108      	movs	r1, #8
 800089c:	468c      	mov	ip, r1
 800089e:	44bc      	add	ip, r7
 80008a0:	4463      	add	r3, ip
 80008a2:	0011      	movs	r1, r2
 80008a4:	0018      	movs	r0, r3
 80008a6:	f7ff fcf5 	bl	8000294 <cr95read>
 80008aa:	0003      	movs	r3, r0
 80008ac:	2b80      	cmp	r3, #128	; 0x80
 80008ae:	d000      	beq.n	80008b2 <cr95_read+0x12a>
 80008b0:	e26c      	b.n	8000d8c <cr95_read+0x604>
 80008b2:	230f      	movs	r3, #15
 80008b4:	18fb      	adds	r3, r7, r3
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b08      	cmp	r3, #8
 80008ba:	d000      	beq.n	80008be <cr95_read+0x136>
 80008bc:	e266      	b.n	8000d8c <cr95_read+0x604>
 80008be:	2134      	movs	r1, #52	; 0x34
 80008c0:	2008      	movs	r0, #8
 80008c2:	183b      	adds	r3, r7, r0
 80008c4:	185b      	adds	r3, r3, r1
 80008c6:	781a      	ldrb	r2, [r3, #0]
 80008c8:	183b      	adds	r3, r7, r0
 80008ca:	185b      	adds	r3, r3, r1
 80008cc:	785b      	ldrb	r3, [r3, #1]
 80008ce:	4053      	eors	r3, r2
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	183b      	adds	r3, r7, r0
 80008d4:	185b      	adds	r3, r3, r1
 80008d6:	789b      	ldrb	r3, [r3, #2]
 80008d8:	4053      	eors	r3, r2
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	183b      	adds	r3, r7, r0
 80008de:	185b      	adds	r3, r3, r1
 80008e0:	78db      	ldrb	r3, [r3, #3]
 80008e2:	4053      	eors	r3, r2
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	183b      	adds	r3, r7, r0
 80008e8:	185b      	adds	r3, r3, r1
 80008ea:	791b      	ldrb	r3, [r3, #4]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d000      	beq.n	80008f2 <cr95_read+0x16a>
 80008f0:	e24c      	b.n	8000d8c <cr95_read+0x604>
    		printf("UID CL1 =");
 80008f2:	4b7d      	ldr	r3, [pc, #500]	; (8000ae8 <cr95_read+0x360>)
 80008f4:	0018      	movs	r0, r3
 80008f6:	f003 fd51 	bl	800439c <iprintf>
    		for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 80008fa:	2356      	movs	r3, #86	; 0x56
 80008fc:	2208      	movs	r2, #8
 80008fe:	4694      	mov	ip, r2
 8000900:	44bc      	add	ip, r7
 8000902:	4463      	add	r3, ip
 8000904:	2200      	movs	r2, #0
 8000906:	701a      	strb	r2, [r3, #0]
 8000908:	e017      	b.n	800093a <cr95_read+0x1b2>
 800090a:	2456      	movs	r4, #86	; 0x56
 800090c:	2508      	movs	r5, #8
 800090e:	197b      	adds	r3, r7, r5
 8000910:	191b      	adds	r3, r3, r4
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2234      	movs	r2, #52	; 0x34
 8000916:	2108      	movs	r1, #8
 8000918:	468c      	mov	ip, r1
 800091a:	44bc      	add	ip, r7
 800091c:	4462      	add	r2, ip
 800091e:	5cd3      	ldrb	r3, [r2, r3]
 8000920:	001a      	movs	r2, r3
 8000922:	4b6f      	ldr	r3, [pc, #444]	; (8000ae0 <cr95_read+0x358>)
 8000924:	0011      	movs	r1, r2
 8000926:	0018      	movs	r0, r3
 8000928:	f003 fd38 	bl	800439c <iprintf>
 800092c:	197b      	adds	r3, r7, r5
 800092e:	191b      	adds	r3, r3, r4
 8000930:	781a      	ldrb	r2, [r3, #0]
 8000932:	197b      	adds	r3, r7, r5
 8000934:	191b      	adds	r3, r3, r4
 8000936:	3201      	adds	r2, #1
 8000938:	701a      	strb	r2, [r3, #0]
 800093a:	230f      	movs	r3, #15
 800093c:	18fb      	adds	r3, r7, r3
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2256      	movs	r2, #86	; 0x56
 8000942:	2108      	movs	r1, #8
 8000944:	468c      	mov	ip, r1
 8000946:	44bc      	add	ip, r7
 8000948:	4462      	add	r2, ip
 800094a:	7812      	ldrb	r2, [r2, #0]
 800094c:	429a      	cmp	r2, r3
 800094e:	d3dc      	bcc.n	800090a <cr95_read+0x182>
    		printf("\n");
 8000950:	200a      	movs	r0, #10
 8000952:	f003 fd3d 	bl	80043d0 <putchar>
    		saved_data[4] = data[0];
 8000956:	2134      	movs	r1, #52	; 0x34
 8000958:	2408      	movs	r4, #8
 800095a:	193b      	adds	r3, r7, r4
 800095c:	185b      	adds	r3, r3, r1
 800095e:	781a      	ldrb	r2, [r3, #0]
 8000960:	2028      	movs	r0, #40	; 0x28
 8000962:	193b      	adds	r3, r7, r4
 8000964:	181b      	adds	r3, r3, r0
 8000966:	711a      	strb	r2, [r3, #4]
			saved_data[5] = data[1];
 8000968:	193b      	adds	r3, r7, r4
 800096a:	185b      	adds	r3, r3, r1
 800096c:	785a      	ldrb	r2, [r3, #1]
 800096e:	193b      	adds	r3, r7, r4
 8000970:	181b      	adds	r3, r3, r0
 8000972:	715a      	strb	r2, [r3, #5]
			saved_data[6] = data[2];
 8000974:	193b      	adds	r3, r7, r4
 8000976:	185b      	adds	r3, r3, r1
 8000978:	789a      	ldrb	r2, [r3, #2]
 800097a:	193b      	adds	r3, r7, r4
 800097c:	181b      	adds	r3, r3, r0
 800097e:	719a      	strb	r2, [r3, #6]
			saved_data[7] = data[3];
 8000980:	193b      	adds	r3, r7, r4
 8000982:	185b      	adds	r3, r3, r1
 8000984:	78da      	ldrb	r2, [r3, #3]
 8000986:	193b      	adds	r3, r7, r4
 8000988:	181b      	adds	r3, r3, r0
 800098a:	71da      	strb	r2, [r3, #7]
			saved_data[8] = data[4];
 800098c:	193b      	adds	r3, r7, r4
 800098e:	185b      	adds	r3, r3, r1
 8000990:	791a      	ldrb	r2, [r3, #4]
 8000992:	193b      	adds	r3, r7, r4
 8000994:	181b      	adds	r3, r3, r0
 8000996:	721a      	strb	r2, [r3, #8]

			if (data[0] == 0x88) {
 8000998:	193b      	adds	r3, r7, r4
 800099a:	185b      	adds	r3, r3, r1
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b88      	cmp	r3, #136	; 0x88
 80009a0:	d000      	beq.n	80009a4 <cr95_read+0x21c>
 80009a2:	e178      	b.n	8000c96 <cr95_read+0x50e>
				printf("Collision detected, longer UID!\n");
 80009a4:	4b51      	ldr	r3, [pc, #324]	; (8000aec <cr95_read+0x364>)
 80009a6:	0018      	movs	r0, r3
 80009a8:	f003 fd86 	bl	80044b8 <puts>
				cr95write(saved_data, sizeof(saved_data));
 80009ac:	2328      	movs	r3, #40	; 0x28
 80009ae:	2208      	movs	r2, #8
 80009b0:	4694      	mov	ip, r2
 80009b2:	44bc      	add	ip, r7
 80009b4:	4463      	add	r3, ip
 80009b6:	210a      	movs	r1, #10
 80009b8:	0018      	movs	r0, r3
 80009ba:	f7ff fc55 	bl	8000268 <cr95write>
				if (cr95read(data, &len) == 0x80) {
 80009be:	230f      	movs	r3, #15
 80009c0:	18fa      	adds	r2, r7, r3
 80009c2:	2334      	movs	r3, #52	; 0x34
 80009c4:	2108      	movs	r1, #8
 80009c6:	468c      	mov	ip, r1
 80009c8:	44bc      	add	ip, r7
 80009ca:	4463      	add	r3, ip
 80009cc:	0011      	movs	r1, r2
 80009ce:	0018      	movs	r0, r3
 80009d0:	f7ff fc60 	bl	8000294 <cr95read>
 80009d4:	0003      	movs	r3, r0
 80009d6:	2b80      	cmp	r3, #128	; 0x80
 80009d8:	d131      	bne.n	8000a3e <cr95_read+0x2b6>
					printf("SEL1 Response =");
 80009da:	4b45      	ldr	r3, [pc, #276]	; (8000af0 <cr95_read+0x368>)
 80009dc:	0018      	movs	r0, r3
 80009de:	f003 fcdd 	bl	800439c <iprintf>
					for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 80009e2:	2355      	movs	r3, #85	; 0x55
 80009e4:	2208      	movs	r2, #8
 80009e6:	4694      	mov	ip, r2
 80009e8:	44bc      	add	ip, r7
 80009ea:	4463      	add	r3, ip
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]
 80009f0:	e017      	b.n	8000a22 <cr95_read+0x29a>
 80009f2:	2455      	movs	r4, #85	; 0x55
 80009f4:	2508      	movs	r5, #8
 80009f6:	197b      	adds	r3, r7, r5
 80009f8:	191b      	adds	r3, r3, r4
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2234      	movs	r2, #52	; 0x34
 80009fe:	2108      	movs	r1, #8
 8000a00:	468c      	mov	ip, r1
 8000a02:	44bc      	add	ip, r7
 8000a04:	4462      	add	r2, ip
 8000a06:	5cd3      	ldrb	r3, [r2, r3]
 8000a08:	001a      	movs	r2, r3
 8000a0a:	4b35      	ldr	r3, [pc, #212]	; (8000ae0 <cr95_read+0x358>)
 8000a0c:	0011      	movs	r1, r2
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f003 fcc4 	bl	800439c <iprintf>
 8000a14:	197b      	adds	r3, r7, r5
 8000a16:	191b      	adds	r3, r3, r4
 8000a18:	781a      	ldrb	r2, [r3, #0]
 8000a1a:	197b      	adds	r3, r7, r5
 8000a1c:	191b      	adds	r3, r3, r4
 8000a1e:	3201      	adds	r2, #1
 8000a20:	701a      	strb	r2, [r3, #0]
 8000a22:	230f      	movs	r3, #15
 8000a24:	18fb      	adds	r3, r7, r3
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2255      	movs	r2, #85	; 0x55
 8000a2a:	2108      	movs	r1, #8
 8000a2c:	468c      	mov	ip, r1
 8000a2e:	44bc      	add	ip, r7
 8000a30:	4462      	add	r2, ip
 8000a32:	7812      	ldrb	r2, [r2, #0]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d3dc      	bcc.n	80009f2 <cr95_read+0x26a>
					printf("\n");
 8000a38:	200a      	movs	r0, #10
 8000a3a:	f003 fcc9 	bl	80043d0 <putchar>
				}

				if (data[0] != 0x00) {
 8000a3e:	2334      	movs	r3, #52	; 0x34
 8000a40:	2208      	movs	r2, #8
 8000a42:	4694      	mov	ip, r2
 8000a44:	44bc      	add	ip, r7
 8000a46:	4463      	add	r3, ip
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d100      	bne.n	8000a50 <cr95_read+0x2c8>
 8000a4e:	e11d      	b.n	8000c8c <cr95_read+0x504>
				   cr95write(cmd_acl2, sizeof(cmd_acl2));
 8000a50:	233c      	movs	r3, #60	; 0x3c
 8000a52:	2208      	movs	r2, #8
 8000a54:	4694      	mov	ip, r2
 8000a56:	44bc      	add	ip, r7
 8000a58:	4463      	add	r3, ip
 8000a5a:	2105      	movs	r1, #5
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f7ff fc03 	bl	8000268 <cr95write>
				   if (cr95read(data, &len) == 0x80 && (data[0]^data[1]^data[2]^data[3]) == data[4]) {
 8000a62:	230f      	movs	r3, #15
 8000a64:	18fa      	adds	r2, r7, r3
 8000a66:	2334      	movs	r3, #52	; 0x34
 8000a68:	2108      	movs	r1, #8
 8000a6a:	468c      	mov	ip, r1
 8000a6c:	44bc      	add	ip, r7
 8000a6e:	4463      	add	r3, ip
 8000a70:	0011      	movs	r1, r2
 8000a72:	0018      	movs	r0, r3
 8000a74:	f7ff fc0e 	bl	8000294 <cr95read>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	2b80      	cmp	r3, #128	; 0x80
 8000a7c:	d000      	beq.n	8000a80 <cr95_read+0x2f8>
 8000a7e:	e100      	b.n	8000c82 <cr95_read+0x4fa>
 8000a80:	2134      	movs	r1, #52	; 0x34
 8000a82:	2008      	movs	r0, #8
 8000a84:	183b      	adds	r3, r7, r0
 8000a86:	185b      	adds	r3, r3, r1
 8000a88:	781a      	ldrb	r2, [r3, #0]
 8000a8a:	183b      	adds	r3, r7, r0
 8000a8c:	185b      	adds	r3, r3, r1
 8000a8e:	785b      	ldrb	r3, [r3, #1]
 8000a90:	4053      	eors	r3, r2
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	183b      	adds	r3, r7, r0
 8000a96:	185b      	adds	r3, r3, r1
 8000a98:	789b      	ldrb	r3, [r3, #2]
 8000a9a:	4053      	eors	r3, r2
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	183b      	adds	r3, r7, r0
 8000aa0:	185b      	adds	r3, r3, r1
 8000aa2:	78db      	ldrb	r3, [r3, #3]
 8000aa4:	4053      	eors	r3, r2
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	183b      	adds	r3, r7, r0
 8000aaa:	185b      	adds	r3, r3, r1
 8000aac:	791b      	ldrb	r3, [r3, #4]
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d000      	beq.n	8000ab4 <cr95_read+0x32c>
 8000ab2:	e0e6      	b.n	8000c82 <cr95_read+0x4fa>
				    	printf("UID CL2 =");
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <cr95_read+0x36c>)
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f003 fc70 	bl	800439c <iprintf>
				    	for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8000abc:	2354      	movs	r3, #84	; 0x54
 8000abe:	2208      	movs	r2, #8
 8000ac0:	4694      	mov	ip, r2
 8000ac2:	44bc      	add	ip, r7
 8000ac4:	4463      	add	r3, ip
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
 8000aca:	e02d      	b.n	8000b28 <cr95_read+0x3a0>
 8000acc:	080059c8 	.word	0x080059c8
 8000ad0:	080059cc 	.word	0x080059cc
 8000ad4:	080059d4 	.word	0x080059d4
 8000ad8:	080059dc 	.word	0x080059dc
 8000adc:	080058e8 	.word	0x080058e8
 8000ae0:	080058f0 	.word	0x080058f0
 8000ae4:	080058f8 	.word	0x080058f8
 8000ae8:	08005900 	.word	0x08005900
 8000aec:	0800590c 	.word	0x0800590c
 8000af0:	0800592c 	.word	0x0800592c
 8000af4:	0800593c 	.word	0x0800593c
 8000af8:	2454      	movs	r4, #84	; 0x54
 8000afa:	2508      	movs	r5, #8
 8000afc:	197b      	adds	r3, r7, r5
 8000afe:	191b      	adds	r3, r3, r4
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2234      	movs	r2, #52	; 0x34
 8000b04:	2108      	movs	r1, #8
 8000b06:	468c      	mov	ip, r1
 8000b08:	44bc      	add	ip, r7
 8000b0a:	4462      	add	r2, ip
 8000b0c:	5cd3      	ldrb	r3, [r2, r3]
 8000b0e:	001a      	movs	r2, r3
 8000b10:	4ba7      	ldr	r3, [pc, #668]	; (8000db0 <cr95_read+0x628>)
 8000b12:	0011      	movs	r1, r2
 8000b14:	0018      	movs	r0, r3
 8000b16:	f003 fc41 	bl	800439c <iprintf>
 8000b1a:	197b      	adds	r3, r7, r5
 8000b1c:	191b      	adds	r3, r3, r4
 8000b1e:	781a      	ldrb	r2, [r3, #0]
 8000b20:	197b      	adds	r3, r7, r5
 8000b22:	191b      	adds	r3, r3, r4
 8000b24:	3201      	adds	r2, #1
 8000b26:	701a      	strb	r2, [r3, #0]
 8000b28:	230f      	movs	r3, #15
 8000b2a:	18fb      	adds	r3, r7, r3
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2254      	movs	r2, #84	; 0x54
 8000b30:	2108      	movs	r1, #8
 8000b32:	468c      	mov	ip, r1
 8000b34:	44bc      	add	ip, r7
 8000b36:	4462      	add	r2, ip
 8000b38:	7812      	ldrb	r2, [r2, #0]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d3dc      	bcc.n	8000af8 <cr95_read+0x370>
				    	printf("\n");
 8000b3e:	200a      	movs	r0, #10
 8000b40:	f003 fc46 	bl	80043d0 <putchar>
				    	sprintf(uid, "%s %2X %2X %2X %2X %2X %2X %2X\n", uid, saved_data[5], saved_data[6], saved_data[7], data[0], data[1], data[2], data[3]);
 8000b44:	2128      	movs	r1, #40	; 0x28
 8000b46:	2208      	movs	r2, #8
 8000b48:	18bb      	adds	r3, r7, r2
 8000b4a:	185b      	adds	r3, r3, r1
 8000b4c:	795b      	ldrb	r3, [r3, #5]
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	18bb      	adds	r3, r7, r2
 8000b52:	185b      	adds	r3, r3, r1
 8000b54:	799b      	ldrb	r3, [r3, #6]
 8000b56:	001c      	movs	r4, r3
 8000b58:	0010      	movs	r0, r2
 8000b5a:	18bb      	adds	r3, r7, r2
 8000b5c:	185b      	adds	r3, r3, r1
 8000b5e:	79db      	ldrb	r3, [r3, #7]
 8000b60:	001d      	movs	r5, r3
 8000b62:	2234      	movs	r2, #52	; 0x34
 8000b64:	0001      	movs	r1, r0
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	189b      	adds	r3, r3, r2
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	001e      	movs	r6, r3
 8000b6e:	187b      	adds	r3, r7, r1
 8000b70:	189b      	adds	r3, r3, r2
 8000b72:	785b      	ldrb	r3, [r3, #1]
 8000b74:	469c      	mov	ip, r3
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	189b      	adds	r3, r3, r2
 8000b7a:	789b      	ldrb	r3, [r3, #2]
 8000b7c:	4698      	mov	r8, r3
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	189b      	adds	r3, r3, r2
 8000b82:	78db      	ldrb	r3, [r3, #3]
 8000b84:	469a      	mov	sl, r3
 8000b86:	2008      	movs	r0, #8
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	181a      	adds	r2, r3, r0
 8000b8c:	4989      	ldr	r1, [pc, #548]	; (8000db4 <cr95_read+0x62c>)
 8000b8e:	2308      	movs	r3, #8
 8000b90:	4699      	mov	r9, r3
 8000b92:	44b9      	add	r9, r7
 8000b94:	4448      	add	r0, r9
 8000b96:	4653      	mov	r3, sl
 8000b98:	9305      	str	r3, [sp, #20]
 8000b9a:	4643      	mov	r3, r8
 8000b9c:	9304      	str	r3, [sp, #16]
 8000b9e:	4663      	mov	r3, ip
 8000ba0:	9303      	str	r3, [sp, #12]
 8000ba2:	9602      	str	r6, [sp, #8]
 8000ba4:	9501      	str	r5, [sp, #4]
 8000ba6:	9400      	str	r4, [sp, #0]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f003 fc8f 	bl	80044cc <siprintf>
				    	saved_data[2] = 0x95;
 8000bae:	2128      	movs	r1, #40	; 0x28
 8000bb0:	2508      	movs	r5, #8
 8000bb2:	197b      	adds	r3, r7, r5
 8000bb4:	185b      	adds	r3, r3, r1
 8000bb6:	2295      	movs	r2, #149	; 0x95
 8000bb8:	709a      	strb	r2, [r3, #2]
				    	saved_data[4] = data[0];
 8000bba:	2434      	movs	r4, #52	; 0x34
 8000bbc:	197b      	adds	r3, r7, r5
 8000bbe:	191b      	adds	r3, r3, r4
 8000bc0:	781a      	ldrb	r2, [r3, #0]
 8000bc2:	197b      	adds	r3, r7, r5
 8000bc4:	185b      	adds	r3, r3, r1
 8000bc6:	711a      	strb	r2, [r3, #4]
				    	saved_data[5] = data[1];
 8000bc8:	197b      	adds	r3, r7, r5
 8000bca:	191b      	adds	r3, r3, r4
 8000bcc:	785a      	ldrb	r2, [r3, #1]
 8000bce:	197b      	adds	r3, r7, r5
 8000bd0:	185b      	adds	r3, r3, r1
 8000bd2:	715a      	strb	r2, [r3, #5]
				    	saved_data[6] = data[2];
 8000bd4:	197b      	adds	r3, r7, r5
 8000bd6:	191b      	adds	r3, r3, r4
 8000bd8:	789a      	ldrb	r2, [r3, #2]
 8000bda:	197b      	adds	r3, r7, r5
 8000bdc:	185b      	adds	r3, r3, r1
 8000bde:	719a      	strb	r2, [r3, #6]
				    	saved_data[7] = data[3];
 8000be0:	197b      	adds	r3, r7, r5
 8000be2:	191b      	adds	r3, r3, r4
 8000be4:	78da      	ldrb	r2, [r3, #3]
 8000be6:	197b      	adds	r3, r7, r5
 8000be8:	185b      	adds	r3, r3, r1
 8000bea:	71da      	strb	r2, [r3, #7]
				    	saved_data[8] = data[4];
 8000bec:	197b      	adds	r3, r7, r5
 8000bee:	191b      	adds	r3, r3, r4
 8000bf0:	791a      	ldrb	r2, [r3, #4]
 8000bf2:	197b      	adds	r3, r7, r5
 8000bf4:	185b      	adds	r3, r3, r1
 8000bf6:	721a      	strb	r2, [r3, #8]

				    	cr95write(saved_data, sizeof(saved_data));
 8000bf8:	197b      	adds	r3, r7, r5
 8000bfa:	185b      	adds	r3, r3, r1
 8000bfc:	210a      	movs	r1, #10
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f7ff fb32 	bl	8000268 <cr95write>
				    	if (cr95read(data, &len) == 0x80) {
 8000c04:	230f      	movs	r3, #15
 8000c06:	18fa      	adds	r2, r7, r3
 8000c08:	197b      	adds	r3, r7, r5
 8000c0a:	191b      	adds	r3, r3, r4
 8000c0c:	0011      	movs	r1, r2
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f7ff fb40 	bl	8000294 <cr95read>
 8000c14:	0003      	movs	r3, r0
 8000c16:	2b80      	cmp	r3, #128	; 0x80
 8000c18:	d000      	beq.n	8000c1c <cr95_read+0x494>
 8000c1a:	e0a6      	b.n	8000d6a <cr95_read+0x5e2>
				    		printf("SEL2 Response =");
 8000c1c:	4b66      	ldr	r3, [pc, #408]	; (8000db8 <cr95_read+0x630>)
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f003 fbbc 	bl	800439c <iprintf>
				    		for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8000c24:	2353      	movs	r3, #83	; 0x53
 8000c26:	2208      	movs	r2, #8
 8000c28:	4694      	mov	ip, r2
 8000c2a:	44bc      	add	ip, r7
 8000c2c:	4463      	add	r3, ip
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
 8000c32:	e017      	b.n	8000c64 <cr95_read+0x4dc>
 8000c34:	2453      	movs	r4, #83	; 0x53
 8000c36:	2508      	movs	r5, #8
 8000c38:	197b      	adds	r3, r7, r5
 8000c3a:	191b      	adds	r3, r3, r4
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2234      	movs	r2, #52	; 0x34
 8000c40:	2108      	movs	r1, #8
 8000c42:	468c      	mov	ip, r1
 8000c44:	44bc      	add	ip, r7
 8000c46:	4462      	add	r2, ip
 8000c48:	5cd3      	ldrb	r3, [r2, r3]
 8000c4a:	001a      	movs	r2, r3
 8000c4c:	4b58      	ldr	r3, [pc, #352]	; (8000db0 <cr95_read+0x628>)
 8000c4e:	0011      	movs	r1, r2
 8000c50:	0018      	movs	r0, r3
 8000c52:	f003 fba3 	bl	800439c <iprintf>
 8000c56:	197b      	adds	r3, r7, r5
 8000c58:	191b      	adds	r3, r3, r4
 8000c5a:	781a      	ldrb	r2, [r3, #0]
 8000c5c:	197b      	adds	r3, r7, r5
 8000c5e:	191b      	adds	r3, r3, r4
 8000c60:	3201      	adds	r2, #1
 8000c62:	701a      	strb	r2, [r3, #0]
 8000c64:	230f      	movs	r3, #15
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2253      	movs	r2, #83	; 0x53
 8000c6c:	2108      	movs	r1, #8
 8000c6e:	468c      	mov	ip, r1
 8000c70:	44bc      	add	ip, r7
 8000c72:	4462      	add	r2, ip
 8000c74:	7812      	ldrb	r2, [r2, #0]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d3dc      	bcc.n	8000c34 <cr95_read+0x4ac>
				    		printf("\n");
 8000c7a:	200a      	movs	r0, #10
 8000c7c:	f003 fba8 	bl	80043d0 <putchar>
				    	if (cr95read(data, &len) == 0x80) {
 8000c80:	e073      	b.n	8000d6a <cr95_read+0x5e2>
				    	}
				    } else {
				    	printf("UID CL2 error\n");
 8000c82:	4b4e      	ldr	r3, [pc, #312]	; (8000dbc <cr95_read+0x634>)
 8000c84:	0018      	movs	r0, r3
 8000c86:	f003 fc17 	bl	80044b8 <puts>
 8000c8a:	e06e      	b.n	8000d6a <cr95_read+0x5e2>
				    }
				} else {
					printf("SEL CL1 error\n");
 8000c8c:	4b4c      	ldr	r3, [pc, #304]	; (8000dc0 <cr95_read+0x638>)
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f003 fc12 	bl	80044b8 <puts>
 8000c94:	e069      	b.n	8000d6a <cr95_read+0x5e2>
				}
    		} else {
    			cr95write(saved_data, sizeof(saved_data));
 8000c96:	2328      	movs	r3, #40	; 0x28
 8000c98:	2208      	movs	r2, #8
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	44bc      	add	ip, r7
 8000c9e:	4463      	add	r3, ip
 8000ca0:	210a      	movs	r1, #10
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f7ff fae0 	bl	8000268 <cr95write>
    			if (cr95read(data, &len) == 0x80) {
 8000ca8:	230f      	movs	r3, #15
 8000caa:	18fa      	adds	r2, r7, r3
 8000cac:	2334      	movs	r3, #52	; 0x34
 8000cae:	2108      	movs	r1, #8
 8000cb0:	468c      	mov	ip, r1
 8000cb2:	44bc      	add	ip, r7
 8000cb4:	4463      	add	r3, ip
 8000cb6:	0011      	movs	r1, r2
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f7ff faeb 	bl	8000294 <cr95read>
 8000cbe:	0003      	movs	r3, r0
 8000cc0:	2b80      	cmp	r3, #128	; 0x80
 8000cc2:	d131      	bne.n	8000d28 <cr95_read+0x5a0>
    				printf("SEL1 Response =");
 8000cc4:	4b3f      	ldr	r3, [pc, #252]	; (8000dc4 <cr95_read+0x63c>)
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f003 fb68 	bl	800439c <iprintf>
    				for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8000ccc:	2352      	movs	r3, #82	; 0x52
 8000cce:	2208      	movs	r2, #8
 8000cd0:	4694      	mov	ip, r2
 8000cd2:	44bc      	add	ip, r7
 8000cd4:	4463      	add	r3, ip
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
 8000cda:	e017      	b.n	8000d0c <cr95_read+0x584>
 8000cdc:	2452      	movs	r4, #82	; 0x52
 8000cde:	2508      	movs	r5, #8
 8000ce0:	197b      	adds	r3, r7, r5
 8000ce2:	191b      	adds	r3, r3, r4
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2234      	movs	r2, #52	; 0x34
 8000ce8:	2108      	movs	r1, #8
 8000cea:	468c      	mov	ip, r1
 8000cec:	44bc      	add	ip, r7
 8000cee:	4462      	add	r2, ip
 8000cf0:	5cd3      	ldrb	r3, [r2, r3]
 8000cf2:	001a      	movs	r2, r3
 8000cf4:	4b2e      	ldr	r3, [pc, #184]	; (8000db0 <cr95_read+0x628>)
 8000cf6:	0011      	movs	r1, r2
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f003 fb4f 	bl	800439c <iprintf>
 8000cfe:	197b      	adds	r3, r7, r5
 8000d00:	191b      	adds	r3, r3, r4
 8000d02:	781a      	ldrb	r2, [r3, #0]
 8000d04:	197b      	adds	r3, r7, r5
 8000d06:	191b      	adds	r3, r3, r4
 8000d08:	3201      	adds	r2, #1
 8000d0a:	701a      	strb	r2, [r3, #0]
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	18fb      	adds	r3, r7, r3
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2252      	movs	r2, #82	; 0x52
 8000d14:	2108      	movs	r1, #8
 8000d16:	468c      	mov	ip, r1
 8000d18:	44bc      	add	ip, r7
 8000d1a:	4462      	add	r2, ip
 8000d1c:	7812      	ldrb	r2, [r2, #0]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d3dc      	bcc.n	8000cdc <cr95_read+0x554>
    				printf("\n");
 8000d22:	200a      	movs	r0, #10
 8000d24:	f003 fb54 	bl	80043d0 <putchar>
    			}
    			sprintf(uid, "%s %2X %2X %2X %2X\n", uid, saved_data[4], saved_data[5], saved_data[6], saved_data[7]);
 8000d28:	2228      	movs	r2, #40	; 0x28
 8000d2a:	2108      	movs	r1, #8
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	189b      	adds	r3, r3, r2
 8000d30:	791b      	ldrb	r3, [r3, #4]
 8000d32:	001e      	movs	r6, r3
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	189b      	adds	r3, r3, r2
 8000d38:	795b      	ldrb	r3, [r3, #5]
 8000d3a:	001c      	movs	r4, r3
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	189b      	adds	r3, r3, r2
 8000d40:	799b      	ldrb	r3, [r3, #6]
 8000d42:	001d      	movs	r5, r3
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	189b      	adds	r3, r3, r2
 8000d48:	79db      	ldrb	r3, [r3, #7]
 8000d4a:	4698      	mov	r8, r3
 8000d4c:	2008      	movs	r0, #8
 8000d4e:	187b      	adds	r3, r7, r1
 8000d50:	181a      	adds	r2, r3, r0
 8000d52:	491d      	ldr	r1, [pc, #116]	; (8000dc8 <cr95_read+0x640>)
 8000d54:	2308      	movs	r3, #8
 8000d56:	469c      	mov	ip, r3
 8000d58:	44bc      	add	ip, r7
 8000d5a:	4460      	add	r0, ip
 8000d5c:	4643      	mov	r3, r8
 8000d5e:	9302      	str	r3, [sp, #8]
 8000d60:	9501      	str	r5, [sp, #4]
 8000d62:	9400      	str	r4, [sp, #0]
 8000d64:	0033      	movs	r3, r6
 8000d66:	f003 fbb1 	bl	80044cc <siprintf>
    		}


    		HAL_UART_Transmit(&huart2, (uint8_t*)(uid), strlen(uid), HAL_MAX_DELAY);
 8000d6a:	2408      	movs	r4, #8
 8000d6c:	2508      	movs	r5, #8
 8000d6e:	197b      	adds	r3, r7, r5
 8000d70:	191b      	adds	r3, r3, r4
 8000d72:	0018      	movs	r0, r3
 8000d74:	f7ff f9c8 	bl	8000108 <strlen>
 8000d78:	0003      	movs	r3, r0
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	425b      	negs	r3, r3
 8000d80:	1979      	adds	r1, r7, r5
 8000d82:	1909      	adds	r1, r1, r4
 8000d84:	4811      	ldr	r0, [pc, #68]	; (8000dcc <cr95_read+0x644>)
 8000d86:	f002 fd71 	bl	800386c <HAL_UART_Transmit>
    		printf("UID CL1 error\n");
    	}
	} else {
		printf("REQA error\n");
	}
}
 8000d8a:	e008      	b.n	8000d9e <cr95_read+0x616>
    		printf("UID CL1 error\n");
 8000d8c:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <cr95_read+0x648>)
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f003 fb92 	bl	80044b8 <puts>
}
 8000d94:	e003      	b.n	8000d9e <cr95_read+0x616>
		printf("REQA error\n");
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <cr95_read+0x64c>)
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f003 fb8d 	bl	80044b8 <puts>
}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b018      	add	sp, #96	; 0x60
 8000da4:	bc1c      	pop	{r2, r3, r4}
 8000da6:	4690      	mov	r8, r2
 8000da8:	4699      	mov	r9, r3
 8000daa:	46a2      	mov	sl, r4
 8000dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	080058f0 	.word	0x080058f0
 8000db4:	08005948 	.word	0x08005948
 8000db8:	08005968 	.word	0x08005968
 8000dbc:	08005978 	.word	0x08005978
 8000dc0:	08005988 	.word	0x08005988
 8000dc4:	0800592c 	.word	0x0800592c
 8000dc8:	08005998 	.word	0x08005998
 8000dcc:	200003dc 	.word	0x200003dc
 8000dd0:	080059ac 	.word	0x080059ac
 8000dd4:	080059bc 	.word	0x080059bc

08000dd8 <cr95_readtopaz>:

static void cr95_readtopaz(void)
{
 8000dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dda:	b097      	sub	sp, #92	; 0x5c
 8000ddc:	af04      	add	r7, sp, #16
	const uint8_t cmd_reqtopaz[] =  { 0x04, 0x02, 0x26, 0x07 };
 8000dde:	2140      	movs	r1, #64	; 0x40
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	4a52      	ldr	r2, [pc, #328]	; (8000f2c <cr95_readtopaz+0x154>)
 8000de4:	6812      	ldr	r2, [r2, #0]
 8000de6:	601a      	str	r2, [r3, #0]
	const uint8_t cmd_rid[]      =  { 0x04, 0x08, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA8 };
 8000de8:	2334      	movs	r3, #52	; 0x34
 8000dea:	18fb      	adds	r3, r7, r3
 8000dec:	4a50      	ldr	r2, [pc, #320]	; (8000f30 <cr95_readtopaz+0x158>)
 8000dee:	ca11      	ldmia	r2!, {r0, r4}
 8000df0:	c311      	stmia	r3!, {r0, r4}
 8000df2:	8812      	ldrh	r2, [r2, #0]
 8000df4:	801a      	strh	r2, [r3, #0]

	uint8_t data[16];
	char uid[32];
	uint8_t len;

	cr95write(cmd_reqtopaz, sizeof(cmd_reqtopaz));
 8000df6:	187b      	adds	r3, r7, r1
 8000df8:	2104      	movs	r1, #4
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f7ff fa34 	bl	8000268 <cr95write>
	if (cr95read(data, &len) == 0x80) {
 8000e00:	1cfa      	adds	r2, r7, #3
 8000e02:	2324      	movs	r3, #36	; 0x24
 8000e04:	18fb      	adds	r3, r7, r3
 8000e06:	0011      	movs	r1, r2
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f7ff fa43 	bl	8000294 <cr95read>
 8000e0e:	0003      	movs	r3, r0
 8000e10:	2b80      	cmp	r3, #128	; 0x80
 8000e12:	d000      	beq.n	8000e16 <cr95_readtopaz+0x3e>
 8000e14:	e085      	b.n	8000f22 <cr95_readtopaz+0x14a>
		printf("ATQA =");
 8000e16:	4b47      	ldr	r3, [pc, #284]	; (8000f34 <cr95_readtopaz+0x15c>)
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f003 fabf 	bl	800439c <iprintf>
		for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8000e1e:	2347      	movs	r3, #71	; 0x47
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	2200      	movs	r2, #0
 8000e24:	701a      	strb	r2, [r3, #0]
 8000e26:	e010      	b.n	8000e4a <cr95_readtopaz+0x72>
 8000e28:	2447      	movs	r4, #71	; 0x47
 8000e2a:	193b      	adds	r3, r7, r4
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2224      	movs	r2, #36	; 0x24
 8000e30:	18ba      	adds	r2, r7, r2
 8000e32:	5cd3      	ldrb	r3, [r2, r3]
 8000e34:	001a      	movs	r2, r3
 8000e36:	4b40      	ldr	r3, [pc, #256]	; (8000f38 <cr95_readtopaz+0x160>)
 8000e38:	0011      	movs	r1, r2
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f003 faae 	bl	800439c <iprintf>
 8000e40:	193b      	adds	r3, r7, r4
 8000e42:	781a      	ldrb	r2, [r3, #0]
 8000e44:	193b      	adds	r3, r7, r4
 8000e46:	3201      	adds	r2, #1
 8000e48:	701a      	strb	r2, [r3, #0]
 8000e4a:	1cfb      	adds	r3, r7, #3
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2247      	movs	r2, #71	; 0x47
 8000e50:	18ba      	adds	r2, r7, r2
 8000e52:	7812      	ldrb	r2, [r2, #0]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d3e7      	bcc.n	8000e28 <cr95_readtopaz+0x50>
		printf("\n");
 8000e58:	200a      	movs	r0, #10
 8000e5a:	f003 fab9 	bl	80043d0 <putchar>

		sprintf(uid, "UID =");
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	4a36      	ldr	r2, [pc, #216]	; (8000f3c <cr95_readtopaz+0x164>)
 8000e62:	6811      	ldr	r1, [r2, #0]
 8000e64:	6019      	str	r1, [r3, #0]
 8000e66:	8892      	ldrh	r2, [r2, #4]
 8000e68:	809a      	strh	r2, [r3, #4]

		cr95write(cmd_rid, sizeof(cmd_rid));
 8000e6a:	2334      	movs	r3, #52	; 0x34
 8000e6c:	18fb      	adds	r3, r7, r3
 8000e6e:	210a      	movs	r1, #10
 8000e70:	0018      	movs	r0, r3
 8000e72:	f7ff f9f9 	bl	8000268 <cr95write>
		if (cr95read(data, &len) == 0x80 ) {
 8000e76:	1cfa      	adds	r2, r7, #3
 8000e78:	2324      	movs	r3, #36	; 0x24
 8000e7a:	18fb      	adds	r3, r7, r3
 8000e7c:	0011      	movs	r1, r2
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f7ff fa08 	bl	8000294 <cr95read>
 8000e84:	0003      	movs	r3, r0
 8000e86:	2b80      	cmp	r3, #128	; 0x80
 8000e88:	d14b      	bne.n	8000f22 <cr95_readtopaz+0x14a>
			printf("RID =");
 8000e8a:	4b2d      	ldr	r3, [pc, #180]	; (8000f40 <cr95_readtopaz+0x168>)
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f003 fa85 	bl	800439c <iprintf>
			for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8000e92:	2346      	movs	r3, #70	; 0x46
 8000e94:	18fb      	adds	r3, r7, r3
 8000e96:	2200      	movs	r2, #0
 8000e98:	701a      	strb	r2, [r3, #0]
 8000e9a:	e010      	b.n	8000ebe <cr95_readtopaz+0xe6>
 8000e9c:	2446      	movs	r4, #70	; 0x46
 8000e9e:	193b      	adds	r3, r7, r4
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2224      	movs	r2, #36	; 0x24
 8000ea4:	18ba      	adds	r2, r7, r2
 8000ea6:	5cd3      	ldrb	r3, [r2, r3]
 8000ea8:	001a      	movs	r2, r3
 8000eaa:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <cr95_readtopaz+0x160>)
 8000eac:	0011      	movs	r1, r2
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f003 fa74 	bl	800439c <iprintf>
 8000eb4:	193b      	adds	r3, r7, r4
 8000eb6:	781a      	ldrb	r2, [r3, #0]
 8000eb8:	193b      	adds	r3, r7, r4
 8000eba:	3201      	adds	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
 8000ebe:	1cfb      	adds	r3, r7, #3
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2246      	movs	r2, #70	; 0x46
 8000ec4:	18ba      	adds	r2, r7, r2
 8000ec6:	7812      	ldrb	r2, [r2, #0]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d3e7      	bcc.n	8000e9c <cr95_readtopaz+0xc4>
			printf("\n");
 8000ecc:	200a      	movs	r0, #10
 8000ece:	f003 fa7f 	bl	80043d0 <putchar>
			printf("Header 1 = %2X", data[0]);
 8000ed2:	2424      	movs	r4, #36	; 0x24
 8000ed4:	193b      	adds	r3, r7, r4
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	001a      	movs	r2, r3
 8000eda:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <cr95_readtopaz+0x16c>)
 8000edc:	0011      	movs	r1, r2
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f003 fa5c 	bl	800439c <iprintf>
			printf("Header 2 = %2X", data[1]);
 8000ee4:	0022      	movs	r2, r4
 8000ee6:	0014      	movs	r4, r2
 8000ee8:	18bb      	adds	r3, r7, r2
 8000eea:	785b      	ldrb	r3, [r3, #1]
 8000eec:	001a      	movs	r2, r3
 8000eee:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <cr95_readtopaz+0x170>)
 8000ef0:	0011      	movs	r1, r2
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f003 fa52 	bl	800439c <iprintf>
			sprintf(uid, "%s %2X %2X %2X %2X", uid, data[2], data[3], data[4], data[5]);
 8000ef8:	0022      	movs	r2, r4
 8000efa:	18bb      	adds	r3, r7, r2
 8000efc:	789b      	ldrb	r3, [r3, #2]
 8000efe:	001e      	movs	r6, r3
 8000f00:	18bb      	adds	r3, r7, r2
 8000f02:	78db      	ldrb	r3, [r3, #3]
 8000f04:	001c      	movs	r4, r3
 8000f06:	18bb      	adds	r3, r7, r2
 8000f08:	791b      	ldrb	r3, [r3, #4]
 8000f0a:	001d      	movs	r5, r3
 8000f0c:	18bb      	adds	r3, r7, r2
 8000f0e:	795b      	ldrb	r3, [r3, #5]
 8000f10:	1d3a      	adds	r2, r7, #4
 8000f12:	490e      	ldr	r1, [pc, #56]	; (8000f4c <cr95_readtopaz+0x174>)
 8000f14:	1d38      	adds	r0, r7, #4
 8000f16:	9302      	str	r3, [sp, #8]
 8000f18:	9501      	str	r5, [sp, #4]
 8000f1a:	9400      	str	r4, [sp, #0]
 8000f1c:	0033      	movs	r3, r6
 8000f1e:	f003 fad5 	bl	80044cc <siprintf>
		}
	}
}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b013      	add	sp, #76	; 0x4c
 8000f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	080059c8 	.word	0x080059c8
 8000f30:	08005a24 	.word	0x08005a24
 8000f34:	080058e8 	.word	0x080058e8
 8000f38:	080058f0 	.word	0x080058f0
 8000f3c:	080058f8 	.word	0x080058f8
 8000f40:	080059e8 	.word	0x080059e8
 8000f44:	080059f0 	.word	0x080059f0
 8000f48:	08005a00 	.word	0x08005a00
 8000f4c:	08005a10 	.word	0x08005a10

08000f50 <cr95_read14B>:

static void cr95_read14B(void)
{
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b089      	sub	sp, #36	; 0x24
 8000f54:	af00      	add	r7, sp, #0
	const uint8_t cmd_reqb[] =  { 0x04, 0x03, 0x05, 0x00, 0x00 };
 8000f56:	2018      	movs	r0, #24
 8000f58:	183b      	adds	r3, r7, r0
 8000f5a:	4a23      	ldr	r2, [pc, #140]	; (8000fe8 <cr95_read14B+0x98>)
 8000f5c:	6811      	ldr	r1, [r2, #0]
 8000f5e:	6019      	str	r1, [r3, #0]
 8000f60:	7912      	ldrb	r2, [r2, #4]
 8000f62:	711a      	strb	r2, [r3, #4]

	uint8_t data[16];
	uint8_t len;

	cr95write(cmd_reqb, sizeof(cmd_reqb));
 8000f64:	183b      	adds	r3, r7, r0
 8000f66:	2105      	movs	r1, #5
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f7ff f97d 	bl	8000268 <cr95write>
	if (cr95read(data, &len) == 0x80 && data[0] == 0x50) {
 8000f6e:	1dfa      	adds	r2, r7, #7
 8000f70:	2308      	movs	r3, #8
 8000f72:	18fb      	adds	r3, r7, r3
 8000f74:	0011      	movs	r1, r2
 8000f76:	0018      	movs	r0, r3
 8000f78:	f7ff f98c 	bl	8000294 <cr95read>
 8000f7c:	0003      	movs	r3, r0
 8000f7e:	2b80      	cmp	r3, #128	; 0x80
 8000f80:	d129      	bne.n	8000fd6 <cr95_read14B+0x86>
 8000f82:	2308      	movs	r3, #8
 8000f84:	18fb      	adds	r3, r7, r3
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b50      	cmp	r3, #80	; 0x50
 8000f8a:	d124      	bne.n	8000fd6 <cr95_read14B+0x86>
		printf("ATQB =");
 8000f8c:	4b17      	ldr	r3, [pc, #92]	; (8000fec <cr95_read14B+0x9c>)
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f003 fa04 	bl	800439c <iprintf>
		for (uint8_t i = 0; i <= len; i++) printf(" %02X", data[i]);
 8000f94:	231f      	movs	r3, #31
 8000f96:	18fb      	adds	r3, r7, r3
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
 8000f9c:	e010      	b.n	8000fc0 <cr95_read14B+0x70>
 8000f9e:	241f      	movs	r4, #31
 8000fa0:	193b      	adds	r3, r7, r4
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2208      	movs	r2, #8
 8000fa6:	18ba      	adds	r2, r7, r2
 8000fa8:	5cd3      	ldrb	r3, [r2, r3]
 8000faa:	001a      	movs	r2, r3
 8000fac:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <cr95_read14B+0xa0>)
 8000fae:	0011      	movs	r1, r2
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f003 f9f3 	bl	800439c <iprintf>
 8000fb6:	193b      	adds	r3, r7, r4
 8000fb8:	781a      	ldrb	r2, [r3, #0]
 8000fba:	193b      	adds	r3, r7, r4
 8000fbc:	3201      	adds	r2, #1
 8000fbe:	701a      	strb	r2, [r3, #0]
 8000fc0:	1dfb      	adds	r3, r7, #7
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	221f      	movs	r2, #31
 8000fc6:	18ba      	adds	r2, r7, r2
 8000fc8:	7812      	ldrb	r2, [r2, #0]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d9e7      	bls.n	8000f9e <cr95_read14B+0x4e>
		printf("\n");
 8000fce:	200a      	movs	r0, #10
 8000fd0:	f003 f9fe 	bl	80043d0 <putchar>
 8000fd4:	e003      	b.n	8000fde <cr95_read14B+0x8e>
	} else {
		printf("REQB error\n");
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <cr95_read14B+0xa4>)
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f003 fa6d 	bl	80044b8 <puts>
	}
}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b009      	add	sp, #36	; 0x24
 8000fe4:	bd90      	pop	{r4, r7, pc}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	08005a44 	.word	0x08005a44
 8000fec:	08005a30 	.word	0x08005a30
 8000ff0:	080058f0 	.word	0x080058f0
 8000ff4:	08005a38 	.word	0x08005a38

08000ff8 <cr95_read18>:

static void cr95_read18(void)
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
	const uint8_t cmd_reqc[] =  { 0x04, 0x05, 0x00, 0xFF, 0xFF, 0x00, 0x00 };
 8000ffe:	2018      	movs	r0, #24
 8001000:	183b      	adds	r3, r7, r0
 8001002:	4a21      	ldr	r2, [pc, #132]	; (8001088 <cr95_read18+0x90>)
 8001004:	6811      	ldr	r1, [r2, #0]
 8001006:	6019      	str	r1, [r3, #0]
 8001008:	8891      	ldrh	r1, [r2, #4]
 800100a:	8099      	strh	r1, [r3, #4]
 800100c:	7992      	ldrb	r2, [r2, #6]
 800100e:	719a      	strb	r2, [r3, #6]

	uint8_t data[16];
	uint8_t len;

	cr95write(cmd_reqc, sizeof(cmd_reqc));
 8001010:	183b      	adds	r3, r7, r0
 8001012:	2107      	movs	r1, #7
 8001014:	0018      	movs	r0, r3
 8001016:	f7ff f927 	bl	8000268 <cr95write>
	if (cr95read(data, &len) == 0x80) {
 800101a:	1dfa      	adds	r2, r7, #7
 800101c:	2308      	movs	r3, #8
 800101e:	18fb      	adds	r3, r7, r3
 8001020:	0011      	movs	r1, r2
 8001022:	0018      	movs	r0, r3
 8001024:	f7ff f936 	bl	8000294 <cr95read>
 8001028:	0003      	movs	r3, r0
 800102a:	2b80      	cmp	r3, #128	; 0x80
 800102c:	d124      	bne.n	8001078 <cr95_read18+0x80>
		printf("ISO/IEC 18092 DATA =");
 800102e:	4b17      	ldr	r3, [pc, #92]	; (800108c <cr95_read18+0x94>)
 8001030:	0018      	movs	r0, r3
 8001032:	f003 f9b3 	bl	800439c <iprintf>
		for (uint8_t i = 0; i <= len; i++) printf(" %02X", data[i]);
 8001036:	231f      	movs	r3, #31
 8001038:	18fb      	adds	r3, r7, r3
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
 800103e:	e010      	b.n	8001062 <cr95_read18+0x6a>
 8001040:	241f      	movs	r4, #31
 8001042:	193b      	adds	r3, r7, r4
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2208      	movs	r2, #8
 8001048:	18ba      	adds	r2, r7, r2
 800104a:	5cd3      	ldrb	r3, [r2, r3]
 800104c:	001a      	movs	r2, r3
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <cr95_read18+0x98>)
 8001050:	0011      	movs	r1, r2
 8001052:	0018      	movs	r0, r3
 8001054:	f003 f9a2 	bl	800439c <iprintf>
 8001058:	193b      	adds	r3, r7, r4
 800105a:	781a      	ldrb	r2, [r3, #0]
 800105c:	193b      	adds	r3, r7, r4
 800105e:	3201      	adds	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
 8001062:	1dfb      	adds	r3, r7, #7
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	221f      	movs	r2, #31
 8001068:	18ba      	adds	r2, r7, r2
 800106a:	7812      	ldrb	r2, [r2, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	d9e7      	bls.n	8001040 <cr95_read18+0x48>
		printf("\n");
 8001070:	200a      	movs	r0, #10
 8001072:	f003 f9ad 	bl	80043d0 <putchar>
	}  else {
		printf("Error\n");
	}
}
 8001076:	e003      	b.n	8001080 <cr95_read18+0x88>
		printf("Error\n");
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <cr95_read18+0x9c>)
 800107a:	0018      	movs	r0, r3
 800107c:	f003 fa1c 	bl	80044b8 <puts>
}
 8001080:	46c0      	nop			; (mov r8, r8)
 8001082:	46bd      	mov	sp, r7
 8001084:	b009      	add	sp, #36	; 0x24
 8001086:	bd90      	pop	{r4, r7, pc}
 8001088:	08005a6c 	.word	0x08005a6c
 800108c:	08005a4c 	.word	0x08005a4c
 8001090:	080058f0 	.word	0x080058f0
 8001094:	08005a64 	.word	0x08005a64

08001098 <cr95_calibrate>:

static void cr95_calibrate(void)
{
 8001098:	b5b0      	push	{r4, r5, r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0
	uint8_t cmd_cal[] =  	    { 0x07, 0x0E, 0x03, 0xA1, 0x00, 0xF8, 0x01, 0x18, 0x00, 0x20, 0x60, 0x60, 0x00, 0x00, 0x3F, 0x01 };
 800109e:	2118      	movs	r1, #24
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	4ab7      	ldr	r2, [pc, #732]	; (8001380 <cr95_calibrate+0x2e8>)
 80010a4:	ca31      	ldmia	r2!, {r0, r4, r5}
 80010a6:	c331      	stmia	r3!, {r0, r4, r5}
 80010a8:	6812      	ldr	r2, [r2, #0]
 80010aa:	601a      	str	r2, [r3, #0]

	uint8_t data[16];
	uint8_t len;

	cmd_cal[13] = 0x00;
 80010ac:	187b      	adds	r3, r7, r1
 80010ae:	2200      	movs	r2, #0
 80010b0:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 80010b2:	000c      	movs	r4, r1
 80010b4:	187b      	adds	r3, r7, r1
 80010b6:	2110      	movs	r1, #16
 80010b8:	0018      	movs	r0, r3
 80010ba:	f7ff f8d5 	bl	8000268 <cr95write>
	printf("CAL #0 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 80010be:	0021      	movs	r1, r4
 80010c0:	187b      	adds	r3, r7, r1
 80010c2:	7b5b      	ldrb	r3, [r3, #13]
 80010c4:	001c      	movs	r4, r3
 80010c6:	1dfa      	adds	r2, r7, #7
 80010c8:	2308      	movs	r3, #8
 80010ca:	18fb      	adds	r3, r7, r3
 80010cc:	0011      	movs	r1, r2
 80010ce:	0018      	movs	r0, r3
 80010d0:	f7ff f8e0 	bl	8000294 <cr95read>
 80010d4:	1e03      	subs	r3, r0, #0
 80010d6:	d101      	bne.n	80010dc <cr95_calibrate+0x44>
 80010d8:	2279      	movs	r2, #121	; 0x79
 80010da:	e000      	b.n	80010de <cr95_calibrate+0x46>
 80010dc:	226e      	movs	r2, #110	; 0x6e
 80010de:	2508      	movs	r5, #8
 80010e0:	197b      	adds	r3, r7, r5
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	48a7      	ldr	r0, [pc, #668]	; (8001384 <cr95_calibrate+0x2ec>)
 80010e6:	0021      	movs	r1, r4
 80010e8:	f003 f958 	bl	800439c <iprintf>

	cmd_cal[13] = 0xFC;
 80010ec:	2118      	movs	r1, #24
 80010ee:	187b      	adds	r3, r7, r1
 80010f0:	22fc      	movs	r2, #252	; 0xfc
 80010f2:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 80010f4:	000c      	movs	r4, r1
 80010f6:	187b      	adds	r3, r7, r1
 80010f8:	2110      	movs	r1, #16
 80010fa:	0018      	movs	r0, r3
 80010fc:	f7ff f8b4 	bl	8000268 <cr95write>
	printf("CAL #1 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8001100:	0021      	movs	r1, r4
 8001102:	187b      	adds	r3, r7, r1
 8001104:	7b5b      	ldrb	r3, [r3, #13]
 8001106:	001c      	movs	r4, r3
 8001108:	1dfa      	adds	r2, r7, #7
 800110a:	197b      	adds	r3, r7, r5
 800110c:	0011      	movs	r1, r2
 800110e:	0018      	movs	r0, r3
 8001110:	f7ff f8c0 	bl	8000294 <cr95read>
 8001114:	1e03      	subs	r3, r0, #0
 8001116:	d101      	bne.n	800111c <cr95_calibrate+0x84>
 8001118:	2279      	movs	r2, #121	; 0x79
 800111a:	e000      	b.n	800111e <cr95_calibrate+0x86>
 800111c:	226e      	movs	r2, #110	; 0x6e
 800111e:	2508      	movs	r5, #8
 8001120:	197b      	adds	r3, r7, r5
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	4898      	ldr	r0, [pc, #608]	; (8001388 <cr95_calibrate+0x2f0>)
 8001126:	0021      	movs	r1, r4
 8001128:	f003 f938 	bl	800439c <iprintf>

	cmd_cal[13] -= 0x80;
 800112c:	2118      	movs	r1, #24
 800112e:	187b      	adds	r3, r7, r1
 8001130:	7b5b      	ldrb	r3, [r3, #13]
 8001132:	3b80      	subs	r3, #128	; 0x80
 8001134:	b2da      	uxtb	r2, r3
 8001136:	187b      	adds	r3, r7, r1
 8001138:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 800113a:	000c      	movs	r4, r1
 800113c:	187b      	adds	r3, r7, r1
 800113e:	2110      	movs	r1, #16
 8001140:	0018      	movs	r0, r3
 8001142:	f7ff f891 	bl	8000268 <cr95write>
	printf("CAL #2 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8001146:	0021      	movs	r1, r4
 8001148:	187b      	adds	r3, r7, r1
 800114a:	7b5b      	ldrb	r3, [r3, #13]
 800114c:	001c      	movs	r4, r3
 800114e:	1dfa      	adds	r2, r7, #7
 8001150:	197b      	adds	r3, r7, r5
 8001152:	0011      	movs	r1, r2
 8001154:	0018      	movs	r0, r3
 8001156:	f7ff f89d 	bl	8000294 <cr95read>
 800115a:	1e03      	subs	r3, r0, #0
 800115c:	d101      	bne.n	8001162 <cr95_calibrate+0xca>
 800115e:	2279      	movs	r2, #121	; 0x79
 8001160:	e000      	b.n	8001164 <cr95_calibrate+0xcc>
 8001162:	226e      	movs	r2, #110	; 0x6e
 8001164:	2508      	movs	r5, #8
 8001166:	197b      	adds	r3, r7, r5
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	4888      	ldr	r0, [pc, #544]	; (800138c <cr95_calibrate+0x2f4>)
 800116c:	0021      	movs	r1, r4
 800116e:	f003 f915 	bl	800439c <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x40; else cmd_cal[13] += 0x40;
 8001172:	197b      	adds	r3, r7, r5
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d107      	bne.n	800118a <cr95_calibrate+0xf2>
 800117a:	2118      	movs	r1, #24
 800117c:	187b      	adds	r3, r7, r1
 800117e:	7b5b      	ldrb	r3, [r3, #13]
 8001180:	3b40      	subs	r3, #64	; 0x40
 8001182:	b2da      	uxtb	r2, r3
 8001184:	187b      	adds	r3, r7, r1
 8001186:	735a      	strb	r2, [r3, #13]
 8001188:	e006      	b.n	8001198 <cr95_calibrate+0x100>
 800118a:	2118      	movs	r1, #24
 800118c:	187b      	adds	r3, r7, r1
 800118e:	7b5b      	ldrb	r3, [r3, #13]
 8001190:	3340      	adds	r3, #64	; 0x40
 8001192:	b2da      	uxtb	r2, r3
 8001194:	187b      	adds	r3, r7, r1
 8001196:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8001198:	2418      	movs	r4, #24
 800119a:	193b      	adds	r3, r7, r4
 800119c:	2110      	movs	r1, #16
 800119e:	0018      	movs	r0, r3
 80011a0:	f7ff f862 	bl	8000268 <cr95write>
	printf("CAL #3 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 80011a4:	193b      	adds	r3, r7, r4
 80011a6:	7b5b      	ldrb	r3, [r3, #13]
 80011a8:	001c      	movs	r4, r3
 80011aa:	1dfa      	adds	r2, r7, #7
 80011ac:	2308      	movs	r3, #8
 80011ae:	18fb      	adds	r3, r7, r3
 80011b0:	0011      	movs	r1, r2
 80011b2:	0018      	movs	r0, r3
 80011b4:	f7ff f86e 	bl	8000294 <cr95read>
 80011b8:	1e03      	subs	r3, r0, #0
 80011ba:	d101      	bne.n	80011c0 <cr95_calibrate+0x128>
 80011bc:	2279      	movs	r2, #121	; 0x79
 80011be:	e000      	b.n	80011c2 <cr95_calibrate+0x12a>
 80011c0:	226e      	movs	r2, #110	; 0x6e
 80011c2:	2508      	movs	r5, #8
 80011c4:	197b      	adds	r3, r7, r5
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4871      	ldr	r0, [pc, #452]	; (8001390 <cr95_calibrate+0x2f8>)
 80011ca:	0021      	movs	r1, r4
 80011cc:	f003 f8e6 	bl	800439c <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x20; else cmd_cal[13] += 0x20;
 80011d0:	197b      	adds	r3, r7, r5
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d107      	bne.n	80011e8 <cr95_calibrate+0x150>
 80011d8:	2118      	movs	r1, #24
 80011da:	187b      	adds	r3, r7, r1
 80011dc:	7b5b      	ldrb	r3, [r3, #13]
 80011de:	3b20      	subs	r3, #32
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	187b      	adds	r3, r7, r1
 80011e4:	735a      	strb	r2, [r3, #13]
 80011e6:	e006      	b.n	80011f6 <cr95_calibrate+0x15e>
 80011e8:	2118      	movs	r1, #24
 80011ea:	187b      	adds	r3, r7, r1
 80011ec:	7b5b      	ldrb	r3, [r3, #13]
 80011ee:	3320      	adds	r3, #32
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	187b      	adds	r3, r7, r1
 80011f4:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 80011f6:	2418      	movs	r4, #24
 80011f8:	193b      	adds	r3, r7, r4
 80011fa:	2110      	movs	r1, #16
 80011fc:	0018      	movs	r0, r3
 80011fe:	f7ff f833 	bl	8000268 <cr95write>
	printf("CAL #4 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8001202:	193b      	adds	r3, r7, r4
 8001204:	7b5b      	ldrb	r3, [r3, #13]
 8001206:	001c      	movs	r4, r3
 8001208:	1dfa      	adds	r2, r7, #7
 800120a:	2308      	movs	r3, #8
 800120c:	18fb      	adds	r3, r7, r3
 800120e:	0011      	movs	r1, r2
 8001210:	0018      	movs	r0, r3
 8001212:	f7ff f83f 	bl	8000294 <cr95read>
 8001216:	1e03      	subs	r3, r0, #0
 8001218:	d101      	bne.n	800121e <cr95_calibrate+0x186>
 800121a:	2279      	movs	r2, #121	; 0x79
 800121c:	e000      	b.n	8001220 <cr95_calibrate+0x188>
 800121e:	226e      	movs	r2, #110	; 0x6e
 8001220:	2508      	movs	r5, #8
 8001222:	197b      	adds	r3, r7, r5
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	485b      	ldr	r0, [pc, #364]	; (8001394 <cr95_calibrate+0x2fc>)
 8001228:	0021      	movs	r1, r4
 800122a:	f003 f8b7 	bl	800439c <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x10; else cmd_cal[13] += 0x10;
 800122e:	197b      	adds	r3, r7, r5
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d107      	bne.n	8001246 <cr95_calibrate+0x1ae>
 8001236:	2118      	movs	r1, #24
 8001238:	187b      	adds	r3, r7, r1
 800123a:	7b5b      	ldrb	r3, [r3, #13]
 800123c:	3b10      	subs	r3, #16
 800123e:	b2da      	uxtb	r2, r3
 8001240:	187b      	adds	r3, r7, r1
 8001242:	735a      	strb	r2, [r3, #13]
 8001244:	e006      	b.n	8001254 <cr95_calibrate+0x1bc>
 8001246:	2118      	movs	r1, #24
 8001248:	187b      	adds	r3, r7, r1
 800124a:	7b5b      	ldrb	r3, [r3, #13]
 800124c:	3310      	adds	r3, #16
 800124e:	b2da      	uxtb	r2, r3
 8001250:	187b      	adds	r3, r7, r1
 8001252:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8001254:	2418      	movs	r4, #24
 8001256:	193b      	adds	r3, r7, r4
 8001258:	2110      	movs	r1, #16
 800125a:	0018      	movs	r0, r3
 800125c:	f7ff f804 	bl	8000268 <cr95write>
	printf("CAL #5 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8001260:	193b      	adds	r3, r7, r4
 8001262:	7b5b      	ldrb	r3, [r3, #13]
 8001264:	001c      	movs	r4, r3
 8001266:	1dfa      	adds	r2, r7, #7
 8001268:	2308      	movs	r3, #8
 800126a:	18fb      	adds	r3, r7, r3
 800126c:	0011      	movs	r1, r2
 800126e:	0018      	movs	r0, r3
 8001270:	f7ff f810 	bl	8000294 <cr95read>
 8001274:	1e03      	subs	r3, r0, #0
 8001276:	d101      	bne.n	800127c <cr95_calibrate+0x1e4>
 8001278:	2279      	movs	r2, #121	; 0x79
 800127a:	e000      	b.n	800127e <cr95_calibrate+0x1e6>
 800127c:	226e      	movs	r2, #110	; 0x6e
 800127e:	2508      	movs	r5, #8
 8001280:	197b      	adds	r3, r7, r5
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	4844      	ldr	r0, [pc, #272]	; (8001398 <cr95_calibrate+0x300>)
 8001286:	0021      	movs	r1, r4
 8001288:	f003 f888 	bl	800439c <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x08; else cmd_cal[13] += 0x08;
 800128c:	197b      	adds	r3, r7, r5
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d107      	bne.n	80012a4 <cr95_calibrate+0x20c>
 8001294:	2118      	movs	r1, #24
 8001296:	187b      	adds	r3, r7, r1
 8001298:	7b5b      	ldrb	r3, [r3, #13]
 800129a:	3b08      	subs	r3, #8
 800129c:	b2da      	uxtb	r2, r3
 800129e:	187b      	adds	r3, r7, r1
 80012a0:	735a      	strb	r2, [r3, #13]
 80012a2:	e006      	b.n	80012b2 <cr95_calibrate+0x21a>
 80012a4:	2118      	movs	r1, #24
 80012a6:	187b      	adds	r3, r7, r1
 80012a8:	7b5b      	ldrb	r3, [r3, #13]
 80012aa:	3308      	adds	r3, #8
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	187b      	adds	r3, r7, r1
 80012b0:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 80012b2:	2418      	movs	r4, #24
 80012b4:	193b      	adds	r3, r7, r4
 80012b6:	2110      	movs	r1, #16
 80012b8:	0018      	movs	r0, r3
 80012ba:	f7fe ffd5 	bl	8000268 <cr95write>
	printf("CAL #6 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 80012be:	193b      	adds	r3, r7, r4
 80012c0:	7b5b      	ldrb	r3, [r3, #13]
 80012c2:	001c      	movs	r4, r3
 80012c4:	1dfa      	adds	r2, r7, #7
 80012c6:	2308      	movs	r3, #8
 80012c8:	18fb      	adds	r3, r7, r3
 80012ca:	0011      	movs	r1, r2
 80012cc:	0018      	movs	r0, r3
 80012ce:	f7fe ffe1 	bl	8000294 <cr95read>
 80012d2:	1e03      	subs	r3, r0, #0
 80012d4:	d101      	bne.n	80012da <cr95_calibrate+0x242>
 80012d6:	2279      	movs	r2, #121	; 0x79
 80012d8:	e000      	b.n	80012dc <cr95_calibrate+0x244>
 80012da:	226e      	movs	r2, #110	; 0x6e
 80012dc:	2508      	movs	r5, #8
 80012de:	197b      	adds	r3, r7, r5
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	482e      	ldr	r0, [pc, #184]	; (800139c <cr95_calibrate+0x304>)
 80012e4:	0021      	movs	r1, r4
 80012e6:	f003 f859 	bl	800439c <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x04; else cmd_cal[13] += 0x04;
 80012ea:	197b      	adds	r3, r7, r5
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d107      	bne.n	8001302 <cr95_calibrate+0x26a>
 80012f2:	2118      	movs	r1, #24
 80012f4:	187b      	adds	r3, r7, r1
 80012f6:	7b5b      	ldrb	r3, [r3, #13]
 80012f8:	3b04      	subs	r3, #4
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	187b      	adds	r3, r7, r1
 80012fe:	735a      	strb	r2, [r3, #13]
 8001300:	e006      	b.n	8001310 <cr95_calibrate+0x278>
 8001302:	2118      	movs	r1, #24
 8001304:	187b      	adds	r3, r7, r1
 8001306:	7b5b      	ldrb	r3, [r3, #13]
 8001308:	3304      	adds	r3, #4
 800130a:	b2da      	uxtb	r2, r3
 800130c:	187b      	adds	r3, r7, r1
 800130e:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8001310:	2418      	movs	r4, #24
 8001312:	193b      	adds	r3, r7, r4
 8001314:	2110      	movs	r1, #16
 8001316:	0018      	movs	r0, r3
 8001318:	f7fe ffa6 	bl	8000268 <cr95write>
	printf("CAL #7 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 800131c:	193b      	adds	r3, r7, r4
 800131e:	7b5b      	ldrb	r3, [r3, #13]
 8001320:	001c      	movs	r4, r3
 8001322:	1dfa      	adds	r2, r7, #7
 8001324:	2308      	movs	r3, #8
 8001326:	18fb      	adds	r3, r7, r3
 8001328:	0011      	movs	r1, r2
 800132a:	0018      	movs	r0, r3
 800132c:	f7fe ffb2 	bl	8000294 <cr95read>
 8001330:	1e03      	subs	r3, r0, #0
 8001332:	d101      	bne.n	8001338 <cr95_calibrate+0x2a0>
 8001334:	2279      	movs	r2, #121	; 0x79
 8001336:	e000      	b.n	800133a <cr95_calibrate+0x2a2>
 8001338:	226e      	movs	r2, #110	; 0x6e
 800133a:	2508      	movs	r5, #8
 800133c:	197b      	adds	r3, r7, r5
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4817      	ldr	r0, [pc, #92]	; (80013a0 <cr95_calibrate+0x308>)
 8001342:	0021      	movs	r1, r4
 8001344:	f003 f82a 	bl	800439c <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x04;
 8001348:	197b      	adds	r3, r7, r5
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d106      	bne.n	800135e <cr95_calibrate+0x2c6>
 8001350:	2118      	movs	r1, #24
 8001352:	187b      	adds	r3, r7, r1
 8001354:	7b5b      	ldrb	r3, [r3, #13]
 8001356:	3b04      	subs	r3, #4
 8001358:	b2da      	uxtb	r2, r3
 800135a:	187b      	adds	r3, r7, r1
 800135c:	735a      	strb	r2, [r3, #13]
	DacDataRef = cmd_cal[13];
 800135e:	2318      	movs	r3, #24
 8001360:	18fb      	adds	r3, r7, r3
 8001362:	7b5a      	ldrb	r2, [r3, #13]
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <cr95_calibrate+0x30c>)
 8001366:	701a      	strb	r2, [r3, #0]
	printf("CAL finished, DacDataRef=0x%02x\n", DacDataRef);
 8001368:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <cr95_calibrate+0x30c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	001a      	movs	r2, r3
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <cr95_calibrate+0x310>)
 8001370:	0011      	movs	r1, r2
 8001372:	0018      	movs	r0, r3
 8001374:	f003 f812 	bl	800439c <iprintf>
}
 8001378:	46c0      	nop			; (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	b00a      	add	sp, #40	; 0x28
 800137e:	bdb0      	pop	{r4, r5, r7, pc}
 8001380:	08005bb8 	.word	0x08005bb8
 8001384:	08005a74 	.word	0x08005a74
 8001388:	08005a98 	.word	0x08005a98
 800138c:	08005abc 	.word	0x08005abc
 8001390:	08005ae0 	.word	0x08005ae0
 8001394:	08005b04 	.word	0x08005b04
 8001398:	08005b28 	.word	0x08005b28
 800139c:	08005b4c 	.word	0x08005b4c
 80013a0:	08005b70 	.word	0x08005b70
 80013a4:	20000282 	.word	0x20000282
 80013a8:	08005b94 	.word	0x08005b94

080013ac <cr95_idle>:

static void cr95_idle(uint8_t mode)
{
 80013ac:	b590      	push	{r4, r7, lr}
 80013ae:	b087      	sub	sp, #28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	0002      	movs	r2, r0
 80013b4:	1dfb      	adds	r3, r7, #7
 80013b6:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_idle[] =  		{ 0x07, 0x0E, 0x0A, 0x21, 0x00, 0x79, 0x01, 0x18, 0x00, 0x20, 0x60, 0x60, 0x00, 0x00, 0x3F, 0x08 };
 80013b8:	2308      	movs	r3, #8
 80013ba:	18fb      	adds	r3, r7, r3
 80013bc:	4a15      	ldr	r2, [pc, #84]	; (8001414 <cr95_idle+0x68>)
 80013be:	ca13      	ldmia	r2!, {r0, r1, r4}
 80013c0:	c313      	stmia	r3!, {r0, r1, r4}
 80013c2:	6812      	ldr	r2, [r2, #0]
 80013c4:	601a      	str	r2, [r3, #0]

	if (mode == 1) cmd_idle[2] = 0x08;   // Hibernate
 80013c6:	1dfb      	adds	r3, r7, #7
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d104      	bne.n	80013d8 <cr95_idle+0x2c>
 80013ce:	2308      	movs	r3, #8
 80013d0:	18fb      	adds	r3, r7, r3
 80013d2:	2208      	movs	r2, #8
 80013d4:	709a      	strb	r2, [r3, #2]
 80013d6:	e003      	b.n	80013e0 <cr95_idle+0x34>
	else cmd_idle[2] = 0x0A;             // TagDetect
 80013d8:	2308      	movs	r3, #8
 80013da:	18fb      	adds	r3, r7, r3
 80013dc:	220a      	movs	r2, #10
 80013de:	709a      	strb	r2, [r3, #2]

	cmd_idle[12] = DacDataRef - 8;
 80013e0:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <cr95_idle+0x6c>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	3b08      	subs	r3, #8
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	2108      	movs	r1, #8
 80013ea:	187b      	adds	r3, r7, r1
 80013ec:	731a      	strb	r2, [r3, #12]
	cmd_idle[13] = DacDataRef + 8;
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <cr95_idle+0x6c>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	3308      	adds	r3, #8
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	187b      	adds	r3, r7, r1
 80013f8:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_idle, sizeof(cmd_idle));
 80013fa:	187b      	adds	r3, r7, r1
 80013fc:	2110      	movs	r1, #16
 80013fe:	0018      	movs	r0, r3
 8001400:	f7fe ff32 	bl	8000268 <cr95write>
	printf("IDLE sent\n");
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <cr95_idle+0x70>)
 8001406:	0018      	movs	r0, r3
 8001408:	f003 f856 	bl	80044b8 <puts>
}
 800140c:	46c0      	nop			; (mov r8, r8)
 800140e:	46bd      	mov	sp, r7
 8001410:	b007      	add	sp, #28
 8001412:	bd90      	pop	{r4, r7, pc}
 8001414:	08005bd4 	.word	0x08005bd4
 8001418:	20000282 	.word	0x20000282
 800141c:	08005bc8 	.word	0x08005bc8

08001420 <uart_process_command>:

static void uart_process_command(char *cmd)
{
 8001420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001422:	b08d      	sub	sp, #52	; 0x34
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
    char *token;
    token = strtok(cmd, " ");
 8001428:	4acb      	ldr	r2, [pc, #812]	; (8001758 <uart_process_command+0x338>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	0011      	movs	r1, r2
 800142e:	0018      	movs	r0, r3
 8001430:	f003 f88a 	bl	8004548 <strtok>
 8001434:	0003      	movs	r3, r0
 8001436:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t data[16];
	uint8_t len;

	const uint8_t cmd_echo[] =  { 0x55 };
 8001438:	2310      	movs	r3, #16
 800143a:	18fb      	adds	r3, r7, r3
 800143c:	2255      	movs	r2, #85	; 0x55
 800143e:	701a      	strb	r2, [r3, #0]
	const uint8_t cmd_idn[] =   { 0x01, 0x00 };
 8001440:	210c      	movs	r1, #12
 8001442:	187b      	adds	r3, r7, r1
 8001444:	2201      	movs	r2, #1
 8001446:	701a      	strb	r2, [r3, #0]
 8001448:	187b      	adds	r3, r7, r1
 800144a:	2200      	movs	r2, #0
 800144c:	705a      	strb	r2, [r3, #1]

    if (strcasecmp(token, "HELLO") == 0) {
 800144e:	4ac3      	ldr	r2, [pc, #780]	; (800175c <uart_process_command+0x33c>)
 8001450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001452:	0011      	movs	r1, r2
 8001454:	0018      	movs	r0, r3
 8001456:	f003 f859 	bl	800450c <strcasecmp>
 800145a:	1e03      	subs	r3, r0, #0
 800145c:	d104      	bne.n	8001468 <uart_process_command+0x48>
        printf("Komunikace OK\n");
 800145e:	4bc0      	ldr	r3, [pc, #768]	; (8001760 <uart_process_command+0x340>)
 8001460:	0018      	movs	r0, r3
 8001462:	f003 f829 	bl	80044b8 <puts>
    	} while (uart_rx_read_ptr == uart_rx_write_ptr);
    }
    else {
        printf("Unknown command\n");
    }
}
 8001466:	e1e2      	b.n	800182e <uart_process_command+0x40e>
    else if (strcasecmp(token, "ON") == 0) {
 8001468:	4abe      	ldr	r2, [pc, #760]	; (8001764 <uart_process_command+0x344>)
 800146a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800146c:	0011      	movs	r1, r2
 800146e:	0018      	movs	r0, r3
 8001470:	f003 f84c 	bl	800450c <strcasecmp>
 8001474:	1e03      	subs	r3, r0, #0
 8001476:	d125      	bne.n	80014c4 <uart_process_command+0xa4>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	0059      	lsls	r1, r3, #1
 800147c:	2390      	movs	r3, #144	; 0x90
 800147e:	05db      	lsls	r3, r3, #23
 8001480:	2201      	movs	r2, #1
 8001482:	0018      	movs	r0, r3
 8001484:	f001 fc0e 	bl	8002ca4 <HAL_GPIO_WritePin>
    	MX_USART1_UART_Init();
 8001488:	f000 fb18 	bl	8001abc <MX_USART1_UART_Init>
        HAL_UART_Receive_DMA(&huart1, nfc_rx_buf, RX_BUFFER_LEN);
 800148c:	49b6      	ldr	r1, [pc, #728]	; (8001768 <uart_process_command+0x348>)
 800148e:	4bb7      	ldr	r3, [pc, #732]	; (800176c <uart_process_command+0x34c>)
 8001490:	2240      	movs	r2, #64	; 0x40
 8001492:	0018      	movs	r0, r3
 8001494:	f002 fa92 	bl	80039bc <HAL_UART_Receive_DMA>
    	HAL_Delay(5);
 8001498:	2005      	movs	r0, #5
 800149a:	f000 fea1 	bl	80021e0 <HAL_Delay>
    	printf("RFID ON\n");
 800149e:	4bb4      	ldr	r3, [pc, #720]	; (8001770 <uart_process_command+0x350>)
 80014a0:	0018      	movs	r0, r3
 80014a2:	f003 f809 	bl	80044b8 <puts>
        nfc_rx_read_ptr = nfc_rx_write_ptr;
 80014a6:	4bb3      	ldr	r3, [pc, #716]	; (8001774 <uart_process_command+0x354>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	2240      	movs	r2, #64	; 0x40
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	4bb0      	ldr	r3, [pc, #704]	; (8001778 <uart_process_command+0x358>)
 80014b6:	801a      	strh	r2, [r3, #0]
    	cr95_wakeup();
 80014b8:	f7fe ffa4 	bl	8000404 <cr95_wakeup>
    	nfc_ready = true;
 80014bc:	4baf      	ldr	r3, [pc, #700]	; (800177c <uart_process_command+0x35c>)
 80014be:	2201      	movs	r2, #1
 80014c0:	701a      	strb	r2, [r3, #0]
}
 80014c2:	e1b4      	b.n	800182e <uart_process_command+0x40e>
    else if (strcasecmp(token, "OFF") == 0) {
 80014c4:	4aae      	ldr	r2, [pc, #696]	; (8001780 <uart_process_command+0x360>)
 80014c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c8:	0011      	movs	r1, r2
 80014ca:	0018      	movs	r0, r3
 80014cc:	f003 f81e 	bl	800450c <strcasecmp>
 80014d0:	1e03      	subs	r3, r0, #0
 80014d2:	d117      	bne.n	8001504 <uart_process_command+0xe4>
    	nfc_ready = false;
 80014d4:	4ba9      	ldr	r3, [pc, #676]	; (800177c <uart_process_command+0x35c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
        HAL_UART_AbortReceive(&huart1);
 80014da:	4ba4      	ldr	r3, [pc, #656]	; (800176c <uart_process_command+0x34c>)
 80014dc:	0018      	movs	r0, r3
 80014de:	f002 fb05 	bl	8003aec <HAL_UART_AbortReceive>
    	HAL_UART_DeInit(&huart1);
 80014e2:	4ba2      	ldr	r3, [pc, #648]	; (800176c <uart_process_command+0x34c>)
 80014e4:	0018      	movs	r0, r3
 80014e6:	f002 f98b 	bl	8003800 <HAL_UART_DeInit>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80014ea:	2380      	movs	r3, #128	; 0x80
 80014ec:	0059      	lsls	r1, r3, #1
 80014ee:	2390      	movs	r3, #144	; 0x90
 80014f0:	05db      	lsls	r3, r3, #23
 80014f2:	2200      	movs	r2, #0
 80014f4:	0018      	movs	r0, r3
 80014f6:	f001 fbd5 	bl	8002ca4 <HAL_GPIO_WritePin>
    	printf("RFID OFF\n");
 80014fa:	4ba2      	ldr	r3, [pc, #648]	; (8001784 <uart_process_command+0x364>)
 80014fc:	0018      	movs	r0, r3
 80014fe:	f002 ffdb 	bl	80044b8 <puts>
}
 8001502:	e194      	b.n	800182e <uart_process_command+0x40e>
    else if (strcasecmp(token, "ECHO") == 0) {
 8001504:	4aa0      	ldr	r2, [pc, #640]	; (8001788 <uart_process_command+0x368>)
 8001506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001508:	0011      	movs	r1, r2
 800150a:	0018      	movs	r0, r3
 800150c:	f002 fffe 	bl	800450c <strcasecmp>
 8001510:	1e03      	subs	r3, r0, #0
 8001512:	d11c      	bne.n	800154e <uart_process_command+0x12e>
    	cr95write(cmd_echo, sizeof(cmd_echo));
 8001514:	2310      	movs	r3, #16
 8001516:	18fb      	adds	r3, r7, r3
 8001518:	2101      	movs	r1, #1
 800151a:	0018      	movs	r0, r3
 800151c:	f7fe fea4 	bl	8000268 <cr95write>
    	uint8_t resp = cr95read(NULL, NULL);
 8001520:	2525      	movs	r5, #37	; 0x25
 8001522:	197c      	adds	r4, r7, r5
 8001524:	2100      	movs	r1, #0
 8001526:	2000      	movs	r0, #0
 8001528:	f7fe feb4 	bl	8000294 <cr95read>
 800152c:	0003      	movs	r3, r0
 800152e:	7023      	strb	r3, [r4, #0]
    	printf("ECHO %s %02X\n", (resp == 0x55) ? "yes" : "no", resp);
 8001530:	197b      	adds	r3, r7, r5
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b55      	cmp	r3, #85	; 0x55
 8001536:	d101      	bne.n	800153c <uart_process_command+0x11c>
 8001538:	4b94      	ldr	r3, [pc, #592]	; (800178c <uart_process_command+0x36c>)
 800153a:	e000      	b.n	800153e <uart_process_command+0x11e>
 800153c:	4b94      	ldr	r3, [pc, #592]	; (8001790 <uart_process_command+0x370>)
 800153e:	2225      	movs	r2, #37	; 0x25
 8001540:	18ba      	adds	r2, r7, r2
 8001542:	7812      	ldrb	r2, [r2, #0]
 8001544:	4893      	ldr	r0, [pc, #588]	; (8001794 <uart_process_command+0x374>)
 8001546:	0019      	movs	r1, r3
 8001548:	f002 ff28 	bl	800439c <iprintf>
}
 800154c:	e16f      	b.n	800182e <uart_process_command+0x40e>
    else if (strcasecmp(token, "IDN") == 0) {
 800154e:	4a92      	ldr	r2, [pc, #584]	; (8001798 <uart_process_command+0x378>)
 8001550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001552:	0011      	movs	r1, r2
 8001554:	0018      	movs	r0, r3
 8001556:	f002 ffd9 	bl	800450c <strcasecmp>
 800155a:	1e03      	subs	r3, r0, #0
 800155c:	d13a      	bne.n	80015d4 <uart_process_command+0x1b4>
    	cr95write(cmd_idn, sizeof(cmd_idn));
 800155e:	230c      	movs	r3, #12
 8001560:	18fb      	adds	r3, r7, r3
 8001562:	2102      	movs	r1, #2
 8001564:	0018      	movs	r0, r3
 8001566:	f7fe fe7f 	bl	8000268 <cr95write>
    	if (cr95read(data, &len) == 0x00) {
 800156a:	2313      	movs	r3, #19
 800156c:	18fa      	adds	r2, r7, r3
 800156e:	2314      	movs	r3, #20
 8001570:	18fb      	adds	r3, r7, r3
 8001572:	0011      	movs	r1, r2
 8001574:	0018      	movs	r0, r3
 8001576:	f7fe fe8d 	bl	8000294 <cr95read>
 800157a:	1e03      	subs	r3, r0, #0
 800157c:	d125      	bne.n	80015ca <uart_process_command+0x1aa>
    		printf("IDN =");
 800157e:	4b87      	ldr	r3, [pc, #540]	; (800179c <uart_process_command+0x37c>)
 8001580:	0018      	movs	r0, r3
 8001582:	f002 ff0b 	bl	800439c <iprintf>
    		for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8001586:	232f      	movs	r3, #47	; 0x2f
 8001588:	18fb      	adds	r3, r7, r3
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
 800158e:	e010      	b.n	80015b2 <uart_process_command+0x192>
 8001590:	242f      	movs	r4, #47	; 0x2f
 8001592:	193b      	adds	r3, r7, r4
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2214      	movs	r2, #20
 8001598:	18ba      	adds	r2, r7, r2
 800159a:	5cd3      	ldrb	r3, [r2, r3]
 800159c:	001a      	movs	r2, r3
 800159e:	4b80      	ldr	r3, [pc, #512]	; (80017a0 <uart_process_command+0x380>)
 80015a0:	0011      	movs	r1, r2
 80015a2:	0018      	movs	r0, r3
 80015a4:	f002 fefa 	bl	800439c <iprintf>
 80015a8:	193b      	adds	r3, r7, r4
 80015aa:	781a      	ldrb	r2, [r3, #0]
 80015ac:	193b      	adds	r3, r7, r4
 80015ae:	3201      	adds	r2, #1
 80015b0:	701a      	strb	r2, [r3, #0]
 80015b2:	2313      	movs	r3, #19
 80015b4:	18fb      	adds	r3, r7, r3
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	222f      	movs	r2, #47	; 0x2f
 80015ba:	18ba      	adds	r2, r7, r2
 80015bc:	7812      	ldrb	r2, [r2, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d3e6      	bcc.n	8001590 <uart_process_command+0x170>
    		printf("\n");
 80015c2:	200a      	movs	r0, #10
 80015c4:	f002 ff04 	bl	80043d0 <putchar>
}
 80015c8:	e131      	b.n	800182e <uart_process_command+0x40e>
    		printf("IDN error\n");
 80015ca:	4b76      	ldr	r3, [pc, #472]	; (80017a4 <uart_process_command+0x384>)
 80015cc:	0018      	movs	r0, r3
 80015ce:	f002 ff73 	bl	80044b8 <puts>
}
 80015d2:	e12c      	b.n	800182e <uart_process_command+0x40e>
    else if (strcasecmp(token, "INIT14") == 0) {
 80015d4:	4a74      	ldr	r2, [pc, #464]	; (80017a8 <uart_process_command+0x388>)
 80015d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d8:	0011      	movs	r1, r2
 80015da:	0018      	movs	r0, r3
 80015dc:	f002 ff96 	bl	800450c <strcasecmp>
 80015e0:	1e03      	subs	r3, r0, #0
 80015e2:	d102      	bne.n	80015ea <uart_process_command+0x1ca>
    	cr95_init14();
 80015e4:	f7fe ff24 	bl	8000430 <cr95_init14>
}
 80015e8:	e121      	b.n	800182e <uart_process_command+0x40e>
    else if (strcasecmp(token, "INIT14B") == 0) {
 80015ea:	4a70      	ldr	r2, [pc, #448]	; (80017ac <uart_process_command+0x38c>)
 80015ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ee:	0011      	movs	r1, r2
 80015f0:	0018      	movs	r0, r3
 80015f2:	f002 ff8b 	bl	800450c <strcasecmp>
 80015f6:	1e03      	subs	r3, r0, #0
 80015f8:	d102      	bne.n	8001600 <uart_process_command+0x1e0>
        cr95_init14B();
 80015fa:	f7fe ff7d 	bl	80004f8 <cr95_init14B>
}
 80015fe:	e116      	b.n	800182e <uart_process_command+0x40e>
    else if (strcasecmp(token, "INIT15") == 0) {
 8001600:	4a6b      	ldr	r2, [pc, #428]	; (80017b0 <uart_process_command+0x390>)
 8001602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001604:	0011      	movs	r1, r2
 8001606:	0018      	movs	r0, r3
 8001608:	f002 ff80 	bl	800450c <strcasecmp>
 800160c:	1e03      	subs	r3, r0, #0
 800160e:	d102      	bne.n	8001616 <uart_process_command+0x1f6>
        cr95_init15();
 8001610:	f7fe ffd6 	bl	80005c0 <cr95_init15>
}
 8001614:	e10b      	b.n	800182e <uart_process_command+0x40e>
    else if (strcasecmp(token, "INIT18") == 0) {
 8001616:	4a67      	ldr	r2, [pc, #412]	; (80017b4 <uart_process_command+0x394>)
 8001618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800161a:	0011      	movs	r1, r2
 800161c:	0018      	movs	r0, r3
 800161e:	f002 ff75 	bl	800450c <strcasecmp>
 8001622:	1e03      	subs	r3, r0, #0
 8001624:	d102      	bne.n	800162c <uart_process_command+0x20c>
        cr95_init18();
 8001626:	f7ff f82f 	bl	8000688 <cr95_init18>
}
 800162a:	e100      	b.n	800182e <uart_process_command+0x40e>
    else if (strcasecmp(token, "READ") == 0) {
 800162c:	4a62      	ldr	r2, [pc, #392]	; (80017b8 <uart_process_command+0x398>)
 800162e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001630:	0011      	movs	r1, r2
 8001632:	0018      	movs	r0, r3
 8001634:	f002 ff6a 	bl	800450c <strcasecmp>
 8001638:	1e03      	subs	r3, r0, #0
 800163a:	d102      	bne.n	8001642 <uart_process_command+0x222>
    	cr95_read();
 800163c:	f7ff f8a4 	bl	8000788 <cr95_read>
}
 8001640:	e0f5      	b.n	800182e <uart_process_command+0x40e>
    else if (strcasecmp(token, "READTOPAZ") == 0) {
 8001642:	4a5e      	ldr	r2, [pc, #376]	; (80017bc <uart_process_command+0x39c>)
 8001644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001646:	0011      	movs	r1, r2
 8001648:	0018      	movs	r0, r3
 800164a:	f002 ff5f 	bl	800450c <strcasecmp>
 800164e:	1e03      	subs	r3, r0, #0
 8001650:	d102      	bne.n	8001658 <uart_process_command+0x238>
        cr95_readtopaz();
 8001652:	f7ff fbc1 	bl	8000dd8 <cr95_readtopaz>
}
 8001656:	e0ea      	b.n	800182e <uart_process_command+0x40e>
    else if (strcasecmp(token, "READ14B") == 0) {
 8001658:	4a59      	ldr	r2, [pc, #356]	; (80017c0 <uart_process_command+0x3a0>)
 800165a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800165c:	0011      	movs	r1, r2
 800165e:	0018      	movs	r0, r3
 8001660:	f002 ff54 	bl	800450c <strcasecmp>
 8001664:	1e03      	subs	r3, r0, #0
 8001666:	d102      	bne.n	800166e <uart_process_command+0x24e>
        cr95_read14B();
 8001668:	f7ff fc72 	bl	8000f50 <cr95_read14B>
}
 800166c:	e0df      	b.n	800182e <uart_process_command+0x40e>
    else if (strcasecmp(token, "READ18") == 0) {
 800166e:	4a55      	ldr	r2, [pc, #340]	; (80017c4 <uart_process_command+0x3a4>)
 8001670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001672:	0011      	movs	r1, r2
 8001674:	0018      	movs	r0, r3
 8001676:	f002 ff49 	bl	800450c <strcasecmp>
 800167a:	1e03      	subs	r3, r0, #0
 800167c:	d102      	bne.n	8001684 <uart_process_command+0x264>
        cr95_read18();
 800167e:	f7ff fcbb 	bl	8000ff8 <cr95_read18>
}
 8001682:	e0d4      	b.n	800182e <uart_process_command+0x40e>
    else if (strcasecmp(token, "CALIBRATE") == 0) {
 8001684:	4a50      	ldr	r2, [pc, #320]	; (80017c8 <uart_process_command+0x3a8>)
 8001686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001688:	0011      	movs	r1, r2
 800168a:	0018      	movs	r0, r3
 800168c:	f002 ff3e 	bl	800450c <strcasecmp>
 8001690:	1e03      	subs	r3, r0, #0
 8001692:	d102      	bne.n	800169a <uart_process_command+0x27a>
    	cr95_calibrate();
 8001694:	f7ff fd00 	bl	8001098 <cr95_calibrate>
}
 8001698:	e0c9      	b.n	800182e <uart_process_command+0x40e>
    else if (strcasecmp(token, "IDLE") == 0) {
 800169a:	4a4c      	ldr	r2, [pc, #304]	; (80017cc <uart_process_command+0x3ac>)
 800169c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800169e:	0011      	movs	r1, r2
 80016a0:	0018      	movs	r0, r3
 80016a2:	f002 ff33 	bl	800450c <strcasecmp>
 80016a6:	1e03      	subs	r3, r0, #0
 80016a8:	d103      	bne.n	80016b2 <uart_process_command+0x292>
    	cr95_idle(1);
 80016aa:	2001      	movs	r0, #1
 80016ac:	f7ff fe7e 	bl	80013ac <cr95_idle>
}
 80016b0:	e0bd      	b.n	800182e <uart_process_command+0x40e>
    else if (strcasecmp(token, "WAKEUP") == 0) {
 80016b2:	4a47      	ldr	r2, [pc, #284]	; (80017d0 <uart_process_command+0x3b0>)
 80016b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b6:	0011      	movs	r1, r2
 80016b8:	0018      	movs	r0, r3
 80016ba:	f002 ff27 	bl	800450c <strcasecmp>
 80016be:	1e03      	subs	r3, r0, #0
 80016c0:	d117      	bne.n	80016f2 <uart_process_command+0x2d2>
    	cr95_wakeup();
 80016c2:	f7fe fe9f 	bl	8000404 <cr95_wakeup>
    	uint8_t resp = cr95read(data, &len);
 80016c6:	2526      	movs	r5, #38	; 0x26
 80016c8:	197c      	adds	r4, r7, r5
 80016ca:	2313      	movs	r3, #19
 80016cc:	18fa      	adds	r2, r7, r3
 80016ce:	2614      	movs	r6, #20
 80016d0:	19bb      	adds	r3, r7, r6
 80016d2:	0011      	movs	r1, r2
 80016d4:	0018      	movs	r0, r3
 80016d6:	f7fe fddd 	bl	8000294 <cr95read>
 80016da:	0003      	movs	r3, r0
 80016dc:	7023      	strb	r3, [r4, #0]
    	printf("Code of wakeup is: %02X with response: %02X\n", data[0],resp);
 80016de:	19bb      	adds	r3, r7, r6
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	0019      	movs	r1, r3
 80016e4:	197b      	adds	r3, r7, r5
 80016e6:	781a      	ldrb	r2, [r3, #0]
 80016e8:	4b3a      	ldr	r3, [pc, #232]	; (80017d4 <uart_process_command+0x3b4>)
 80016ea:	0018      	movs	r0, r3
 80016ec:	f002 fe56 	bl	800439c <iprintf>
}
 80016f0:	e09d      	b.n	800182e <uart_process_command+0x40e>
    else if (strcasecmp(token, "AUTO") == 0) {
 80016f2:	4a39      	ldr	r2, [pc, #228]	; (80017d8 <uart_process_command+0x3b8>)
 80016f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f6:	0011      	movs	r1, r2
 80016f8:	0018      	movs	r0, r3
 80016fa:	f002 ff07 	bl	800450c <strcasecmp>
 80016fe:	1e03      	subs	r3, r0, #0
 8001700:	d000      	beq.n	8001704 <uart_process_command+0x2e4>
 8001702:	e090      	b.n	8001826 <uart_process_command+0x406>
    	cr95_calibrate();
 8001704:	f7ff fcc8 	bl	8001098 <cr95_calibrate>
        	cr95_idle(0);
 8001708:	2000      	movs	r0, #0
 800170a:	f7ff fe4f 	bl	80013ac <cr95_idle>
			do {} while (nfc_rx_read_ptr == nfc_rx_write_ptr);
 800170e:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <uart_process_command+0x358>)
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	b29b      	uxth	r3, r3
 8001714:	0019      	movs	r1, r3
 8001716:	4b17      	ldr	r3, [pc, #92]	; (8001774 <uart_process_command+0x354>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2240      	movs	r2, #64	; 0x40
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	4299      	cmp	r1, r3
 8001722:	d0f4      	beq.n	800170e <uart_process_command+0x2ee>
			uint8_t resp = cr95read(data, &len);
 8001724:	2527      	movs	r5, #39	; 0x27
 8001726:	197c      	adds	r4, r7, r5
 8001728:	2313      	movs	r3, #19
 800172a:	18fa      	adds	r2, r7, r3
 800172c:	2314      	movs	r3, #20
 800172e:	18fb      	adds	r3, r7, r3
 8001730:	0011      	movs	r1, r2
 8001732:	0018      	movs	r0, r3
 8001734:	f7fe fdae 	bl	8000294 <cr95read>
 8001738:	0003      	movs	r3, r0
 800173a:	7023      	strb	r3, [r4, #0]
			if (resp == 0x00 && data[0] == 0x02) printf("WAKEUP by tag detect\n");
 800173c:	197b      	adds	r3, r7, r5
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d14d      	bne.n	80017e0 <uart_process_command+0x3c0>
 8001744:	2314      	movs	r3, #20
 8001746:	18fb      	adds	r3, r7, r3
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d148      	bne.n	80017e0 <uart_process_command+0x3c0>
 800174e:	4b23      	ldr	r3, [pc, #140]	; (80017dc <uart_process_command+0x3bc>)
 8001750:	0018      	movs	r0, r3
 8001752:	f002 feb1 	bl	80044b8 <puts>
 8001756:	e047      	b.n	80017e8 <uart_process_command+0x3c8>
 8001758:	08005be4 	.word	0x08005be4
 800175c:	08005be8 	.word	0x08005be8
 8001760:	08005bf0 	.word	0x08005bf0
 8001764:	08005c00 	.word	0x08005c00
 8001768:	20000240 	.word	0x20000240
 800176c:	2000035c 	.word	0x2000035c
 8001770:	08005c04 	.word	0x08005c04
 8001774:	20000318 	.word	0x20000318
 8001778:	20000280 	.word	0x20000280
 800177c:	20000283 	.word	0x20000283
 8001780:	08005c0c 	.word	0x08005c0c
 8001784:	08005c10 	.word	0x08005c10
 8001788:	08005c1c 	.word	0x08005c1c
 800178c:	08005840 	.word	0x08005840
 8001790:	08005844 	.word	0x08005844
 8001794:	08005c24 	.word	0x08005c24
 8001798:	08005c34 	.word	0x08005c34
 800179c:	08005c38 	.word	0x08005c38
 80017a0:	080058f0 	.word	0x080058f0
 80017a4:	08005c40 	.word	0x08005c40
 80017a8:	08005c4c 	.word	0x08005c4c
 80017ac:	08005c54 	.word	0x08005c54
 80017b0:	08005c5c 	.word	0x08005c5c
 80017b4:	08005c64 	.word	0x08005c64
 80017b8:	08005c6c 	.word	0x08005c6c
 80017bc:	08005c74 	.word	0x08005c74
 80017c0:	08005c80 	.word	0x08005c80
 80017c4:	08005c88 	.word	0x08005c88
 80017c8:	08005c90 	.word	0x08005c90
 80017cc:	08005c9c 	.word	0x08005c9c
 80017d0:	08005ca4 	.word	0x08005ca4
 80017d4:	08005cac 	.word	0x08005cac
 80017d8:	08005cdc 	.word	0x08005cdc
 80017dc:	08005ce4 	.word	0x08005ce4
			else printf("Error\n");
 80017e0:	4b15      	ldr	r3, [pc, #84]	; (8001838 <uart_process_command+0x418>)
 80017e2:	0018      	movs	r0, r3
 80017e4:	f002 fe68 	bl	80044b8 <puts>
			printf("Code of wakeup is:%02X\n", data[0]);
 80017e8:	2314      	movs	r3, #20
 80017ea:	18fb      	adds	r3, r7, r3
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	001a      	movs	r2, r3
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <uart_process_command+0x41c>)
 80017f2:	0011      	movs	r1, r2
 80017f4:	0018      	movs	r0, r3
 80017f6:	f002 fdd1 	bl	800439c <iprintf>
        	cr95_init14();
 80017fa:	f7fe fe19 	bl	8000430 <cr95_init14>
        	cr95_read();
 80017fe:	f7fe ffc3 	bl	8000788 <cr95_read>
        	HAL_Delay(2000);
 8001802:	23fa      	movs	r3, #250	; 0xfa
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	0018      	movs	r0, r3
 8001808:	f000 fcea 	bl	80021e0 <HAL_Delay>
    	} while (uart_rx_read_ptr == uart_rx_write_ptr);
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <uart_process_command+0x420>)
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	b29b      	uxth	r3, r3
 8001812:	0019      	movs	r1, r3
 8001814:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <uart_process_command+0x424>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2240      	movs	r2, #64	; 0x40
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	4299      	cmp	r1, r3
 8001820:	d100      	bne.n	8001824 <uart_process_command+0x404>
 8001822:	e771      	b.n	8001708 <uart_process_command+0x2e8>
}
 8001824:	e003      	b.n	800182e <uart_process_command+0x40e>
        printf("Unknown command\n");
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <uart_process_command+0x428>)
 8001828:	0018      	movs	r0, r3
 800182a:	f002 fe45 	bl	80044b8 <puts>
}
 800182e:	46c0      	nop			; (mov r8, r8)
 8001830:	46bd      	mov	sp, r7
 8001832:	b00d      	add	sp, #52	; 0x34
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	08005a64 	.word	0x08005a64
 800183c:	08005cfc 	.word	0x08005cfc
 8001840:	2000023c 	.word	0x2000023c
 8001844:	200002d4 	.word	0x200002d4
 8001848:	08005d14 	.word	0x08005d14

0800184c <uart_byte_available>:


static void uart_byte_available(uint8_t c)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	0002      	movs	r2, r0
 8001854:	1dfb      	adds	r3, r7, #7
 8001856:	701a      	strb	r2, [r3, #0]
    static uint16_t cnt;
    static char data[CMD_BUFFER_LEN];

    if (cnt < CMD_BUFFER_LEN) data[cnt++] = c;
 8001858:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <uart_byte_available+0x5c>)
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	2b3f      	cmp	r3, #63	; 0x3f
 800185e:	d80a      	bhi.n	8001876 <uart_byte_available+0x2a>
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <uart_byte_available+0x5c>)
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	1c5a      	adds	r2, r3, #1
 8001866:	b291      	uxth	r1, r2
 8001868:	4a0f      	ldr	r2, [pc, #60]	; (80018a8 <uart_byte_available+0x5c>)
 800186a:	8011      	strh	r1, [r2, #0]
 800186c:	0019      	movs	r1, r3
 800186e:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <uart_byte_available+0x60>)
 8001870:	1dfa      	adds	r2, r7, #7
 8001872:	7812      	ldrb	r2, [r2, #0]
 8001874:	545a      	strb	r2, [r3, r1]
    if (c == '\n' || c == '\r') {
 8001876:	1dfb      	adds	r3, r7, #7
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b0a      	cmp	r3, #10
 800187c:	d003      	beq.n	8001886 <uart_byte_available+0x3a>
 800187e:	1dfb      	adds	r3, r7, #7
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b0d      	cmp	r3, #13
 8001884:	d10c      	bne.n	80018a0 <uart_byte_available+0x54>
        data[cnt - 1] = '\0';
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <uart_byte_available+0x5c>)
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	3b01      	subs	r3, #1
 800188c:	4a07      	ldr	r2, [pc, #28]	; (80018ac <uart_byte_available+0x60>)
 800188e:	2100      	movs	r1, #0
 8001890:	54d1      	strb	r1, [r2, r3]
        uart_process_command(data);
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <uart_byte_available+0x60>)
 8001894:	0018      	movs	r0, r3
 8001896:	f7ff fdc3 	bl	8001420 <uart_process_command>
        cnt = 0;
 800189a:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <uart_byte_available+0x5c>)
 800189c:	2200      	movs	r2, #0
 800189e:	801a      	strh	r2, [r3, #0]
    }
}
 80018a0:	46c0      	nop			; (mov r8, r8)
 80018a2:	46bd      	mov	sp, r7
 80018a4:	b002      	add	sp, #8
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000284 	.word	0x20000284
 80018ac:	20000288 	.word	0x20000288

080018b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018b0:	b5b0      	push	{r4, r5, r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
HAL_Init();
 80018b6:	f000 fc2f 	bl	8002118 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018ba:	f000 f89d 	bl	80019f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018be:	f000 f985 	bl	8001bcc <MX_GPIO_Init>
  MX_DMA_Init();
 80018c2:	f000 f95d 	bl	8001b80 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80018c6:	f000 f92b 	bl	8001b20 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80018ca:	f000 f8f7 	bl	8001abc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_DeInit(&huart1);
 80018ce:	4b3f      	ldr	r3, [pc, #252]	; (80019cc <main+0x11c>)
 80018d0:	0018      	movs	r0, r3
 80018d2:	f001 ff95 	bl	8003800 <HAL_UART_DeInit>
  HAL_UART_Receive_DMA(&huart2, uart_rx_buf, RX_BUFFER_LEN);
 80018d6:	493e      	ldr	r1, [pc, #248]	; (80019d0 <main+0x120>)
 80018d8:	4b3e      	ldr	r3, [pc, #248]	; (80019d4 <main+0x124>)
 80018da:	2240      	movs	r2, #64	; 0x40
 80018dc:	0018      	movs	r0, r3
 80018de:	f002 f86d 	bl	80039bc <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
#if 1
	  while (uart_rx_read_ptr != uart_rx_write_ptr) {
 80018e2:	e01b      	b.n	800191c <main+0x6c>
	      uint8_t b = uart_rx_buf[uart_rx_read_ptr];
 80018e4:	4b3c      	ldr	r3, [pc, #240]	; (80019d8 <main+0x128>)
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	0019      	movs	r1, r3
 80018ec:	2315      	movs	r3, #21
 80018ee:	18fb      	adds	r3, r7, r3
 80018f0:	4a37      	ldr	r2, [pc, #220]	; (80019d0 <main+0x120>)
 80018f2:	5c52      	ldrb	r2, [r2, r1]
 80018f4:	701a      	strb	r2, [r3, #0]
	      if (++uart_rx_read_ptr >= RX_BUFFER_LEN) uart_rx_read_ptr = 0; // increase read pointer
 80018f6:	4b38      	ldr	r3, [pc, #224]	; (80019d8 <main+0x128>)
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	3301      	adds	r3, #1
 80018fe:	b29b      	uxth	r3, r3
 8001900:	4a35      	ldr	r2, [pc, #212]	; (80019d8 <main+0x128>)
 8001902:	1c19      	adds	r1, r3, #0
 8001904:	8011      	strh	r1, [r2, #0]
 8001906:	2b3f      	cmp	r3, #63	; 0x3f
 8001908:	d902      	bls.n	8001910 <main+0x60>
 800190a:	4b33      	ldr	r3, [pc, #204]	; (80019d8 <main+0x128>)
 800190c:	2200      	movs	r2, #0
 800190e:	801a      	strh	r2, [r3, #0]

	      uart_byte_available(b); // process every received byte with the RX state machine
 8001910:	2315      	movs	r3, #21
 8001912:	18fb      	adds	r3, r7, r3
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	0018      	movs	r0, r3
 8001918:	f7ff ff98 	bl	800184c <uart_byte_available>
	  while (uart_rx_read_ptr != uart_rx_write_ptr) {
 800191c:	4b2e      	ldr	r3, [pc, #184]	; (80019d8 <main+0x128>)
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	b29b      	uxth	r3, r3
 8001922:	0019      	movs	r1, r3
 8001924:	4b2d      	ldr	r3, [pc, #180]	; (80019dc <main+0x12c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2240      	movs	r2, #64	; 0x40
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	4299      	cmp	r1, r3
 8001930:	d1d8      	bne.n	80018e4 <main+0x34>
	  }

	  if (nfc_ready && nfc_rx_read_ptr != nfc_rx_write_ptr) {
 8001932:	4b2b      	ldr	r3, [pc, #172]	; (80019e0 <main+0x130>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0f0      	beq.n	800191c <main+0x6c>
 800193a:	4b2a      	ldr	r3, [pc, #168]	; (80019e4 <main+0x134>)
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	b29b      	uxth	r3, r3
 8001940:	0019      	movs	r1, r3
 8001942:	4b29      	ldr	r3, [pc, #164]	; (80019e8 <main+0x138>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	2240      	movs	r2, #64	; 0x40
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	4299      	cmp	r1, r3
 800194e:	d0e5      	beq.n	800191c <main+0x6c>
		  uint8_t data[16];
		  uint8_t len;
		  uint8_t resp = cr95read(data, &len);
 8001950:	2516      	movs	r5, #22
 8001952:	197c      	adds	r4, r7, r5
 8001954:	1cfa      	adds	r2, r7, #3
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	0011      	movs	r1, r2
 800195a:	0018      	movs	r0, r3
 800195c:	f7fe fc9a 	bl	8000294 <cr95read>
 8001960:	0003      	movs	r3, r0
 8001962:	7023      	strb	r3, [r4, #0]

		  if (resp != 0xFF) {
 8001964:	197b      	adds	r3, r7, r5
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2bff      	cmp	r3, #255	; 0xff
 800196a:	d029      	beq.n	80019c0 <main+0x110>
			  printf("Async response, code = 0x%02x, len = %d, data =", resp, len);
 800196c:	2316      	movs	r3, #22
 800196e:	18fb      	adds	r3, r7, r3
 8001970:	7819      	ldrb	r1, [r3, #0]
 8001972:	1cfb      	adds	r3, r7, #3
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	001a      	movs	r2, r3
 8001978:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <main+0x13c>)
 800197a:	0018      	movs	r0, r3
 800197c:	f002 fd0e 	bl	800439c <iprintf>
			  for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8001980:	2317      	movs	r3, #23
 8001982:	18fb      	adds	r3, r7, r3
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
 8001988:	e00f      	b.n	80019aa <main+0xfa>
 800198a:	2417      	movs	r4, #23
 800198c:	193b      	adds	r3, r7, r4
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	1d3a      	adds	r2, r7, #4
 8001992:	5cd3      	ldrb	r3, [r2, r3]
 8001994:	001a      	movs	r2, r3
 8001996:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <main+0x140>)
 8001998:	0011      	movs	r1, r2
 800199a:	0018      	movs	r0, r3
 800199c:	f002 fcfe 	bl	800439c <iprintf>
 80019a0:	193b      	adds	r3, r7, r4
 80019a2:	781a      	ldrb	r2, [r3, #0]
 80019a4:	193b      	adds	r3, r7, r4
 80019a6:	3201      	adds	r2, #1
 80019a8:	701a      	strb	r2, [r3, #0]
 80019aa:	1cfb      	adds	r3, r7, #3
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2217      	movs	r2, #23
 80019b0:	18ba      	adds	r2, r7, r2
 80019b2:	7812      	ldrb	r2, [r2, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d3e8      	bcc.n	800198a <main+0xda>
			  printf("\n");
 80019b8:	200a      	movs	r0, #10
 80019ba:	f002 fd09 	bl	80043d0 <putchar>
 80019be:	e7ad      	b.n	800191c <main+0x6c>
		  } else {
			  printf("Async reponse, invalid (timeout)\n");
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <main+0x144>)
 80019c2:	0018      	movs	r0, r3
 80019c4:	f002 fd78 	bl	80044b8 <puts>
	  while (uart_rx_read_ptr != uart_rx_write_ptr) {
 80019c8:	e7a8      	b.n	800191c <main+0x6c>
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	2000035c 	.word	0x2000035c
 80019d0:	200001fc 	.word	0x200001fc
 80019d4:	200003dc 	.word	0x200003dc
 80019d8:	2000023c 	.word	0x2000023c
 80019dc:	200002d4 	.word	0x200002d4
 80019e0:	20000283 	.word	0x20000283
 80019e4:	20000280 	.word	0x20000280
 80019e8:	20000318 	.word	0x20000318
 80019ec:	08005d24 	.word	0x08005d24
 80019f0:	080058f0 	.word	0x080058f0
 80019f4:	08005d54 	.word	0x08005d54

080019f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b095      	sub	sp, #84	; 0x54
 80019fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019fe:	2420      	movs	r4, #32
 8001a00:	193b      	adds	r3, r7, r4
 8001a02:	0018      	movs	r0, r3
 8001a04:	2330      	movs	r3, #48	; 0x30
 8001a06:	001a      	movs	r2, r3
 8001a08:	2100      	movs	r1, #0
 8001a0a:	f002 fcbf 	bl	800438c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a0e:	2310      	movs	r3, #16
 8001a10:	18fb      	adds	r3, r7, r3
 8001a12:	0018      	movs	r0, r3
 8001a14:	2310      	movs	r3, #16
 8001a16:	001a      	movs	r2, r3
 8001a18:	2100      	movs	r1, #0
 8001a1a:	f002 fcb7 	bl	800438c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a1e:	003b      	movs	r3, r7
 8001a20:	0018      	movs	r0, r3
 8001a22:	2310      	movs	r3, #16
 8001a24:	001a      	movs	r2, r3
 8001a26:	2100      	movs	r1, #0
 8001a28:	f002 fcb0 	bl	800438c <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a2c:	0021      	movs	r1, r4
 8001a2e:	187b      	adds	r3, r7, r1
 8001a30:	2202      	movs	r2, #2
 8001a32:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a34:	187b      	adds	r3, r7, r1
 8001a36:	2201      	movs	r2, #1
 8001a38:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a3a:	187b      	adds	r3, r7, r1
 8001a3c:	2210      	movs	r2, #16
 8001a3e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a40:	187b      	adds	r3, r7, r1
 8001a42:	2202      	movs	r2, #2
 8001a44:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a46:	187b      	adds	r3, r7, r1
 8001a48:	2200      	movs	r2, #0
 8001a4a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001a4c:	187b      	adds	r3, r7, r1
 8001a4e:	22a0      	movs	r2, #160	; 0xa0
 8001a50:	0392      	lsls	r2, r2, #14
 8001a52:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001a54:	187b      	adds	r3, r7, r1
 8001a56:	2200      	movs	r2, #0
 8001a58:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a5a:	187b      	adds	r3, r7, r1
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f001 f93f 	bl	8002ce0 <HAL_RCC_OscConfig>
 8001a62:	1e03      	subs	r3, r0, #0
 8001a64:	d001      	beq.n	8001a6a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001a66:	f000 f937 	bl	8001cd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a6a:	2110      	movs	r1, #16
 8001a6c:	187b      	adds	r3, r7, r1
 8001a6e:	2207      	movs	r2, #7
 8001a70:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a72:	187b      	adds	r3, r7, r1
 8001a74:	2202      	movs	r2, #2
 8001a76:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a78:	187b      	adds	r3, r7, r1
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a7e:	187b      	adds	r3, r7, r1
 8001a80:	2200      	movs	r2, #0
 8001a82:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a84:	187b      	adds	r3, r7, r1
 8001a86:	2101      	movs	r1, #1
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f001 fc45 	bl	8003318 <HAL_RCC_ClockConfig>
 8001a8e:	1e03      	subs	r3, r0, #0
 8001a90:	d001      	beq.n	8001a96 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001a92:	f000 f921 	bl	8001cd8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a96:	003b      	movs	r3, r7
 8001a98:	2201      	movs	r2, #1
 8001a9a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001a9c:	003b      	movs	r3, r7
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aa2:	003b      	movs	r3, r7
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f001 fd89 	bl	80035bc <HAL_RCCEx_PeriphCLKConfig>
 8001aaa:	1e03      	subs	r3, r0, #0
 8001aac:	d001      	beq.n	8001ab2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001aae:	f000 f913 	bl	8001cd8 <Error_Handler>
  }
}
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	b015      	add	sp, #84	; 0x54
 8001ab8:	bd90      	pop	{r4, r7, pc}
	...

08001abc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ac0:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <MX_USART1_UART_Init+0x5c>)
 8001ac2:	4a16      	ldr	r2, [pc, #88]	; (8001b1c <MX_USART1_UART_Init+0x60>)
 8001ac4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001ac6:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <MX_USART1_UART_Init+0x5c>)
 8001ac8:	22e1      	movs	r2, #225	; 0xe1
 8001aca:	0212      	lsls	r2, r2, #8
 8001acc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ace:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <MX_USART1_UART_Init+0x5c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8001ad4:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <MX_USART1_UART_Init+0x5c>)
 8001ad6:	2280      	movs	r2, #128	; 0x80
 8001ad8:	0192      	lsls	r2, r2, #6
 8001ada:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001adc:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <MX_USART1_UART_Init+0x5c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ae2:	4b0d      	ldr	r3, [pc, #52]	; (8001b18 <MX_USART1_UART_Init+0x5c>)
 8001ae4:	220c      	movs	r2, #12
 8001ae6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <MX_USART1_UART_Init+0x5c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aee:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <MX_USART1_UART_Init+0x5c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001af4:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <MX_USART1_UART_Init+0x5c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001afa:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <MX_USART1_UART_Init+0x5c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <MX_USART1_UART_Init+0x5c>)
 8001b02:	0018      	movs	r0, r3
 8001b04:	f001 fe28 	bl	8003758 <HAL_UART_Init>
 8001b08:	1e03      	subs	r3, r0, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8001b0c:	f000 f8e4 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b10:	46c0      	nop			; (mov r8, r8)
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	2000035c 	.word	0x2000035c
 8001b1c:	40013800 	.word	0x40013800

08001b20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b24:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <MX_USART2_UART_Init+0x58>)
 8001b26:	4a15      	ldr	r2, [pc, #84]	; (8001b7c <MX_USART2_UART_Init+0x5c>)
 8001b28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001b2a:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <MX_USART2_UART_Init+0x58>)
 8001b2c:	2296      	movs	r2, #150	; 0x96
 8001b2e:	0212      	lsls	r2, r2, #8
 8001b30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b32:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <MX_USART2_UART_Init+0x58>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <MX_USART2_UART_Init+0x58>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <MX_USART2_UART_Init+0x58>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <MX_USART2_UART_Init+0x58>)
 8001b46:	220c      	movs	r2, #12
 8001b48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <MX_USART2_UART_Init+0x58>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <MX_USART2_UART_Init+0x58>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b56:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <MX_USART2_UART_Init+0x58>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <MX_USART2_UART_Init+0x58>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b62:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <MX_USART2_UART_Init+0x58>)
 8001b64:	0018      	movs	r0, r3
 8001b66:	f001 fdf7 	bl	8003758 <HAL_UART_Init>
 8001b6a:	1e03      	subs	r3, r0, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b6e:	f000 f8b3 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	200003dc 	.word	0x200003dc
 8001b7c:	40004400 	.word	0x40004400

08001b80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b86:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <MX_DMA_Init+0x48>)
 8001b88:	695a      	ldr	r2, [r3, #20]
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <MX_DMA_Init+0x48>)
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	615a      	str	r2, [r3, #20]
 8001b92:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <MX_DMA_Init+0x48>)
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	2201      	movs	r2, #1
 8001b98:	4013      	ands	r3, r2
 8001b9a:	607b      	str	r3, [r7, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	200a      	movs	r0, #10
 8001ba4:	f000 fbea 	bl	800237c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001ba8:	200a      	movs	r0, #10
 8001baa:	f000 fbfc 	bl	80023a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	200b      	movs	r0, #11
 8001bb4:	f000 fbe2 	bl	800237c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8001bb8:	200b      	movs	r0, #11
 8001bba:	f000 fbf4 	bl	80023a6 <HAL_NVIC_EnableIRQ>

}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	b002      	add	sp, #8
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	40021000 	.word	0x40021000

08001bcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bcc:	b590      	push	{r4, r7, lr}
 8001bce:	b089      	sub	sp, #36	; 0x24
 8001bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd2:	240c      	movs	r4, #12
 8001bd4:	193b      	adds	r3, r7, r4
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	2314      	movs	r3, #20
 8001bda:	001a      	movs	r2, r3
 8001bdc:	2100      	movs	r1, #0
 8001bde:	f002 fbd5 	bl	800438c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be2:	4b3a      	ldr	r3, [pc, #232]	; (8001ccc <MX_GPIO_Init+0x100>)
 8001be4:	695a      	ldr	r2, [r3, #20]
 8001be6:	4b39      	ldr	r3, [pc, #228]	; (8001ccc <MX_GPIO_Init+0x100>)
 8001be8:	2180      	movs	r1, #128	; 0x80
 8001bea:	0309      	lsls	r1, r1, #12
 8001bec:	430a      	orrs	r2, r1
 8001bee:	615a      	str	r2, [r3, #20]
 8001bf0:	4b36      	ldr	r3, [pc, #216]	; (8001ccc <MX_GPIO_Init+0x100>)
 8001bf2:	695a      	ldr	r2, [r3, #20]
 8001bf4:	2380      	movs	r3, #128	; 0x80
 8001bf6:	031b      	lsls	r3, r3, #12
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bfe:	4b33      	ldr	r3, [pc, #204]	; (8001ccc <MX_GPIO_Init+0x100>)
 8001c00:	695a      	ldr	r2, [r3, #20]
 8001c02:	4b32      	ldr	r3, [pc, #200]	; (8001ccc <MX_GPIO_Init+0x100>)
 8001c04:	2180      	movs	r1, #128	; 0x80
 8001c06:	03c9      	lsls	r1, r1, #15
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	615a      	str	r2, [r3, #20]
 8001c0c:	4b2f      	ldr	r3, [pc, #188]	; (8001ccc <MX_GPIO_Init+0x100>)
 8001c0e:	695a      	ldr	r2, [r3, #20]
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	03db      	lsls	r3, r3, #15
 8001c14:	4013      	ands	r3, r2
 8001c16:	607b      	str	r3, [r7, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1a:	4b2c      	ldr	r3, [pc, #176]	; (8001ccc <MX_GPIO_Init+0x100>)
 8001c1c:	695a      	ldr	r2, [r3, #20]
 8001c1e:	4b2b      	ldr	r3, [pc, #172]	; (8001ccc <MX_GPIO_Init+0x100>)
 8001c20:	2180      	movs	r1, #128	; 0x80
 8001c22:	0289      	lsls	r1, r1, #10
 8001c24:	430a      	orrs	r2, r1
 8001c26:	615a      	str	r2, [r3, #20]
 8001c28:	4b28      	ldr	r3, [pc, #160]	; (8001ccc <MX_GPIO_Init+0x100>)
 8001c2a:	695a      	ldr	r2, [r3, #20]
 8001c2c:	2380      	movs	r3, #128	; 0x80
 8001c2e:	029b      	lsls	r3, r3, #10
 8001c30:	4013      	ands	r3, r2
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8001c36:	2390      	movs	r3, #144	; 0x90
 8001c38:	0059      	lsls	r1, r3, #1
 8001c3a:	2390      	movs	r3, #144	; 0x90
 8001c3c:	05db      	lsls	r3, r3, #23
 8001c3e:	2200      	movs	r2, #0
 8001c40:	0018      	movs	r0, r3
 8001c42:	f001 f82f 	bl	8002ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001c46:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <MX_GPIO_Init+0x104>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2180      	movs	r1, #128	; 0x80
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f001 f829 	bl	8002ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c52:	193b      	adds	r3, r7, r4
 8001c54:	2280      	movs	r2, #128	; 0x80
 8001c56:	0192      	lsls	r2, r2, #6
 8001c58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c5a:	193b      	adds	r3, r7, r4
 8001c5c:	4a1d      	ldr	r2, [pc, #116]	; (8001cd4 <MX_GPIO_Init+0x108>)
 8001c5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	193b      	adds	r3, r7, r4
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c66:	193b      	adds	r3, r7, r4
 8001c68:	4a19      	ldr	r2, [pc, #100]	; (8001cd0 <MX_GPIO_Init+0x104>)
 8001c6a:	0019      	movs	r1, r3
 8001c6c:	0010      	movs	r0, r2
 8001c6e:	f000 fddb 	bl	8002828 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8001c72:	0021      	movs	r1, r4
 8001c74:	187b      	adds	r3, r7, r1
 8001c76:	2290      	movs	r2, #144	; 0x90
 8001c78:	0052      	lsls	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7c:	187b      	adds	r3, r7, r1
 8001c7e:	2201      	movs	r2, #1
 8001c80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	187b      	adds	r3, r7, r1
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c88:	187b      	adds	r3, r7, r1
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8e:	000c      	movs	r4, r1
 8001c90:	187a      	adds	r2, r7, r1
 8001c92:	2390      	movs	r3, #144	; 0x90
 8001c94:	05db      	lsls	r3, r3, #23
 8001c96:	0011      	movs	r1, r2
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f000 fdc5 	bl	8002828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c9e:	0021      	movs	r1, r4
 8001ca0:	187b      	adds	r3, r7, r1
 8001ca2:	2280      	movs	r2, #128	; 0x80
 8001ca4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca6:	187b      	adds	r3, r7, r1
 8001ca8:	2201      	movs	r2, #1
 8001caa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	187b      	adds	r3, r7, r1
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb2:	187b      	adds	r3, r7, r1
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb8:	187b      	adds	r3, r7, r1
 8001cba:	4a05      	ldr	r2, [pc, #20]	; (8001cd0 <MX_GPIO_Init+0x104>)
 8001cbc:	0019      	movs	r1, r3
 8001cbe:	0010      	movs	r0, r2
 8001cc0:	f000 fdb2 	bl	8002828 <HAL_GPIO_Init>

}
 8001cc4:	46c0      	nop			; (mov r8, r8)
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	b009      	add	sp, #36	; 0x24
 8001cca:	bd90      	pop	{r4, r7, pc}
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	48000800 	.word	0x48000800
 8001cd4:	10210000 	.word	0x10210000

08001cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001cdc:	46c0      	nop			; (mov r8, r8)
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cea:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <HAL_MspInit+0x44>)
 8001cec:	699a      	ldr	r2, [r3, #24]
 8001cee:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <HAL_MspInit+0x44>)
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	619a      	str	r2, [r3, #24]
 8001cf6:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <HAL_MspInit+0x44>)
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	607b      	str	r3, [r7, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d02:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <HAL_MspInit+0x44>)
 8001d04:	69da      	ldr	r2, [r3, #28]
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <HAL_MspInit+0x44>)
 8001d08:	2180      	movs	r1, #128	; 0x80
 8001d0a:	0549      	lsls	r1, r1, #21
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	61da      	str	r2, [r3, #28]
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <HAL_MspInit+0x44>)
 8001d12:	69da      	ldr	r2, [r3, #28]
 8001d14:	2380      	movs	r3, #128	; 0x80
 8001d16:	055b      	lsls	r3, r3, #21
 8001d18:	4013      	ands	r3, r2
 8001d1a:	603b      	str	r3, [r7, #0]
 8001d1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	46bd      	mov	sp, r7
 8001d22:	b002      	add	sp, #8
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	40021000 	.word	0x40021000

08001d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08c      	sub	sp, #48	; 0x30
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	231c      	movs	r3, #28
 8001d36:	18fb      	adds	r3, r7, r3
 8001d38:	0018      	movs	r0, r3
 8001d3a:	2314      	movs	r3, #20
 8001d3c:	001a      	movs	r2, r3
 8001d3e:	2100      	movs	r1, #0
 8001d40:	f002 fb24 	bl	800438c <memset>
  if(huart->Instance==USART1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a5f      	ldr	r2, [pc, #380]	; (8001ec8 <HAL_UART_MspInit+0x19c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d15a      	bne.n	8001e04 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d4e:	4b5f      	ldr	r3, [pc, #380]	; (8001ecc <HAL_UART_MspInit+0x1a0>)
 8001d50:	699a      	ldr	r2, [r3, #24]
 8001d52:	4b5e      	ldr	r3, [pc, #376]	; (8001ecc <HAL_UART_MspInit+0x1a0>)
 8001d54:	2180      	movs	r1, #128	; 0x80
 8001d56:	01c9      	lsls	r1, r1, #7
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	619a      	str	r2, [r3, #24]
 8001d5c:	4b5b      	ldr	r3, [pc, #364]	; (8001ecc <HAL_UART_MspInit+0x1a0>)
 8001d5e:	699a      	ldr	r2, [r3, #24]
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	01db      	lsls	r3, r3, #7
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
 8001d68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	4b58      	ldr	r3, [pc, #352]	; (8001ecc <HAL_UART_MspInit+0x1a0>)
 8001d6c:	695a      	ldr	r2, [r3, #20]
 8001d6e:	4b57      	ldr	r3, [pc, #348]	; (8001ecc <HAL_UART_MspInit+0x1a0>)
 8001d70:	2180      	movs	r1, #128	; 0x80
 8001d72:	0289      	lsls	r1, r1, #10
 8001d74:	430a      	orrs	r2, r1
 8001d76:	615a      	str	r2, [r3, #20]
 8001d78:	4b54      	ldr	r3, [pc, #336]	; (8001ecc <HAL_UART_MspInit+0x1a0>)
 8001d7a:	695a      	ldr	r2, [r3, #20]
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	029b      	lsls	r3, r3, #10
 8001d80:	4013      	ands	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d86:	211c      	movs	r1, #28
 8001d88:	187b      	adds	r3, r7, r1
 8001d8a:	22c0      	movs	r2, #192	; 0xc0
 8001d8c:	00d2      	lsls	r2, r2, #3
 8001d8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	187b      	adds	r3, r7, r1
 8001d92:	2202      	movs	r2, #2
 8001d94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	187b      	adds	r3, r7, r1
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d9c:	187b      	adds	r3, r7, r1
 8001d9e:	2203      	movs	r2, #3
 8001da0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001da2:	187b      	adds	r3, r7, r1
 8001da4:	2201      	movs	r2, #1
 8001da6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da8:	187a      	adds	r2, r7, r1
 8001daa:	2390      	movs	r3, #144	; 0x90
 8001dac:	05db      	lsls	r3, r3, #23
 8001dae:	0011      	movs	r1, r2
 8001db0:	0018      	movs	r0, r3
 8001db2:	f000 fd39 	bl	8002828 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8001db6:	4b46      	ldr	r3, [pc, #280]	; (8001ed0 <HAL_UART_MspInit+0x1a4>)
 8001db8:	4a46      	ldr	r2, [pc, #280]	; (8001ed4 <HAL_UART_MspInit+0x1a8>)
 8001dba:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dbc:	4b44      	ldr	r3, [pc, #272]	; (8001ed0 <HAL_UART_MspInit+0x1a4>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dc2:	4b43      	ldr	r3, [pc, #268]	; (8001ed0 <HAL_UART_MspInit+0x1a4>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001dc8:	4b41      	ldr	r3, [pc, #260]	; (8001ed0 <HAL_UART_MspInit+0x1a4>)
 8001dca:	2280      	movs	r2, #128	; 0x80
 8001dcc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dce:	4b40      	ldr	r3, [pc, #256]	; (8001ed0 <HAL_UART_MspInit+0x1a4>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dd4:	4b3e      	ldr	r3, [pc, #248]	; (8001ed0 <HAL_UART_MspInit+0x1a4>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001dda:	4b3d      	ldr	r3, [pc, #244]	; (8001ed0 <HAL_UART_MspInit+0x1a4>)
 8001ddc:	2220      	movs	r2, #32
 8001dde:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001de0:	4b3b      	ldr	r3, [pc, #236]	; (8001ed0 <HAL_UART_MspInit+0x1a4>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001de6:	4b3a      	ldr	r3, [pc, #232]	; (8001ed0 <HAL_UART_MspInit+0x1a4>)
 8001de8:	0018      	movs	r0, r3
 8001dea:	f000 faf9 	bl	80023e0 <HAL_DMA_Init>
 8001dee:	1e03      	subs	r3, r0, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001df2:	f7ff ff71 	bl	8001cd8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a35      	ldr	r2, [pc, #212]	; (8001ed0 <HAL_UART_MspInit+0x1a4>)
 8001dfa:	66da      	str	r2, [r3, #108]	; 0x6c
 8001dfc:	4b34      	ldr	r3, [pc, #208]	; (8001ed0 <HAL_UART_MspInit+0x1a4>)
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e02:	e05d      	b.n	8001ec0 <HAL_UART_MspInit+0x194>
  else if(huart->Instance==USART2)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a33      	ldr	r2, [pc, #204]	; (8001ed8 <HAL_UART_MspInit+0x1ac>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d158      	bne.n	8001ec0 <HAL_UART_MspInit+0x194>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e0e:	4b2f      	ldr	r3, [pc, #188]	; (8001ecc <HAL_UART_MspInit+0x1a0>)
 8001e10:	69da      	ldr	r2, [r3, #28]
 8001e12:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <HAL_UART_MspInit+0x1a0>)
 8001e14:	2180      	movs	r1, #128	; 0x80
 8001e16:	0289      	lsls	r1, r1, #10
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	61da      	str	r2, [r3, #28]
 8001e1c:	4b2b      	ldr	r3, [pc, #172]	; (8001ecc <HAL_UART_MspInit+0x1a0>)
 8001e1e:	69da      	ldr	r2, [r3, #28]
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	029b      	lsls	r3, r3, #10
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2a:	4b28      	ldr	r3, [pc, #160]	; (8001ecc <HAL_UART_MspInit+0x1a0>)
 8001e2c:	695a      	ldr	r2, [r3, #20]
 8001e2e:	4b27      	ldr	r3, [pc, #156]	; (8001ecc <HAL_UART_MspInit+0x1a0>)
 8001e30:	2180      	movs	r1, #128	; 0x80
 8001e32:	0289      	lsls	r1, r1, #10
 8001e34:	430a      	orrs	r2, r1
 8001e36:	615a      	str	r2, [r3, #20]
 8001e38:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <HAL_UART_MspInit+0x1a0>)
 8001e3a:	695a      	ldr	r2, [r3, #20]
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	029b      	lsls	r3, r3, #10
 8001e40:	4013      	ands	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e46:	211c      	movs	r1, #28
 8001e48:	187b      	adds	r3, r7, r1
 8001e4a:	220c      	movs	r2, #12
 8001e4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4e:	187b      	adds	r3, r7, r1
 8001e50:	2202      	movs	r2, #2
 8001e52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	187b      	adds	r3, r7, r1
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5a:	187b      	adds	r3, r7, r1
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001e60:	187b      	adds	r3, r7, r1
 8001e62:	2201      	movs	r2, #1
 8001e64:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e66:	187a      	adds	r2, r7, r1
 8001e68:	2390      	movs	r3, #144	; 0x90
 8001e6a:	05db      	lsls	r3, r3, #23
 8001e6c:	0011      	movs	r1, r2
 8001e6e:	0018      	movs	r0, r3
 8001e70:	f000 fcda 	bl	8002828 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8001e74:	4b19      	ldr	r3, [pc, #100]	; (8001edc <HAL_UART_MspInit+0x1b0>)
 8001e76:	4a1a      	ldr	r2, [pc, #104]	; (8001ee0 <HAL_UART_MspInit+0x1b4>)
 8001e78:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e7a:	4b18      	ldr	r3, [pc, #96]	; (8001edc <HAL_UART_MspInit+0x1b0>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e80:	4b16      	ldr	r3, [pc, #88]	; (8001edc <HAL_UART_MspInit+0x1b0>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e86:	4b15      	ldr	r3, [pc, #84]	; (8001edc <HAL_UART_MspInit+0x1b0>)
 8001e88:	2280      	movs	r2, #128	; 0x80
 8001e8a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e8c:	4b13      	ldr	r3, [pc, #76]	; (8001edc <HAL_UART_MspInit+0x1b0>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e92:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_UART_MspInit+0x1b0>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001e98:	4b10      	ldr	r3, [pc, #64]	; (8001edc <HAL_UART_MspInit+0x1b0>)
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <HAL_UART_MspInit+0x1b0>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001ea4:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <HAL_UART_MspInit+0x1b0>)
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f000 fa9a 	bl	80023e0 <HAL_DMA_Init>
 8001eac:	1e03      	subs	r3, r0, #0
 8001eae:	d001      	beq.n	8001eb4 <HAL_UART_MspInit+0x188>
      Error_Handler();
 8001eb0:	f7ff ff12 	bl	8001cd8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a09      	ldr	r2, [pc, #36]	; (8001edc <HAL_UART_MspInit+0x1b0>)
 8001eb8:	66da      	str	r2, [r3, #108]	; 0x6c
 8001eba:	4b08      	ldr	r3, [pc, #32]	; (8001edc <HAL_UART_MspInit+0x1b0>)
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001ec0:	46c0      	nop			; (mov r8, r8)
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b00c      	add	sp, #48	; 0x30
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40013800 	.word	0x40013800
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	20000318 	.word	0x20000318
 8001ed4:	40020030 	.word	0x40020030
 8001ed8:	40004400 	.word	0x40004400
 8001edc:	200002d4 	.word	0x200002d4
 8001ee0:	40020058 	.word	0x40020058

08001ee4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a18      	ldr	r2, [pc, #96]	; (8001f54 <HAL_UART_MspDeInit+0x70>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d113      	bne.n	8001f1e <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001ef6:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <HAL_UART_MspDeInit+0x74>)
 8001ef8:	699a      	ldr	r2, [r3, #24]
 8001efa:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <HAL_UART_MspDeInit+0x74>)
 8001efc:	4917      	ldr	r1, [pc, #92]	; (8001f5c <HAL_UART_MspDeInit+0x78>)
 8001efe:	400a      	ands	r2, r1
 8001f00:	619a      	str	r2, [r3, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8001f02:	23c0      	movs	r3, #192	; 0xc0
 8001f04:	00da      	lsls	r2, r3, #3
 8001f06:	2390      	movs	r3, #144	; 0x90
 8001f08:	05db      	lsls	r3, r3, #23
 8001f0a:	0011      	movs	r1, r2
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f000 fdfb 	bl	8002b08 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f16:	0018      	movs	r0, r3
 8001f18:	f000 faaa 	bl	8002470 <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8001f1c:	e015      	b.n	8001f4a <HAL_UART_MspDeInit+0x66>
  else if(huart->Instance==USART2)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a0f      	ldr	r2, [pc, #60]	; (8001f60 <HAL_UART_MspDeInit+0x7c>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d110      	bne.n	8001f4a <HAL_UART_MspDeInit+0x66>
    __HAL_RCC_USART2_CLK_DISABLE();
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <HAL_UART_MspDeInit+0x74>)
 8001f2a:	69da      	ldr	r2, [r3, #28]
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <HAL_UART_MspDeInit+0x74>)
 8001f2e:	490d      	ldr	r1, [pc, #52]	; (8001f64 <HAL_UART_MspDeInit+0x80>)
 8001f30:	400a      	ands	r2, r1
 8001f32:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 8001f34:	2390      	movs	r3, #144	; 0x90
 8001f36:	05db      	lsls	r3, r3, #23
 8001f38:	210c      	movs	r1, #12
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	f000 fde4 	bl	8002b08 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f44:	0018      	movs	r0, r3
 8001f46:	f000 fa93 	bl	8002470 <HAL_DMA_DeInit>
}
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	b002      	add	sp, #8
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	40013800 	.word	0x40013800
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	ffffbfff 	.word	0xffffbfff
 8001f60:	40004400 	.word	0x40004400
 8001f64:	fffdffff 	.word	0xfffdffff

08001f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f6c:	46c0      	nop			; (mov r8, r8)
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f76:	e7fe      	b.n	8001f76 <HardFault_Handler+0x4>

08001f78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f7c:	46c0      	nop			; (mov r8, r8)
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f90:	f000 f90a 	bl	80021a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f94:	46c0      	nop			; (mov r8, r8)
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001fa0:	4b03      	ldr	r3, [pc, #12]	; (8001fb0 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	f000 fb4b 	bl	800263e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001fa8:	46c0      	nop			; (mov r8, r8)
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	20000318 	.word	0x20000318

08001fb4 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001fb8:	4b03      	ldr	r3, [pc, #12]	; (8001fc8 <DMA1_Channel4_5_IRQHandler+0x14>)
 8001fba:	0018      	movs	r0, r3
 8001fbc:	f000 fb3f 	bl	800263e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8001fc0:	46c0      	nop			; (mov r8, r8)
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	200002d4 	.word	0x200002d4

08001fcc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	e00a      	b.n	8001ff4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fde:	e000      	b.n	8001fe2 <_read+0x16>
 8001fe0:	bf00      	nop
 8001fe2:	0001      	movs	r1, r0
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	1c5a      	adds	r2, r3, #1
 8001fe8:	60ba      	str	r2, [r7, #8]
 8001fea:	b2ca      	uxtb	r2, r1
 8001fec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	dbf0      	blt.n	8001fde <_read+0x12>
	}

return len;
 8001ffc:	687b      	ldr	r3, [r7, #4]
}
 8001ffe:	0018      	movs	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	b006      	add	sp, #24
 8002004:	bd80      	pop	{r7, pc}

08002006 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
	return -1;
 800200e:	2301      	movs	r3, #1
 8002010:	425b      	negs	r3, r3
}
 8002012:	0018      	movs	r0, r3
 8002014:	46bd      	mov	sp, r7
 8002016:	b002      	add	sp, #8
 8002018:	bd80      	pop	{r7, pc}

0800201a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	2280      	movs	r2, #128	; 0x80
 8002028:	0192      	lsls	r2, r2, #6
 800202a:	605a      	str	r2, [r3, #4]
	return 0;
 800202c:	2300      	movs	r3, #0
}
 800202e:	0018      	movs	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	b002      	add	sp, #8
 8002034:	bd80      	pop	{r7, pc}

08002036 <_isatty>:

int _isatty(int file)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
	return 1;
 800203e:	2301      	movs	r3, #1
}
 8002040:	0018      	movs	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	b002      	add	sp, #8
 8002046:	bd80      	pop	{r7, pc}

08002048 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
	return 0;
 8002054:	2300      	movs	r3, #0
}
 8002056:	0018      	movs	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	b004      	add	sp, #16
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002068:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <_sbrk+0x50>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d102      	bne.n	8002076 <_sbrk+0x16>
		heap_end = &end;
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <_sbrk+0x50>)
 8002072:	4a10      	ldr	r2, [pc, #64]	; (80020b4 <_sbrk+0x54>)
 8002074:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002076:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <_sbrk+0x50>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800207c:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <_sbrk+0x50>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	18d3      	adds	r3, r2, r3
 8002084:	466a      	mov	r2, sp
 8002086:	4293      	cmp	r3, r2
 8002088:	d907      	bls.n	800209a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800208a:	f002 f955 	bl	8004338 <__errno>
 800208e:	0003      	movs	r3, r0
 8002090:	220c      	movs	r2, #12
 8002092:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002094:	2301      	movs	r3, #1
 8002096:	425b      	negs	r3, r3
 8002098:	e006      	b.n	80020a8 <_sbrk+0x48>
	}

	heap_end += incr;
 800209a:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <_sbrk+0x50>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	18d2      	adds	r2, r2, r3
 80020a2:	4b03      	ldr	r3, [pc, #12]	; (80020b0 <_sbrk+0x50>)
 80020a4:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 80020a6:	68fb      	ldr	r3, [r7, #12]
}
 80020a8:	0018      	movs	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	b004      	add	sp, #16
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	200002c8 	.word	0x200002c8
 80020b4:	20000468 	.word	0x20000468

080020b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80020bc:	46c0      	nop			; (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020c4:	480d      	ldr	r0, [pc, #52]	; (80020fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020c6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020c8:	480d      	ldr	r0, [pc, #52]	; (8002100 <LoopForever+0x6>)
  ldr r1, =_edata
 80020ca:	490e      	ldr	r1, [pc, #56]	; (8002104 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020cc:	4a0e      	ldr	r2, [pc, #56]	; (8002108 <LoopForever+0xe>)
  movs r3, #0
 80020ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d0:	e002      	b.n	80020d8 <LoopCopyDataInit>

080020d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020d6:	3304      	adds	r3, #4

080020d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020dc:	d3f9      	bcc.n	80020d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020de:	4a0b      	ldr	r2, [pc, #44]	; (800210c <LoopForever+0x12>)
  ldr r4, =_ebss
 80020e0:	4c0b      	ldr	r4, [pc, #44]	; (8002110 <LoopForever+0x16>)
  movs r3, #0
 80020e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e4:	e001      	b.n	80020ea <LoopFillZerobss>

080020e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e8:	3204      	adds	r2, #4

080020ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020ec:	d3fb      	bcc.n	80020e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80020ee:	f7ff ffe3 	bl	80020b8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80020f2:	f002 f927 	bl	8004344 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020f6:	f7ff fbdb 	bl	80018b0 <main>

080020fa <LoopForever>:

LoopForever:
    b LoopForever
 80020fa:	e7fe      	b.n	80020fa <LoopForever>
  ldr   r0, =_estack
 80020fc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002104:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002108:	08005f5c 	.word	0x08005f5c
  ldr r2, =_sbss
 800210c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002110:	20000464 	.word	0x20000464

08002114 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002114:	e7fe      	b.n	8002114 <ADC1_IRQHandler>
	...

08002118 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800211c:	4b07      	ldr	r3, [pc, #28]	; (800213c <HAL_Init+0x24>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4b06      	ldr	r3, [pc, #24]	; (800213c <HAL_Init+0x24>)
 8002122:	2110      	movs	r1, #16
 8002124:	430a      	orrs	r2, r1
 8002126:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002128:	2000      	movs	r0, #0
 800212a:	f000 f809 	bl	8002140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800212e:	f7ff fdd9 	bl	8001ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	0018      	movs	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	40022000 	.word	0x40022000

08002140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002140:	b590      	push	{r4, r7, lr}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002148:	4b14      	ldr	r3, [pc, #80]	; (800219c <HAL_InitTick+0x5c>)
 800214a:	681c      	ldr	r4, [r3, #0]
 800214c:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <HAL_InitTick+0x60>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	0019      	movs	r1, r3
 8002152:	23fa      	movs	r3, #250	; 0xfa
 8002154:	0098      	lsls	r0, r3, #2
 8002156:	f7fd ffdf 	bl	8000118 <__udivsi3>
 800215a:	0003      	movs	r3, r0
 800215c:	0019      	movs	r1, r3
 800215e:	0020      	movs	r0, r4
 8002160:	f7fd ffda 	bl	8000118 <__udivsi3>
 8002164:	0003      	movs	r3, r0
 8002166:	0018      	movs	r0, r3
 8002168:	f000 f92d 	bl	80023c6 <HAL_SYSTICK_Config>
 800216c:	1e03      	subs	r3, r0, #0
 800216e:	d001      	beq.n	8002174 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e00f      	b.n	8002194 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b03      	cmp	r3, #3
 8002178:	d80b      	bhi.n	8002192 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	2301      	movs	r3, #1
 800217e:	425b      	negs	r3, r3
 8002180:	2200      	movs	r2, #0
 8002182:	0018      	movs	r0, r3
 8002184:	f000 f8fa 	bl	800237c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_InitTick+0x64>)
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	e000      	b.n	8002194 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
}
 8002194:	0018      	movs	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	b003      	add	sp, #12
 800219a:	bd90      	pop	{r4, r7, pc}
 800219c:	20000004 	.word	0x20000004
 80021a0:	2000000c 	.word	0x2000000c
 80021a4:	20000008 	.word	0x20000008

080021a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <HAL_IncTick+0x1c>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	001a      	movs	r2, r3
 80021b2:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <HAL_IncTick+0x20>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	18d2      	adds	r2, r2, r3
 80021b8:	4b03      	ldr	r3, [pc, #12]	; (80021c8 <HAL_IncTick+0x20>)
 80021ba:	601a      	str	r2, [r3, #0]
}
 80021bc:	46c0      	nop			; (mov r8, r8)
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	2000000c 	.word	0x2000000c
 80021c8:	2000045c 	.word	0x2000045c

080021cc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  return uwTick;
 80021d0:	4b02      	ldr	r3, [pc, #8]	; (80021dc <HAL_GetTick+0x10>)
 80021d2:	681b      	ldr	r3, [r3, #0]
}
 80021d4:	0018      	movs	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	2000045c 	.word	0x2000045c

080021e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021e8:	f7ff fff0 	bl	80021cc <HAL_GetTick>
 80021ec:	0003      	movs	r3, r0
 80021ee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	3301      	adds	r3, #1
 80021f8:	d005      	beq.n	8002206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021fa:	4b09      	ldr	r3, [pc, #36]	; (8002220 <HAL_Delay+0x40>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	001a      	movs	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	189b      	adds	r3, r3, r2
 8002204:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	f7ff ffe0 	bl	80021cc <HAL_GetTick>
 800220c:	0002      	movs	r2, r0
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	429a      	cmp	r2, r3
 8002216:	d8f7      	bhi.n	8002208 <HAL_Delay+0x28>
  {
  }
}
 8002218:	46c0      	nop			; (mov r8, r8)
 800221a:	46bd      	mov	sp, r7
 800221c:	b004      	add	sp, #16
 800221e:	bd80      	pop	{r7, pc}
 8002220:	2000000c 	.word	0x2000000c

08002224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	0002      	movs	r2, r0
 800222c:	1dfb      	adds	r3, r7, #7
 800222e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002230:	1dfb      	adds	r3, r7, #7
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b7f      	cmp	r3, #127	; 0x7f
 8002236:	d809      	bhi.n	800224c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002238:	1dfb      	adds	r3, r7, #7
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	001a      	movs	r2, r3
 800223e:	231f      	movs	r3, #31
 8002240:	401a      	ands	r2, r3
 8002242:	4b04      	ldr	r3, [pc, #16]	; (8002254 <__NVIC_EnableIRQ+0x30>)
 8002244:	2101      	movs	r1, #1
 8002246:	4091      	lsls	r1, r2
 8002248:	000a      	movs	r2, r1
 800224a:	601a      	str	r2, [r3, #0]
  }
}
 800224c:	46c0      	nop			; (mov r8, r8)
 800224e:	46bd      	mov	sp, r7
 8002250:	b002      	add	sp, #8
 8002252:	bd80      	pop	{r7, pc}
 8002254:	e000e100 	.word	0xe000e100

08002258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002258:	b590      	push	{r4, r7, lr}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	0002      	movs	r2, r0
 8002260:	6039      	str	r1, [r7, #0]
 8002262:	1dfb      	adds	r3, r7, #7
 8002264:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002266:	1dfb      	adds	r3, r7, #7
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b7f      	cmp	r3, #127	; 0x7f
 800226c:	d828      	bhi.n	80022c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800226e:	4a2f      	ldr	r2, [pc, #188]	; (800232c <__NVIC_SetPriority+0xd4>)
 8002270:	1dfb      	adds	r3, r7, #7
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	b25b      	sxtb	r3, r3
 8002276:	089b      	lsrs	r3, r3, #2
 8002278:	33c0      	adds	r3, #192	; 0xc0
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	589b      	ldr	r3, [r3, r2]
 800227e:	1dfa      	adds	r2, r7, #7
 8002280:	7812      	ldrb	r2, [r2, #0]
 8002282:	0011      	movs	r1, r2
 8002284:	2203      	movs	r2, #3
 8002286:	400a      	ands	r2, r1
 8002288:	00d2      	lsls	r2, r2, #3
 800228a:	21ff      	movs	r1, #255	; 0xff
 800228c:	4091      	lsls	r1, r2
 800228e:	000a      	movs	r2, r1
 8002290:	43d2      	mvns	r2, r2
 8002292:	401a      	ands	r2, r3
 8002294:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	019b      	lsls	r3, r3, #6
 800229a:	22ff      	movs	r2, #255	; 0xff
 800229c:	401a      	ands	r2, r3
 800229e:	1dfb      	adds	r3, r7, #7
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	0018      	movs	r0, r3
 80022a4:	2303      	movs	r3, #3
 80022a6:	4003      	ands	r3, r0
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022ac:	481f      	ldr	r0, [pc, #124]	; (800232c <__NVIC_SetPriority+0xd4>)
 80022ae:	1dfb      	adds	r3, r7, #7
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	b25b      	sxtb	r3, r3
 80022b4:	089b      	lsrs	r3, r3, #2
 80022b6:	430a      	orrs	r2, r1
 80022b8:	33c0      	adds	r3, #192	; 0xc0
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80022be:	e031      	b.n	8002324 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022c0:	4a1b      	ldr	r2, [pc, #108]	; (8002330 <__NVIC_SetPriority+0xd8>)
 80022c2:	1dfb      	adds	r3, r7, #7
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	0019      	movs	r1, r3
 80022c8:	230f      	movs	r3, #15
 80022ca:	400b      	ands	r3, r1
 80022cc:	3b08      	subs	r3, #8
 80022ce:	089b      	lsrs	r3, r3, #2
 80022d0:	3306      	adds	r3, #6
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	18d3      	adds	r3, r2, r3
 80022d6:	3304      	adds	r3, #4
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	1dfa      	adds	r2, r7, #7
 80022dc:	7812      	ldrb	r2, [r2, #0]
 80022de:	0011      	movs	r1, r2
 80022e0:	2203      	movs	r2, #3
 80022e2:	400a      	ands	r2, r1
 80022e4:	00d2      	lsls	r2, r2, #3
 80022e6:	21ff      	movs	r1, #255	; 0xff
 80022e8:	4091      	lsls	r1, r2
 80022ea:	000a      	movs	r2, r1
 80022ec:	43d2      	mvns	r2, r2
 80022ee:	401a      	ands	r2, r3
 80022f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	019b      	lsls	r3, r3, #6
 80022f6:	22ff      	movs	r2, #255	; 0xff
 80022f8:	401a      	ands	r2, r3
 80022fa:	1dfb      	adds	r3, r7, #7
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	0018      	movs	r0, r3
 8002300:	2303      	movs	r3, #3
 8002302:	4003      	ands	r3, r0
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002308:	4809      	ldr	r0, [pc, #36]	; (8002330 <__NVIC_SetPriority+0xd8>)
 800230a:	1dfb      	adds	r3, r7, #7
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	001c      	movs	r4, r3
 8002310:	230f      	movs	r3, #15
 8002312:	4023      	ands	r3, r4
 8002314:	3b08      	subs	r3, #8
 8002316:	089b      	lsrs	r3, r3, #2
 8002318:	430a      	orrs	r2, r1
 800231a:	3306      	adds	r3, #6
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	18c3      	adds	r3, r0, r3
 8002320:	3304      	adds	r3, #4
 8002322:	601a      	str	r2, [r3, #0]
}
 8002324:	46c0      	nop			; (mov r8, r8)
 8002326:	46bd      	mov	sp, r7
 8002328:	b003      	add	sp, #12
 800232a:	bd90      	pop	{r4, r7, pc}
 800232c:	e000e100 	.word	0xe000e100
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3b01      	subs	r3, #1
 8002340:	4a0c      	ldr	r2, [pc, #48]	; (8002374 <SysTick_Config+0x40>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002346:	2301      	movs	r3, #1
 8002348:	e010      	b.n	800236c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800234a:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <SysTick_Config+0x44>)
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	3a01      	subs	r2, #1
 8002350:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002352:	2301      	movs	r3, #1
 8002354:	425b      	negs	r3, r3
 8002356:	2103      	movs	r1, #3
 8002358:	0018      	movs	r0, r3
 800235a:	f7ff ff7d 	bl	8002258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800235e:	4b06      	ldr	r3, [pc, #24]	; (8002378 <SysTick_Config+0x44>)
 8002360:	2200      	movs	r2, #0
 8002362:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002364:	4b04      	ldr	r3, [pc, #16]	; (8002378 <SysTick_Config+0x44>)
 8002366:	2207      	movs	r2, #7
 8002368:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800236a:	2300      	movs	r3, #0
}
 800236c:	0018      	movs	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	b002      	add	sp, #8
 8002372:	bd80      	pop	{r7, pc}
 8002374:	00ffffff 	.word	0x00ffffff
 8002378:	e000e010 	.word	0xe000e010

0800237c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	60b9      	str	r1, [r7, #8]
 8002384:	607a      	str	r2, [r7, #4]
 8002386:	210f      	movs	r1, #15
 8002388:	187b      	adds	r3, r7, r1
 800238a:	1c02      	adds	r2, r0, #0
 800238c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	187b      	adds	r3, r7, r1
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	b25b      	sxtb	r3, r3
 8002396:	0011      	movs	r1, r2
 8002398:	0018      	movs	r0, r3
 800239a:	f7ff ff5d 	bl	8002258 <__NVIC_SetPriority>
}
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	46bd      	mov	sp, r7
 80023a2:	b004      	add	sp, #16
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	0002      	movs	r2, r0
 80023ae:	1dfb      	adds	r3, r7, #7
 80023b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023b2:	1dfb      	adds	r3, r7, #7
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	b25b      	sxtb	r3, r3
 80023b8:	0018      	movs	r0, r3
 80023ba:	f7ff ff33 	bl	8002224 <__NVIC_EnableIRQ>
}
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	46bd      	mov	sp, r7
 80023c2:	b002      	add	sp, #8
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	0018      	movs	r0, r3
 80023d2:	f7ff ffaf 	bl	8002334 <SysTick_Config>
 80023d6:	0003      	movs	r3, r0
}
 80023d8:	0018      	movs	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	b002      	add	sp, #8
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e036      	b.n	8002464 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2221      	movs	r2, #33	; 0x21
 80023fa:	2102      	movs	r1, #2
 80023fc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4a18      	ldr	r2, [pc, #96]	; (800246c <HAL_DMA_Init+0x8c>)
 800240a:	4013      	ands	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002416:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002422:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800242e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4313      	orrs	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	0018      	movs	r0, r3
 8002448:	f000 f9d2 	bl	80027f0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2221      	movs	r2, #33	; 0x21
 8002456:	2101      	movs	r1, #1
 8002458:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2220      	movs	r2, #32
 800245e:	2100      	movs	r1, #0
 8002460:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}  
 8002464:	0018      	movs	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	b004      	add	sp, #16
 800246a:	bd80      	pop	{r7, pc}
 800246c:	ffffc00f 	.word	0xffffc00f

08002470 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e03b      	b.n	80024fa <HAL_DMA_DeInit+0x8a>
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2101      	movs	r1, #1
 800248e:	438a      	bics	r2, r1
 8002490:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2200      	movs	r2, #0
 80024a0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2200      	movs	r2, #0
 80024a8:	609a      	str	r2, [r3, #8]
  
  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2200      	movs	r2, #0
 80024b0:	60da      	str	r2, [r3, #12]

/* Get DMA Base Address */  
  DMA_CalcBaseAndBitshift(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	0018      	movs	r0, r3
 80024b6:	f000 f99b 	bl	80027f0 <DMA_CalcBaseAndBitshift>

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c2:	2101      	movs	r1, #1
 80024c4:	4091      	lsls	r1, r2
 80024c6:	000a      	movs	r2, r1
 80024c8:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2221      	movs	r2, #33	; 0x21
 80024ec:	2100      	movs	r1, #0
 80024ee:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2220      	movs	r2, #32
 80024f4:	2100      	movs	r1, #0
 80024f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	0018      	movs	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	b002      	add	sp, #8
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b086      	sub	sp, #24
 8002506:	af00      	add	r7, sp, #0
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
 800250e:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002510:	2317      	movs	r3, #23
 8002512:	18fb      	adds	r3, r7, r3
 8002514:	2200      	movs	r2, #0
 8002516:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2220      	movs	r2, #32
 800251c:	5c9b      	ldrb	r3, [r3, r2]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d101      	bne.n	8002526 <HAL_DMA_Start_IT+0x24>
 8002522:	2302      	movs	r3, #2
 8002524:	e04f      	b.n	80025c6 <HAL_DMA_Start_IT+0xc4>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2220      	movs	r2, #32
 800252a:	2101      	movs	r1, #1
 800252c:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2221      	movs	r2, #33	; 0x21
 8002532:	5c9b      	ldrb	r3, [r3, r2]
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b01      	cmp	r3, #1
 8002538:	d13a      	bne.n	80025b0 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2221      	movs	r2, #33	; 0x21
 800253e:	2102      	movs	r1, #2
 8002540:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2101      	movs	r1, #1
 8002554:	438a      	bics	r2, r1
 8002556:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68b9      	ldr	r1, [r7, #8]
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 f919 	bl	8002796 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	210e      	movs	r1, #14
 8002578:	430a      	orrs	r2, r1
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	e00f      	b.n	800259e <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	210a      	movs	r1, #10
 800258a:	430a      	orrs	r2, r1
 800258c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2104      	movs	r1, #4
 800259a:	438a      	bics	r2, r1
 800259c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2101      	movs	r1, #1
 80025aa:	430a      	orrs	r2, r1
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	e007      	b.n	80025c0 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2220      	movs	r2, #32
 80025b4:	2100      	movs	r1, #0
 80025b6:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80025b8:	2317      	movs	r3, #23
 80025ba:	18fb      	adds	r3, r7, r3
 80025bc:	2202      	movs	r2, #2
 80025be:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80025c0:	2317      	movs	r3, #23
 80025c2:	18fb      	adds	r3, r7, r3
 80025c4:	781b      	ldrb	r3, [r3, #0]
} 
 80025c6:	0018      	movs	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	b006      	add	sp, #24
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b082      	sub	sp, #8
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2221      	movs	r2, #33	; 0x21
 80025da:	5c9b      	ldrb	r3, [r3, r2]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d008      	beq.n	80025f4 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2204      	movs	r2, #4
 80025e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2220      	movs	r2, #32
 80025ec:	2100      	movs	r1, #0
 80025ee:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e020      	b.n	8002636 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	210e      	movs	r1, #14
 8002600:	438a      	bics	r2, r1
 8002602:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2101      	movs	r1, #1
 8002610:	438a      	bics	r2, r1
 8002612:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261c:	2101      	movs	r1, #1
 800261e:	4091      	lsls	r1, r2
 8002620:	000a      	movs	r2, r1
 8002622:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2221      	movs	r2, #33	; 0x21
 8002628:	2101      	movs	r1, #1
 800262a:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2220      	movs	r2, #32
 8002630:	2100      	movs	r1, #0
 8002632:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	0018      	movs	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	b002      	add	sp, #8
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b084      	sub	sp, #16
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	2204      	movs	r2, #4
 800265c:	409a      	lsls	r2, r3
 800265e:	0013      	movs	r3, r2
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4013      	ands	r3, r2
 8002664:	d024      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x72>
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	2204      	movs	r2, #4
 800266a:	4013      	ands	r3, r2
 800266c:	d020      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2220      	movs	r2, #32
 8002676:	4013      	ands	r3, r2
 8002678:	d107      	bne.n	800268a <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2104      	movs	r1, #4
 8002686:	438a      	bics	r2, r1
 8002688:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002692:	2104      	movs	r1, #4
 8002694:	4091      	lsls	r1, r2
 8002696:	000a      	movs	r2, r1
 8002698:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d100      	bne.n	80026a4 <HAL_DMA_IRQHandler+0x66>
 80026a2:	e06a      	b.n	800277a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	0010      	movs	r0, r2
 80026ac:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80026ae:	e064      	b.n	800277a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	2202      	movs	r2, #2
 80026b6:	409a      	lsls	r2, r3
 80026b8:	0013      	movs	r3, r2
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	4013      	ands	r3, r2
 80026be:	d02b      	beq.n	8002718 <HAL_DMA_IRQHandler+0xda>
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2202      	movs	r2, #2
 80026c4:	4013      	ands	r3, r2
 80026c6:	d027      	beq.n	8002718 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2220      	movs	r2, #32
 80026d0:	4013      	ands	r3, r2
 80026d2:	d10b      	bne.n	80026ec <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	210a      	movs	r1, #10
 80026e0:	438a      	bics	r2, r1
 80026e2:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2221      	movs	r2, #33	; 0x21
 80026e8:	2101      	movs	r1, #1
 80026ea:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f4:	2102      	movs	r1, #2
 80026f6:	4091      	lsls	r1, r2
 80026f8:	000a      	movs	r2, r1
 80026fa:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2220      	movs	r2, #32
 8002700:	2100      	movs	r1, #0
 8002702:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	2b00      	cmp	r3, #0
 800270a:	d036      	beq.n	800277a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	0010      	movs	r0, r2
 8002714:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002716:	e030      	b.n	800277a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	2208      	movs	r2, #8
 800271e:	409a      	lsls	r2, r3
 8002720:	0013      	movs	r3, r2
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	4013      	ands	r3, r2
 8002726:	d028      	beq.n	800277a <HAL_DMA_IRQHandler+0x13c>
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2208      	movs	r2, #8
 800272c:	4013      	ands	r3, r2
 800272e:	d024      	beq.n	800277a <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	210e      	movs	r1, #14
 800273c:	438a      	bics	r2, r1
 800273e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002748:	2101      	movs	r1, #1
 800274a:	4091      	lsls	r1, r2
 800274c:	000a      	movs	r2, r1
 800274e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2221      	movs	r2, #33	; 0x21
 800275a:	2101      	movs	r1, #1
 800275c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2220      	movs	r2, #32
 8002762:	2100      	movs	r1, #0
 8002764:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	2b00      	cmp	r3, #0
 800276c:	d005      	beq.n	800277a <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	0010      	movs	r0, r2
 8002776:	4798      	blx	r3
    }
   }
}  
 8002778:	e7ff      	b.n	800277a <HAL_DMA_IRQHandler+0x13c>
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	46bd      	mov	sp, r7
 800277e:	b004      	add	sp, #16
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800278e:	0018      	movs	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	b002      	add	sp, #8
 8002794:	bd80      	pop	{r7, pc}

08002796 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b084      	sub	sp, #16
 800279a:	af00      	add	r7, sp, #0
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ac:	2101      	movs	r1, #1
 80027ae:	4091      	lsls	r1, r2
 80027b0:	000a      	movs	r2, r1
 80027b2:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b10      	cmp	r3, #16
 80027c2:	d108      	bne.n	80027d6 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80027d4:	e007      	b.n	80027e6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	60da      	str	r2, [r3, #12]
}
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	46bd      	mov	sp, r7
 80027ea:	b004      	add	sp, #16
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a08      	ldr	r2, [pc, #32]	; (8002820 <DMA_CalcBaseAndBitshift+0x30>)
 80027fe:	4694      	mov	ip, r2
 8002800:	4463      	add	r3, ip
 8002802:	2114      	movs	r1, #20
 8002804:	0018      	movs	r0, r3
 8002806:	f7fd fc87 	bl	8000118 <__udivsi3>
 800280a:	0003      	movs	r3, r0
 800280c:	009a      	lsls	r2, r3, #2
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a03      	ldr	r2, [pc, #12]	; (8002824 <DMA_CalcBaseAndBitshift+0x34>)
 8002816:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002818:	46c0      	nop			; (mov r8, r8)
 800281a:	46bd      	mov	sp, r7
 800281c:	b002      	add	sp, #8
 800281e:	bd80      	pop	{r7, pc}
 8002820:	bffdfff8 	.word	0xbffdfff8
 8002824:	40020000 	.word	0x40020000

08002828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002836:	e14f      	b.n	8002ad8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2101      	movs	r1, #1
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	4091      	lsls	r1, r2
 8002842:	000a      	movs	r2, r1
 8002844:	4013      	ands	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d100      	bne.n	8002850 <HAL_GPIO_Init+0x28>
 800284e:	e140      	b.n	8002ad2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b02      	cmp	r3, #2
 8002856:	d003      	beq.n	8002860 <HAL_GPIO_Init+0x38>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b12      	cmp	r3, #18
 800285e:	d123      	bne.n	80028a8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	08da      	lsrs	r2, r3, #3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3208      	adds	r2, #8
 8002868:	0092      	lsls	r2, r2, #2
 800286a:	58d3      	ldr	r3, [r2, r3]
 800286c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2207      	movs	r2, #7
 8002872:	4013      	ands	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	220f      	movs	r2, #15
 8002878:	409a      	lsls	r2, r3
 800287a:	0013      	movs	r3, r2
 800287c:	43da      	mvns	r2, r3
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4013      	ands	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	2107      	movs	r1, #7
 800288c:	400b      	ands	r3, r1
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	409a      	lsls	r2, r3
 8002892:	0013      	movs	r3, r2
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	08da      	lsrs	r2, r3, #3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3208      	adds	r2, #8
 80028a2:	0092      	lsls	r2, r2, #2
 80028a4:	6939      	ldr	r1, [r7, #16]
 80028a6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	2203      	movs	r2, #3
 80028b4:	409a      	lsls	r2, r3
 80028b6:	0013      	movs	r3, r2
 80028b8:	43da      	mvns	r2, r3
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4013      	ands	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2203      	movs	r2, #3
 80028c6:	401a      	ands	r2, r3
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	409a      	lsls	r2, r3
 80028ce:	0013      	movs	r3, r2
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d00b      	beq.n	80028fc <HAL_GPIO_Init+0xd4>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d007      	beq.n	80028fc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028f0:	2b11      	cmp	r3, #17
 80028f2:	d003      	beq.n	80028fc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b12      	cmp	r3, #18
 80028fa:	d130      	bne.n	800295e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	2203      	movs	r2, #3
 8002908:	409a      	lsls	r2, r3
 800290a:	0013      	movs	r3, r2
 800290c:	43da      	mvns	r2, r3
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4013      	ands	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	68da      	ldr	r2, [r3, #12]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	409a      	lsls	r2, r3
 800291e:	0013      	movs	r3, r2
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	4313      	orrs	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002932:	2201      	movs	r2, #1
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	409a      	lsls	r2, r3
 8002938:	0013      	movs	r3, r2
 800293a:	43da      	mvns	r2, r3
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	4013      	ands	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	091b      	lsrs	r3, r3, #4
 8002948:	2201      	movs	r2, #1
 800294a:	401a      	ands	r2, r3
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	409a      	lsls	r2, r3
 8002950:	0013      	movs	r3, r2
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4313      	orrs	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	2203      	movs	r2, #3
 800296a:	409a      	lsls	r2, r3
 800296c:	0013      	movs	r3, r2
 800296e:	43da      	mvns	r2, r3
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	4013      	ands	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	409a      	lsls	r2, r3
 8002980:	0013      	movs	r3, r2
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	2380      	movs	r3, #128	; 0x80
 8002994:	055b      	lsls	r3, r3, #21
 8002996:	4013      	ands	r3, r2
 8002998:	d100      	bne.n	800299c <HAL_GPIO_Init+0x174>
 800299a:	e09a      	b.n	8002ad2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800299c:	4b54      	ldr	r3, [pc, #336]	; (8002af0 <HAL_GPIO_Init+0x2c8>)
 800299e:	699a      	ldr	r2, [r3, #24]
 80029a0:	4b53      	ldr	r3, [pc, #332]	; (8002af0 <HAL_GPIO_Init+0x2c8>)
 80029a2:	2101      	movs	r1, #1
 80029a4:	430a      	orrs	r2, r1
 80029a6:	619a      	str	r2, [r3, #24]
 80029a8:	4b51      	ldr	r3, [pc, #324]	; (8002af0 <HAL_GPIO_Init+0x2c8>)
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	2201      	movs	r2, #1
 80029ae:	4013      	ands	r3, r2
 80029b0:	60bb      	str	r3, [r7, #8]
 80029b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029b4:	4a4f      	ldr	r2, [pc, #316]	; (8002af4 <HAL_GPIO_Init+0x2cc>)
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	089b      	lsrs	r3, r3, #2
 80029ba:	3302      	adds	r3, #2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	589b      	ldr	r3, [r3, r2]
 80029c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	2203      	movs	r2, #3
 80029c6:	4013      	ands	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	220f      	movs	r2, #15
 80029cc:	409a      	lsls	r2, r3
 80029ce:	0013      	movs	r3, r2
 80029d0:	43da      	mvns	r2, r3
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4013      	ands	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	2390      	movs	r3, #144	; 0x90
 80029dc:	05db      	lsls	r3, r3, #23
 80029de:	429a      	cmp	r2, r3
 80029e0:	d013      	beq.n	8002a0a <HAL_GPIO_Init+0x1e2>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a44      	ldr	r2, [pc, #272]	; (8002af8 <HAL_GPIO_Init+0x2d0>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d00d      	beq.n	8002a06 <HAL_GPIO_Init+0x1de>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a43      	ldr	r2, [pc, #268]	; (8002afc <HAL_GPIO_Init+0x2d4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d007      	beq.n	8002a02 <HAL_GPIO_Init+0x1da>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a42      	ldr	r2, [pc, #264]	; (8002b00 <HAL_GPIO_Init+0x2d8>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d101      	bne.n	80029fe <HAL_GPIO_Init+0x1d6>
 80029fa:	2303      	movs	r3, #3
 80029fc:	e006      	b.n	8002a0c <HAL_GPIO_Init+0x1e4>
 80029fe:	2305      	movs	r3, #5
 8002a00:	e004      	b.n	8002a0c <HAL_GPIO_Init+0x1e4>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e002      	b.n	8002a0c <HAL_GPIO_Init+0x1e4>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <HAL_GPIO_Init+0x1e4>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	2103      	movs	r1, #3
 8002a10:	400a      	ands	r2, r1
 8002a12:	0092      	lsls	r2, r2, #2
 8002a14:	4093      	lsls	r3, r2
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a1c:	4935      	ldr	r1, [pc, #212]	; (8002af4 <HAL_GPIO_Init+0x2cc>)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	089b      	lsrs	r3, r3, #2
 8002a22:	3302      	adds	r3, #2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a2a:	4b36      	ldr	r3, [pc, #216]	; (8002b04 <HAL_GPIO_Init+0x2dc>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	43da      	mvns	r2, r3
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4013      	ands	r3, r2
 8002a38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	2380      	movs	r3, #128	; 0x80
 8002a40:	025b      	lsls	r3, r3, #9
 8002a42:	4013      	ands	r3, r2
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a4e:	4b2d      	ldr	r3, [pc, #180]	; (8002b04 <HAL_GPIO_Init+0x2dc>)
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002a54:	4b2b      	ldr	r3, [pc, #172]	; (8002b04 <HAL_GPIO_Init+0x2dc>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	43da      	mvns	r2, r3
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4013      	ands	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	2380      	movs	r3, #128	; 0x80
 8002a6a:	029b      	lsls	r3, r3, #10
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d003      	beq.n	8002a78 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a78:	4b22      	ldr	r3, [pc, #136]	; (8002b04 <HAL_GPIO_Init+0x2dc>)
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a7e:	4b21      	ldr	r3, [pc, #132]	; (8002b04 <HAL_GPIO_Init+0x2dc>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	43da      	mvns	r2, r3
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	2380      	movs	r3, #128	; 0x80
 8002a94:	035b      	lsls	r3, r3, #13
 8002a96:	4013      	ands	r3, r2
 8002a98:	d003      	beq.n	8002aa2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002aa2:	4b18      	ldr	r3, [pc, #96]	; (8002b04 <HAL_GPIO_Init+0x2dc>)
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002aa8:	4b16      	ldr	r3, [pc, #88]	; (8002b04 <HAL_GPIO_Init+0x2dc>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	43da      	mvns	r2, r3
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	2380      	movs	r3, #128	; 0x80
 8002abe:	039b      	lsls	r3, r3, #14
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	d003      	beq.n	8002acc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002acc:	4b0d      	ldr	r3, [pc, #52]	; (8002b04 <HAL_GPIO_Init+0x2dc>)
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	40da      	lsrs	r2, r3
 8002ae0:	1e13      	subs	r3, r2, #0
 8002ae2:	d000      	beq.n	8002ae6 <HAL_GPIO_Init+0x2be>
 8002ae4:	e6a8      	b.n	8002838 <HAL_GPIO_Init+0x10>
  } 
}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	b006      	add	sp, #24
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40010000 	.word	0x40010000
 8002af8:	48000400 	.word	0x48000400
 8002afc:	48000800 	.word	0x48000800
 8002b00:	48000c00 	.word	0x48000c00
 8002b04:	40010400 	.word	0x40010400

08002b08 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002b16:	e0b1      	b.n	8002c7c <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002b18:	2201      	movs	r2, #1
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	409a      	lsls	r2, r3
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	4013      	ands	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d100      	bne.n	8002b2c <HAL_GPIO_DeInit+0x24>
 8002b2a:	e0a4      	b.n	8002c76 <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002b2c:	4a58      	ldr	r2, [pc, #352]	; (8002c90 <HAL_GPIO_DeInit+0x188>)
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	089b      	lsrs	r3, r3, #2
 8002b32:	3302      	adds	r3, #2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	589b      	ldr	r3, [r3, r2]
 8002b38:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2203      	movs	r2, #3
 8002b3e:	4013      	ands	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	220f      	movs	r2, #15
 8002b44:	409a      	lsls	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	2390      	movs	r3, #144	; 0x90
 8002b50:	05db      	lsls	r3, r3, #23
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d013      	beq.n	8002b7e <HAL_GPIO_DeInit+0x76>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a4e      	ldr	r2, [pc, #312]	; (8002c94 <HAL_GPIO_DeInit+0x18c>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d00d      	beq.n	8002b7a <HAL_GPIO_DeInit+0x72>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a4d      	ldr	r2, [pc, #308]	; (8002c98 <HAL_GPIO_DeInit+0x190>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d007      	beq.n	8002b76 <HAL_GPIO_DeInit+0x6e>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a4c      	ldr	r2, [pc, #304]	; (8002c9c <HAL_GPIO_DeInit+0x194>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d101      	bne.n	8002b72 <HAL_GPIO_DeInit+0x6a>
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e006      	b.n	8002b80 <HAL_GPIO_DeInit+0x78>
 8002b72:	2305      	movs	r3, #5
 8002b74:	e004      	b.n	8002b80 <HAL_GPIO_DeInit+0x78>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e002      	b.n	8002b80 <HAL_GPIO_DeInit+0x78>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <HAL_GPIO_DeInit+0x78>
 8002b7e:	2300      	movs	r3, #0
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	2103      	movs	r1, #3
 8002b84:	400a      	ands	r2, r1
 8002b86:	0092      	lsls	r2, r2, #2
 8002b88:	4093      	lsls	r3, r2
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d132      	bne.n	8002bf6 <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002b90:	4b43      	ldr	r3, [pc, #268]	; (8002ca0 <HAL_GPIO_DeInit+0x198>)
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	43d9      	mvns	r1, r3
 8002b98:	4b41      	ldr	r3, [pc, #260]	; (8002ca0 <HAL_GPIO_DeInit+0x198>)
 8002b9a:	400a      	ands	r2, r1
 8002b9c:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002b9e:	4b40      	ldr	r3, [pc, #256]	; (8002ca0 <HAL_GPIO_DeInit+0x198>)
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	43d9      	mvns	r1, r3
 8002ba6:	4b3e      	ldr	r3, [pc, #248]	; (8002ca0 <HAL_GPIO_DeInit+0x198>)
 8002ba8:	400a      	ands	r2, r1
 8002baa:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002bac:	4b3c      	ldr	r3, [pc, #240]	; (8002ca0 <HAL_GPIO_DeInit+0x198>)
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	43d9      	mvns	r1, r3
 8002bb4:	4b3a      	ldr	r3, [pc, #232]	; (8002ca0 <HAL_GPIO_DeInit+0x198>)
 8002bb6:	400a      	ands	r2, r1
 8002bb8:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002bba:	4b39      	ldr	r3, [pc, #228]	; (8002ca0 <HAL_GPIO_DeInit+0x198>)
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	43d9      	mvns	r1, r3
 8002bc2:	4b37      	ldr	r3, [pc, #220]	; (8002ca0 <HAL_GPIO_DeInit+0x198>)
 8002bc4:	400a      	ands	r2, r1
 8002bc6:	60da      	str	r2, [r3, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	2203      	movs	r2, #3
 8002bcc:	4013      	ands	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	220f      	movs	r2, #15
 8002bd2:	409a      	lsls	r2, r3
 8002bd4:	0013      	movs	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002bd8:	4a2d      	ldr	r2, [pc, #180]	; (8002c90 <HAL_GPIO_DeInit+0x188>)
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	089b      	lsrs	r3, r3, #2
 8002bde:	3302      	adds	r3, #2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	589a      	ldr	r2, [r3, r2]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	43d9      	mvns	r1, r3
 8002be8:	4829      	ldr	r0, [pc, #164]	; (8002c90 <HAL_GPIO_DeInit+0x188>)
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	089b      	lsrs	r3, r3, #2
 8002bee:	400a      	ands	r2, r1
 8002bf0:	3302      	adds	r3, #2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	0052      	lsls	r2, r2, #1
 8002bfe:	2103      	movs	r1, #3
 8002c00:	4091      	lsls	r1, r2
 8002c02:	000a      	movs	r2, r1
 8002c04:	43d2      	mvns	r2, r2
 8002c06:	401a      	ands	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	08da      	lsrs	r2, r3, #3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3208      	adds	r2, #8
 8002c14:	0092      	lsls	r2, r2, #2
 8002c16:	58d3      	ldr	r3, [r2, r3]
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	2107      	movs	r1, #7
 8002c1c:	400a      	ands	r2, r1
 8002c1e:	0092      	lsls	r2, r2, #2
 8002c20:	210f      	movs	r1, #15
 8002c22:	4091      	lsls	r1, r2
 8002c24:	000a      	movs	r2, r1
 8002c26:	43d1      	mvns	r1, r2
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	08d2      	lsrs	r2, r2, #3
 8002c2c:	4019      	ands	r1, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3208      	adds	r2, #8
 8002c32:	0092      	lsls	r2, r2, #2
 8002c34:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	0052      	lsls	r2, r2, #1
 8002c3e:	2103      	movs	r1, #3
 8002c40:	4091      	lsls	r1, r2
 8002c42:	000a      	movs	r2, r1
 8002c44:	43d2      	mvns	r2, r2
 8002c46:	401a      	ands	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2101      	movs	r1, #1
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	4091      	lsls	r1, r2
 8002c56:	000a      	movs	r2, r1
 8002c58:	43d2      	mvns	r2, r2
 8002c5a:	401a      	ands	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	0052      	lsls	r2, r2, #1
 8002c68:	2103      	movs	r1, #3
 8002c6a:	4091      	lsls	r1, r2
 8002c6c:	000a      	movs	r2, r1
 8002c6e:	43d2      	mvns	r2, r2
 8002c70:	401a      	ands	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	40da      	lsrs	r2, r3
 8002c82:	1e13      	subs	r3, r2, #0
 8002c84:	d000      	beq.n	8002c88 <HAL_GPIO_DeInit+0x180>
 8002c86:	e747      	b.n	8002b18 <HAL_GPIO_DeInit+0x10>
  }
}
 8002c88:	46c0      	nop			; (mov r8, r8)
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b006      	add	sp, #24
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40010000 	.word	0x40010000
 8002c94:	48000400 	.word	0x48000400
 8002c98:	48000800 	.word	0x48000800
 8002c9c:	48000c00 	.word	0x48000c00
 8002ca0:	40010400 	.word	0x40010400

08002ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	0008      	movs	r0, r1
 8002cae:	0011      	movs	r1, r2
 8002cb0:	1cbb      	adds	r3, r7, #2
 8002cb2:	1c02      	adds	r2, r0, #0
 8002cb4:	801a      	strh	r2, [r3, #0]
 8002cb6:	1c7b      	adds	r3, r7, #1
 8002cb8:	1c0a      	adds	r2, r1, #0
 8002cba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cbc:	1c7b      	adds	r3, r7, #1
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d004      	beq.n	8002cce <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cc4:	1cbb      	adds	r3, r7, #2
 8002cc6:	881a      	ldrh	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ccc:	e003      	b.n	8002cd6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cce:	1cbb      	adds	r3, r7, #2
 8002cd0:	881a      	ldrh	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	b002      	add	sp, #8
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b088      	sub	sp, #32
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e303      	b.n	80032fa <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d100      	bne.n	8002cfe <HAL_RCC_OscConfig+0x1e>
 8002cfc:	e08d      	b.n	8002e1a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002cfe:	4bc4      	ldr	r3, [pc, #784]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	220c      	movs	r2, #12
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d00e      	beq.n	8002d28 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d0a:	4bc1      	ldr	r3, [pc, #772]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	220c      	movs	r2, #12
 8002d10:	4013      	ands	r3, r2
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d116      	bne.n	8002d44 <HAL_RCC_OscConfig+0x64>
 8002d16:	4bbe      	ldr	r3, [pc, #760]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	2380      	movs	r3, #128	; 0x80
 8002d1c:	025b      	lsls	r3, r3, #9
 8002d1e:	401a      	ands	r2, r3
 8002d20:	2380      	movs	r3, #128	; 0x80
 8002d22:	025b      	lsls	r3, r3, #9
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d10d      	bne.n	8002d44 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d28:	4bb9      	ldr	r3, [pc, #740]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	2380      	movs	r3, #128	; 0x80
 8002d2e:	029b      	lsls	r3, r3, #10
 8002d30:	4013      	ands	r3, r2
 8002d32:	d100      	bne.n	8002d36 <HAL_RCC_OscConfig+0x56>
 8002d34:	e070      	b.n	8002e18 <HAL_RCC_OscConfig+0x138>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d000      	beq.n	8002d40 <HAL_RCC_OscConfig+0x60>
 8002d3e:	e06b      	b.n	8002e18 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e2da      	b.n	80032fa <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d107      	bne.n	8002d5c <HAL_RCC_OscConfig+0x7c>
 8002d4c:	4bb0      	ldr	r3, [pc, #704]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	4baf      	ldr	r3, [pc, #700]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002d52:	2180      	movs	r1, #128	; 0x80
 8002d54:	0249      	lsls	r1, r1, #9
 8002d56:	430a      	orrs	r2, r1
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	e02f      	b.n	8002dbc <HAL_RCC_OscConfig+0xdc>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10c      	bne.n	8002d7e <HAL_RCC_OscConfig+0x9e>
 8002d64:	4baa      	ldr	r3, [pc, #680]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	4ba9      	ldr	r3, [pc, #676]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002d6a:	49aa      	ldr	r1, [pc, #680]	; (8003014 <HAL_RCC_OscConfig+0x334>)
 8002d6c:	400a      	ands	r2, r1
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	4ba7      	ldr	r3, [pc, #668]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	4ba6      	ldr	r3, [pc, #664]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002d76:	49a8      	ldr	r1, [pc, #672]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002d78:	400a      	ands	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	e01e      	b.n	8002dbc <HAL_RCC_OscConfig+0xdc>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b05      	cmp	r3, #5
 8002d84:	d10e      	bne.n	8002da4 <HAL_RCC_OscConfig+0xc4>
 8002d86:	4ba2      	ldr	r3, [pc, #648]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	4ba1      	ldr	r3, [pc, #644]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002d8c:	2180      	movs	r1, #128	; 0x80
 8002d8e:	02c9      	lsls	r1, r1, #11
 8002d90:	430a      	orrs	r2, r1
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	4b9e      	ldr	r3, [pc, #632]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4b9d      	ldr	r3, [pc, #628]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002d9a:	2180      	movs	r1, #128	; 0x80
 8002d9c:	0249      	lsls	r1, r1, #9
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	e00b      	b.n	8002dbc <HAL_RCC_OscConfig+0xdc>
 8002da4:	4b9a      	ldr	r3, [pc, #616]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b99      	ldr	r3, [pc, #612]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002daa:	499a      	ldr	r1, [pc, #616]	; (8003014 <HAL_RCC_OscConfig+0x334>)
 8002dac:	400a      	ands	r2, r1
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	4b97      	ldr	r3, [pc, #604]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	4b96      	ldr	r3, [pc, #600]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002db6:	4998      	ldr	r1, [pc, #608]	; (8003018 <HAL_RCC_OscConfig+0x338>)
 8002db8:	400a      	ands	r2, r1
 8002dba:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d014      	beq.n	8002dee <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc4:	f7ff fa02 	bl	80021cc <HAL_GetTick>
 8002dc8:	0003      	movs	r3, r0
 8002dca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dce:	f7ff f9fd 	bl	80021cc <HAL_GetTick>
 8002dd2:	0002      	movs	r2, r0
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b64      	cmp	r3, #100	; 0x64
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e28c      	b.n	80032fa <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de0:	4b8b      	ldr	r3, [pc, #556]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	2380      	movs	r3, #128	; 0x80
 8002de6:	029b      	lsls	r3, r3, #10
 8002de8:	4013      	ands	r3, r2
 8002dea:	d0f0      	beq.n	8002dce <HAL_RCC_OscConfig+0xee>
 8002dec:	e015      	b.n	8002e1a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dee:	f7ff f9ed 	bl	80021cc <HAL_GetTick>
 8002df2:	0003      	movs	r3, r0
 8002df4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002df8:	f7ff f9e8 	bl	80021cc <HAL_GetTick>
 8002dfc:	0002      	movs	r2, r0
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b64      	cmp	r3, #100	; 0x64
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e277      	b.n	80032fa <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0a:	4b81      	ldr	r3, [pc, #516]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	2380      	movs	r3, #128	; 0x80
 8002e10:	029b      	lsls	r3, r3, #10
 8002e12:	4013      	ands	r3, r2
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x118>
 8002e16:	e000      	b.n	8002e1a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e18:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	4013      	ands	r3, r2
 8002e22:	d100      	bne.n	8002e26 <HAL_RCC_OscConfig+0x146>
 8002e24:	e069      	b.n	8002efa <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e26:	4b7a      	ldr	r3, [pc, #488]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	220c      	movs	r2, #12
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	d00b      	beq.n	8002e48 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e30:	4b77      	ldr	r3, [pc, #476]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	220c      	movs	r2, #12
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d11c      	bne.n	8002e76 <HAL_RCC_OscConfig+0x196>
 8002e3c:	4b74      	ldr	r3, [pc, #464]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	2380      	movs	r3, #128	; 0x80
 8002e42:	025b      	lsls	r3, r3, #9
 8002e44:	4013      	ands	r3, r2
 8002e46:	d116      	bne.n	8002e76 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e48:	4b71      	ldr	r3, [pc, #452]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d005      	beq.n	8002e5e <HAL_RCC_OscConfig+0x17e>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d001      	beq.n	8002e5e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e24d      	b.n	80032fa <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e5e:	4b6c      	ldr	r3, [pc, #432]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	22f8      	movs	r2, #248	; 0xf8
 8002e64:	4393      	bics	r3, r2
 8002e66:	0019      	movs	r1, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	00da      	lsls	r2, r3, #3
 8002e6e:	4b68      	ldr	r3, [pc, #416]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002e70:	430a      	orrs	r2, r1
 8002e72:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e74:	e041      	b.n	8002efa <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d024      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e7e:	4b64      	ldr	r3, [pc, #400]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	4b63      	ldr	r3, [pc, #396]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002e84:	2101      	movs	r1, #1
 8002e86:	430a      	orrs	r2, r1
 8002e88:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8a:	f7ff f99f 	bl	80021cc <HAL_GetTick>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e94:	f7ff f99a 	bl	80021cc <HAL_GetTick>
 8002e98:	0002      	movs	r2, r0
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e229      	b.n	80032fa <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea6:	4b5a      	ldr	r3, [pc, #360]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	4013      	ands	r3, r2
 8002eae:	d0f1      	beq.n	8002e94 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb0:	4b57      	ldr	r3, [pc, #348]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	22f8      	movs	r2, #248	; 0xf8
 8002eb6:	4393      	bics	r3, r2
 8002eb8:	0019      	movs	r1, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	00da      	lsls	r2, r3, #3
 8002ec0:	4b53      	ldr	r3, [pc, #332]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	e018      	b.n	8002efa <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ec8:	4b51      	ldr	r3, [pc, #324]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	4b50      	ldr	r3, [pc, #320]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002ece:	2101      	movs	r1, #1
 8002ed0:	438a      	bics	r2, r1
 8002ed2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed4:	f7ff f97a 	bl	80021cc <HAL_GetTick>
 8002ed8:	0003      	movs	r3, r0
 8002eda:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002edc:	e008      	b.n	8002ef0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ede:	f7ff f975 	bl	80021cc <HAL_GetTick>
 8002ee2:	0002      	movs	r2, r0
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e204      	b.n	80032fa <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef0:	4b47      	ldr	r3, [pc, #284]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d1f1      	bne.n	8002ede <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2208      	movs	r2, #8
 8002f00:	4013      	ands	r3, r2
 8002f02:	d036      	beq.n	8002f72 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d019      	beq.n	8002f40 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f0c:	4b40      	ldr	r3, [pc, #256]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002f0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f10:	4b3f      	ldr	r3, [pc, #252]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002f12:	2101      	movs	r1, #1
 8002f14:	430a      	orrs	r2, r1
 8002f16:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f18:	f7ff f958 	bl	80021cc <HAL_GetTick>
 8002f1c:	0003      	movs	r3, r0
 8002f1e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f22:	f7ff f953 	bl	80021cc <HAL_GetTick>
 8002f26:	0002      	movs	r2, r0
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e1e2      	b.n	80032fa <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f34:	4b36      	ldr	r3, [pc, #216]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	2202      	movs	r2, #2
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	d0f1      	beq.n	8002f22 <HAL_RCC_OscConfig+0x242>
 8002f3e:	e018      	b.n	8002f72 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f40:	4b33      	ldr	r3, [pc, #204]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002f42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f44:	4b32      	ldr	r3, [pc, #200]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002f46:	2101      	movs	r1, #1
 8002f48:	438a      	bics	r2, r1
 8002f4a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f4c:	f7ff f93e 	bl	80021cc <HAL_GetTick>
 8002f50:	0003      	movs	r3, r0
 8002f52:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f56:	f7ff f939 	bl	80021cc <HAL_GetTick>
 8002f5a:	0002      	movs	r2, r0
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e1c8      	b.n	80032fa <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f68:	4b29      	ldr	r3, [pc, #164]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d1f1      	bne.n	8002f56 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2204      	movs	r2, #4
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d100      	bne.n	8002f7e <HAL_RCC_OscConfig+0x29e>
 8002f7c:	e0b6      	b.n	80030ec <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f7e:	231f      	movs	r3, #31
 8002f80:	18fb      	adds	r3, r7, r3
 8002f82:	2200      	movs	r2, #0
 8002f84:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f86:	4b22      	ldr	r3, [pc, #136]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002f88:	69da      	ldr	r2, [r3, #28]
 8002f8a:	2380      	movs	r3, #128	; 0x80
 8002f8c:	055b      	lsls	r3, r3, #21
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d111      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f92:	4b1f      	ldr	r3, [pc, #124]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002f94:	69da      	ldr	r2, [r3, #28]
 8002f96:	4b1e      	ldr	r3, [pc, #120]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002f98:	2180      	movs	r1, #128	; 0x80
 8002f9a:	0549      	lsls	r1, r1, #21
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	61da      	str	r2, [r3, #28]
 8002fa0:	4b1b      	ldr	r3, [pc, #108]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8002fa2:	69da      	ldr	r2, [r3, #28]
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	055b      	lsls	r3, r3, #21
 8002fa8:	4013      	ands	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002fae:	231f      	movs	r3, #31
 8002fb0:	18fb      	adds	r3, r7, r3
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb6:	4b19      	ldr	r3, [pc, #100]	; (800301c <HAL_RCC_OscConfig+0x33c>)
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	2380      	movs	r3, #128	; 0x80
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d11a      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fc2:	4b16      	ldr	r3, [pc, #88]	; (800301c <HAL_RCC_OscConfig+0x33c>)
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	4b15      	ldr	r3, [pc, #84]	; (800301c <HAL_RCC_OscConfig+0x33c>)
 8002fc8:	2180      	movs	r1, #128	; 0x80
 8002fca:	0049      	lsls	r1, r1, #1
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fd0:	f7ff f8fc 	bl	80021cc <HAL_GetTick>
 8002fd4:	0003      	movs	r3, r0
 8002fd6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fda:	f7ff f8f7 	bl	80021cc <HAL_GetTick>
 8002fde:	0002      	movs	r2, r0
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b64      	cmp	r3, #100	; 0x64
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e186      	b.n	80032fa <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fec:	4b0b      	ldr	r3, [pc, #44]	; (800301c <HAL_RCC_OscConfig+0x33c>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d0f0      	beq.n	8002fda <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d10f      	bne.n	8003020 <HAL_RCC_OscConfig+0x340>
 8003000:	4b03      	ldr	r3, [pc, #12]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8003002:	6a1a      	ldr	r2, [r3, #32]
 8003004:	4b02      	ldr	r3, [pc, #8]	; (8003010 <HAL_RCC_OscConfig+0x330>)
 8003006:	2101      	movs	r1, #1
 8003008:	430a      	orrs	r2, r1
 800300a:	621a      	str	r2, [r3, #32]
 800300c:	e036      	b.n	800307c <HAL_RCC_OscConfig+0x39c>
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	40021000 	.word	0x40021000
 8003014:	fffeffff 	.word	0xfffeffff
 8003018:	fffbffff 	.word	0xfffbffff
 800301c:	40007000 	.word	0x40007000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10c      	bne.n	8003042 <HAL_RCC_OscConfig+0x362>
 8003028:	4bb6      	ldr	r3, [pc, #728]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 800302a:	6a1a      	ldr	r2, [r3, #32]
 800302c:	4bb5      	ldr	r3, [pc, #724]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 800302e:	2101      	movs	r1, #1
 8003030:	438a      	bics	r2, r1
 8003032:	621a      	str	r2, [r3, #32]
 8003034:	4bb3      	ldr	r3, [pc, #716]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 8003036:	6a1a      	ldr	r2, [r3, #32]
 8003038:	4bb2      	ldr	r3, [pc, #712]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 800303a:	2104      	movs	r1, #4
 800303c:	438a      	bics	r2, r1
 800303e:	621a      	str	r2, [r3, #32]
 8003040:	e01c      	b.n	800307c <HAL_RCC_OscConfig+0x39c>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b05      	cmp	r3, #5
 8003048:	d10c      	bne.n	8003064 <HAL_RCC_OscConfig+0x384>
 800304a:	4bae      	ldr	r3, [pc, #696]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 800304c:	6a1a      	ldr	r2, [r3, #32]
 800304e:	4bad      	ldr	r3, [pc, #692]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 8003050:	2104      	movs	r1, #4
 8003052:	430a      	orrs	r2, r1
 8003054:	621a      	str	r2, [r3, #32]
 8003056:	4bab      	ldr	r3, [pc, #684]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 8003058:	6a1a      	ldr	r2, [r3, #32]
 800305a:	4baa      	ldr	r3, [pc, #680]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 800305c:	2101      	movs	r1, #1
 800305e:	430a      	orrs	r2, r1
 8003060:	621a      	str	r2, [r3, #32]
 8003062:	e00b      	b.n	800307c <HAL_RCC_OscConfig+0x39c>
 8003064:	4ba7      	ldr	r3, [pc, #668]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 8003066:	6a1a      	ldr	r2, [r3, #32]
 8003068:	4ba6      	ldr	r3, [pc, #664]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 800306a:	2101      	movs	r1, #1
 800306c:	438a      	bics	r2, r1
 800306e:	621a      	str	r2, [r3, #32]
 8003070:	4ba4      	ldr	r3, [pc, #656]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 8003072:	6a1a      	ldr	r2, [r3, #32]
 8003074:	4ba3      	ldr	r3, [pc, #652]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 8003076:	2104      	movs	r1, #4
 8003078:	438a      	bics	r2, r1
 800307a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d014      	beq.n	80030ae <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003084:	f7ff f8a2 	bl	80021cc <HAL_GetTick>
 8003088:	0003      	movs	r3, r0
 800308a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800308c:	e009      	b.n	80030a2 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800308e:	f7ff f89d 	bl	80021cc <HAL_GetTick>
 8003092:	0002      	movs	r2, r0
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	4a9b      	ldr	r2, [pc, #620]	; (8003308 <HAL_RCC_OscConfig+0x628>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e12b      	b.n	80032fa <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a2:	4b98      	ldr	r3, [pc, #608]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	2202      	movs	r2, #2
 80030a8:	4013      	ands	r3, r2
 80030aa:	d0f0      	beq.n	800308e <HAL_RCC_OscConfig+0x3ae>
 80030ac:	e013      	b.n	80030d6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ae:	f7ff f88d 	bl	80021cc <HAL_GetTick>
 80030b2:	0003      	movs	r3, r0
 80030b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b6:	e009      	b.n	80030cc <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030b8:	f7ff f888 	bl	80021cc <HAL_GetTick>
 80030bc:	0002      	movs	r2, r0
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	4a91      	ldr	r2, [pc, #580]	; (8003308 <HAL_RCC_OscConfig+0x628>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e116      	b.n	80032fa <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030cc:	4b8d      	ldr	r3, [pc, #564]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	2202      	movs	r2, #2
 80030d2:	4013      	ands	r3, r2
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030d6:	231f      	movs	r3, #31
 80030d8:	18fb      	adds	r3, r7, r3
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d105      	bne.n	80030ec <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e0:	4b88      	ldr	r3, [pc, #544]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 80030e2:	69da      	ldr	r2, [r3, #28]
 80030e4:	4b87      	ldr	r3, [pc, #540]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 80030e6:	4989      	ldr	r1, [pc, #548]	; (800330c <HAL_RCC_OscConfig+0x62c>)
 80030e8:	400a      	ands	r2, r1
 80030ea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2210      	movs	r2, #16
 80030f2:	4013      	ands	r3, r2
 80030f4:	d063      	beq.n	80031be <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d12a      	bne.n	8003154 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80030fe:	4b81      	ldr	r3, [pc, #516]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 8003100:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003102:	4b80      	ldr	r3, [pc, #512]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 8003104:	2104      	movs	r1, #4
 8003106:	430a      	orrs	r2, r1
 8003108:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800310a:	4b7e      	ldr	r3, [pc, #504]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 800310c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800310e:	4b7d      	ldr	r3, [pc, #500]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 8003110:	2101      	movs	r1, #1
 8003112:	430a      	orrs	r2, r1
 8003114:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003116:	f7ff f859 	bl	80021cc <HAL_GetTick>
 800311a:	0003      	movs	r3, r0
 800311c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003120:	f7ff f854 	bl	80021cc <HAL_GetTick>
 8003124:	0002      	movs	r2, r0
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e0e3      	b.n	80032fa <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003132:	4b74      	ldr	r3, [pc, #464]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 8003134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003136:	2202      	movs	r2, #2
 8003138:	4013      	ands	r3, r2
 800313a:	d0f1      	beq.n	8003120 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800313c:	4b71      	ldr	r3, [pc, #452]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 800313e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003140:	22f8      	movs	r2, #248	; 0xf8
 8003142:	4393      	bics	r3, r2
 8003144:	0019      	movs	r1, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	00da      	lsls	r2, r3, #3
 800314c:	4b6d      	ldr	r3, [pc, #436]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 800314e:	430a      	orrs	r2, r1
 8003150:	635a      	str	r2, [r3, #52]	; 0x34
 8003152:	e034      	b.n	80031be <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	3305      	adds	r3, #5
 800315a:	d111      	bne.n	8003180 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800315c:	4b69      	ldr	r3, [pc, #420]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 800315e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003160:	4b68      	ldr	r3, [pc, #416]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 8003162:	2104      	movs	r1, #4
 8003164:	438a      	bics	r2, r1
 8003166:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003168:	4b66      	ldr	r3, [pc, #408]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 800316a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800316c:	22f8      	movs	r2, #248	; 0xf8
 800316e:	4393      	bics	r3, r2
 8003170:	0019      	movs	r1, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	00da      	lsls	r2, r3, #3
 8003178:	4b62      	ldr	r3, [pc, #392]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 800317a:	430a      	orrs	r2, r1
 800317c:	635a      	str	r2, [r3, #52]	; 0x34
 800317e:	e01e      	b.n	80031be <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003180:	4b60      	ldr	r3, [pc, #384]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 8003182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003184:	4b5f      	ldr	r3, [pc, #380]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 8003186:	2104      	movs	r1, #4
 8003188:	430a      	orrs	r2, r1
 800318a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800318c:	4b5d      	ldr	r3, [pc, #372]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 800318e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003190:	4b5c      	ldr	r3, [pc, #368]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 8003192:	2101      	movs	r1, #1
 8003194:	438a      	bics	r2, r1
 8003196:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003198:	f7ff f818 	bl	80021cc <HAL_GetTick>
 800319c:	0003      	movs	r3, r0
 800319e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80031a2:	f7ff f813 	bl	80021cc <HAL_GetTick>
 80031a6:	0002      	movs	r2, r0
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e0a2      	b.n	80032fa <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80031b4:	4b53      	ldr	r3, [pc, #332]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 80031b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b8:	2202      	movs	r2, #2
 80031ba:	4013      	ands	r3, r2
 80031bc:	d1f1      	bne.n	80031a2 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d100      	bne.n	80031c8 <HAL_RCC_OscConfig+0x4e8>
 80031c6:	e097      	b.n	80032f8 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031c8:	4b4e      	ldr	r3, [pc, #312]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	220c      	movs	r2, #12
 80031ce:	4013      	ands	r3, r2
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d100      	bne.n	80031d6 <HAL_RCC_OscConfig+0x4f6>
 80031d4:	e06b      	b.n	80032ae <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d14c      	bne.n	8003278 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031de:	4b49      	ldr	r3, [pc, #292]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	4b48      	ldr	r3, [pc, #288]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 80031e4:	494a      	ldr	r1, [pc, #296]	; (8003310 <HAL_RCC_OscConfig+0x630>)
 80031e6:	400a      	ands	r2, r1
 80031e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ea:	f7fe ffef 	bl	80021cc <HAL_GetTick>
 80031ee:	0003      	movs	r3, r0
 80031f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f4:	f7fe ffea 	bl	80021cc <HAL_GetTick>
 80031f8:	0002      	movs	r2, r0
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e079      	b.n	80032fa <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003206:	4b3f      	ldr	r3, [pc, #252]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	2380      	movs	r3, #128	; 0x80
 800320c:	049b      	lsls	r3, r3, #18
 800320e:	4013      	ands	r3, r2
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003212:	4b3c      	ldr	r3, [pc, #240]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003216:	220f      	movs	r2, #15
 8003218:	4393      	bics	r3, r2
 800321a:	0019      	movs	r1, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003220:	4b38      	ldr	r3, [pc, #224]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 8003222:	430a      	orrs	r2, r1
 8003224:	62da      	str	r2, [r3, #44]	; 0x2c
 8003226:	4b37      	ldr	r3, [pc, #220]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	4a3a      	ldr	r2, [pc, #232]	; (8003314 <HAL_RCC_OscConfig+0x634>)
 800322c:	4013      	ands	r3, r2
 800322e:	0019      	movs	r1, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	431a      	orrs	r2, r3
 800323a:	4b32      	ldr	r3, [pc, #200]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 800323c:	430a      	orrs	r2, r1
 800323e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003240:	4b30      	ldr	r3, [pc, #192]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	4b2f      	ldr	r3, [pc, #188]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 8003246:	2180      	movs	r1, #128	; 0x80
 8003248:	0449      	lsls	r1, r1, #17
 800324a:	430a      	orrs	r2, r1
 800324c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324e:	f7fe ffbd 	bl	80021cc <HAL_GetTick>
 8003252:	0003      	movs	r3, r0
 8003254:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003258:	f7fe ffb8 	bl	80021cc <HAL_GetTick>
 800325c:	0002      	movs	r2, r0
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e047      	b.n	80032fa <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800326a:	4b26      	ldr	r3, [pc, #152]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	2380      	movs	r3, #128	; 0x80
 8003270:	049b      	lsls	r3, r3, #18
 8003272:	4013      	ands	r3, r2
 8003274:	d0f0      	beq.n	8003258 <HAL_RCC_OscConfig+0x578>
 8003276:	e03f      	b.n	80032f8 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003278:	4b22      	ldr	r3, [pc, #136]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	4b21      	ldr	r3, [pc, #132]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 800327e:	4924      	ldr	r1, [pc, #144]	; (8003310 <HAL_RCC_OscConfig+0x630>)
 8003280:	400a      	ands	r2, r1
 8003282:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003284:	f7fe ffa2 	bl	80021cc <HAL_GetTick>
 8003288:	0003      	movs	r3, r0
 800328a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800328e:	f7fe ff9d 	bl	80021cc <HAL_GetTick>
 8003292:	0002      	movs	r2, r0
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e02c      	b.n	80032fa <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032a0:	4b18      	ldr	r3, [pc, #96]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	2380      	movs	r3, #128	; 0x80
 80032a6:	049b      	lsls	r3, r3, #18
 80032a8:	4013      	ands	r3, r2
 80032aa:	d1f0      	bne.n	800328e <HAL_RCC_OscConfig+0x5ae>
 80032ac:	e024      	b.n	80032f8 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d101      	bne.n	80032ba <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e01f      	b.n	80032fa <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80032ba:	4b12      	ldr	r3, [pc, #72]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80032c0:	4b10      	ldr	r3, [pc, #64]	; (8003304 <HAL_RCC_OscConfig+0x624>)
 80032c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	2380      	movs	r3, #128	; 0x80
 80032ca:	025b      	lsls	r3, r3, #9
 80032cc:	401a      	ands	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d10e      	bne.n	80032f4 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	220f      	movs	r2, #15
 80032da:	401a      	ands	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d107      	bne.n	80032f4 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	23f0      	movs	r3, #240	; 0xf0
 80032e8:	039b      	lsls	r3, r3, #14
 80032ea:	401a      	ands	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d001      	beq.n	80032f8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e000      	b.n	80032fa <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	0018      	movs	r0, r3
 80032fc:	46bd      	mov	sp, r7
 80032fe:	b008      	add	sp, #32
 8003300:	bd80      	pop	{r7, pc}
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	40021000 	.word	0x40021000
 8003308:	00001388 	.word	0x00001388
 800330c:	efffffff 	.word	0xefffffff
 8003310:	feffffff 	.word	0xfeffffff
 8003314:	ffc2ffff 	.word	0xffc2ffff

08003318 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e0b3      	b.n	8003494 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800332c:	4b5b      	ldr	r3, [pc, #364]	; (800349c <HAL_RCC_ClockConfig+0x184>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2201      	movs	r2, #1
 8003332:	4013      	ands	r3, r2
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d911      	bls.n	800335e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333a:	4b58      	ldr	r3, [pc, #352]	; (800349c <HAL_RCC_ClockConfig+0x184>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2201      	movs	r2, #1
 8003340:	4393      	bics	r3, r2
 8003342:	0019      	movs	r1, r3
 8003344:	4b55      	ldr	r3, [pc, #340]	; (800349c <HAL_RCC_ClockConfig+0x184>)
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800334c:	4b53      	ldr	r3, [pc, #332]	; (800349c <HAL_RCC_ClockConfig+0x184>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2201      	movs	r2, #1
 8003352:	4013      	ands	r3, r2
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d001      	beq.n	800335e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e09a      	b.n	8003494 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2202      	movs	r2, #2
 8003364:	4013      	ands	r3, r2
 8003366:	d015      	beq.n	8003394 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2204      	movs	r2, #4
 800336e:	4013      	ands	r3, r2
 8003370:	d006      	beq.n	8003380 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003372:	4b4b      	ldr	r3, [pc, #300]	; (80034a0 <HAL_RCC_ClockConfig+0x188>)
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	4b4a      	ldr	r3, [pc, #296]	; (80034a0 <HAL_RCC_ClockConfig+0x188>)
 8003378:	21e0      	movs	r1, #224	; 0xe0
 800337a:	00c9      	lsls	r1, r1, #3
 800337c:	430a      	orrs	r2, r1
 800337e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003380:	4b47      	ldr	r3, [pc, #284]	; (80034a0 <HAL_RCC_ClockConfig+0x188>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	22f0      	movs	r2, #240	; 0xf0
 8003386:	4393      	bics	r3, r2
 8003388:	0019      	movs	r1, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	4b44      	ldr	r3, [pc, #272]	; (80034a0 <HAL_RCC_ClockConfig+0x188>)
 8003390:	430a      	orrs	r2, r1
 8003392:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2201      	movs	r2, #1
 800339a:	4013      	ands	r3, r2
 800339c:	d040      	beq.n	8003420 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d107      	bne.n	80033b6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a6:	4b3e      	ldr	r3, [pc, #248]	; (80034a0 <HAL_RCC_ClockConfig+0x188>)
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	2380      	movs	r3, #128	; 0x80
 80033ac:	029b      	lsls	r3, r3, #10
 80033ae:	4013      	ands	r3, r2
 80033b0:	d114      	bne.n	80033dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e06e      	b.n	8003494 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d107      	bne.n	80033ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033be:	4b38      	ldr	r3, [pc, #224]	; (80034a0 <HAL_RCC_ClockConfig+0x188>)
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	2380      	movs	r3, #128	; 0x80
 80033c4:	049b      	lsls	r3, r3, #18
 80033c6:	4013      	ands	r3, r2
 80033c8:	d108      	bne.n	80033dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e062      	b.n	8003494 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ce:	4b34      	ldr	r3, [pc, #208]	; (80034a0 <HAL_RCC_ClockConfig+0x188>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2202      	movs	r2, #2
 80033d4:	4013      	ands	r3, r2
 80033d6:	d101      	bne.n	80033dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e05b      	b.n	8003494 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033dc:	4b30      	ldr	r3, [pc, #192]	; (80034a0 <HAL_RCC_ClockConfig+0x188>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2203      	movs	r2, #3
 80033e2:	4393      	bics	r3, r2
 80033e4:	0019      	movs	r1, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	4b2d      	ldr	r3, [pc, #180]	; (80034a0 <HAL_RCC_ClockConfig+0x188>)
 80033ec:	430a      	orrs	r2, r1
 80033ee:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033f0:	f7fe feec 	bl	80021cc <HAL_GetTick>
 80033f4:	0003      	movs	r3, r0
 80033f6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f8:	e009      	b.n	800340e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033fa:	f7fe fee7 	bl	80021cc <HAL_GetTick>
 80033fe:	0002      	movs	r2, r0
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	4a27      	ldr	r2, [pc, #156]	; (80034a4 <HAL_RCC_ClockConfig+0x18c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d901      	bls.n	800340e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e042      	b.n	8003494 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340e:	4b24      	ldr	r3, [pc, #144]	; (80034a0 <HAL_RCC_ClockConfig+0x188>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	220c      	movs	r2, #12
 8003414:	401a      	ands	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	429a      	cmp	r2, r3
 800341e:	d1ec      	bne.n	80033fa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003420:	4b1e      	ldr	r3, [pc, #120]	; (800349c <HAL_RCC_ClockConfig+0x184>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2201      	movs	r2, #1
 8003426:	4013      	ands	r3, r2
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	429a      	cmp	r2, r3
 800342c:	d211      	bcs.n	8003452 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342e:	4b1b      	ldr	r3, [pc, #108]	; (800349c <HAL_RCC_ClockConfig+0x184>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2201      	movs	r2, #1
 8003434:	4393      	bics	r3, r2
 8003436:	0019      	movs	r1, r3
 8003438:	4b18      	ldr	r3, [pc, #96]	; (800349c <HAL_RCC_ClockConfig+0x184>)
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003440:	4b16      	ldr	r3, [pc, #88]	; (800349c <HAL_RCC_ClockConfig+0x184>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2201      	movs	r2, #1
 8003446:	4013      	ands	r3, r2
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	429a      	cmp	r2, r3
 800344c:	d001      	beq.n	8003452 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e020      	b.n	8003494 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2204      	movs	r2, #4
 8003458:	4013      	ands	r3, r2
 800345a:	d009      	beq.n	8003470 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800345c:	4b10      	ldr	r3, [pc, #64]	; (80034a0 <HAL_RCC_ClockConfig+0x188>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	4a11      	ldr	r2, [pc, #68]	; (80034a8 <HAL_RCC_ClockConfig+0x190>)
 8003462:	4013      	ands	r3, r2
 8003464:	0019      	movs	r1, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	4b0d      	ldr	r3, [pc, #52]	; (80034a0 <HAL_RCC_ClockConfig+0x188>)
 800346c:	430a      	orrs	r2, r1
 800346e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003470:	f000 f820 	bl	80034b4 <HAL_RCC_GetSysClockFreq>
 8003474:	0001      	movs	r1, r0
 8003476:	4b0a      	ldr	r3, [pc, #40]	; (80034a0 <HAL_RCC_ClockConfig+0x188>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	091b      	lsrs	r3, r3, #4
 800347c:	220f      	movs	r2, #15
 800347e:	4013      	ands	r3, r2
 8003480:	4a0a      	ldr	r2, [pc, #40]	; (80034ac <HAL_RCC_ClockConfig+0x194>)
 8003482:	5cd3      	ldrb	r3, [r2, r3]
 8003484:	000a      	movs	r2, r1
 8003486:	40da      	lsrs	r2, r3
 8003488:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <HAL_RCC_ClockConfig+0x198>)
 800348a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800348c:	2000      	movs	r0, #0
 800348e:	f7fe fe57 	bl	8002140 <HAL_InitTick>
  
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	0018      	movs	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	b004      	add	sp, #16
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40022000 	.word	0x40022000
 80034a0:	40021000 	.word	0x40021000
 80034a4:	00001388 	.word	0x00001388
 80034a8:	fffff8ff 	.word	0xfffff8ff
 80034ac:	08005d98 	.word	0x08005d98
 80034b0:	20000004 	.word	0x20000004

080034b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034b4:	b590      	push	{r4, r7, lr}
 80034b6:	b08f      	sub	sp, #60	; 0x3c
 80034b8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80034ba:	2314      	movs	r3, #20
 80034bc:	18fb      	adds	r3, r7, r3
 80034be:	4a2b      	ldr	r2, [pc, #172]	; (800356c <HAL_RCC_GetSysClockFreq+0xb8>)
 80034c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80034c2:	c313      	stmia	r3!, {r0, r1, r4}
 80034c4:	6812      	ldr	r2, [r2, #0]
 80034c6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80034c8:	1d3b      	adds	r3, r7, #4
 80034ca:	4a29      	ldr	r2, [pc, #164]	; (8003570 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80034ce:	c313      	stmia	r3!, {r0, r1, r4}
 80034d0:	6812      	ldr	r2, [r2, #0]
 80034d2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034d8:	2300      	movs	r3, #0
 80034da:	62bb      	str	r3, [r7, #40]	; 0x28
 80034dc:	2300      	movs	r3, #0
 80034de:	637b      	str	r3, [r7, #52]	; 0x34
 80034e0:	2300      	movs	r3, #0
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80034e8:	4b22      	ldr	r3, [pc, #136]	; (8003574 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f0:	220c      	movs	r2, #12
 80034f2:	4013      	ands	r3, r2
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d002      	beq.n	80034fe <HAL_RCC_GetSysClockFreq+0x4a>
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d003      	beq.n	8003504 <HAL_RCC_GetSysClockFreq+0x50>
 80034fc:	e02d      	b.n	800355a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034fe:	4b1e      	ldr	r3, [pc, #120]	; (8003578 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003500:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003502:	e02d      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003506:	0c9b      	lsrs	r3, r3, #18
 8003508:	220f      	movs	r2, #15
 800350a:	4013      	ands	r3, r2
 800350c:	2214      	movs	r2, #20
 800350e:	18ba      	adds	r2, r7, r2
 8003510:	5cd3      	ldrb	r3, [r2, r3]
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003514:	4b17      	ldr	r3, [pc, #92]	; (8003574 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003518:	220f      	movs	r2, #15
 800351a:	4013      	ands	r3, r2
 800351c:	1d3a      	adds	r2, r7, #4
 800351e:	5cd3      	ldrb	r3, [r2, r3]
 8003520:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003524:	2380      	movs	r3, #128	; 0x80
 8003526:	025b      	lsls	r3, r3, #9
 8003528:	4013      	ands	r3, r2
 800352a:	d009      	beq.n	8003540 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800352c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800352e:	4812      	ldr	r0, [pc, #72]	; (8003578 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003530:	f7fc fdf2 	bl	8000118 <__udivsi3>
 8003534:	0003      	movs	r3, r0
 8003536:	001a      	movs	r2, r3
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	4353      	muls	r3, r2
 800353c:	637b      	str	r3, [r7, #52]	; 0x34
 800353e:	e009      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003540:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003542:	000a      	movs	r2, r1
 8003544:	0152      	lsls	r2, r2, #5
 8003546:	1a52      	subs	r2, r2, r1
 8003548:	0193      	lsls	r3, r2, #6
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	185b      	adds	r3, r3, r1
 8003550:	021b      	lsls	r3, r3, #8
 8003552:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8003554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003556:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003558:	e002      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800355a:	4b07      	ldr	r3, [pc, #28]	; (8003578 <HAL_RCC_GetSysClockFreq+0xc4>)
 800355c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800355e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003562:	0018      	movs	r0, r3
 8003564:	46bd      	mov	sp, r7
 8003566:	b00f      	add	sp, #60	; 0x3c
 8003568:	bd90      	pop	{r4, r7, pc}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	08005d78 	.word	0x08005d78
 8003570:	08005d88 	.word	0x08005d88
 8003574:	40021000 	.word	0x40021000
 8003578:	007a1200 	.word	0x007a1200

0800357c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003580:	4b02      	ldr	r3, [pc, #8]	; (800358c <HAL_RCC_GetHCLKFreq+0x10>)
 8003582:	681b      	ldr	r3, [r3, #0]
}
 8003584:	0018      	movs	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	20000004 	.word	0x20000004

08003590 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003594:	f7ff fff2 	bl	800357c <HAL_RCC_GetHCLKFreq>
 8003598:	0001      	movs	r1, r0
 800359a:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	0a1b      	lsrs	r3, r3, #8
 80035a0:	2207      	movs	r2, #7
 80035a2:	4013      	ands	r3, r2
 80035a4:	4a04      	ldr	r2, [pc, #16]	; (80035b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035a6:	5cd3      	ldrb	r3, [r2, r3]
 80035a8:	40d9      	lsrs	r1, r3
 80035aa:	000b      	movs	r3, r1
}    
 80035ac:	0018      	movs	r0, r3
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	40021000 	.word	0x40021000
 80035b8:	08005da8 	.word	0x08005da8

080035bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	2380      	movs	r3, #128	; 0x80
 80035d2:	025b      	lsls	r3, r3, #9
 80035d4:	4013      	ands	r3, r2
 80035d6:	d100      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80035d8:	e08f      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80035da:	2317      	movs	r3, #23
 80035dc:	18fb      	adds	r3, r7, r3
 80035de:	2200      	movs	r2, #0
 80035e0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035e2:	4b57      	ldr	r3, [pc, #348]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80035e4:	69da      	ldr	r2, [r3, #28]
 80035e6:	2380      	movs	r3, #128	; 0x80
 80035e8:	055b      	lsls	r3, r3, #21
 80035ea:	4013      	ands	r3, r2
 80035ec:	d111      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035ee:	4b54      	ldr	r3, [pc, #336]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80035f0:	69da      	ldr	r2, [r3, #28]
 80035f2:	4b53      	ldr	r3, [pc, #332]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80035f4:	2180      	movs	r1, #128	; 0x80
 80035f6:	0549      	lsls	r1, r1, #21
 80035f8:	430a      	orrs	r2, r1
 80035fa:	61da      	str	r2, [r3, #28]
 80035fc:	4b50      	ldr	r3, [pc, #320]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80035fe:	69da      	ldr	r2, [r3, #28]
 8003600:	2380      	movs	r3, #128	; 0x80
 8003602:	055b      	lsls	r3, r3, #21
 8003604:	4013      	ands	r3, r2
 8003606:	60bb      	str	r3, [r7, #8]
 8003608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800360a:	2317      	movs	r3, #23
 800360c:	18fb      	adds	r3, r7, r3
 800360e:	2201      	movs	r2, #1
 8003610:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003612:	4b4c      	ldr	r3, [pc, #304]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	2380      	movs	r3, #128	; 0x80
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	4013      	ands	r3, r2
 800361c:	d11a      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800361e:	4b49      	ldr	r3, [pc, #292]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	4b48      	ldr	r3, [pc, #288]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003624:	2180      	movs	r1, #128	; 0x80
 8003626:	0049      	lsls	r1, r1, #1
 8003628:	430a      	orrs	r2, r1
 800362a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800362c:	f7fe fdce 	bl	80021cc <HAL_GetTick>
 8003630:	0003      	movs	r3, r0
 8003632:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003634:	e008      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003636:	f7fe fdc9 	bl	80021cc <HAL_GetTick>
 800363a:	0002      	movs	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b64      	cmp	r3, #100	; 0x64
 8003642:	d901      	bls.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e077      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003648:	4b3e      	ldr	r3, [pc, #248]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	4013      	ands	r3, r2
 8003652:	d0f0      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003654:	4b3a      	ldr	r3, [pc, #232]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003656:	6a1a      	ldr	r2, [r3, #32]
 8003658:	23c0      	movs	r3, #192	; 0xc0
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4013      	ands	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d034      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	23c0      	movs	r3, #192	; 0xc0
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4013      	ands	r3, r2
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	429a      	cmp	r2, r3
 8003674:	d02c      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003676:	4b32      	ldr	r3, [pc, #200]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	4a33      	ldr	r2, [pc, #204]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800367c:	4013      	ands	r3, r2
 800367e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003680:	4b2f      	ldr	r3, [pc, #188]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003682:	6a1a      	ldr	r2, [r3, #32]
 8003684:	4b2e      	ldr	r3, [pc, #184]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003686:	2180      	movs	r1, #128	; 0x80
 8003688:	0249      	lsls	r1, r1, #9
 800368a:	430a      	orrs	r2, r1
 800368c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800368e:	4b2c      	ldr	r3, [pc, #176]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003690:	6a1a      	ldr	r2, [r3, #32]
 8003692:	4b2b      	ldr	r3, [pc, #172]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003694:	492d      	ldr	r1, [pc, #180]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003696:	400a      	ands	r2, r1
 8003698:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800369a:	4b29      	ldr	r3, [pc, #164]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2201      	movs	r2, #1
 80036a4:	4013      	ands	r3, r2
 80036a6:	d013      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a8:	f7fe fd90 	bl	80021cc <HAL_GetTick>
 80036ac:	0003      	movs	r3, r0
 80036ae:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b0:	e009      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b2:	f7fe fd8b 	bl	80021cc <HAL_GetTick>
 80036b6:	0002      	movs	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	4a24      	ldr	r2, [pc, #144]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e038      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c6:	4b1e      	ldr	r3, [pc, #120]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	2202      	movs	r2, #2
 80036cc:	4013      	ands	r3, r2
 80036ce:	d0f0      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036d0:	4b1b      	ldr	r3, [pc, #108]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	4a1c      	ldr	r2, [pc, #112]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80036d6:	4013      	ands	r3, r2
 80036d8:	0019      	movs	r1, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	4b18      	ldr	r3, [pc, #96]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80036e0:	430a      	orrs	r2, r1
 80036e2:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036e4:	2317      	movs	r3, #23
 80036e6:	18fb      	adds	r3, r7, r3
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d105      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ee:	4b14      	ldr	r3, [pc, #80]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80036f0:	69da      	ldr	r2, [r3, #28]
 80036f2:	4b13      	ldr	r3, [pc, #76]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80036f4:	4917      	ldr	r1, [pc, #92]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80036f6:	400a      	ands	r2, r1
 80036f8:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2201      	movs	r2, #1
 8003700:	4013      	ands	r3, r2
 8003702:	d009      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003704:	4b0e      	ldr	r3, [pc, #56]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003708:	2203      	movs	r2, #3
 800370a:	4393      	bics	r3, r2
 800370c:	0019      	movs	r1, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689a      	ldr	r2, [r3, #8]
 8003712:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003714:	430a      	orrs	r2, r1
 8003716:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2220      	movs	r2, #32
 800371e:	4013      	ands	r3, r2
 8003720:	d009      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003722:	4b07      	ldr	r3, [pc, #28]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	2210      	movs	r2, #16
 8003728:	4393      	bics	r3, r2
 800372a:	0019      	movs	r1, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	4b03      	ldr	r3, [pc, #12]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003732:	430a      	orrs	r2, r1
 8003734:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	0018      	movs	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	b006      	add	sp, #24
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40021000 	.word	0x40021000
 8003744:	40007000 	.word	0x40007000
 8003748:	fffffcff 	.word	0xfffffcff
 800374c:	fffeffff 	.word	0xfffeffff
 8003750:	00001388 	.word	0x00001388
 8003754:	efffffff 	.word	0xefffffff

08003758 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e044      	b.n	80037f4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800376e:	2b00      	cmp	r3, #0
 8003770:	d107      	bne.n	8003782 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2270      	movs	r2, #112	; 0x70
 8003776:	2100      	movs	r1, #0
 8003778:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	0018      	movs	r0, r3
 800377e:	f7fe fad5 	bl	8001d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2224      	movs	r2, #36	; 0x24
 8003786:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2101      	movs	r1, #1
 8003794:	438a      	bics	r2, r1
 8003796:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	0018      	movs	r0, r3
 800379c:	f000 fa18 	bl	8003bd0 <UART_SetConfig>
 80037a0:	0003      	movs	r3, r0
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d101      	bne.n	80037aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e024      	b.n	80037f4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	0018      	movs	r0, r3
 80037b6:	f000 fb91 	bl	8003edc <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	490d      	ldr	r1, [pc, #52]	; (80037fc <HAL_UART_Init+0xa4>)
 80037c6:	400a      	ands	r2, r1
 80037c8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2108      	movs	r1, #8
 80037d6:	438a      	bics	r2, r1
 80037d8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2101      	movs	r1, #1
 80037e6:	430a      	orrs	r2, r1
 80037e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	0018      	movs	r0, r3
 80037ee:	f000 fc29 	bl	8004044 <UART_CheckIdleState>
 80037f2:	0003      	movs	r3, r0
}
 80037f4:	0018      	movs	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b002      	add	sp, #8
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	fffff7ff 	.word	0xfffff7ff

08003800 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e028      	b.n	8003864 <HAL_UART_DeInit+0x64>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2224      	movs	r2, #36	; 0x24
 8003816:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2101      	movs	r1, #1
 8003824:	438a      	bics	r2, r1
 8003826:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2200      	movs	r2, #0
 8003836:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2200      	movs	r2, #0
 800383e:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	0018      	movs	r0, r3
 8003844:	f7fe fb4e 	bl	8001ee4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2270      	movs	r2, #112	; 0x70
 800385e:	2100      	movs	r1, #0
 8003860:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	0018      	movs	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	b002      	add	sp, #8
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08a      	sub	sp, #40	; 0x28
 8003870:	af02      	add	r7, sp, #8
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	603b      	str	r3, [r7, #0]
 8003878:	1dbb      	adds	r3, r7, #6
 800387a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003880:	2b20      	cmp	r3, #32
 8003882:	d000      	beq.n	8003886 <HAL_UART_Transmit+0x1a>
 8003884:	e095      	b.n	80039b2 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <HAL_UART_Transmit+0x28>
 800388c:	1dbb      	adds	r3, r7, #6
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e08d      	b.n	80039b4 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	2380      	movs	r3, #128	; 0x80
 800389e:	015b      	lsls	r3, r3, #5
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d109      	bne.n	80038b8 <HAL_UART_Transmit+0x4c>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d105      	bne.n	80038b8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2201      	movs	r2, #1
 80038b0:	4013      	ands	r3, r2
 80038b2:	d001      	beq.n	80038b8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e07d      	b.n	80039b4 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2270      	movs	r2, #112	; 0x70
 80038bc:	5c9b      	ldrb	r3, [r3, r2]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d101      	bne.n	80038c6 <HAL_UART_Transmit+0x5a>
 80038c2:	2302      	movs	r3, #2
 80038c4:	e076      	b.n	80039b4 <HAL_UART_Transmit+0x148>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2270      	movs	r2, #112	; 0x70
 80038ca:	2101      	movs	r1, #1
 80038cc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2221      	movs	r2, #33	; 0x21
 80038d8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80038da:	f7fe fc77 	bl	80021cc <HAL_GetTick>
 80038de:	0003      	movs	r3, r0
 80038e0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1dba      	adds	r2, r7, #6
 80038e6:	2150      	movs	r1, #80	; 0x50
 80038e8:	8812      	ldrh	r2, [r2, #0]
 80038ea:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	1dba      	adds	r2, r7, #6
 80038f0:	2152      	movs	r1, #82	; 0x52
 80038f2:	8812      	ldrh	r2, [r2, #0]
 80038f4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	2380      	movs	r3, #128	; 0x80
 80038fc:	015b      	lsls	r3, r3, #5
 80038fe:	429a      	cmp	r2, r3
 8003900:	d108      	bne.n	8003914 <HAL_UART_Transmit+0xa8>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d104      	bne.n	8003914 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 800390a:	2300      	movs	r3, #0
 800390c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	e003      	b.n	800391c <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003918:	2300      	movs	r3, #0
 800391a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800391c:	e02d      	b.n	800397a <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	0013      	movs	r3, r2
 8003928:	2200      	movs	r2, #0
 800392a:	2180      	movs	r1, #128	; 0x80
 800392c:	f000 fbd0 	bl	80040d0 <UART_WaitOnFlagUntilTimeout>
 8003930:	1e03      	subs	r3, r0, #0
 8003932:	d001      	beq.n	8003938 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e03d      	b.n	80039b4 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10b      	bne.n	8003956 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	881a      	ldrh	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	05d2      	lsls	r2, r2, #23
 8003948:	0dd2      	lsrs	r2, r2, #23
 800394a:	b292      	uxth	r2, r2
 800394c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	3302      	adds	r3, #2
 8003952:	61bb      	str	r3, [r7, #24]
 8003954:	e008      	b.n	8003968 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	781a      	ldrb	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	b292      	uxth	r2, r2
 8003960:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	3301      	adds	r3, #1
 8003966:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2252      	movs	r2, #82	; 0x52
 800396c:	5a9b      	ldrh	r3, [r3, r2]
 800396e:	b29b      	uxth	r3, r3
 8003970:	3b01      	subs	r3, #1
 8003972:	b299      	uxth	r1, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2252      	movs	r2, #82	; 0x52
 8003978:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2252      	movs	r2, #82	; 0x52
 800397e:	5a9b      	ldrh	r3, [r3, r2]
 8003980:	b29b      	uxth	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1cb      	bne.n	800391e <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	0013      	movs	r3, r2
 8003990:	2200      	movs	r2, #0
 8003992:	2140      	movs	r1, #64	; 0x40
 8003994:	f000 fb9c 	bl	80040d0 <UART_WaitOnFlagUntilTimeout>
 8003998:	1e03      	subs	r3, r0, #0
 800399a:	d001      	beq.n	80039a0 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e009      	b.n	80039b4 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2220      	movs	r2, #32
 80039a4:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2270      	movs	r2, #112	; 0x70
 80039aa:	2100      	movs	r1, #0
 80039ac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	e000      	b.n	80039b4 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80039b2:	2302      	movs	r3, #2
  }
}
 80039b4:	0018      	movs	r0, r3
 80039b6:	46bd      	mov	sp, r7
 80039b8:	b008      	add	sp, #32
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	1dbb      	adds	r3, r7, #6
 80039c8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039ce:	2b20      	cmp	r3, #32
 80039d0:	d000      	beq.n	80039d4 <HAL_UART_Receive_DMA+0x18>
 80039d2:	e07f      	b.n	8003ad4 <HAL_UART_Receive_DMA+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_UART_Receive_DMA+0x26>
 80039da:	1dbb      	adds	r3, r7, #6
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e077      	b.n	8003ad6 <HAL_UART_Receive_DMA+0x11a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	2380      	movs	r3, #128	; 0x80
 80039ec:	015b      	lsls	r3, r3, #5
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d109      	bne.n	8003a06 <HAL_UART_Receive_DMA+0x4a>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d105      	bne.n	8003a06 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2201      	movs	r2, #1
 80039fe:	4013      	ands	r3, r2
 8003a00:	d001      	beq.n	8003a06 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e067      	b.n	8003ad6 <HAL_UART_Receive_DMA+0x11a>
      }
    }

    __HAL_LOCK(huart);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2270      	movs	r2, #112	; 0x70
 8003a0a:	5c9b      	ldrb	r3, [r3, r2]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_UART_Receive_DMA+0x58>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e060      	b.n	8003ad6 <HAL_UART_Receive_DMA+0x11a>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2270      	movs	r2, #112	; 0x70
 8003a18:	2101      	movs	r1, #1
 8003a1a:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1dba      	adds	r2, r7, #6
 8003a26:	2158      	movs	r1, #88	; 0x58
 8003a28:	8812      	ldrh	r2, [r2, #0]
 8003a2a:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2222      	movs	r2, #34	; 0x22
 8003a36:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d02a      	beq.n	8003a96 <HAL_UART_Receive_DMA+0xda>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a44:	4a26      	ldr	r2, [pc, #152]	; (8003ae0 <HAL_UART_Receive_DMA+0x124>)
 8003a46:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a4c:	4a25      	ldr	r2, [pc, #148]	; (8003ae4 <HAL_UART_Receive_DMA+0x128>)
 8003a4e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a54:	4a24      	ldr	r2, [pc, #144]	; (8003ae8 <HAL_UART_Receive_DMA+0x12c>)
 8003a56:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3324      	adds	r3, #36	; 0x24
 8003a6a:	0019      	movs	r1, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a70:	001a      	movs	r2, r3
 8003a72:	1dbb      	adds	r3, r7, #6
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	f7fe fd44 	bl	8002502 <HAL_DMA_Start_IT>
 8003a7a:	1e03      	subs	r3, r0, #0
 8003a7c:	d00b      	beq.n	8003a96 <HAL_UART_Receive_DMA+0xda>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2210      	movs	r2, #16
 8003a82:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2270      	movs	r2, #112	; 0x70
 8003a88:	2100      	movs	r1, #0
 8003a8a:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e01f      	b.n	8003ad6 <HAL_UART_Receive_DMA+0x11a>
      }
    }
    __HAL_UNLOCK(huart);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2270      	movs	r2, #112	; 0x70
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2180      	movs	r1, #128	; 0x80
 8003aaa:	0049      	lsls	r1, r1, #1
 8003aac:	430a      	orrs	r2, r1
 8003aae:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2101      	movs	r1, #1
 8003abc:	430a      	orrs	r2, r1
 8003abe:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689a      	ldr	r2, [r3, #8]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2140      	movs	r1, #64	; 0x40
 8003acc:	430a      	orrs	r2, r1
 8003ace:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	e000      	b.n	8003ad6 <HAL_UART_Receive_DMA+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003ad4:	2302      	movs	r3, #2
  }
}
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	b004      	add	sp, #16
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	46c0      	nop			; (mov r8, r8)
 8003ae0:	08004235 	.word	0x08004235
 8003ae4:	0800429d 	.word	0x0800429d
 8003ae8:	080042bb 	.word	0x080042bb

08003aec <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4927      	ldr	r1, [pc, #156]	; (8003b9c <HAL_UART_AbortReceive+0xb0>)
 8003b00:	400a      	ands	r2, r1
 8003b02:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2101      	movs	r1, #1
 8003b10:	438a      	bics	r2, r1
 8003b12:	609a      	str	r2, [r3, #8]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	2240      	movs	r2, #64	; 0x40
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	2b40      	cmp	r3, #64	; 0x40
 8003b20:	d123      	bne.n	8003b6a <HAL_UART_AbortReceive+0x7e>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2140      	movs	r1, #64	; 0x40
 8003b2e:	438a      	bics	r2, r1
 8003b30:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d017      	beq.n	8003b6a <HAL_UART_AbortReceive+0x7e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b3e:	2200      	movs	r2, #0
 8003b40:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b46:	0018      	movs	r0, r3
 8003b48:	f7fe fd41 	bl	80025ce <HAL_DMA_Abort>
 8003b4c:	1e03      	subs	r3, r0, #0
 8003b4e:	d00c      	beq.n	8003b6a <HAL_UART_AbortReceive+0x7e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b54:	0018      	movs	r0, r3
 8003b56:	f7fe fe14 	bl	8002782 <HAL_DMA_GetError>
 8003b5a:	0003      	movs	r3, r0
 8003b5c:	2b20      	cmp	r3, #32
 8003b5e:	d104      	bne.n	8003b6a <HAL_UART_AbortReceive+0x7e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2210      	movs	r2, #16
 8003b64:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e013      	b.n	8003b92 <HAL_UART_AbortReceive+0xa6>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	225a      	movs	r2, #90	; 0x5a
 8003b6e:	2100      	movs	r1, #0
 8003b70:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	220f      	movs	r2, #15
 8003b78:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	699a      	ldr	r2, [r3, #24]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2108      	movs	r1, #8
 8003b86:	430a      	orrs	r2, r1
 8003b88:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	679a      	str	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	0018      	movs	r0, r3
 8003b94:	46bd      	mov	sp, r7
 8003b96:	b002      	add	sp, #8
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	fffffedf 	.word	0xfffffedf

08003ba0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003ba8:	46c0      	nop			; (mov r8, r8)
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b002      	add	sp, #8
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003bb8:	46c0      	nop			; (mov r8, r8)
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	b002      	add	sp, #8
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003bc8:	46c0      	nop			; (mov r8, r8)
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	b002      	add	sp, #8
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b088      	sub	sp, #32
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bdc:	2317      	movs	r3, #23
 8003bde:	18fb      	adds	r3, r7, r3
 8003be0:	2200      	movs	r2, #0
 8003be2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4aad      	ldr	r2, [pc, #692]	; (8003eb8 <UART_SetConfig+0x2e8>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	0019      	movs	r1, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	4aa8      	ldr	r2, [pc, #672]	; (8003ebc <UART_SetConfig+0x2ec>)
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	0019      	movs	r1, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	4a9f      	ldr	r2, [pc, #636]	; (8003ec0 <UART_SetConfig+0x2f0>)
 8003c42:	4013      	ands	r3, r2
 8003c44:	0019      	movs	r1, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a9b      	ldr	r2, [pc, #620]	; (8003ec4 <UART_SetConfig+0x2f4>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d125      	bne.n	8003ca6 <UART_SetConfig+0xd6>
 8003c5a:	4b9b      	ldr	r3, [pc, #620]	; (8003ec8 <UART_SetConfig+0x2f8>)
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	2203      	movs	r2, #3
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d00f      	beq.n	8003c86 <UART_SetConfig+0xb6>
 8003c66:	d304      	bcc.n	8003c72 <UART_SetConfig+0xa2>
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d011      	beq.n	8003c90 <UART_SetConfig+0xc0>
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	d005      	beq.n	8003c7c <UART_SetConfig+0xac>
 8003c70:	e013      	b.n	8003c9a <UART_SetConfig+0xca>
 8003c72:	231f      	movs	r3, #31
 8003c74:	18fb      	adds	r3, r7, r3
 8003c76:	2200      	movs	r2, #0
 8003c78:	701a      	strb	r2, [r3, #0]
 8003c7a:	e022      	b.n	8003cc2 <UART_SetConfig+0xf2>
 8003c7c:	231f      	movs	r3, #31
 8003c7e:	18fb      	adds	r3, r7, r3
 8003c80:	2202      	movs	r2, #2
 8003c82:	701a      	strb	r2, [r3, #0]
 8003c84:	e01d      	b.n	8003cc2 <UART_SetConfig+0xf2>
 8003c86:	231f      	movs	r3, #31
 8003c88:	18fb      	adds	r3, r7, r3
 8003c8a:	2204      	movs	r2, #4
 8003c8c:	701a      	strb	r2, [r3, #0]
 8003c8e:	e018      	b.n	8003cc2 <UART_SetConfig+0xf2>
 8003c90:	231f      	movs	r3, #31
 8003c92:	18fb      	adds	r3, r7, r3
 8003c94:	2208      	movs	r2, #8
 8003c96:	701a      	strb	r2, [r3, #0]
 8003c98:	e013      	b.n	8003cc2 <UART_SetConfig+0xf2>
 8003c9a:	231f      	movs	r3, #31
 8003c9c:	18fb      	adds	r3, r7, r3
 8003c9e:	2210      	movs	r2, #16
 8003ca0:	701a      	strb	r2, [r3, #0]
 8003ca2:	46c0      	nop			; (mov r8, r8)
 8003ca4:	e00d      	b.n	8003cc2 <UART_SetConfig+0xf2>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a88      	ldr	r2, [pc, #544]	; (8003ecc <UART_SetConfig+0x2fc>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d104      	bne.n	8003cba <UART_SetConfig+0xea>
 8003cb0:	231f      	movs	r3, #31
 8003cb2:	18fb      	adds	r3, r7, r3
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	701a      	strb	r2, [r3, #0]
 8003cb8:	e003      	b.n	8003cc2 <UART_SetConfig+0xf2>
 8003cba:	231f      	movs	r3, #31
 8003cbc:	18fb      	adds	r3, r7, r3
 8003cbe:	2210      	movs	r2, #16
 8003cc0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69da      	ldr	r2, [r3, #28]
 8003cc6:	2380      	movs	r3, #128	; 0x80
 8003cc8:	021b      	lsls	r3, r3, #8
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d000      	beq.n	8003cd0 <UART_SetConfig+0x100>
 8003cce:	e07d      	b.n	8003dcc <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8003cd0:	231f      	movs	r3, #31
 8003cd2:	18fb      	adds	r3, r7, r3
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d01c      	beq.n	8003d14 <UART_SetConfig+0x144>
 8003cda:	dc02      	bgt.n	8003ce2 <UART_SetConfig+0x112>
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d005      	beq.n	8003cec <UART_SetConfig+0x11c>
 8003ce0:	e04b      	b.n	8003d7a <UART_SetConfig+0x1aa>
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d025      	beq.n	8003d32 <UART_SetConfig+0x162>
 8003ce6:	2b08      	cmp	r3, #8
 8003ce8:	d037      	beq.n	8003d5a <UART_SetConfig+0x18a>
 8003cea:	e046      	b.n	8003d7a <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cec:	f7ff fc50 	bl	8003590 <HAL_RCC_GetPCLK1Freq>
 8003cf0:	0003      	movs	r3, r0
 8003cf2:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	005a      	lsls	r2, r3, #1
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	085b      	lsrs	r3, r3, #1
 8003cfe:	18d2      	adds	r2, r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	0019      	movs	r1, r3
 8003d06:	0010      	movs	r0, r2
 8003d08:	f7fc fa06 	bl	8000118 <__udivsi3>
 8003d0c:	0003      	movs	r3, r0
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	61bb      	str	r3, [r7, #24]
        break;
 8003d12:	e037      	b.n	8003d84 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	085b      	lsrs	r3, r3, #1
 8003d1a:	4a6d      	ldr	r2, [pc, #436]	; (8003ed0 <UART_SetConfig+0x300>)
 8003d1c:	189a      	adds	r2, r3, r2
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	0019      	movs	r1, r3
 8003d24:	0010      	movs	r0, r2
 8003d26:	f7fc f9f7 	bl	8000118 <__udivsi3>
 8003d2a:	0003      	movs	r3, r0
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	61bb      	str	r3, [r7, #24]
        break;
 8003d30:	e028      	b.n	8003d84 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d32:	f7ff fbbf 	bl	80034b4 <HAL_RCC_GetSysClockFreq>
 8003d36:	0003      	movs	r3, r0
 8003d38:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	005a      	lsls	r2, r3, #1
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	085b      	lsrs	r3, r3, #1
 8003d44:	18d2      	adds	r2, r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	0019      	movs	r1, r3
 8003d4c:	0010      	movs	r0, r2
 8003d4e:	f7fc f9e3 	bl	8000118 <__udivsi3>
 8003d52:	0003      	movs	r3, r0
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	61bb      	str	r3, [r7, #24]
        break;
 8003d58:	e014      	b.n	8003d84 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	085b      	lsrs	r3, r3, #1
 8003d60:	2280      	movs	r2, #128	; 0x80
 8003d62:	0252      	lsls	r2, r2, #9
 8003d64:	189a      	adds	r2, r3, r2
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	0019      	movs	r1, r3
 8003d6c:	0010      	movs	r0, r2
 8003d6e:	f7fc f9d3 	bl	8000118 <__udivsi3>
 8003d72:	0003      	movs	r3, r0
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	61bb      	str	r3, [r7, #24]
        break;
 8003d78:	e004      	b.n	8003d84 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8003d7a:	2317      	movs	r3, #23
 8003d7c:	18fb      	adds	r3, r7, r3
 8003d7e:	2201      	movs	r2, #1
 8003d80:	701a      	strb	r2, [r3, #0]
        break;
 8003d82:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	2b0f      	cmp	r3, #15
 8003d88:	d91b      	bls.n	8003dc2 <UART_SetConfig+0x1f2>
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	4a51      	ldr	r2, [pc, #324]	; (8003ed4 <UART_SetConfig+0x304>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d817      	bhi.n	8003dc2 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	200a      	movs	r0, #10
 8003d98:	183b      	adds	r3, r7, r0
 8003d9a:	210f      	movs	r1, #15
 8003d9c:	438a      	bics	r2, r1
 8003d9e:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	085b      	lsrs	r3, r3, #1
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2207      	movs	r2, #7
 8003da8:	4013      	ands	r3, r2
 8003daa:	b299      	uxth	r1, r3
 8003dac:	183b      	adds	r3, r7, r0
 8003dae:	183a      	adds	r2, r7, r0
 8003db0:	8812      	ldrh	r2, [r2, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	183a      	adds	r2, r7, r0
 8003dbc:	8812      	ldrh	r2, [r2, #0]
 8003dbe:	60da      	str	r2, [r3, #12]
 8003dc0:	e06c      	b.n	8003e9c <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003dc2:	2317      	movs	r3, #23
 8003dc4:	18fb      	adds	r3, r7, r3
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	701a      	strb	r2, [r3, #0]
 8003dca:	e067      	b.n	8003e9c <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8003dcc:	231f      	movs	r3, #31
 8003dce:	18fb      	adds	r3, r7, r3
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d01b      	beq.n	8003e0e <UART_SetConfig+0x23e>
 8003dd6:	dc02      	bgt.n	8003dde <UART_SetConfig+0x20e>
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <UART_SetConfig+0x218>
 8003ddc:	e049      	b.n	8003e72 <UART_SetConfig+0x2a2>
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d024      	beq.n	8003e2c <UART_SetConfig+0x25c>
 8003de2:	2b08      	cmp	r3, #8
 8003de4:	d035      	beq.n	8003e52 <UART_SetConfig+0x282>
 8003de6:	e044      	b.n	8003e72 <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003de8:	f7ff fbd2 	bl	8003590 <HAL_RCC_GetPCLK1Freq>
 8003dec:	0003      	movs	r3, r0
 8003dee:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	085a      	lsrs	r2, r3, #1
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	18d2      	adds	r2, r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	0019      	movs	r1, r3
 8003e00:	0010      	movs	r0, r2
 8003e02:	f7fc f989 	bl	8000118 <__udivsi3>
 8003e06:	0003      	movs	r3, r0
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	61bb      	str	r3, [r7, #24]
        break;
 8003e0c:	e036      	b.n	8003e7c <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	085b      	lsrs	r3, r3, #1
 8003e14:	4a30      	ldr	r2, [pc, #192]	; (8003ed8 <UART_SetConfig+0x308>)
 8003e16:	189a      	adds	r2, r3, r2
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	0019      	movs	r1, r3
 8003e1e:	0010      	movs	r0, r2
 8003e20:	f7fc f97a 	bl	8000118 <__udivsi3>
 8003e24:	0003      	movs	r3, r0
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	61bb      	str	r3, [r7, #24]
        break;
 8003e2a:	e027      	b.n	8003e7c <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e2c:	f7ff fb42 	bl	80034b4 <HAL_RCC_GetSysClockFreq>
 8003e30:	0003      	movs	r3, r0
 8003e32:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	085a      	lsrs	r2, r3, #1
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	18d2      	adds	r2, r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	0019      	movs	r1, r3
 8003e44:	0010      	movs	r0, r2
 8003e46:	f7fc f967 	bl	8000118 <__udivsi3>
 8003e4a:	0003      	movs	r3, r0
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	61bb      	str	r3, [r7, #24]
        break;
 8003e50:	e014      	b.n	8003e7c <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	085b      	lsrs	r3, r3, #1
 8003e58:	2280      	movs	r2, #128	; 0x80
 8003e5a:	0212      	lsls	r2, r2, #8
 8003e5c:	189a      	adds	r2, r3, r2
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	0019      	movs	r1, r3
 8003e64:	0010      	movs	r0, r2
 8003e66:	f7fc f957 	bl	8000118 <__udivsi3>
 8003e6a:	0003      	movs	r3, r0
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	61bb      	str	r3, [r7, #24]
        break;
 8003e70:	e004      	b.n	8003e7c <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8003e72:	2317      	movs	r3, #23
 8003e74:	18fb      	adds	r3, r7, r3
 8003e76:	2201      	movs	r2, #1
 8003e78:	701a      	strb	r2, [r3, #0]
        break;
 8003e7a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	2b0f      	cmp	r3, #15
 8003e80:	d908      	bls.n	8003e94 <UART_SetConfig+0x2c4>
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	4a13      	ldr	r2, [pc, #76]	; (8003ed4 <UART_SetConfig+0x304>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d804      	bhi.n	8003e94 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	60da      	str	r2, [r3, #12]
 8003e92:	e003      	b.n	8003e9c <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003e94:	2317      	movs	r3, #23
 8003e96:	18fb      	adds	r3, r7, r3
 8003e98:	2201      	movs	r2, #1
 8003e9a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003ea8:	2317      	movs	r3, #23
 8003eaa:	18fb      	adds	r3, r7, r3
 8003eac:	781b      	ldrb	r3, [r3, #0]
}
 8003eae:	0018      	movs	r0, r3
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	b008      	add	sp, #32
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	ffff69f3 	.word	0xffff69f3
 8003ebc:	ffffcfff 	.word	0xffffcfff
 8003ec0:	fffff4ff 	.word	0xfffff4ff
 8003ec4:	40013800 	.word	0x40013800
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	40004400 	.word	0x40004400
 8003ed0:	00f42400 	.word	0x00f42400
 8003ed4:	0000ffff 	.word	0x0000ffff
 8003ed8:	007a1200 	.word	0x007a1200

08003edc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	2201      	movs	r2, #1
 8003eea:	4013      	ands	r3, r2
 8003eec:	d00b      	beq.n	8003f06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	4a4a      	ldr	r2, [pc, #296]	; (8004020 <UART_AdvFeatureConfig+0x144>)
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	0019      	movs	r1, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	d00b      	beq.n	8003f28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	4a43      	ldr	r2, [pc, #268]	; (8004024 <UART_AdvFeatureConfig+0x148>)
 8003f18:	4013      	ands	r3, r2
 8003f1a:	0019      	movs	r1, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	2204      	movs	r2, #4
 8003f2e:	4013      	ands	r3, r2
 8003f30:	d00b      	beq.n	8003f4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	4a3b      	ldr	r2, [pc, #236]	; (8004028 <UART_AdvFeatureConfig+0x14c>)
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	0019      	movs	r1, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	2208      	movs	r2, #8
 8003f50:	4013      	ands	r3, r2
 8003f52:	d00b      	beq.n	8003f6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	4a34      	ldr	r2, [pc, #208]	; (800402c <UART_AdvFeatureConfig+0x150>)
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	0019      	movs	r1, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	2210      	movs	r2, #16
 8003f72:	4013      	ands	r3, r2
 8003f74:	d00b      	beq.n	8003f8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	4a2c      	ldr	r2, [pc, #176]	; (8004030 <UART_AdvFeatureConfig+0x154>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	0019      	movs	r1, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	2220      	movs	r2, #32
 8003f94:	4013      	ands	r3, r2
 8003f96:	d00b      	beq.n	8003fb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	4a25      	ldr	r2, [pc, #148]	; (8004034 <UART_AdvFeatureConfig+0x158>)
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	0019      	movs	r1, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	2240      	movs	r2, #64	; 0x40
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	d01d      	beq.n	8003ff6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	4a1d      	ldr	r2, [pc, #116]	; (8004038 <UART_AdvFeatureConfig+0x15c>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	0019      	movs	r1, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fd6:	2380      	movs	r3, #128	; 0x80
 8003fd8:	035b      	lsls	r3, r3, #13
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d10b      	bne.n	8003ff6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	4a15      	ldr	r2, [pc, #84]	; (800403c <UART_AdvFeatureConfig+0x160>)
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	0019      	movs	r1, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	2280      	movs	r2, #128	; 0x80
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	d00b      	beq.n	8004018 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	4a0e      	ldr	r2, [pc, #56]	; (8004040 <UART_AdvFeatureConfig+0x164>)
 8004008:	4013      	ands	r3, r2
 800400a:	0019      	movs	r1, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	605a      	str	r2, [r3, #4]
  }
}
 8004018:	46c0      	nop			; (mov r8, r8)
 800401a:	46bd      	mov	sp, r7
 800401c:	b002      	add	sp, #8
 800401e:	bd80      	pop	{r7, pc}
 8004020:	fffdffff 	.word	0xfffdffff
 8004024:	fffeffff 	.word	0xfffeffff
 8004028:	fffbffff 	.word	0xfffbffff
 800402c:	ffff7fff 	.word	0xffff7fff
 8004030:	ffffefff 	.word	0xffffefff
 8004034:	ffffdfff 	.word	0xffffdfff
 8004038:	ffefffff 	.word	0xffefffff
 800403c:	ff9fffff 	.word	0xff9fffff
 8004040:	fff7ffff 	.word	0xfff7ffff

08004044 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af02      	add	r7, sp, #8
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004052:	f7fe f8bb 	bl	80021cc <HAL_GetTick>
 8004056:	0003      	movs	r3, r0
 8004058:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2208      	movs	r2, #8
 8004062:	4013      	ands	r3, r2
 8004064:	2b08      	cmp	r3, #8
 8004066:	d10d      	bne.n	8004084 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	2380      	movs	r3, #128	; 0x80
 800406c:	0399      	lsls	r1, r3, #14
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	4b16      	ldr	r3, [pc, #88]	; (80040cc <UART_CheckIdleState+0x88>)
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	0013      	movs	r3, r2
 8004076:	2200      	movs	r2, #0
 8004078:	f000 f82a 	bl	80040d0 <UART_WaitOnFlagUntilTimeout>
 800407c:	1e03      	subs	r3, r0, #0
 800407e:	d001      	beq.n	8004084 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e01f      	b.n	80040c4 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2204      	movs	r2, #4
 800408c:	4013      	ands	r3, r2
 800408e:	2b04      	cmp	r3, #4
 8004090:	d10d      	bne.n	80040ae <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	2380      	movs	r3, #128	; 0x80
 8004096:	03d9      	lsls	r1, r3, #15
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	4b0c      	ldr	r3, [pc, #48]	; (80040cc <UART_CheckIdleState+0x88>)
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	0013      	movs	r3, r2
 80040a0:	2200      	movs	r2, #0
 80040a2:	f000 f815 	bl	80040d0 <UART_WaitOnFlagUntilTimeout>
 80040a6:	1e03      	subs	r3, r0, #0
 80040a8:	d001      	beq.n	80040ae <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e00a      	b.n	80040c4 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2220      	movs	r2, #32
 80040b2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2220      	movs	r2, #32
 80040b8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2270      	movs	r2, #112	; 0x70
 80040be:	2100      	movs	r1, #0
 80040c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	0018      	movs	r0, r3
 80040c6:	46bd      	mov	sp, r7
 80040c8:	b004      	add	sp, #16
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	01ffffff 	.word	0x01ffffff

080040d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	1dfb      	adds	r3, r7, #7
 80040de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040e0:	e05d      	b.n	800419e <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	3301      	adds	r3, #1
 80040e6:	d05a      	beq.n	800419e <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e8:	f7fe f870 	bl	80021cc <HAL_GetTick>
 80040ec:	0002      	movs	r2, r0
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d302      	bcc.n	80040fe <UART_WaitOnFlagUntilTimeout+0x2e>
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d11b      	bne.n	8004136 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	492f      	ldr	r1, [pc, #188]	; (80041c8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800410a:	400a      	ands	r2, r1
 800410c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2101      	movs	r1, #1
 800411a:	438a      	bics	r2, r1
 800411c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2220      	movs	r2, #32
 8004122:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2220      	movs	r2, #32
 8004128:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2270      	movs	r2, #112	; 0x70
 800412e:	2100      	movs	r1, #0
 8004130:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e043      	b.n	80041be <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2204      	movs	r2, #4
 800413e:	4013      	ands	r3, r2
 8004140:	d02d      	beq.n	800419e <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	69da      	ldr	r2, [r3, #28]
 8004148:	2380      	movs	r3, #128	; 0x80
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	401a      	ands	r2, r3
 800414e:	2380      	movs	r3, #128	; 0x80
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	429a      	cmp	r2, r3
 8004154:	d123      	bne.n	800419e <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2280      	movs	r2, #128	; 0x80
 800415c:	0112      	lsls	r2, r2, #4
 800415e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4917      	ldr	r1, [pc, #92]	; (80041c8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800416c:	400a      	ands	r2, r1
 800416e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689a      	ldr	r2, [r3, #8]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2101      	movs	r1, #1
 800417c:	438a      	bics	r2, r1
 800417e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2220      	movs	r2, #32
 8004184:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2220      	movs	r2, #32
 800418a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2220      	movs	r2, #32
 8004190:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2270      	movs	r2, #112	; 0x70
 8004196:	2100      	movs	r1, #0
 8004198:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e00f      	b.n	80041be <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	4013      	ands	r3, r2
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	425a      	negs	r2, r3
 80041ae:	4153      	adcs	r3, r2
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	001a      	movs	r2, r3
 80041b4:	1dfb      	adds	r3, r7, #7
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d092      	beq.n	80040e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	0018      	movs	r0, r3
 80041c0:	46bd      	mov	sp, r7
 80041c2:	b004      	add	sp, #16
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	fffffe5f 	.word	0xfffffe5f

080041cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	21c0      	movs	r1, #192	; 0xc0
 80041e0:	438a      	bics	r2, r1
 80041e2:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2220      	movs	r2, #32
 80041e8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80041ea:	46c0      	nop			; (mov r8, r8)
 80041ec:	46bd      	mov	sp, r7
 80041ee:	b002      	add	sp, #8
 80041f0:	bd80      	pop	{r7, pc}
	...

080041f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	490a      	ldr	r1, [pc, #40]	; (8004230 <UART_EndRxTransfer+0x3c>)
 8004208:	400a      	ands	r2, r1
 800420a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689a      	ldr	r2, [r3, #8]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2101      	movs	r1, #1
 8004218:	438a      	bics	r2, r1
 800421a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2220      	movs	r2, #32
 8004220:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004228:	46c0      	nop			; (mov r8, r8)
 800422a:	46bd      	mov	sp, r7
 800422c:	b002      	add	sp, #8
 800422e:	bd80      	pop	{r7, pc}
 8004230:	fffffedf 	.word	0xfffffedf

08004234 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	2b20      	cmp	r3, #32
 8004248:	d01e      	beq.n	8004288 <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	225a      	movs	r2, #90	; 0x5a
 800424e:	2100      	movs	r1, #0
 8004250:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	490e      	ldr	r1, [pc, #56]	; (8004298 <UART_DMAReceiveCplt+0x64>)
 800425e:	400a      	ands	r2, r1
 8004260:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2101      	movs	r1, #1
 800426e:	438a      	bics	r2, r1
 8004270:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2140      	movs	r1, #64	; 0x40
 800427e:	438a      	bics	r2, r1
 8004280:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2220      	movs	r2, #32
 8004286:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	0018      	movs	r0, r3
 800428c:	f7ff fc88 	bl	8003ba0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004290:	46c0      	nop			; (mov r8, r8)
 8004292:	46bd      	mov	sp, r7
 8004294:	b004      	add	sp, #16
 8004296:	bd80      	pop	{r7, pc}
 8004298:	fffffeff 	.word	0xfffffeff

0800429c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	0018      	movs	r0, r3
 80042ae:	f7ff fc7f 	bl	8003bb0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	46bd      	mov	sp, r7
 80042b6:	b004      	add	sp, #16
 80042b8:	bd80      	pop	{r7, pc}

080042ba <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b086      	sub	sp, #24
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042cc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	2280      	movs	r2, #128	; 0x80
 80042dc:	4013      	ands	r3, r2
 80042de:	2b80      	cmp	r3, #128	; 0x80
 80042e0:	d10a      	bne.n	80042f8 <UART_DMAError+0x3e>
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	2b21      	cmp	r3, #33	; 0x21
 80042e6:	d107      	bne.n	80042f8 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	2252      	movs	r2, #82	; 0x52
 80042ec:	2100      	movs	r1, #0
 80042ee:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	0018      	movs	r0, r3
 80042f4:	f7ff ff6a 	bl	80041cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	2240      	movs	r2, #64	; 0x40
 8004300:	4013      	ands	r3, r2
 8004302:	2b40      	cmp	r3, #64	; 0x40
 8004304:	d10a      	bne.n	800431c <UART_DMAError+0x62>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2b22      	cmp	r3, #34	; 0x22
 800430a:	d107      	bne.n	800431c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	225a      	movs	r2, #90	; 0x5a
 8004310:	2100      	movs	r1, #0
 8004312:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	0018      	movs	r0, r3
 8004318:	f7ff ff6c 	bl	80041f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004320:	2210      	movs	r2, #16
 8004322:	431a      	orrs	r2, r3
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	0018      	movs	r0, r3
 800432c:	f7ff fc48 	bl	8003bc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004330:	46c0      	nop			; (mov r8, r8)
 8004332:	46bd      	mov	sp, r7
 8004334:	b006      	add	sp, #24
 8004336:	bd80      	pop	{r7, pc}

08004338 <__errno>:
 8004338:	4b01      	ldr	r3, [pc, #4]	; (8004340 <__errno+0x8>)
 800433a:	6818      	ldr	r0, [r3, #0]
 800433c:	4770      	bx	lr
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	20000010 	.word	0x20000010

08004344 <__libc_init_array>:
 8004344:	b570      	push	{r4, r5, r6, lr}
 8004346:	2600      	movs	r6, #0
 8004348:	4d0c      	ldr	r5, [pc, #48]	; (800437c <__libc_init_array+0x38>)
 800434a:	4c0d      	ldr	r4, [pc, #52]	; (8004380 <__libc_init_array+0x3c>)
 800434c:	1b64      	subs	r4, r4, r5
 800434e:	10a4      	asrs	r4, r4, #2
 8004350:	42a6      	cmp	r6, r4
 8004352:	d109      	bne.n	8004368 <__libc_init_array+0x24>
 8004354:	2600      	movs	r6, #0
 8004356:	f001 fa61 	bl	800581c <_init>
 800435a:	4d0a      	ldr	r5, [pc, #40]	; (8004384 <__libc_init_array+0x40>)
 800435c:	4c0a      	ldr	r4, [pc, #40]	; (8004388 <__libc_init_array+0x44>)
 800435e:	1b64      	subs	r4, r4, r5
 8004360:	10a4      	asrs	r4, r4, #2
 8004362:	42a6      	cmp	r6, r4
 8004364:	d105      	bne.n	8004372 <__libc_init_array+0x2e>
 8004366:	bd70      	pop	{r4, r5, r6, pc}
 8004368:	00b3      	lsls	r3, r6, #2
 800436a:	58eb      	ldr	r3, [r5, r3]
 800436c:	4798      	blx	r3
 800436e:	3601      	adds	r6, #1
 8004370:	e7ee      	b.n	8004350 <__libc_init_array+0xc>
 8004372:	00b3      	lsls	r3, r6, #2
 8004374:	58eb      	ldr	r3, [r5, r3]
 8004376:	4798      	blx	r3
 8004378:	3601      	adds	r6, #1
 800437a:	e7f2      	b.n	8004362 <__libc_init_array+0x1e>
 800437c:	08005f54 	.word	0x08005f54
 8004380:	08005f54 	.word	0x08005f54
 8004384:	08005f54 	.word	0x08005f54
 8004388:	08005f58 	.word	0x08005f58

0800438c <memset>:
 800438c:	0003      	movs	r3, r0
 800438e:	1812      	adds	r2, r2, r0
 8004390:	4293      	cmp	r3, r2
 8004392:	d100      	bne.n	8004396 <memset+0xa>
 8004394:	4770      	bx	lr
 8004396:	7019      	strb	r1, [r3, #0]
 8004398:	3301      	adds	r3, #1
 800439a:	e7f9      	b.n	8004390 <memset+0x4>

0800439c <iprintf>:
 800439c:	b40f      	push	{r0, r1, r2, r3}
 800439e:	4b0b      	ldr	r3, [pc, #44]	; (80043cc <iprintf+0x30>)
 80043a0:	b513      	push	{r0, r1, r4, lr}
 80043a2:	681c      	ldr	r4, [r3, #0]
 80043a4:	2c00      	cmp	r4, #0
 80043a6:	d005      	beq.n	80043b4 <iprintf+0x18>
 80043a8:	69a3      	ldr	r3, [r4, #24]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d102      	bne.n	80043b4 <iprintf+0x18>
 80043ae:	0020      	movs	r0, r4
 80043b0:	f000 fae4 	bl	800497c <__sinit>
 80043b4:	ab05      	add	r3, sp, #20
 80043b6:	9a04      	ldr	r2, [sp, #16]
 80043b8:	68a1      	ldr	r1, [r4, #8]
 80043ba:	0020      	movs	r0, r4
 80043bc:	9301      	str	r3, [sp, #4]
 80043be:	f000 fe37 	bl	8005030 <_vfiprintf_r>
 80043c2:	bc16      	pop	{r1, r2, r4}
 80043c4:	bc08      	pop	{r3}
 80043c6:	b004      	add	sp, #16
 80043c8:	4718      	bx	r3
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	20000010 	.word	0x20000010

080043d0 <putchar>:
 80043d0:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <putchar+0x24>)
 80043d2:	b570      	push	{r4, r5, r6, lr}
 80043d4:	681c      	ldr	r4, [r3, #0]
 80043d6:	0005      	movs	r5, r0
 80043d8:	2c00      	cmp	r4, #0
 80043da:	d005      	beq.n	80043e8 <putchar+0x18>
 80043dc:	69a3      	ldr	r3, [r4, #24]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d102      	bne.n	80043e8 <putchar+0x18>
 80043e2:	0020      	movs	r0, r4
 80043e4:	f000 faca 	bl	800497c <__sinit>
 80043e8:	0029      	movs	r1, r5
 80043ea:	68a2      	ldr	r2, [r4, #8]
 80043ec:	0020      	movs	r0, r4
 80043ee:	f001 f8ab 	bl	8005548 <_putc_r>
 80043f2:	bd70      	pop	{r4, r5, r6, pc}
 80043f4:	20000010 	.word	0x20000010

080043f8 <_puts_r>:
 80043f8:	b570      	push	{r4, r5, r6, lr}
 80043fa:	0005      	movs	r5, r0
 80043fc:	000e      	movs	r6, r1
 80043fe:	2800      	cmp	r0, #0
 8004400:	d004      	beq.n	800440c <_puts_r+0x14>
 8004402:	6983      	ldr	r3, [r0, #24]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <_puts_r+0x14>
 8004408:	f000 fab8 	bl	800497c <__sinit>
 800440c:	69ab      	ldr	r3, [r5, #24]
 800440e:	68ac      	ldr	r4, [r5, #8]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d102      	bne.n	800441a <_puts_r+0x22>
 8004414:	0028      	movs	r0, r5
 8004416:	f000 fab1 	bl	800497c <__sinit>
 800441a:	4b24      	ldr	r3, [pc, #144]	; (80044ac <_puts_r+0xb4>)
 800441c:	429c      	cmp	r4, r3
 800441e:	d10f      	bne.n	8004440 <_puts_r+0x48>
 8004420:	686c      	ldr	r4, [r5, #4]
 8004422:	89a3      	ldrh	r3, [r4, #12]
 8004424:	071b      	lsls	r3, r3, #28
 8004426:	d502      	bpl.n	800442e <_puts_r+0x36>
 8004428:	6923      	ldr	r3, [r4, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d11f      	bne.n	800446e <_puts_r+0x76>
 800442e:	0021      	movs	r1, r4
 8004430:	0028      	movs	r0, r5
 8004432:	f000 f935 	bl	80046a0 <__swsetup_r>
 8004436:	2800      	cmp	r0, #0
 8004438:	d019      	beq.n	800446e <_puts_r+0x76>
 800443a:	2001      	movs	r0, #1
 800443c:	4240      	negs	r0, r0
 800443e:	bd70      	pop	{r4, r5, r6, pc}
 8004440:	4b1b      	ldr	r3, [pc, #108]	; (80044b0 <_puts_r+0xb8>)
 8004442:	429c      	cmp	r4, r3
 8004444:	d101      	bne.n	800444a <_puts_r+0x52>
 8004446:	68ac      	ldr	r4, [r5, #8]
 8004448:	e7eb      	b.n	8004422 <_puts_r+0x2a>
 800444a:	4b1a      	ldr	r3, [pc, #104]	; (80044b4 <_puts_r+0xbc>)
 800444c:	429c      	cmp	r4, r3
 800444e:	d1e8      	bne.n	8004422 <_puts_r+0x2a>
 8004450:	68ec      	ldr	r4, [r5, #12]
 8004452:	e7e6      	b.n	8004422 <_puts_r+0x2a>
 8004454:	3601      	adds	r6, #1
 8004456:	60a3      	str	r3, [r4, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	da04      	bge.n	8004466 <_puts_r+0x6e>
 800445c:	69a2      	ldr	r2, [r4, #24]
 800445e:	429a      	cmp	r2, r3
 8004460:	dc16      	bgt.n	8004490 <_puts_r+0x98>
 8004462:	290a      	cmp	r1, #10
 8004464:	d014      	beq.n	8004490 <_puts_r+0x98>
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	6022      	str	r2, [r4, #0]
 800446c:	7019      	strb	r1, [r3, #0]
 800446e:	68a3      	ldr	r3, [r4, #8]
 8004470:	7831      	ldrb	r1, [r6, #0]
 8004472:	3b01      	subs	r3, #1
 8004474:	2900      	cmp	r1, #0
 8004476:	d1ed      	bne.n	8004454 <_puts_r+0x5c>
 8004478:	60a3      	str	r3, [r4, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	da0f      	bge.n	800449e <_puts_r+0xa6>
 800447e:	0022      	movs	r2, r4
 8004480:	310a      	adds	r1, #10
 8004482:	0028      	movs	r0, r5
 8004484:	f000 f8b6 	bl	80045f4 <__swbuf_r>
 8004488:	1c43      	adds	r3, r0, #1
 800448a:	d0d6      	beq.n	800443a <_puts_r+0x42>
 800448c:	200a      	movs	r0, #10
 800448e:	e7d6      	b.n	800443e <_puts_r+0x46>
 8004490:	0022      	movs	r2, r4
 8004492:	0028      	movs	r0, r5
 8004494:	f000 f8ae 	bl	80045f4 <__swbuf_r>
 8004498:	1c43      	adds	r3, r0, #1
 800449a:	d1e8      	bne.n	800446e <_puts_r+0x76>
 800449c:	e7cd      	b.n	800443a <_puts_r+0x42>
 800449e:	200a      	movs	r0, #10
 80044a0:	6823      	ldr	r3, [r4, #0]
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	6022      	str	r2, [r4, #0]
 80044a6:	7018      	strb	r0, [r3, #0]
 80044a8:	e7c9      	b.n	800443e <_puts_r+0x46>
 80044aa:	46c0      	nop			; (mov r8, r8)
 80044ac:	08005dd4 	.word	0x08005dd4
 80044b0:	08005df4 	.word	0x08005df4
 80044b4:	08005db4 	.word	0x08005db4

080044b8 <puts>:
 80044b8:	b510      	push	{r4, lr}
 80044ba:	4b03      	ldr	r3, [pc, #12]	; (80044c8 <puts+0x10>)
 80044bc:	0001      	movs	r1, r0
 80044be:	6818      	ldr	r0, [r3, #0]
 80044c0:	f7ff ff9a 	bl	80043f8 <_puts_r>
 80044c4:	bd10      	pop	{r4, pc}
 80044c6:	46c0      	nop			; (mov r8, r8)
 80044c8:	20000010 	.word	0x20000010

080044cc <siprintf>:
 80044cc:	b40e      	push	{r1, r2, r3}
 80044ce:	b500      	push	{lr}
 80044d0:	490b      	ldr	r1, [pc, #44]	; (8004500 <siprintf+0x34>)
 80044d2:	b09c      	sub	sp, #112	; 0x70
 80044d4:	ab1d      	add	r3, sp, #116	; 0x74
 80044d6:	9002      	str	r0, [sp, #8]
 80044d8:	9006      	str	r0, [sp, #24]
 80044da:	9107      	str	r1, [sp, #28]
 80044dc:	9104      	str	r1, [sp, #16]
 80044de:	4809      	ldr	r0, [pc, #36]	; (8004504 <siprintf+0x38>)
 80044e0:	4909      	ldr	r1, [pc, #36]	; (8004508 <siprintf+0x3c>)
 80044e2:	cb04      	ldmia	r3!, {r2}
 80044e4:	9105      	str	r1, [sp, #20]
 80044e6:	6800      	ldr	r0, [r0, #0]
 80044e8:	a902      	add	r1, sp, #8
 80044ea:	9301      	str	r3, [sp, #4]
 80044ec:	f000 fc7a 	bl	8004de4 <_svfiprintf_r>
 80044f0:	2300      	movs	r3, #0
 80044f2:	9a02      	ldr	r2, [sp, #8]
 80044f4:	7013      	strb	r3, [r2, #0]
 80044f6:	b01c      	add	sp, #112	; 0x70
 80044f8:	bc08      	pop	{r3}
 80044fa:	b003      	add	sp, #12
 80044fc:	4718      	bx	r3
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	7fffffff 	.word	0x7fffffff
 8004504:	20000010 	.word	0x20000010
 8004508:	ffff0208 	.word	0xffff0208

0800450c <strcasecmp>:
 800450c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450e:	0007      	movs	r7, r0
 8004510:	000e      	movs	r6, r1
 8004512:	783c      	ldrb	r4, [r7, #0]
 8004514:	f000 fac6 	bl	8004aa4 <__locale_ctype_ptr>
 8004518:	2203      	movs	r2, #3
 800451a:	1900      	adds	r0, r0, r4
 800451c:	7843      	ldrb	r3, [r0, #1]
 800451e:	4013      	ands	r3, r2
 8004520:	2b01      	cmp	r3, #1
 8004522:	d100      	bne.n	8004526 <strcasecmp+0x1a>
 8004524:	3420      	adds	r4, #32
 8004526:	7835      	ldrb	r5, [r6, #0]
 8004528:	f000 fabc 	bl	8004aa4 <__locale_ctype_ptr>
 800452c:	2203      	movs	r2, #3
 800452e:	1940      	adds	r0, r0, r5
 8004530:	7843      	ldrb	r3, [r0, #1]
 8004532:	4013      	ands	r3, r2
 8004534:	2b01      	cmp	r3, #1
 8004536:	d100      	bne.n	800453a <strcasecmp+0x2e>
 8004538:	3520      	adds	r5, #32
 800453a:	1b60      	subs	r0, r4, r5
 800453c:	d103      	bne.n	8004546 <strcasecmp+0x3a>
 800453e:	3701      	adds	r7, #1
 8004540:	3601      	adds	r6, #1
 8004542:	2d00      	cmp	r5, #0
 8004544:	d1e5      	bne.n	8004512 <strcasecmp+0x6>
 8004546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004548 <strtok>:
 8004548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454a:	4b12      	ldr	r3, [pc, #72]	; (8004594 <strtok+0x4c>)
 800454c:	0006      	movs	r6, r0
 800454e:	681d      	ldr	r5, [r3, #0]
 8004550:	000f      	movs	r7, r1
 8004552:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8004554:	2c00      	cmp	r4, #0
 8004556:	d116      	bne.n	8004586 <strtok+0x3e>
 8004558:	2050      	movs	r0, #80	; 0x50
 800455a:	f000 fb1d 	bl	8004b98 <malloc>
 800455e:	65a8      	str	r0, [r5, #88]	; 0x58
 8004560:	6004      	str	r4, [r0, #0]
 8004562:	6044      	str	r4, [r0, #4]
 8004564:	6084      	str	r4, [r0, #8]
 8004566:	60c4      	str	r4, [r0, #12]
 8004568:	6104      	str	r4, [r0, #16]
 800456a:	6144      	str	r4, [r0, #20]
 800456c:	6184      	str	r4, [r0, #24]
 800456e:	6284      	str	r4, [r0, #40]	; 0x28
 8004570:	62c4      	str	r4, [r0, #44]	; 0x2c
 8004572:	6304      	str	r4, [r0, #48]	; 0x30
 8004574:	6344      	str	r4, [r0, #52]	; 0x34
 8004576:	6384      	str	r4, [r0, #56]	; 0x38
 8004578:	63c4      	str	r4, [r0, #60]	; 0x3c
 800457a:	6404      	str	r4, [r0, #64]	; 0x40
 800457c:	6444      	str	r4, [r0, #68]	; 0x44
 800457e:	6484      	str	r4, [r0, #72]	; 0x48
 8004580:	64c4      	str	r4, [r0, #76]	; 0x4c
 8004582:	7704      	strb	r4, [r0, #28]
 8004584:	6244      	str	r4, [r0, #36]	; 0x24
 8004586:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8004588:	0039      	movs	r1, r7
 800458a:	0030      	movs	r0, r6
 800458c:	2301      	movs	r3, #1
 800458e:	f000 f803 	bl	8004598 <__strtok_r>
 8004592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004594:	20000010 	.word	0x20000010

08004598 <__strtok_r>:
 8004598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800459a:	2800      	cmp	r0, #0
 800459c:	d104      	bne.n	80045a8 <__strtok_r+0x10>
 800459e:	6810      	ldr	r0, [r2, #0]
 80045a0:	2800      	cmp	r0, #0
 80045a2:	d101      	bne.n	80045a8 <__strtok_r+0x10>
 80045a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045a6:	0020      	movs	r0, r4
 80045a8:	000e      	movs	r6, r1
 80045aa:	7805      	ldrb	r5, [r0, #0]
 80045ac:	1c44      	adds	r4, r0, #1
 80045ae:	7837      	ldrb	r7, [r6, #0]
 80045b0:	2f00      	cmp	r7, #0
 80045b2:	d104      	bne.n	80045be <__strtok_r+0x26>
 80045b4:	2d00      	cmp	r5, #0
 80045b6:	d110      	bne.n	80045da <__strtok_r+0x42>
 80045b8:	6015      	str	r5, [r2, #0]
 80045ba:	0028      	movs	r0, r5
 80045bc:	e7f2      	b.n	80045a4 <__strtok_r+0xc>
 80045be:	3601      	adds	r6, #1
 80045c0:	42bd      	cmp	r5, r7
 80045c2:	d1f4      	bne.n	80045ae <__strtok_r+0x16>
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1ee      	bne.n	80045a6 <__strtok_r+0xe>
 80045c8:	6014      	str	r4, [r2, #0]
 80045ca:	7003      	strb	r3, [r0, #0]
 80045cc:	e7ea      	b.n	80045a4 <__strtok_r+0xc>
 80045ce:	0033      	movs	r3, r6
 80045d0:	e00d      	b.n	80045ee <__strtok_r+0x56>
 80045d2:	3501      	adds	r5, #1
 80045d4:	2f00      	cmp	r7, #0
 80045d6:	d103      	bne.n	80045e0 <__strtok_r+0x48>
 80045d8:	001c      	movs	r4, r3
 80045da:	000d      	movs	r5, r1
 80045dc:	7826      	ldrb	r6, [r4, #0]
 80045de:	1c63      	adds	r3, r4, #1
 80045e0:	782f      	ldrb	r7, [r5, #0]
 80045e2:	42be      	cmp	r6, r7
 80045e4:	d1f5      	bne.n	80045d2 <__strtok_r+0x3a>
 80045e6:	2e00      	cmp	r6, #0
 80045e8:	d0f1      	beq.n	80045ce <__strtok_r+0x36>
 80045ea:	2100      	movs	r1, #0
 80045ec:	7021      	strb	r1, [r4, #0]
 80045ee:	6013      	str	r3, [r2, #0]
 80045f0:	e7d8      	b.n	80045a4 <__strtok_r+0xc>
	...

080045f4 <__swbuf_r>:
 80045f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045f6:	0005      	movs	r5, r0
 80045f8:	000e      	movs	r6, r1
 80045fa:	0014      	movs	r4, r2
 80045fc:	2800      	cmp	r0, #0
 80045fe:	d004      	beq.n	800460a <__swbuf_r+0x16>
 8004600:	6983      	ldr	r3, [r0, #24]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <__swbuf_r+0x16>
 8004606:	f000 f9b9 	bl	800497c <__sinit>
 800460a:	4b22      	ldr	r3, [pc, #136]	; (8004694 <__swbuf_r+0xa0>)
 800460c:	429c      	cmp	r4, r3
 800460e:	d12d      	bne.n	800466c <__swbuf_r+0x78>
 8004610:	686c      	ldr	r4, [r5, #4]
 8004612:	69a3      	ldr	r3, [r4, #24]
 8004614:	60a3      	str	r3, [r4, #8]
 8004616:	89a3      	ldrh	r3, [r4, #12]
 8004618:	071b      	lsls	r3, r3, #28
 800461a:	d531      	bpl.n	8004680 <__swbuf_r+0x8c>
 800461c:	6923      	ldr	r3, [r4, #16]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d02e      	beq.n	8004680 <__swbuf_r+0x8c>
 8004622:	6823      	ldr	r3, [r4, #0]
 8004624:	6922      	ldr	r2, [r4, #16]
 8004626:	b2f7      	uxtb	r7, r6
 8004628:	1a98      	subs	r0, r3, r2
 800462a:	6963      	ldr	r3, [r4, #20]
 800462c:	b2f6      	uxtb	r6, r6
 800462e:	4283      	cmp	r3, r0
 8004630:	dc05      	bgt.n	800463e <__swbuf_r+0x4a>
 8004632:	0021      	movs	r1, r4
 8004634:	0028      	movs	r0, r5
 8004636:	f000 f933 	bl	80048a0 <_fflush_r>
 800463a:	2800      	cmp	r0, #0
 800463c:	d126      	bne.n	800468c <__swbuf_r+0x98>
 800463e:	68a3      	ldr	r3, [r4, #8]
 8004640:	3001      	adds	r0, #1
 8004642:	3b01      	subs	r3, #1
 8004644:	60a3      	str	r3, [r4, #8]
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	1c5a      	adds	r2, r3, #1
 800464a:	6022      	str	r2, [r4, #0]
 800464c:	701f      	strb	r7, [r3, #0]
 800464e:	6963      	ldr	r3, [r4, #20]
 8004650:	4283      	cmp	r3, r0
 8004652:	d004      	beq.n	800465e <__swbuf_r+0x6a>
 8004654:	89a3      	ldrh	r3, [r4, #12]
 8004656:	07db      	lsls	r3, r3, #31
 8004658:	d51a      	bpl.n	8004690 <__swbuf_r+0x9c>
 800465a:	2e0a      	cmp	r6, #10
 800465c:	d118      	bne.n	8004690 <__swbuf_r+0x9c>
 800465e:	0021      	movs	r1, r4
 8004660:	0028      	movs	r0, r5
 8004662:	f000 f91d 	bl	80048a0 <_fflush_r>
 8004666:	2800      	cmp	r0, #0
 8004668:	d012      	beq.n	8004690 <__swbuf_r+0x9c>
 800466a:	e00f      	b.n	800468c <__swbuf_r+0x98>
 800466c:	4b0a      	ldr	r3, [pc, #40]	; (8004698 <__swbuf_r+0xa4>)
 800466e:	429c      	cmp	r4, r3
 8004670:	d101      	bne.n	8004676 <__swbuf_r+0x82>
 8004672:	68ac      	ldr	r4, [r5, #8]
 8004674:	e7cd      	b.n	8004612 <__swbuf_r+0x1e>
 8004676:	4b09      	ldr	r3, [pc, #36]	; (800469c <__swbuf_r+0xa8>)
 8004678:	429c      	cmp	r4, r3
 800467a:	d1ca      	bne.n	8004612 <__swbuf_r+0x1e>
 800467c:	68ec      	ldr	r4, [r5, #12]
 800467e:	e7c8      	b.n	8004612 <__swbuf_r+0x1e>
 8004680:	0021      	movs	r1, r4
 8004682:	0028      	movs	r0, r5
 8004684:	f000 f80c 	bl	80046a0 <__swsetup_r>
 8004688:	2800      	cmp	r0, #0
 800468a:	d0ca      	beq.n	8004622 <__swbuf_r+0x2e>
 800468c:	2601      	movs	r6, #1
 800468e:	4276      	negs	r6, r6
 8004690:	0030      	movs	r0, r6
 8004692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004694:	08005dd4 	.word	0x08005dd4
 8004698:	08005df4 	.word	0x08005df4
 800469c:	08005db4 	.word	0x08005db4

080046a0 <__swsetup_r>:
 80046a0:	4b36      	ldr	r3, [pc, #216]	; (800477c <__swsetup_r+0xdc>)
 80046a2:	b570      	push	{r4, r5, r6, lr}
 80046a4:	681d      	ldr	r5, [r3, #0]
 80046a6:	0006      	movs	r6, r0
 80046a8:	000c      	movs	r4, r1
 80046aa:	2d00      	cmp	r5, #0
 80046ac:	d005      	beq.n	80046ba <__swsetup_r+0x1a>
 80046ae:	69ab      	ldr	r3, [r5, #24]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d102      	bne.n	80046ba <__swsetup_r+0x1a>
 80046b4:	0028      	movs	r0, r5
 80046b6:	f000 f961 	bl	800497c <__sinit>
 80046ba:	4b31      	ldr	r3, [pc, #196]	; (8004780 <__swsetup_r+0xe0>)
 80046bc:	429c      	cmp	r4, r3
 80046be:	d10f      	bne.n	80046e0 <__swsetup_r+0x40>
 80046c0:	686c      	ldr	r4, [r5, #4]
 80046c2:	230c      	movs	r3, #12
 80046c4:	5ee2      	ldrsh	r2, [r4, r3]
 80046c6:	b293      	uxth	r3, r2
 80046c8:	0719      	lsls	r1, r3, #28
 80046ca:	d42d      	bmi.n	8004728 <__swsetup_r+0x88>
 80046cc:	06d9      	lsls	r1, r3, #27
 80046ce:	d411      	bmi.n	80046f4 <__swsetup_r+0x54>
 80046d0:	2309      	movs	r3, #9
 80046d2:	2001      	movs	r0, #1
 80046d4:	6033      	str	r3, [r6, #0]
 80046d6:	3337      	adds	r3, #55	; 0x37
 80046d8:	4313      	orrs	r3, r2
 80046da:	81a3      	strh	r3, [r4, #12]
 80046dc:	4240      	negs	r0, r0
 80046de:	bd70      	pop	{r4, r5, r6, pc}
 80046e0:	4b28      	ldr	r3, [pc, #160]	; (8004784 <__swsetup_r+0xe4>)
 80046e2:	429c      	cmp	r4, r3
 80046e4:	d101      	bne.n	80046ea <__swsetup_r+0x4a>
 80046e6:	68ac      	ldr	r4, [r5, #8]
 80046e8:	e7eb      	b.n	80046c2 <__swsetup_r+0x22>
 80046ea:	4b27      	ldr	r3, [pc, #156]	; (8004788 <__swsetup_r+0xe8>)
 80046ec:	429c      	cmp	r4, r3
 80046ee:	d1e8      	bne.n	80046c2 <__swsetup_r+0x22>
 80046f0:	68ec      	ldr	r4, [r5, #12]
 80046f2:	e7e6      	b.n	80046c2 <__swsetup_r+0x22>
 80046f4:	075b      	lsls	r3, r3, #29
 80046f6:	d513      	bpl.n	8004720 <__swsetup_r+0x80>
 80046f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046fa:	2900      	cmp	r1, #0
 80046fc:	d008      	beq.n	8004710 <__swsetup_r+0x70>
 80046fe:	0023      	movs	r3, r4
 8004700:	3344      	adds	r3, #68	; 0x44
 8004702:	4299      	cmp	r1, r3
 8004704:	d002      	beq.n	800470c <__swsetup_r+0x6c>
 8004706:	0030      	movs	r0, r6
 8004708:	f000 fa62 	bl	8004bd0 <_free_r>
 800470c:	2300      	movs	r3, #0
 800470e:	6363      	str	r3, [r4, #52]	; 0x34
 8004710:	2224      	movs	r2, #36	; 0x24
 8004712:	89a3      	ldrh	r3, [r4, #12]
 8004714:	4393      	bics	r3, r2
 8004716:	81a3      	strh	r3, [r4, #12]
 8004718:	2300      	movs	r3, #0
 800471a:	6063      	str	r3, [r4, #4]
 800471c:	6923      	ldr	r3, [r4, #16]
 800471e:	6023      	str	r3, [r4, #0]
 8004720:	2308      	movs	r3, #8
 8004722:	89a2      	ldrh	r2, [r4, #12]
 8004724:	4313      	orrs	r3, r2
 8004726:	81a3      	strh	r3, [r4, #12]
 8004728:	6923      	ldr	r3, [r4, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10b      	bne.n	8004746 <__swsetup_r+0xa6>
 800472e:	21a0      	movs	r1, #160	; 0xa0
 8004730:	2280      	movs	r2, #128	; 0x80
 8004732:	89a3      	ldrh	r3, [r4, #12]
 8004734:	0089      	lsls	r1, r1, #2
 8004736:	0092      	lsls	r2, r2, #2
 8004738:	400b      	ands	r3, r1
 800473a:	4293      	cmp	r3, r2
 800473c:	d003      	beq.n	8004746 <__swsetup_r+0xa6>
 800473e:	0021      	movs	r1, r4
 8004740:	0030      	movs	r0, r6
 8004742:	f000 f9e5 	bl	8004b10 <__smakebuf_r>
 8004746:	2301      	movs	r3, #1
 8004748:	89a2      	ldrh	r2, [r4, #12]
 800474a:	4013      	ands	r3, r2
 800474c:	d011      	beq.n	8004772 <__swsetup_r+0xd2>
 800474e:	2300      	movs	r3, #0
 8004750:	60a3      	str	r3, [r4, #8]
 8004752:	6963      	ldr	r3, [r4, #20]
 8004754:	425b      	negs	r3, r3
 8004756:	61a3      	str	r3, [r4, #24]
 8004758:	2000      	movs	r0, #0
 800475a:	6923      	ldr	r3, [r4, #16]
 800475c:	4283      	cmp	r3, r0
 800475e:	d1be      	bne.n	80046de <__swsetup_r+0x3e>
 8004760:	230c      	movs	r3, #12
 8004762:	5ee2      	ldrsh	r2, [r4, r3]
 8004764:	0613      	lsls	r3, r2, #24
 8004766:	d5ba      	bpl.n	80046de <__swsetup_r+0x3e>
 8004768:	2340      	movs	r3, #64	; 0x40
 800476a:	4313      	orrs	r3, r2
 800476c:	81a3      	strh	r3, [r4, #12]
 800476e:	3801      	subs	r0, #1
 8004770:	e7b5      	b.n	80046de <__swsetup_r+0x3e>
 8004772:	0792      	lsls	r2, r2, #30
 8004774:	d400      	bmi.n	8004778 <__swsetup_r+0xd8>
 8004776:	6963      	ldr	r3, [r4, #20]
 8004778:	60a3      	str	r3, [r4, #8]
 800477a:	e7ed      	b.n	8004758 <__swsetup_r+0xb8>
 800477c:	20000010 	.word	0x20000010
 8004780:	08005dd4 	.word	0x08005dd4
 8004784:	08005df4 	.word	0x08005df4
 8004788:	08005db4 	.word	0x08005db4

0800478c <__sflush_r>:
 800478c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800478e:	898a      	ldrh	r2, [r1, #12]
 8004790:	0005      	movs	r5, r0
 8004792:	000c      	movs	r4, r1
 8004794:	0713      	lsls	r3, r2, #28
 8004796:	d460      	bmi.n	800485a <__sflush_r+0xce>
 8004798:	684b      	ldr	r3, [r1, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	dc04      	bgt.n	80047a8 <__sflush_r+0x1c>
 800479e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	dc01      	bgt.n	80047a8 <__sflush_r+0x1c>
 80047a4:	2000      	movs	r0, #0
 80047a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047a8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80047aa:	2f00      	cmp	r7, #0
 80047ac:	d0fa      	beq.n	80047a4 <__sflush_r+0x18>
 80047ae:	2300      	movs	r3, #0
 80047b0:	682e      	ldr	r6, [r5, #0]
 80047b2:	602b      	str	r3, [r5, #0]
 80047b4:	2380      	movs	r3, #128	; 0x80
 80047b6:	015b      	lsls	r3, r3, #5
 80047b8:	6a21      	ldr	r1, [r4, #32]
 80047ba:	401a      	ands	r2, r3
 80047bc:	d034      	beq.n	8004828 <__sflush_r+0x9c>
 80047be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047c0:	89a3      	ldrh	r3, [r4, #12]
 80047c2:	075b      	lsls	r3, r3, #29
 80047c4:	d506      	bpl.n	80047d4 <__sflush_r+0x48>
 80047c6:	6863      	ldr	r3, [r4, #4]
 80047c8:	1ac0      	subs	r0, r0, r3
 80047ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <__sflush_r+0x48>
 80047d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047d2:	1ac0      	subs	r0, r0, r3
 80047d4:	0002      	movs	r2, r0
 80047d6:	6a21      	ldr	r1, [r4, #32]
 80047d8:	2300      	movs	r3, #0
 80047da:	0028      	movs	r0, r5
 80047dc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80047de:	47b8      	blx	r7
 80047e0:	89a1      	ldrh	r1, [r4, #12]
 80047e2:	1c43      	adds	r3, r0, #1
 80047e4:	d106      	bne.n	80047f4 <__sflush_r+0x68>
 80047e6:	682b      	ldr	r3, [r5, #0]
 80047e8:	2b1d      	cmp	r3, #29
 80047ea:	d830      	bhi.n	800484e <__sflush_r+0xc2>
 80047ec:	4a2b      	ldr	r2, [pc, #172]	; (800489c <__sflush_r+0x110>)
 80047ee:	40da      	lsrs	r2, r3
 80047f0:	07d3      	lsls	r3, r2, #31
 80047f2:	d52c      	bpl.n	800484e <__sflush_r+0xc2>
 80047f4:	2300      	movs	r3, #0
 80047f6:	6063      	str	r3, [r4, #4]
 80047f8:	6923      	ldr	r3, [r4, #16]
 80047fa:	6023      	str	r3, [r4, #0]
 80047fc:	04cb      	lsls	r3, r1, #19
 80047fe:	d505      	bpl.n	800480c <__sflush_r+0x80>
 8004800:	1c43      	adds	r3, r0, #1
 8004802:	d102      	bne.n	800480a <__sflush_r+0x7e>
 8004804:	682b      	ldr	r3, [r5, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d100      	bne.n	800480c <__sflush_r+0x80>
 800480a:	6560      	str	r0, [r4, #84]	; 0x54
 800480c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800480e:	602e      	str	r6, [r5, #0]
 8004810:	2900      	cmp	r1, #0
 8004812:	d0c7      	beq.n	80047a4 <__sflush_r+0x18>
 8004814:	0023      	movs	r3, r4
 8004816:	3344      	adds	r3, #68	; 0x44
 8004818:	4299      	cmp	r1, r3
 800481a:	d002      	beq.n	8004822 <__sflush_r+0x96>
 800481c:	0028      	movs	r0, r5
 800481e:	f000 f9d7 	bl	8004bd0 <_free_r>
 8004822:	2000      	movs	r0, #0
 8004824:	6360      	str	r0, [r4, #52]	; 0x34
 8004826:	e7be      	b.n	80047a6 <__sflush_r+0x1a>
 8004828:	2301      	movs	r3, #1
 800482a:	0028      	movs	r0, r5
 800482c:	47b8      	blx	r7
 800482e:	1c43      	adds	r3, r0, #1
 8004830:	d1c6      	bne.n	80047c0 <__sflush_r+0x34>
 8004832:	682b      	ldr	r3, [r5, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0c3      	beq.n	80047c0 <__sflush_r+0x34>
 8004838:	2b1d      	cmp	r3, #29
 800483a:	d001      	beq.n	8004840 <__sflush_r+0xb4>
 800483c:	2b16      	cmp	r3, #22
 800483e:	d101      	bne.n	8004844 <__sflush_r+0xb8>
 8004840:	602e      	str	r6, [r5, #0]
 8004842:	e7af      	b.n	80047a4 <__sflush_r+0x18>
 8004844:	2340      	movs	r3, #64	; 0x40
 8004846:	89a2      	ldrh	r2, [r4, #12]
 8004848:	4313      	orrs	r3, r2
 800484a:	81a3      	strh	r3, [r4, #12]
 800484c:	e7ab      	b.n	80047a6 <__sflush_r+0x1a>
 800484e:	2340      	movs	r3, #64	; 0x40
 8004850:	430b      	orrs	r3, r1
 8004852:	2001      	movs	r0, #1
 8004854:	81a3      	strh	r3, [r4, #12]
 8004856:	4240      	negs	r0, r0
 8004858:	e7a5      	b.n	80047a6 <__sflush_r+0x1a>
 800485a:	690f      	ldr	r7, [r1, #16]
 800485c:	2f00      	cmp	r7, #0
 800485e:	d0a1      	beq.n	80047a4 <__sflush_r+0x18>
 8004860:	680b      	ldr	r3, [r1, #0]
 8004862:	600f      	str	r7, [r1, #0]
 8004864:	1bdb      	subs	r3, r3, r7
 8004866:	9301      	str	r3, [sp, #4]
 8004868:	2300      	movs	r3, #0
 800486a:	0792      	lsls	r2, r2, #30
 800486c:	d100      	bne.n	8004870 <__sflush_r+0xe4>
 800486e:	694b      	ldr	r3, [r1, #20]
 8004870:	60a3      	str	r3, [r4, #8]
 8004872:	9b01      	ldr	r3, [sp, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	dc00      	bgt.n	800487a <__sflush_r+0xee>
 8004878:	e794      	b.n	80047a4 <__sflush_r+0x18>
 800487a:	9b01      	ldr	r3, [sp, #4]
 800487c:	003a      	movs	r2, r7
 800487e:	6a21      	ldr	r1, [r4, #32]
 8004880:	0028      	movs	r0, r5
 8004882:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004884:	47b0      	blx	r6
 8004886:	2800      	cmp	r0, #0
 8004888:	dc03      	bgt.n	8004892 <__sflush_r+0x106>
 800488a:	2340      	movs	r3, #64	; 0x40
 800488c:	89a2      	ldrh	r2, [r4, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	e7df      	b.n	8004852 <__sflush_r+0xc6>
 8004892:	9b01      	ldr	r3, [sp, #4]
 8004894:	183f      	adds	r7, r7, r0
 8004896:	1a1b      	subs	r3, r3, r0
 8004898:	9301      	str	r3, [sp, #4]
 800489a:	e7ea      	b.n	8004872 <__sflush_r+0xe6>
 800489c:	20400001 	.word	0x20400001

080048a0 <_fflush_r>:
 80048a0:	690b      	ldr	r3, [r1, #16]
 80048a2:	b570      	push	{r4, r5, r6, lr}
 80048a4:	0005      	movs	r5, r0
 80048a6:	000c      	movs	r4, r1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <_fflush_r+0x10>
 80048ac:	2000      	movs	r0, #0
 80048ae:	bd70      	pop	{r4, r5, r6, pc}
 80048b0:	2800      	cmp	r0, #0
 80048b2:	d004      	beq.n	80048be <_fflush_r+0x1e>
 80048b4:	6983      	ldr	r3, [r0, #24]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <_fflush_r+0x1e>
 80048ba:	f000 f85f 	bl	800497c <__sinit>
 80048be:	4b0b      	ldr	r3, [pc, #44]	; (80048ec <_fflush_r+0x4c>)
 80048c0:	429c      	cmp	r4, r3
 80048c2:	d109      	bne.n	80048d8 <_fflush_r+0x38>
 80048c4:	686c      	ldr	r4, [r5, #4]
 80048c6:	220c      	movs	r2, #12
 80048c8:	5ea3      	ldrsh	r3, [r4, r2]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0ee      	beq.n	80048ac <_fflush_r+0xc>
 80048ce:	0021      	movs	r1, r4
 80048d0:	0028      	movs	r0, r5
 80048d2:	f7ff ff5b 	bl	800478c <__sflush_r>
 80048d6:	e7ea      	b.n	80048ae <_fflush_r+0xe>
 80048d8:	4b05      	ldr	r3, [pc, #20]	; (80048f0 <_fflush_r+0x50>)
 80048da:	429c      	cmp	r4, r3
 80048dc:	d101      	bne.n	80048e2 <_fflush_r+0x42>
 80048de:	68ac      	ldr	r4, [r5, #8]
 80048e0:	e7f1      	b.n	80048c6 <_fflush_r+0x26>
 80048e2:	4b04      	ldr	r3, [pc, #16]	; (80048f4 <_fflush_r+0x54>)
 80048e4:	429c      	cmp	r4, r3
 80048e6:	d1ee      	bne.n	80048c6 <_fflush_r+0x26>
 80048e8:	68ec      	ldr	r4, [r5, #12]
 80048ea:	e7ec      	b.n	80048c6 <_fflush_r+0x26>
 80048ec:	08005dd4 	.word	0x08005dd4
 80048f0:	08005df4 	.word	0x08005df4
 80048f4:	08005db4 	.word	0x08005db4

080048f8 <std>:
 80048f8:	2300      	movs	r3, #0
 80048fa:	b510      	push	{r4, lr}
 80048fc:	0004      	movs	r4, r0
 80048fe:	6003      	str	r3, [r0, #0]
 8004900:	6043      	str	r3, [r0, #4]
 8004902:	6083      	str	r3, [r0, #8]
 8004904:	8181      	strh	r1, [r0, #12]
 8004906:	6643      	str	r3, [r0, #100]	; 0x64
 8004908:	81c2      	strh	r2, [r0, #14]
 800490a:	6103      	str	r3, [r0, #16]
 800490c:	6143      	str	r3, [r0, #20]
 800490e:	6183      	str	r3, [r0, #24]
 8004910:	0019      	movs	r1, r3
 8004912:	2208      	movs	r2, #8
 8004914:	305c      	adds	r0, #92	; 0x5c
 8004916:	f7ff fd39 	bl	800438c <memset>
 800491a:	4b05      	ldr	r3, [pc, #20]	; (8004930 <std+0x38>)
 800491c:	6224      	str	r4, [r4, #32]
 800491e:	6263      	str	r3, [r4, #36]	; 0x24
 8004920:	4b04      	ldr	r3, [pc, #16]	; (8004934 <std+0x3c>)
 8004922:	62a3      	str	r3, [r4, #40]	; 0x28
 8004924:	4b04      	ldr	r3, [pc, #16]	; (8004938 <std+0x40>)
 8004926:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004928:	4b04      	ldr	r3, [pc, #16]	; (800493c <std+0x44>)
 800492a:	6323      	str	r3, [r4, #48]	; 0x30
 800492c:	bd10      	pop	{r4, pc}
 800492e:	46c0      	nop			; (mov r8, r8)
 8004930:	080055d9 	.word	0x080055d9
 8004934:	08005601 	.word	0x08005601
 8004938:	08005639 	.word	0x08005639
 800493c:	08005665 	.word	0x08005665

08004940 <_cleanup_r>:
 8004940:	b510      	push	{r4, lr}
 8004942:	4902      	ldr	r1, [pc, #8]	; (800494c <_cleanup_r+0xc>)
 8004944:	f000 f88c 	bl	8004a60 <_fwalk_reent>
 8004948:	bd10      	pop	{r4, pc}
 800494a:	46c0      	nop			; (mov r8, r8)
 800494c:	080048a1 	.word	0x080048a1

08004950 <__sfmoreglue>:
 8004950:	b570      	push	{r4, r5, r6, lr}
 8004952:	2568      	movs	r5, #104	; 0x68
 8004954:	1e4a      	subs	r2, r1, #1
 8004956:	4355      	muls	r5, r2
 8004958:	000e      	movs	r6, r1
 800495a:	0029      	movs	r1, r5
 800495c:	3174      	adds	r1, #116	; 0x74
 800495e:	f000 f981 	bl	8004c64 <_malloc_r>
 8004962:	1e04      	subs	r4, r0, #0
 8004964:	d008      	beq.n	8004978 <__sfmoreglue+0x28>
 8004966:	2100      	movs	r1, #0
 8004968:	002a      	movs	r2, r5
 800496a:	6001      	str	r1, [r0, #0]
 800496c:	6046      	str	r6, [r0, #4]
 800496e:	300c      	adds	r0, #12
 8004970:	60a0      	str	r0, [r4, #8]
 8004972:	3268      	adds	r2, #104	; 0x68
 8004974:	f7ff fd0a 	bl	800438c <memset>
 8004978:	0020      	movs	r0, r4
 800497a:	bd70      	pop	{r4, r5, r6, pc}

0800497c <__sinit>:
 800497c:	6983      	ldr	r3, [r0, #24]
 800497e:	b513      	push	{r0, r1, r4, lr}
 8004980:	0004      	movs	r4, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d128      	bne.n	80049d8 <__sinit+0x5c>
 8004986:	6483      	str	r3, [r0, #72]	; 0x48
 8004988:	64c3      	str	r3, [r0, #76]	; 0x4c
 800498a:	6503      	str	r3, [r0, #80]	; 0x50
 800498c:	4b13      	ldr	r3, [pc, #76]	; (80049dc <__sinit+0x60>)
 800498e:	4a14      	ldr	r2, [pc, #80]	; (80049e0 <__sinit+0x64>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6282      	str	r2, [r0, #40]	; 0x28
 8004994:	9301      	str	r3, [sp, #4]
 8004996:	4298      	cmp	r0, r3
 8004998:	d101      	bne.n	800499e <__sinit+0x22>
 800499a:	2301      	movs	r3, #1
 800499c:	6183      	str	r3, [r0, #24]
 800499e:	0020      	movs	r0, r4
 80049a0:	f000 f820 	bl	80049e4 <__sfp>
 80049a4:	6060      	str	r0, [r4, #4]
 80049a6:	0020      	movs	r0, r4
 80049a8:	f000 f81c 	bl	80049e4 <__sfp>
 80049ac:	60a0      	str	r0, [r4, #8]
 80049ae:	0020      	movs	r0, r4
 80049b0:	f000 f818 	bl	80049e4 <__sfp>
 80049b4:	2200      	movs	r2, #0
 80049b6:	60e0      	str	r0, [r4, #12]
 80049b8:	2104      	movs	r1, #4
 80049ba:	6860      	ldr	r0, [r4, #4]
 80049bc:	f7ff ff9c 	bl	80048f8 <std>
 80049c0:	2201      	movs	r2, #1
 80049c2:	2109      	movs	r1, #9
 80049c4:	68a0      	ldr	r0, [r4, #8]
 80049c6:	f7ff ff97 	bl	80048f8 <std>
 80049ca:	2202      	movs	r2, #2
 80049cc:	2112      	movs	r1, #18
 80049ce:	68e0      	ldr	r0, [r4, #12]
 80049d0:	f7ff ff92 	bl	80048f8 <std>
 80049d4:	2301      	movs	r3, #1
 80049d6:	61a3      	str	r3, [r4, #24]
 80049d8:	bd13      	pop	{r0, r1, r4, pc}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	08005db0 	.word	0x08005db0
 80049e0:	08004941 	.word	0x08004941

080049e4 <__sfp>:
 80049e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e6:	4b1c      	ldr	r3, [pc, #112]	; (8004a58 <__sfp+0x74>)
 80049e8:	0007      	movs	r7, r0
 80049ea:	681e      	ldr	r6, [r3, #0]
 80049ec:	69b3      	ldr	r3, [r6, #24]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d102      	bne.n	80049f8 <__sfp+0x14>
 80049f2:	0030      	movs	r0, r6
 80049f4:	f7ff ffc2 	bl	800497c <__sinit>
 80049f8:	3648      	adds	r6, #72	; 0x48
 80049fa:	68b4      	ldr	r4, [r6, #8]
 80049fc:	6873      	ldr	r3, [r6, #4]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	d504      	bpl.n	8004a0c <__sfp+0x28>
 8004a02:	6833      	ldr	r3, [r6, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d007      	beq.n	8004a18 <__sfp+0x34>
 8004a08:	6836      	ldr	r6, [r6, #0]
 8004a0a:	e7f6      	b.n	80049fa <__sfp+0x16>
 8004a0c:	220c      	movs	r2, #12
 8004a0e:	5ea5      	ldrsh	r5, [r4, r2]
 8004a10:	2d00      	cmp	r5, #0
 8004a12:	d00d      	beq.n	8004a30 <__sfp+0x4c>
 8004a14:	3468      	adds	r4, #104	; 0x68
 8004a16:	e7f2      	b.n	80049fe <__sfp+0x1a>
 8004a18:	2104      	movs	r1, #4
 8004a1a:	0038      	movs	r0, r7
 8004a1c:	f7ff ff98 	bl	8004950 <__sfmoreglue>
 8004a20:	6030      	str	r0, [r6, #0]
 8004a22:	2800      	cmp	r0, #0
 8004a24:	d1f0      	bne.n	8004a08 <__sfp+0x24>
 8004a26:	230c      	movs	r3, #12
 8004a28:	0004      	movs	r4, r0
 8004a2a:	603b      	str	r3, [r7, #0]
 8004a2c:	0020      	movs	r0, r4
 8004a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a30:	0020      	movs	r0, r4
 8004a32:	4b0a      	ldr	r3, [pc, #40]	; (8004a5c <__sfp+0x78>)
 8004a34:	6665      	str	r5, [r4, #100]	; 0x64
 8004a36:	6025      	str	r5, [r4, #0]
 8004a38:	6065      	str	r5, [r4, #4]
 8004a3a:	60a5      	str	r5, [r4, #8]
 8004a3c:	60e3      	str	r3, [r4, #12]
 8004a3e:	6125      	str	r5, [r4, #16]
 8004a40:	6165      	str	r5, [r4, #20]
 8004a42:	61a5      	str	r5, [r4, #24]
 8004a44:	2208      	movs	r2, #8
 8004a46:	0029      	movs	r1, r5
 8004a48:	305c      	adds	r0, #92	; 0x5c
 8004a4a:	f7ff fc9f 	bl	800438c <memset>
 8004a4e:	6365      	str	r5, [r4, #52]	; 0x34
 8004a50:	63a5      	str	r5, [r4, #56]	; 0x38
 8004a52:	64a5      	str	r5, [r4, #72]	; 0x48
 8004a54:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004a56:	e7e9      	b.n	8004a2c <__sfp+0x48>
 8004a58:	08005db0 	.word	0x08005db0
 8004a5c:	ffff0001 	.word	0xffff0001

08004a60 <_fwalk_reent>:
 8004a60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a62:	0004      	movs	r4, r0
 8004a64:	0007      	movs	r7, r0
 8004a66:	2600      	movs	r6, #0
 8004a68:	9101      	str	r1, [sp, #4]
 8004a6a:	3448      	adds	r4, #72	; 0x48
 8004a6c:	2c00      	cmp	r4, #0
 8004a6e:	d101      	bne.n	8004a74 <_fwalk_reent+0x14>
 8004a70:	0030      	movs	r0, r6
 8004a72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a74:	6863      	ldr	r3, [r4, #4]
 8004a76:	68a5      	ldr	r5, [r4, #8]
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	9b00      	ldr	r3, [sp, #0]
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	d501      	bpl.n	8004a86 <_fwalk_reent+0x26>
 8004a82:	6824      	ldr	r4, [r4, #0]
 8004a84:	e7f2      	b.n	8004a6c <_fwalk_reent+0xc>
 8004a86:	89ab      	ldrh	r3, [r5, #12]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d908      	bls.n	8004a9e <_fwalk_reent+0x3e>
 8004a8c:	220e      	movs	r2, #14
 8004a8e:	5eab      	ldrsh	r3, [r5, r2]
 8004a90:	3301      	adds	r3, #1
 8004a92:	d004      	beq.n	8004a9e <_fwalk_reent+0x3e>
 8004a94:	0029      	movs	r1, r5
 8004a96:	0038      	movs	r0, r7
 8004a98:	9b01      	ldr	r3, [sp, #4]
 8004a9a:	4798      	blx	r3
 8004a9c:	4306      	orrs	r6, r0
 8004a9e:	3568      	adds	r5, #104	; 0x68
 8004aa0:	e7eb      	b.n	8004a7a <_fwalk_reent+0x1a>
	...

08004aa4 <__locale_ctype_ptr>:
 8004aa4:	4b04      	ldr	r3, [pc, #16]	; (8004ab8 <__locale_ctype_ptr+0x14>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d100      	bne.n	8004ab0 <__locale_ctype_ptr+0xc>
 8004aae:	4b03      	ldr	r3, [pc, #12]	; (8004abc <__locale_ctype_ptr+0x18>)
 8004ab0:	33ec      	adds	r3, #236	; 0xec
 8004ab2:	6818      	ldr	r0, [r3, #0]
 8004ab4:	4770      	bx	lr
 8004ab6:	46c0      	nop			; (mov r8, r8)
 8004ab8:	20000010 	.word	0x20000010
 8004abc:	20000074 	.word	0x20000074

08004ac0 <__swhatbuf_r>:
 8004ac0:	b570      	push	{r4, r5, r6, lr}
 8004ac2:	000e      	movs	r6, r1
 8004ac4:	001d      	movs	r5, r3
 8004ac6:	230e      	movs	r3, #14
 8004ac8:	5ec9      	ldrsh	r1, [r1, r3]
 8004aca:	b096      	sub	sp, #88	; 0x58
 8004acc:	0014      	movs	r4, r2
 8004ace:	2900      	cmp	r1, #0
 8004ad0:	da07      	bge.n	8004ae2 <__swhatbuf_r+0x22>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	602b      	str	r3, [r5, #0]
 8004ad6:	89b3      	ldrh	r3, [r6, #12]
 8004ad8:	061b      	lsls	r3, r3, #24
 8004ada:	d411      	bmi.n	8004b00 <__swhatbuf_r+0x40>
 8004adc:	2380      	movs	r3, #128	; 0x80
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	e00f      	b.n	8004b02 <__swhatbuf_r+0x42>
 8004ae2:	466a      	mov	r2, sp
 8004ae4:	f000 fdf6 	bl	80056d4 <_fstat_r>
 8004ae8:	2800      	cmp	r0, #0
 8004aea:	dbf2      	blt.n	8004ad2 <__swhatbuf_r+0x12>
 8004aec:	22f0      	movs	r2, #240	; 0xf0
 8004aee:	9b01      	ldr	r3, [sp, #4]
 8004af0:	0212      	lsls	r2, r2, #8
 8004af2:	4013      	ands	r3, r2
 8004af4:	4a05      	ldr	r2, [pc, #20]	; (8004b0c <__swhatbuf_r+0x4c>)
 8004af6:	189b      	adds	r3, r3, r2
 8004af8:	425a      	negs	r2, r3
 8004afa:	4153      	adcs	r3, r2
 8004afc:	602b      	str	r3, [r5, #0]
 8004afe:	e7ed      	b.n	8004adc <__swhatbuf_r+0x1c>
 8004b00:	2340      	movs	r3, #64	; 0x40
 8004b02:	2000      	movs	r0, #0
 8004b04:	6023      	str	r3, [r4, #0]
 8004b06:	b016      	add	sp, #88	; 0x58
 8004b08:	bd70      	pop	{r4, r5, r6, pc}
 8004b0a:	46c0      	nop			; (mov r8, r8)
 8004b0c:	ffffe000 	.word	0xffffe000

08004b10 <__smakebuf_r>:
 8004b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b12:	2602      	movs	r6, #2
 8004b14:	898b      	ldrh	r3, [r1, #12]
 8004b16:	0005      	movs	r5, r0
 8004b18:	000c      	movs	r4, r1
 8004b1a:	4233      	tst	r3, r6
 8004b1c:	d006      	beq.n	8004b2c <__smakebuf_r+0x1c>
 8004b1e:	0023      	movs	r3, r4
 8004b20:	3347      	adds	r3, #71	; 0x47
 8004b22:	6023      	str	r3, [r4, #0]
 8004b24:	6123      	str	r3, [r4, #16]
 8004b26:	2301      	movs	r3, #1
 8004b28:	6163      	str	r3, [r4, #20]
 8004b2a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004b2c:	ab01      	add	r3, sp, #4
 8004b2e:	466a      	mov	r2, sp
 8004b30:	f7ff ffc6 	bl	8004ac0 <__swhatbuf_r>
 8004b34:	9900      	ldr	r1, [sp, #0]
 8004b36:	0007      	movs	r7, r0
 8004b38:	0028      	movs	r0, r5
 8004b3a:	f000 f893 	bl	8004c64 <_malloc_r>
 8004b3e:	2800      	cmp	r0, #0
 8004b40:	d108      	bne.n	8004b54 <__smakebuf_r+0x44>
 8004b42:	220c      	movs	r2, #12
 8004b44:	5ea3      	ldrsh	r3, [r4, r2]
 8004b46:	059a      	lsls	r2, r3, #22
 8004b48:	d4ef      	bmi.n	8004b2a <__smakebuf_r+0x1a>
 8004b4a:	2203      	movs	r2, #3
 8004b4c:	4393      	bics	r3, r2
 8004b4e:	431e      	orrs	r6, r3
 8004b50:	81a6      	strh	r6, [r4, #12]
 8004b52:	e7e4      	b.n	8004b1e <__smakebuf_r+0xe>
 8004b54:	4b0f      	ldr	r3, [pc, #60]	; (8004b94 <__smakebuf_r+0x84>)
 8004b56:	62ab      	str	r3, [r5, #40]	; 0x28
 8004b58:	2380      	movs	r3, #128	; 0x80
 8004b5a:	89a2      	ldrh	r2, [r4, #12]
 8004b5c:	6020      	str	r0, [r4, #0]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	81a3      	strh	r3, [r4, #12]
 8004b62:	9b00      	ldr	r3, [sp, #0]
 8004b64:	6120      	str	r0, [r4, #16]
 8004b66:	6163      	str	r3, [r4, #20]
 8004b68:	9b01      	ldr	r3, [sp, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00d      	beq.n	8004b8a <__smakebuf_r+0x7a>
 8004b6e:	230e      	movs	r3, #14
 8004b70:	5ee1      	ldrsh	r1, [r4, r3]
 8004b72:	0028      	movs	r0, r5
 8004b74:	f000 fdc0 	bl	80056f8 <_isatty_r>
 8004b78:	2800      	cmp	r0, #0
 8004b7a:	d006      	beq.n	8004b8a <__smakebuf_r+0x7a>
 8004b7c:	2203      	movs	r2, #3
 8004b7e:	89a3      	ldrh	r3, [r4, #12]
 8004b80:	4393      	bics	r3, r2
 8004b82:	001a      	movs	r2, r3
 8004b84:	2301      	movs	r3, #1
 8004b86:	4313      	orrs	r3, r2
 8004b88:	81a3      	strh	r3, [r4, #12]
 8004b8a:	89a0      	ldrh	r0, [r4, #12]
 8004b8c:	4338      	orrs	r0, r7
 8004b8e:	81a0      	strh	r0, [r4, #12]
 8004b90:	e7cb      	b.n	8004b2a <__smakebuf_r+0x1a>
 8004b92:	46c0      	nop			; (mov r8, r8)
 8004b94:	08004941 	.word	0x08004941

08004b98 <malloc>:
 8004b98:	b510      	push	{r4, lr}
 8004b9a:	4b03      	ldr	r3, [pc, #12]	; (8004ba8 <malloc+0x10>)
 8004b9c:	0001      	movs	r1, r0
 8004b9e:	6818      	ldr	r0, [r3, #0]
 8004ba0:	f000 f860 	bl	8004c64 <_malloc_r>
 8004ba4:	bd10      	pop	{r4, pc}
 8004ba6:	46c0      	nop			; (mov r8, r8)
 8004ba8:	20000010 	.word	0x20000010

08004bac <__ascii_mbtowc>:
 8004bac:	b082      	sub	sp, #8
 8004bae:	2900      	cmp	r1, #0
 8004bb0:	d100      	bne.n	8004bb4 <__ascii_mbtowc+0x8>
 8004bb2:	a901      	add	r1, sp, #4
 8004bb4:	1e10      	subs	r0, r2, #0
 8004bb6:	d006      	beq.n	8004bc6 <__ascii_mbtowc+0x1a>
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d006      	beq.n	8004bca <__ascii_mbtowc+0x1e>
 8004bbc:	7813      	ldrb	r3, [r2, #0]
 8004bbe:	600b      	str	r3, [r1, #0]
 8004bc0:	7810      	ldrb	r0, [r2, #0]
 8004bc2:	1e43      	subs	r3, r0, #1
 8004bc4:	4198      	sbcs	r0, r3
 8004bc6:	b002      	add	sp, #8
 8004bc8:	4770      	bx	lr
 8004bca:	2002      	movs	r0, #2
 8004bcc:	4240      	negs	r0, r0
 8004bce:	e7fa      	b.n	8004bc6 <__ascii_mbtowc+0x1a>

08004bd0 <_free_r>:
 8004bd0:	b570      	push	{r4, r5, r6, lr}
 8004bd2:	0005      	movs	r5, r0
 8004bd4:	2900      	cmp	r1, #0
 8004bd6:	d010      	beq.n	8004bfa <_free_r+0x2a>
 8004bd8:	1f0c      	subs	r4, r1, #4
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	da00      	bge.n	8004be2 <_free_r+0x12>
 8004be0:	18e4      	adds	r4, r4, r3
 8004be2:	0028      	movs	r0, r5
 8004be4:	f000 fdd5 	bl	8005792 <__malloc_lock>
 8004be8:	4a1d      	ldr	r2, [pc, #116]	; (8004c60 <_free_r+0x90>)
 8004bea:	6813      	ldr	r3, [r2, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d105      	bne.n	8004bfc <_free_r+0x2c>
 8004bf0:	6063      	str	r3, [r4, #4]
 8004bf2:	6014      	str	r4, [r2, #0]
 8004bf4:	0028      	movs	r0, r5
 8004bf6:	f000 fdcd 	bl	8005794 <__malloc_unlock>
 8004bfa:	bd70      	pop	{r4, r5, r6, pc}
 8004bfc:	42a3      	cmp	r3, r4
 8004bfe:	d909      	bls.n	8004c14 <_free_r+0x44>
 8004c00:	6821      	ldr	r1, [r4, #0]
 8004c02:	1860      	adds	r0, r4, r1
 8004c04:	4283      	cmp	r3, r0
 8004c06:	d1f3      	bne.n	8004bf0 <_free_r+0x20>
 8004c08:	6818      	ldr	r0, [r3, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	1841      	adds	r1, r0, r1
 8004c0e:	6021      	str	r1, [r4, #0]
 8004c10:	e7ee      	b.n	8004bf0 <_free_r+0x20>
 8004c12:	0013      	movs	r3, r2
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	2a00      	cmp	r2, #0
 8004c18:	d001      	beq.n	8004c1e <_free_r+0x4e>
 8004c1a:	42a2      	cmp	r2, r4
 8004c1c:	d9f9      	bls.n	8004c12 <_free_r+0x42>
 8004c1e:	6819      	ldr	r1, [r3, #0]
 8004c20:	1858      	adds	r0, r3, r1
 8004c22:	42a0      	cmp	r0, r4
 8004c24:	d10b      	bne.n	8004c3e <_free_r+0x6e>
 8004c26:	6820      	ldr	r0, [r4, #0]
 8004c28:	1809      	adds	r1, r1, r0
 8004c2a:	1858      	adds	r0, r3, r1
 8004c2c:	6019      	str	r1, [r3, #0]
 8004c2e:	4282      	cmp	r2, r0
 8004c30:	d1e0      	bne.n	8004bf4 <_free_r+0x24>
 8004c32:	6810      	ldr	r0, [r2, #0]
 8004c34:	6852      	ldr	r2, [r2, #4]
 8004c36:	1841      	adds	r1, r0, r1
 8004c38:	6019      	str	r1, [r3, #0]
 8004c3a:	605a      	str	r2, [r3, #4]
 8004c3c:	e7da      	b.n	8004bf4 <_free_r+0x24>
 8004c3e:	42a0      	cmp	r0, r4
 8004c40:	d902      	bls.n	8004c48 <_free_r+0x78>
 8004c42:	230c      	movs	r3, #12
 8004c44:	602b      	str	r3, [r5, #0]
 8004c46:	e7d5      	b.n	8004bf4 <_free_r+0x24>
 8004c48:	6821      	ldr	r1, [r4, #0]
 8004c4a:	1860      	adds	r0, r4, r1
 8004c4c:	4282      	cmp	r2, r0
 8004c4e:	d103      	bne.n	8004c58 <_free_r+0x88>
 8004c50:	6810      	ldr	r0, [r2, #0]
 8004c52:	6852      	ldr	r2, [r2, #4]
 8004c54:	1841      	adds	r1, r0, r1
 8004c56:	6021      	str	r1, [r4, #0]
 8004c58:	6062      	str	r2, [r4, #4]
 8004c5a:	605c      	str	r4, [r3, #4]
 8004c5c:	e7ca      	b.n	8004bf4 <_free_r+0x24>
 8004c5e:	46c0      	nop			; (mov r8, r8)
 8004c60:	200002cc 	.word	0x200002cc

08004c64 <_malloc_r>:
 8004c64:	2303      	movs	r3, #3
 8004c66:	b570      	push	{r4, r5, r6, lr}
 8004c68:	1ccd      	adds	r5, r1, #3
 8004c6a:	439d      	bics	r5, r3
 8004c6c:	3508      	adds	r5, #8
 8004c6e:	0006      	movs	r6, r0
 8004c70:	2d0c      	cmp	r5, #12
 8004c72:	d21e      	bcs.n	8004cb2 <_malloc_r+0x4e>
 8004c74:	250c      	movs	r5, #12
 8004c76:	42a9      	cmp	r1, r5
 8004c78:	d81d      	bhi.n	8004cb6 <_malloc_r+0x52>
 8004c7a:	0030      	movs	r0, r6
 8004c7c:	f000 fd89 	bl	8005792 <__malloc_lock>
 8004c80:	4a25      	ldr	r2, [pc, #148]	; (8004d18 <_malloc_r+0xb4>)
 8004c82:	6814      	ldr	r4, [r2, #0]
 8004c84:	0021      	movs	r1, r4
 8004c86:	2900      	cmp	r1, #0
 8004c88:	d119      	bne.n	8004cbe <_malloc_r+0x5a>
 8004c8a:	4c24      	ldr	r4, [pc, #144]	; (8004d1c <_malloc_r+0xb8>)
 8004c8c:	6823      	ldr	r3, [r4, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d103      	bne.n	8004c9a <_malloc_r+0x36>
 8004c92:	0030      	movs	r0, r6
 8004c94:	f000 fc8e 	bl	80055b4 <_sbrk_r>
 8004c98:	6020      	str	r0, [r4, #0]
 8004c9a:	0029      	movs	r1, r5
 8004c9c:	0030      	movs	r0, r6
 8004c9e:	f000 fc89 	bl	80055b4 <_sbrk_r>
 8004ca2:	1c43      	adds	r3, r0, #1
 8004ca4:	d12b      	bne.n	8004cfe <_malloc_r+0x9a>
 8004ca6:	230c      	movs	r3, #12
 8004ca8:	0030      	movs	r0, r6
 8004caa:	6033      	str	r3, [r6, #0]
 8004cac:	f000 fd72 	bl	8005794 <__malloc_unlock>
 8004cb0:	e003      	b.n	8004cba <_malloc_r+0x56>
 8004cb2:	2d00      	cmp	r5, #0
 8004cb4:	dadf      	bge.n	8004c76 <_malloc_r+0x12>
 8004cb6:	230c      	movs	r3, #12
 8004cb8:	6033      	str	r3, [r6, #0]
 8004cba:	2000      	movs	r0, #0
 8004cbc:	bd70      	pop	{r4, r5, r6, pc}
 8004cbe:	680b      	ldr	r3, [r1, #0]
 8004cc0:	1b5b      	subs	r3, r3, r5
 8004cc2:	d419      	bmi.n	8004cf8 <_malloc_r+0x94>
 8004cc4:	2b0b      	cmp	r3, #11
 8004cc6:	d903      	bls.n	8004cd0 <_malloc_r+0x6c>
 8004cc8:	600b      	str	r3, [r1, #0]
 8004cca:	18cc      	adds	r4, r1, r3
 8004ccc:	6025      	str	r5, [r4, #0]
 8004cce:	e003      	b.n	8004cd8 <_malloc_r+0x74>
 8004cd0:	684b      	ldr	r3, [r1, #4]
 8004cd2:	428c      	cmp	r4, r1
 8004cd4:	d10d      	bne.n	8004cf2 <_malloc_r+0x8e>
 8004cd6:	6013      	str	r3, [r2, #0]
 8004cd8:	0030      	movs	r0, r6
 8004cda:	f000 fd5b 	bl	8005794 <__malloc_unlock>
 8004cde:	0020      	movs	r0, r4
 8004ce0:	2207      	movs	r2, #7
 8004ce2:	300b      	adds	r0, #11
 8004ce4:	1d23      	adds	r3, r4, #4
 8004ce6:	4390      	bics	r0, r2
 8004ce8:	1ac3      	subs	r3, r0, r3
 8004cea:	d0e7      	beq.n	8004cbc <_malloc_r+0x58>
 8004cec:	425a      	negs	r2, r3
 8004cee:	50e2      	str	r2, [r4, r3]
 8004cf0:	e7e4      	b.n	8004cbc <_malloc_r+0x58>
 8004cf2:	6063      	str	r3, [r4, #4]
 8004cf4:	000c      	movs	r4, r1
 8004cf6:	e7ef      	b.n	8004cd8 <_malloc_r+0x74>
 8004cf8:	000c      	movs	r4, r1
 8004cfa:	6849      	ldr	r1, [r1, #4]
 8004cfc:	e7c3      	b.n	8004c86 <_malloc_r+0x22>
 8004cfe:	2303      	movs	r3, #3
 8004d00:	1cc4      	adds	r4, r0, #3
 8004d02:	439c      	bics	r4, r3
 8004d04:	42a0      	cmp	r0, r4
 8004d06:	d0e1      	beq.n	8004ccc <_malloc_r+0x68>
 8004d08:	1a21      	subs	r1, r4, r0
 8004d0a:	0030      	movs	r0, r6
 8004d0c:	f000 fc52 	bl	80055b4 <_sbrk_r>
 8004d10:	1c43      	adds	r3, r0, #1
 8004d12:	d1db      	bne.n	8004ccc <_malloc_r+0x68>
 8004d14:	e7c7      	b.n	8004ca6 <_malloc_r+0x42>
 8004d16:	46c0      	nop			; (mov r8, r8)
 8004d18:	200002cc 	.word	0x200002cc
 8004d1c:	200002d0 	.word	0x200002d0

08004d20 <__ssputs_r>:
 8004d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d22:	688e      	ldr	r6, [r1, #8]
 8004d24:	b085      	sub	sp, #20
 8004d26:	0007      	movs	r7, r0
 8004d28:	000c      	movs	r4, r1
 8004d2a:	9203      	str	r2, [sp, #12]
 8004d2c:	9301      	str	r3, [sp, #4]
 8004d2e:	429e      	cmp	r6, r3
 8004d30:	d83c      	bhi.n	8004dac <__ssputs_r+0x8c>
 8004d32:	2390      	movs	r3, #144	; 0x90
 8004d34:	898a      	ldrh	r2, [r1, #12]
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	421a      	tst	r2, r3
 8004d3a:	d034      	beq.n	8004da6 <__ssputs_r+0x86>
 8004d3c:	2503      	movs	r5, #3
 8004d3e:	6909      	ldr	r1, [r1, #16]
 8004d40:	6823      	ldr	r3, [r4, #0]
 8004d42:	1a5b      	subs	r3, r3, r1
 8004d44:	9302      	str	r3, [sp, #8]
 8004d46:	6963      	ldr	r3, [r4, #20]
 8004d48:	9802      	ldr	r0, [sp, #8]
 8004d4a:	435d      	muls	r5, r3
 8004d4c:	0feb      	lsrs	r3, r5, #31
 8004d4e:	195d      	adds	r5, r3, r5
 8004d50:	9b01      	ldr	r3, [sp, #4]
 8004d52:	106d      	asrs	r5, r5, #1
 8004d54:	3301      	adds	r3, #1
 8004d56:	181b      	adds	r3, r3, r0
 8004d58:	42ab      	cmp	r3, r5
 8004d5a:	d900      	bls.n	8004d5e <__ssputs_r+0x3e>
 8004d5c:	001d      	movs	r5, r3
 8004d5e:	0553      	lsls	r3, r2, #21
 8004d60:	d532      	bpl.n	8004dc8 <__ssputs_r+0xa8>
 8004d62:	0029      	movs	r1, r5
 8004d64:	0038      	movs	r0, r7
 8004d66:	f7ff ff7d 	bl	8004c64 <_malloc_r>
 8004d6a:	1e06      	subs	r6, r0, #0
 8004d6c:	d109      	bne.n	8004d82 <__ssputs_r+0x62>
 8004d6e:	230c      	movs	r3, #12
 8004d70:	603b      	str	r3, [r7, #0]
 8004d72:	2340      	movs	r3, #64	; 0x40
 8004d74:	2001      	movs	r0, #1
 8004d76:	89a2      	ldrh	r2, [r4, #12]
 8004d78:	4240      	negs	r0, r0
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	81a3      	strh	r3, [r4, #12]
 8004d7e:	b005      	add	sp, #20
 8004d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d82:	9a02      	ldr	r2, [sp, #8]
 8004d84:	6921      	ldr	r1, [r4, #16]
 8004d86:	f000 fce8 	bl	800575a <memcpy>
 8004d8a:	89a3      	ldrh	r3, [r4, #12]
 8004d8c:	4a14      	ldr	r2, [pc, #80]	; (8004de0 <__ssputs_r+0xc0>)
 8004d8e:	401a      	ands	r2, r3
 8004d90:	2380      	movs	r3, #128	; 0x80
 8004d92:	4313      	orrs	r3, r2
 8004d94:	81a3      	strh	r3, [r4, #12]
 8004d96:	9b02      	ldr	r3, [sp, #8]
 8004d98:	6126      	str	r6, [r4, #16]
 8004d9a:	18f6      	adds	r6, r6, r3
 8004d9c:	6026      	str	r6, [r4, #0]
 8004d9e:	6165      	str	r5, [r4, #20]
 8004da0:	9e01      	ldr	r6, [sp, #4]
 8004da2:	1aed      	subs	r5, r5, r3
 8004da4:	60a5      	str	r5, [r4, #8]
 8004da6:	9b01      	ldr	r3, [sp, #4]
 8004da8:	429e      	cmp	r6, r3
 8004daa:	d900      	bls.n	8004dae <__ssputs_r+0x8e>
 8004dac:	9e01      	ldr	r6, [sp, #4]
 8004dae:	0032      	movs	r2, r6
 8004db0:	9903      	ldr	r1, [sp, #12]
 8004db2:	6820      	ldr	r0, [r4, #0]
 8004db4:	f000 fcda 	bl	800576c <memmove>
 8004db8:	68a3      	ldr	r3, [r4, #8]
 8004dba:	2000      	movs	r0, #0
 8004dbc:	1b9b      	subs	r3, r3, r6
 8004dbe:	60a3      	str	r3, [r4, #8]
 8004dc0:	6823      	ldr	r3, [r4, #0]
 8004dc2:	199e      	adds	r6, r3, r6
 8004dc4:	6026      	str	r6, [r4, #0]
 8004dc6:	e7da      	b.n	8004d7e <__ssputs_r+0x5e>
 8004dc8:	002a      	movs	r2, r5
 8004dca:	0038      	movs	r0, r7
 8004dcc:	f000 fce3 	bl	8005796 <_realloc_r>
 8004dd0:	1e06      	subs	r6, r0, #0
 8004dd2:	d1e0      	bne.n	8004d96 <__ssputs_r+0x76>
 8004dd4:	6921      	ldr	r1, [r4, #16]
 8004dd6:	0038      	movs	r0, r7
 8004dd8:	f7ff fefa 	bl	8004bd0 <_free_r>
 8004ddc:	e7c7      	b.n	8004d6e <__ssputs_r+0x4e>
 8004dde:	46c0      	nop			; (mov r8, r8)
 8004de0:	fffffb7f 	.word	0xfffffb7f

08004de4 <_svfiprintf_r>:
 8004de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004de6:	b0a1      	sub	sp, #132	; 0x84
 8004de8:	9003      	str	r0, [sp, #12]
 8004dea:	001d      	movs	r5, r3
 8004dec:	898b      	ldrh	r3, [r1, #12]
 8004dee:	000f      	movs	r7, r1
 8004df0:	0016      	movs	r6, r2
 8004df2:	061b      	lsls	r3, r3, #24
 8004df4:	d511      	bpl.n	8004e1a <_svfiprintf_r+0x36>
 8004df6:	690b      	ldr	r3, [r1, #16]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10e      	bne.n	8004e1a <_svfiprintf_r+0x36>
 8004dfc:	2140      	movs	r1, #64	; 0x40
 8004dfe:	f7ff ff31 	bl	8004c64 <_malloc_r>
 8004e02:	6038      	str	r0, [r7, #0]
 8004e04:	6138      	str	r0, [r7, #16]
 8004e06:	2800      	cmp	r0, #0
 8004e08:	d105      	bne.n	8004e16 <_svfiprintf_r+0x32>
 8004e0a:	230c      	movs	r3, #12
 8004e0c:	9a03      	ldr	r2, [sp, #12]
 8004e0e:	3801      	subs	r0, #1
 8004e10:	6013      	str	r3, [r2, #0]
 8004e12:	b021      	add	sp, #132	; 0x84
 8004e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e16:	2340      	movs	r3, #64	; 0x40
 8004e18:	617b      	str	r3, [r7, #20]
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	ac08      	add	r4, sp, #32
 8004e1e:	6163      	str	r3, [r4, #20]
 8004e20:	3320      	adds	r3, #32
 8004e22:	7663      	strb	r3, [r4, #25]
 8004e24:	3310      	adds	r3, #16
 8004e26:	76a3      	strb	r3, [r4, #26]
 8004e28:	9507      	str	r5, [sp, #28]
 8004e2a:	0035      	movs	r5, r6
 8004e2c:	782b      	ldrb	r3, [r5, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <_svfiprintf_r+0x52>
 8004e32:	2b25      	cmp	r3, #37	; 0x25
 8004e34:	d146      	bne.n	8004ec4 <_svfiprintf_r+0xe0>
 8004e36:	1bab      	subs	r3, r5, r6
 8004e38:	9305      	str	r3, [sp, #20]
 8004e3a:	d00c      	beq.n	8004e56 <_svfiprintf_r+0x72>
 8004e3c:	0032      	movs	r2, r6
 8004e3e:	0039      	movs	r1, r7
 8004e40:	9803      	ldr	r0, [sp, #12]
 8004e42:	f7ff ff6d 	bl	8004d20 <__ssputs_r>
 8004e46:	1c43      	adds	r3, r0, #1
 8004e48:	d100      	bne.n	8004e4c <_svfiprintf_r+0x68>
 8004e4a:	e0ae      	b.n	8004faa <_svfiprintf_r+0x1c6>
 8004e4c:	6962      	ldr	r2, [r4, #20]
 8004e4e:	9b05      	ldr	r3, [sp, #20]
 8004e50:	4694      	mov	ip, r2
 8004e52:	4463      	add	r3, ip
 8004e54:	6163      	str	r3, [r4, #20]
 8004e56:	782b      	ldrb	r3, [r5, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d100      	bne.n	8004e5e <_svfiprintf_r+0x7a>
 8004e5c:	e0a5      	b.n	8004faa <_svfiprintf_r+0x1c6>
 8004e5e:	2201      	movs	r2, #1
 8004e60:	2300      	movs	r3, #0
 8004e62:	4252      	negs	r2, r2
 8004e64:	6062      	str	r2, [r4, #4]
 8004e66:	a904      	add	r1, sp, #16
 8004e68:	3254      	adds	r2, #84	; 0x54
 8004e6a:	1852      	adds	r2, r2, r1
 8004e6c:	1c6e      	adds	r6, r5, #1
 8004e6e:	6023      	str	r3, [r4, #0]
 8004e70:	60e3      	str	r3, [r4, #12]
 8004e72:	60a3      	str	r3, [r4, #8]
 8004e74:	7013      	strb	r3, [r2, #0]
 8004e76:	65a3      	str	r3, [r4, #88]	; 0x58
 8004e78:	7831      	ldrb	r1, [r6, #0]
 8004e7a:	2205      	movs	r2, #5
 8004e7c:	4853      	ldr	r0, [pc, #332]	; (8004fcc <_svfiprintf_r+0x1e8>)
 8004e7e:	f000 fc61 	bl	8005744 <memchr>
 8004e82:	1c75      	adds	r5, r6, #1
 8004e84:	2800      	cmp	r0, #0
 8004e86:	d11f      	bne.n	8004ec8 <_svfiprintf_r+0xe4>
 8004e88:	6822      	ldr	r2, [r4, #0]
 8004e8a:	06d3      	lsls	r3, r2, #27
 8004e8c:	d504      	bpl.n	8004e98 <_svfiprintf_r+0xb4>
 8004e8e:	2353      	movs	r3, #83	; 0x53
 8004e90:	a904      	add	r1, sp, #16
 8004e92:	185b      	adds	r3, r3, r1
 8004e94:	2120      	movs	r1, #32
 8004e96:	7019      	strb	r1, [r3, #0]
 8004e98:	0713      	lsls	r3, r2, #28
 8004e9a:	d504      	bpl.n	8004ea6 <_svfiprintf_r+0xc2>
 8004e9c:	2353      	movs	r3, #83	; 0x53
 8004e9e:	a904      	add	r1, sp, #16
 8004ea0:	185b      	adds	r3, r3, r1
 8004ea2:	212b      	movs	r1, #43	; 0x2b
 8004ea4:	7019      	strb	r1, [r3, #0]
 8004ea6:	7833      	ldrb	r3, [r6, #0]
 8004ea8:	2b2a      	cmp	r3, #42	; 0x2a
 8004eaa:	d016      	beq.n	8004eda <_svfiprintf_r+0xf6>
 8004eac:	0035      	movs	r5, r6
 8004eae:	2100      	movs	r1, #0
 8004eb0:	200a      	movs	r0, #10
 8004eb2:	68e3      	ldr	r3, [r4, #12]
 8004eb4:	782a      	ldrb	r2, [r5, #0]
 8004eb6:	1c6e      	adds	r6, r5, #1
 8004eb8:	3a30      	subs	r2, #48	; 0x30
 8004eba:	2a09      	cmp	r2, #9
 8004ebc:	d94e      	bls.n	8004f5c <_svfiprintf_r+0x178>
 8004ebe:	2900      	cmp	r1, #0
 8004ec0:	d018      	beq.n	8004ef4 <_svfiprintf_r+0x110>
 8004ec2:	e010      	b.n	8004ee6 <_svfiprintf_r+0x102>
 8004ec4:	3501      	adds	r5, #1
 8004ec6:	e7b1      	b.n	8004e2c <_svfiprintf_r+0x48>
 8004ec8:	4b40      	ldr	r3, [pc, #256]	; (8004fcc <_svfiprintf_r+0x1e8>)
 8004eca:	6822      	ldr	r2, [r4, #0]
 8004ecc:	1ac0      	subs	r0, r0, r3
 8004ece:	2301      	movs	r3, #1
 8004ed0:	4083      	lsls	r3, r0
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	002e      	movs	r6, r5
 8004ed8:	e7ce      	b.n	8004e78 <_svfiprintf_r+0x94>
 8004eda:	9b07      	ldr	r3, [sp, #28]
 8004edc:	1d19      	adds	r1, r3, #4
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	9107      	str	r1, [sp, #28]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	db01      	blt.n	8004eea <_svfiprintf_r+0x106>
 8004ee6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ee8:	e004      	b.n	8004ef4 <_svfiprintf_r+0x110>
 8004eea:	425b      	negs	r3, r3
 8004eec:	60e3      	str	r3, [r4, #12]
 8004eee:	2302      	movs	r3, #2
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	6023      	str	r3, [r4, #0]
 8004ef4:	782b      	ldrb	r3, [r5, #0]
 8004ef6:	2b2e      	cmp	r3, #46	; 0x2e
 8004ef8:	d10a      	bne.n	8004f10 <_svfiprintf_r+0x12c>
 8004efa:	786b      	ldrb	r3, [r5, #1]
 8004efc:	2b2a      	cmp	r3, #42	; 0x2a
 8004efe:	d135      	bne.n	8004f6c <_svfiprintf_r+0x188>
 8004f00:	9b07      	ldr	r3, [sp, #28]
 8004f02:	3502      	adds	r5, #2
 8004f04:	1d1a      	adds	r2, r3, #4
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	9207      	str	r2, [sp, #28]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	db2b      	blt.n	8004f66 <_svfiprintf_r+0x182>
 8004f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f10:	4e2f      	ldr	r6, [pc, #188]	; (8004fd0 <_svfiprintf_r+0x1ec>)
 8004f12:	7829      	ldrb	r1, [r5, #0]
 8004f14:	2203      	movs	r2, #3
 8004f16:	0030      	movs	r0, r6
 8004f18:	f000 fc14 	bl	8005744 <memchr>
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	d006      	beq.n	8004f2e <_svfiprintf_r+0x14a>
 8004f20:	2340      	movs	r3, #64	; 0x40
 8004f22:	1b80      	subs	r0, r0, r6
 8004f24:	4083      	lsls	r3, r0
 8004f26:	6822      	ldr	r2, [r4, #0]
 8004f28:	3501      	adds	r5, #1
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	6023      	str	r3, [r4, #0]
 8004f2e:	7829      	ldrb	r1, [r5, #0]
 8004f30:	2206      	movs	r2, #6
 8004f32:	4828      	ldr	r0, [pc, #160]	; (8004fd4 <_svfiprintf_r+0x1f0>)
 8004f34:	1c6e      	adds	r6, r5, #1
 8004f36:	7621      	strb	r1, [r4, #24]
 8004f38:	f000 fc04 	bl	8005744 <memchr>
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	d03c      	beq.n	8004fba <_svfiprintf_r+0x1d6>
 8004f40:	4b25      	ldr	r3, [pc, #148]	; (8004fd8 <_svfiprintf_r+0x1f4>)
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d125      	bne.n	8004f92 <_svfiprintf_r+0x1ae>
 8004f46:	2207      	movs	r2, #7
 8004f48:	9b07      	ldr	r3, [sp, #28]
 8004f4a:	3307      	adds	r3, #7
 8004f4c:	4393      	bics	r3, r2
 8004f4e:	3308      	adds	r3, #8
 8004f50:	9307      	str	r3, [sp, #28]
 8004f52:	6963      	ldr	r3, [r4, #20]
 8004f54:	9a04      	ldr	r2, [sp, #16]
 8004f56:	189b      	adds	r3, r3, r2
 8004f58:	6163      	str	r3, [r4, #20]
 8004f5a:	e766      	b.n	8004e2a <_svfiprintf_r+0x46>
 8004f5c:	4343      	muls	r3, r0
 8004f5e:	2101      	movs	r1, #1
 8004f60:	189b      	adds	r3, r3, r2
 8004f62:	0035      	movs	r5, r6
 8004f64:	e7a6      	b.n	8004eb4 <_svfiprintf_r+0xd0>
 8004f66:	2301      	movs	r3, #1
 8004f68:	425b      	negs	r3, r3
 8004f6a:	e7d0      	b.n	8004f0e <_svfiprintf_r+0x12a>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	200a      	movs	r0, #10
 8004f70:	001a      	movs	r2, r3
 8004f72:	3501      	adds	r5, #1
 8004f74:	6063      	str	r3, [r4, #4]
 8004f76:	7829      	ldrb	r1, [r5, #0]
 8004f78:	1c6e      	adds	r6, r5, #1
 8004f7a:	3930      	subs	r1, #48	; 0x30
 8004f7c:	2909      	cmp	r1, #9
 8004f7e:	d903      	bls.n	8004f88 <_svfiprintf_r+0x1a4>
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d0c5      	beq.n	8004f10 <_svfiprintf_r+0x12c>
 8004f84:	9209      	str	r2, [sp, #36]	; 0x24
 8004f86:	e7c3      	b.n	8004f10 <_svfiprintf_r+0x12c>
 8004f88:	4342      	muls	r2, r0
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	1852      	adds	r2, r2, r1
 8004f8e:	0035      	movs	r5, r6
 8004f90:	e7f1      	b.n	8004f76 <_svfiprintf_r+0x192>
 8004f92:	ab07      	add	r3, sp, #28
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	003a      	movs	r2, r7
 8004f98:	4b10      	ldr	r3, [pc, #64]	; (8004fdc <_svfiprintf_r+0x1f8>)
 8004f9a:	0021      	movs	r1, r4
 8004f9c:	9803      	ldr	r0, [sp, #12]
 8004f9e:	e000      	b.n	8004fa2 <_svfiprintf_r+0x1be>
 8004fa0:	bf00      	nop
 8004fa2:	9004      	str	r0, [sp, #16]
 8004fa4:	9b04      	ldr	r3, [sp, #16]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	d1d3      	bne.n	8004f52 <_svfiprintf_r+0x16e>
 8004faa:	89bb      	ldrh	r3, [r7, #12]
 8004fac:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004fae:	065b      	lsls	r3, r3, #25
 8004fb0:	d400      	bmi.n	8004fb4 <_svfiprintf_r+0x1d0>
 8004fb2:	e72e      	b.n	8004e12 <_svfiprintf_r+0x2e>
 8004fb4:	2001      	movs	r0, #1
 8004fb6:	4240      	negs	r0, r0
 8004fb8:	e72b      	b.n	8004e12 <_svfiprintf_r+0x2e>
 8004fba:	ab07      	add	r3, sp, #28
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	003a      	movs	r2, r7
 8004fc0:	4b06      	ldr	r3, [pc, #24]	; (8004fdc <_svfiprintf_r+0x1f8>)
 8004fc2:	0021      	movs	r1, r4
 8004fc4:	9803      	ldr	r0, [sp, #12]
 8004fc6:	f000 f9b7 	bl	8005338 <_printf_i>
 8004fca:	e7ea      	b.n	8004fa2 <_svfiprintf_r+0x1be>
 8004fcc:	08005e1e 	.word	0x08005e1e
 8004fd0:	08005e24 	.word	0x08005e24
 8004fd4:	08005e28 	.word	0x08005e28
 8004fd8:	00000000 	.word	0x00000000
 8004fdc:	08004d21 	.word	0x08004d21

08004fe0 <__sfputc_r>:
 8004fe0:	6893      	ldr	r3, [r2, #8]
 8004fe2:	b510      	push	{r4, lr}
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	6093      	str	r3, [r2, #8]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	da04      	bge.n	8004ff6 <__sfputc_r+0x16>
 8004fec:	6994      	ldr	r4, [r2, #24]
 8004fee:	42a3      	cmp	r3, r4
 8004ff0:	db07      	blt.n	8005002 <__sfputc_r+0x22>
 8004ff2:	290a      	cmp	r1, #10
 8004ff4:	d005      	beq.n	8005002 <__sfputc_r+0x22>
 8004ff6:	6813      	ldr	r3, [r2, #0]
 8004ff8:	1c58      	adds	r0, r3, #1
 8004ffa:	6010      	str	r0, [r2, #0]
 8004ffc:	7019      	strb	r1, [r3, #0]
 8004ffe:	0008      	movs	r0, r1
 8005000:	bd10      	pop	{r4, pc}
 8005002:	f7ff faf7 	bl	80045f4 <__swbuf_r>
 8005006:	0001      	movs	r1, r0
 8005008:	e7f9      	b.n	8004ffe <__sfputc_r+0x1e>

0800500a <__sfputs_r>:
 800500a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800500c:	0006      	movs	r6, r0
 800500e:	000f      	movs	r7, r1
 8005010:	0014      	movs	r4, r2
 8005012:	18d5      	adds	r5, r2, r3
 8005014:	42ac      	cmp	r4, r5
 8005016:	d101      	bne.n	800501c <__sfputs_r+0x12>
 8005018:	2000      	movs	r0, #0
 800501a:	e007      	b.n	800502c <__sfputs_r+0x22>
 800501c:	7821      	ldrb	r1, [r4, #0]
 800501e:	003a      	movs	r2, r7
 8005020:	0030      	movs	r0, r6
 8005022:	f7ff ffdd 	bl	8004fe0 <__sfputc_r>
 8005026:	3401      	adds	r4, #1
 8005028:	1c43      	adds	r3, r0, #1
 800502a:	d1f3      	bne.n	8005014 <__sfputs_r+0xa>
 800502c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005030 <_vfiprintf_r>:
 8005030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005032:	b0a1      	sub	sp, #132	; 0x84
 8005034:	9003      	str	r0, [sp, #12]
 8005036:	000f      	movs	r7, r1
 8005038:	0016      	movs	r6, r2
 800503a:	001d      	movs	r5, r3
 800503c:	2800      	cmp	r0, #0
 800503e:	d005      	beq.n	800504c <_vfiprintf_r+0x1c>
 8005040:	6983      	ldr	r3, [r0, #24]
 8005042:	9305      	str	r3, [sp, #20]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <_vfiprintf_r+0x1c>
 8005048:	f7ff fc98 	bl	800497c <__sinit>
 800504c:	4b7b      	ldr	r3, [pc, #492]	; (800523c <_vfiprintf_r+0x20c>)
 800504e:	429f      	cmp	r7, r3
 8005050:	d15c      	bne.n	800510c <_vfiprintf_r+0xdc>
 8005052:	9b03      	ldr	r3, [sp, #12]
 8005054:	685f      	ldr	r7, [r3, #4]
 8005056:	89bb      	ldrh	r3, [r7, #12]
 8005058:	071b      	lsls	r3, r3, #28
 800505a:	d563      	bpl.n	8005124 <_vfiprintf_r+0xf4>
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d060      	beq.n	8005124 <_vfiprintf_r+0xf4>
 8005062:	2300      	movs	r3, #0
 8005064:	ac08      	add	r4, sp, #32
 8005066:	6163      	str	r3, [r4, #20]
 8005068:	3320      	adds	r3, #32
 800506a:	7663      	strb	r3, [r4, #25]
 800506c:	3310      	adds	r3, #16
 800506e:	76a3      	strb	r3, [r4, #26]
 8005070:	9507      	str	r5, [sp, #28]
 8005072:	0035      	movs	r5, r6
 8005074:	782b      	ldrb	r3, [r5, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <_vfiprintf_r+0x4e>
 800507a:	2b25      	cmp	r3, #37	; 0x25
 800507c:	d15c      	bne.n	8005138 <_vfiprintf_r+0x108>
 800507e:	1bab      	subs	r3, r5, r6
 8005080:	9305      	str	r3, [sp, #20]
 8005082:	d00c      	beq.n	800509e <_vfiprintf_r+0x6e>
 8005084:	0032      	movs	r2, r6
 8005086:	0039      	movs	r1, r7
 8005088:	9803      	ldr	r0, [sp, #12]
 800508a:	f7ff ffbe 	bl	800500a <__sfputs_r>
 800508e:	1c43      	adds	r3, r0, #1
 8005090:	d100      	bne.n	8005094 <_vfiprintf_r+0x64>
 8005092:	e0c4      	b.n	800521e <_vfiprintf_r+0x1ee>
 8005094:	6962      	ldr	r2, [r4, #20]
 8005096:	9b05      	ldr	r3, [sp, #20]
 8005098:	4694      	mov	ip, r2
 800509a:	4463      	add	r3, ip
 800509c:	6163      	str	r3, [r4, #20]
 800509e:	782b      	ldrb	r3, [r5, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d100      	bne.n	80050a6 <_vfiprintf_r+0x76>
 80050a4:	e0bb      	b.n	800521e <_vfiprintf_r+0x1ee>
 80050a6:	2201      	movs	r2, #1
 80050a8:	2300      	movs	r3, #0
 80050aa:	4252      	negs	r2, r2
 80050ac:	6062      	str	r2, [r4, #4]
 80050ae:	a904      	add	r1, sp, #16
 80050b0:	3254      	adds	r2, #84	; 0x54
 80050b2:	1852      	adds	r2, r2, r1
 80050b4:	1c6e      	adds	r6, r5, #1
 80050b6:	6023      	str	r3, [r4, #0]
 80050b8:	60e3      	str	r3, [r4, #12]
 80050ba:	60a3      	str	r3, [r4, #8]
 80050bc:	7013      	strb	r3, [r2, #0]
 80050be:	65a3      	str	r3, [r4, #88]	; 0x58
 80050c0:	7831      	ldrb	r1, [r6, #0]
 80050c2:	2205      	movs	r2, #5
 80050c4:	485e      	ldr	r0, [pc, #376]	; (8005240 <_vfiprintf_r+0x210>)
 80050c6:	f000 fb3d 	bl	8005744 <memchr>
 80050ca:	1c75      	adds	r5, r6, #1
 80050cc:	2800      	cmp	r0, #0
 80050ce:	d135      	bne.n	800513c <_vfiprintf_r+0x10c>
 80050d0:	6822      	ldr	r2, [r4, #0]
 80050d2:	06d3      	lsls	r3, r2, #27
 80050d4:	d504      	bpl.n	80050e0 <_vfiprintf_r+0xb0>
 80050d6:	2353      	movs	r3, #83	; 0x53
 80050d8:	a904      	add	r1, sp, #16
 80050da:	185b      	adds	r3, r3, r1
 80050dc:	2120      	movs	r1, #32
 80050de:	7019      	strb	r1, [r3, #0]
 80050e0:	0713      	lsls	r3, r2, #28
 80050e2:	d504      	bpl.n	80050ee <_vfiprintf_r+0xbe>
 80050e4:	2353      	movs	r3, #83	; 0x53
 80050e6:	a904      	add	r1, sp, #16
 80050e8:	185b      	adds	r3, r3, r1
 80050ea:	212b      	movs	r1, #43	; 0x2b
 80050ec:	7019      	strb	r1, [r3, #0]
 80050ee:	7833      	ldrb	r3, [r6, #0]
 80050f0:	2b2a      	cmp	r3, #42	; 0x2a
 80050f2:	d02c      	beq.n	800514e <_vfiprintf_r+0x11e>
 80050f4:	0035      	movs	r5, r6
 80050f6:	2100      	movs	r1, #0
 80050f8:	200a      	movs	r0, #10
 80050fa:	68e3      	ldr	r3, [r4, #12]
 80050fc:	782a      	ldrb	r2, [r5, #0]
 80050fe:	1c6e      	adds	r6, r5, #1
 8005100:	3a30      	subs	r2, #48	; 0x30
 8005102:	2a09      	cmp	r2, #9
 8005104:	d964      	bls.n	80051d0 <_vfiprintf_r+0x1a0>
 8005106:	2900      	cmp	r1, #0
 8005108:	d02e      	beq.n	8005168 <_vfiprintf_r+0x138>
 800510a:	e026      	b.n	800515a <_vfiprintf_r+0x12a>
 800510c:	4b4d      	ldr	r3, [pc, #308]	; (8005244 <_vfiprintf_r+0x214>)
 800510e:	429f      	cmp	r7, r3
 8005110:	d102      	bne.n	8005118 <_vfiprintf_r+0xe8>
 8005112:	9b03      	ldr	r3, [sp, #12]
 8005114:	689f      	ldr	r7, [r3, #8]
 8005116:	e79e      	b.n	8005056 <_vfiprintf_r+0x26>
 8005118:	4b4b      	ldr	r3, [pc, #300]	; (8005248 <_vfiprintf_r+0x218>)
 800511a:	429f      	cmp	r7, r3
 800511c:	d19b      	bne.n	8005056 <_vfiprintf_r+0x26>
 800511e:	9b03      	ldr	r3, [sp, #12]
 8005120:	68df      	ldr	r7, [r3, #12]
 8005122:	e798      	b.n	8005056 <_vfiprintf_r+0x26>
 8005124:	0039      	movs	r1, r7
 8005126:	9803      	ldr	r0, [sp, #12]
 8005128:	f7ff faba 	bl	80046a0 <__swsetup_r>
 800512c:	2800      	cmp	r0, #0
 800512e:	d098      	beq.n	8005062 <_vfiprintf_r+0x32>
 8005130:	2001      	movs	r0, #1
 8005132:	4240      	negs	r0, r0
 8005134:	b021      	add	sp, #132	; 0x84
 8005136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005138:	3501      	adds	r5, #1
 800513a:	e79b      	b.n	8005074 <_vfiprintf_r+0x44>
 800513c:	4b40      	ldr	r3, [pc, #256]	; (8005240 <_vfiprintf_r+0x210>)
 800513e:	6822      	ldr	r2, [r4, #0]
 8005140:	1ac0      	subs	r0, r0, r3
 8005142:	2301      	movs	r3, #1
 8005144:	4083      	lsls	r3, r0
 8005146:	4313      	orrs	r3, r2
 8005148:	6023      	str	r3, [r4, #0]
 800514a:	002e      	movs	r6, r5
 800514c:	e7b8      	b.n	80050c0 <_vfiprintf_r+0x90>
 800514e:	9b07      	ldr	r3, [sp, #28]
 8005150:	1d19      	adds	r1, r3, #4
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	9107      	str	r1, [sp, #28]
 8005156:	2b00      	cmp	r3, #0
 8005158:	db01      	blt.n	800515e <_vfiprintf_r+0x12e>
 800515a:	930b      	str	r3, [sp, #44]	; 0x2c
 800515c:	e004      	b.n	8005168 <_vfiprintf_r+0x138>
 800515e:	425b      	negs	r3, r3
 8005160:	60e3      	str	r3, [r4, #12]
 8005162:	2302      	movs	r3, #2
 8005164:	4313      	orrs	r3, r2
 8005166:	6023      	str	r3, [r4, #0]
 8005168:	782b      	ldrb	r3, [r5, #0]
 800516a:	2b2e      	cmp	r3, #46	; 0x2e
 800516c:	d10a      	bne.n	8005184 <_vfiprintf_r+0x154>
 800516e:	786b      	ldrb	r3, [r5, #1]
 8005170:	2b2a      	cmp	r3, #42	; 0x2a
 8005172:	d135      	bne.n	80051e0 <_vfiprintf_r+0x1b0>
 8005174:	9b07      	ldr	r3, [sp, #28]
 8005176:	3502      	adds	r5, #2
 8005178:	1d1a      	adds	r2, r3, #4
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	9207      	str	r2, [sp, #28]
 800517e:	2b00      	cmp	r3, #0
 8005180:	db2b      	blt.n	80051da <_vfiprintf_r+0x1aa>
 8005182:	9309      	str	r3, [sp, #36]	; 0x24
 8005184:	4e31      	ldr	r6, [pc, #196]	; (800524c <_vfiprintf_r+0x21c>)
 8005186:	7829      	ldrb	r1, [r5, #0]
 8005188:	2203      	movs	r2, #3
 800518a:	0030      	movs	r0, r6
 800518c:	f000 fada 	bl	8005744 <memchr>
 8005190:	2800      	cmp	r0, #0
 8005192:	d006      	beq.n	80051a2 <_vfiprintf_r+0x172>
 8005194:	2340      	movs	r3, #64	; 0x40
 8005196:	1b80      	subs	r0, r0, r6
 8005198:	4083      	lsls	r3, r0
 800519a:	6822      	ldr	r2, [r4, #0]
 800519c:	3501      	adds	r5, #1
 800519e:	4313      	orrs	r3, r2
 80051a0:	6023      	str	r3, [r4, #0]
 80051a2:	7829      	ldrb	r1, [r5, #0]
 80051a4:	2206      	movs	r2, #6
 80051a6:	482a      	ldr	r0, [pc, #168]	; (8005250 <_vfiprintf_r+0x220>)
 80051a8:	1c6e      	adds	r6, r5, #1
 80051aa:	7621      	strb	r1, [r4, #24]
 80051ac:	f000 faca 	bl	8005744 <memchr>
 80051b0:	2800      	cmp	r0, #0
 80051b2:	d03a      	beq.n	800522a <_vfiprintf_r+0x1fa>
 80051b4:	4b27      	ldr	r3, [pc, #156]	; (8005254 <_vfiprintf_r+0x224>)
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d125      	bne.n	8005206 <_vfiprintf_r+0x1d6>
 80051ba:	2207      	movs	r2, #7
 80051bc:	9b07      	ldr	r3, [sp, #28]
 80051be:	3307      	adds	r3, #7
 80051c0:	4393      	bics	r3, r2
 80051c2:	3308      	adds	r3, #8
 80051c4:	9307      	str	r3, [sp, #28]
 80051c6:	6963      	ldr	r3, [r4, #20]
 80051c8:	9a04      	ldr	r2, [sp, #16]
 80051ca:	189b      	adds	r3, r3, r2
 80051cc:	6163      	str	r3, [r4, #20]
 80051ce:	e750      	b.n	8005072 <_vfiprintf_r+0x42>
 80051d0:	4343      	muls	r3, r0
 80051d2:	2101      	movs	r1, #1
 80051d4:	189b      	adds	r3, r3, r2
 80051d6:	0035      	movs	r5, r6
 80051d8:	e790      	b.n	80050fc <_vfiprintf_r+0xcc>
 80051da:	2301      	movs	r3, #1
 80051dc:	425b      	negs	r3, r3
 80051de:	e7d0      	b.n	8005182 <_vfiprintf_r+0x152>
 80051e0:	2300      	movs	r3, #0
 80051e2:	200a      	movs	r0, #10
 80051e4:	001a      	movs	r2, r3
 80051e6:	3501      	adds	r5, #1
 80051e8:	6063      	str	r3, [r4, #4]
 80051ea:	7829      	ldrb	r1, [r5, #0]
 80051ec:	1c6e      	adds	r6, r5, #1
 80051ee:	3930      	subs	r1, #48	; 0x30
 80051f0:	2909      	cmp	r1, #9
 80051f2:	d903      	bls.n	80051fc <_vfiprintf_r+0x1cc>
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0c5      	beq.n	8005184 <_vfiprintf_r+0x154>
 80051f8:	9209      	str	r2, [sp, #36]	; 0x24
 80051fa:	e7c3      	b.n	8005184 <_vfiprintf_r+0x154>
 80051fc:	4342      	muls	r2, r0
 80051fe:	2301      	movs	r3, #1
 8005200:	1852      	adds	r2, r2, r1
 8005202:	0035      	movs	r5, r6
 8005204:	e7f1      	b.n	80051ea <_vfiprintf_r+0x1ba>
 8005206:	ab07      	add	r3, sp, #28
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	003a      	movs	r2, r7
 800520c:	4b12      	ldr	r3, [pc, #72]	; (8005258 <_vfiprintf_r+0x228>)
 800520e:	0021      	movs	r1, r4
 8005210:	9803      	ldr	r0, [sp, #12]
 8005212:	e000      	b.n	8005216 <_vfiprintf_r+0x1e6>
 8005214:	bf00      	nop
 8005216:	9004      	str	r0, [sp, #16]
 8005218:	9b04      	ldr	r3, [sp, #16]
 800521a:	3301      	adds	r3, #1
 800521c:	d1d3      	bne.n	80051c6 <_vfiprintf_r+0x196>
 800521e:	89bb      	ldrh	r3, [r7, #12]
 8005220:	065b      	lsls	r3, r3, #25
 8005222:	d500      	bpl.n	8005226 <_vfiprintf_r+0x1f6>
 8005224:	e784      	b.n	8005130 <_vfiprintf_r+0x100>
 8005226:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005228:	e784      	b.n	8005134 <_vfiprintf_r+0x104>
 800522a:	ab07      	add	r3, sp, #28
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	003a      	movs	r2, r7
 8005230:	4b09      	ldr	r3, [pc, #36]	; (8005258 <_vfiprintf_r+0x228>)
 8005232:	0021      	movs	r1, r4
 8005234:	9803      	ldr	r0, [sp, #12]
 8005236:	f000 f87f 	bl	8005338 <_printf_i>
 800523a:	e7ec      	b.n	8005216 <_vfiprintf_r+0x1e6>
 800523c:	08005dd4 	.word	0x08005dd4
 8005240:	08005e1e 	.word	0x08005e1e
 8005244:	08005df4 	.word	0x08005df4
 8005248:	08005db4 	.word	0x08005db4
 800524c:	08005e24 	.word	0x08005e24
 8005250:	08005e28 	.word	0x08005e28
 8005254:	00000000 	.word	0x00000000
 8005258:	0800500b 	.word	0x0800500b

0800525c <_printf_common>:
 800525c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800525e:	0015      	movs	r5, r2
 8005260:	9301      	str	r3, [sp, #4]
 8005262:	688a      	ldr	r2, [r1, #8]
 8005264:	690b      	ldr	r3, [r1, #16]
 8005266:	9000      	str	r0, [sp, #0]
 8005268:	000c      	movs	r4, r1
 800526a:	4293      	cmp	r3, r2
 800526c:	da00      	bge.n	8005270 <_printf_common+0x14>
 800526e:	0013      	movs	r3, r2
 8005270:	0022      	movs	r2, r4
 8005272:	602b      	str	r3, [r5, #0]
 8005274:	3243      	adds	r2, #67	; 0x43
 8005276:	7812      	ldrb	r2, [r2, #0]
 8005278:	2a00      	cmp	r2, #0
 800527a:	d001      	beq.n	8005280 <_printf_common+0x24>
 800527c:	3301      	adds	r3, #1
 800527e:	602b      	str	r3, [r5, #0]
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	069b      	lsls	r3, r3, #26
 8005284:	d502      	bpl.n	800528c <_printf_common+0x30>
 8005286:	682b      	ldr	r3, [r5, #0]
 8005288:	3302      	adds	r3, #2
 800528a:	602b      	str	r3, [r5, #0]
 800528c:	2706      	movs	r7, #6
 800528e:	6823      	ldr	r3, [r4, #0]
 8005290:	401f      	ands	r7, r3
 8005292:	d027      	beq.n	80052e4 <_printf_common+0x88>
 8005294:	0023      	movs	r3, r4
 8005296:	3343      	adds	r3, #67	; 0x43
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	1e5a      	subs	r2, r3, #1
 800529c:	4193      	sbcs	r3, r2
 800529e:	6822      	ldr	r2, [r4, #0]
 80052a0:	0692      	lsls	r2, r2, #26
 80052a2:	d430      	bmi.n	8005306 <_printf_common+0xaa>
 80052a4:	0022      	movs	r2, r4
 80052a6:	9901      	ldr	r1, [sp, #4]
 80052a8:	3243      	adds	r2, #67	; 0x43
 80052aa:	9800      	ldr	r0, [sp, #0]
 80052ac:	9e08      	ldr	r6, [sp, #32]
 80052ae:	47b0      	blx	r6
 80052b0:	1c43      	adds	r3, r0, #1
 80052b2:	d025      	beq.n	8005300 <_printf_common+0xa4>
 80052b4:	2306      	movs	r3, #6
 80052b6:	6820      	ldr	r0, [r4, #0]
 80052b8:	682a      	ldr	r2, [r5, #0]
 80052ba:	68e1      	ldr	r1, [r4, #12]
 80052bc:	4003      	ands	r3, r0
 80052be:	2500      	movs	r5, #0
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	d103      	bne.n	80052cc <_printf_common+0x70>
 80052c4:	1a8d      	subs	r5, r1, r2
 80052c6:	43eb      	mvns	r3, r5
 80052c8:	17db      	asrs	r3, r3, #31
 80052ca:	401d      	ands	r5, r3
 80052cc:	68a3      	ldr	r3, [r4, #8]
 80052ce:	6922      	ldr	r2, [r4, #16]
 80052d0:	4293      	cmp	r3, r2
 80052d2:	dd01      	ble.n	80052d8 <_printf_common+0x7c>
 80052d4:	1a9b      	subs	r3, r3, r2
 80052d6:	18ed      	adds	r5, r5, r3
 80052d8:	2700      	movs	r7, #0
 80052da:	42bd      	cmp	r5, r7
 80052dc:	d120      	bne.n	8005320 <_printf_common+0xc4>
 80052de:	2000      	movs	r0, #0
 80052e0:	e010      	b.n	8005304 <_printf_common+0xa8>
 80052e2:	3701      	adds	r7, #1
 80052e4:	68e3      	ldr	r3, [r4, #12]
 80052e6:	682a      	ldr	r2, [r5, #0]
 80052e8:	1a9b      	subs	r3, r3, r2
 80052ea:	42bb      	cmp	r3, r7
 80052ec:	ddd2      	ble.n	8005294 <_printf_common+0x38>
 80052ee:	0022      	movs	r2, r4
 80052f0:	2301      	movs	r3, #1
 80052f2:	3219      	adds	r2, #25
 80052f4:	9901      	ldr	r1, [sp, #4]
 80052f6:	9800      	ldr	r0, [sp, #0]
 80052f8:	9e08      	ldr	r6, [sp, #32]
 80052fa:	47b0      	blx	r6
 80052fc:	1c43      	adds	r3, r0, #1
 80052fe:	d1f0      	bne.n	80052e2 <_printf_common+0x86>
 8005300:	2001      	movs	r0, #1
 8005302:	4240      	negs	r0, r0
 8005304:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005306:	2030      	movs	r0, #48	; 0x30
 8005308:	18e1      	adds	r1, r4, r3
 800530a:	3143      	adds	r1, #67	; 0x43
 800530c:	7008      	strb	r0, [r1, #0]
 800530e:	0021      	movs	r1, r4
 8005310:	1c5a      	adds	r2, r3, #1
 8005312:	3145      	adds	r1, #69	; 0x45
 8005314:	7809      	ldrb	r1, [r1, #0]
 8005316:	18a2      	adds	r2, r4, r2
 8005318:	3243      	adds	r2, #67	; 0x43
 800531a:	3302      	adds	r3, #2
 800531c:	7011      	strb	r1, [r2, #0]
 800531e:	e7c1      	b.n	80052a4 <_printf_common+0x48>
 8005320:	0022      	movs	r2, r4
 8005322:	2301      	movs	r3, #1
 8005324:	321a      	adds	r2, #26
 8005326:	9901      	ldr	r1, [sp, #4]
 8005328:	9800      	ldr	r0, [sp, #0]
 800532a:	9e08      	ldr	r6, [sp, #32]
 800532c:	47b0      	blx	r6
 800532e:	1c43      	adds	r3, r0, #1
 8005330:	d0e6      	beq.n	8005300 <_printf_common+0xa4>
 8005332:	3701      	adds	r7, #1
 8005334:	e7d1      	b.n	80052da <_printf_common+0x7e>
	...

08005338 <_printf_i>:
 8005338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800533a:	b089      	sub	sp, #36	; 0x24
 800533c:	9204      	str	r2, [sp, #16]
 800533e:	000a      	movs	r2, r1
 8005340:	3243      	adds	r2, #67	; 0x43
 8005342:	9305      	str	r3, [sp, #20]
 8005344:	9003      	str	r0, [sp, #12]
 8005346:	9202      	str	r2, [sp, #8]
 8005348:	7e0a      	ldrb	r2, [r1, #24]
 800534a:	000c      	movs	r4, r1
 800534c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800534e:	2a6e      	cmp	r2, #110	; 0x6e
 8005350:	d100      	bne.n	8005354 <_printf_i+0x1c>
 8005352:	e086      	b.n	8005462 <_printf_i+0x12a>
 8005354:	d81f      	bhi.n	8005396 <_printf_i+0x5e>
 8005356:	2a63      	cmp	r2, #99	; 0x63
 8005358:	d033      	beq.n	80053c2 <_printf_i+0x8a>
 800535a:	d808      	bhi.n	800536e <_printf_i+0x36>
 800535c:	2a00      	cmp	r2, #0
 800535e:	d100      	bne.n	8005362 <_printf_i+0x2a>
 8005360:	e08c      	b.n	800547c <_printf_i+0x144>
 8005362:	2a58      	cmp	r2, #88	; 0x58
 8005364:	d04d      	beq.n	8005402 <_printf_i+0xca>
 8005366:	0025      	movs	r5, r4
 8005368:	3542      	adds	r5, #66	; 0x42
 800536a:	702a      	strb	r2, [r5, #0]
 800536c:	e030      	b.n	80053d0 <_printf_i+0x98>
 800536e:	2a64      	cmp	r2, #100	; 0x64
 8005370:	d001      	beq.n	8005376 <_printf_i+0x3e>
 8005372:	2a69      	cmp	r2, #105	; 0x69
 8005374:	d1f7      	bne.n	8005366 <_printf_i+0x2e>
 8005376:	6819      	ldr	r1, [r3, #0]
 8005378:	6825      	ldr	r5, [r4, #0]
 800537a:	1d0a      	adds	r2, r1, #4
 800537c:	0628      	lsls	r0, r5, #24
 800537e:	d529      	bpl.n	80053d4 <_printf_i+0x9c>
 8005380:	6808      	ldr	r0, [r1, #0]
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	2800      	cmp	r0, #0
 8005386:	da03      	bge.n	8005390 <_printf_i+0x58>
 8005388:	232d      	movs	r3, #45	; 0x2d
 800538a:	9a02      	ldr	r2, [sp, #8]
 800538c:	4240      	negs	r0, r0
 800538e:	7013      	strb	r3, [r2, #0]
 8005390:	4e6b      	ldr	r6, [pc, #428]	; (8005540 <_printf_i+0x208>)
 8005392:	270a      	movs	r7, #10
 8005394:	e04f      	b.n	8005436 <_printf_i+0xfe>
 8005396:	2a73      	cmp	r2, #115	; 0x73
 8005398:	d074      	beq.n	8005484 <_printf_i+0x14c>
 800539a:	d808      	bhi.n	80053ae <_printf_i+0x76>
 800539c:	2a6f      	cmp	r2, #111	; 0x6f
 800539e:	d01f      	beq.n	80053e0 <_printf_i+0xa8>
 80053a0:	2a70      	cmp	r2, #112	; 0x70
 80053a2:	d1e0      	bne.n	8005366 <_printf_i+0x2e>
 80053a4:	2220      	movs	r2, #32
 80053a6:	6809      	ldr	r1, [r1, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	6022      	str	r2, [r4, #0]
 80053ac:	e003      	b.n	80053b6 <_printf_i+0x7e>
 80053ae:	2a75      	cmp	r2, #117	; 0x75
 80053b0:	d016      	beq.n	80053e0 <_printf_i+0xa8>
 80053b2:	2a78      	cmp	r2, #120	; 0x78
 80053b4:	d1d7      	bne.n	8005366 <_printf_i+0x2e>
 80053b6:	0022      	movs	r2, r4
 80053b8:	2178      	movs	r1, #120	; 0x78
 80053ba:	3245      	adds	r2, #69	; 0x45
 80053bc:	7011      	strb	r1, [r2, #0]
 80053be:	4e61      	ldr	r6, [pc, #388]	; (8005544 <_printf_i+0x20c>)
 80053c0:	e022      	b.n	8005408 <_printf_i+0xd0>
 80053c2:	0025      	movs	r5, r4
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	3542      	adds	r5, #66	; 0x42
 80053c8:	1d11      	adds	r1, r2, #4
 80053ca:	6019      	str	r1, [r3, #0]
 80053cc:	6813      	ldr	r3, [r2, #0]
 80053ce:	702b      	strb	r3, [r5, #0]
 80053d0:	2301      	movs	r3, #1
 80053d2:	e065      	b.n	80054a0 <_printf_i+0x168>
 80053d4:	6808      	ldr	r0, [r1, #0]
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	0669      	lsls	r1, r5, #25
 80053da:	d5d3      	bpl.n	8005384 <_printf_i+0x4c>
 80053dc:	b200      	sxth	r0, r0
 80053de:	e7d1      	b.n	8005384 <_printf_i+0x4c>
 80053e0:	6819      	ldr	r1, [r3, #0]
 80053e2:	6825      	ldr	r5, [r4, #0]
 80053e4:	1d08      	adds	r0, r1, #4
 80053e6:	6018      	str	r0, [r3, #0]
 80053e8:	6808      	ldr	r0, [r1, #0]
 80053ea:	062e      	lsls	r6, r5, #24
 80053ec:	d505      	bpl.n	80053fa <_printf_i+0xc2>
 80053ee:	4e54      	ldr	r6, [pc, #336]	; (8005540 <_printf_i+0x208>)
 80053f0:	2708      	movs	r7, #8
 80053f2:	2a6f      	cmp	r2, #111	; 0x6f
 80053f4:	d01b      	beq.n	800542e <_printf_i+0xf6>
 80053f6:	270a      	movs	r7, #10
 80053f8:	e019      	b.n	800542e <_printf_i+0xf6>
 80053fa:	066d      	lsls	r5, r5, #25
 80053fc:	d5f7      	bpl.n	80053ee <_printf_i+0xb6>
 80053fe:	b280      	uxth	r0, r0
 8005400:	e7f5      	b.n	80053ee <_printf_i+0xb6>
 8005402:	3145      	adds	r1, #69	; 0x45
 8005404:	4e4e      	ldr	r6, [pc, #312]	; (8005540 <_printf_i+0x208>)
 8005406:	700a      	strb	r2, [r1, #0]
 8005408:	6818      	ldr	r0, [r3, #0]
 800540a:	6822      	ldr	r2, [r4, #0]
 800540c:	1d01      	adds	r1, r0, #4
 800540e:	6800      	ldr	r0, [r0, #0]
 8005410:	6019      	str	r1, [r3, #0]
 8005412:	0615      	lsls	r5, r2, #24
 8005414:	d521      	bpl.n	800545a <_printf_i+0x122>
 8005416:	07d3      	lsls	r3, r2, #31
 8005418:	d502      	bpl.n	8005420 <_printf_i+0xe8>
 800541a:	2320      	movs	r3, #32
 800541c:	431a      	orrs	r2, r3
 800541e:	6022      	str	r2, [r4, #0]
 8005420:	2710      	movs	r7, #16
 8005422:	2800      	cmp	r0, #0
 8005424:	d103      	bne.n	800542e <_printf_i+0xf6>
 8005426:	2320      	movs	r3, #32
 8005428:	6822      	ldr	r2, [r4, #0]
 800542a:	439a      	bics	r2, r3
 800542c:	6022      	str	r2, [r4, #0]
 800542e:	0023      	movs	r3, r4
 8005430:	2200      	movs	r2, #0
 8005432:	3343      	adds	r3, #67	; 0x43
 8005434:	701a      	strb	r2, [r3, #0]
 8005436:	6863      	ldr	r3, [r4, #4]
 8005438:	60a3      	str	r3, [r4, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	db58      	blt.n	80054f0 <_printf_i+0x1b8>
 800543e:	2204      	movs	r2, #4
 8005440:	6821      	ldr	r1, [r4, #0]
 8005442:	4391      	bics	r1, r2
 8005444:	6021      	str	r1, [r4, #0]
 8005446:	2800      	cmp	r0, #0
 8005448:	d154      	bne.n	80054f4 <_printf_i+0x1bc>
 800544a:	9d02      	ldr	r5, [sp, #8]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d05a      	beq.n	8005506 <_printf_i+0x1ce>
 8005450:	0025      	movs	r5, r4
 8005452:	7833      	ldrb	r3, [r6, #0]
 8005454:	3542      	adds	r5, #66	; 0x42
 8005456:	702b      	strb	r3, [r5, #0]
 8005458:	e055      	b.n	8005506 <_printf_i+0x1ce>
 800545a:	0655      	lsls	r5, r2, #25
 800545c:	d5db      	bpl.n	8005416 <_printf_i+0xde>
 800545e:	b280      	uxth	r0, r0
 8005460:	e7d9      	b.n	8005416 <_printf_i+0xde>
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	680d      	ldr	r5, [r1, #0]
 8005466:	1d10      	adds	r0, r2, #4
 8005468:	6949      	ldr	r1, [r1, #20]
 800546a:	6018      	str	r0, [r3, #0]
 800546c:	6813      	ldr	r3, [r2, #0]
 800546e:	062e      	lsls	r6, r5, #24
 8005470:	d501      	bpl.n	8005476 <_printf_i+0x13e>
 8005472:	6019      	str	r1, [r3, #0]
 8005474:	e002      	b.n	800547c <_printf_i+0x144>
 8005476:	066d      	lsls	r5, r5, #25
 8005478:	d5fb      	bpl.n	8005472 <_printf_i+0x13a>
 800547a:	8019      	strh	r1, [r3, #0]
 800547c:	2300      	movs	r3, #0
 800547e:	9d02      	ldr	r5, [sp, #8]
 8005480:	6123      	str	r3, [r4, #16]
 8005482:	e04f      	b.n	8005524 <_printf_i+0x1ec>
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	1d11      	adds	r1, r2, #4
 8005488:	6019      	str	r1, [r3, #0]
 800548a:	6815      	ldr	r5, [r2, #0]
 800548c:	2100      	movs	r1, #0
 800548e:	6862      	ldr	r2, [r4, #4]
 8005490:	0028      	movs	r0, r5
 8005492:	f000 f957 	bl	8005744 <memchr>
 8005496:	2800      	cmp	r0, #0
 8005498:	d001      	beq.n	800549e <_printf_i+0x166>
 800549a:	1b40      	subs	r0, r0, r5
 800549c:	6060      	str	r0, [r4, #4]
 800549e:	6863      	ldr	r3, [r4, #4]
 80054a0:	6123      	str	r3, [r4, #16]
 80054a2:	2300      	movs	r3, #0
 80054a4:	9a02      	ldr	r2, [sp, #8]
 80054a6:	7013      	strb	r3, [r2, #0]
 80054a8:	e03c      	b.n	8005524 <_printf_i+0x1ec>
 80054aa:	6923      	ldr	r3, [r4, #16]
 80054ac:	002a      	movs	r2, r5
 80054ae:	9904      	ldr	r1, [sp, #16]
 80054b0:	9803      	ldr	r0, [sp, #12]
 80054b2:	9d05      	ldr	r5, [sp, #20]
 80054b4:	47a8      	blx	r5
 80054b6:	1c43      	adds	r3, r0, #1
 80054b8:	d03e      	beq.n	8005538 <_printf_i+0x200>
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	079b      	lsls	r3, r3, #30
 80054be:	d415      	bmi.n	80054ec <_printf_i+0x1b4>
 80054c0:	9b07      	ldr	r3, [sp, #28]
 80054c2:	68e0      	ldr	r0, [r4, #12]
 80054c4:	4298      	cmp	r0, r3
 80054c6:	da39      	bge.n	800553c <_printf_i+0x204>
 80054c8:	0018      	movs	r0, r3
 80054ca:	e037      	b.n	800553c <_printf_i+0x204>
 80054cc:	0022      	movs	r2, r4
 80054ce:	2301      	movs	r3, #1
 80054d0:	3219      	adds	r2, #25
 80054d2:	9904      	ldr	r1, [sp, #16]
 80054d4:	9803      	ldr	r0, [sp, #12]
 80054d6:	9e05      	ldr	r6, [sp, #20]
 80054d8:	47b0      	blx	r6
 80054da:	1c43      	adds	r3, r0, #1
 80054dc:	d02c      	beq.n	8005538 <_printf_i+0x200>
 80054de:	3501      	adds	r5, #1
 80054e0:	68e3      	ldr	r3, [r4, #12]
 80054e2:	9a07      	ldr	r2, [sp, #28]
 80054e4:	1a9b      	subs	r3, r3, r2
 80054e6:	42ab      	cmp	r3, r5
 80054e8:	dcf0      	bgt.n	80054cc <_printf_i+0x194>
 80054ea:	e7e9      	b.n	80054c0 <_printf_i+0x188>
 80054ec:	2500      	movs	r5, #0
 80054ee:	e7f7      	b.n	80054e0 <_printf_i+0x1a8>
 80054f0:	2800      	cmp	r0, #0
 80054f2:	d0ad      	beq.n	8005450 <_printf_i+0x118>
 80054f4:	9d02      	ldr	r5, [sp, #8]
 80054f6:	0039      	movs	r1, r7
 80054f8:	f7fa fe94 	bl	8000224 <__aeabi_uidivmod>
 80054fc:	5c73      	ldrb	r3, [r6, r1]
 80054fe:	3d01      	subs	r5, #1
 8005500:	702b      	strb	r3, [r5, #0]
 8005502:	2800      	cmp	r0, #0
 8005504:	d1f7      	bne.n	80054f6 <_printf_i+0x1be>
 8005506:	2f08      	cmp	r7, #8
 8005508:	d109      	bne.n	800551e <_printf_i+0x1e6>
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	07db      	lsls	r3, r3, #31
 800550e:	d506      	bpl.n	800551e <_printf_i+0x1e6>
 8005510:	6863      	ldr	r3, [r4, #4]
 8005512:	6922      	ldr	r2, [r4, #16]
 8005514:	4293      	cmp	r3, r2
 8005516:	dc02      	bgt.n	800551e <_printf_i+0x1e6>
 8005518:	2330      	movs	r3, #48	; 0x30
 800551a:	3d01      	subs	r5, #1
 800551c:	702b      	strb	r3, [r5, #0]
 800551e:	9b02      	ldr	r3, [sp, #8]
 8005520:	1b5b      	subs	r3, r3, r5
 8005522:	6123      	str	r3, [r4, #16]
 8005524:	9b05      	ldr	r3, [sp, #20]
 8005526:	aa07      	add	r2, sp, #28
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	0021      	movs	r1, r4
 800552c:	9b04      	ldr	r3, [sp, #16]
 800552e:	9803      	ldr	r0, [sp, #12]
 8005530:	f7ff fe94 	bl	800525c <_printf_common>
 8005534:	1c43      	adds	r3, r0, #1
 8005536:	d1b8      	bne.n	80054aa <_printf_i+0x172>
 8005538:	2001      	movs	r0, #1
 800553a:	4240      	negs	r0, r0
 800553c:	b009      	add	sp, #36	; 0x24
 800553e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005540:	08005e2f 	.word	0x08005e2f
 8005544:	08005e40 	.word	0x08005e40

08005548 <_putc_r>:
 8005548:	b570      	push	{r4, r5, r6, lr}
 800554a:	0006      	movs	r6, r0
 800554c:	000d      	movs	r5, r1
 800554e:	0014      	movs	r4, r2
 8005550:	2800      	cmp	r0, #0
 8005552:	d004      	beq.n	800555e <_putc_r+0x16>
 8005554:	6983      	ldr	r3, [r0, #24]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <_putc_r+0x16>
 800555a:	f7ff fa0f 	bl	800497c <__sinit>
 800555e:	4b12      	ldr	r3, [pc, #72]	; (80055a8 <_putc_r+0x60>)
 8005560:	429c      	cmp	r4, r3
 8005562:	d111      	bne.n	8005588 <_putc_r+0x40>
 8005564:	6874      	ldr	r4, [r6, #4]
 8005566:	68a3      	ldr	r3, [r4, #8]
 8005568:	3b01      	subs	r3, #1
 800556a:	60a3      	str	r3, [r4, #8]
 800556c:	2b00      	cmp	r3, #0
 800556e:	da05      	bge.n	800557c <_putc_r+0x34>
 8005570:	69a2      	ldr	r2, [r4, #24]
 8005572:	4293      	cmp	r3, r2
 8005574:	db12      	blt.n	800559c <_putc_r+0x54>
 8005576:	b2eb      	uxtb	r3, r5
 8005578:	2b0a      	cmp	r3, #10
 800557a:	d00f      	beq.n	800559c <_putc_r+0x54>
 800557c:	6823      	ldr	r3, [r4, #0]
 800557e:	b2e8      	uxtb	r0, r5
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	6022      	str	r2, [r4, #0]
 8005584:	701d      	strb	r5, [r3, #0]
 8005586:	bd70      	pop	{r4, r5, r6, pc}
 8005588:	4b08      	ldr	r3, [pc, #32]	; (80055ac <_putc_r+0x64>)
 800558a:	429c      	cmp	r4, r3
 800558c:	d101      	bne.n	8005592 <_putc_r+0x4a>
 800558e:	68b4      	ldr	r4, [r6, #8]
 8005590:	e7e9      	b.n	8005566 <_putc_r+0x1e>
 8005592:	4b07      	ldr	r3, [pc, #28]	; (80055b0 <_putc_r+0x68>)
 8005594:	429c      	cmp	r4, r3
 8005596:	d1e6      	bne.n	8005566 <_putc_r+0x1e>
 8005598:	68f4      	ldr	r4, [r6, #12]
 800559a:	e7e4      	b.n	8005566 <_putc_r+0x1e>
 800559c:	0022      	movs	r2, r4
 800559e:	0029      	movs	r1, r5
 80055a0:	0030      	movs	r0, r6
 80055a2:	f7ff f827 	bl	80045f4 <__swbuf_r>
 80055a6:	e7ee      	b.n	8005586 <_putc_r+0x3e>
 80055a8:	08005dd4 	.word	0x08005dd4
 80055ac:	08005df4 	.word	0x08005df4
 80055b0:	08005db4 	.word	0x08005db4

080055b4 <_sbrk_r>:
 80055b4:	2300      	movs	r3, #0
 80055b6:	b570      	push	{r4, r5, r6, lr}
 80055b8:	4c06      	ldr	r4, [pc, #24]	; (80055d4 <_sbrk_r+0x20>)
 80055ba:	0005      	movs	r5, r0
 80055bc:	0008      	movs	r0, r1
 80055be:	6023      	str	r3, [r4, #0]
 80055c0:	f7fc fd4e 	bl	8002060 <_sbrk>
 80055c4:	1c43      	adds	r3, r0, #1
 80055c6:	d103      	bne.n	80055d0 <_sbrk_r+0x1c>
 80055c8:	6823      	ldr	r3, [r4, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d000      	beq.n	80055d0 <_sbrk_r+0x1c>
 80055ce:	602b      	str	r3, [r5, #0]
 80055d0:	bd70      	pop	{r4, r5, r6, pc}
 80055d2:	46c0      	nop			; (mov r8, r8)
 80055d4:	20000460 	.word	0x20000460

080055d8 <__sread>:
 80055d8:	b570      	push	{r4, r5, r6, lr}
 80055da:	000c      	movs	r4, r1
 80055dc:	250e      	movs	r5, #14
 80055de:	5f49      	ldrsh	r1, [r1, r5]
 80055e0:	f000 f900 	bl	80057e4 <_read_r>
 80055e4:	2800      	cmp	r0, #0
 80055e6:	db03      	blt.n	80055f0 <__sread+0x18>
 80055e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80055ea:	181b      	adds	r3, r3, r0
 80055ec:	6563      	str	r3, [r4, #84]	; 0x54
 80055ee:	bd70      	pop	{r4, r5, r6, pc}
 80055f0:	89a3      	ldrh	r3, [r4, #12]
 80055f2:	4a02      	ldr	r2, [pc, #8]	; (80055fc <__sread+0x24>)
 80055f4:	4013      	ands	r3, r2
 80055f6:	81a3      	strh	r3, [r4, #12]
 80055f8:	e7f9      	b.n	80055ee <__sread+0x16>
 80055fa:	46c0      	nop			; (mov r8, r8)
 80055fc:	ffffefff 	.word	0xffffefff

08005600 <__swrite>:
 8005600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005602:	001f      	movs	r7, r3
 8005604:	898b      	ldrh	r3, [r1, #12]
 8005606:	0005      	movs	r5, r0
 8005608:	000c      	movs	r4, r1
 800560a:	0016      	movs	r6, r2
 800560c:	05db      	lsls	r3, r3, #23
 800560e:	d505      	bpl.n	800561c <__swrite+0x1c>
 8005610:	230e      	movs	r3, #14
 8005612:	5ec9      	ldrsh	r1, [r1, r3]
 8005614:	2200      	movs	r2, #0
 8005616:	2302      	movs	r3, #2
 8005618:	f000 f880 	bl	800571c <_lseek_r>
 800561c:	89a3      	ldrh	r3, [r4, #12]
 800561e:	4a05      	ldr	r2, [pc, #20]	; (8005634 <__swrite+0x34>)
 8005620:	0028      	movs	r0, r5
 8005622:	4013      	ands	r3, r2
 8005624:	81a3      	strh	r3, [r4, #12]
 8005626:	0032      	movs	r2, r6
 8005628:	230e      	movs	r3, #14
 800562a:	5ee1      	ldrsh	r1, [r4, r3]
 800562c:	003b      	movs	r3, r7
 800562e:	f000 f82b 	bl	8005688 <_write_r>
 8005632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005634:	ffffefff 	.word	0xffffefff

08005638 <__sseek>:
 8005638:	b570      	push	{r4, r5, r6, lr}
 800563a:	000c      	movs	r4, r1
 800563c:	250e      	movs	r5, #14
 800563e:	5f49      	ldrsh	r1, [r1, r5]
 8005640:	f000 f86c 	bl	800571c <_lseek_r>
 8005644:	89a3      	ldrh	r3, [r4, #12]
 8005646:	1c42      	adds	r2, r0, #1
 8005648:	d103      	bne.n	8005652 <__sseek+0x1a>
 800564a:	4a05      	ldr	r2, [pc, #20]	; (8005660 <__sseek+0x28>)
 800564c:	4013      	ands	r3, r2
 800564e:	81a3      	strh	r3, [r4, #12]
 8005650:	bd70      	pop	{r4, r5, r6, pc}
 8005652:	2280      	movs	r2, #128	; 0x80
 8005654:	0152      	lsls	r2, r2, #5
 8005656:	4313      	orrs	r3, r2
 8005658:	81a3      	strh	r3, [r4, #12]
 800565a:	6560      	str	r0, [r4, #84]	; 0x54
 800565c:	e7f8      	b.n	8005650 <__sseek+0x18>
 800565e:	46c0      	nop			; (mov r8, r8)
 8005660:	ffffefff 	.word	0xffffefff

08005664 <__sclose>:
 8005664:	b510      	push	{r4, lr}
 8005666:	230e      	movs	r3, #14
 8005668:	5ec9      	ldrsh	r1, [r1, r3]
 800566a:	f000 f821 	bl	80056b0 <_close_r>
 800566e:	bd10      	pop	{r4, pc}

08005670 <__ascii_wctomb>:
 8005670:	1e0b      	subs	r3, r1, #0
 8005672:	d004      	beq.n	800567e <__ascii_wctomb+0xe>
 8005674:	2aff      	cmp	r2, #255	; 0xff
 8005676:	d904      	bls.n	8005682 <__ascii_wctomb+0x12>
 8005678:	238a      	movs	r3, #138	; 0x8a
 800567a:	6003      	str	r3, [r0, #0]
 800567c:	3b8b      	subs	r3, #139	; 0x8b
 800567e:	0018      	movs	r0, r3
 8005680:	4770      	bx	lr
 8005682:	700a      	strb	r2, [r1, #0]
 8005684:	2301      	movs	r3, #1
 8005686:	e7fa      	b.n	800567e <__ascii_wctomb+0xe>

08005688 <_write_r>:
 8005688:	b570      	push	{r4, r5, r6, lr}
 800568a:	0005      	movs	r5, r0
 800568c:	0008      	movs	r0, r1
 800568e:	0011      	movs	r1, r2
 8005690:	2200      	movs	r2, #0
 8005692:	4c06      	ldr	r4, [pc, #24]	; (80056ac <_write_r+0x24>)
 8005694:	6022      	str	r2, [r4, #0]
 8005696:	001a      	movs	r2, r3
 8005698:	f7fa fdca 	bl	8000230 <_write>
 800569c:	1c43      	adds	r3, r0, #1
 800569e:	d103      	bne.n	80056a8 <_write_r+0x20>
 80056a0:	6823      	ldr	r3, [r4, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d000      	beq.n	80056a8 <_write_r+0x20>
 80056a6:	602b      	str	r3, [r5, #0]
 80056a8:	bd70      	pop	{r4, r5, r6, pc}
 80056aa:	46c0      	nop			; (mov r8, r8)
 80056ac:	20000460 	.word	0x20000460

080056b0 <_close_r>:
 80056b0:	2300      	movs	r3, #0
 80056b2:	b570      	push	{r4, r5, r6, lr}
 80056b4:	4c06      	ldr	r4, [pc, #24]	; (80056d0 <_close_r+0x20>)
 80056b6:	0005      	movs	r5, r0
 80056b8:	0008      	movs	r0, r1
 80056ba:	6023      	str	r3, [r4, #0]
 80056bc:	f7fc fca3 	bl	8002006 <_close>
 80056c0:	1c43      	adds	r3, r0, #1
 80056c2:	d103      	bne.n	80056cc <_close_r+0x1c>
 80056c4:	6823      	ldr	r3, [r4, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d000      	beq.n	80056cc <_close_r+0x1c>
 80056ca:	602b      	str	r3, [r5, #0]
 80056cc:	bd70      	pop	{r4, r5, r6, pc}
 80056ce:	46c0      	nop			; (mov r8, r8)
 80056d0:	20000460 	.word	0x20000460

080056d4 <_fstat_r>:
 80056d4:	2300      	movs	r3, #0
 80056d6:	b570      	push	{r4, r5, r6, lr}
 80056d8:	4c06      	ldr	r4, [pc, #24]	; (80056f4 <_fstat_r+0x20>)
 80056da:	0005      	movs	r5, r0
 80056dc:	0008      	movs	r0, r1
 80056de:	0011      	movs	r1, r2
 80056e0:	6023      	str	r3, [r4, #0]
 80056e2:	f7fc fc9a 	bl	800201a <_fstat>
 80056e6:	1c43      	adds	r3, r0, #1
 80056e8:	d103      	bne.n	80056f2 <_fstat_r+0x1e>
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d000      	beq.n	80056f2 <_fstat_r+0x1e>
 80056f0:	602b      	str	r3, [r5, #0]
 80056f2:	bd70      	pop	{r4, r5, r6, pc}
 80056f4:	20000460 	.word	0x20000460

080056f8 <_isatty_r>:
 80056f8:	2300      	movs	r3, #0
 80056fa:	b570      	push	{r4, r5, r6, lr}
 80056fc:	4c06      	ldr	r4, [pc, #24]	; (8005718 <_isatty_r+0x20>)
 80056fe:	0005      	movs	r5, r0
 8005700:	0008      	movs	r0, r1
 8005702:	6023      	str	r3, [r4, #0]
 8005704:	f7fc fc97 	bl	8002036 <_isatty>
 8005708:	1c43      	adds	r3, r0, #1
 800570a:	d103      	bne.n	8005714 <_isatty_r+0x1c>
 800570c:	6823      	ldr	r3, [r4, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d000      	beq.n	8005714 <_isatty_r+0x1c>
 8005712:	602b      	str	r3, [r5, #0]
 8005714:	bd70      	pop	{r4, r5, r6, pc}
 8005716:	46c0      	nop			; (mov r8, r8)
 8005718:	20000460 	.word	0x20000460

0800571c <_lseek_r>:
 800571c:	b570      	push	{r4, r5, r6, lr}
 800571e:	0005      	movs	r5, r0
 8005720:	0008      	movs	r0, r1
 8005722:	0011      	movs	r1, r2
 8005724:	2200      	movs	r2, #0
 8005726:	4c06      	ldr	r4, [pc, #24]	; (8005740 <_lseek_r+0x24>)
 8005728:	6022      	str	r2, [r4, #0]
 800572a:	001a      	movs	r2, r3
 800572c:	f7fc fc8c 	bl	8002048 <_lseek>
 8005730:	1c43      	adds	r3, r0, #1
 8005732:	d103      	bne.n	800573c <_lseek_r+0x20>
 8005734:	6823      	ldr	r3, [r4, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d000      	beq.n	800573c <_lseek_r+0x20>
 800573a:	602b      	str	r3, [r5, #0]
 800573c:	bd70      	pop	{r4, r5, r6, pc}
 800573e:	46c0      	nop			; (mov r8, r8)
 8005740:	20000460 	.word	0x20000460

08005744 <memchr>:
 8005744:	b2c9      	uxtb	r1, r1
 8005746:	1882      	adds	r2, r0, r2
 8005748:	4290      	cmp	r0, r2
 800574a:	d101      	bne.n	8005750 <memchr+0xc>
 800574c:	2000      	movs	r0, #0
 800574e:	4770      	bx	lr
 8005750:	7803      	ldrb	r3, [r0, #0]
 8005752:	428b      	cmp	r3, r1
 8005754:	d0fb      	beq.n	800574e <memchr+0xa>
 8005756:	3001      	adds	r0, #1
 8005758:	e7f6      	b.n	8005748 <memchr+0x4>

0800575a <memcpy>:
 800575a:	2300      	movs	r3, #0
 800575c:	b510      	push	{r4, lr}
 800575e:	429a      	cmp	r2, r3
 8005760:	d100      	bne.n	8005764 <memcpy+0xa>
 8005762:	bd10      	pop	{r4, pc}
 8005764:	5ccc      	ldrb	r4, [r1, r3]
 8005766:	54c4      	strb	r4, [r0, r3]
 8005768:	3301      	adds	r3, #1
 800576a:	e7f8      	b.n	800575e <memcpy+0x4>

0800576c <memmove>:
 800576c:	b510      	push	{r4, lr}
 800576e:	4288      	cmp	r0, r1
 8005770:	d902      	bls.n	8005778 <memmove+0xc>
 8005772:	188b      	adds	r3, r1, r2
 8005774:	4298      	cmp	r0, r3
 8005776:	d303      	bcc.n	8005780 <memmove+0x14>
 8005778:	2300      	movs	r3, #0
 800577a:	e007      	b.n	800578c <memmove+0x20>
 800577c:	5c8b      	ldrb	r3, [r1, r2]
 800577e:	5483      	strb	r3, [r0, r2]
 8005780:	3a01      	subs	r2, #1
 8005782:	d2fb      	bcs.n	800577c <memmove+0x10>
 8005784:	bd10      	pop	{r4, pc}
 8005786:	5ccc      	ldrb	r4, [r1, r3]
 8005788:	54c4      	strb	r4, [r0, r3]
 800578a:	3301      	adds	r3, #1
 800578c:	429a      	cmp	r2, r3
 800578e:	d1fa      	bne.n	8005786 <memmove+0x1a>
 8005790:	e7f8      	b.n	8005784 <memmove+0x18>

08005792 <__malloc_lock>:
 8005792:	4770      	bx	lr

08005794 <__malloc_unlock>:
 8005794:	4770      	bx	lr

08005796 <_realloc_r>:
 8005796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005798:	0007      	movs	r7, r0
 800579a:	000d      	movs	r5, r1
 800579c:	0016      	movs	r6, r2
 800579e:	2900      	cmp	r1, #0
 80057a0:	d105      	bne.n	80057ae <_realloc_r+0x18>
 80057a2:	0011      	movs	r1, r2
 80057a4:	f7ff fa5e 	bl	8004c64 <_malloc_r>
 80057a8:	0004      	movs	r4, r0
 80057aa:	0020      	movs	r0, r4
 80057ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ae:	2a00      	cmp	r2, #0
 80057b0:	d103      	bne.n	80057ba <_realloc_r+0x24>
 80057b2:	f7ff fa0d 	bl	8004bd0 <_free_r>
 80057b6:	0034      	movs	r4, r6
 80057b8:	e7f7      	b.n	80057aa <_realloc_r+0x14>
 80057ba:	f000 f827 	bl	800580c <_malloc_usable_size_r>
 80057be:	002c      	movs	r4, r5
 80057c0:	42b0      	cmp	r0, r6
 80057c2:	d2f2      	bcs.n	80057aa <_realloc_r+0x14>
 80057c4:	0031      	movs	r1, r6
 80057c6:	0038      	movs	r0, r7
 80057c8:	f7ff fa4c 	bl	8004c64 <_malloc_r>
 80057cc:	1e04      	subs	r4, r0, #0
 80057ce:	d0ec      	beq.n	80057aa <_realloc_r+0x14>
 80057d0:	0029      	movs	r1, r5
 80057d2:	0032      	movs	r2, r6
 80057d4:	f7ff ffc1 	bl	800575a <memcpy>
 80057d8:	0029      	movs	r1, r5
 80057da:	0038      	movs	r0, r7
 80057dc:	f7ff f9f8 	bl	8004bd0 <_free_r>
 80057e0:	e7e3      	b.n	80057aa <_realloc_r+0x14>
	...

080057e4 <_read_r>:
 80057e4:	b570      	push	{r4, r5, r6, lr}
 80057e6:	0005      	movs	r5, r0
 80057e8:	0008      	movs	r0, r1
 80057ea:	0011      	movs	r1, r2
 80057ec:	2200      	movs	r2, #0
 80057ee:	4c06      	ldr	r4, [pc, #24]	; (8005808 <_read_r+0x24>)
 80057f0:	6022      	str	r2, [r4, #0]
 80057f2:	001a      	movs	r2, r3
 80057f4:	f7fc fbea 	bl	8001fcc <_read>
 80057f8:	1c43      	adds	r3, r0, #1
 80057fa:	d103      	bne.n	8005804 <_read_r+0x20>
 80057fc:	6823      	ldr	r3, [r4, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d000      	beq.n	8005804 <_read_r+0x20>
 8005802:	602b      	str	r3, [r5, #0]
 8005804:	bd70      	pop	{r4, r5, r6, pc}
 8005806:	46c0      	nop			; (mov r8, r8)
 8005808:	20000460 	.word	0x20000460

0800580c <_malloc_usable_size_r>:
 800580c:	1f0b      	subs	r3, r1, #4
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	1f18      	subs	r0, r3, #4
 8005812:	2b00      	cmp	r3, #0
 8005814:	da01      	bge.n	800581a <_malloc_usable_size_r+0xe>
 8005816:	580b      	ldr	r3, [r1, r0]
 8005818:	18c0      	adds	r0, r0, r3
 800581a:	4770      	bx	lr

0800581c <_init>:
 800581c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581e:	46c0      	nop			; (mov r8, r8)
 8005820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005822:	bc08      	pop	{r3}
 8005824:	469e      	mov	lr, r3
 8005826:	4770      	bx	lr

08005828 <_fini>:
 8005828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582a:	46c0      	nop			; (mov r8, r8)
 800582c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800582e:	bc08      	pop	{r3}
 8005830:	469e      	mov	lr, r3
 8005832:	4770      	bx	lr
