
cr95test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000540c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000688  080054cc  080054cc  000154cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b54  08005b54  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08005b54  08005b54  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b54  08005b54  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b54  08005b54  00015b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b58  08005b58  00015b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08005b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  200001e0  08005d3c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  08005d3c  00020464  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000800b  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018c3  00000000  00000000  00028213  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000788  00000000  00000000  00029ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006b0  00000000  00000000  0002a260  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000d3bc  00000000  00000000  0002a910  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007a73  00000000  00000000  00037ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004605b  00000000  00000000  0003f73f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008579a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002424  00000000  00000000  00085818  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080054b4 	.word	0x080054b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	080054b4 	.word	0x080054b4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char const *buf, int n)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	60f8      	str	r0, [r7, #12]
 8000238:	60b9      	str	r1, [r7, #8]
 800023a:	607a      	str	r2, [r7, #4]
    if (printf_en) HAL_UART_Transmit(&huart2, (uint8_t*)(buf), n, HAL_MAX_DELAY);
 800023c:	4b08      	ldr	r3, [pc, #32]	; (8000260 <_write+0x30>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d007      	beq.n	8000254 <_write+0x24>
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	b29a      	uxth	r2, r3
 8000248:	2301      	movs	r3, #1
 800024a:	425b      	negs	r3, r3
 800024c:	68b9      	ldr	r1, [r7, #8]
 800024e:	4805      	ldr	r0, [pc, #20]	; (8000264 <_write+0x34>)
 8000250:	f003 f958 	bl	8003504 <HAL_UART_Transmit>
    return n;
 8000254:	687b      	ldr	r3, [r7, #4]
}
 8000256:	0018      	movs	r0, r3
 8000258:	46bd      	mov	sp, r7
 800025a:	b004      	add	sp, #16
 800025c:	bd80      	pop	{r7, pc}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	20000000 	.word	0x20000000
 8000264:	200003dc 	.word	0x200003dc

08000268 <cr95write>:

void cr95write(const uint8_t *data, uint8_t length)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
 8000270:	000a      	movs	r2, r1
 8000272:	1cfb      	adds	r3, r7, #3
 8000274:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t *)(data), length, HAL_MAX_DELAY);
 8000276:	1cfb      	adds	r3, r7, #3
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	b29a      	uxth	r2, r3
 800027c:	2301      	movs	r3, #1
 800027e:	425b      	negs	r3, r3
 8000280:	6879      	ldr	r1, [r7, #4]
 8000282:	4803      	ldr	r0, [pc, #12]	; (8000290 <cr95write+0x28>)
 8000284:	f003 f93e 	bl	8003504 <HAL_UART_Transmit>
}
 8000288:	46c0      	nop			; (mov r8, r8)
 800028a:	46bd      	mov	sp, r7
 800028c:	b002      	add	sp, #8
 800028e:	bd80      	pop	{r7, pc}
 8000290:	2000035c 	.word	0x2000035c

08000294 <cr95read>:

uint8_t cr95read(uint8_t *data, uint8_t *length)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b086      	sub	sp, #24
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
 800029c:	6039      	str	r1, [r7, #0]
	uint32_t timeout = HAL_GetTick();
 800029e:	f001 fde1 	bl	8001e64 <HAL_GetTick>
 80002a2:	0003      	movs	r3, r0
 80002a4:	613b      	str	r3, [r7, #16]

	do {
		if (HAL_GetTick() - timeout > NFC_TIMEOUT) return 0xFF; // timeout
 80002a6:	f001 fddd 	bl	8001e64 <HAL_GetTick>
 80002aa:	0002      	movs	r2, r0
 80002ac:	693b      	ldr	r3, [r7, #16]
 80002ae:	1ad2      	subs	r2, r2, r3
 80002b0:	23fa      	movs	r3, #250	; 0xfa
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	429a      	cmp	r2, r3
 80002b6:	d901      	bls.n	80002bc <cr95read+0x28>
 80002b8:	23ff      	movs	r3, #255	; 0xff
 80002ba:	e099      	b.n	80003f0 <cr95read+0x15c>
	} while (nfc_rx_read_ptr == nfc_rx_write_ptr);
 80002bc:	4b4e      	ldr	r3, [pc, #312]	; (80003f8 <cr95read+0x164>)
 80002be:	881b      	ldrh	r3, [r3, #0]
 80002c0:	b29b      	uxth	r3, r3
 80002c2:	0019      	movs	r1, r3
 80002c4:	4b4d      	ldr	r3, [pc, #308]	; (80003fc <cr95read+0x168>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	685b      	ldr	r3, [r3, #4]
 80002ca:	2240      	movs	r2, #64	; 0x40
 80002cc:	1ad3      	subs	r3, r2, r3
 80002ce:	4299      	cmp	r1, r3
 80002d0:	d0e9      	beq.n	80002a6 <cr95read+0x12>
	uint8_t resp = nfc_rx_buf[nfc_rx_read_ptr];
 80002d2:	4b49      	ldr	r3, [pc, #292]	; (80003f8 <cr95read+0x164>)
 80002d4:	881b      	ldrh	r3, [r3, #0]
 80002d6:	b29b      	uxth	r3, r3
 80002d8:	0019      	movs	r1, r3
 80002da:	230f      	movs	r3, #15
 80002dc:	18fb      	adds	r3, r7, r3
 80002de:	4a48      	ldr	r2, [pc, #288]	; (8000400 <cr95read+0x16c>)
 80002e0:	5c52      	ldrb	r2, [r2, r1]
 80002e2:	701a      	strb	r2, [r3, #0]
    if (++nfc_rx_read_ptr >= RX_BUFFER_LEN) nfc_rx_read_ptr = 0; // increase read pointer
 80002e4:	4b44      	ldr	r3, [pc, #272]	; (80003f8 <cr95read+0x164>)
 80002e6:	881b      	ldrh	r3, [r3, #0]
 80002e8:	b29b      	uxth	r3, r3
 80002ea:	3301      	adds	r3, #1
 80002ec:	b29b      	uxth	r3, r3
 80002ee:	4a42      	ldr	r2, [pc, #264]	; (80003f8 <cr95read+0x164>)
 80002f0:	1c19      	adds	r1, r3, #0
 80002f2:	8011      	strh	r1, [r2, #0]
 80002f4:	2b3f      	cmp	r3, #63	; 0x3f
 80002f6:	d902      	bls.n	80002fe <cr95read+0x6a>
 80002f8:	4b3f      	ldr	r3, [pc, #252]	; (80003f8 <cr95read+0x164>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	801a      	strh	r2, [r3, #0]

    if (resp == 0x55) return resp;
 80002fe:	230f      	movs	r3, #15
 8000300:	18fb      	adds	r3, r7, r3
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	2b55      	cmp	r3, #85	; 0x55
 8000306:	d103      	bne.n	8000310 <cr95read+0x7c>
 8000308:	230f      	movs	r3, #15
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	e06f      	b.n	80003f0 <cr95read+0x15c>

	do {
		if (HAL_GetTick() - timeout > NFC_TIMEOUT) return 0xFF; // timeout
 8000310:	f001 fda8 	bl	8001e64 <HAL_GetTick>
 8000314:	0002      	movs	r2, r0
 8000316:	693b      	ldr	r3, [r7, #16]
 8000318:	1ad2      	subs	r2, r2, r3
 800031a:	23fa      	movs	r3, #250	; 0xfa
 800031c:	009b      	lsls	r3, r3, #2
 800031e:	429a      	cmp	r2, r3
 8000320:	d901      	bls.n	8000326 <cr95read+0x92>
 8000322:	23ff      	movs	r3, #255	; 0xff
 8000324:	e064      	b.n	80003f0 <cr95read+0x15c>
	} while (nfc_rx_read_ptr == nfc_rx_write_ptr);
 8000326:	4b34      	ldr	r3, [pc, #208]	; (80003f8 <cr95read+0x164>)
 8000328:	881b      	ldrh	r3, [r3, #0]
 800032a:	b29b      	uxth	r3, r3
 800032c:	0019      	movs	r1, r3
 800032e:	4b33      	ldr	r3, [pc, #204]	; (80003fc <cr95read+0x168>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	685b      	ldr	r3, [r3, #4]
 8000334:	2240      	movs	r2, #64	; 0x40
 8000336:	1ad3      	subs	r3, r2, r3
 8000338:	4299      	cmp	r1, r3
 800033a:	d0e9      	beq.n	8000310 <cr95read+0x7c>
	uint8_t len = nfc_rx_buf[nfc_rx_read_ptr];
 800033c:	4b2e      	ldr	r3, [pc, #184]	; (80003f8 <cr95read+0x164>)
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	b29b      	uxth	r3, r3
 8000342:	0019      	movs	r1, r3
 8000344:	2317      	movs	r3, #23
 8000346:	18fb      	adds	r3, r7, r3
 8000348:	4a2d      	ldr	r2, [pc, #180]	; (8000400 <cr95read+0x16c>)
 800034a:	5c52      	ldrb	r2, [r2, r1]
 800034c:	701a      	strb	r2, [r3, #0]
    if (++nfc_rx_read_ptr >= RX_BUFFER_LEN) nfc_rx_read_ptr = 0; // increase read pointer
 800034e:	4b2a      	ldr	r3, [pc, #168]	; (80003f8 <cr95read+0x164>)
 8000350:	881b      	ldrh	r3, [r3, #0]
 8000352:	b29b      	uxth	r3, r3
 8000354:	3301      	adds	r3, #1
 8000356:	b29b      	uxth	r3, r3
 8000358:	4a27      	ldr	r2, [pc, #156]	; (80003f8 <cr95read+0x164>)
 800035a:	1c19      	adds	r1, r3, #0
 800035c:	8011      	strh	r1, [r2, #0]
 800035e:	2b3f      	cmp	r3, #63	; 0x3f
 8000360:	d902      	bls.n	8000368 <cr95read+0xd4>
 8000362:	4b25      	ldr	r3, [pc, #148]	; (80003f8 <cr95read+0x164>)
 8000364:	2200      	movs	r2, #0
 8000366:	801a      	strh	r2, [r3, #0]

    if (length) *length = len;
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d035      	beq.n	80003da <cr95read+0x146>
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	2217      	movs	r2, #23
 8000372:	18ba      	adds	r2, r7, r2
 8000374:	7812      	ldrb	r2, [r2, #0]
 8000376:	701a      	strb	r2, [r3, #0]
    while (len--) {
 8000378:	e02f      	b.n	80003da <cr95read+0x146>
    	do {
    		if (HAL_GetTick() - timeout > NFC_TIMEOUT) return 0xFF; // timeout
 800037a:	f001 fd73 	bl	8001e64 <HAL_GetTick>
 800037e:	0002      	movs	r2, r0
 8000380:	693b      	ldr	r3, [r7, #16]
 8000382:	1ad2      	subs	r2, r2, r3
 8000384:	23fa      	movs	r3, #250	; 0xfa
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	429a      	cmp	r2, r3
 800038a:	d901      	bls.n	8000390 <cr95read+0xfc>
 800038c:	23ff      	movs	r3, #255	; 0xff
 800038e:	e02f      	b.n	80003f0 <cr95read+0x15c>
    	} while (nfc_rx_read_ptr == nfc_rx_write_ptr);
 8000390:	4b19      	ldr	r3, [pc, #100]	; (80003f8 <cr95read+0x164>)
 8000392:	881b      	ldrh	r3, [r3, #0]
 8000394:	b29b      	uxth	r3, r3
 8000396:	0019      	movs	r1, r3
 8000398:	4b18      	ldr	r3, [pc, #96]	; (80003fc <cr95read+0x168>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	2240      	movs	r2, #64	; 0x40
 80003a0:	1ad3      	subs	r3, r2, r3
 80003a2:	4299      	cmp	r1, r3
 80003a4:	d0e9      	beq.n	800037a <cr95read+0xe6>
    	if (data) *data++ = nfc_rx_buf[nfc_rx_read_ptr];
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d009      	beq.n	80003c0 <cr95read+0x12c>
 80003ac:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <cr95read+0x164>)
 80003ae:	881b      	ldrh	r3, [r3, #0]
 80003b0:	b29b      	uxth	r3, r3
 80003b2:	0019      	movs	r1, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	1c5a      	adds	r2, r3, #1
 80003b8:	607a      	str	r2, [r7, #4]
 80003ba:	4a11      	ldr	r2, [pc, #68]	; (8000400 <cr95read+0x16c>)
 80003bc:	5c52      	ldrb	r2, [r2, r1]
 80003be:	701a      	strb	r2, [r3, #0]
        if (++nfc_rx_read_ptr >= RX_BUFFER_LEN) nfc_rx_read_ptr = 0; // increase read pointer
 80003c0:	4b0d      	ldr	r3, [pc, #52]	; (80003f8 <cr95read+0x164>)
 80003c2:	881b      	ldrh	r3, [r3, #0]
 80003c4:	b29b      	uxth	r3, r3
 80003c6:	3301      	adds	r3, #1
 80003c8:	b29b      	uxth	r3, r3
 80003ca:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <cr95read+0x164>)
 80003cc:	1c19      	adds	r1, r3, #0
 80003ce:	8011      	strh	r1, [r2, #0]
 80003d0:	2b3f      	cmp	r3, #63	; 0x3f
 80003d2:	d902      	bls.n	80003da <cr95read+0x146>
 80003d4:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <cr95read+0x164>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	801a      	strh	r2, [r3, #0]
    while (len--) {
 80003da:	2217      	movs	r2, #23
 80003dc:	18bb      	adds	r3, r7, r2
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	18ba      	adds	r2, r7, r2
 80003e2:	1e59      	subs	r1, r3, #1
 80003e4:	7011      	strb	r1, [r2, #0]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d1c7      	bne.n	800037a <cr95read+0xe6>
    }

    return resp;
 80003ea:	230f      	movs	r3, #15
 80003ec:	18fb      	adds	r3, r7, r3
 80003ee:	781b      	ldrb	r3, [r3, #0]
}
 80003f0:	0018      	movs	r0, r3
 80003f2:	46bd      	mov	sp, r7
 80003f4:	b006      	add	sp, #24
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	20000280 	.word	0x20000280
 80003fc:	20000318 	.word	0x20000318
 8000400:	20000240 	.word	0x20000240

08000404 <cr95_wakeup>:

static void cr95_wakeup(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
	const uint8_t wakeup = 0;
 800040a:	1dfb      	adds	r3, r7, #7
 800040c:	2200      	movs	r2, #0
 800040e:	701a      	strb	r2, [r3, #0]
	cr95write(&wakeup, 1);
 8000410:	1dfb      	adds	r3, r7, #7
 8000412:	2101      	movs	r1, #1
 8000414:	0018      	movs	r0, r3
 8000416:	f7ff ff27 	bl	8000268 <cr95write>
	printf("WAKEUP sent\n");
 800041a:	4b04      	ldr	r3, [pc, #16]	; (800042c <cr95_wakeup+0x28>)
 800041c:	0018      	movs	r0, r3
 800041e:	f003 fe97 	bl	8004150 <puts>
}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	46bd      	mov	sp, r7
 8000426:	b002      	add	sp, #8
 8000428:	bd80      	pop	{r7, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	080054cc 	.word	0x080054cc

08000430 <cr95_init14>:

static void cr95_init14(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b086      	sub	sp, #24
 8000434:	af00      	add	r7, sp, #0
	const uint8_t cmd_init1[] = { 0x02, 0x02, 0x02, 0x00 };
 8000436:	2014      	movs	r0, #20
 8000438:	183b      	adds	r3, r7, r0
 800043a:	4a27      	ldr	r2, [pc, #156]	; (80004d8 <cr95_init14+0xa8>)
 800043c:	6812      	ldr	r2, [r2, #0]
 800043e:	601a      	str	r2, [r3, #0]
	const uint8_t cmd_init2[] = { 0x09, 0x04, 0x3A, 0x00, 0x58, 0x04 };
 8000440:	230c      	movs	r3, #12
 8000442:	18fb      	adds	r3, r7, r3
 8000444:	4a25      	ldr	r2, [pc, #148]	; (80004dc <cr95_init14+0xac>)
 8000446:	6811      	ldr	r1, [r2, #0]
 8000448:	6019      	str	r1, [r3, #0]
 800044a:	8892      	ldrh	r2, [r2, #4]
 800044c:	809a      	strh	r2, [r3, #4]
	const uint8_t cmd_init3[] = { 0x09, 0x04, 0x68, 0x01, 0x01, 0xD1 };
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	4a23      	ldr	r2, [pc, #140]	; (80004e0 <cr95_init14+0xb0>)
 8000452:	6811      	ldr	r1, [r2, #0]
 8000454:	6019      	str	r1, [r3, #0]
 8000456:	8892      	ldrh	r2, [r2, #4]
 8000458:	809a      	strh	r2, [r3, #4]

	cr95write(cmd_init1, sizeof(cmd_init1));
 800045a:	183b      	adds	r3, r7, r0
 800045c:	2104      	movs	r1, #4
 800045e:	0018      	movs	r0, r3
 8000460:	f7ff ff02 	bl	8000268 <cr95write>
	printf("Initiation of 14 %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 8000464:	2100      	movs	r1, #0
 8000466:	2000      	movs	r0, #0
 8000468:	f7ff ff14 	bl	8000294 <cr95read>
 800046c:	1e03      	subs	r3, r0, #0
 800046e:	d101      	bne.n	8000474 <cr95_init14+0x44>
 8000470:	4b1c      	ldr	r3, [pc, #112]	; (80004e4 <cr95_init14+0xb4>)
 8000472:	e000      	b.n	8000476 <cr95_init14+0x46>
 8000474:	4b1c      	ldr	r3, [pc, #112]	; (80004e8 <cr95_init14+0xb8>)
 8000476:	4a1d      	ldr	r2, [pc, #116]	; (80004ec <cr95_init14+0xbc>)
 8000478:	0019      	movs	r1, r3
 800047a:	0010      	movs	r0, r2
 800047c:	f003 fdda 	bl	8004034 <iprintf>
	cr95write(cmd_init2, sizeof(cmd_init2));
 8000480:	230c      	movs	r3, #12
 8000482:	18fb      	adds	r3, r7, r3
 8000484:	2106      	movs	r1, #6
 8000486:	0018      	movs	r0, r3
 8000488:	f7ff feee 	bl	8000268 <cr95write>
	printf(" %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 800048c:	2100      	movs	r1, #0
 800048e:	2000      	movs	r0, #0
 8000490:	f7ff ff00 	bl	8000294 <cr95read>
 8000494:	1e03      	subs	r3, r0, #0
 8000496:	d101      	bne.n	800049c <cr95_init14+0x6c>
 8000498:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <cr95_init14+0xb4>)
 800049a:	e000      	b.n	800049e <cr95_init14+0x6e>
 800049c:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <cr95_init14+0xb8>)
 800049e:	4a14      	ldr	r2, [pc, #80]	; (80004f0 <cr95_init14+0xc0>)
 80004a0:	0019      	movs	r1, r3
 80004a2:	0010      	movs	r0, r2
 80004a4:	f003 fdc6 	bl	8004034 <iprintf>
	cr95write(cmd_init3, sizeof(cmd_init3));
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2106      	movs	r1, #6
 80004ac:	0018      	movs	r0, r3
 80004ae:	f7ff fedb 	bl	8000268 <cr95write>
	printf(" %s\n", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 80004b2:	2100      	movs	r1, #0
 80004b4:	2000      	movs	r0, #0
 80004b6:	f7ff feed 	bl	8000294 <cr95read>
 80004ba:	1e03      	subs	r3, r0, #0
 80004bc:	d101      	bne.n	80004c2 <cr95_init14+0x92>
 80004be:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <cr95_init14+0xb4>)
 80004c0:	e000      	b.n	80004c4 <cr95_init14+0x94>
 80004c2:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <cr95_init14+0xb8>)
 80004c4:	4a0b      	ldr	r2, [pc, #44]	; (80004f4 <cr95_init14+0xc4>)
 80004c6:	0019      	movs	r1, r3
 80004c8:	0010      	movs	r0, r2
 80004ca:	f003 fdb3 	bl	8004034 <iprintf>
}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b006      	add	sp, #24
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	08005500 	.word	0x08005500
 80004dc:	08005504 	.word	0x08005504
 80004e0:	0800550c 	.word	0x0800550c
 80004e4:	080054d8 	.word	0x080054d8
 80004e8:	080054dc 	.word	0x080054dc
 80004ec:	080054e0 	.word	0x080054e0
 80004f0:	080054f4 	.word	0x080054f4
 80004f4:	080054f8 	.word	0x080054f8

080004f8 <cr95_init14B>:

static void cr95_init14B(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0
	const uint8_t cmd_init1B[] = { 0x02, 0x02, 0x03, 0x01 };
 80004fe:	2014      	movs	r0, #20
 8000500:	183b      	adds	r3, r7, r0
 8000502:	4a27      	ldr	r2, [pc, #156]	; (80005a0 <cr95_init14B+0xa8>)
 8000504:	6812      	ldr	r2, [r2, #0]
 8000506:	601a      	str	r2, [r3, #0]
	const uint8_t cmd_init2B[] = { 0x09, 0x04, 0x3A, 0x00, 0x58, 0x04 };
 8000508:	230c      	movs	r3, #12
 800050a:	18fb      	adds	r3, r7, r3
 800050c:	4a25      	ldr	r2, [pc, #148]	; (80005a4 <cr95_init14B+0xac>)
 800050e:	6811      	ldr	r1, [r2, #0]
 8000510:	6019      	str	r1, [r3, #0]
 8000512:	8892      	ldrh	r2, [r2, #4]
 8000514:	809a      	strh	r2, [r3, #4]
	const uint8_t cmd_init3B[] = { 0x09, 0x04, 0x68, 0x01, 0x01, 0x20 };
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	4a23      	ldr	r2, [pc, #140]	; (80005a8 <cr95_init14B+0xb0>)
 800051a:	6811      	ldr	r1, [r2, #0]
 800051c:	6019      	str	r1, [r3, #0]
 800051e:	8892      	ldrh	r2, [r2, #4]
 8000520:	809a      	strh	r2, [r3, #4]

	cr95write(cmd_init1B, sizeof(cmd_init1B));
 8000522:	183b      	adds	r3, r7, r0
 8000524:	2104      	movs	r1, #4
 8000526:	0018      	movs	r0, r3
 8000528:	f7ff fe9e 	bl	8000268 <cr95write>
	printf("Initiation of 14B %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 800052c:	2100      	movs	r1, #0
 800052e:	2000      	movs	r0, #0
 8000530:	f7ff feb0 	bl	8000294 <cr95read>
 8000534:	1e03      	subs	r3, r0, #0
 8000536:	d101      	bne.n	800053c <cr95_init14B+0x44>
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <cr95_init14B+0xb4>)
 800053a:	e000      	b.n	800053e <cr95_init14B+0x46>
 800053c:	4b1c      	ldr	r3, [pc, #112]	; (80005b0 <cr95_init14B+0xb8>)
 800053e:	4a1d      	ldr	r2, [pc, #116]	; (80005b4 <cr95_init14B+0xbc>)
 8000540:	0019      	movs	r1, r3
 8000542:	0010      	movs	r0, r2
 8000544:	f003 fd76 	bl	8004034 <iprintf>
	cr95write(cmd_init2B, sizeof(cmd_init2B));
 8000548:	230c      	movs	r3, #12
 800054a:	18fb      	adds	r3, r7, r3
 800054c:	2106      	movs	r1, #6
 800054e:	0018      	movs	r0, r3
 8000550:	f7ff fe8a 	bl	8000268 <cr95write>
	printf(" %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 8000554:	2100      	movs	r1, #0
 8000556:	2000      	movs	r0, #0
 8000558:	f7ff fe9c 	bl	8000294 <cr95read>
 800055c:	1e03      	subs	r3, r0, #0
 800055e:	d101      	bne.n	8000564 <cr95_init14B+0x6c>
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <cr95_init14B+0xb4>)
 8000562:	e000      	b.n	8000566 <cr95_init14B+0x6e>
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <cr95_init14B+0xb8>)
 8000566:	4a14      	ldr	r2, [pc, #80]	; (80005b8 <cr95_init14B+0xc0>)
 8000568:	0019      	movs	r1, r3
 800056a:	0010      	movs	r0, r2
 800056c:	f003 fd62 	bl	8004034 <iprintf>
	cr95write(cmd_init3B, sizeof(cmd_init3B));
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2106      	movs	r1, #6
 8000574:	0018      	movs	r0, r3
 8000576:	f7ff fe77 	bl	8000268 <cr95write>
	printf(" %s\n", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 800057a:	2100      	movs	r1, #0
 800057c:	2000      	movs	r0, #0
 800057e:	f7ff fe89 	bl	8000294 <cr95read>
 8000582:	1e03      	subs	r3, r0, #0
 8000584:	d101      	bne.n	800058a <cr95_init14B+0x92>
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <cr95_init14B+0xb4>)
 8000588:	e000      	b.n	800058c <cr95_init14B+0x94>
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <cr95_init14B+0xb8>)
 800058c:	4a0b      	ldr	r2, [pc, #44]	; (80005bc <cr95_init14B+0xc4>)
 800058e:	0019      	movs	r1, r3
 8000590:	0010      	movs	r0, r2
 8000592:	f003 fd4f 	bl	8004034 <iprintf>
}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b006      	add	sp, #24
 800059c:	bd80      	pop	{r7, pc}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	0800552c 	.word	0x0800552c
 80005a4:	08005504 	.word	0x08005504
 80005a8:	08005530 	.word	0x08005530
 80005ac:	080054d8 	.word	0x080054d8
 80005b0:	080054dc 	.word	0x080054dc
 80005b4:	08005514 	.word	0x08005514
 80005b8:	080054f4 	.word	0x080054f4
 80005bc:	080054f8 	.word	0x080054f8

080005c0 <cr95_init15>:

static void cr95_init15(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
	const uint8_t cmd_init1_15[] = { 0x02, 0x02, 0x01, 0x03 };
 80005c6:	2014      	movs	r0, #20
 80005c8:	183b      	adds	r3, r7, r0
 80005ca:	4a27      	ldr	r2, [pc, #156]	; (8000668 <cr95_init15+0xa8>)
 80005cc:	6812      	ldr	r2, [r2, #0]
 80005ce:	601a      	str	r2, [r3, #0]
	const uint8_t cmd_init2_15[] = { 0x09, 0x04, 0x3A, 0x00, 0x58, 0x04 };
 80005d0:	230c      	movs	r3, #12
 80005d2:	18fb      	adds	r3, r7, r3
 80005d4:	4a25      	ldr	r2, [pc, #148]	; (800066c <cr95_init15+0xac>)
 80005d6:	6811      	ldr	r1, [r2, #0]
 80005d8:	6019      	str	r1, [r3, #0]
 80005da:	8892      	ldrh	r2, [r2, #4]
 80005dc:	809a      	strh	r2, [r3, #4]
	const uint8_t cmd_init3_15[] = { 0x09, 0x04, 0x68, 0x01, 0x01, 0xD0 };
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	4a23      	ldr	r2, [pc, #140]	; (8000670 <cr95_init15+0xb0>)
 80005e2:	6811      	ldr	r1, [r2, #0]
 80005e4:	6019      	str	r1, [r3, #0]
 80005e6:	8892      	ldrh	r2, [r2, #4]
 80005e8:	809a      	strh	r2, [r3, #4]

	cr95write(cmd_init1_15, sizeof(cmd_init1_15));
 80005ea:	183b      	adds	r3, r7, r0
 80005ec:	2104      	movs	r1, #4
 80005ee:	0018      	movs	r0, r3
 80005f0:	f7ff fe3a 	bl	8000268 <cr95write>
	printf("Initiation of 15 %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 80005f4:	2100      	movs	r1, #0
 80005f6:	2000      	movs	r0, #0
 80005f8:	f7ff fe4c 	bl	8000294 <cr95read>
 80005fc:	1e03      	subs	r3, r0, #0
 80005fe:	d101      	bne.n	8000604 <cr95_init15+0x44>
 8000600:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <cr95_init15+0xb4>)
 8000602:	e000      	b.n	8000606 <cr95_init15+0x46>
 8000604:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <cr95_init15+0xb8>)
 8000606:	4a1d      	ldr	r2, [pc, #116]	; (800067c <cr95_init15+0xbc>)
 8000608:	0019      	movs	r1, r3
 800060a:	0010      	movs	r0, r2
 800060c:	f003 fd12 	bl	8004034 <iprintf>
	cr95write(cmd_init2_15, sizeof(cmd_init2_15));
 8000610:	230c      	movs	r3, #12
 8000612:	18fb      	adds	r3, r7, r3
 8000614:	2106      	movs	r1, #6
 8000616:	0018      	movs	r0, r3
 8000618:	f7ff fe26 	bl	8000268 <cr95write>
	printf(" %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 800061c:	2100      	movs	r1, #0
 800061e:	2000      	movs	r0, #0
 8000620:	f7ff fe38 	bl	8000294 <cr95read>
 8000624:	1e03      	subs	r3, r0, #0
 8000626:	d101      	bne.n	800062c <cr95_init15+0x6c>
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <cr95_init15+0xb4>)
 800062a:	e000      	b.n	800062e <cr95_init15+0x6e>
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <cr95_init15+0xb8>)
 800062e:	4a14      	ldr	r2, [pc, #80]	; (8000680 <cr95_init15+0xc0>)
 8000630:	0019      	movs	r1, r3
 8000632:	0010      	movs	r0, r2
 8000634:	f003 fcfe 	bl	8004034 <iprintf>
	cr95write(cmd_init3_15, sizeof(cmd_init3_15));
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2106      	movs	r1, #6
 800063c:	0018      	movs	r0, r3
 800063e:	f7ff fe13 	bl	8000268 <cr95write>
	printf(" %s\n", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 8000642:	2100      	movs	r1, #0
 8000644:	2000      	movs	r0, #0
 8000646:	f7ff fe25 	bl	8000294 <cr95read>
 800064a:	1e03      	subs	r3, r0, #0
 800064c:	d101      	bne.n	8000652 <cr95_init15+0x92>
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <cr95_init15+0xb4>)
 8000650:	e000      	b.n	8000654 <cr95_init15+0x94>
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <cr95_init15+0xb8>)
 8000654:	4a0b      	ldr	r2, [pc, #44]	; (8000684 <cr95_init15+0xc4>)
 8000656:	0019      	movs	r1, r3
 8000658:	0010      	movs	r0, r2
 800065a:	f003 fceb 	bl	8004034 <iprintf>
}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	b006      	add	sp, #24
 8000664:	bd80      	pop	{r7, pc}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	0800554c 	.word	0x0800554c
 800066c:	08005504 	.word	0x08005504
 8000670:	08005550 	.word	0x08005550
 8000674:	080054d8 	.word	0x080054d8
 8000678:	080054dc 	.word	0x080054dc
 800067c:	08005538 	.word	0x08005538
 8000680:	080054f4 	.word	0x080054f4
 8000684:	080054f8 	.word	0x080054f8

08000688 <cr95_init18>:

static void cr95_init18(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af00      	add	r7, sp, #0
	const uint8_t cmd_init1_18[] = { 0x02, 0x02, 0x04, 0x51 };
 800068e:	201c      	movs	r0, #28
 8000690:	183b      	adds	r3, r7, r0
 8000692:	4a34      	ldr	r2, [pc, #208]	; (8000764 <cr95_init18+0xdc>)
 8000694:	6812      	ldr	r2, [r2, #0]
 8000696:	601a      	str	r2, [r3, #0]
	const uint8_t cmd_init2_18[] = { 0x09, 0x04, 0x3A, 0x00, 0x58, 0x04 };
 8000698:	2314      	movs	r3, #20
 800069a:	18fb      	adds	r3, r7, r3
 800069c:	4a32      	ldr	r2, [pc, #200]	; (8000768 <cr95_init18+0xe0>)
 800069e:	6811      	ldr	r1, [r2, #0]
 80006a0:	6019      	str	r1, [r3, #0]
 80006a2:	8892      	ldrh	r2, [r2, #4]
 80006a4:	809a      	strh	r2, [r3, #4]
	const uint8_t cmd_init3_18[] = { 0x09, 0x04, 0x68, 0x01, 0x01, 0x50 };
 80006a6:	230c      	movs	r3, #12
 80006a8:	18fb      	adds	r3, r7, r3
 80006aa:	4a30      	ldr	r2, [pc, #192]	; (800076c <cr95_init18+0xe4>)
 80006ac:	6811      	ldr	r1, [r2, #0]
 80006ae:	6019      	str	r1, [r3, #0]
 80006b0:	8892      	ldrh	r2, [r2, #4]
 80006b2:	809a      	strh	r2, [r3, #4]
	const uint8_t cmd_init4_18[] = { 0x09, 0x04, 0x0A, 0x01, 0x02, 0xA1 };
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	4a2e      	ldr	r2, [pc, #184]	; (8000770 <cr95_init18+0xe8>)
 80006b8:	6811      	ldr	r1, [r2, #0]
 80006ba:	6019      	str	r1, [r3, #0]
 80006bc:	8892      	ldrh	r2, [r2, #4]
 80006be:	809a      	strh	r2, [r3, #4]


	cr95write(cmd_init1_18, sizeof(cmd_init1_18));
 80006c0:	183b      	adds	r3, r7, r0
 80006c2:	2104      	movs	r1, #4
 80006c4:	0018      	movs	r0, r3
 80006c6:	f7ff fdcf 	bl	8000268 <cr95write>
	printf("Initiation of 18 %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 80006ca:	2100      	movs	r1, #0
 80006cc:	2000      	movs	r0, #0
 80006ce:	f7ff fde1 	bl	8000294 <cr95read>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	d101      	bne.n	80006da <cr95_init18+0x52>
 80006d6:	4b27      	ldr	r3, [pc, #156]	; (8000774 <cr95_init18+0xec>)
 80006d8:	e000      	b.n	80006dc <cr95_init18+0x54>
 80006da:	4b27      	ldr	r3, [pc, #156]	; (8000778 <cr95_init18+0xf0>)
 80006dc:	4a27      	ldr	r2, [pc, #156]	; (800077c <cr95_init18+0xf4>)
 80006de:	0019      	movs	r1, r3
 80006e0:	0010      	movs	r0, r2
 80006e2:	f003 fca7 	bl	8004034 <iprintf>
	cr95write(cmd_init2_18, sizeof(cmd_init2_18));
 80006e6:	2314      	movs	r3, #20
 80006e8:	18fb      	adds	r3, r7, r3
 80006ea:	2106      	movs	r1, #6
 80006ec:	0018      	movs	r0, r3
 80006ee:	f7ff fdbb 	bl	8000268 <cr95write>
	printf(" %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 80006f2:	2100      	movs	r1, #0
 80006f4:	2000      	movs	r0, #0
 80006f6:	f7ff fdcd 	bl	8000294 <cr95read>
 80006fa:	1e03      	subs	r3, r0, #0
 80006fc:	d101      	bne.n	8000702 <cr95_init18+0x7a>
 80006fe:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <cr95_init18+0xec>)
 8000700:	e000      	b.n	8000704 <cr95_init18+0x7c>
 8000702:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <cr95_init18+0xf0>)
 8000704:	4a1e      	ldr	r2, [pc, #120]	; (8000780 <cr95_init18+0xf8>)
 8000706:	0019      	movs	r1, r3
 8000708:	0010      	movs	r0, r2
 800070a:	f003 fc93 	bl	8004034 <iprintf>
	cr95write(cmd_init3_18, sizeof(cmd_init3_18));
 800070e:	230c      	movs	r3, #12
 8000710:	18fb      	adds	r3, r7, r3
 8000712:	2106      	movs	r1, #6
 8000714:	0018      	movs	r0, r3
 8000716:	f7ff fda7 	bl	8000268 <cr95write>
	printf(" %s\n", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 800071a:	2100      	movs	r1, #0
 800071c:	2000      	movs	r0, #0
 800071e:	f7ff fdb9 	bl	8000294 <cr95read>
 8000722:	1e03      	subs	r3, r0, #0
 8000724:	d101      	bne.n	800072a <cr95_init18+0xa2>
 8000726:	4b13      	ldr	r3, [pc, #76]	; (8000774 <cr95_init18+0xec>)
 8000728:	e000      	b.n	800072c <cr95_init18+0xa4>
 800072a:	4b13      	ldr	r3, [pc, #76]	; (8000778 <cr95_init18+0xf0>)
 800072c:	4a15      	ldr	r2, [pc, #84]	; (8000784 <cr95_init18+0xfc>)
 800072e:	0019      	movs	r1, r3
 8000730:	0010      	movs	r0, r2
 8000732:	f003 fc7f 	bl	8004034 <iprintf>
	cr95write(cmd_init4_18, sizeof(cmd_init4_18));
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2106      	movs	r1, #6
 800073a:	0018      	movs	r0, r3
 800073c:	f7ff fd94 	bl	8000268 <cr95write>
	printf(" %s\n", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 8000740:	2100      	movs	r1, #0
 8000742:	2000      	movs	r0, #0
 8000744:	f7ff fda6 	bl	8000294 <cr95read>
 8000748:	1e03      	subs	r3, r0, #0
 800074a:	d101      	bne.n	8000750 <cr95_init18+0xc8>
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <cr95_init18+0xec>)
 800074e:	e000      	b.n	8000752 <cr95_init18+0xca>
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <cr95_init18+0xf0>)
 8000752:	4a0c      	ldr	r2, [pc, #48]	; (8000784 <cr95_init18+0xfc>)
 8000754:	0019      	movs	r1, r3
 8000756:	0010      	movs	r0, r2
 8000758:	f003 fc6c 	bl	8004034 <iprintf>
}
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	b008      	add	sp, #32
 8000762:	bd80      	pop	{r7, pc}
 8000764:	0800556c 	.word	0x0800556c
 8000768:	08005504 	.word	0x08005504
 800076c:	08005570 	.word	0x08005570
 8000770:	08005578 	.word	0x08005578
 8000774:	080054d8 	.word	0x080054d8
 8000778:	080054dc 	.word	0x080054dc
 800077c:	08005558 	.word	0x08005558
 8000780:	080054f4 	.word	0x080054f4
 8000784:	080054f8 	.word	0x080054f8

08000788 <cr95_read>:


static void cr95_read(void)
{
 8000788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800078a:	b097      	sub	sp, #92	; 0x5c
 800078c:	af04      	add	r7, sp, #16
	const uint8_t cmd_reqa[] =  { 0x04, 0x02, 0x26, 0x07 };
 800078e:	2040      	movs	r0, #64	; 0x40
 8000790:	183b      	adds	r3, r7, r0
 8000792:	4abb      	ldr	r2, [pc, #748]	; (8000a80 <cr95_read+0x2f8>)
 8000794:	6812      	ldr	r2, [r2, #0]
 8000796:	601a      	str	r2, [r3, #0]
	const uint8_t cmd_acl1[] =  { 0x04, 0x03, 0x93, 0x20, 0x08 };
 8000798:	2338      	movs	r3, #56	; 0x38
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	4ab9      	ldr	r2, [pc, #740]	; (8000a84 <cr95_read+0x2fc>)
 800079e:	6811      	ldr	r1, [r2, #0]
 80007a0:	6019      	str	r1, [r3, #0]
 80007a2:	7912      	ldrb	r2, [r2, #4]
 80007a4:	711a      	strb	r2, [r3, #4]
	const uint8_t cmd_acl2[] =  { 0x04, 0x03, 0x95, 0x20, 0x08 };
 80007a6:	2330      	movs	r3, #48	; 0x30
 80007a8:	18fb      	adds	r3, r7, r3
 80007aa:	4ab7      	ldr	r2, [pc, #732]	; (8000a88 <cr95_read+0x300>)
 80007ac:	6811      	ldr	r1, [r2, #0]
 80007ae:	6019      	str	r1, [r3, #0]
 80007b0:	7912      	ldrb	r2, [r2, #4]
 80007b2:	711a      	strb	r2, [r3, #4]

	uint8_t data[8];
	char uid[32];
	uint8_t len;

	cr95write(cmd_reqa, sizeof(cmd_reqa));
 80007b4:	183b      	adds	r3, r7, r0
 80007b6:	2104      	movs	r1, #4
 80007b8:	0018      	movs	r0, r3
 80007ba:	f7ff fd55 	bl	8000268 <cr95write>
	if (cr95read(data, &len) == 0x80) {
 80007be:	1dfa      	adds	r2, r7, #7
 80007c0:	2328      	movs	r3, #40	; 0x28
 80007c2:	18fb      	adds	r3, r7, r3
 80007c4:	0011      	movs	r1, r2
 80007c6:	0018      	movs	r0, r3
 80007c8:	f7ff fd64 	bl	8000294 <cr95read>
 80007cc:	0003      	movs	r3, r0
 80007ce:	2b80      	cmp	r3, #128	; 0x80
 80007d0:	d000      	beq.n	80007d4 <cr95_read+0x4c>
 80007d2:	e14c      	b.n	8000a6e <cr95_read+0x2e6>
		printf("ATQA =");
 80007d4:	4bad      	ldr	r3, [pc, #692]	; (8000a8c <cr95_read+0x304>)
 80007d6:	0018      	movs	r0, r3
 80007d8:	f003 fc2c 	bl	8004034 <iprintf>
		for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 80007dc:	2347      	movs	r3, #71	; 0x47
 80007de:	18fb      	adds	r3, r7, r3
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
 80007e4:	e010      	b.n	8000808 <cr95_read+0x80>
 80007e6:	2447      	movs	r4, #71	; 0x47
 80007e8:	193b      	adds	r3, r7, r4
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2228      	movs	r2, #40	; 0x28
 80007ee:	18ba      	adds	r2, r7, r2
 80007f0:	5cd3      	ldrb	r3, [r2, r3]
 80007f2:	001a      	movs	r2, r3
 80007f4:	4ba6      	ldr	r3, [pc, #664]	; (8000a90 <cr95_read+0x308>)
 80007f6:	0011      	movs	r1, r2
 80007f8:	0018      	movs	r0, r3
 80007fa:	f003 fc1b 	bl	8004034 <iprintf>
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	781a      	ldrb	r2, [r3, #0]
 8000802:	193b      	adds	r3, r7, r4
 8000804:	3201      	adds	r2, #1
 8000806:	701a      	strb	r2, [r3, #0]
 8000808:	1dfb      	adds	r3, r7, #7
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2247      	movs	r2, #71	; 0x47
 800080e:	18ba      	adds	r2, r7, r2
 8000810:	7812      	ldrb	r2, [r2, #0]
 8000812:	429a      	cmp	r2, r3
 8000814:	d3e7      	bcc.n	80007e6 <cr95_read+0x5e>
		printf("\n");
 8000816:	200a      	movs	r0, #10
 8000818:	f003 fc26 	bl	8004068 <putchar>

    	sprintf(uid, "UID =");
 800081c:	2308      	movs	r3, #8
 800081e:	18fb      	adds	r3, r7, r3
 8000820:	4a9c      	ldr	r2, [pc, #624]	; (8000a94 <cr95_read+0x30c>)
 8000822:	6811      	ldr	r1, [r2, #0]
 8000824:	6019      	str	r1, [r3, #0]
 8000826:	8892      	ldrh	r2, [r2, #4]
 8000828:	809a      	strh	r2, [r3, #4]

    	cr95write(cmd_acl1, sizeof(cmd_acl1));
 800082a:	2338      	movs	r3, #56	; 0x38
 800082c:	18fb      	adds	r3, r7, r3
 800082e:	2105      	movs	r1, #5
 8000830:	0018      	movs	r0, r3
 8000832:	f7ff fd19 	bl	8000268 <cr95write>
    	if (cr95read(data, &len) == 0x80 && len == 8 && (data[0]^data[1]^data[2]^data[3]) == data[4]) {
 8000836:	1dfa      	adds	r2, r7, #7
 8000838:	2328      	movs	r3, #40	; 0x28
 800083a:	18fb      	adds	r3, r7, r3
 800083c:	0011      	movs	r1, r2
 800083e:	0018      	movs	r0, r3
 8000840:	f7ff fd28 	bl	8000294 <cr95read>
 8000844:	0003      	movs	r3, r0
 8000846:	2b80      	cmp	r3, #128	; 0x80
 8000848:	d000      	beq.n	800084c <cr95_read+0xc4>
 800084a:	e10b      	b.n	8000a64 <cr95_read+0x2dc>
 800084c:	1dfb      	adds	r3, r7, #7
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b08      	cmp	r3, #8
 8000852:	d000      	beq.n	8000856 <cr95_read+0xce>
 8000854:	e106      	b.n	8000a64 <cr95_read+0x2dc>
 8000856:	2128      	movs	r1, #40	; 0x28
 8000858:	187b      	adds	r3, r7, r1
 800085a:	781a      	ldrb	r2, [r3, #0]
 800085c:	187b      	adds	r3, r7, r1
 800085e:	785b      	ldrb	r3, [r3, #1]
 8000860:	4053      	eors	r3, r2
 8000862:	b2da      	uxtb	r2, r3
 8000864:	187b      	adds	r3, r7, r1
 8000866:	789b      	ldrb	r3, [r3, #2]
 8000868:	4053      	eors	r3, r2
 800086a:	b2da      	uxtb	r2, r3
 800086c:	187b      	adds	r3, r7, r1
 800086e:	78db      	ldrb	r3, [r3, #3]
 8000870:	4053      	eors	r3, r2
 8000872:	b2da      	uxtb	r2, r3
 8000874:	187b      	adds	r3, r7, r1
 8000876:	791b      	ldrb	r3, [r3, #4]
 8000878:	429a      	cmp	r2, r3
 800087a:	d000      	beq.n	800087e <cr95_read+0xf6>
 800087c:	e0f2      	b.n	8000a64 <cr95_read+0x2dc>
    		printf("UID CL1 =");
 800087e:	4b86      	ldr	r3, [pc, #536]	; (8000a98 <cr95_read+0x310>)
 8000880:	0018      	movs	r0, r3
 8000882:	f003 fbd7 	bl	8004034 <iprintf>

    		for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8000886:	2346      	movs	r3, #70	; 0x46
 8000888:	18fb      	adds	r3, r7, r3
 800088a:	2200      	movs	r2, #0
 800088c:	701a      	strb	r2, [r3, #0]
 800088e:	e010      	b.n	80008b2 <cr95_read+0x12a>
 8000890:	2446      	movs	r4, #70	; 0x46
 8000892:	193b      	adds	r3, r7, r4
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2228      	movs	r2, #40	; 0x28
 8000898:	18ba      	adds	r2, r7, r2
 800089a:	5cd3      	ldrb	r3, [r2, r3]
 800089c:	001a      	movs	r2, r3
 800089e:	4b7c      	ldr	r3, [pc, #496]	; (8000a90 <cr95_read+0x308>)
 80008a0:	0011      	movs	r1, r2
 80008a2:	0018      	movs	r0, r3
 80008a4:	f003 fbc6 	bl	8004034 <iprintf>
 80008a8:	193b      	adds	r3, r7, r4
 80008aa:	781a      	ldrb	r2, [r3, #0]
 80008ac:	193b      	adds	r3, r7, r4
 80008ae:	3201      	adds	r2, #1
 80008b0:	701a      	strb	r2, [r3, #0]
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2246      	movs	r2, #70	; 0x46
 80008b8:	18ba      	adds	r2, r7, r2
 80008ba:	7812      	ldrb	r2, [r2, #0]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d3e7      	bcc.n	8000890 <cr95_read+0x108>
    		printf("\n");
 80008c0:	200a      	movs	r0, #10
 80008c2:	f003 fbd1 	bl	8004068 <putchar>


    		if (data[5] & 0x80) printf("Collision detected!\n");
 80008c6:	2328      	movs	r3, #40	; 0x28
 80008c8:	18fb      	adds	r3, r7, r3
 80008ca:	795b      	ldrb	r3, [r3, #5]
 80008cc:	b25b      	sxtb	r3, r3
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	da03      	bge.n	80008da <cr95_read+0x152>
 80008d2:	4b72      	ldr	r3, [pc, #456]	; (8000a9c <cr95_read+0x314>)
 80008d4:	0018      	movs	r0, r3
 80008d6:	f003 fc3b 	bl	8004150 <puts>
    		if (data[0] == 0x88) {
 80008da:	2328      	movs	r3, #40	; 0x28
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b88      	cmp	r3, #136	; 0x88
 80008e2:	d000      	beq.n	80008e6 <cr95_read+0x15e>
 80008e4:	e09a      	b.n	8000a1c <cr95_read+0x294>
    			sprintf(uid, "%s %2X %2X %2X", uid, data[1], data[2], data[3]);
 80008e6:	2628      	movs	r6, #40	; 0x28
 80008e8:	19bb      	adds	r3, r7, r6
 80008ea:	785b      	ldrb	r3, [r3, #1]
 80008ec:	001d      	movs	r5, r3
 80008ee:	19bb      	adds	r3, r7, r6
 80008f0:	789b      	ldrb	r3, [r3, #2]
 80008f2:	001c      	movs	r4, r3
 80008f4:	19bb      	adds	r3, r7, r6
 80008f6:	78db      	ldrb	r3, [r3, #3]
 80008f8:	2008      	movs	r0, #8
 80008fa:	183a      	adds	r2, r7, r0
 80008fc:	4968      	ldr	r1, [pc, #416]	; (8000aa0 <cr95_read+0x318>)
 80008fe:	1838      	adds	r0, r7, r0
 8000900:	9301      	str	r3, [sp, #4]
 8000902:	9400      	str	r4, [sp, #0]
 8000904:	002b      	movs	r3, r5
 8000906:	f003 fc2d 	bl	8004164 <siprintf>

				cr95write(cmd_acl2, sizeof(cmd_acl2));
 800090a:	2330      	movs	r3, #48	; 0x30
 800090c:	18fb      	adds	r3, r7, r3
 800090e:	2105      	movs	r1, #5
 8000910:	0018      	movs	r0, r3
 8000912:	f7ff fca9 	bl	8000268 <cr95write>
				if (cr95read(data, &len) == 0x80 && len == 9 && (data[0]^data[1]^data[2]^data[3]) == data[4]) {
 8000916:	1dfa      	adds	r2, r7, #7
 8000918:	19bb      	adds	r3, r7, r6
 800091a:	0011      	movs	r1, r2
 800091c:	0018      	movs	r0, r3
 800091e:	f7ff fcb9 	bl	8000294 <cr95read>
 8000922:	0003      	movs	r3, r0
 8000924:	2b80      	cmp	r3, #128	; 0x80
 8000926:	d000      	beq.n	800092a <cr95_read+0x1a2>
 8000928:	e073      	b.n	8000a12 <cr95_read+0x28a>
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b09      	cmp	r3, #9
 8000930:	d16f      	bne.n	8000a12 <cr95_read+0x28a>
 8000932:	2128      	movs	r1, #40	; 0x28
 8000934:	187b      	adds	r3, r7, r1
 8000936:	781a      	ldrb	r2, [r3, #0]
 8000938:	187b      	adds	r3, r7, r1
 800093a:	785b      	ldrb	r3, [r3, #1]
 800093c:	4053      	eors	r3, r2
 800093e:	b2da      	uxtb	r2, r3
 8000940:	187b      	adds	r3, r7, r1
 8000942:	789b      	ldrb	r3, [r3, #2]
 8000944:	4053      	eors	r3, r2
 8000946:	b2da      	uxtb	r2, r3
 8000948:	187b      	adds	r3, r7, r1
 800094a:	78db      	ldrb	r3, [r3, #3]
 800094c:	4053      	eors	r3, r2
 800094e:	b2da      	uxtb	r2, r3
 8000950:	187b      	adds	r3, r7, r1
 8000952:	791b      	ldrb	r3, [r3, #4]
 8000954:	429a      	cmp	r2, r3
 8000956:	d15c      	bne.n	8000a12 <cr95_read+0x28a>
					printf("UID CL2 =");
 8000958:	4b52      	ldr	r3, [pc, #328]	; (8000aa4 <cr95_read+0x31c>)
 800095a:	0018      	movs	r0, r3
 800095c:	f003 fb6a 	bl	8004034 <iprintf>
					for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8000960:	2345      	movs	r3, #69	; 0x45
 8000962:	18fb      	adds	r3, r7, r3
 8000964:	2200      	movs	r2, #0
 8000966:	701a      	strb	r2, [r3, #0]
 8000968:	e010      	b.n	800098c <cr95_read+0x204>
 800096a:	2445      	movs	r4, #69	; 0x45
 800096c:	193b      	adds	r3, r7, r4
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2228      	movs	r2, #40	; 0x28
 8000972:	18ba      	adds	r2, r7, r2
 8000974:	5cd3      	ldrb	r3, [r2, r3]
 8000976:	001a      	movs	r2, r3
 8000978:	4b45      	ldr	r3, [pc, #276]	; (8000a90 <cr95_read+0x308>)
 800097a:	0011      	movs	r1, r2
 800097c:	0018      	movs	r0, r3
 800097e:	f003 fb59 	bl	8004034 <iprintf>
 8000982:	193b      	adds	r3, r7, r4
 8000984:	781a      	ldrb	r2, [r3, #0]
 8000986:	193b      	adds	r3, r7, r4
 8000988:	3201      	adds	r2, #1
 800098a:	701a      	strb	r2, [r3, #0]
 800098c:	1dfb      	adds	r3, r7, #7
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2245      	movs	r2, #69	; 0x45
 8000992:	18ba      	adds	r2, r7, r2
 8000994:	7812      	ldrb	r2, [r2, #0]
 8000996:	429a      	cmp	r2, r3
 8000998:	d3e7      	bcc.n	800096a <cr95_read+0x1e2>
					printf("\n");
 800099a:	200a      	movs	r0, #10
 800099c:	f003 fb64 	bl	8004068 <putchar>

		    		if (data[5] & 0x80) printf("Collision detected!\n");
 80009a0:	2328      	movs	r3, #40	; 0x28
 80009a2:	18fb      	adds	r3, r7, r3
 80009a4:	795b      	ldrb	r3, [r3, #5]
 80009a6:	b25b      	sxtb	r3, r3
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	da03      	bge.n	80009b4 <cr95_read+0x22c>
 80009ac:	4b3b      	ldr	r3, [pc, #236]	; (8000a9c <cr95_read+0x314>)
 80009ae:	0018      	movs	r0, r3
 80009b0:	f003 fbce 	bl	8004150 <puts>
		    		if (data[0] == 0x88) {
 80009b4:	2328      	movs	r3, #40	; 0x28
 80009b6:	18fb      	adds	r3, r7, r3
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b88      	cmp	r3, #136	; 0x88
 80009bc:	d112      	bne.n	80009e4 <cr95_read+0x25c>
		    			sprintf(uid, "%s %2X %2X %2X", uid, data[1], data[2], data[3]);
 80009be:	2228      	movs	r2, #40	; 0x28
 80009c0:	18bb      	adds	r3, r7, r2
 80009c2:	785b      	ldrb	r3, [r3, #1]
 80009c4:	001d      	movs	r5, r3
 80009c6:	18bb      	adds	r3, r7, r2
 80009c8:	789b      	ldrb	r3, [r3, #2]
 80009ca:	001c      	movs	r4, r3
 80009cc:	18bb      	adds	r3, r7, r2
 80009ce:	78db      	ldrb	r3, [r3, #3]
 80009d0:	2008      	movs	r0, #8
 80009d2:	183a      	adds	r2, r7, r0
 80009d4:	4932      	ldr	r1, [pc, #200]	; (8000aa0 <cr95_read+0x318>)
 80009d6:	1838      	adds	r0, r7, r0
 80009d8:	9301      	str	r3, [sp, #4]
 80009da:	9400      	str	r4, [sp, #0]
 80009dc:	002b      	movs	r3, r5
 80009de:	f003 fbc1 	bl	8004164 <siprintf>
		    		if (data[0] == 0x88) {
 80009e2:	e031      	b.n	8000a48 <cr95_read+0x2c0>
			    			sprintf(uid, "%s %2X %2X %2X %2X", uid, data[0], data[1], data[2], data[3]);
						} else {
							printf("UID CL3 error\n");
						} */
		    		} else {
		    			sprintf(uid, "%s %2X %2X %2X %2X", uid, data[0], data[1], data[2], data[3]);
 80009e4:	2228      	movs	r2, #40	; 0x28
 80009e6:	18bb      	adds	r3, r7, r2
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	001e      	movs	r6, r3
 80009ec:	18bb      	adds	r3, r7, r2
 80009ee:	785b      	ldrb	r3, [r3, #1]
 80009f0:	001c      	movs	r4, r3
 80009f2:	18bb      	adds	r3, r7, r2
 80009f4:	789b      	ldrb	r3, [r3, #2]
 80009f6:	001d      	movs	r5, r3
 80009f8:	18bb      	adds	r3, r7, r2
 80009fa:	78db      	ldrb	r3, [r3, #3]
 80009fc:	2008      	movs	r0, #8
 80009fe:	183a      	adds	r2, r7, r0
 8000a00:	4929      	ldr	r1, [pc, #164]	; (8000aa8 <cr95_read+0x320>)
 8000a02:	1838      	adds	r0, r7, r0
 8000a04:	9302      	str	r3, [sp, #8]
 8000a06:	9501      	str	r5, [sp, #4]
 8000a08:	9400      	str	r4, [sp, #0]
 8000a0a:	0033      	movs	r3, r6
 8000a0c:	f003 fbaa 	bl	8004164 <siprintf>
		    		if (data[0] == 0x88) {
 8000a10:	e01a      	b.n	8000a48 <cr95_read+0x2c0>
		    		}
				} else {
					printf("UID CL2 error\n");
 8000a12:	4b26      	ldr	r3, [pc, #152]	; (8000aac <cr95_read+0x324>)
 8000a14:	0018      	movs	r0, r3
 8000a16:	f003 fb9b 	bl	8004150 <puts>
 8000a1a:	e015      	b.n	8000a48 <cr95_read+0x2c0>
				}

    		} else {
    			sprintf(uid, "%s %2X %2X %2X %2X", uid, data[1], data[2], data[3], data[4]);
 8000a1c:	2228      	movs	r2, #40	; 0x28
 8000a1e:	18bb      	adds	r3, r7, r2
 8000a20:	785b      	ldrb	r3, [r3, #1]
 8000a22:	001e      	movs	r6, r3
 8000a24:	18bb      	adds	r3, r7, r2
 8000a26:	789b      	ldrb	r3, [r3, #2]
 8000a28:	001c      	movs	r4, r3
 8000a2a:	18bb      	adds	r3, r7, r2
 8000a2c:	78db      	ldrb	r3, [r3, #3]
 8000a2e:	001d      	movs	r5, r3
 8000a30:	18bb      	adds	r3, r7, r2
 8000a32:	791b      	ldrb	r3, [r3, #4]
 8000a34:	2008      	movs	r0, #8
 8000a36:	183a      	adds	r2, r7, r0
 8000a38:	491b      	ldr	r1, [pc, #108]	; (8000aa8 <cr95_read+0x320>)
 8000a3a:	1838      	adds	r0, r7, r0
 8000a3c:	9302      	str	r3, [sp, #8]
 8000a3e:	9501      	str	r5, [sp, #4]
 8000a40:	9400      	str	r4, [sp, #0]
 8000a42:	0033      	movs	r3, r6
 8000a44:	f003 fb8e 	bl	8004164 <siprintf>
    		}


    		HAL_UART_Transmit(&huart2, (uint8_t*)(uid), strlen(uid), HAL_MAX_DELAY);
 8000a48:	2408      	movs	r4, #8
 8000a4a:	193b      	adds	r3, r7, r4
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f7ff fb5b 	bl	8000108 <strlen>
 8000a52:	0003      	movs	r3, r0
 8000a54:	b29a      	uxth	r2, r3
 8000a56:	2301      	movs	r3, #1
 8000a58:	425b      	negs	r3, r3
 8000a5a:	1939      	adds	r1, r7, r4
 8000a5c:	4814      	ldr	r0, [pc, #80]	; (8000ab0 <cr95_read+0x328>)
 8000a5e:	f002 fd51 	bl	8003504 <HAL_UART_Transmit>
    	}

	} else {
		printf("REQA error\n");
	}
}
 8000a62:	e008      	b.n	8000a76 <cr95_read+0x2ee>
    		printf("UID CL1 error\n");
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <cr95_read+0x32c>)
 8000a66:	0018      	movs	r0, r3
 8000a68:	f003 fb72 	bl	8004150 <puts>
}
 8000a6c:	e003      	b.n	8000a76 <cr95_read+0x2ee>
		printf("REQA error\n");
 8000a6e:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <cr95_read+0x330>)
 8000a70:	0018      	movs	r0, r3
 8000a72:	f003 fb6d 	bl	8004150 <puts>
}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	b013      	add	sp, #76	; 0x4c
 8000a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	08005614 	.word	0x08005614
 8000a84:	08005618 	.word	0x08005618
 8000a88:	08005620 	.word	0x08005620
 8000a8c:	08005580 	.word	0x08005580
 8000a90:	08005588 	.word	0x08005588
 8000a94:	08005590 	.word	0x08005590
 8000a98:	08005598 	.word	0x08005598
 8000a9c:	080055a4 	.word	0x080055a4
 8000aa0:	080055b8 	.word	0x080055b8
 8000aa4:	080055c8 	.word	0x080055c8
 8000aa8:	080055d4 	.word	0x080055d4
 8000aac:	080055e8 	.word	0x080055e8
 8000ab0:	200003dc 	.word	0x200003dc
 8000ab4:	080055f8 	.word	0x080055f8
 8000ab8:	08005608 	.word	0x08005608

08000abc <cr95_readtopaz>:

static void cr95_readtopaz(void)
{
 8000abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000abe:	b097      	sub	sp, #92	; 0x5c
 8000ac0:	af04      	add	r7, sp, #16
	const uint8_t cmd_reqtopaz[] =  { 0x04, 0x02, 0x26, 0x07 };
 8000ac2:	2140      	movs	r1, #64	; 0x40
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	4a48      	ldr	r2, [pc, #288]	; (8000be8 <cr95_readtopaz+0x12c>)
 8000ac8:	6812      	ldr	r2, [r2, #0]
 8000aca:	601a      	str	r2, [r3, #0]
	const uint8_t cmd_rid[]      =  { 0x04, 0x08, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA8 };
 8000acc:	2334      	movs	r3, #52	; 0x34
 8000ace:	18fb      	adds	r3, r7, r3
 8000ad0:	4a46      	ldr	r2, [pc, #280]	; (8000bec <cr95_readtopaz+0x130>)
 8000ad2:	ca11      	ldmia	r2!, {r0, r4}
 8000ad4:	c311      	stmia	r3!, {r0, r4}
 8000ad6:	8812      	ldrh	r2, [r2, #0]
 8000ad8:	801a      	strh	r2, [r3, #0]

	uint8_t data[16];
	char uid[32];
	uint8_t len;

	cr95write(cmd_reqtopaz, sizeof(cmd_reqtopaz));
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	2104      	movs	r1, #4
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f7ff fbc2 	bl	8000268 <cr95write>
	if (cr95read(data, &len) == 0x80) {
 8000ae4:	1cfa      	adds	r2, r7, #3
 8000ae6:	2324      	movs	r3, #36	; 0x24
 8000ae8:	18fb      	adds	r3, r7, r3
 8000aea:	0011      	movs	r1, r2
 8000aec:	0018      	movs	r0, r3
 8000aee:	f7ff fbd1 	bl	8000294 <cr95read>
 8000af2:	0003      	movs	r3, r0
 8000af4:	2b80      	cmp	r3, #128	; 0x80
 8000af6:	d172      	bne.n	8000bde <cr95_readtopaz+0x122>
		printf("ATQA =");
 8000af8:	4b3d      	ldr	r3, [pc, #244]	; (8000bf0 <cr95_readtopaz+0x134>)
 8000afa:	0018      	movs	r0, r3
 8000afc:	f003 fa9a 	bl	8004034 <iprintf>
		for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8000b00:	2347      	movs	r3, #71	; 0x47
 8000b02:	18fb      	adds	r3, r7, r3
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
 8000b08:	e010      	b.n	8000b2c <cr95_readtopaz+0x70>
 8000b0a:	2447      	movs	r4, #71	; 0x47
 8000b0c:	193b      	adds	r3, r7, r4
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2224      	movs	r2, #36	; 0x24
 8000b12:	18ba      	adds	r2, r7, r2
 8000b14:	5cd3      	ldrb	r3, [r2, r3]
 8000b16:	001a      	movs	r2, r3
 8000b18:	4b36      	ldr	r3, [pc, #216]	; (8000bf4 <cr95_readtopaz+0x138>)
 8000b1a:	0011      	movs	r1, r2
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f003 fa89 	bl	8004034 <iprintf>
 8000b22:	193b      	adds	r3, r7, r4
 8000b24:	781a      	ldrb	r2, [r3, #0]
 8000b26:	193b      	adds	r3, r7, r4
 8000b28:	3201      	adds	r2, #1
 8000b2a:	701a      	strb	r2, [r3, #0]
 8000b2c:	1cfb      	adds	r3, r7, #3
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2247      	movs	r2, #71	; 0x47
 8000b32:	18ba      	adds	r2, r7, r2
 8000b34:	7812      	ldrb	r2, [r2, #0]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d3e7      	bcc.n	8000b0a <cr95_readtopaz+0x4e>
		printf("\n");
 8000b3a:	200a      	movs	r0, #10
 8000b3c:	f003 fa94 	bl	8004068 <putchar>

		sprintf(uid, "UID =");
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	4a2d      	ldr	r2, [pc, #180]	; (8000bf8 <cr95_readtopaz+0x13c>)
 8000b44:	6811      	ldr	r1, [r2, #0]
 8000b46:	6019      	str	r1, [r3, #0]
 8000b48:	8892      	ldrh	r2, [r2, #4]
 8000b4a:	809a      	strh	r2, [r3, #4]

		cr95write(cmd_rid, sizeof(cmd_rid));
 8000b4c:	2334      	movs	r3, #52	; 0x34
 8000b4e:	18fb      	adds	r3, r7, r3
 8000b50:	210a      	movs	r1, #10
 8000b52:	0018      	movs	r0, r3
 8000b54:	f7ff fb88 	bl	8000268 <cr95write>
		if (cr95read(data, &len) == 0x80 ) {
 8000b58:	1cfa      	adds	r2, r7, #3
 8000b5a:	2324      	movs	r3, #36	; 0x24
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	0011      	movs	r1, r2
 8000b60:	0018      	movs	r0, r3
 8000b62:	f7ff fb97 	bl	8000294 <cr95read>
 8000b66:	0003      	movs	r3, r0
 8000b68:	2b80      	cmp	r3, #128	; 0x80
 8000b6a:	d138      	bne.n	8000bde <cr95_readtopaz+0x122>
			printf("RID =");
 8000b6c:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <cr95_readtopaz+0x140>)
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f003 fa60 	bl	8004034 <iprintf>
			for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8000b74:	2346      	movs	r3, #70	; 0x46
 8000b76:	18fb      	adds	r3, r7, r3
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
 8000b7c:	e010      	b.n	8000ba0 <cr95_readtopaz+0xe4>
 8000b7e:	2446      	movs	r4, #70	; 0x46
 8000b80:	193b      	adds	r3, r7, r4
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2224      	movs	r2, #36	; 0x24
 8000b86:	18ba      	adds	r2, r7, r2
 8000b88:	5cd3      	ldrb	r3, [r2, r3]
 8000b8a:	001a      	movs	r2, r3
 8000b8c:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <cr95_readtopaz+0x138>)
 8000b8e:	0011      	movs	r1, r2
 8000b90:	0018      	movs	r0, r3
 8000b92:	f003 fa4f 	bl	8004034 <iprintf>
 8000b96:	193b      	adds	r3, r7, r4
 8000b98:	781a      	ldrb	r2, [r3, #0]
 8000b9a:	193b      	adds	r3, r7, r4
 8000b9c:	3201      	adds	r2, #1
 8000b9e:	701a      	strb	r2, [r3, #0]
 8000ba0:	1cfb      	adds	r3, r7, #3
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2246      	movs	r2, #70	; 0x46
 8000ba6:	18ba      	adds	r2, r7, r2
 8000ba8:	7812      	ldrb	r2, [r2, #0]
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d3e7      	bcc.n	8000b7e <cr95_readtopaz+0xc2>
			printf("\n");
 8000bae:	200a      	movs	r0, #10
 8000bb0:	f003 fa5a 	bl	8004068 <putchar>
			sprintf(uid, "%s %2X %2X %2X %2X", uid, data[2], data[3], data[4], data[5]);
 8000bb4:	2224      	movs	r2, #36	; 0x24
 8000bb6:	18bb      	adds	r3, r7, r2
 8000bb8:	789b      	ldrb	r3, [r3, #2]
 8000bba:	001e      	movs	r6, r3
 8000bbc:	18bb      	adds	r3, r7, r2
 8000bbe:	78db      	ldrb	r3, [r3, #3]
 8000bc0:	001c      	movs	r4, r3
 8000bc2:	18bb      	adds	r3, r7, r2
 8000bc4:	791b      	ldrb	r3, [r3, #4]
 8000bc6:	001d      	movs	r5, r3
 8000bc8:	18bb      	adds	r3, r7, r2
 8000bca:	795b      	ldrb	r3, [r3, #5]
 8000bcc:	1d3a      	adds	r2, r7, #4
 8000bce:	490c      	ldr	r1, [pc, #48]	; (8000c00 <cr95_readtopaz+0x144>)
 8000bd0:	1d38      	adds	r0, r7, #4
 8000bd2:	9302      	str	r3, [sp, #8]
 8000bd4:	9501      	str	r5, [sp, #4]
 8000bd6:	9400      	str	r4, [sp, #0]
 8000bd8:	0033      	movs	r3, r6
 8000bda:	f003 fac3 	bl	8004164 <siprintf>
		}
	}
}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b013      	add	sp, #76	; 0x4c
 8000be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	08005614 	.word	0x08005614
 8000bec:	08005630 	.word	0x08005630
 8000bf0:	08005580 	.word	0x08005580
 8000bf4:	08005588 	.word	0x08005588
 8000bf8:	08005590 	.word	0x08005590
 8000bfc:	08005628 	.word	0x08005628
 8000c00:	080055d4 	.word	0x080055d4

08000c04 <cr95_read14B>:

static void cr95_read14B(void)
{
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b089      	sub	sp, #36	; 0x24
 8000c08:	af00      	add	r7, sp, #0
	const uint8_t cmd_reqb[] =  { 0x04, 0x03, 0x05, 0x00, 0x00 };
 8000c0a:	2018      	movs	r0, #24
 8000c0c:	183b      	adds	r3, r7, r0
 8000c0e:	4a20      	ldr	r2, [pc, #128]	; (8000c90 <cr95_read14B+0x8c>)
 8000c10:	6811      	ldr	r1, [r2, #0]
 8000c12:	6019      	str	r1, [r3, #0]
 8000c14:	7912      	ldrb	r2, [r2, #4]
 8000c16:	711a      	strb	r2, [r3, #4]

	uint8_t data[16];
	uint8_t len;

	cr95write(cmd_reqb, sizeof(cmd_reqb));
 8000c18:	183b      	adds	r3, r7, r0
 8000c1a:	2105      	movs	r1, #5
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f7ff fb23 	bl	8000268 <cr95write>
	if (cr95read(data, &len) == 0x80 && data[0] == 0x50) {
 8000c22:	1dfa      	adds	r2, r7, #7
 8000c24:	2308      	movs	r3, #8
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	0011      	movs	r1, r2
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f7ff fb32 	bl	8000294 <cr95read>
 8000c30:	0003      	movs	r3, r0
 8000c32:	2b80      	cmp	r3, #128	; 0x80
 8000c34:	d128      	bne.n	8000c88 <cr95_read14B+0x84>
 8000c36:	2308      	movs	r3, #8
 8000c38:	18fb      	adds	r3, r7, r3
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b50      	cmp	r3, #80	; 0x50
 8000c3e:	d123      	bne.n	8000c88 <cr95_read14B+0x84>
		printf("ATQB =");
 8000c40:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <cr95_read14B+0x90>)
 8000c42:	0018      	movs	r0, r3
 8000c44:	f003 f9f6 	bl	8004034 <iprintf>
		for (uint8_t i = 0; i <= len; i++) printf(" %02X", data[i]);
 8000c48:	231f      	movs	r3, #31
 8000c4a:	18fb      	adds	r3, r7, r3
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]
 8000c50:	e010      	b.n	8000c74 <cr95_read14B+0x70>
 8000c52:	241f      	movs	r4, #31
 8000c54:	193b      	adds	r3, r7, r4
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2208      	movs	r2, #8
 8000c5a:	18ba      	adds	r2, r7, r2
 8000c5c:	5cd3      	ldrb	r3, [r2, r3]
 8000c5e:	001a      	movs	r2, r3
 8000c60:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <cr95_read14B+0x94>)
 8000c62:	0011      	movs	r1, r2
 8000c64:	0018      	movs	r0, r3
 8000c66:	f003 f9e5 	bl	8004034 <iprintf>
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	781a      	ldrb	r2, [r3, #0]
 8000c6e:	193b      	adds	r3, r7, r4
 8000c70:	3201      	adds	r2, #1
 8000c72:	701a      	strb	r2, [r3, #0]
 8000c74:	1dfb      	adds	r3, r7, #7
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	221f      	movs	r2, #31
 8000c7a:	18ba      	adds	r2, r7, r2
 8000c7c:	7812      	ldrb	r2, [r2, #0]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d9e7      	bls.n	8000c52 <cr95_read14B+0x4e>
		printf("\n");
 8000c82:	200a      	movs	r0, #10
 8000c84:	f003 f9f0 	bl	8004068 <putchar>
	}
}
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	b009      	add	sp, #36	; 0x24
 8000c8e:	bd90      	pop	{r4, r7, pc}
 8000c90:	08005644 	.word	0x08005644
 8000c94:	0800563c 	.word	0x0800563c
 8000c98:	08005588 	.word	0x08005588

08000c9c <cr95_read18>:

static void cr95_read18(void)
{
 8000c9c:	b590      	push	{r4, r7, lr}
 8000c9e:	b089      	sub	sp, #36	; 0x24
 8000ca0:	af00      	add	r7, sp, #0
	const uint8_t cmd_reqc[] =  { 0x04, 0x05, 0x00, 0xFF, 0xFF, 0x00, 0x00 };
 8000ca2:	2018      	movs	r0, #24
 8000ca4:	183b      	adds	r3, r7, r0
 8000ca6:	4a1f      	ldr	r2, [pc, #124]	; (8000d24 <cr95_read18+0x88>)
 8000ca8:	6811      	ldr	r1, [r2, #0]
 8000caa:	6019      	str	r1, [r3, #0]
 8000cac:	8891      	ldrh	r1, [r2, #4]
 8000cae:	8099      	strh	r1, [r3, #4]
 8000cb0:	7992      	ldrb	r2, [r2, #6]
 8000cb2:	719a      	strb	r2, [r3, #6]

	uint8_t data[16];
	uint8_t len;

	cr95write(cmd_reqc, sizeof(cmd_reqc));
 8000cb4:	183b      	adds	r3, r7, r0
 8000cb6:	2107      	movs	r1, #7
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f7ff fad5 	bl	8000268 <cr95write>
	if (cr95read(data, &len) == 0x80) {
 8000cbe:	1dfa      	adds	r2, r7, #7
 8000cc0:	2308      	movs	r3, #8
 8000cc2:	18fb      	adds	r3, r7, r3
 8000cc4:	0011      	movs	r1, r2
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f7ff fae4 	bl	8000294 <cr95read>
 8000ccc:	0003      	movs	r3, r0
 8000cce:	2b80      	cmp	r3, #128	; 0x80
 8000cd0:	d123      	bne.n	8000d1a <cr95_read18+0x7e>
		printf("ISO/IEC 18092 DATA =");
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <cr95_read18+0x8c>)
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f003 f9ad 	bl	8004034 <iprintf>
		for (uint8_t i = 0; i <= len; i++) printf(" %02X", data[i]);
 8000cda:	231f      	movs	r3, #31
 8000cdc:	18fb      	adds	r3, r7, r3
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
 8000ce2:	e010      	b.n	8000d06 <cr95_read18+0x6a>
 8000ce4:	241f      	movs	r4, #31
 8000ce6:	193b      	adds	r3, r7, r4
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2208      	movs	r2, #8
 8000cec:	18ba      	adds	r2, r7, r2
 8000cee:	5cd3      	ldrb	r3, [r2, r3]
 8000cf0:	001a      	movs	r2, r3
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <cr95_read18+0x90>)
 8000cf4:	0011      	movs	r1, r2
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f003 f99c 	bl	8004034 <iprintf>
 8000cfc:	193b      	adds	r3, r7, r4
 8000cfe:	781a      	ldrb	r2, [r3, #0]
 8000d00:	193b      	adds	r3, r7, r4
 8000d02:	3201      	adds	r2, #1
 8000d04:	701a      	strb	r2, [r3, #0]
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	221f      	movs	r2, #31
 8000d0c:	18ba      	adds	r2, r7, r2
 8000d0e:	7812      	ldrb	r2, [r2, #0]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d9e7      	bls.n	8000ce4 <cr95_read18+0x48>
		printf("\n");
 8000d14:	200a      	movs	r0, #10
 8000d16:	f003 f9a7 	bl	8004068 <putchar>
	}
}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b009      	add	sp, #36	; 0x24
 8000d20:	bd90      	pop	{r4, r7, pc}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	08005664 	.word	0x08005664
 8000d28:	0800564c 	.word	0x0800564c
 8000d2c:	08005588 	.word	0x08005588

08000d30 <cr95_calibrate>:

static void cr95_calibrate(void)
{
 8000d30:	b5b0      	push	{r4, r5, r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0
	uint8_t cmd_cal[] =  	    { 0x07, 0x0E, 0x03, 0xA1, 0x00, 0xF8, 0x01, 0x18, 0x00, 0x20, 0x60, 0x60, 0x00, 0x00, 0x3F, 0x01 };
 8000d36:	2118      	movs	r1, #24
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	4ab7      	ldr	r2, [pc, #732]	; (8001018 <cr95_calibrate+0x2e8>)
 8000d3c:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000d3e:	c331      	stmia	r3!, {r0, r4, r5}
 8000d40:	6812      	ldr	r2, [r2, #0]
 8000d42:	601a      	str	r2, [r3, #0]

	uint8_t data[16];
	uint8_t len;

	cmd_cal[13] = 0x00;
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2200      	movs	r2, #0
 8000d48:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8000d4a:	000c      	movs	r4, r1
 8000d4c:	187b      	adds	r3, r7, r1
 8000d4e:	2110      	movs	r1, #16
 8000d50:	0018      	movs	r0, r3
 8000d52:	f7ff fa89 	bl	8000268 <cr95write>
	printf("CAL #0 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8000d56:	0021      	movs	r1, r4
 8000d58:	187b      	adds	r3, r7, r1
 8000d5a:	7b5b      	ldrb	r3, [r3, #13]
 8000d5c:	001c      	movs	r4, r3
 8000d5e:	1dfa      	adds	r2, r7, #7
 8000d60:	2308      	movs	r3, #8
 8000d62:	18fb      	adds	r3, r7, r3
 8000d64:	0011      	movs	r1, r2
 8000d66:	0018      	movs	r0, r3
 8000d68:	f7ff fa94 	bl	8000294 <cr95read>
 8000d6c:	1e03      	subs	r3, r0, #0
 8000d6e:	d101      	bne.n	8000d74 <cr95_calibrate+0x44>
 8000d70:	2279      	movs	r2, #121	; 0x79
 8000d72:	e000      	b.n	8000d76 <cr95_calibrate+0x46>
 8000d74:	226e      	movs	r2, #110	; 0x6e
 8000d76:	2508      	movs	r5, #8
 8000d78:	197b      	adds	r3, r7, r5
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	48a7      	ldr	r0, [pc, #668]	; (800101c <cr95_calibrate+0x2ec>)
 8000d7e:	0021      	movs	r1, r4
 8000d80:	f003 f958 	bl	8004034 <iprintf>

	cmd_cal[13] = 0xFC;
 8000d84:	2118      	movs	r1, #24
 8000d86:	187b      	adds	r3, r7, r1
 8000d88:	22fc      	movs	r2, #252	; 0xfc
 8000d8a:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8000d8c:	000c      	movs	r4, r1
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	2110      	movs	r1, #16
 8000d92:	0018      	movs	r0, r3
 8000d94:	f7ff fa68 	bl	8000268 <cr95write>
	printf("CAL #1 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8000d98:	0021      	movs	r1, r4
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	7b5b      	ldrb	r3, [r3, #13]
 8000d9e:	001c      	movs	r4, r3
 8000da0:	1dfa      	adds	r2, r7, #7
 8000da2:	197b      	adds	r3, r7, r5
 8000da4:	0011      	movs	r1, r2
 8000da6:	0018      	movs	r0, r3
 8000da8:	f7ff fa74 	bl	8000294 <cr95read>
 8000dac:	1e03      	subs	r3, r0, #0
 8000dae:	d101      	bne.n	8000db4 <cr95_calibrate+0x84>
 8000db0:	2279      	movs	r2, #121	; 0x79
 8000db2:	e000      	b.n	8000db6 <cr95_calibrate+0x86>
 8000db4:	226e      	movs	r2, #110	; 0x6e
 8000db6:	2508      	movs	r5, #8
 8000db8:	197b      	adds	r3, r7, r5
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	4898      	ldr	r0, [pc, #608]	; (8001020 <cr95_calibrate+0x2f0>)
 8000dbe:	0021      	movs	r1, r4
 8000dc0:	f003 f938 	bl	8004034 <iprintf>

	cmd_cal[13] -= 0x80;
 8000dc4:	2118      	movs	r1, #24
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	7b5b      	ldrb	r3, [r3, #13]
 8000dca:	3b80      	subs	r3, #128	; 0x80
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8000dd2:	000c      	movs	r4, r1
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2110      	movs	r1, #16
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f7ff fa45 	bl	8000268 <cr95write>
	printf("CAL #2 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8000dde:	0021      	movs	r1, r4
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	7b5b      	ldrb	r3, [r3, #13]
 8000de4:	001c      	movs	r4, r3
 8000de6:	1dfa      	adds	r2, r7, #7
 8000de8:	197b      	adds	r3, r7, r5
 8000dea:	0011      	movs	r1, r2
 8000dec:	0018      	movs	r0, r3
 8000dee:	f7ff fa51 	bl	8000294 <cr95read>
 8000df2:	1e03      	subs	r3, r0, #0
 8000df4:	d101      	bne.n	8000dfa <cr95_calibrate+0xca>
 8000df6:	2279      	movs	r2, #121	; 0x79
 8000df8:	e000      	b.n	8000dfc <cr95_calibrate+0xcc>
 8000dfa:	226e      	movs	r2, #110	; 0x6e
 8000dfc:	2508      	movs	r5, #8
 8000dfe:	197b      	adds	r3, r7, r5
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	4888      	ldr	r0, [pc, #544]	; (8001024 <cr95_calibrate+0x2f4>)
 8000e04:	0021      	movs	r1, r4
 8000e06:	f003 f915 	bl	8004034 <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x40; else cmd_cal[13] += 0x40;
 8000e0a:	197b      	adds	r3, r7, r5
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d107      	bne.n	8000e22 <cr95_calibrate+0xf2>
 8000e12:	2118      	movs	r1, #24
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	7b5b      	ldrb	r3, [r3, #13]
 8000e18:	3b40      	subs	r3, #64	; 0x40
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	187b      	adds	r3, r7, r1
 8000e1e:	735a      	strb	r2, [r3, #13]
 8000e20:	e006      	b.n	8000e30 <cr95_calibrate+0x100>
 8000e22:	2118      	movs	r1, #24
 8000e24:	187b      	adds	r3, r7, r1
 8000e26:	7b5b      	ldrb	r3, [r3, #13]
 8000e28:	3340      	adds	r3, #64	; 0x40
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8000e30:	2418      	movs	r4, #24
 8000e32:	193b      	adds	r3, r7, r4
 8000e34:	2110      	movs	r1, #16
 8000e36:	0018      	movs	r0, r3
 8000e38:	f7ff fa16 	bl	8000268 <cr95write>
	printf("CAL #3 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8000e3c:	193b      	adds	r3, r7, r4
 8000e3e:	7b5b      	ldrb	r3, [r3, #13]
 8000e40:	001c      	movs	r4, r3
 8000e42:	1dfa      	adds	r2, r7, #7
 8000e44:	2308      	movs	r3, #8
 8000e46:	18fb      	adds	r3, r7, r3
 8000e48:	0011      	movs	r1, r2
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f7ff fa22 	bl	8000294 <cr95read>
 8000e50:	1e03      	subs	r3, r0, #0
 8000e52:	d101      	bne.n	8000e58 <cr95_calibrate+0x128>
 8000e54:	2279      	movs	r2, #121	; 0x79
 8000e56:	e000      	b.n	8000e5a <cr95_calibrate+0x12a>
 8000e58:	226e      	movs	r2, #110	; 0x6e
 8000e5a:	2508      	movs	r5, #8
 8000e5c:	197b      	adds	r3, r7, r5
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4871      	ldr	r0, [pc, #452]	; (8001028 <cr95_calibrate+0x2f8>)
 8000e62:	0021      	movs	r1, r4
 8000e64:	f003 f8e6 	bl	8004034 <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x20; else cmd_cal[13] += 0x20;
 8000e68:	197b      	adds	r3, r7, r5
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d107      	bne.n	8000e80 <cr95_calibrate+0x150>
 8000e70:	2118      	movs	r1, #24
 8000e72:	187b      	adds	r3, r7, r1
 8000e74:	7b5b      	ldrb	r3, [r3, #13]
 8000e76:	3b20      	subs	r3, #32
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	735a      	strb	r2, [r3, #13]
 8000e7e:	e006      	b.n	8000e8e <cr95_calibrate+0x15e>
 8000e80:	2118      	movs	r1, #24
 8000e82:	187b      	adds	r3, r7, r1
 8000e84:	7b5b      	ldrb	r3, [r3, #13]
 8000e86:	3320      	adds	r3, #32
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8000e8e:	2418      	movs	r4, #24
 8000e90:	193b      	adds	r3, r7, r4
 8000e92:	2110      	movs	r1, #16
 8000e94:	0018      	movs	r0, r3
 8000e96:	f7ff f9e7 	bl	8000268 <cr95write>
	printf("CAL #4 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8000e9a:	193b      	adds	r3, r7, r4
 8000e9c:	7b5b      	ldrb	r3, [r3, #13]
 8000e9e:	001c      	movs	r4, r3
 8000ea0:	1dfa      	adds	r2, r7, #7
 8000ea2:	2308      	movs	r3, #8
 8000ea4:	18fb      	adds	r3, r7, r3
 8000ea6:	0011      	movs	r1, r2
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f7ff f9f3 	bl	8000294 <cr95read>
 8000eae:	1e03      	subs	r3, r0, #0
 8000eb0:	d101      	bne.n	8000eb6 <cr95_calibrate+0x186>
 8000eb2:	2279      	movs	r2, #121	; 0x79
 8000eb4:	e000      	b.n	8000eb8 <cr95_calibrate+0x188>
 8000eb6:	226e      	movs	r2, #110	; 0x6e
 8000eb8:	2508      	movs	r5, #8
 8000eba:	197b      	adds	r3, r7, r5
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	485b      	ldr	r0, [pc, #364]	; (800102c <cr95_calibrate+0x2fc>)
 8000ec0:	0021      	movs	r1, r4
 8000ec2:	f003 f8b7 	bl	8004034 <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x10; else cmd_cal[13] += 0x10;
 8000ec6:	197b      	adds	r3, r7, r5
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d107      	bne.n	8000ede <cr95_calibrate+0x1ae>
 8000ece:	2118      	movs	r1, #24
 8000ed0:	187b      	adds	r3, r7, r1
 8000ed2:	7b5b      	ldrb	r3, [r3, #13]
 8000ed4:	3b10      	subs	r3, #16
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	735a      	strb	r2, [r3, #13]
 8000edc:	e006      	b.n	8000eec <cr95_calibrate+0x1bc>
 8000ede:	2118      	movs	r1, #24
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	7b5b      	ldrb	r3, [r3, #13]
 8000ee4:	3310      	adds	r3, #16
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	187b      	adds	r3, r7, r1
 8000eea:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8000eec:	2418      	movs	r4, #24
 8000eee:	193b      	adds	r3, r7, r4
 8000ef0:	2110      	movs	r1, #16
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f7ff f9b8 	bl	8000268 <cr95write>
	printf("CAL #5 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8000ef8:	193b      	adds	r3, r7, r4
 8000efa:	7b5b      	ldrb	r3, [r3, #13]
 8000efc:	001c      	movs	r4, r3
 8000efe:	1dfa      	adds	r2, r7, #7
 8000f00:	2308      	movs	r3, #8
 8000f02:	18fb      	adds	r3, r7, r3
 8000f04:	0011      	movs	r1, r2
 8000f06:	0018      	movs	r0, r3
 8000f08:	f7ff f9c4 	bl	8000294 <cr95read>
 8000f0c:	1e03      	subs	r3, r0, #0
 8000f0e:	d101      	bne.n	8000f14 <cr95_calibrate+0x1e4>
 8000f10:	2279      	movs	r2, #121	; 0x79
 8000f12:	e000      	b.n	8000f16 <cr95_calibrate+0x1e6>
 8000f14:	226e      	movs	r2, #110	; 0x6e
 8000f16:	2508      	movs	r5, #8
 8000f18:	197b      	adds	r3, r7, r5
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4844      	ldr	r0, [pc, #272]	; (8001030 <cr95_calibrate+0x300>)
 8000f1e:	0021      	movs	r1, r4
 8000f20:	f003 f888 	bl	8004034 <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x08; else cmd_cal[13] += 0x08;
 8000f24:	197b      	adds	r3, r7, r5
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d107      	bne.n	8000f3c <cr95_calibrate+0x20c>
 8000f2c:	2118      	movs	r1, #24
 8000f2e:	187b      	adds	r3, r7, r1
 8000f30:	7b5b      	ldrb	r3, [r3, #13]
 8000f32:	3b08      	subs	r3, #8
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	187b      	adds	r3, r7, r1
 8000f38:	735a      	strb	r2, [r3, #13]
 8000f3a:	e006      	b.n	8000f4a <cr95_calibrate+0x21a>
 8000f3c:	2118      	movs	r1, #24
 8000f3e:	187b      	adds	r3, r7, r1
 8000f40:	7b5b      	ldrb	r3, [r3, #13]
 8000f42:	3308      	adds	r3, #8
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	187b      	adds	r3, r7, r1
 8000f48:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8000f4a:	2418      	movs	r4, #24
 8000f4c:	193b      	adds	r3, r7, r4
 8000f4e:	2110      	movs	r1, #16
 8000f50:	0018      	movs	r0, r3
 8000f52:	f7ff f989 	bl	8000268 <cr95write>
	printf("CAL #6 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8000f56:	193b      	adds	r3, r7, r4
 8000f58:	7b5b      	ldrb	r3, [r3, #13]
 8000f5a:	001c      	movs	r4, r3
 8000f5c:	1dfa      	adds	r2, r7, #7
 8000f5e:	2308      	movs	r3, #8
 8000f60:	18fb      	adds	r3, r7, r3
 8000f62:	0011      	movs	r1, r2
 8000f64:	0018      	movs	r0, r3
 8000f66:	f7ff f995 	bl	8000294 <cr95read>
 8000f6a:	1e03      	subs	r3, r0, #0
 8000f6c:	d101      	bne.n	8000f72 <cr95_calibrate+0x242>
 8000f6e:	2279      	movs	r2, #121	; 0x79
 8000f70:	e000      	b.n	8000f74 <cr95_calibrate+0x244>
 8000f72:	226e      	movs	r2, #110	; 0x6e
 8000f74:	2508      	movs	r5, #8
 8000f76:	197b      	adds	r3, r7, r5
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	482e      	ldr	r0, [pc, #184]	; (8001034 <cr95_calibrate+0x304>)
 8000f7c:	0021      	movs	r1, r4
 8000f7e:	f003 f859 	bl	8004034 <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x04; else cmd_cal[13] += 0x04;
 8000f82:	197b      	adds	r3, r7, r5
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d107      	bne.n	8000f9a <cr95_calibrate+0x26a>
 8000f8a:	2118      	movs	r1, #24
 8000f8c:	187b      	adds	r3, r7, r1
 8000f8e:	7b5b      	ldrb	r3, [r3, #13]
 8000f90:	3b04      	subs	r3, #4
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	187b      	adds	r3, r7, r1
 8000f96:	735a      	strb	r2, [r3, #13]
 8000f98:	e006      	b.n	8000fa8 <cr95_calibrate+0x278>
 8000f9a:	2118      	movs	r1, #24
 8000f9c:	187b      	adds	r3, r7, r1
 8000f9e:	7b5b      	ldrb	r3, [r3, #13]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	187b      	adds	r3, r7, r1
 8000fa6:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8000fa8:	2418      	movs	r4, #24
 8000faa:	193b      	adds	r3, r7, r4
 8000fac:	2110      	movs	r1, #16
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f7ff f95a 	bl	8000268 <cr95write>
	printf("CAL #7 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8000fb4:	193b      	adds	r3, r7, r4
 8000fb6:	7b5b      	ldrb	r3, [r3, #13]
 8000fb8:	001c      	movs	r4, r3
 8000fba:	1dfa      	adds	r2, r7, #7
 8000fbc:	2308      	movs	r3, #8
 8000fbe:	18fb      	adds	r3, r7, r3
 8000fc0:	0011      	movs	r1, r2
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	f7ff f966 	bl	8000294 <cr95read>
 8000fc8:	1e03      	subs	r3, r0, #0
 8000fca:	d101      	bne.n	8000fd0 <cr95_calibrate+0x2a0>
 8000fcc:	2279      	movs	r2, #121	; 0x79
 8000fce:	e000      	b.n	8000fd2 <cr95_calibrate+0x2a2>
 8000fd0:	226e      	movs	r2, #110	; 0x6e
 8000fd2:	2508      	movs	r5, #8
 8000fd4:	197b      	adds	r3, r7, r5
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4817      	ldr	r0, [pc, #92]	; (8001038 <cr95_calibrate+0x308>)
 8000fda:	0021      	movs	r1, r4
 8000fdc:	f003 f82a 	bl	8004034 <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x04;
 8000fe0:	197b      	adds	r3, r7, r5
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d106      	bne.n	8000ff6 <cr95_calibrate+0x2c6>
 8000fe8:	2118      	movs	r1, #24
 8000fea:	187b      	adds	r3, r7, r1
 8000fec:	7b5b      	ldrb	r3, [r3, #13]
 8000fee:	3b04      	subs	r3, #4
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	187b      	adds	r3, r7, r1
 8000ff4:	735a      	strb	r2, [r3, #13]
	DacDataRef = cmd_cal[13];
 8000ff6:	2318      	movs	r3, #24
 8000ff8:	18fb      	adds	r3, r7, r3
 8000ffa:	7b5a      	ldrb	r2, [r3, #13]
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <cr95_calibrate+0x30c>)
 8000ffe:	701a      	strb	r2, [r3, #0]
	printf("CAL finished, DacDataRef=0x%02x\n", DacDataRef);
 8001000:	4b0e      	ldr	r3, [pc, #56]	; (800103c <cr95_calibrate+0x30c>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	001a      	movs	r2, r3
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <cr95_calibrate+0x310>)
 8001008:	0011      	movs	r1, r2
 800100a:	0018      	movs	r0, r3
 800100c:	f003 f812 	bl	8004034 <iprintf>
}
 8001010:	46c0      	nop			; (mov r8, r8)
 8001012:	46bd      	mov	sp, r7
 8001014:	b00a      	add	sp, #40	; 0x28
 8001016:	bdb0      	pop	{r4, r5, r7, pc}
 8001018:	080057b0 	.word	0x080057b0
 800101c:	0800566c 	.word	0x0800566c
 8001020:	08005690 	.word	0x08005690
 8001024:	080056b4 	.word	0x080056b4
 8001028:	080056d8 	.word	0x080056d8
 800102c:	080056fc 	.word	0x080056fc
 8001030:	08005720 	.word	0x08005720
 8001034:	08005744 	.word	0x08005744
 8001038:	08005768 	.word	0x08005768
 800103c:	20000282 	.word	0x20000282
 8001040:	0800578c 	.word	0x0800578c

08001044 <cr95_idle>:

static void cr95_idle(uint8_t mode)
{
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b087      	sub	sp, #28
 8001048:	af00      	add	r7, sp, #0
 800104a:	0002      	movs	r2, r0
 800104c:	1dfb      	adds	r3, r7, #7
 800104e:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_idle[] =  		{ 0x07, 0x0E, 0x0A, 0x21, 0x00, 0x79, 0x01, 0x18, 0x00, 0x20, 0x60, 0x60, 0x00, 0x00, 0x3F, 0x08 };
 8001050:	2308      	movs	r3, #8
 8001052:	18fb      	adds	r3, r7, r3
 8001054:	4a15      	ldr	r2, [pc, #84]	; (80010ac <cr95_idle+0x68>)
 8001056:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001058:	c313      	stmia	r3!, {r0, r1, r4}
 800105a:	6812      	ldr	r2, [r2, #0]
 800105c:	601a      	str	r2, [r3, #0]

	if (mode == 1) cmd_idle[2] = 0x08;   // Hibernate
 800105e:	1dfb      	adds	r3, r7, #7
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d104      	bne.n	8001070 <cr95_idle+0x2c>
 8001066:	2308      	movs	r3, #8
 8001068:	18fb      	adds	r3, r7, r3
 800106a:	2208      	movs	r2, #8
 800106c:	709a      	strb	r2, [r3, #2]
 800106e:	e003      	b.n	8001078 <cr95_idle+0x34>
	else cmd_idle[2] = 0x0A;             // TagDetect
 8001070:	2308      	movs	r3, #8
 8001072:	18fb      	adds	r3, r7, r3
 8001074:	220a      	movs	r2, #10
 8001076:	709a      	strb	r2, [r3, #2]

	cmd_idle[12] = DacDataRef - 8;
 8001078:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <cr95_idle+0x6c>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	3b08      	subs	r3, #8
 800107e:	b2da      	uxtb	r2, r3
 8001080:	2108      	movs	r1, #8
 8001082:	187b      	adds	r3, r7, r1
 8001084:	731a      	strb	r2, [r3, #12]
	cmd_idle[13] = DacDataRef + 8;
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <cr95_idle+0x6c>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	3308      	adds	r3, #8
 800108c:	b2da      	uxtb	r2, r3
 800108e:	187b      	adds	r3, r7, r1
 8001090:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_idle, sizeof(cmd_idle));
 8001092:	187b      	adds	r3, r7, r1
 8001094:	2110      	movs	r1, #16
 8001096:	0018      	movs	r0, r3
 8001098:	f7ff f8e6 	bl	8000268 <cr95write>
	printf("IDLE sent\n");
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <cr95_idle+0x70>)
 800109e:	0018      	movs	r0, r3
 80010a0:	f003 f856 	bl	8004150 <puts>
}
 80010a4:	46c0      	nop			; (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b007      	add	sp, #28
 80010aa:	bd90      	pop	{r4, r7, pc}
 80010ac:	080057cc 	.word	0x080057cc
 80010b0:	20000282 	.word	0x20000282
 80010b4:	080057c0 	.word	0x080057c0

080010b8 <uart_process_command>:

static void uart_process_command(char *cmd)
{
 80010b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ba:	b08d      	sub	sp, #52	; 0x34
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
    char *token;
    token = strtok(cmd, " ");
 80010c0:	4acb      	ldr	r2, [pc, #812]	; (80013f0 <uart_process_command+0x338>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	0011      	movs	r1, r2
 80010c6:	0018      	movs	r0, r3
 80010c8:	f003 f88a 	bl	80041e0 <strtok>
 80010cc:	0003      	movs	r3, r0
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t data[16];
	uint8_t len;

	const uint8_t cmd_echo[] =  { 0x55 };
 80010d0:	2310      	movs	r3, #16
 80010d2:	18fb      	adds	r3, r7, r3
 80010d4:	2255      	movs	r2, #85	; 0x55
 80010d6:	701a      	strb	r2, [r3, #0]
	const uint8_t cmd_idn[] =   { 0x01, 0x00 };
 80010d8:	210c      	movs	r1, #12
 80010da:	187b      	adds	r3, r7, r1
 80010dc:	2201      	movs	r2, #1
 80010de:	701a      	strb	r2, [r3, #0]
 80010e0:	187b      	adds	r3, r7, r1
 80010e2:	2200      	movs	r2, #0
 80010e4:	705a      	strb	r2, [r3, #1]

    if (strcasecmp(token, "HELLO") == 0) {
 80010e6:	4ac3      	ldr	r2, [pc, #780]	; (80013f4 <uart_process_command+0x33c>)
 80010e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ea:	0011      	movs	r1, r2
 80010ec:	0018      	movs	r0, r3
 80010ee:	f003 f859 	bl	80041a4 <strcasecmp>
 80010f2:	1e03      	subs	r3, r0, #0
 80010f4:	d104      	bne.n	8001100 <uart_process_command+0x48>
        printf("Komunikace OK\n");
 80010f6:	4bc0      	ldr	r3, [pc, #768]	; (80013f8 <uart_process_command+0x340>)
 80010f8:	0018      	movs	r0, r3
 80010fa:	f003 f829 	bl	8004150 <puts>
    	} while (uart_rx_read_ptr == uart_rx_write_ptr);
    }
    else {
        printf("Unknown command\n");
    }
}
 80010fe:	e1e2      	b.n	80014c6 <uart_process_command+0x40e>
    else if (strcasecmp(token, "ON") == 0) {
 8001100:	4abe      	ldr	r2, [pc, #760]	; (80013fc <uart_process_command+0x344>)
 8001102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001104:	0011      	movs	r1, r2
 8001106:	0018      	movs	r0, r3
 8001108:	f003 f84c 	bl	80041a4 <strcasecmp>
 800110c:	1e03      	subs	r3, r0, #0
 800110e:	d125      	bne.n	800115c <uart_process_command+0xa4>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	0059      	lsls	r1, r3, #1
 8001114:	2390      	movs	r3, #144	; 0x90
 8001116:	05db      	lsls	r3, r3, #23
 8001118:	2201      	movs	r2, #1
 800111a:	0018      	movs	r0, r3
 800111c:	f001 fc0e 	bl	800293c <HAL_GPIO_WritePin>
    	MX_USART1_UART_Init();
 8001120:	f000 fb18 	bl	8001754 <MX_USART1_UART_Init>
        HAL_UART_Receive_DMA(&huart1, nfc_rx_buf, RX_BUFFER_LEN);
 8001124:	49b6      	ldr	r1, [pc, #728]	; (8001400 <uart_process_command+0x348>)
 8001126:	4bb7      	ldr	r3, [pc, #732]	; (8001404 <uart_process_command+0x34c>)
 8001128:	2240      	movs	r2, #64	; 0x40
 800112a:	0018      	movs	r0, r3
 800112c:	f002 fa92 	bl	8003654 <HAL_UART_Receive_DMA>
    	HAL_Delay(5);
 8001130:	2005      	movs	r0, #5
 8001132:	f000 fea1 	bl	8001e78 <HAL_Delay>
    	printf("RFID ON\n");
 8001136:	4bb4      	ldr	r3, [pc, #720]	; (8001408 <uart_process_command+0x350>)
 8001138:	0018      	movs	r0, r3
 800113a:	f003 f809 	bl	8004150 <puts>
        nfc_rx_read_ptr = nfc_rx_write_ptr;
 800113e:	4bb3      	ldr	r3, [pc, #716]	; (800140c <uart_process_command+0x354>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	b29b      	uxth	r3, r3
 8001146:	2240      	movs	r2, #64	; 0x40
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	b29a      	uxth	r2, r3
 800114c:	4bb0      	ldr	r3, [pc, #704]	; (8001410 <uart_process_command+0x358>)
 800114e:	801a      	strh	r2, [r3, #0]
    	cr95_wakeup();
 8001150:	f7ff f958 	bl	8000404 <cr95_wakeup>
    	nfc_ready = true;
 8001154:	4baf      	ldr	r3, [pc, #700]	; (8001414 <uart_process_command+0x35c>)
 8001156:	2201      	movs	r2, #1
 8001158:	701a      	strb	r2, [r3, #0]
}
 800115a:	e1b4      	b.n	80014c6 <uart_process_command+0x40e>
    else if (strcasecmp(token, "OFF") == 0) {
 800115c:	4aae      	ldr	r2, [pc, #696]	; (8001418 <uart_process_command+0x360>)
 800115e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001160:	0011      	movs	r1, r2
 8001162:	0018      	movs	r0, r3
 8001164:	f003 f81e 	bl	80041a4 <strcasecmp>
 8001168:	1e03      	subs	r3, r0, #0
 800116a:	d117      	bne.n	800119c <uart_process_command+0xe4>
    	nfc_ready = false;
 800116c:	4ba9      	ldr	r3, [pc, #676]	; (8001414 <uart_process_command+0x35c>)
 800116e:	2200      	movs	r2, #0
 8001170:	701a      	strb	r2, [r3, #0]
        HAL_UART_AbortReceive(&huart1);
 8001172:	4ba4      	ldr	r3, [pc, #656]	; (8001404 <uart_process_command+0x34c>)
 8001174:	0018      	movs	r0, r3
 8001176:	f002 fb05 	bl	8003784 <HAL_UART_AbortReceive>
    	HAL_UART_DeInit(&huart1);
 800117a:	4ba2      	ldr	r3, [pc, #648]	; (8001404 <uart_process_command+0x34c>)
 800117c:	0018      	movs	r0, r3
 800117e:	f002 f98b 	bl	8003498 <HAL_UART_DeInit>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001182:	2380      	movs	r3, #128	; 0x80
 8001184:	0059      	lsls	r1, r3, #1
 8001186:	2390      	movs	r3, #144	; 0x90
 8001188:	05db      	lsls	r3, r3, #23
 800118a:	2200      	movs	r2, #0
 800118c:	0018      	movs	r0, r3
 800118e:	f001 fbd5 	bl	800293c <HAL_GPIO_WritePin>
    	printf("RFID OFF\n");
 8001192:	4ba2      	ldr	r3, [pc, #648]	; (800141c <uart_process_command+0x364>)
 8001194:	0018      	movs	r0, r3
 8001196:	f002 ffdb 	bl	8004150 <puts>
}
 800119a:	e194      	b.n	80014c6 <uart_process_command+0x40e>
    else if (strcasecmp(token, "ECHO") == 0) {
 800119c:	4aa0      	ldr	r2, [pc, #640]	; (8001420 <uart_process_command+0x368>)
 800119e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a0:	0011      	movs	r1, r2
 80011a2:	0018      	movs	r0, r3
 80011a4:	f002 fffe 	bl	80041a4 <strcasecmp>
 80011a8:	1e03      	subs	r3, r0, #0
 80011aa:	d11c      	bne.n	80011e6 <uart_process_command+0x12e>
    	cr95write(cmd_echo, sizeof(cmd_echo));
 80011ac:	2310      	movs	r3, #16
 80011ae:	18fb      	adds	r3, r7, r3
 80011b0:	2101      	movs	r1, #1
 80011b2:	0018      	movs	r0, r3
 80011b4:	f7ff f858 	bl	8000268 <cr95write>
    	uint8_t resp = cr95read(NULL, NULL);
 80011b8:	2525      	movs	r5, #37	; 0x25
 80011ba:	197c      	adds	r4, r7, r5
 80011bc:	2100      	movs	r1, #0
 80011be:	2000      	movs	r0, #0
 80011c0:	f7ff f868 	bl	8000294 <cr95read>
 80011c4:	0003      	movs	r3, r0
 80011c6:	7023      	strb	r3, [r4, #0]
    	printf("ECHO %s %02X\n", (resp == 0x55) ? "yes" : "no", resp);
 80011c8:	197b      	adds	r3, r7, r5
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b55      	cmp	r3, #85	; 0x55
 80011ce:	d101      	bne.n	80011d4 <uart_process_command+0x11c>
 80011d0:	4b94      	ldr	r3, [pc, #592]	; (8001424 <uart_process_command+0x36c>)
 80011d2:	e000      	b.n	80011d6 <uart_process_command+0x11e>
 80011d4:	4b94      	ldr	r3, [pc, #592]	; (8001428 <uart_process_command+0x370>)
 80011d6:	2225      	movs	r2, #37	; 0x25
 80011d8:	18ba      	adds	r2, r7, r2
 80011da:	7812      	ldrb	r2, [r2, #0]
 80011dc:	4893      	ldr	r0, [pc, #588]	; (800142c <uart_process_command+0x374>)
 80011de:	0019      	movs	r1, r3
 80011e0:	f002 ff28 	bl	8004034 <iprintf>
}
 80011e4:	e16f      	b.n	80014c6 <uart_process_command+0x40e>
    else if (strcasecmp(token, "IDN") == 0) {
 80011e6:	4a92      	ldr	r2, [pc, #584]	; (8001430 <uart_process_command+0x378>)
 80011e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ea:	0011      	movs	r1, r2
 80011ec:	0018      	movs	r0, r3
 80011ee:	f002 ffd9 	bl	80041a4 <strcasecmp>
 80011f2:	1e03      	subs	r3, r0, #0
 80011f4:	d13a      	bne.n	800126c <uart_process_command+0x1b4>
    	cr95write(cmd_idn, sizeof(cmd_idn));
 80011f6:	230c      	movs	r3, #12
 80011f8:	18fb      	adds	r3, r7, r3
 80011fa:	2102      	movs	r1, #2
 80011fc:	0018      	movs	r0, r3
 80011fe:	f7ff f833 	bl	8000268 <cr95write>
    	if (cr95read(data, &len) == 0x00) {
 8001202:	2313      	movs	r3, #19
 8001204:	18fa      	adds	r2, r7, r3
 8001206:	2314      	movs	r3, #20
 8001208:	18fb      	adds	r3, r7, r3
 800120a:	0011      	movs	r1, r2
 800120c:	0018      	movs	r0, r3
 800120e:	f7ff f841 	bl	8000294 <cr95read>
 8001212:	1e03      	subs	r3, r0, #0
 8001214:	d125      	bne.n	8001262 <uart_process_command+0x1aa>
    		printf("IDN =");
 8001216:	4b87      	ldr	r3, [pc, #540]	; (8001434 <uart_process_command+0x37c>)
 8001218:	0018      	movs	r0, r3
 800121a:	f002 ff0b 	bl	8004034 <iprintf>
    		for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 800121e:	232f      	movs	r3, #47	; 0x2f
 8001220:	18fb      	adds	r3, r7, r3
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
 8001226:	e010      	b.n	800124a <uart_process_command+0x192>
 8001228:	242f      	movs	r4, #47	; 0x2f
 800122a:	193b      	adds	r3, r7, r4
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2214      	movs	r2, #20
 8001230:	18ba      	adds	r2, r7, r2
 8001232:	5cd3      	ldrb	r3, [r2, r3]
 8001234:	001a      	movs	r2, r3
 8001236:	4b80      	ldr	r3, [pc, #512]	; (8001438 <uart_process_command+0x380>)
 8001238:	0011      	movs	r1, r2
 800123a:	0018      	movs	r0, r3
 800123c:	f002 fefa 	bl	8004034 <iprintf>
 8001240:	193b      	adds	r3, r7, r4
 8001242:	781a      	ldrb	r2, [r3, #0]
 8001244:	193b      	adds	r3, r7, r4
 8001246:	3201      	adds	r2, #1
 8001248:	701a      	strb	r2, [r3, #0]
 800124a:	2313      	movs	r3, #19
 800124c:	18fb      	adds	r3, r7, r3
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	222f      	movs	r2, #47	; 0x2f
 8001252:	18ba      	adds	r2, r7, r2
 8001254:	7812      	ldrb	r2, [r2, #0]
 8001256:	429a      	cmp	r2, r3
 8001258:	d3e6      	bcc.n	8001228 <uart_process_command+0x170>
    		printf("\n");
 800125a:	200a      	movs	r0, #10
 800125c:	f002 ff04 	bl	8004068 <putchar>
}
 8001260:	e131      	b.n	80014c6 <uart_process_command+0x40e>
    		printf("IDN error\n");
 8001262:	4b76      	ldr	r3, [pc, #472]	; (800143c <uart_process_command+0x384>)
 8001264:	0018      	movs	r0, r3
 8001266:	f002 ff73 	bl	8004150 <puts>
}
 800126a:	e12c      	b.n	80014c6 <uart_process_command+0x40e>
    else if (strcasecmp(token, "INIT14") == 0) {
 800126c:	4a74      	ldr	r2, [pc, #464]	; (8001440 <uart_process_command+0x388>)
 800126e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001270:	0011      	movs	r1, r2
 8001272:	0018      	movs	r0, r3
 8001274:	f002 ff96 	bl	80041a4 <strcasecmp>
 8001278:	1e03      	subs	r3, r0, #0
 800127a:	d102      	bne.n	8001282 <uart_process_command+0x1ca>
    	cr95_init14();
 800127c:	f7ff f8d8 	bl	8000430 <cr95_init14>
}
 8001280:	e121      	b.n	80014c6 <uart_process_command+0x40e>
    else if (strcasecmp(token, "INIT14B") == 0) {
 8001282:	4a70      	ldr	r2, [pc, #448]	; (8001444 <uart_process_command+0x38c>)
 8001284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001286:	0011      	movs	r1, r2
 8001288:	0018      	movs	r0, r3
 800128a:	f002 ff8b 	bl	80041a4 <strcasecmp>
 800128e:	1e03      	subs	r3, r0, #0
 8001290:	d102      	bne.n	8001298 <uart_process_command+0x1e0>
        cr95_init14B();
 8001292:	f7ff f931 	bl	80004f8 <cr95_init14B>
}
 8001296:	e116      	b.n	80014c6 <uart_process_command+0x40e>
    else if (strcasecmp(token, "INIT15") == 0) {
 8001298:	4a6b      	ldr	r2, [pc, #428]	; (8001448 <uart_process_command+0x390>)
 800129a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800129c:	0011      	movs	r1, r2
 800129e:	0018      	movs	r0, r3
 80012a0:	f002 ff80 	bl	80041a4 <strcasecmp>
 80012a4:	1e03      	subs	r3, r0, #0
 80012a6:	d102      	bne.n	80012ae <uart_process_command+0x1f6>
        cr95_init15();
 80012a8:	f7ff f98a 	bl	80005c0 <cr95_init15>
}
 80012ac:	e10b      	b.n	80014c6 <uart_process_command+0x40e>
    else if (strcasecmp(token, "INIT18") == 0) {
 80012ae:	4a67      	ldr	r2, [pc, #412]	; (800144c <uart_process_command+0x394>)
 80012b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b2:	0011      	movs	r1, r2
 80012b4:	0018      	movs	r0, r3
 80012b6:	f002 ff75 	bl	80041a4 <strcasecmp>
 80012ba:	1e03      	subs	r3, r0, #0
 80012bc:	d102      	bne.n	80012c4 <uart_process_command+0x20c>
        cr95_init18();
 80012be:	f7ff f9e3 	bl	8000688 <cr95_init18>
}
 80012c2:	e100      	b.n	80014c6 <uart_process_command+0x40e>
    else if (strcasecmp(token, "READ") == 0) {
 80012c4:	4a62      	ldr	r2, [pc, #392]	; (8001450 <uart_process_command+0x398>)
 80012c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c8:	0011      	movs	r1, r2
 80012ca:	0018      	movs	r0, r3
 80012cc:	f002 ff6a 	bl	80041a4 <strcasecmp>
 80012d0:	1e03      	subs	r3, r0, #0
 80012d2:	d102      	bne.n	80012da <uart_process_command+0x222>
    	cr95_read();
 80012d4:	f7ff fa58 	bl	8000788 <cr95_read>
}
 80012d8:	e0f5      	b.n	80014c6 <uart_process_command+0x40e>
    else if (strcasecmp(token, "READTOPAZ") == 0) {
 80012da:	4a5e      	ldr	r2, [pc, #376]	; (8001454 <uart_process_command+0x39c>)
 80012dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012de:	0011      	movs	r1, r2
 80012e0:	0018      	movs	r0, r3
 80012e2:	f002 ff5f 	bl	80041a4 <strcasecmp>
 80012e6:	1e03      	subs	r3, r0, #0
 80012e8:	d102      	bne.n	80012f0 <uart_process_command+0x238>
        cr95_readtopaz();
 80012ea:	f7ff fbe7 	bl	8000abc <cr95_readtopaz>
}
 80012ee:	e0ea      	b.n	80014c6 <uart_process_command+0x40e>
    else if (strcasecmp(token, "READ14B") == 0) {
 80012f0:	4a59      	ldr	r2, [pc, #356]	; (8001458 <uart_process_command+0x3a0>)
 80012f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f4:	0011      	movs	r1, r2
 80012f6:	0018      	movs	r0, r3
 80012f8:	f002 ff54 	bl	80041a4 <strcasecmp>
 80012fc:	1e03      	subs	r3, r0, #0
 80012fe:	d102      	bne.n	8001306 <uart_process_command+0x24e>
        cr95_read14B();
 8001300:	f7ff fc80 	bl	8000c04 <cr95_read14B>
}
 8001304:	e0df      	b.n	80014c6 <uart_process_command+0x40e>
    else if (strcasecmp(token, "READ18") == 0) {
 8001306:	4a55      	ldr	r2, [pc, #340]	; (800145c <uart_process_command+0x3a4>)
 8001308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800130a:	0011      	movs	r1, r2
 800130c:	0018      	movs	r0, r3
 800130e:	f002 ff49 	bl	80041a4 <strcasecmp>
 8001312:	1e03      	subs	r3, r0, #0
 8001314:	d102      	bne.n	800131c <uart_process_command+0x264>
        cr95_read18();
 8001316:	f7ff fcc1 	bl	8000c9c <cr95_read18>
}
 800131a:	e0d4      	b.n	80014c6 <uart_process_command+0x40e>
    else if (strcasecmp(token, "CALIBRATE") == 0) {
 800131c:	4a50      	ldr	r2, [pc, #320]	; (8001460 <uart_process_command+0x3a8>)
 800131e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001320:	0011      	movs	r1, r2
 8001322:	0018      	movs	r0, r3
 8001324:	f002 ff3e 	bl	80041a4 <strcasecmp>
 8001328:	1e03      	subs	r3, r0, #0
 800132a:	d102      	bne.n	8001332 <uart_process_command+0x27a>
    	cr95_calibrate();
 800132c:	f7ff fd00 	bl	8000d30 <cr95_calibrate>
}
 8001330:	e0c9      	b.n	80014c6 <uart_process_command+0x40e>
    else if (strcasecmp(token, "IDLE") == 0) {
 8001332:	4a4c      	ldr	r2, [pc, #304]	; (8001464 <uart_process_command+0x3ac>)
 8001334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001336:	0011      	movs	r1, r2
 8001338:	0018      	movs	r0, r3
 800133a:	f002 ff33 	bl	80041a4 <strcasecmp>
 800133e:	1e03      	subs	r3, r0, #0
 8001340:	d103      	bne.n	800134a <uart_process_command+0x292>
    	cr95_idle(1);
 8001342:	2001      	movs	r0, #1
 8001344:	f7ff fe7e 	bl	8001044 <cr95_idle>
}
 8001348:	e0bd      	b.n	80014c6 <uart_process_command+0x40e>
    else if (strcasecmp(token, "WAKEUP") == 0) {
 800134a:	4a47      	ldr	r2, [pc, #284]	; (8001468 <uart_process_command+0x3b0>)
 800134c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800134e:	0011      	movs	r1, r2
 8001350:	0018      	movs	r0, r3
 8001352:	f002 ff27 	bl	80041a4 <strcasecmp>
 8001356:	1e03      	subs	r3, r0, #0
 8001358:	d117      	bne.n	800138a <uart_process_command+0x2d2>
    	cr95_wakeup();
 800135a:	f7ff f853 	bl	8000404 <cr95_wakeup>
    	uint8_t resp = cr95read(data, &len);
 800135e:	2526      	movs	r5, #38	; 0x26
 8001360:	197c      	adds	r4, r7, r5
 8001362:	2313      	movs	r3, #19
 8001364:	18fa      	adds	r2, r7, r3
 8001366:	2614      	movs	r6, #20
 8001368:	19bb      	adds	r3, r7, r6
 800136a:	0011      	movs	r1, r2
 800136c:	0018      	movs	r0, r3
 800136e:	f7fe ff91 	bl	8000294 <cr95read>
 8001372:	0003      	movs	r3, r0
 8001374:	7023      	strb	r3, [r4, #0]
    	printf("Code of wakeup is: %02X with response: %02X\n", data[0],resp);
 8001376:	19bb      	adds	r3, r7, r6
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	0019      	movs	r1, r3
 800137c:	197b      	adds	r3, r7, r5
 800137e:	781a      	ldrb	r2, [r3, #0]
 8001380:	4b3a      	ldr	r3, [pc, #232]	; (800146c <uart_process_command+0x3b4>)
 8001382:	0018      	movs	r0, r3
 8001384:	f002 fe56 	bl	8004034 <iprintf>
}
 8001388:	e09d      	b.n	80014c6 <uart_process_command+0x40e>
    else if (strcasecmp(token, "AUTO") == 0) {
 800138a:	4a39      	ldr	r2, [pc, #228]	; (8001470 <uart_process_command+0x3b8>)
 800138c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800138e:	0011      	movs	r1, r2
 8001390:	0018      	movs	r0, r3
 8001392:	f002 ff07 	bl	80041a4 <strcasecmp>
 8001396:	1e03      	subs	r3, r0, #0
 8001398:	d000      	beq.n	800139c <uart_process_command+0x2e4>
 800139a:	e090      	b.n	80014be <uart_process_command+0x406>
    	cr95_calibrate();
 800139c:	f7ff fcc8 	bl	8000d30 <cr95_calibrate>
        	cr95_idle(0);
 80013a0:	2000      	movs	r0, #0
 80013a2:	f7ff fe4f 	bl	8001044 <cr95_idle>
			do {} while (nfc_rx_read_ptr == nfc_rx_write_ptr);
 80013a6:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <uart_process_command+0x358>)
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	0019      	movs	r1, r3
 80013ae:	4b17      	ldr	r3, [pc, #92]	; (800140c <uart_process_command+0x354>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2240      	movs	r2, #64	; 0x40
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	4299      	cmp	r1, r3
 80013ba:	d0f4      	beq.n	80013a6 <uart_process_command+0x2ee>
			uint8_t resp = cr95read(data, &len);
 80013bc:	2527      	movs	r5, #39	; 0x27
 80013be:	197c      	adds	r4, r7, r5
 80013c0:	2313      	movs	r3, #19
 80013c2:	18fa      	adds	r2, r7, r3
 80013c4:	2314      	movs	r3, #20
 80013c6:	18fb      	adds	r3, r7, r3
 80013c8:	0011      	movs	r1, r2
 80013ca:	0018      	movs	r0, r3
 80013cc:	f7fe ff62 	bl	8000294 <cr95read>
 80013d0:	0003      	movs	r3, r0
 80013d2:	7023      	strb	r3, [r4, #0]
			if (resp == 0x00 && data[0] == 0x02) printf("WAKEUP by tag detect\n");
 80013d4:	197b      	adds	r3, r7, r5
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d14d      	bne.n	8001478 <uart_process_command+0x3c0>
 80013dc:	2314      	movs	r3, #20
 80013de:	18fb      	adds	r3, r7, r3
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d148      	bne.n	8001478 <uart_process_command+0x3c0>
 80013e6:	4b23      	ldr	r3, [pc, #140]	; (8001474 <uart_process_command+0x3bc>)
 80013e8:	0018      	movs	r0, r3
 80013ea:	f002 feb1 	bl	8004150 <puts>
 80013ee:	e047      	b.n	8001480 <uart_process_command+0x3c8>
 80013f0:	080057dc 	.word	0x080057dc
 80013f4:	080057e0 	.word	0x080057e0
 80013f8:	080057e8 	.word	0x080057e8
 80013fc:	080057f8 	.word	0x080057f8
 8001400:	20000240 	.word	0x20000240
 8001404:	2000035c 	.word	0x2000035c
 8001408:	080057fc 	.word	0x080057fc
 800140c:	20000318 	.word	0x20000318
 8001410:	20000280 	.word	0x20000280
 8001414:	20000283 	.word	0x20000283
 8001418:	08005804 	.word	0x08005804
 800141c:	08005808 	.word	0x08005808
 8001420:	08005814 	.word	0x08005814
 8001424:	080054d8 	.word	0x080054d8
 8001428:	080054dc 	.word	0x080054dc
 800142c:	0800581c 	.word	0x0800581c
 8001430:	0800582c 	.word	0x0800582c
 8001434:	08005830 	.word	0x08005830
 8001438:	08005588 	.word	0x08005588
 800143c:	08005838 	.word	0x08005838
 8001440:	08005844 	.word	0x08005844
 8001444:	0800584c 	.word	0x0800584c
 8001448:	08005854 	.word	0x08005854
 800144c:	0800585c 	.word	0x0800585c
 8001450:	08005864 	.word	0x08005864
 8001454:	0800586c 	.word	0x0800586c
 8001458:	08005878 	.word	0x08005878
 800145c:	08005880 	.word	0x08005880
 8001460:	08005888 	.word	0x08005888
 8001464:	08005894 	.word	0x08005894
 8001468:	0800589c 	.word	0x0800589c
 800146c:	080058a4 	.word	0x080058a4
 8001470:	080058d4 	.word	0x080058d4
 8001474:	080058dc 	.word	0x080058dc
			else printf("Error\n");
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <uart_process_command+0x418>)
 800147a:	0018      	movs	r0, r3
 800147c:	f002 fe68 	bl	8004150 <puts>
			printf("Code of wakeup is:%02X\n", data[0]);
 8001480:	2314      	movs	r3, #20
 8001482:	18fb      	adds	r3, r7, r3
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	001a      	movs	r2, r3
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <uart_process_command+0x41c>)
 800148a:	0011      	movs	r1, r2
 800148c:	0018      	movs	r0, r3
 800148e:	f002 fdd1 	bl	8004034 <iprintf>
        	cr95_init14();
 8001492:	f7fe ffcd 	bl	8000430 <cr95_init14>
        	cr95_read();
 8001496:	f7ff f977 	bl	8000788 <cr95_read>
        	HAL_Delay(2000);
 800149a:	23fa      	movs	r3, #250	; 0xfa
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	0018      	movs	r0, r3
 80014a0:	f000 fcea 	bl	8001e78 <HAL_Delay>
    	} while (uart_rx_read_ptr == uart_rx_write_ptr);
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <uart_process_command+0x420>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	0019      	movs	r1, r3
 80014ac:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <uart_process_command+0x424>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2240      	movs	r2, #64	; 0x40
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	4299      	cmp	r1, r3
 80014b8:	d100      	bne.n	80014bc <uart_process_command+0x404>
 80014ba:	e771      	b.n	80013a0 <uart_process_command+0x2e8>
}
 80014bc:	e003      	b.n	80014c6 <uart_process_command+0x40e>
        printf("Unknown command\n");
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <uart_process_command+0x428>)
 80014c0:	0018      	movs	r0, r3
 80014c2:	f002 fe45 	bl	8004150 <puts>
}
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b00d      	add	sp, #52	; 0x34
 80014cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	080058f4 	.word	0x080058f4
 80014d4:	080058fc 	.word	0x080058fc
 80014d8:	2000023c 	.word	0x2000023c
 80014dc:	200002d4 	.word	0x200002d4
 80014e0:	08005914 	.word	0x08005914

080014e4 <uart_byte_available>:


static void uart_byte_available(uint8_t c)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	0002      	movs	r2, r0
 80014ec:	1dfb      	adds	r3, r7, #7
 80014ee:	701a      	strb	r2, [r3, #0]
    static uint16_t cnt;
    static char data[CMD_BUFFER_LEN];

    if (cnt < CMD_BUFFER_LEN) data[cnt++] = c;
 80014f0:	4b13      	ldr	r3, [pc, #76]	; (8001540 <uart_byte_available+0x5c>)
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	2b3f      	cmp	r3, #63	; 0x3f
 80014f6:	d80a      	bhi.n	800150e <uart_byte_available+0x2a>
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <uart_byte_available+0x5c>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	1c5a      	adds	r2, r3, #1
 80014fe:	b291      	uxth	r1, r2
 8001500:	4a0f      	ldr	r2, [pc, #60]	; (8001540 <uart_byte_available+0x5c>)
 8001502:	8011      	strh	r1, [r2, #0]
 8001504:	0019      	movs	r1, r3
 8001506:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <uart_byte_available+0x60>)
 8001508:	1dfa      	adds	r2, r7, #7
 800150a:	7812      	ldrb	r2, [r2, #0]
 800150c:	545a      	strb	r2, [r3, r1]
    if (c == '\n' || c == '\r') {
 800150e:	1dfb      	adds	r3, r7, #7
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b0a      	cmp	r3, #10
 8001514:	d003      	beq.n	800151e <uart_byte_available+0x3a>
 8001516:	1dfb      	adds	r3, r7, #7
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b0d      	cmp	r3, #13
 800151c:	d10c      	bne.n	8001538 <uart_byte_available+0x54>
        data[cnt - 1] = '\0';
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <uart_byte_available+0x5c>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	3b01      	subs	r3, #1
 8001524:	4a07      	ldr	r2, [pc, #28]	; (8001544 <uart_byte_available+0x60>)
 8001526:	2100      	movs	r1, #0
 8001528:	54d1      	strb	r1, [r2, r3]
        uart_process_command(data);
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <uart_byte_available+0x60>)
 800152c:	0018      	movs	r0, r3
 800152e:	f7ff fdc3 	bl	80010b8 <uart_process_command>
        cnt = 0;
 8001532:	4b03      	ldr	r3, [pc, #12]	; (8001540 <uart_byte_available+0x5c>)
 8001534:	2200      	movs	r2, #0
 8001536:	801a      	strh	r2, [r3, #0]
    }
}
 8001538:	46c0      	nop			; (mov r8, r8)
 800153a:	46bd      	mov	sp, r7
 800153c:	b002      	add	sp, #8
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000284 	.word	0x20000284
 8001544:	20000288 	.word	0x20000288

08001548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001548:	b5b0      	push	{r4, r5, r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800154e:	f000 fc2f 	bl	8001db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001552:	f000 f89d 	bl	8001690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001556:	f000 f985 	bl	8001864 <MX_GPIO_Init>
  MX_DMA_Init();
 800155a:	f000 f95d 	bl	8001818 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800155e:	f000 f92b 	bl	80017b8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001562:	f000 f8f7 	bl	8001754 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_DeInit(&huart1);
 8001566:	4b3f      	ldr	r3, [pc, #252]	; (8001664 <main+0x11c>)
 8001568:	0018      	movs	r0, r3
 800156a:	f001 ff95 	bl	8003498 <HAL_UART_DeInit>
  HAL_UART_Receive_DMA(&huart2, uart_rx_buf, RX_BUFFER_LEN);
 800156e:	493e      	ldr	r1, [pc, #248]	; (8001668 <main+0x120>)
 8001570:	4b3e      	ldr	r3, [pc, #248]	; (800166c <main+0x124>)
 8001572:	2240      	movs	r2, #64	; 0x40
 8001574:	0018      	movs	r0, r3
 8001576:	f002 f86d 	bl	8003654 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
#if 1
	  while (uart_rx_read_ptr != uart_rx_write_ptr) {
 800157a:	e01b      	b.n	80015b4 <main+0x6c>
	      uint8_t b = uart_rx_buf[uart_rx_read_ptr];
 800157c:	4b3c      	ldr	r3, [pc, #240]	; (8001670 <main+0x128>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	b29b      	uxth	r3, r3
 8001582:	0019      	movs	r1, r3
 8001584:	2315      	movs	r3, #21
 8001586:	18fb      	adds	r3, r7, r3
 8001588:	4a37      	ldr	r2, [pc, #220]	; (8001668 <main+0x120>)
 800158a:	5c52      	ldrb	r2, [r2, r1]
 800158c:	701a      	strb	r2, [r3, #0]
	      if (++uart_rx_read_ptr >= RX_BUFFER_LEN) uart_rx_read_ptr = 0; // increase read pointer
 800158e:	4b38      	ldr	r3, [pc, #224]	; (8001670 <main+0x128>)
 8001590:	881b      	ldrh	r3, [r3, #0]
 8001592:	b29b      	uxth	r3, r3
 8001594:	3301      	adds	r3, #1
 8001596:	b29b      	uxth	r3, r3
 8001598:	4a35      	ldr	r2, [pc, #212]	; (8001670 <main+0x128>)
 800159a:	1c19      	adds	r1, r3, #0
 800159c:	8011      	strh	r1, [r2, #0]
 800159e:	2b3f      	cmp	r3, #63	; 0x3f
 80015a0:	d902      	bls.n	80015a8 <main+0x60>
 80015a2:	4b33      	ldr	r3, [pc, #204]	; (8001670 <main+0x128>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	801a      	strh	r2, [r3, #0]

	      uart_byte_available(b); // process every received byte with the RX state machine
 80015a8:	2315      	movs	r3, #21
 80015aa:	18fb      	adds	r3, r7, r3
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	0018      	movs	r0, r3
 80015b0:	f7ff ff98 	bl	80014e4 <uart_byte_available>
	  while (uart_rx_read_ptr != uart_rx_write_ptr) {
 80015b4:	4b2e      	ldr	r3, [pc, #184]	; (8001670 <main+0x128>)
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	0019      	movs	r1, r3
 80015bc:	4b2d      	ldr	r3, [pc, #180]	; (8001674 <main+0x12c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2240      	movs	r2, #64	; 0x40
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	4299      	cmp	r1, r3
 80015c8:	d1d8      	bne.n	800157c <main+0x34>
	  }

	  if (nfc_ready && nfc_rx_read_ptr != nfc_rx_write_ptr) {
 80015ca:	4b2b      	ldr	r3, [pc, #172]	; (8001678 <main+0x130>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0f0      	beq.n	80015b4 <main+0x6c>
 80015d2:	4b2a      	ldr	r3, [pc, #168]	; (800167c <main+0x134>)
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	0019      	movs	r1, r3
 80015da:	4b29      	ldr	r3, [pc, #164]	; (8001680 <main+0x138>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2240      	movs	r2, #64	; 0x40
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	4299      	cmp	r1, r3
 80015e6:	d0e5      	beq.n	80015b4 <main+0x6c>
		  uint8_t data[16];
		  uint8_t len;
		  uint8_t resp = cr95read(data, &len);
 80015e8:	2516      	movs	r5, #22
 80015ea:	197c      	adds	r4, r7, r5
 80015ec:	1cfa      	adds	r2, r7, #3
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	0011      	movs	r1, r2
 80015f2:	0018      	movs	r0, r3
 80015f4:	f7fe fe4e 	bl	8000294 <cr95read>
 80015f8:	0003      	movs	r3, r0
 80015fa:	7023      	strb	r3, [r4, #0]

		  if (resp != 0xFF) {
 80015fc:	197b      	adds	r3, r7, r5
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2bff      	cmp	r3, #255	; 0xff
 8001602:	d029      	beq.n	8001658 <main+0x110>
			  printf("Async response, code = 0x%02x, len = %d, data =", resp, len);
 8001604:	2316      	movs	r3, #22
 8001606:	18fb      	adds	r3, r7, r3
 8001608:	7819      	ldrb	r1, [r3, #0]
 800160a:	1cfb      	adds	r3, r7, #3
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	001a      	movs	r2, r3
 8001610:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <main+0x13c>)
 8001612:	0018      	movs	r0, r3
 8001614:	f002 fd0e 	bl	8004034 <iprintf>
			  for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8001618:	2317      	movs	r3, #23
 800161a:	18fb      	adds	r3, r7, r3
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
 8001620:	e00f      	b.n	8001642 <main+0xfa>
 8001622:	2417      	movs	r4, #23
 8001624:	193b      	adds	r3, r7, r4
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	1d3a      	adds	r2, r7, #4
 800162a:	5cd3      	ldrb	r3, [r2, r3]
 800162c:	001a      	movs	r2, r3
 800162e:	4b16      	ldr	r3, [pc, #88]	; (8001688 <main+0x140>)
 8001630:	0011      	movs	r1, r2
 8001632:	0018      	movs	r0, r3
 8001634:	f002 fcfe 	bl	8004034 <iprintf>
 8001638:	193b      	adds	r3, r7, r4
 800163a:	781a      	ldrb	r2, [r3, #0]
 800163c:	193b      	adds	r3, r7, r4
 800163e:	3201      	adds	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]
 8001642:	1cfb      	adds	r3, r7, #3
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2217      	movs	r2, #23
 8001648:	18ba      	adds	r2, r7, r2
 800164a:	7812      	ldrb	r2, [r2, #0]
 800164c:	429a      	cmp	r2, r3
 800164e:	d3e8      	bcc.n	8001622 <main+0xda>
			  printf("\n");
 8001650:	200a      	movs	r0, #10
 8001652:	f002 fd09 	bl	8004068 <putchar>
 8001656:	e7ad      	b.n	80015b4 <main+0x6c>
		  } else {
			  printf("Async reponse, invalid (timeout)\n");
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <main+0x144>)
 800165a:	0018      	movs	r0, r3
 800165c:	f002 fd78 	bl	8004150 <puts>
	  while (uart_rx_read_ptr != uart_rx_write_ptr) {
 8001660:	e7a8      	b.n	80015b4 <main+0x6c>
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	2000035c 	.word	0x2000035c
 8001668:	200001fc 	.word	0x200001fc
 800166c:	200003dc 	.word	0x200003dc
 8001670:	2000023c 	.word	0x2000023c
 8001674:	200002d4 	.word	0x200002d4
 8001678:	20000283 	.word	0x20000283
 800167c:	20000280 	.word	0x20000280
 8001680:	20000318 	.word	0x20000318
 8001684:	08005924 	.word	0x08005924
 8001688:	08005588 	.word	0x08005588
 800168c:	08005954 	.word	0x08005954

08001690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b095      	sub	sp, #84	; 0x54
 8001694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001696:	2420      	movs	r4, #32
 8001698:	193b      	adds	r3, r7, r4
 800169a:	0018      	movs	r0, r3
 800169c:	2330      	movs	r3, #48	; 0x30
 800169e:	001a      	movs	r2, r3
 80016a0:	2100      	movs	r1, #0
 80016a2:	f002 fcbf 	bl	8004024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a6:	2310      	movs	r3, #16
 80016a8:	18fb      	adds	r3, r7, r3
 80016aa:	0018      	movs	r0, r3
 80016ac:	2310      	movs	r3, #16
 80016ae:	001a      	movs	r2, r3
 80016b0:	2100      	movs	r1, #0
 80016b2:	f002 fcb7 	bl	8004024 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016b6:	003b      	movs	r3, r7
 80016b8:	0018      	movs	r0, r3
 80016ba:	2310      	movs	r3, #16
 80016bc:	001a      	movs	r2, r3
 80016be:	2100      	movs	r1, #0
 80016c0:	f002 fcb0 	bl	8004024 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016c4:	0021      	movs	r1, r4
 80016c6:	187b      	adds	r3, r7, r1
 80016c8:	2202      	movs	r2, #2
 80016ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016cc:	187b      	adds	r3, r7, r1
 80016ce:	2201      	movs	r2, #1
 80016d0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016d2:	187b      	adds	r3, r7, r1
 80016d4:	2210      	movs	r2, #16
 80016d6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d8:	187b      	adds	r3, r7, r1
 80016da:	2202      	movs	r2, #2
 80016dc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016de:	187b      	adds	r3, r7, r1
 80016e0:	2200      	movs	r2, #0
 80016e2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80016e4:	187b      	adds	r3, r7, r1
 80016e6:	22a0      	movs	r2, #160	; 0xa0
 80016e8:	0392      	lsls	r2, r2, #14
 80016ea:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80016ec:	187b      	adds	r3, r7, r1
 80016ee:	2200      	movs	r2, #0
 80016f0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f2:	187b      	adds	r3, r7, r1
 80016f4:	0018      	movs	r0, r3
 80016f6:	f001 f93f 	bl	8002978 <HAL_RCC_OscConfig>
 80016fa:	1e03      	subs	r3, r0, #0
 80016fc:	d001      	beq.n	8001702 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80016fe:	f000 f937 	bl	8001970 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001702:	2110      	movs	r1, #16
 8001704:	187b      	adds	r3, r7, r1
 8001706:	2207      	movs	r2, #7
 8001708:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800170a:	187b      	adds	r3, r7, r1
 800170c:	2202      	movs	r2, #2
 800170e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001710:	187b      	adds	r3, r7, r1
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001716:	187b      	adds	r3, r7, r1
 8001718:	2200      	movs	r2, #0
 800171a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800171c:	187b      	adds	r3, r7, r1
 800171e:	2101      	movs	r1, #1
 8001720:	0018      	movs	r0, r3
 8001722:	f001 fc45 	bl	8002fb0 <HAL_RCC_ClockConfig>
 8001726:	1e03      	subs	r3, r0, #0
 8001728:	d001      	beq.n	800172e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800172a:	f000 f921 	bl	8001970 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800172e:	003b      	movs	r3, r7
 8001730:	2201      	movs	r2, #1
 8001732:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001734:	003b      	movs	r3, r7
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800173a:	003b      	movs	r3, r7
 800173c:	0018      	movs	r0, r3
 800173e:	f001 fd89 	bl	8003254 <HAL_RCCEx_PeriphCLKConfig>
 8001742:	1e03      	subs	r3, r0, #0
 8001744:	d001      	beq.n	800174a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001746:	f000 f913 	bl	8001970 <Error_Handler>
  }
}
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	46bd      	mov	sp, r7
 800174e:	b015      	add	sp, #84	; 0x54
 8001750:	bd90      	pop	{r4, r7, pc}
	...

08001754 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001758:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <MX_USART1_UART_Init+0x5c>)
 800175a:	4a16      	ldr	r2, [pc, #88]	; (80017b4 <MX_USART1_UART_Init+0x60>)
 800175c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800175e:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <MX_USART1_UART_Init+0x5c>)
 8001760:	22e1      	movs	r2, #225	; 0xe1
 8001762:	0212      	lsls	r2, r2, #8
 8001764:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001766:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <MX_USART1_UART_Init+0x5c>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 800176c:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <MX_USART1_UART_Init+0x5c>)
 800176e:	2280      	movs	r2, #128	; 0x80
 8001770:	0192      	lsls	r2, r2, #6
 8001772:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001774:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <MX_USART1_UART_Init+0x5c>)
 8001776:	2200      	movs	r2, #0
 8001778:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800177a:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <MX_USART1_UART_Init+0x5c>)
 800177c:	220c      	movs	r2, #12
 800177e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001780:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <MX_USART1_UART_Init+0x5c>)
 8001782:	2200      	movs	r2, #0
 8001784:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001786:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <MX_USART1_UART_Init+0x5c>)
 8001788:	2200      	movs	r2, #0
 800178a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <MX_USART1_UART_Init+0x5c>)
 800178e:	2200      	movs	r2, #0
 8001790:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001792:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <MX_USART1_UART_Init+0x5c>)
 8001794:	2200      	movs	r2, #0
 8001796:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <MX_USART1_UART_Init+0x5c>)
 800179a:	0018      	movs	r0, r3
 800179c:	f001 fe28 	bl	80033f0 <HAL_UART_Init>
 80017a0:	1e03      	subs	r3, r0, #0
 80017a2:	d001      	beq.n	80017a8 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 80017a4:	f000 f8e4 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017a8:	46c0      	nop			; (mov r8, r8)
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	2000035c 	.word	0x2000035c
 80017b4:	40013800 	.word	0x40013800

080017b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017bc:	4b14      	ldr	r3, [pc, #80]	; (8001810 <MX_USART2_UART_Init+0x58>)
 80017be:	4a15      	ldr	r2, [pc, #84]	; (8001814 <MX_USART2_UART_Init+0x5c>)
 80017c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <MX_USART2_UART_Init+0x58>)
 80017c4:	2296      	movs	r2, #150	; 0x96
 80017c6:	0212      	lsls	r2, r2, #8
 80017c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <MX_USART2_UART_Init+0x58>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017d0:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <MX_USART2_UART_Init+0x58>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <MX_USART2_UART_Init+0x58>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <MX_USART2_UART_Init+0x58>)
 80017de:	220c      	movs	r2, #12
 80017e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <MX_USART2_UART_Init+0x58>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <MX_USART2_UART_Init+0x58>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ee:	4b08      	ldr	r3, [pc, #32]	; (8001810 <MX_USART2_UART_Init+0x58>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <MX_USART2_UART_Init+0x58>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017fa:	4b05      	ldr	r3, [pc, #20]	; (8001810 <MX_USART2_UART_Init+0x58>)
 80017fc:	0018      	movs	r0, r3
 80017fe:	f001 fdf7 	bl	80033f0 <HAL_UART_Init>
 8001802:	1e03      	subs	r3, r0, #0
 8001804:	d001      	beq.n	800180a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001806:	f000 f8b3 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	200003dc 	.word	0x200003dc
 8001814:	40004400 	.word	0x40004400

08001818 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <MX_DMA_Init+0x48>)
 8001820:	695a      	ldr	r2, [r3, #20]
 8001822:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <MX_DMA_Init+0x48>)
 8001824:	2101      	movs	r1, #1
 8001826:	430a      	orrs	r2, r1
 8001828:	615a      	str	r2, [r3, #20]
 800182a:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <MX_DMA_Init+0x48>)
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	2201      	movs	r2, #1
 8001830:	4013      	ands	r3, r2
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	2100      	movs	r1, #0
 800183a:	200a      	movs	r0, #10
 800183c:	f000 fbea 	bl	8002014 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001840:	200a      	movs	r0, #10
 8001842:	f000 fbfc 	bl	800203e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2100      	movs	r1, #0
 800184a:	200b      	movs	r0, #11
 800184c:	f000 fbe2 	bl	8002014 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8001850:	200b      	movs	r0, #11
 8001852:	f000 fbf4 	bl	800203e <HAL_NVIC_EnableIRQ>

}
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	46bd      	mov	sp, r7
 800185a:	b002      	add	sp, #8
 800185c:	bd80      	pop	{r7, pc}
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	40021000 	.word	0x40021000

08001864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186a:	240c      	movs	r4, #12
 800186c:	193b      	adds	r3, r7, r4
 800186e:	0018      	movs	r0, r3
 8001870:	2314      	movs	r3, #20
 8001872:	001a      	movs	r2, r3
 8001874:	2100      	movs	r1, #0
 8001876:	f002 fbd5 	bl	8004024 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800187a:	4b3a      	ldr	r3, [pc, #232]	; (8001964 <MX_GPIO_Init+0x100>)
 800187c:	695a      	ldr	r2, [r3, #20]
 800187e:	4b39      	ldr	r3, [pc, #228]	; (8001964 <MX_GPIO_Init+0x100>)
 8001880:	2180      	movs	r1, #128	; 0x80
 8001882:	0309      	lsls	r1, r1, #12
 8001884:	430a      	orrs	r2, r1
 8001886:	615a      	str	r2, [r3, #20]
 8001888:	4b36      	ldr	r3, [pc, #216]	; (8001964 <MX_GPIO_Init+0x100>)
 800188a:	695a      	ldr	r2, [r3, #20]
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	031b      	lsls	r3, r3, #12
 8001890:	4013      	ands	r3, r2
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001896:	4b33      	ldr	r3, [pc, #204]	; (8001964 <MX_GPIO_Init+0x100>)
 8001898:	695a      	ldr	r2, [r3, #20]
 800189a:	4b32      	ldr	r3, [pc, #200]	; (8001964 <MX_GPIO_Init+0x100>)
 800189c:	2180      	movs	r1, #128	; 0x80
 800189e:	03c9      	lsls	r1, r1, #15
 80018a0:	430a      	orrs	r2, r1
 80018a2:	615a      	str	r2, [r3, #20]
 80018a4:	4b2f      	ldr	r3, [pc, #188]	; (8001964 <MX_GPIO_Init+0x100>)
 80018a6:	695a      	ldr	r2, [r3, #20]
 80018a8:	2380      	movs	r3, #128	; 0x80
 80018aa:	03db      	lsls	r3, r3, #15
 80018ac:	4013      	ands	r3, r2
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	4b2c      	ldr	r3, [pc, #176]	; (8001964 <MX_GPIO_Init+0x100>)
 80018b4:	695a      	ldr	r2, [r3, #20]
 80018b6:	4b2b      	ldr	r3, [pc, #172]	; (8001964 <MX_GPIO_Init+0x100>)
 80018b8:	2180      	movs	r1, #128	; 0x80
 80018ba:	0289      	lsls	r1, r1, #10
 80018bc:	430a      	orrs	r2, r1
 80018be:	615a      	str	r2, [r3, #20]
 80018c0:	4b28      	ldr	r3, [pc, #160]	; (8001964 <MX_GPIO_Init+0x100>)
 80018c2:	695a      	ldr	r2, [r3, #20]
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	029b      	lsls	r3, r3, #10
 80018c8:	4013      	ands	r3, r2
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 80018ce:	2390      	movs	r3, #144	; 0x90
 80018d0:	0059      	lsls	r1, r3, #1
 80018d2:	2390      	movs	r3, #144	; 0x90
 80018d4:	05db      	lsls	r3, r3, #23
 80018d6:	2200      	movs	r2, #0
 80018d8:	0018      	movs	r0, r3
 80018da:	f001 f82f 	bl	800293c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80018de:	4b22      	ldr	r3, [pc, #136]	; (8001968 <MX_GPIO_Init+0x104>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	2180      	movs	r1, #128	; 0x80
 80018e4:	0018      	movs	r0, r3
 80018e6:	f001 f829 	bl	800293c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018ea:	193b      	adds	r3, r7, r4
 80018ec:	2280      	movs	r2, #128	; 0x80
 80018ee:	0192      	lsls	r2, r2, #6
 80018f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018f2:	193b      	adds	r3, r7, r4
 80018f4:	4a1d      	ldr	r2, [pc, #116]	; (800196c <MX_GPIO_Init+0x108>)
 80018f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	193b      	adds	r3, r7, r4
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018fe:	193b      	adds	r3, r7, r4
 8001900:	4a19      	ldr	r2, [pc, #100]	; (8001968 <MX_GPIO_Init+0x104>)
 8001902:	0019      	movs	r1, r3
 8001904:	0010      	movs	r0, r2
 8001906:	f000 fddb 	bl	80024c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 800190a:	0021      	movs	r1, r4
 800190c:	187b      	adds	r3, r7, r1
 800190e:	2290      	movs	r2, #144	; 0x90
 8001910:	0052      	lsls	r2, r2, #1
 8001912:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001914:	187b      	adds	r3, r7, r1
 8001916:	2201      	movs	r2, #1
 8001918:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	187b      	adds	r3, r7, r1
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	187b      	adds	r3, r7, r1
 8001922:	2200      	movs	r2, #0
 8001924:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001926:	000c      	movs	r4, r1
 8001928:	187a      	adds	r2, r7, r1
 800192a:	2390      	movs	r3, #144	; 0x90
 800192c:	05db      	lsls	r3, r3, #23
 800192e:	0011      	movs	r1, r2
 8001930:	0018      	movs	r0, r3
 8001932:	f000 fdc5 	bl	80024c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001936:	0021      	movs	r1, r4
 8001938:	187b      	adds	r3, r7, r1
 800193a:	2280      	movs	r2, #128	; 0x80
 800193c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193e:	187b      	adds	r3, r7, r1
 8001940:	2201      	movs	r2, #1
 8001942:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	187b      	adds	r3, r7, r1
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	187b      	adds	r3, r7, r1
 800194c:	2200      	movs	r2, #0
 800194e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001950:	187b      	adds	r3, r7, r1
 8001952:	4a05      	ldr	r2, [pc, #20]	; (8001968 <MX_GPIO_Init+0x104>)
 8001954:	0019      	movs	r1, r3
 8001956:	0010      	movs	r0, r2
 8001958:	f000 fdb2 	bl	80024c0 <HAL_GPIO_Init>

}
 800195c:	46c0      	nop			; (mov r8, r8)
 800195e:	46bd      	mov	sp, r7
 8001960:	b009      	add	sp, #36	; 0x24
 8001962:	bd90      	pop	{r4, r7, pc}
 8001964:	40021000 	.word	0x40021000
 8001968:	48000800 	.word	0x48000800
 800196c:	10210000 	.word	0x10210000

08001970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001974:	46c0      	nop			; (mov r8, r8)
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001982:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <HAL_MspInit+0x44>)
 8001984:	699a      	ldr	r2, [r3, #24]
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <HAL_MspInit+0x44>)
 8001988:	2101      	movs	r1, #1
 800198a:	430a      	orrs	r2, r1
 800198c:	619a      	str	r2, [r3, #24]
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <HAL_MspInit+0x44>)
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	2201      	movs	r2, #1
 8001994:	4013      	ands	r3, r2
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <HAL_MspInit+0x44>)
 800199c:	69da      	ldr	r2, [r3, #28]
 800199e:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <HAL_MspInit+0x44>)
 80019a0:	2180      	movs	r1, #128	; 0x80
 80019a2:	0549      	lsls	r1, r1, #21
 80019a4:	430a      	orrs	r2, r1
 80019a6:	61da      	str	r2, [r3, #28]
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <HAL_MspInit+0x44>)
 80019aa:	69da      	ldr	r2, [r3, #28]
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	055b      	lsls	r3, r3, #21
 80019b0:	4013      	ands	r3, r2
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	46bd      	mov	sp, r7
 80019ba:	b002      	add	sp, #8
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	40021000 	.word	0x40021000

080019c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08c      	sub	sp, #48	; 0x30
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	231c      	movs	r3, #28
 80019ce:	18fb      	adds	r3, r7, r3
 80019d0:	0018      	movs	r0, r3
 80019d2:	2314      	movs	r3, #20
 80019d4:	001a      	movs	r2, r3
 80019d6:	2100      	movs	r1, #0
 80019d8:	f002 fb24 	bl	8004024 <memset>
  if(huart->Instance==USART1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a5f      	ldr	r2, [pc, #380]	; (8001b60 <HAL_UART_MspInit+0x19c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d15a      	bne.n	8001a9c <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019e6:	4b5f      	ldr	r3, [pc, #380]	; (8001b64 <HAL_UART_MspInit+0x1a0>)
 80019e8:	699a      	ldr	r2, [r3, #24]
 80019ea:	4b5e      	ldr	r3, [pc, #376]	; (8001b64 <HAL_UART_MspInit+0x1a0>)
 80019ec:	2180      	movs	r1, #128	; 0x80
 80019ee:	01c9      	lsls	r1, r1, #7
 80019f0:	430a      	orrs	r2, r1
 80019f2:	619a      	str	r2, [r3, #24]
 80019f4:	4b5b      	ldr	r3, [pc, #364]	; (8001b64 <HAL_UART_MspInit+0x1a0>)
 80019f6:	699a      	ldr	r2, [r3, #24]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	01db      	lsls	r3, r3, #7
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
 8001a00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a02:	4b58      	ldr	r3, [pc, #352]	; (8001b64 <HAL_UART_MspInit+0x1a0>)
 8001a04:	695a      	ldr	r2, [r3, #20]
 8001a06:	4b57      	ldr	r3, [pc, #348]	; (8001b64 <HAL_UART_MspInit+0x1a0>)
 8001a08:	2180      	movs	r1, #128	; 0x80
 8001a0a:	0289      	lsls	r1, r1, #10
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	615a      	str	r2, [r3, #20]
 8001a10:	4b54      	ldr	r3, [pc, #336]	; (8001b64 <HAL_UART_MspInit+0x1a0>)
 8001a12:	695a      	ldr	r2, [r3, #20]
 8001a14:	2380      	movs	r3, #128	; 0x80
 8001a16:	029b      	lsls	r3, r3, #10
 8001a18:	4013      	ands	r3, r2
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a1e:	211c      	movs	r1, #28
 8001a20:	187b      	adds	r3, r7, r1
 8001a22:	22c0      	movs	r2, #192	; 0xc0
 8001a24:	00d2      	lsls	r2, r2, #3
 8001a26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a28:	187b      	adds	r3, r7, r1
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	187b      	adds	r3, r7, r1
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a34:	187b      	adds	r3, r7, r1
 8001a36:	2203      	movs	r2, #3
 8001a38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001a3a:	187b      	adds	r3, r7, r1
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a40:	187a      	adds	r2, r7, r1
 8001a42:	2390      	movs	r3, #144	; 0x90
 8001a44:	05db      	lsls	r3, r3, #23
 8001a46:	0011      	movs	r1, r2
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f000 fd39 	bl	80024c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8001a4e:	4b46      	ldr	r3, [pc, #280]	; (8001b68 <HAL_UART_MspInit+0x1a4>)
 8001a50:	4a46      	ldr	r2, [pc, #280]	; (8001b6c <HAL_UART_MspInit+0x1a8>)
 8001a52:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a54:	4b44      	ldr	r3, [pc, #272]	; (8001b68 <HAL_UART_MspInit+0x1a4>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a5a:	4b43      	ldr	r3, [pc, #268]	; (8001b68 <HAL_UART_MspInit+0x1a4>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a60:	4b41      	ldr	r3, [pc, #260]	; (8001b68 <HAL_UART_MspInit+0x1a4>)
 8001a62:	2280      	movs	r2, #128	; 0x80
 8001a64:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a66:	4b40      	ldr	r3, [pc, #256]	; (8001b68 <HAL_UART_MspInit+0x1a4>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a6c:	4b3e      	ldr	r3, [pc, #248]	; (8001b68 <HAL_UART_MspInit+0x1a4>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001a72:	4b3d      	ldr	r3, [pc, #244]	; (8001b68 <HAL_UART_MspInit+0x1a4>)
 8001a74:	2220      	movs	r2, #32
 8001a76:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a78:	4b3b      	ldr	r3, [pc, #236]	; (8001b68 <HAL_UART_MspInit+0x1a4>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001a7e:	4b3a      	ldr	r3, [pc, #232]	; (8001b68 <HAL_UART_MspInit+0x1a4>)
 8001a80:	0018      	movs	r0, r3
 8001a82:	f000 faf9 	bl	8002078 <HAL_DMA_Init>
 8001a86:	1e03      	subs	r3, r0, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001a8a:	f7ff ff71 	bl	8001970 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a35      	ldr	r2, [pc, #212]	; (8001b68 <HAL_UART_MspInit+0x1a4>)
 8001a92:	66da      	str	r2, [r3, #108]	; 0x6c
 8001a94:	4b34      	ldr	r3, [pc, #208]	; (8001b68 <HAL_UART_MspInit+0x1a4>)
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a9a:	e05d      	b.n	8001b58 <HAL_UART_MspInit+0x194>
  else if(huart->Instance==USART2)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a33      	ldr	r2, [pc, #204]	; (8001b70 <HAL_UART_MspInit+0x1ac>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d158      	bne.n	8001b58 <HAL_UART_MspInit+0x194>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aa6:	4b2f      	ldr	r3, [pc, #188]	; (8001b64 <HAL_UART_MspInit+0x1a0>)
 8001aa8:	69da      	ldr	r2, [r3, #28]
 8001aaa:	4b2e      	ldr	r3, [pc, #184]	; (8001b64 <HAL_UART_MspInit+0x1a0>)
 8001aac:	2180      	movs	r1, #128	; 0x80
 8001aae:	0289      	lsls	r1, r1, #10
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	61da      	str	r2, [r3, #28]
 8001ab4:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <HAL_UART_MspInit+0x1a0>)
 8001ab6:	69da      	ldr	r2, [r3, #28]
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	029b      	lsls	r3, r3, #10
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	4b28      	ldr	r3, [pc, #160]	; (8001b64 <HAL_UART_MspInit+0x1a0>)
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	4b27      	ldr	r3, [pc, #156]	; (8001b64 <HAL_UART_MspInit+0x1a0>)
 8001ac8:	2180      	movs	r1, #128	; 0x80
 8001aca:	0289      	lsls	r1, r1, #10
 8001acc:	430a      	orrs	r2, r1
 8001ace:	615a      	str	r2, [r3, #20]
 8001ad0:	4b24      	ldr	r3, [pc, #144]	; (8001b64 <HAL_UART_MspInit+0x1a0>)
 8001ad2:	695a      	ldr	r2, [r3, #20]
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	029b      	lsls	r3, r3, #10
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ade:	211c      	movs	r1, #28
 8001ae0:	187b      	adds	r3, r7, r1
 8001ae2:	220c      	movs	r2, #12
 8001ae4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	187b      	adds	r3, r7, r1
 8001ae8:	2202      	movs	r2, #2
 8001aea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	187b      	adds	r3, r7, r1
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	187b      	adds	r3, r7, r1
 8001af4:	2200      	movs	r2, #0
 8001af6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001af8:	187b      	adds	r3, r7, r1
 8001afa:	2201      	movs	r2, #1
 8001afc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afe:	187a      	adds	r2, r7, r1
 8001b00:	2390      	movs	r3, #144	; 0x90
 8001b02:	05db      	lsls	r3, r3, #23
 8001b04:	0011      	movs	r1, r2
 8001b06:	0018      	movs	r0, r3
 8001b08:	f000 fcda 	bl	80024c0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8001b0c:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <HAL_UART_MspInit+0x1b0>)
 8001b0e:	4a1a      	ldr	r2, [pc, #104]	; (8001b78 <HAL_UART_MspInit+0x1b4>)
 8001b10:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b12:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <HAL_UART_MspInit+0x1b0>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b18:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <HAL_UART_MspInit+0x1b0>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b1e:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <HAL_UART_MspInit+0x1b0>)
 8001b20:	2280      	movs	r2, #128	; 0x80
 8001b22:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b24:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <HAL_UART_MspInit+0x1b0>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b2a:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_UART_MspInit+0x1b0>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001b30:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <HAL_UART_MspInit+0x1b0>)
 8001b32:	2220      	movs	r2, #32
 8001b34:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b36:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <HAL_UART_MspInit+0x1b0>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b3c:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <HAL_UART_MspInit+0x1b0>)
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f000 fa9a 	bl	8002078 <HAL_DMA_Init>
 8001b44:	1e03      	subs	r3, r0, #0
 8001b46:	d001      	beq.n	8001b4c <HAL_UART_MspInit+0x188>
      Error_Handler();
 8001b48:	f7ff ff12 	bl	8001970 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a09      	ldr	r2, [pc, #36]	; (8001b74 <HAL_UART_MspInit+0x1b0>)
 8001b50:	66da      	str	r2, [r3, #108]	; 0x6c
 8001b52:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <HAL_UART_MspInit+0x1b0>)
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b58:	46c0      	nop			; (mov r8, r8)
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	b00c      	add	sp, #48	; 0x30
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40013800 	.word	0x40013800
 8001b64:	40021000 	.word	0x40021000
 8001b68:	20000318 	.word	0x20000318
 8001b6c:	40020030 	.word	0x40020030
 8001b70:	40004400 	.word	0x40004400
 8001b74:	200002d4 	.word	0x200002d4
 8001b78:	40020058 	.word	0x40020058

08001b7c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a18      	ldr	r2, [pc, #96]	; (8001bec <HAL_UART_MspDeInit+0x70>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d113      	bne.n	8001bb6 <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001b8e:	4b18      	ldr	r3, [pc, #96]	; (8001bf0 <HAL_UART_MspDeInit+0x74>)
 8001b90:	699a      	ldr	r2, [r3, #24]
 8001b92:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <HAL_UART_MspDeInit+0x74>)
 8001b94:	4917      	ldr	r1, [pc, #92]	; (8001bf4 <HAL_UART_MspDeInit+0x78>)
 8001b96:	400a      	ands	r2, r1
 8001b98:	619a      	str	r2, [r3, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8001b9a:	23c0      	movs	r3, #192	; 0xc0
 8001b9c:	00da      	lsls	r2, r3, #3
 8001b9e:	2390      	movs	r3, #144	; 0x90
 8001ba0:	05db      	lsls	r3, r3, #23
 8001ba2:	0011      	movs	r1, r2
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f000 fdfb 	bl	80027a0 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bae:	0018      	movs	r0, r3
 8001bb0:	f000 faaa 	bl	8002108 <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8001bb4:	e015      	b.n	8001be2 <HAL_UART_MspDeInit+0x66>
  else if(huart->Instance==USART2)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a0f      	ldr	r2, [pc, #60]	; (8001bf8 <HAL_UART_MspDeInit+0x7c>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d110      	bne.n	8001be2 <HAL_UART_MspDeInit+0x66>
    __HAL_RCC_USART2_CLK_DISABLE();
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_UART_MspDeInit+0x74>)
 8001bc2:	69da      	ldr	r2, [r3, #28]
 8001bc4:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <HAL_UART_MspDeInit+0x74>)
 8001bc6:	490d      	ldr	r1, [pc, #52]	; (8001bfc <HAL_UART_MspDeInit+0x80>)
 8001bc8:	400a      	ands	r2, r1
 8001bca:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 8001bcc:	2390      	movs	r3, #144	; 0x90
 8001bce:	05db      	lsls	r3, r3, #23
 8001bd0:	210c      	movs	r1, #12
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	f000 fde4 	bl	80027a0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f000 fa93 	bl	8002108 <HAL_DMA_DeInit>
}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	46bd      	mov	sp, r7
 8001be6:	b002      	add	sp, #8
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	40013800 	.word	0x40013800
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	ffffbfff 	.word	0xffffbfff
 8001bf8:	40004400 	.word	0x40004400
 8001bfc:	fffdffff 	.word	0xfffdffff

08001c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c04:	46c0      	nop			; (mov r8, r8)
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c0e:	e7fe      	b.n	8001c0e <HardFault_Handler+0x4>

08001c10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c14:	46c0      	nop			; (mov r8, r8)
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c28:	f000 f90a 	bl	8001e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c2c:	46c0      	nop			; (mov r8, r8)
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001c38:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f000 fb4b 	bl	80022d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001c40:	46c0      	nop			; (mov r8, r8)
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	20000318 	.word	0x20000318

08001c4c <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001c50:	4b03      	ldr	r3, [pc, #12]	; (8001c60 <DMA1_Channel4_5_IRQHandler+0x14>)
 8001c52:	0018      	movs	r0, r3
 8001c54:	f000 fb3f 	bl	80022d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8001c58:	46c0      	nop			; (mov r8, r8)
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	200002d4 	.word	0x200002d4

08001c64 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	e00a      	b.n	8001c8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c76:	e000      	b.n	8001c7a <_read+0x16>
 8001c78:	bf00      	nop
 8001c7a:	0001      	movs	r1, r0
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	60ba      	str	r2, [r7, #8]
 8001c82:	b2ca      	uxtb	r2, r1
 8001c84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	dbf0      	blt.n	8001c76 <_read+0x12>
	}

return len;
 8001c94:	687b      	ldr	r3, [r7, #4]
}
 8001c96:	0018      	movs	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	b006      	add	sp, #24
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <_close>:
	}
	return len;
}

int _close(int file)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	425b      	negs	r3, r3
}
 8001caa:	0018      	movs	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	b002      	add	sp, #8
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	2280      	movs	r2, #128	; 0x80
 8001cc0:	0192      	lsls	r2, r2, #6
 8001cc2:	605a      	str	r2, [r3, #4]
	return 0;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	b002      	add	sp, #8
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <_isatty>:

int _isatty(int file)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
	return 1;
 8001cd6:	2301      	movs	r3, #1
}
 8001cd8:	0018      	movs	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b002      	add	sp, #8
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
	return 0;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	0018      	movs	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	b004      	add	sp, #16
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d00:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <_sbrk+0x50>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d102      	bne.n	8001d0e <_sbrk+0x16>
		heap_end = &end;
 8001d08:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <_sbrk+0x50>)
 8001d0a:	4a10      	ldr	r2, [pc, #64]	; (8001d4c <_sbrk+0x54>)
 8001d0c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <_sbrk+0x50>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <_sbrk+0x50>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	18d3      	adds	r3, r2, r3
 8001d1c:	466a      	mov	r2, sp
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d907      	bls.n	8001d32 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001d22:	f002 f955 	bl	8003fd0 <__errno>
 8001d26:	0003      	movs	r3, r0
 8001d28:	220c      	movs	r2, #12
 8001d2a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	425b      	negs	r3, r3
 8001d30:	e006      	b.n	8001d40 <_sbrk+0x48>
	}

	heap_end += incr;
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <_sbrk+0x50>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	18d2      	adds	r2, r2, r3
 8001d3a:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <_sbrk+0x50>)
 8001d3c:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
}
 8001d40:	0018      	movs	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b004      	add	sp, #16
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	200002c8 	.word	0x200002c8
 8001d4c:	20000468 	.word	0x20000468

08001d50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001d54:	46c0      	nop			; (mov r8, r8)
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d5c:	480d      	ldr	r0, [pc, #52]	; (8001d94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d5e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d60:	480d      	ldr	r0, [pc, #52]	; (8001d98 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d62:	490e      	ldr	r1, [pc, #56]	; (8001d9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d64:	4a0e      	ldr	r2, [pc, #56]	; (8001da0 <LoopForever+0xe>)
  movs r3, #0
 8001d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d68:	e002      	b.n	8001d70 <LoopCopyDataInit>

08001d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d6e:	3304      	adds	r3, #4

08001d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d74:	d3f9      	bcc.n	8001d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d76:	4a0b      	ldr	r2, [pc, #44]	; (8001da4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d78:	4c0b      	ldr	r4, [pc, #44]	; (8001da8 <LoopForever+0x16>)
  movs r3, #0
 8001d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d7c:	e001      	b.n	8001d82 <LoopFillZerobss>

08001d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d80:	3204      	adds	r2, #4

08001d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d84:	d3fb      	bcc.n	8001d7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001d86:	f7ff ffe3 	bl	8001d50 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001d8a:	f002 f927 	bl	8003fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d8e:	f7ff fbdb 	bl	8001548 <main>

08001d92 <LoopForever>:

LoopForever:
    b LoopForever
 8001d92:	e7fe      	b.n	8001d92 <LoopForever>
  ldr   r0, =_estack
 8001d94:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d9c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001da0:	08005b5c 	.word	0x08005b5c
  ldr r2, =_sbss
 8001da4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001da8:	20000464 	.word	0x20000464

08001dac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dac:	e7fe      	b.n	8001dac <ADC1_IRQHandler>
	...

08001db0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001db4:	4b07      	ldr	r3, [pc, #28]	; (8001dd4 <HAL_Init+0x24>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_Init+0x24>)
 8001dba:	2110      	movs	r1, #16
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f000 f809 	bl	8001dd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dc6:	f7ff fdd9 	bl	800197c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	0018      	movs	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	40022000 	.word	0x40022000

08001dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001de0:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <HAL_InitTick+0x5c>)
 8001de2:	681c      	ldr	r4, [r3, #0]
 8001de4:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <HAL_InitTick+0x60>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	0019      	movs	r1, r3
 8001dea:	23fa      	movs	r3, #250	; 0xfa
 8001dec:	0098      	lsls	r0, r3, #2
 8001dee:	f7fe f993 	bl	8000118 <__udivsi3>
 8001df2:	0003      	movs	r3, r0
 8001df4:	0019      	movs	r1, r3
 8001df6:	0020      	movs	r0, r4
 8001df8:	f7fe f98e 	bl	8000118 <__udivsi3>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	0018      	movs	r0, r3
 8001e00:	f000 f92d 	bl	800205e <HAL_SYSTICK_Config>
 8001e04:	1e03      	subs	r3, r0, #0
 8001e06:	d001      	beq.n	8001e0c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e00f      	b.n	8001e2c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b03      	cmp	r3, #3
 8001e10:	d80b      	bhi.n	8001e2a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	2301      	movs	r3, #1
 8001e16:	425b      	negs	r3, r3
 8001e18:	2200      	movs	r2, #0
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	f000 f8fa 	bl	8002014 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <HAL_InitTick+0x64>)
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
 8001e28:	e000      	b.n	8001e2c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
}
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	b003      	add	sp, #12
 8001e32:	bd90      	pop	{r4, r7, pc}
 8001e34:	20000004 	.word	0x20000004
 8001e38:	2000000c 	.word	0x2000000c
 8001e3c:	20000008 	.word	0x20000008

08001e40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <HAL_IncTick+0x1c>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	001a      	movs	r2, r3
 8001e4a:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_IncTick+0x20>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	18d2      	adds	r2, r2, r3
 8001e50:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <HAL_IncTick+0x20>)
 8001e52:	601a      	str	r2, [r3, #0]
}
 8001e54:	46c0      	nop			; (mov r8, r8)
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	2000000c 	.word	0x2000000c
 8001e60:	2000045c 	.word	0x2000045c

08001e64 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  return uwTick;
 8001e68:	4b02      	ldr	r3, [pc, #8]	; (8001e74 <HAL_GetTick+0x10>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
}
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	2000045c 	.word	0x2000045c

08001e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e80:	f7ff fff0 	bl	8001e64 <HAL_GetTick>
 8001e84:	0003      	movs	r3, r0
 8001e86:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	d005      	beq.n	8001e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e92:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <HAL_Delay+0x40>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	001a      	movs	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	189b      	adds	r3, r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	f7ff ffe0 	bl	8001e64 <HAL_GetTick>
 8001ea4:	0002      	movs	r2, r0
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d8f7      	bhi.n	8001ea0 <HAL_Delay+0x28>
  {
  }
}
 8001eb0:	46c0      	nop			; (mov r8, r8)
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	b004      	add	sp, #16
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	2000000c 	.word	0x2000000c

08001ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	0002      	movs	r2, r0
 8001ec4:	1dfb      	adds	r3, r7, #7
 8001ec6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ec8:	1dfb      	adds	r3, r7, #7
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b7f      	cmp	r3, #127	; 0x7f
 8001ece:	d809      	bhi.n	8001ee4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ed0:	1dfb      	adds	r3, r7, #7
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	001a      	movs	r2, r3
 8001ed6:	231f      	movs	r3, #31
 8001ed8:	401a      	ands	r2, r3
 8001eda:	4b04      	ldr	r3, [pc, #16]	; (8001eec <__NVIC_EnableIRQ+0x30>)
 8001edc:	2101      	movs	r1, #1
 8001ede:	4091      	lsls	r1, r2
 8001ee0:	000a      	movs	r2, r1
 8001ee2:	601a      	str	r2, [r3, #0]
  }
}
 8001ee4:	46c0      	nop			; (mov r8, r8)
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	b002      	add	sp, #8
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	e000e100 	.word	0xe000e100

08001ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef0:	b590      	push	{r4, r7, lr}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	0002      	movs	r2, r0
 8001ef8:	6039      	str	r1, [r7, #0]
 8001efa:	1dfb      	adds	r3, r7, #7
 8001efc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001efe:	1dfb      	adds	r3, r7, #7
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b7f      	cmp	r3, #127	; 0x7f
 8001f04:	d828      	bhi.n	8001f58 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f06:	4a2f      	ldr	r2, [pc, #188]	; (8001fc4 <__NVIC_SetPriority+0xd4>)
 8001f08:	1dfb      	adds	r3, r7, #7
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	b25b      	sxtb	r3, r3
 8001f0e:	089b      	lsrs	r3, r3, #2
 8001f10:	33c0      	adds	r3, #192	; 0xc0
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	589b      	ldr	r3, [r3, r2]
 8001f16:	1dfa      	adds	r2, r7, #7
 8001f18:	7812      	ldrb	r2, [r2, #0]
 8001f1a:	0011      	movs	r1, r2
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	400a      	ands	r2, r1
 8001f20:	00d2      	lsls	r2, r2, #3
 8001f22:	21ff      	movs	r1, #255	; 0xff
 8001f24:	4091      	lsls	r1, r2
 8001f26:	000a      	movs	r2, r1
 8001f28:	43d2      	mvns	r2, r2
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	019b      	lsls	r3, r3, #6
 8001f32:	22ff      	movs	r2, #255	; 0xff
 8001f34:	401a      	ands	r2, r3
 8001f36:	1dfb      	adds	r3, r7, #7
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	4003      	ands	r3, r0
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f44:	481f      	ldr	r0, [pc, #124]	; (8001fc4 <__NVIC_SetPriority+0xd4>)
 8001f46:	1dfb      	adds	r3, r7, #7
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	b25b      	sxtb	r3, r3
 8001f4c:	089b      	lsrs	r3, r3, #2
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	33c0      	adds	r3, #192	; 0xc0
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f56:	e031      	b.n	8001fbc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f58:	4a1b      	ldr	r2, [pc, #108]	; (8001fc8 <__NVIC_SetPriority+0xd8>)
 8001f5a:	1dfb      	adds	r3, r7, #7
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	0019      	movs	r1, r3
 8001f60:	230f      	movs	r3, #15
 8001f62:	400b      	ands	r3, r1
 8001f64:	3b08      	subs	r3, #8
 8001f66:	089b      	lsrs	r3, r3, #2
 8001f68:	3306      	adds	r3, #6
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	18d3      	adds	r3, r2, r3
 8001f6e:	3304      	adds	r3, #4
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	1dfa      	adds	r2, r7, #7
 8001f74:	7812      	ldrb	r2, [r2, #0]
 8001f76:	0011      	movs	r1, r2
 8001f78:	2203      	movs	r2, #3
 8001f7a:	400a      	ands	r2, r1
 8001f7c:	00d2      	lsls	r2, r2, #3
 8001f7e:	21ff      	movs	r1, #255	; 0xff
 8001f80:	4091      	lsls	r1, r2
 8001f82:	000a      	movs	r2, r1
 8001f84:	43d2      	mvns	r2, r2
 8001f86:	401a      	ands	r2, r3
 8001f88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	019b      	lsls	r3, r3, #6
 8001f8e:	22ff      	movs	r2, #255	; 0xff
 8001f90:	401a      	ands	r2, r3
 8001f92:	1dfb      	adds	r3, r7, #7
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	0018      	movs	r0, r3
 8001f98:	2303      	movs	r3, #3
 8001f9a:	4003      	ands	r3, r0
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fa0:	4809      	ldr	r0, [pc, #36]	; (8001fc8 <__NVIC_SetPriority+0xd8>)
 8001fa2:	1dfb      	adds	r3, r7, #7
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	001c      	movs	r4, r3
 8001fa8:	230f      	movs	r3, #15
 8001faa:	4023      	ands	r3, r4
 8001fac:	3b08      	subs	r3, #8
 8001fae:	089b      	lsrs	r3, r3, #2
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	3306      	adds	r3, #6
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	18c3      	adds	r3, r0, r3
 8001fb8:	3304      	adds	r3, #4
 8001fba:	601a      	str	r2, [r3, #0]
}
 8001fbc:	46c0      	nop			; (mov r8, r8)
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b003      	add	sp, #12
 8001fc2:	bd90      	pop	{r4, r7, pc}
 8001fc4:	e000e100 	.word	0xe000e100
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	4a0c      	ldr	r2, [pc, #48]	; (800200c <SysTick_Config+0x40>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d901      	bls.n	8001fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e010      	b.n	8002004 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <SysTick_Config+0x44>)
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	3a01      	subs	r2, #1
 8001fe8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fea:	2301      	movs	r3, #1
 8001fec:	425b      	negs	r3, r3
 8001fee:	2103      	movs	r1, #3
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f7ff ff7d 	bl	8001ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff6:	4b06      	ldr	r3, [pc, #24]	; (8002010 <SysTick_Config+0x44>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ffc:	4b04      	ldr	r3, [pc, #16]	; (8002010 <SysTick_Config+0x44>)
 8001ffe:	2207      	movs	r2, #7
 8002000:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002002:	2300      	movs	r3, #0
}
 8002004:	0018      	movs	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	b002      	add	sp, #8
 800200a:	bd80      	pop	{r7, pc}
 800200c:	00ffffff 	.word	0x00ffffff
 8002010:	e000e010 	.word	0xe000e010

08002014 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	210f      	movs	r1, #15
 8002020:	187b      	adds	r3, r7, r1
 8002022:	1c02      	adds	r2, r0, #0
 8002024:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	187b      	adds	r3, r7, r1
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	b25b      	sxtb	r3, r3
 800202e:	0011      	movs	r1, r2
 8002030:	0018      	movs	r0, r3
 8002032:	f7ff ff5d 	bl	8001ef0 <__NVIC_SetPriority>
}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	46bd      	mov	sp, r7
 800203a:	b004      	add	sp, #16
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	0002      	movs	r2, r0
 8002046:	1dfb      	adds	r3, r7, #7
 8002048:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800204a:	1dfb      	adds	r3, r7, #7
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	b25b      	sxtb	r3, r3
 8002050:	0018      	movs	r0, r3
 8002052:	f7ff ff33 	bl	8001ebc <__NVIC_EnableIRQ>
}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	46bd      	mov	sp, r7
 800205a:	b002      	add	sp, #8
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	0018      	movs	r0, r3
 800206a:	f7ff ffaf 	bl	8001fcc <SysTick_Config>
 800206e:	0003      	movs	r3, r0
}
 8002070:	0018      	movs	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	b002      	add	sp, #8
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e036      	b.n	80020fc <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2221      	movs	r2, #33	; 0x21
 8002092:	2102      	movs	r1, #2
 8002094:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4a18      	ldr	r2, [pc, #96]	; (8002104 <HAL_DMA_Init+0x8c>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80020ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	0018      	movs	r0, r3
 80020e0:	f000 f9d2 	bl	8002488 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2221      	movs	r2, #33	; 0x21
 80020ee:	2101      	movs	r1, #1
 80020f0:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2220      	movs	r2, #32
 80020f6:	2100      	movs	r1, #0
 80020f8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}  
 80020fc:	0018      	movs	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	b004      	add	sp, #16
 8002102:	bd80      	pop	{r7, pc}
 8002104:	ffffc00f 	.word	0xffffc00f

08002108 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e03b      	b.n	8002192 <HAL_DMA_DeInit+0x8a>
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2101      	movs	r1, #1
 8002126:	438a      	bics	r2, r1
 8002128:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2200      	movs	r2, #0
 8002138:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
  
  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2200      	movs	r2, #0
 8002148:	60da      	str	r2, [r3, #12]

/* Get DMA Base Address */  
  DMA_CalcBaseAndBitshift(hdma);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	0018      	movs	r0, r3
 800214e:	f000 f99b 	bl	8002488 <DMA_CalcBaseAndBitshift>

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215a:	2101      	movs	r1, #1
 800215c:	4091      	lsls	r1, r2
 800215e:	000a      	movs	r2, r1
 8002160:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2221      	movs	r2, #33	; 0x21
 8002184:	2100      	movs	r1, #0
 8002186:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2220      	movs	r2, #32
 800218c:	2100      	movs	r1, #0
 800218e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	0018      	movs	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	b002      	add	sp, #8
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	60f8      	str	r0, [r7, #12]
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
 80021a6:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80021a8:	2317      	movs	r3, #23
 80021aa:	18fb      	adds	r3, r7, r3
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2220      	movs	r2, #32
 80021b4:	5c9b      	ldrb	r3, [r3, r2]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d101      	bne.n	80021be <HAL_DMA_Start_IT+0x24>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e04f      	b.n	800225e <HAL_DMA_Start_IT+0xc4>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2220      	movs	r2, #32
 80021c2:	2101      	movs	r1, #1
 80021c4:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2221      	movs	r2, #33	; 0x21
 80021ca:	5c9b      	ldrb	r3, [r3, r2]
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d13a      	bne.n	8002248 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2221      	movs	r2, #33	; 0x21
 80021d6:	2102      	movs	r1, #2
 80021d8:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2101      	movs	r1, #1
 80021ec:	438a      	bics	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 f919 	bl	800242e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002200:	2b00      	cmp	r3, #0
 8002202:	d008      	beq.n	8002216 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	210e      	movs	r1, #14
 8002210:	430a      	orrs	r2, r1
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	e00f      	b.n	8002236 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	210a      	movs	r1, #10
 8002222:	430a      	orrs	r2, r1
 8002224:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2104      	movs	r1, #4
 8002232:	438a      	bics	r2, r1
 8002234:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2101      	movs	r1, #1
 8002242:	430a      	orrs	r2, r1
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	e007      	b.n	8002258 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2220      	movs	r2, #32
 800224c:	2100      	movs	r1, #0
 800224e:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002250:	2317      	movs	r3, #23
 8002252:	18fb      	adds	r3, r7, r3
 8002254:	2202      	movs	r2, #2
 8002256:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002258:	2317      	movs	r3, #23
 800225a:	18fb      	adds	r3, r7, r3
 800225c:	781b      	ldrb	r3, [r3, #0]
} 
 800225e:	0018      	movs	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	b006      	add	sp, #24
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2221      	movs	r2, #33	; 0x21
 8002272:	5c9b      	ldrb	r3, [r3, r2]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d008      	beq.n	800228c <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2204      	movs	r2, #4
 800227e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2220      	movs	r2, #32
 8002284:	2100      	movs	r1, #0
 8002286:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e020      	b.n	80022ce <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	210e      	movs	r1, #14
 8002298:	438a      	bics	r2, r1
 800229a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2101      	movs	r1, #1
 80022a8:	438a      	bics	r2, r1
 80022aa:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b4:	2101      	movs	r1, #1
 80022b6:	4091      	lsls	r1, r2
 80022b8:	000a      	movs	r2, r1
 80022ba:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2221      	movs	r2, #33	; 0x21
 80022c0:	2101      	movs	r1, #1
 80022c2:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2220      	movs	r2, #32
 80022c8:	2100      	movs	r1, #0
 80022ca:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	0018      	movs	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	b002      	add	sp, #8
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b084      	sub	sp, #16
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	2204      	movs	r2, #4
 80022f4:	409a      	lsls	r2, r3
 80022f6:	0013      	movs	r3, r2
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	4013      	ands	r3, r2
 80022fc:	d024      	beq.n	8002348 <HAL_DMA_IRQHandler+0x72>
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2204      	movs	r2, #4
 8002302:	4013      	ands	r3, r2
 8002304:	d020      	beq.n	8002348 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2220      	movs	r2, #32
 800230e:	4013      	ands	r3, r2
 8002310:	d107      	bne.n	8002322 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2104      	movs	r1, #4
 800231e:	438a      	bics	r2, r1
 8002320:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232a:	2104      	movs	r1, #4
 800232c:	4091      	lsls	r1, r2
 800232e:	000a      	movs	r2, r1
 8002330:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002336:	2b00      	cmp	r3, #0
 8002338:	d100      	bne.n	800233c <HAL_DMA_IRQHandler+0x66>
 800233a:	e06a      	b.n	8002412 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	0010      	movs	r0, r2
 8002344:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002346:	e064      	b.n	8002412 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234c:	2202      	movs	r2, #2
 800234e:	409a      	lsls	r2, r3
 8002350:	0013      	movs	r3, r2
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	4013      	ands	r3, r2
 8002356:	d02b      	beq.n	80023b0 <HAL_DMA_IRQHandler+0xda>
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2202      	movs	r2, #2
 800235c:	4013      	ands	r3, r2
 800235e:	d027      	beq.n	80023b0 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2220      	movs	r2, #32
 8002368:	4013      	ands	r3, r2
 800236a:	d10b      	bne.n	8002384 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	210a      	movs	r1, #10
 8002378:	438a      	bics	r2, r1
 800237a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2221      	movs	r2, #33	; 0x21
 8002380:	2101      	movs	r1, #1
 8002382:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238c:	2102      	movs	r1, #2
 800238e:	4091      	lsls	r1, r2
 8002390:	000a      	movs	r2, r1
 8002392:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2220      	movs	r2, #32
 8002398:	2100      	movs	r1, #0
 800239a:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d036      	beq.n	8002412 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	0010      	movs	r0, r2
 80023ac:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80023ae:	e030      	b.n	8002412 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	2208      	movs	r2, #8
 80023b6:	409a      	lsls	r2, r3
 80023b8:	0013      	movs	r3, r2
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	4013      	ands	r3, r2
 80023be:	d028      	beq.n	8002412 <HAL_DMA_IRQHandler+0x13c>
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2208      	movs	r2, #8
 80023c4:	4013      	ands	r3, r2
 80023c6:	d024      	beq.n	8002412 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	210e      	movs	r1, #14
 80023d4:	438a      	bics	r2, r1
 80023d6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e0:	2101      	movs	r1, #1
 80023e2:	4091      	lsls	r1, r2
 80023e4:	000a      	movs	r2, r1
 80023e6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2221      	movs	r2, #33	; 0x21
 80023f2:	2101      	movs	r1, #1
 80023f4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2220      	movs	r2, #32
 80023fa:	2100      	movs	r1, #0
 80023fc:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	2b00      	cmp	r3, #0
 8002404:	d005      	beq.n	8002412 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	0010      	movs	r0, r2
 800240e:	4798      	blx	r3
    }
   }
}  
 8002410:	e7ff      	b.n	8002412 <HAL_DMA_IRQHandler+0x13c>
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	46bd      	mov	sp, r7
 8002416:	b004      	add	sp, #16
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8002426:	0018      	movs	r0, r3
 8002428:	46bd      	mov	sp, r7
 800242a:	b002      	add	sp, #8
 800242c:	bd80      	pop	{r7, pc}

0800242e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b084      	sub	sp, #16
 8002432:	af00      	add	r7, sp, #0
 8002434:	60f8      	str	r0, [r7, #12]
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
 800243a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002444:	2101      	movs	r1, #1
 8002446:	4091      	lsls	r1, r2
 8002448:	000a      	movs	r2, r1
 800244a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b10      	cmp	r3, #16
 800245a:	d108      	bne.n	800246e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800246c:	e007      	b.n	800247e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	60da      	str	r2, [r3, #12]
}
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	46bd      	mov	sp, r7
 8002482:	b004      	add	sp, #16
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a08      	ldr	r2, [pc, #32]	; (80024b8 <DMA_CalcBaseAndBitshift+0x30>)
 8002496:	4694      	mov	ip, r2
 8002498:	4463      	add	r3, ip
 800249a:	2114      	movs	r1, #20
 800249c:	0018      	movs	r0, r3
 800249e:	f7fd fe3b 	bl	8000118 <__udivsi3>
 80024a2:	0003      	movs	r3, r0
 80024a4:	009a      	lsls	r2, r3, #2
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a03      	ldr	r2, [pc, #12]	; (80024bc <DMA_CalcBaseAndBitshift+0x34>)
 80024ae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80024b0:	46c0      	nop			; (mov r8, r8)
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b002      	add	sp, #8
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	bffdfff8 	.word	0xbffdfff8
 80024bc:	40020000 	.word	0x40020000

080024c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ce:	e14f      	b.n	8002770 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2101      	movs	r1, #1
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	4091      	lsls	r1, r2
 80024da:	000a      	movs	r2, r1
 80024dc:	4013      	ands	r3, r2
 80024de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d100      	bne.n	80024e8 <HAL_GPIO_Init+0x28>
 80024e6:	e140      	b.n	800276a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d003      	beq.n	80024f8 <HAL_GPIO_Init+0x38>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b12      	cmp	r3, #18
 80024f6:	d123      	bne.n	8002540 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	08da      	lsrs	r2, r3, #3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3208      	adds	r2, #8
 8002500:	0092      	lsls	r2, r2, #2
 8002502:	58d3      	ldr	r3, [r2, r3]
 8002504:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2207      	movs	r2, #7
 800250a:	4013      	ands	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	220f      	movs	r2, #15
 8002510:	409a      	lsls	r2, r3
 8002512:	0013      	movs	r3, r2
 8002514:	43da      	mvns	r2, r3
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	4013      	ands	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	2107      	movs	r1, #7
 8002524:	400b      	ands	r3, r1
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	409a      	lsls	r2, r3
 800252a:	0013      	movs	r3, r2
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	08da      	lsrs	r2, r3, #3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3208      	adds	r2, #8
 800253a:	0092      	lsls	r2, r2, #2
 800253c:	6939      	ldr	r1, [r7, #16]
 800253e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	2203      	movs	r2, #3
 800254c:	409a      	lsls	r2, r3
 800254e:	0013      	movs	r3, r2
 8002550:	43da      	mvns	r2, r3
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	4013      	ands	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2203      	movs	r2, #3
 800255e:	401a      	ands	r2, r3
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	409a      	lsls	r2, r3
 8002566:	0013      	movs	r3, r2
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d00b      	beq.n	8002594 <HAL_GPIO_Init+0xd4>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d007      	beq.n	8002594 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002588:	2b11      	cmp	r3, #17
 800258a:	d003      	beq.n	8002594 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b12      	cmp	r3, #18
 8002592:	d130      	bne.n	80025f6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	2203      	movs	r2, #3
 80025a0:	409a      	lsls	r2, r3
 80025a2:	0013      	movs	r3, r2
 80025a4:	43da      	mvns	r2, r3
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4013      	ands	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	409a      	lsls	r2, r3
 80025b6:	0013      	movs	r3, r2
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025ca:	2201      	movs	r2, #1
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	409a      	lsls	r2, r3
 80025d0:	0013      	movs	r3, r2
 80025d2:	43da      	mvns	r2, r3
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	4013      	ands	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	091b      	lsrs	r3, r3, #4
 80025e0:	2201      	movs	r2, #1
 80025e2:	401a      	ands	r2, r3
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	409a      	lsls	r2, r3
 80025e8:	0013      	movs	r3, r2
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	2203      	movs	r2, #3
 8002602:	409a      	lsls	r2, r3
 8002604:	0013      	movs	r3, r2
 8002606:	43da      	mvns	r2, r3
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4013      	ands	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	409a      	lsls	r2, r3
 8002618:	0013      	movs	r3, r2
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	4313      	orrs	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	2380      	movs	r3, #128	; 0x80
 800262c:	055b      	lsls	r3, r3, #21
 800262e:	4013      	ands	r3, r2
 8002630:	d100      	bne.n	8002634 <HAL_GPIO_Init+0x174>
 8002632:	e09a      	b.n	800276a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002634:	4b54      	ldr	r3, [pc, #336]	; (8002788 <HAL_GPIO_Init+0x2c8>)
 8002636:	699a      	ldr	r2, [r3, #24]
 8002638:	4b53      	ldr	r3, [pc, #332]	; (8002788 <HAL_GPIO_Init+0x2c8>)
 800263a:	2101      	movs	r1, #1
 800263c:	430a      	orrs	r2, r1
 800263e:	619a      	str	r2, [r3, #24]
 8002640:	4b51      	ldr	r3, [pc, #324]	; (8002788 <HAL_GPIO_Init+0x2c8>)
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	2201      	movs	r2, #1
 8002646:	4013      	ands	r3, r2
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800264c:	4a4f      	ldr	r2, [pc, #316]	; (800278c <HAL_GPIO_Init+0x2cc>)
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	089b      	lsrs	r3, r3, #2
 8002652:	3302      	adds	r3, #2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	589b      	ldr	r3, [r3, r2]
 8002658:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	2203      	movs	r2, #3
 800265e:	4013      	ands	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	220f      	movs	r2, #15
 8002664:	409a      	lsls	r2, r3
 8002666:	0013      	movs	r3, r2
 8002668:	43da      	mvns	r2, r3
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4013      	ands	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	2390      	movs	r3, #144	; 0x90
 8002674:	05db      	lsls	r3, r3, #23
 8002676:	429a      	cmp	r2, r3
 8002678:	d013      	beq.n	80026a2 <HAL_GPIO_Init+0x1e2>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a44      	ldr	r2, [pc, #272]	; (8002790 <HAL_GPIO_Init+0x2d0>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d00d      	beq.n	800269e <HAL_GPIO_Init+0x1de>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a43      	ldr	r2, [pc, #268]	; (8002794 <HAL_GPIO_Init+0x2d4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d007      	beq.n	800269a <HAL_GPIO_Init+0x1da>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a42      	ldr	r2, [pc, #264]	; (8002798 <HAL_GPIO_Init+0x2d8>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d101      	bne.n	8002696 <HAL_GPIO_Init+0x1d6>
 8002692:	2303      	movs	r3, #3
 8002694:	e006      	b.n	80026a4 <HAL_GPIO_Init+0x1e4>
 8002696:	2305      	movs	r3, #5
 8002698:	e004      	b.n	80026a4 <HAL_GPIO_Init+0x1e4>
 800269a:	2302      	movs	r3, #2
 800269c:	e002      	b.n	80026a4 <HAL_GPIO_Init+0x1e4>
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <HAL_GPIO_Init+0x1e4>
 80026a2:	2300      	movs	r3, #0
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	2103      	movs	r1, #3
 80026a8:	400a      	ands	r2, r1
 80026aa:	0092      	lsls	r2, r2, #2
 80026ac:	4093      	lsls	r3, r2
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026b4:	4935      	ldr	r1, [pc, #212]	; (800278c <HAL_GPIO_Init+0x2cc>)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	089b      	lsrs	r3, r3, #2
 80026ba:	3302      	adds	r3, #2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026c2:	4b36      	ldr	r3, [pc, #216]	; (800279c <HAL_GPIO_Init+0x2dc>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	43da      	mvns	r2, r3
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4013      	ands	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	2380      	movs	r3, #128	; 0x80
 80026d8:	025b      	lsls	r3, r3, #9
 80026da:	4013      	ands	r3, r2
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80026e6:	4b2d      	ldr	r3, [pc, #180]	; (800279c <HAL_GPIO_Init+0x2dc>)
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80026ec:	4b2b      	ldr	r3, [pc, #172]	; (800279c <HAL_GPIO_Init+0x2dc>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	43da      	mvns	r2, r3
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	029b      	lsls	r3, r3, #10
 8002704:	4013      	ands	r3, r2
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002710:	4b22      	ldr	r3, [pc, #136]	; (800279c <HAL_GPIO_Init+0x2dc>)
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002716:	4b21      	ldr	r3, [pc, #132]	; (800279c <HAL_GPIO_Init+0x2dc>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	43da      	mvns	r2, r3
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4013      	ands	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	2380      	movs	r3, #128	; 0x80
 800272c:	035b      	lsls	r3, r3, #13
 800272e:	4013      	ands	r3, r2
 8002730:	d003      	beq.n	800273a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800273a:	4b18      	ldr	r3, [pc, #96]	; (800279c <HAL_GPIO_Init+0x2dc>)
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002740:	4b16      	ldr	r3, [pc, #88]	; (800279c <HAL_GPIO_Init+0x2dc>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	43da      	mvns	r2, r3
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	2380      	movs	r3, #128	; 0x80
 8002756:	039b      	lsls	r3, r3, #14
 8002758:	4013      	ands	r3, r2
 800275a:	d003      	beq.n	8002764 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002764:	4b0d      	ldr	r3, [pc, #52]	; (800279c <HAL_GPIO_Init+0x2dc>)
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	3301      	adds	r3, #1
 800276e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	40da      	lsrs	r2, r3
 8002778:	1e13      	subs	r3, r2, #0
 800277a:	d000      	beq.n	800277e <HAL_GPIO_Init+0x2be>
 800277c:	e6a8      	b.n	80024d0 <HAL_GPIO_Init+0x10>
  } 
}
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	46bd      	mov	sp, r7
 8002782:	b006      	add	sp, #24
 8002784:	bd80      	pop	{r7, pc}
 8002786:	46c0      	nop			; (mov r8, r8)
 8002788:	40021000 	.word	0x40021000
 800278c:	40010000 	.word	0x40010000
 8002790:	48000400 	.word	0x48000400
 8002794:	48000800 	.word	0x48000800
 8002798:	48000c00 	.word	0x48000c00
 800279c:	40010400 	.word	0x40010400

080027a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80027ae:	e0b1      	b.n	8002914 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80027b0:	2201      	movs	r2, #1
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	409a      	lsls	r2, r3
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	4013      	ands	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d100      	bne.n	80027c4 <HAL_GPIO_DeInit+0x24>
 80027c2:	e0a4      	b.n	800290e <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80027c4:	4a58      	ldr	r2, [pc, #352]	; (8002928 <HAL_GPIO_DeInit+0x188>)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	089b      	lsrs	r3, r3, #2
 80027ca:	3302      	adds	r3, #2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	589b      	ldr	r3, [r3, r2]
 80027d0:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	2203      	movs	r2, #3
 80027d6:	4013      	ands	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	220f      	movs	r2, #15
 80027dc:	409a      	lsls	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4013      	ands	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	2390      	movs	r3, #144	; 0x90
 80027e8:	05db      	lsls	r3, r3, #23
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d013      	beq.n	8002816 <HAL_GPIO_DeInit+0x76>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a4e      	ldr	r2, [pc, #312]	; (800292c <HAL_GPIO_DeInit+0x18c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d00d      	beq.n	8002812 <HAL_GPIO_DeInit+0x72>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a4d      	ldr	r2, [pc, #308]	; (8002930 <HAL_GPIO_DeInit+0x190>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d007      	beq.n	800280e <HAL_GPIO_DeInit+0x6e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a4c      	ldr	r2, [pc, #304]	; (8002934 <HAL_GPIO_DeInit+0x194>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d101      	bne.n	800280a <HAL_GPIO_DeInit+0x6a>
 8002806:	2303      	movs	r3, #3
 8002808:	e006      	b.n	8002818 <HAL_GPIO_DeInit+0x78>
 800280a:	2305      	movs	r3, #5
 800280c:	e004      	b.n	8002818 <HAL_GPIO_DeInit+0x78>
 800280e:	2302      	movs	r3, #2
 8002810:	e002      	b.n	8002818 <HAL_GPIO_DeInit+0x78>
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <HAL_GPIO_DeInit+0x78>
 8002816:	2300      	movs	r3, #0
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	2103      	movs	r1, #3
 800281c:	400a      	ands	r2, r1
 800281e:	0092      	lsls	r2, r2, #2
 8002820:	4093      	lsls	r3, r2
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	429a      	cmp	r2, r3
 8002826:	d132      	bne.n	800288e <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002828:	4b43      	ldr	r3, [pc, #268]	; (8002938 <HAL_GPIO_DeInit+0x198>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	43d9      	mvns	r1, r3
 8002830:	4b41      	ldr	r3, [pc, #260]	; (8002938 <HAL_GPIO_DeInit+0x198>)
 8002832:	400a      	ands	r2, r1
 8002834:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002836:	4b40      	ldr	r3, [pc, #256]	; (8002938 <HAL_GPIO_DeInit+0x198>)
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	43d9      	mvns	r1, r3
 800283e:	4b3e      	ldr	r3, [pc, #248]	; (8002938 <HAL_GPIO_DeInit+0x198>)
 8002840:	400a      	ands	r2, r1
 8002842:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002844:	4b3c      	ldr	r3, [pc, #240]	; (8002938 <HAL_GPIO_DeInit+0x198>)
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	43d9      	mvns	r1, r3
 800284c:	4b3a      	ldr	r3, [pc, #232]	; (8002938 <HAL_GPIO_DeInit+0x198>)
 800284e:	400a      	ands	r2, r1
 8002850:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002852:	4b39      	ldr	r3, [pc, #228]	; (8002938 <HAL_GPIO_DeInit+0x198>)
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	43d9      	mvns	r1, r3
 800285a:	4b37      	ldr	r3, [pc, #220]	; (8002938 <HAL_GPIO_DeInit+0x198>)
 800285c:	400a      	ands	r2, r1
 800285e:	60da      	str	r2, [r3, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	2203      	movs	r2, #3
 8002864:	4013      	ands	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	220f      	movs	r2, #15
 800286a:	409a      	lsls	r2, r3
 800286c:	0013      	movs	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002870:	4a2d      	ldr	r2, [pc, #180]	; (8002928 <HAL_GPIO_DeInit+0x188>)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	089b      	lsrs	r3, r3, #2
 8002876:	3302      	adds	r3, #2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	589a      	ldr	r2, [r3, r2]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	43d9      	mvns	r1, r3
 8002880:	4829      	ldr	r0, [pc, #164]	; (8002928 <HAL_GPIO_DeInit+0x188>)
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	089b      	lsrs	r3, r3, #2
 8002886:	400a      	ands	r2, r1
 8002888:	3302      	adds	r3, #2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	0052      	lsls	r2, r2, #1
 8002896:	2103      	movs	r1, #3
 8002898:	4091      	lsls	r1, r2
 800289a:	000a      	movs	r2, r1
 800289c:	43d2      	mvns	r2, r2
 800289e:	401a      	ands	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	08da      	lsrs	r2, r3, #3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3208      	adds	r2, #8
 80028ac:	0092      	lsls	r2, r2, #2
 80028ae:	58d3      	ldr	r3, [r2, r3]
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	2107      	movs	r1, #7
 80028b4:	400a      	ands	r2, r1
 80028b6:	0092      	lsls	r2, r2, #2
 80028b8:	210f      	movs	r1, #15
 80028ba:	4091      	lsls	r1, r2
 80028bc:	000a      	movs	r2, r1
 80028be:	43d1      	mvns	r1, r2
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	08d2      	lsrs	r2, r2, #3
 80028c4:	4019      	ands	r1, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3208      	adds	r2, #8
 80028ca:	0092      	lsls	r2, r2, #2
 80028cc:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	0052      	lsls	r2, r2, #1
 80028d6:	2103      	movs	r1, #3
 80028d8:	4091      	lsls	r1, r2
 80028da:	000a      	movs	r2, r1
 80028dc:	43d2      	mvns	r2, r2
 80028de:	401a      	ands	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2101      	movs	r1, #1
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4091      	lsls	r1, r2
 80028ee:	000a      	movs	r2, r1
 80028f0:	43d2      	mvns	r2, r2
 80028f2:	401a      	ands	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	0052      	lsls	r2, r2, #1
 8002900:	2103      	movs	r1, #3
 8002902:	4091      	lsls	r1, r2
 8002904:	000a      	movs	r2, r1
 8002906:	43d2      	mvns	r2, r2
 8002908:	401a      	ands	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	60da      	str	r2, [r3, #12]
    }

    position++;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	3301      	adds	r3, #1
 8002912:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	40da      	lsrs	r2, r3
 800291a:	1e13      	subs	r3, r2, #0
 800291c:	d000      	beq.n	8002920 <HAL_GPIO_DeInit+0x180>
 800291e:	e747      	b.n	80027b0 <HAL_GPIO_DeInit+0x10>
  }
}
 8002920:	46c0      	nop			; (mov r8, r8)
 8002922:	46bd      	mov	sp, r7
 8002924:	b006      	add	sp, #24
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40010000 	.word	0x40010000
 800292c:	48000400 	.word	0x48000400
 8002930:	48000800 	.word	0x48000800
 8002934:	48000c00 	.word	0x48000c00
 8002938:	40010400 	.word	0x40010400

0800293c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	0008      	movs	r0, r1
 8002946:	0011      	movs	r1, r2
 8002948:	1cbb      	adds	r3, r7, #2
 800294a:	1c02      	adds	r2, r0, #0
 800294c:	801a      	strh	r2, [r3, #0]
 800294e:	1c7b      	adds	r3, r7, #1
 8002950:	1c0a      	adds	r2, r1, #0
 8002952:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002954:	1c7b      	adds	r3, r7, #1
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d004      	beq.n	8002966 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800295c:	1cbb      	adds	r3, r7, #2
 800295e:	881a      	ldrh	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002964:	e003      	b.n	800296e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002966:	1cbb      	adds	r3, r7, #2
 8002968:	881a      	ldrh	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	46bd      	mov	sp, r7
 8002972:	b002      	add	sp, #8
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e303      	b.n	8002f92 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2201      	movs	r2, #1
 8002990:	4013      	ands	r3, r2
 8002992:	d100      	bne.n	8002996 <HAL_RCC_OscConfig+0x1e>
 8002994:	e08d      	b.n	8002ab2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002996:	4bc4      	ldr	r3, [pc, #784]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	220c      	movs	r2, #12
 800299c:	4013      	ands	r3, r2
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d00e      	beq.n	80029c0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029a2:	4bc1      	ldr	r3, [pc, #772]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	220c      	movs	r2, #12
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d116      	bne.n	80029dc <HAL_RCC_OscConfig+0x64>
 80029ae:	4bbe      	ldr	r3, [pc, #760]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	2380      	movs	r3, #128	; 0x80
 80029b4:	025b      	lsls	r3, r3, #9
 80029b6:	401a      	ands	r2, r3
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	025b      	lsls	r3, r3, #9
 80029bc:	429a      	cmp	r2, r3
 80029be:	d10d      	bne.n	80029dc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c0:	4bb9      	ldr	r3, [pc, #740]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	029b      	lsls	r3, r3, #10
 80029c8:	4013      	ands	r3, r2
 80029ca:	d100      	bne.n	80029ce <HAL_RCC_OscConfig+0x56>
 80029cc:	e070      	b.n	8002ab0 <HAL_RCC_OscConfig+0x138>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d000      	beq.n	80029d8 <HAL_RCC_OscConfig+0x60>
 80029d6:	e06b      	b.n	8002ab0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e2da      	b.n	8002f92 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d107      	bne.n	80029f4 <HAL_RCC_OscConfig+0x7c>
 80029e4:	4bb0      	ldr	r3, [pc, #704]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4baf      	ldr	r3, [pc, #700]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 80029ea:	2180      	movs	r1, #128	; 0x80
 80029ec:	0249      	lsls	r1, r1, #9
 80029ee:	430a      	orrs	r2, r1
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	e02f      	b.n	8002a54 <HAL_RCC_OscConfig+0xdc>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10c      	bne.n	8002a16 <HAL_RCC_OscConfig+0x9e>
 80029fc:	4baa      	ldr	r3, [pc, #680]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4ba9      	ldr	r3, [pc, #676]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002a02:	49aa      	ldr	r1, [pc, #680]	; (8002cac <HAL_RCC_OscConfig+0x334>)
 8002a04:	400a      	ands	r2, r1
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	4ba7      	ldr	r3, [pc, #668]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4ba6      	ldr	r3, [pc, #664]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002a0e:	49a8      	ldr	r1, [pc, #672]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002a10:	400a      	ands	r2, r1
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	e01e      	b.n	8002a54 <HAL_RCC_OscConfig+0xdc>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b05      	cmp	r3, #5
 8002a1c:	d10e      	bne.n	8002a3c <HAL_RCC_OscConfig+0xc4>
 8002a1e:	4ba2      	ldr	r3, [pc, #648]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	4ba1      	ldr	r3, [pc, #644]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002a24:	2180      	movs	r1, #128	; 0x80
 8002a26:	02c9      	lsls	r1, r1, #11
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	4b9e      	ldr	r3, [pc, #632]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	4b9d      	ldr	r3, [pc, #628]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002a32:	2180      	movs	r1, #128	; 0x80
 8002a34:	0249      	lsls	r1, r1, #9
 8002a36:	430a      	orrs	r2, r1
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	e00b      	b.n	8002a54 <HAL_RCC_OscConfig+0xdc>
 8002a3c:	4b9a      	ldr	r3, [pc, #616]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	4b99      	ldr	r3, [pc, #612]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002a42:	499a      	ldr	r1, [pc, #616]	; (8002cac <HAL_RCC_OscConfig+0x334>)
 8002a44:	400a      	ands	r2, r1
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	4b97      	ldr	r3, [pc, #604]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4b96      	ldr	r3, [pc, #600]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002a4e:	4998      	ldr	r1, [pc, #608]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002a50:	400a      	ands	r2, r1
 8002a52:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d014      	beq.n	8002a86 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7ff fa02 	bl	8001e64 <HAL_GetTick>
 8002a60:	0003      	movs	r3, r0
 8002a62:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a66:	f7ff f9fd 	bl	8001e64 <HAL_GetTick>
 8002a6a:	0002      	movs	r2, r0
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b64      	cmp	r3, #100	; 0x64
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e28c      	b.n	8002f92 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a78:	4b8b      	ldr	r3, [pc, #556]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	029b      	lsls	r3, r3, #10
 8002a80:	4013      	ands	r3, r2
 8002a82:	d0f0      	beq.n	8002a66 <HAL_RCC_OscConfig+0xee>
 8002a84:	e015      	b.n	8002ab2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a86:	f7ff f9ed 	bl	8001e64 <HAL_GetTick>
 8002a8a:	0003      	movs	r3, r0
 8002a8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a90:	f7ff f9e8 	bl	8001e64 <HAL_GetTick>
 8002a94:	0002      	movs	r2, r0
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	; 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e277      	b.n	8002f92 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa2:	4b81      	ldr	r3, [pc, #516]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	2380      	movs	r3, #128	; 0x80
 8002aa8:	029b      	lsls	r3, r3, #10
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d1f0      	bne.n	8002a90 <HAL_RCC_OscConfig+0x118>
 8002aae:	e000      	b.n	8002ab2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d100      	bne.n	8002abe <HAL_RCC_OscConfig+0x146>
 8002abc:	e069      	b.n	8002b92 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002abe:	4b7a      	ldr	r3, [pc, #488]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	220c      	movs	r2, #12
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d00b      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ac8:	4b77      	ldr	r3, [pc, #476]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	220c      	movs	r2, #12
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d11c      	bne.n	8002b0e <HAL_RCC_OscConfig+0x196>
 8002ad4:	4b74      	ldr	r3, [pc, #464]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	2380      	movs	r3, #128	; 0x80
 8002ada:	025b      	lsls	r3, r3, #9
 8002adc:	4013      	ands	r3, r2
 8002ade:	d116      	bne.n	8002b0e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae0:	4b71      	ldr	r3, [pc, #452]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d005      	beq.n	8002af6 <HAL_RCC_OscConfig+0x17e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d001      	beq.n	8002af6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e24d      	b.n	8002f92 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af6:	4b6c      	ldr	r3, [pc, #432]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	22f8      	movs	r2, #248	; 0xf8
 8002afc:	4393      	bics	r3, r2
 8002afe:	0019      	movs	r1, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	00da      	lsls	r2, r3, #3
 8002b06:	4b68      	ldr	r3, [pc, #416]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0c:	e041      	b.n	8002b92 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d024      	beq.n	8002b60 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b16:	4b64      	ldr	r3, [pc, #400]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	4b63      	ldr	r3, [pc, #396]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b22:	f7ff f99f 	bl	8001e64 <HAL_GetTick>
 8002b26:	0003      	movs	r3, r0
 8002b28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b2c:	f7ff f99a 	bl	8001e64 <HAL_GetTick>
 8002b30:	0002      	movs	r2, r0
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e229      	b.n	8002f92 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b3e:	4b5a      	ldr	r3, [pc, #360]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2202      	movs	r2, #2
 8002b44:	4013      	ands	r3, r2
 8002b46:	d0f1      	beq.n	8002b2c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b48:	4b57      	ldr	r3, [pc, #348]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	22f8      	movs	r2, #248	; 0xf8
 8002b4e:	4393      	bics	r3, r2
 8002b50:	0019      	movs	r1, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	00da      	lsls	r2, r3, #3
 8002b58:	4b53      	ldr	r3, [pc, #332]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	e018      	b.n	8002b92 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b60:	4b51      	ldr	r3, [pc, #324]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	4b50      	ldr	r3, [pc, #320]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002b66:	2101      	movs	r1, #1
 8002b68:	438a      	bics	r2, r1
 8002b6a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6c:	f7ff f97a 	bl	8001e64 <HAL_GetTick>
 8002b70:	0003      	movs	r3, r0
 8002b72:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b76:	f7ff f975 	bl	8001e64 <HAL_GetTick>
 8002b7a:	0002      	movs	r2, r0
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e204      	b.n	8002f92 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b88:	4b47      	ldr	r3, [pc, #284]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d1f1      	bne.n	8002b76 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2208      	movs	r2, #8
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d036      	beq.n	8002c0a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d019      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ba4:	4b40      	ldr	r3, [pc, #256]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002ba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ba8:	4b3f      	ldr	r3, [pc, #252]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002baa:	2101      	movs	r1, #1
 8002bac:	430a      	orrs	r2, r1
 8002bae:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb0:	f7ff f958 	bl	8001e64 <HAL_GetTick>
 8002bb4:	0003      	movs	r3, r0
 8002bb6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bba:	f7ff f953 	bl	8001e64 <HAL_GetTick>
 8002bbe:	0002      	movs	r2, r0
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e1e2      	b.n	8002f92 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bcc:	4b36      	ldr	r3, [pc, #216]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	d0f1      	beq.n	8002bba <HAL_RCC_OscConfig+0x242>
 8002bd6:	e018      	b.n	8002c0a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bd8:	4b33      	ldr	r3, [pc, #204]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002bda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bdc:	4b32      	ldr	r3, [pc, #200]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002bde:	2101      	movs	r1, #1
 8002be0:	438a      	bics	r2, r1
 8002be2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be4:	f7ff f93e 	bl	8001e64 <HAL_GetTick>
 8002be8:	0003      	movs	r3, r0
 8002bea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bee:	f7ff f939 	bl	8001e64 <HAL_GetTick>
 8002bf2:	0002      	movs	r2, r0
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e1c8      	b.n	8002f92 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c00:	4b29      	ldr	r3, [pc, #164]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	2202      	movs	r2, #2
 8002c06:	4013      	ands	r3, r2
 8002c08:	d1f1      	bne.n	8002bee <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2204      	movs	r2, #4
 8002c10:	4013      	ands	r3, r2
 8002c12:	d100      	bne.n	8002c16 <HAL_RCC_OscConfig+0x29e>
 8002c14:	e0b6      	b.n	8002d84 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c16:	231f      	movs	r3, #31
 8002c18:	18fb      	adds	r3, r7, r3
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c1e:	4b22      	ldr	r3, [pc, #136]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002c20:	69da      	ldr	r2, [r3, #28]
 8002c22:	2380      	movs	r3, #128	; 0x80
 8002c24:	055b      	lsls	r3, r3, #21
 8002c26:	4013      	ands	r3, r2
 8002c28:	d111      	bne.n	8002c4e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c2a:	4b1f      	ldr	r3, [pc, #124]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002c2c:	69da      	ldr	r2, [r3, #28]
 8002c2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002c30:	2180      	movs	r1, #128	; 0x80
 8002c32:	0549      	lsls	r1, r1, #21
 8002c34:	430a      	orrs	r2, r1
 8002c36:	61da      	str	r2, [r3, #28]
 8002c38:	4b1b      	ldr	r3, [pc, #108]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002c3a:	69da      	ldr	r2, [r3, #28]
 8002c3c:	2380      	movs	r3, #128	; 0x80
 8002c3e:	055b      	lsls	r3, r3, #21
 8002c40:	4013      	ands	r3, r2
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c46:	231f      	movs	r3, #31
 8002c48:	18fb      	adds	r3, r7, r3
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4e:	4b19      	ldr	r3, [pc, #100]	; (8002cb4 <HAL_RCC_OscConfig+0x33c>)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	2380      	movs	r3, #128	; 0x80
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	4013      	ands	r3, r2
 8002c58:	d11a      	bne.n	8002c90 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c5a:	4b16      	ldr	r3, [pc, #88]	; (8002cb4 <HAL_RCC_OscConfig+0x33c>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	4b15      	ldr	r3, [pc, #84]	; (8002cb4 <HAL_RCC_OscConfig+0x33c>)
 8002c60:	2180      	movs	r1, #128	; 0x80
 8002c62:	0049      	lsls	r1, r1, #1
 8002c64:	430a      	orrs	r2, r1
 8002c66:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c68:	f7ff f8fc 	bl	8001e64 <HAL_GetTick>
 8002c6c:	0003      	movs	r3, r0
 8002c6e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c72:	f7ff f8f7 	bl	8001e64 <HAL_GetTick>
 8002c76:	0002      	movs	r2, r0
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b64      	cmp	r3, #100	; 0x64
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e186      	b.n	8002f92 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <HAL_RCC_OscConfig+0x33c>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d10f      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x340>
 8002c98:	4b03      	ldr	r3, [pc, #12]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002c9a:	6a1a      	ldr	r2, [r3, #32]
 8002c9c:	4b02      	ldr	r3, [pc, #8]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	621a      	str	r2, [r3, #32]
 8002ca4:	e036      	b.n	8002d14 <HAL_RCC_OscConfig+0x39c>
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	fffeffff 	.word	0xfffeffff
 8002cb0:	fffbffff 	.word	0xfffbffff
 8002cb4:	40007000 	.word	0x40007000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10c      	bne.n	8002cda <HAL_RCC_OscConfig+0x362>
 8002cc0:	4bb6      	ldr	r3, [pc, #728]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002cc2:	6a1a      	ldr	r2, [r3, #32]
 8002cc4:	4bb5      	ldr	r3, [pc, #724]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	438a      	bics	r2, r1
 8002cca:	621a      	str	r2, [r3, #32]
 8002ccc:	4bb3      	ldr	r3, [pc, #716]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002cce:	6a1a      	ldr	r2, [r3, #32]
 8002cd0:	4bb2      	ldr	r3, [pc, #712]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002cd2:	2104      	movs	r1, #4
 8002cd4:	438a      	bics	r2, r1
 8002cd6:	621a      	str	r2, [r3, #32]
 8002cd8:	e01c      	b.n	8002d14 <HAL_RCC_OscConfig+0x39c>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b05      	cmp	r3, #5
 8002ce0:	d10c      	bne.n	8002cfc <HAL_RCC_OscConfig+0x384>
 8002ce2:	4bae      	ldr	r3, [pc, #696]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002ce4:	6a1a      	ldr	r2, [r3, #32]
 8002ce6:	4bad      	ldr	r3, [pc, #692]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002ce8:	2104      	movs	r1, #4
 8002cea:	430a      	orrs	r2, r1
 8002cec:	621a      	str	r2, [r3, #32]
 8002cee:	4bab      	ldr	r3, [pc, #684]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002cf0:	6a1a      	ldr	r2, [r3, #32]
 8002cf2:	4baa      	ldr	r3, [pc, #680]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	621a      	str	r2, [r3, #32]
 8002cfa:	e00b      	b.n	8002d14 <HAL_RCC_OscConfig+0x39c>
 8002cfc:	4ba7      	ldr	r3, [pc, #668]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002cfe:	6a1a      	ldr	r2, [r3, #32]
 8002d00:	4ba6      	ldr	r3, [pc, #664]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002d02:	2101      	movs	r1, #1
 8002d04:	438a      	bics	r2, r1
 8002d06:	621a      	str	r2, [r3, #32]
 8002d08:	4ba4      	ldr	r3, [pc, #656]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002d0a:	6a1a      	ldr	r2, [r3, #32]
 8002d0c:	4ba3      	ldr	r3, [pc, #652]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002d0e:	2104      	movs	r1, #4
 8002d10:	438a      	bics	r2, r1
 8002d12:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d014      	beq.n	8002d46 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1c:	f7ff f8a2 	bl	8001e64 <HAL_GetTick>
 8002d20:	0003      	movs	r3, r0
 8002d22:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d24:	e009      	b.n	8002d3a <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d26:	f7ff f89d 	bl	8001e64 <HAL_GetTick>
 8002d2a:	0002      	movs	r2, r0
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	4a9b      	ldr	r2, [pc, #620]	; (8002fa0 <HAL_RCC_OscConfig+0x628>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e12b      	b.n	8002f92 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3a:	4b98      	ldr	r3, [pc, #608]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	4013      	ands	r3, r2
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCC_OscConfig+0x3ae>
 8002d44:	e013      	b.n	8002d6e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d46:	f7ff f88d 	bl	8001e64 <HAL_GetTick>
 8002d4a:	0003      	movs	r3, r0
 8002d4c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d4e:	e009      	b.n	8002d64 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d50:	f7ff f888 	bl	8001e64 <HAL_GetTick>
 8002d54:	0002      	movs	r2, r0
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	4a91      	ldr	r2, [pc, #580]	; (8002fa0 <HAL_RCC_OscConfig+0x628>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e116      	b.n	8002f92 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d64:	4b8d      	ldr	r3, [pc, #564]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d6e:	231f      	movs	r3, #31
 8002d70:	18fb      	adds	r3, r7, r3
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d105      	bne.n	8002d84 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d78:	4b88      	ldr	r3, [pc, #544]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002d7a:	69da      	ldr	r2, [r3, #28]
 8002d7c:	4b87      	ldr	r3, [pc, #540]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002d7e:	4989      	ldr	r1, [pc, #548]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002d80:	400a      	ands	r2, r1
 8002d82:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2210      	movs	r2, #16
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d063      	beq.n	8002e56 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d12a      	bne.n	8002dec <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002d96:	4b81      	ldr	r3, [pc, #516]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d9a:	4b80      	ldr	r3, [pc, #512]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002d9c:	2104      	movs	r1, #4
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002da2:	4b7e      	ldr	r3, [pc, #504]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002da6:	4b7d      	ldr	r3, [pc, #500]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002da8:	2101      	movs	r1, #1
 8002daa:	430a      	orrs	r2, r1
 8002dac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dae:	f7ff f859 	bl	8001e64 <HAL_GetTick>
 8002db2:	0003      	movs	r3, r0
 8002db4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002db8:	f7ff f854 	bl	8001e64 <HAL_GetTick>
 8002dbc:	0002      	movs	r2, r0
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e0e3      	b.n	8002f92 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002dca:	4b74      	ldr	r3, [pc, #464]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dce:	2202      	movs	r2, #2
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d0f1      	beq.n	8002db8 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002dd4:	4b71      	ldr	r3, [pc, #452]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd8:	22f8      	movs	r2, #248	; 0xf8
 8002dda:	4393      	bics	r3, r2
 8002ddc:	0019      	movs	r1, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	00da      	lsls	r2, r3, #3
 8002de4:	4b6d      	ldr	r3, [pc, #436]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002de6:	430a      	orrs	r2, r1
 8002de8:	635a      	str	r2, [r3, #52]	; 0x34
 8002dea:	e034      	b.n	8002e56 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	3305      	adds	r3, #5
 8002df2:	d111      	bne.n	8002e18 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002df4:	4b69      	ldr	r3, [pc, #420]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002df6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002df8:	4b68      	ldr	r3, [pc, #416]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002dfa:	2104      	movs	r1, #4
 8002dfc:	438a      	bics	r2, r1
 8002dfe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002e00:	4b66      	ldr	r3, [pc, #408]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e04:	22f8      	movs	r2, #248	; 0xf8
 8002e06:	4393      	bics	r3, r2
 8002e08:	0019      	movs	r1, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	00da      	lsls	r2, r3, #3
 8002e10:	4b62      	ldr	r3, [pc, #392]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002e12:	430a      	orrs	r2, r1
 8002e14:	635a      	str	r2, [r3, #52]	; 0x34
 8002e16:	e01e      	b.n	8002e56 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002e18:	4b60      	ldr	r3, [pc, #384]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e1c:	4b5f      	ldr	r3, [pc, #380]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002e1e:	2104      	movs	r1, #4
 8002e20:	430a      	orrs	r2, r1
 8002e22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002e24:	4b5d      	ldr	r3, [pc, #372]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002e26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e28:	4b5c      	ldr	r3, [pc, #368]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	438a      	bics	r2, r1
 8002e2e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e30:	f7ff f818 	bl	8001e64 <HAL_GetTick>
 8002e34:	0003      	movs	r3, r0
 8002e36:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002e3a:	f7ff f813 	bl	8001e64 <HAL_GetTick>
 8002e3e:	0002      	movs	r2, r0
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e0a2      	b.n	8002f92 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002e4c:	4b53      	ldr	r3, [pc, #332]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e50:	2202      	movs	r2, #2
 8002e52:	4013      	ands	r3, r2
 8002e54:	d1f1      	bne.n	8002e3a <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d100      	bne.n	8002e60 <HAL_RCC_OscConfig+0x4e8>
 8002e5e:	e097      	b.n	8002f90 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e60:	4b4e      	ldr	r3, [pc, #312]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	220c      	movs	r2, #12
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d100      	bne.n	8002e6e <HAL_RCC_OscConfig+0x4f6>
 8002e6c:	e06b      	b.n	8002f46 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d14c      	bne.n	8002f10 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e76:	4b49      	ldr	r3, [pc, #292]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	4b48      	ldr	r3, [pc, #288]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002e7c:	494a      	ldr	r1, [pc, #296]	; (8002fa8 <HAL_RCC_OscConfig+0x630>)
 8002e7e:	400a      	ands	r2, r1
 8002e80:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e82:	f7fe ffef 	bl	8001e64 <HAL_GetTick>
 8002e86:	0003      	movs	r3, r0
 8002e88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e8c:	f7fe ffea 	bl	8001e64 <HAL_GetTick>
 8002e90:	0002      	movs	r2, r0
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e079      	b.n	8002f92 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e9e:	4b3f      	ldr	r3, [pc, #252]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	2380      	movs	r3, #128	; 0x80
 8002ea4:	049b      	lsls	r3, r3, #18
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d1f0      	bne.n	8002e8c <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eaa:	4b3c      	ldr	r3, [pc, #240]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eae:	220f      	movs	r2, #15
 8002eb0:	4393      	bics	r3, r2
 8002eb2:	0019      	movs	r1, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb8:	4b38      	ldr	r3, [pc, #224]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ebe:	4b37      	ldr	r3, [pc, #220]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	4a3a      	ldr	r2, [pc, #232]	; (8002fac <HAL_RCC_OscConfig+0x634>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	0019      	movs	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	4b32      	ldr	r3, [pc, #200]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ed8:	4b30      	ldr	r3, [pc, #192]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	4b2f      	ldr	r3, [pc, #188]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002ede:	2180      	movs	r1, #128	; 0x80
 8002ee0:	0449      	lsls	r1, r1, #17
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee6:	f7fe ffbd 	bl	8001e64 <HAL_GetTick>
 8002eea:	0003      	movs	r3, r0
 8002eec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef0:	f7fe ffb8 	bl	8001e64 <HAL_GetTick>
 8002ef4:	0002      	movs	r2, r0
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e047      	b.n	8002f92 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f02:	4b26      	ldr	r3, [pc, #152]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	2380      	movs	r3, #128	; 0x80
 8002f08:	049b      	lsls	r3, r3, #18
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x578>
 8002f0e:	e03f      	b.n	8002f90 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f10:	4b22      	ldr	r3, [pc, #136]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4b21      	ldr	r3, [pc, #132]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002f16:	4924      	ldr	r1, [pc, #144]	; (8002fa8 <HAL_RCC_OscConfig+0x630>)
 8002f18:	400a      	ands	r2, r1
 8002f1a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1c:	f7fe ffa2 	bl	8001e64 <HAL_GetTick>
 8002f20:	0003      	movs	r3, r0
 8002f22:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f26:	f7fe ff9d 	bl	8001e64 <HAL_GetTick>
 8002f2a:	0002      	movs	r2, r0
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e02c      	b.n	8002f92 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f38:	4b18      	ldr	r3, [pc, #96]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	2380      	movs	r3, #128	; 0x80
 8002f3e:	049b      	lsls	r3, r3, #18
 8002f40:	4013      	ands	r3, r2
 8002f42:	d1f0      	bne.n	8002f26 <HAL_RCC_OscConfig+0x5ae>
 8002f44:	e024      	b.n	8002f90 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e01f      	b.n	8002f92 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002f52:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002f58:	4b10      	ldr	r3, [pc, #64]	; (8002f9c <HAL_RCC_OscConfig+0x624>)
 8002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	2380      	movs	r3, #128	; 0x80
 8002f62:	025b      	lsls	r3, r3, #9
 8002f64:	401a      	ands	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d10e      	bne.n	8002f8c <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	220f      	movs	r2, #15
 8002f72:	401a      	ands	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d107      	bne.n	8002f8c <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	23f0      	movs	r3, #240	; 0xf0
 8002f80:	039b      	lsls	r3, r3, #14
 8002f82:	401a      	ands	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d001      	beq.n	8002f90 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e000      	b.n	8002f92 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	0018      	movs	r0, r3
 8002f94:	46bd      	mov	sp, r7
 8002f96:	b008      	add	sp, #32
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	00001388 	.word	0x00001388
 8002fa4:	efffffff 	.word	0xefffffff
 8002fa8:	feffffff 	.word	0xfeffffff
 8002fac:	ffc2ffff 	.word	0xffc2ffff

08002fb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0b3      	b.n	800312c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc4:	4b5b      	ldr	r3, [pc, #364]	; (8003134 <HAL_RCC_ClockConfig+0x184>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	4013      	ands	r3, r2
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d911      	bls.n	8002ff6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd2:	4b58      	ldr	r3, [pc, #352]	; (8003134 <HAL_RCC_ClockConfig+0x184>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	4393      	bics	r3, r2
 8002fda:	0019      	movs	r1, r3
 8002fdc:	4b55      	ldr	r3, [pc, #340]	; (8003134 <HAL_RCC_ClockConfig+0x184>)
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe4:	4b53      	ldr	r3, [pc, #332]	; (8003134 <HAL_RCC_ClockConfig+0x184>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	4013      	ands	r3, r2
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d001      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e09a      	b.n	800312c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d015      	beq.n	800302c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2204      	movs	r2, #4
 8003006:	4013      	ands	r3, r2
 8003008:	d006      	beq.n	8003018 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800300a:	4b4b      	ldr	r3, [pc, #300]	; (8003138 <HAL_RCC_ClockConfig+0x188>)
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	4b4a      	ldr	r3, [pc, #296]	; (8003138 <HAL_RCC_ClockConfig+0x188>)
 8003010:	21e0      	movs	r1, #224	; 0xe0
 8003012:	00c9      	lsls	r1, r1, #3
 8003014:	430a      	orrs	r2, r1
 8003016:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003018:	4b47      	ldr	r3, [pc, #284]	; (8003138 <HAL_RCC_ClockConfig+0x188>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	22f0      	movs	r2, #240	; 0xf0
 800301e:	4393      	bics	r3, r2
 8003020:	0019      	movs	r1, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	4b44      	ldr	r3, [pc, #272]	; (8003138 <HAL_RCC_ClockConfig+0x188>)
 8003028:	430a      	orrs	r2, r1
 800302a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2201      	movs	r2, #1
 8003032:	4013      	ands	r3, r2
 8003034:	d040      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d107      	bne.n	800304e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303e:	4b3e      	ldr	r3, [pc, #248]	; (8003138 <HAL_RCC_ClockConfig+0x188>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	2380      	movs	r3, #128	; 0x80
 8003044:	029b      	lsls	r3, r3, #10
 8003046:	4013      	ands	r3, r2
 8003048:	d114      	bne.n	8003074 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e06e      	b.n	800312c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d107      	bne.n	8003066 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003056:	4b38      	ldr	r3, [pc, #224]	; (8003138 <HAL_RCC_ClockConfig+0x188>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	2380      	movs	r3, #128	; 0x80
 800305c:	049b      	lsls	r3, r3, #18
 800305e:	4013      	ands	r3, r2
 8003060:	d108      	bne.n	8003074 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e062      	b.n	800312c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003066:	4b34      	ldr	r3, [pc, #208]	; (8003138 <HAL_RCC_ClockConfig+0x188>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2202      	movs	r2, #2
 800306c:	4013      	ands	r3, r2
 800306e:	d101      	bne.n	8003074 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e05b      	b.n	800312c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003074:	4b30      	ldr	r3, [pc, #192]	; (8003138 <HAL_RCC_ClockConfig+0x188>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2203      	movs	r2, #3
 800307a:	4393      	bics	r3, r2
 800307c:	0019      	movs	r1, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	4b2d      	ldr	r3, [pc, #180]	; (8003138 <HAL_RCC_ClockConfig+0x188>)
 8003084:	430a      	orrs	r2, r1
 8003086:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003088:	f7fe feec 	bl	8001e64 <HAL_GetTick>
 800308c:	0003      	movs	r3, r0
 800308e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003090:	e009      	b.n	80030a6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003092:	f7fe fee7 	bl	8001e64 <HAL_GetTick>
 8003096:	0002      	movs	r2, r0
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	4a27      	ldr	r2, [pc, #156]	; (800313c <HAL_RCC_ClockConfig+0x18c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e042      	b.n	800312c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a6:	4b24      	ldr	r3, [pc, #144]	; (8003138 <HAL_RCC_ClockConfig+0x188>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	220c      	movs	r2, #12
 80030ac:	401a      	ands	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d1ec      	bne.n	8003092 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030b8:	4b1e      	ldr	r3, [pc, #120]	; (8003134 <HAL_RCC_ClockConfig+0x184>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2201      	movs	r2, #1
 80030be:	4013      	ands	r3, r2
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d211      	bcs.n	80030ea <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c6:	4b1b      	ldr	r3, [pc, #108]	; (8003134 <HAL_RCC_ClockConfig+0x184>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2201      	movs	r2, #1
 80030cc:	4393      	bics	r3, r2
 80030ce:	0019      	movs	r1, r3
 80030d0:	4b18      	ldr	r3, [pc, #96]	; (8003134 <HAL_RCC_ClockConfig+0x184>)
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d8:	4b16      	ldr	r3, [pc, #88]	; (8003134 <HAL_RCC_ClockConfig+0x184>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2201      	movs	r2, #1
 80030de:	4013      	ands	r3, r2
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d001      	beq.n	80030ea <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e020      	b.n	800312c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2204      	movs	r2, #4
 80030f0:	4013      	ands	r3, r2
 80030f2:	d009      	beq.n	8003108 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80030f4:	4b10      	ldr	r3, [pc, #64]	; (8003138 <HAL_RCC_ClockConfig+0x188>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	4a11      	ldr	r2, [pc, #68]	; (8003140 <HAL_RCC_ClockConfig+0x190>)
 80030fa:	4013      	ands	r3, r2
 80030fc:	0019      	movs	r1, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	4b0d      	ldr	r3, [pc, #52]	; (8003138 <HAL_RCC_ClockConfig+0x188>)
 8003104:	430a      	orrs	r2, r1
 8003106:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003108:	f000 f820 	bl	800314c <HAL_RCC_GetSysClockFreq>
 800310c:	0001      	movs	r1, r0
 800310e:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <HAL_RCC_ClockConfig+0x188>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	220f      	movs	r2, #15
 8003116:	4013      	ands	r3, r2
 8003118:	4a0a      	ldr	r2, [pc, #40]	; (8003144 <HAL_RCC_ClockConfig+0x194>)
 800311a:	5cd3      	ldrb	r3, [r2, r3]
 800311c:	000a      	movs	r2, r1
 800311e:	40da      	lsrs	r2, r3
 8003120:	4b09      	ldr	r3, [pc, #36]	; (8003148 <HAL_RCC_ClockConfig+0x198>)
 8003122:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003124:	2000      	movs	r0, #0
 8003126:	f7fe fe57 	bl	8001dd8 <HAL_InitTick>
  
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	0018      	movs	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	b004      	add	sp, #16
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40022000 	.word	0x40022000
 8003138:	40021000 	.word	0x40021000
 800313c:	00001388 	.word	0x00001388
 8003140:	fffff8ff 	.word	0xfffff8ff
 8003144:	08005998 	.word	0x08005998
 8003148:	20000004 	.word	0x20000004

0800314c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800314c:	b590      	push	{r4, r7, lr}
 800314e:	b08f      	sub	sp, #60	; 0x3c
 8003150:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003152:	2314      	movs	r3, #20
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	4a2b      	ldr	r2, [pc, #172]	; (8003204 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003158:	ca13      	ldmia	r2!, {r0, r1, r4}
 800315a:	c313      	stmia	r3!, {r0, r1, r4}
 800315c:	6812      	ldr	r2, [r2, #0]
 800315e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003160:	1d3b      	adds	r3, r7, #4
 8003162:	4a29      	ldr	r2, [pc, #164]	; (8003208 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003164:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003166:	c313      	stmia	r3!, {r0, r1, r4}
 8003168:	6812      	ldr	r2, [r2, #0]
 800316a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003170:	2300      	movs	r3, #0
 8003172:	62bb      	str	r3, [r7, #40]	; 0x28
 8003174:	2300      	movs	r3, #0
 8003176:	637b      	str	r3, [r7, #52]	; 0x34
 8003178:	2300      	movs	r3, #0
 800317a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003180:	4b22      	ldr	r3, [pc, #136]	; (800320c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003188:	220c      	movs	r2, #12
 800318a:	4013      	ands	r3, r2
 800318c:	2b04      	cmp	r3, #4
 800318e:	d002      	beq.n	8003196 <HAL_RCC_GetSysClockFreq+0x4a>
 8003190:	2b08      	cmp	r3, #8
 8003192:	d003      	beq.n	800319c <HAL_RCC_GetSysClockFreq+0x50>
 8003194:	e02d      	b.n	80031f2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003196:	4b1e      	ldr	r3, [pc, #120]	; (8003210 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003198:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800319a:	e02d      	b.n	80031f8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800319c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319e:	0c9b      	lsrs	r3, r3, #18
 80031a0:	220f      	movs	r2, #15
 80031a2:	4013      	ands	r3, r2
 80031a4:	2214      	movs	r2, #20
 80031a6:	18ba      	adds	r2, r7, r2
 80031a8:	5cd3      	ldrb	r3, [r2, r3]
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80031ac:	4b17      	ldr	r3, [pc, #92]	; (800320c <HAL_RCC_GetSysClockFreq+0xc0>)
 80031ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b0:	220f      	movs	r2, #15
 80031b2:	4013      	ands	r3, r2
 80031b4:	1d3a      	adds	r2, r7, #4
 80031b6:	5cd3      	ldrb	r3, [r2, r3]
 80031b8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80031ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031bc:	2380      	movs	r3, #128	; 0x80
 80031be:	025b      	lsls	r3, r3, #9
 80031c0:	4013      	ands	r3, r2
 80031c2:	d009      	beq.n	80031d8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031c6:	4812      	ldr	r0, [pc, #72]	; (8003210 <HAL_RCC_GetSysClockFreq+0xc4>)
 80031c8:	f7fc ffa6 	bl	8000118 <__udivsi3>
 80031cc:	0003      	movs	r3, r0
 80031ce:	001a      	movs	r2, r3
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	4353      	muls	r3, r2
 80031d4:	637b      	str	r3, [r7, #52]	; 0x34
 80031d6:	e009      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80031d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031da:	000a      	movs	r2, r1
 80031dc:	0152      	lsls	r2, r2, #5
 80031de:	1a52      	subs	r2, r2, r1
 80031e0:	0193      	lsls	r3, r2, #6
 80031e2:	1a9b      	subs	r3, r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	185b      	adds	r3, r3, r1
 80031e8:	021b      	lsls	r3, r3, #8
 80031ea:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80031ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031f0:	e002      	b.n	80031f8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031f2:	4b07      	ldr	r3, [pc, #28]	; (8003210 <HAL_RCC_GetSysClockFreq+0xc4>)
 80031f4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031f6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80031f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80031fa:	0018      	movs	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	b00f      	add	sp, #60	; 0x3c
 8003200:	bd90      	pop	{r4, r7, pc}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	08005978 	.word	0x08005978
 8003208:	08005988 	.word	0x08005988
 800320c:	40021000 	.word	0x40021000
 8003210:	007a1200 	.word	0x007a1200

08003214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003218:	4b02      	ldr	r3, [pc, #8]	; (8003224 <HAL_RCC_GetHCLKFreq+0x10>)
 800321a:	681b      	ldr	r3, [r3, #0]
}
 800321c:	0018      	movs	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	20000004 	.word	0x20000004

08003228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800322c:	f7ff fff2 	bl	8003214 <HAL_RCC_GetHCLKFreq>
 8003230:	0001      	movs	r1, r0
 8003232:	4b06      	ldr	r3, [pc, #24]	; (800324c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	0a1b      	lsrs	r3, r3, #8
 8003238:	2207      	movs	r2, #7
 800323a:	4013      	ands	r3, r2
 800323c:	4a04      	ldr	r2, [pc, #16]	; (8003250 <HAL_RCC_GetPCLK1Freq+0x28>)
 800323e:	5cd3      	ldrb	r3, [r2, r3]
 8003240:	40d9      	lsrs	r1, r3
 8003242:	000b      	movs	r3, r1
}    
 8003244:	0018      	movs	r0, r3
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	40021000 	.word	0x40021000
 8003250:	080059a8 	.word	0x080059a8

08003254 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	2380      	movs	r3, #128	; 0x80
 800326a:	025b      	lsls	r3, r3, #9
 800326c:	4013      	ands	r3, r2
 800326e:	d100      	bne.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003270:	e08f      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003272:	2317      	movs	r3, #23
 8003274:	18fb      	adds	r3, r7, r3
 8003276:	2200      	movs	r2, #0
 8003278:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800327a:	4b57      	ldr	r3, [pc, #348]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800327c:	69da      	ldr	r2, [r3, #28]
 800327e:	2380      	movs	r3, #128	; 0x80
 8003280:	055b      	lsls	r3, r3, #21
 8003282:	4013      	ands	r3, r2
 8003284:	d111      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003286:	4b54      	ldr	r3, [pc, #336]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003288:	69da      	ldr	r2, [r3, #28]
 800328a:	4b53      	ldr	r3, [pc, #332]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800328c:	2180      	movs	r1, #128	; 0x80
 800328e:	0549      	lsls	r1, r1, #21
 8003290:	430a      	orrs	r2, r1
 8003292:	61da      	str	r2, [r3, #28]
 8003294:	4b50      	ldr	r3, [pc, #320]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003296:	69da      	ldr	r2, [r3, #28]
 8003298:	2380      	movs	r3, #128	; 0x80
 800329a:	055b      	lsls	r3, r3, #21
 800329c:	4013      	ands	r3, r2
 800329e:	60bb      	str	r3, [r7, #8]
 80032a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032a2:	2317      	movs	r3, #23
 80032a4:	18fb      	adds	r3, r7, r3
 80032a6:	2201      	movs	r2, #1
 80032a8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032aa:	4b4c      	ldr	r3, [pc, #304]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	2380      	movs	r3, #128	; 0x80
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	4013      	ands	r3, r2
 80032b4:	d11a      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032b6:	4b49      	ldr	r3, [pc, #292]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	4b48      	ldr	r3, [pc, #288]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80032bc:	2180      	movs	r1, #128	; 0x80
 80032be:	0049      	lsls	r1, r1, #1
 80032c0:	430a      	orrs	r2, r1
 80032c2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032c4:	f7fe fdce 	bl	8001e64 <HAL_GetTick>
 80032c8:	0003      	movs	r3, r0
 80032ca:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032cc:	e008      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ce:	f7fe fdc9 	bl	8001e64 <HAL_GetTick>
 80032d2:	0002      	movs	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b64      	cmp	r3, #100	; 0x64
 80032da:	d901      	bls.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e077      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e0:	4b3e      	ldr	r3, [pc, #248]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	2380      	movs	r3, #128	; 0x80
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	4013      	ands	r3, r2
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032ec:	4b3a      	ldr	r3, [pc, #232]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032ee:	6a1a      	ldr	r2, [r3, #32]
 80032f0:	23c0      	movs	r3, #192	; 0xc0
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4013      	ands	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d034      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	23c0      	movs	r3, #192	; 0xc0
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4013      	ands	r3, r2
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	429a      	cmp	r2, r3
 800330c:	d02c      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800330e:	4b32      	ldr	r3, [pc, #200]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	4a33      	ldr	r2, [pc, #204]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003314:	4013      	ands	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003318:	4b2f      	ldr	r3, [pc, #188]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800331a:	6a1a      	ldr	r2, [r3, #32]
 800331c:	4b2e      	ldr	r3, [pc, #184]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800331e:	2180      	movs	r1, #128	; 0x80
 8003320:	0249      	lsls	r1, r1, #9
 8003322:	430a      	orrs	r2, r1
 8003324:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003326:	4b2c      	ldr	r3, [pc, #176]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003328:	6a1a      	ldr	r2, [r3, #32]
 800332a:	4b2b      	ldr	r3, [pc, #172]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800332c:	492d      	ldr	r1, [pc, #180]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800332e:	400a      	ands	r2, r1
 8003330:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003332:	4b29      	ldr	r3, [pc, #164]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2201      	movs	r2, #1
 800333c:	4013      	ands	r3, r2
 800333e:	d013      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003340:	f7fe fd90 	bl	8001e64 <HAL_GetTick>
 8003344:	0003      	movs	r3, r0
 8003346:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003348:	e009      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334a:	f7fe fd8b 	bl	8001e64 <HAL_GetTick>
 800334e:	0002      	movs	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	4a24      	ldr	r2, [pc, #144]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d901      	bls.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e038      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800335e:	4b1e      	ldr	r3, [pc, #120]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	2202      	movs	r2, #2
 8003364:	4013      	ands	r3, r2
 8003366:	d0f0      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003368:	4b1b      	ldr	r3, [pc, #108]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	4a1c      	ldr	r2, [pc, #112]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800336e:	4013      	ands	r3, r2
 8003370:	0019      	movs	r1, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	4b18      	ldr	r3, [pc, #96]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003378:	430a      	orrs	r2, r1
 800337a:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800337c:	2317      	movs	r3, #23
 800337e:	18fb      	adds	r3, r7, r3
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d105      	bne.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003386:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003388:	69da      	ldr	r2, [r3, #28]
 800338a:	4b13      	ldr	r3, [pc, #76]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800338c:	4917      	ldr	r1, [pc, #92]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800338e:	400a      	ands	r2, r1
 8003390:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2201      	movs	r2, #1
 8003398:	4013      	ands	r3, r2
 800339a:	d009      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800339c:	4b0e      	ldr	r3, [pc, #56]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800339e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a0:	2203      	movs	r2, #3
 80033a2:	4393      	bics	r3, r2
 80033a4:	0019      	movs	r1, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033ac:	430a      	orrs	r2, r1
 80033ae:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2220      	movs	r2, #32
 80033b6:	4013      	ands	r3, r2
 80033b8:	d009      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033ba:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	2210      	movs	r2, #16
 80033c0:	4393      	bics	r3, r2
 80033c2:	0019      	movs	r1, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	4b03      	ldr	r3, [pc, #12]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033ca:	430a      	orrs	r2, r1
 80033cc:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	0018      	movs	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b006      	add	sp, #24
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40007000 	.word	0x40007000
 80033e0:	fffffcff 	.word	0xfffffcff
 80033e4:	fffeffff 	.word	0xfffeffff
 80033e8:	00001388 	.word	0x00001388
 80033ec:	efffffff 	.word	0xefffffff

080033f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e044      	b.n	800348c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003406:	2b00      	cmp	r3, #0
 8003408:	d107      	bne.n	800341a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2270      	movs	r2, #112	; 0x70
 800340e:	2100      	movs	r1, #0
 8003410:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	0018      	movs	r0, r3
 8003416:	f7fe fad5 	bl	80019c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2224      	movs	r2, #36	; 0x24
 800341e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2101      	movs	r1, #1
 800342c:	438a      	bics	r2, r1
 800342e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	0018      	movs	r0, r3
 8003434:	f000 fa18 	bl	8003868 <UART_SetConfig>
 8003438:	0003      	movs	r3, r0
 800343a:	2b01      	cmp	r3, #1
 800343c:	d101      	bne.n	8003442 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e024      	b.n	800348c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	0018      	movs	r0, r3
 800344e:	f000 fb91 	bl	8003b74 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	490d      	ldr	r1, [pc, #52]	; (8003494 <HAL_UART_Init+0xa4>)
 800345e:	400a      	ands	r2, r1
 8003460:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2108      	movs	r1, #8
 800346e:	438a      	bics	r2, r1
 8003470:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2101      	movs	r1, #1
 800347e:	430a      	orrs	r2, r1
 8003480:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	0018      	movs	r0, r3
 8003486:	f000 fc29 	bl	8003cdc <UART_CheckIdleState>
 800348a:	0003      	movs	r3, r0
}
 800348c:	0018      	movs	r0, r3
 800348e:	46bd      	mov	sp, r7
 8003490:	b002      	add	sp, #8
 8003492:	bd80      	pop	{r7, pc}
 8003494:	fffff7ff 	.word	0xfffff7ff

08003498 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e028      	b.n	80034fc <HAL_UART_DeInit+0x64>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2224      	movs	r2, #36	; 0x24
 80034ae:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2101      	movs	r1, #1
 80034bc:	438a      	bics	r2, r1
 80034be:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2200      	movs	r2, #0
 80034ce:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2200      	movs	r2, #0
 80034d6:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	0018      	movs	r0, r3
 80034dc:	f7fe fb4e 	bl	8001b7c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2270      	movs	r2, #112	; 0x70
 80034f6:	2100      	movs	r1, #0
 80034f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	0018      	movs	r0, r3
 80034fe:	46bd      	mov	sp, r7
 8003500:	b002      	add	sp, #8
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08a      	sub	sp, #40	; 0x28
 8003508:	af02      	add	r7, sp, #8
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	603b      	str	r3, [r7, #0]
 8003510:	1dbb      	adds	r3, r7, #6
 8003512:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003518:	2b20      	cmp	r3, #32
 800351a:	d000      	beq.n	800351e <HAL_UART_Transmit+0x1a>
 800351c:	e095      	b.n	800364a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <HAL_UART_Transmit+0x28>
 8003524:	1dbb      	adds	r3, r7, #6
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e08d      	b.n	800364c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	2380      	movs	r3, #128	; 0x80
 8003536:	015b      	lsls	r3, r3, #5
 8003538:	429a      	cmp	r2, r3
 800353a:	d109      	bne.n	8003550 <HAL_UART_Transmit+0x4c>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d105      	bne.n	8003550 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2201      	movs	r2, #1
 8003548:	4013      	ands	r3, r2
 800354a:	d001      	beq.n	8003550 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e07d      	b.n	800364c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2270      	movs	r2, #112	; 0x70
 8003554:	5c9b      	ldrb	r3, [r3, r2]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_UART_Transmit+0x5a>
 800355a:	2302      	movs	r3, #2
 800355c:	e076      	b.n	800364c <HAL_UART_Transmit+0x148>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2270      	movs	r2, #112	; 0x70
 8003562:	2101      	movs	r1, #1
 8003564:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2221      	movs	r2, #33	; 0x21
 8003570:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003572:	f7fe fc77 	bl	8001e64 <HAL_GetTick>
 8003576:	0003      	movs	r3, r0
 8003578:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	1dba      	adds	r2, r7, #6
 800357e:	2150      	movs	r1, #80	; 0x50
 8003580:	8812      	ldrh	r2, [r2, #0]
 8003582:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	1dba      	adds	r2, r7, #6
 8003588:	2152      	movs	r1, #82	; 0x52
 800358a:	8812      	ldrh	r2, [r2, #0]
 800358c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	2380      	movs	r3, #128	; 0x80
 8003594:	015b      	lsls	r3, r3, #5
 8003596:	429a      	cmp	r2, r3
 8003598:	d108      	bne.n	80035ac <HAL_UART_Transmit+0xa8>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d104      	bne.n	80035ac <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	61bb      	str	r3, [r7, #24]
 80035aa:	e003      	b.n	80035b4 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035b4:	e02d      	b.n	8003612 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	0013      	movs	r3, r2
 80035c0:	2200      	movs	r2, #0
 80035c2:	2180      	movs	r1, #128	; 0x80
 80035c4:	f000 fbd0 	bl	8003d68 <UART_WaitOnFlagUntilTimeout>
 80035c8:	1e03      	subs	r3, r0, #0
 80035ca:	d001      	beq.n	80035d0 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e03d      	b.n	800364c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10b      	bne.n	80035ee <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	881a      	ldrh	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	05d2      	lsls	r2, r2, #23
 80035e0:	0dd2      	lsrs	r2, r2, #23
 80035e2:	b292      	uxth	r2, r2
 80035e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	3302      	adds	r3, #2
 80035ea:	61bb      	str	r3, [r7, #24]
 80035ec:	e008      	b.n	8003600 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	781a      	ldrb	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	b292      	uxth	r2, r2
 80035f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	3301      	adds	r3, #1
 80035fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2252      	movs	r2, #82	; 0x52
 8003604:	5a9b      	ldrh	r3, [r3, r2]
 8003606:	b29b      	uxth	r3, r3
 8003608:	3b01      	subs	r3, #1
 800360a:	b299      	uxth	r1, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2252      	movs	r2, #82	; 0x52
 8003610:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2252      	movs	r2, #82	; 0x52
 8003616:	5a9b      	ldrh	r3, [r3, r2]
 8003618:	b29b      	uxth	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1cb      	bne.n	80035b6 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	0013      	movs	r3, r2
 8003628:	2200      	movs	r2, #0
 800362a:	2140      	movs	r1, #64	; 0x40
 800362c:	f000 fb9c 	bl	8003d68 <UART_WaitOnFlagUntilTimeout>
 8003630:	1e03      	subs	r3, r0, #0
 8003632:	d001      	beq.n	8003638 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e009      	b.n	800364c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2220      	movs	r2, #32
 800363c:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2270      	movs	r2, #112	; 0x70
 8003642:	2100      	movs	r1, #0
 8003644:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003646:	2300      	movs	r3, #0
 8003648:	e000      	b.n	800364c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800364a:	2302      	movs	r3, #2
  }
}
 800364c:	0018      	movs	r0, r3
 800364e:	46bd      	mov	sp, r7
 8003650:	b008      	add	sp, #32
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	1dbb      	adds	r3, r7, #6
 8003660:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003666:	2b20      	cmp	r3, #32
 8003668:	d000      	beq.n	800366c <HAL_UART_Receive_DMA+0x18>
 800366a:	e07f      	b.n	800376c <HAL_UART_Receive_DMA+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_UART_Receive_DMA+0x26>
 8003672:	1dbb      	adds	r3, r7, #6
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e077      	b.n	800376e <HAL_UART_Receive_DMA+0x11a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	2380      	movs	r3, #128	; 0x80
 8003684:	015b      	lsls	r3, r3, #5
 8003686:	429a      	cmp	r2, r3
 8003688:	d109      	bne.n	800369e <HAL_UART_Receive_DMA+0x4a>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d105      	bne.n	800369e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2201      	movs	r2, #1
 8003696:	4013      	ands	r3, r2
 8003698:	d001      	beq.n	800369e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e067      	b.n	800376e <HAL_UART_Receive_DMA+0x11a>
      }
    }

    __HAL_LOCK(huart);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2270      	movs	r2, #112	; 0x70
 80036a2:	5c9b      	ldrb	r3, [r3, r2]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_UART_Receive_DMA+0x58>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e060      	b.n	800376e <HAL_UART_Receive_DMA+0x11a>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2270      	movs	r2, #112	; 0x70
 80036b0:	2101      	movs	r1, #1
 80036b2:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	1dba      	adds	r2, r7, #6
 80036be:	2158      	movs	r1, #88	; 0x58
 80036c0:	8812      	ldrh	r2, [r2, #0]
 80036c2:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2222      	movs	r2, #34	; 0x22
 80036ce:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d02a      	beq.n	800372e <HAL_UART_Receive_DMA+0xda>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036dc:	4a26      	ldr	r2, [pc, #152]	; (8003778 <HAL_UART_Receive_DMA+0x124>)
 80036de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036e4:	4a25      	ldr	r2, [pc, #148]	; (800377c <HAL_UART_Receive_DMA+0x128>)
 80036e6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ec:	4a24      	ldr	r2, [pc, #144]	; (8003780 <HAL_UART_Receive_DMA+0x12c>)
 80036ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036f4:	2200      	movs	r2, #0
 80036f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	3324      	adds	r3, #36	; 0x24
 8003702:	0019      	movs	r1, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003708:	001a      	movs	r2, r3
 800370a:	1dbb      	adds	r3, r7, #6
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	f7fe fd44 	bl	800219a <HAL_DMA_Start_IT>
 8003712:	1e03      	subs	r3, r0, #0
 8003714:	d00b      	beq.n	800372e <HAL_UART_Receive_DMA+0xda>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2210      	movs	r2, #16
 800371a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2270      	movs	r2, #112	; 0x70
 8003720:	2100      	movs	r1, #0
 8003722:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2220      	movs	r2, #32
 8003728:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e01f      	b.n	800376e <HAL_UART_Receive_DMA+0x11a>
      }
    }
    __HAL_UNLOCK(huart);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2270      	movs	r2, #112	; 0x70
 8003732:	2100      	movs	r1, #0
 8003734:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2180      	movs	r1, #128	; 0x80
 8003742:	0049      	lsls	r1, r1, #1
 8003744:	430a      	orrs	r2, r1
 8003746:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2101      	movs	r1, #1
 8003754:	430a      	orrs	r2, r1
 8003756:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689a      	ldr	r2, [r3, #8]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2140      	movs	r1, #64	; 0x40
 8003764:	430a      	orrs	r2, r1
 8003766:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003768:	2300      	movs	r3, #0
 800376a:	e000      	b.n	800376e <HAL_UART_Receive_DMA+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800376c:	2302      	movs	r3, #2
  }
}
 800376e:	0018      	movs	r0, r3
 8003770:	46bd      	mov	sp, r7
 8003772:	b004      	add	sp, #16
 8003774:	bd80      	pop	{r7, pc}
 8003776:	46c0      	nop			; (mov r8, r8)
 8003778:	08003ecd 	.word	0x08003ecd
 800377c:	08003f35 	.word	0x08003f35
 8003780:	08003f53 	.word	0x08003f53

08003784 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4927      	ldr	r1, [pc, #156]	; (8003834 <HAL_UART_AbortReceive+0xb0>)
 8003798:	400a      	ands	r2, r1
 800379a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2101      	movs	r1, #1
 80037a8:	438a      	bics	r2, r1
 80037aa:	609a      	str	r2, [r3, #8]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	2240      	movs	r2, #64	; 0x40
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b40      	cmp	r3, #64	; 0x40
 80037b8:	d123      	bne.n	8003802 <HAL_UART_AbortReceive+0x7e>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2140      	movs	r1, #64	; 0x40
 80037c6:	438a      	bics	r2, r1
 80037c8:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d017      	beq.n	8003802 <HAL_UART_AbortReceive+0x7e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037d6:	2200      	movs	r2, #0
 80037d8:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037de:	0018      	movs	r0, r3
 80037e0:	f7fe fd41 	bl	8002266 <HAL_DMA_Abort>
 80037e4:	1e03      	subs	r3, r0, #0
 80037e6:	d00c      	beq.n	8003802 <HAL_UART_AbortReceive+0x7e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037ec:	0018      	movs	r0, r3
 80037ee:	f7fe fe14 	bl	800241a <HAL_DMA_GetError>
 80037f2:	0003      	movs	r3, r0
 80037f4:	2b20      	cmp	r3, #32
 80037f6:	d104      	bne.n	8003802 <HAL_UART_AbortReceive+0x7e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2210      	movs	r2, #16
 80037fc:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e013      	b.n	800382a <HAL_UART_AbortReceive+0xa6>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	225a      	movs	r2, #90	; 0x5a
 8003806:	2100      	movs	r1, #0
 8003808:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	220f      	movs	r2, #15
 8003810:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699a      	ldr	r2, [r3, #24]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2108      	movs	r1, #8
 800381e:	430a      	orrs	r2, r1
 8003820:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2220      	movs	r2, #32
 8003826:	679a      	str	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	0018      	movs	r0, r3
 800382c:	46bd      	mov	sp, r7
 800382e:	b002      	add	sp, #8
 8003830:	bd80      	pop	{r7, pc}
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	fffffedf 	.word	0xfffffedf

08003838 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003840:	46c0      	nop			; (mov r8, r8)
 8003842:	46bd      	mov	sp, r7
 8003844:	b002      	add	sp, #8
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003850:	46c0      	nop			; (mov r8, r8)
 8003852:	46bd      	mov	sp, r7
 8003854:	b002      	add	sp, #8
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003860:	46c0      	nop			; (mov r8, r8)
 8003862:	46bd      	mov	sp, r7
 8003864:	b002      	add	sp, #8
 8003866:	bd80      	pop	{r7, pc}

08003868 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003870:	2300      	movs	r3, #0
 8003872:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003874:	2317      	movs	r3, #23
 8003876:	18fb      	adds	r3, r7, r3
 8003878:	2200      	movs	r2, #0
 800387a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	431a      	orrs	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	4313      	orrs	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4aad      	ldr	r2, [pc, #692]	; (8003b50 <UART_SetConfig+0x2e8>)
 800389c:	4013      	ands	r3, r2
 800389e:	0019      	movs	r1, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	4aa8      	ldr	r2, [pc, #672]	; (8003b54 <UART_SetConfig+0x2ec>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	0019      	movs	r1, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	4a9f      	ldr	r2, [pc, #636]	; (8003b58 <UART_SetConfig+0x2f0>)
 80038da:	4013      	ands	r3, r2
 80038dc:	0019      	movs	r1, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a9b      	ldr	r2, [pc, #620]	; (8003b5c <UART_SetConfig+0x2f4>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d125      	bne.n	800393e <UART_SetConfig+0xd6>
 80038f2:	4b9b      	ldr	r3, [pc, #620]	; (8003b60 <UART_SetConfig+0x2f8>)
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	2203      	movs	r2, #3
 80038f8:	4013      	ands	r3, r2
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d00f      	beq.n	800391e <UART_SetConfig+0xb6>
 80038fe:	d304      	bcc.n	800390a <UART_SetConfig+0xa2>
 8003900:	2b02      	cmp	r3, #2
 8003902:	d011      	beq.n	8003928 <UART_SetConfig+0xc0>
 8003904:	2b03      	cmp	r3, #3
 8003906:	d005      	beq.n	8003914 <UART_SetConfig+0xac>
 8003908:	e013      	b.n	8003932 <UART_SetConfig+0xca>
 800390a:	231f      	movs	r3, #31
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	2200      	movs	r2, #0
 8003910:	701a      	strb	r2, [r3, #0]
 8003912:	e022      	b.n	800395a <UART_SetConfig+0xf2>
 8003914:	231f      	movs	r3, #31
 8003916:	18fb      	adds	r3, r7, r3
 8003918:	2202      	movs	r2, #2
 800391a:	701a      	strb	r2, [r3, #0]
 800391c:	e01d      	b.n	800395a <UART_SetConfig+0xf2>
 800391e:	231f      	movs	r3, #31
 8003920:	18fb      	adds	r3, r7, r3
 8003922:	2204      	movs	r2, #4
 8003924:	701a      	strb	r2, [r3, #0]
 8003926:	e018      	b.n	800395a <UART_SetConfig+0xf2>
 8003928:	231f      	movs	r3, #31
 800392a:	18fb      	adds	r3, r7, r3
 800392c:	2208      	movs	r2, #8
 800392e:	701a      	strb	r2, [r3, #0]
 8003930:	e013      	b.n	800395a <UART_SetConfig+0xf2>
 8003932:	231f      	movs	r3, #31
 8003934:	18fb      	adds	r3, r7, r3
 8003936:	2210      	movs	r2, #16
 8003938:	701a      	strb	r2, [r3, #0]
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	e00d      	b.n	800395a <UART_SetConfig+0xf2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a88      	ldr	r2, [pc, #544]	; (8003b64 <UART_SetConfig+0x2fc>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d104      	bne.n	8003952 <UART_SetConfig+0xea>
 8003948:	231f      	movs	r3, #31
 800394a:	18fb      	adds	r3, r7, r3
 800394c:	2200      	movs	r2, #0
 800394e:	701a      	strb	r2, [r3, #0]
 8003950:	e003      	b.n	800395a <UART_SetConfig+0xf2>
 8003952:	231f      	movs	r3, #31
 8003954:	18fb      	adds	r3, r7, r3
 8003956:	2210      	movs	r2, #16
 8003958:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69da      	ldr	r2, [r3, #28]
 800395e:	2380      	movs	r3, #128	; 0x80
 8003960:	021b      	lsls	r3, r3, #8
 8003962:	429a      	cmp	r2, r3
 8003964:	d000      	beq.n	8003968 <UART_SetConfig+0x100>
 8003966:	e07d      	b.n	8003a64 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8003968:	231f      	movs	r3, #31
 800396a:	18fb      	adds	r3, r7, r3
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b02      	cmp	r3, #2
 8003970:	d01c      	beq.n	80039ac <UART_SetConfig+0x144>
 8003972:	dc02      	bgt.n	800397a <UART_SetConfig+0x112>
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <UART_SetConfig+0x11c>
 8003978:	e04b      	b.n	8003a12 <UART_SetConfig+0x1aa>
 800397a:	2b04      	cmp	r3, #4
 800397c:	d025      	beq.n	80039ca <UART_SetConfig+0x162>
 800397e:	2b08      	cmp	r3, #8
 8003980:	d037      	beq.n	80039f2 <UART_SetConfig+0x18a>
 8003982:	e046      	b.n	8003a12 <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003984:	f7ff fc50 	bl	8003228 <HAL_RCC_GetPCLK1Freq>
 8003988:	0003      	movs	r3, r0
 800398a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	005a      	lsls	r2, r3, #1
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	085b      	lsrs	r3, r3, #1
 8003996:	18d2      	adds	r2, r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	0019      	movs	r1, r3
 800399e:	0010      	movs	r0, r2
 80039a0:	f7fc fbba 	bl	8000118 <__udivsi3>
 80039a4:	0003      	movs	r3, r0
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	61bb      	str	r3, [r7, #24]
        break;
 80039aa:	e037      	b.n	8003a1c <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	085b      	lsrs	r3, r3, #1
 80039b2:	4a6d      	ldr	r2, [pc, #436]	; (8003b68 <UART_SetConfig+0x300>)
 80039b4:	189a      	adds	r2, r3, r2
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	0019      	movs	r1, r3
 80039bc:	0010      	movs	r0, r2
 80039be:	f7fc fbab 	bl	8000118 <__udivsi3>
 80039c2:	0003      	movs	r3, r0
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	61bb      	str	r3, [r7, #24]
        break;
 80039c8:	e028      	b.n	8003a1c <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ca:	f7ff fbbf 	bl	800314c <HAL_RCC_GetSysClockFreq>
 80039ce:	0003      	movs	r3, r0
 80039d0:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	005a      	lsls	r2, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	085b      	lsrs	r3, r3, #1
 80039dc:	18d2      	adds	r2, r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	0019      	movs	r1, r3
 80039e4:	0010      	movs	r0, r2
 80039e6:	f7fc fb97 	bl	8000118 <__udivsi3>
 80039ea:	0003      	movs	r3, r0
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	61bb      	str	r3, [r7, #24]
        break;
 80039f0:	e014      	b.n	8003a1c <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	085b      	lsrs	r3, r3, #1
 80039f8:	2280      	movs	r2, #128	; 0x80
 80039fa:	0252      	lsls	r2, r2, #9
 80039fc:	189a      	adds	r2, r3, r2
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	0019      	movs	r1, r3
 8003a04:	0010      	movs	r0, r2
 8003a06:	f7fc fb87 	bl	8000118 <__udivsi3>
 8003a0a:	0003      	movs	r3, r0
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	61bb      	str	r3, [r7, #24]
        break;
 8003a10:	e004      	b.n	8003a1c <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8003a12:	2317      	movs	r3, #23
 8003a14:	18fb      	adds	r3, r7, r3
 8003a16:	2201      	movs	r2, #1
 8003a18:	701a      	strb	r2, [r3, #0]
        break;
 8003a1a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	2b0f      	cmp	r3, #15
 8003a20:	d91b      	bls.n	8003a5a <UART_SetConfig+0x1f2>
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	4a51      	ldr	r2, [pc, #324]	; (8003b6c <UART_SetConfig+0x304>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d817      	bhi.n	8003a5a <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	200a      	movs	r0, #10
 8003a30:	183b      	adds	r3, r7, r0
 8003a32:	210f      	movs	r1, #15
 8003a34:	438a      	bics	r2, r1
 8003a36:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	085b      	lsrs	r3, r3, #1
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2207      	movs	r2, #7
 8003a40:	4013      	ands	r3, r2
 8003a42:	b299      	uxth	r1, r3
 8003a44:	183b      	adds	r3, r7, r0
 8003a46:	183a      	adds	r2, r7, r0
 8003a48:	8812      	ldrh	r2, [r2, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	183a      	adds	r2, r7, r0
 8003a54:	8812      	ldrh	r2, [r2, #0]
 8003a56:	60da      	str	r2, [r3, #12]
 8003a58:	e06c      	b.n	8003b34 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003a5a:	2317      	movs	r3, #23
 8003a5c:	18fb      	adds	r3, r7, r3
 8003a5e:	2201      	movs	r2, #1
 8003a60:	701a      	strb	r2, [r3, #0]
 8003a62:	e067      	b.n	8003b34 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8003a64:	231f      	movs	r3, #31
 8003a66:	18fb      	adds	r3, r7, r3
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d01b      	beq.n	8003aa6 <UART_SetConfig+0x23e>
 8003a6e:	dc02      	bgt.n	8003a76 <UART_SetConfig+0x20e>
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <UART_SetConfig+0x218>
 8003a74:	e049      	b.n	8003b0a <UART_SetConfig+0x2a2>
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d024      	beq.n	8003ac4 <UART_SetConfig+0x25c>
 8003a7a:	2b08      	cmp	r3, #8
 8003a7c:	d035      	beq.n	8003aea <UART_SetConfig+0x282>
 8003a7e:	e044      	b.n	8003b0a <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a80:	f7ff fbd2 	bl	8003228 <HAL_RCC_GetPCLK1Freq>
 8003a84:	0003      	movs	r3, r0
 8003a86:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	085a      	lsrs	r2, r3, #1
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	18d2      	adds	r2, r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	0019      	movs	r1, r3
 8003a98:	0010      	movs	r0, r2
 8003a9a:	f7fc fb3d 	bl	8000118 <__udivsi3>
 8003a9e:	0003      	movs	r3, r0
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	61bb      	str	r3, [r7, #24]
        break;
 8003aa4:	e036      	b.n	8003b14 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	085b      	lsrs	r3, r3, #1
 8003aac:	4a30      	ldr	r2, [pc, #192]	; (8003b70 <UART_SetConfig+0x308>)
 8003aae:	189a      	adds	r2, r3, r2
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	0019      	movs	r1, r3
 8003ab6:	0010      	movs	r0, r2
 8003ab8:	f7fc fb2e 	bl	8000118 <__udivsi3>
 8003abc:	0003      	movs	r3, r0
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	61bb      	str	r3, [r7, #24]
        break;
 8003ac2:	e027      	b.n	8003b14 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ac4:	f7ff fb42 	bl	800314c <HAL_RCC_GetSysClockFreq>
 8003ac8:	0003      	movs	r3, r0
 8003aca:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	085a      	lsrs	r2, r3, #1
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	18d2      	adds	r2, r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	0019      	movs	r1, r3
 8003adc:	0010      	movs	r0, r2
 8003ade:	f7fc fb1b 	bl	8000118 <__udivsi3>
 8003ae2:	0003      	movs	r3, r0
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	61bb      	str	r3, [r7, #24]
        break;
 8003ae8:	e014      	b.n	8003b14 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	085b      	lsrs	r3, r3, #1
 8003af0:	2280      	movs	r2, #128	; 0x80
 8003af2:	0212      	lsls	r2, r2, #8
 8003af4:	189a      	adds	r2, r3, r2
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	0019      	movs	r1, r3
 8003afc:	0010      	movs	r0, r2
 8003afe:	f7fc fb0b 	bl	8000118 <__udivsi3>
 8003b02:	0003      	movs	r3, r0
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	61bb      	str	r3, [r7, #24]
        break;
 8003b08:	e004      	b.n	8003b14 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8003b0a:	2317      	movs	r3, #23
 8003b0c:	18fb      	adds	r3, r7, r3
 8003b0e:	2201      	movs	r2, #1
 8003b10:	701a      	strb	r2, [r3, #0]
        break;
 8003b12:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	2b0f      	cmp	r3, #15
 8003b18:	d908      	bls.n	8003b2c <UART_SetConfig+0x2c4>
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	4a13      	ldr	r2, [pc, #76]	; (8003b6c <UART_SetConfig+0x304>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d804      	bhi.n	8003b2c <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	60da      	str	r2, [r3, #12]
 8003b2a:	e003      	b.n	8003b34 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003b2c:	2317      	movs	r3, #23
 8003b2e:	18fb      	adds	r3, r7, r3
 8003b30:	2201      	movs	r2, #1
 8003b32:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003b40:	2317      	movs	r3, #23
 8003b42:	18fb      	adds	r3, r7, r3
 8003b44:	781b      	ldrb	r3, [r3, #0]
}
 8003b46:	0018      	movs	r0, r3
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	b008      	add	sp, #32
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	ffff69f3 	.word	0xffff69f3
 8003b54:	ffffcfff 	.word	0xffffcfff
 8003b58:	fffff4ff 	.word	0xfffff4ff
 8003b5c:	40013800 	.word	0x40013800
 8003b60:	40021000 	.word	0x40021000
 8003b64:	40004400 	.word	0x40004400
 8003b68:	00f42400 	.word	0x00f42400
 8003b6c:	0000ffff 	.word	0x0000ffff
 8003b70:	007a1200 	.word	0x007a1200

08003b74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	2201      	movs	r2, #1
 8003b82:	4013      	ands	r3, r2
 8003b84:	d00b      	beq.n	8003b9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	4a4a      	ldr	r2, [pc, #296]	; (8003cb8 <UART_AdvFeatureConfig+0x144>)
 8003b8e:	4013      	ands	r3, r2
 8003b90:	0019      	movs	r1, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	d00b      	beq.n	8003bc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	4a43      	ldr	r2, [pc, #268]	; (8003cbc <UART_AdvFeatureConfig+0x148>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	0019      	movs	r1, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	2204      	movs	r2, #4
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	d00b      	beq.n	8003be2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	4a3b      	ldr	r2, [pc, #236]	; (8003cc0 <UART_AdvFeatureConfig+0x14c>)
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	0019      	movs	r1, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	2208      	movs	r2, #8
 8003be8:	4013      	ands	r3, r2
 8003bea:	d00b      	beq.n	8003c04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	4a34      	ldr	r2, [pc, #208]	; (8003cc4 <UART_AdvFeatureConfig+0x150>)
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	0019      	movs	r1, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	2210      	movs	r2, #16
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d00b      	beq.n	8003c26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	4a2c      	ldr	r2, [pc, #176]	; (8003cc8 <UART_AdvFeatureConfig+0x154>)
 8003c16:	4013      	ands	r3, r2
 8003c18:	0019      	movs	r1, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	d00b      	beq.n	8003c48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	4a25      	ldr	r2, [pc, #148]	; (8003ccc <UART_AdvFeatureConfig+0x158>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	0019      	movs	r1, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	2240      	movs	r2, #64	; 0x40
 8003c4e:	4013      	ands	r3, r2
 8003c50:	d01d      	beq.n	8003c8e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	4a1d      	ldr	r2, [pc, #116]	; (8003cd0 <UART_AdvFeatureConfig+0x15c>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	0019      	movs	r1, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c6e:	2380      	movs	r3, #128	; 0x80
 8003c70:	035b      	lsls	r3, r3, #13
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d10b      	bne.n	8003c8e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	4a15      	ldr	r2, [pc, #84]	; (8003cd4 <UART_AdvFeatureConfig+0x160>)
 8003c7e:	4013      	ands	r3, r2
 8003c80:	0019      	movs	r1, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	2280      	movs	r2, #128	; 0x80
 8003c94:	4013      	ands	r3, r2
 8003c96:	d00b      	beq.n	8003cb0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	4a0e      	ldr	r2, [pc, #56]	; (8003cd8 <UART_AdvFeatureConfig+0x164>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	0019      	movs	r1, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	605a      	str	r2, [r3, #4]
  }
}
 8003cb0:	46c0      	nop			; (mov r8, r8)
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	b002      	add	sp, #8
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	fffdffff 	.word	0xfffdffff
 8003cbc:	fffeffff 	.word	0xfffeffff
 8003cc0:	fffbffff 	.word	0xfffbffff
 8003cc4:	ffff7fff 	.word	0xffff7fff
 8003cc8:	ffffefff 	.word	0xffffefff
 8003ccc:	ffffdfff 	.word	0xffffdfff
 8003cd0:	ffefffff 	.word	0xffefffff
 8003cd4:	ff9fffff 	.word	0xff9fffff
 8003cd8:	fff7ffff 	.word	0xfff7ffff

08003cdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af02      	add	r7, sp, #8
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003cea:	f7fe f8bb 	bl	8001e64 <HAL_GetTick>
 8003cee:	0003      	movs	r3, r0
 8003cf0:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2208      	movs	r2, #8
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	d10d      	bne.n	8003d1c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	2380      	movs	r3, #128	; 0x80
 8003d04:	0399      	lsls	r1, r3, #14
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	4b16      	ldr	r3, [pc, #88]	; (8003d64 <UART_CheckIdleState+0x88>)
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	0013      	movs	r3, r2
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f000 f82a 	bl	8003d68 <UART_WaitOnFlagUntilTimeout>
 8003d14:	1e03      	subs	r3, r0, #0
 8003d16:	d001      	beq.n	8003d1c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e01f      	b.n	8003d5c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2204      	movs	r2, #4
 8003d24:	4013      	ands	r3, r2
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d10d      	bne.n	8003d46 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	2380      	movs	r3, #128	; 0x80
 8003d2e:	03d9      	lsls	r1, r3, #15
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	4b0c      	ldr	r3, [pc, #48]	; (8003d64 <UART_CheckIdleState+0x88>)
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	0013      	movs	r3, r2
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f000 f815 	bl	8003d68 <UART_WaitOnFlagUntilTimeout>
 8003d3e:	1e03      	subs	r3, r0, #0
 8003d40:	d001      	beq.n	8003d46 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e00a      	b.n	8003d5c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2270      	movs	r2, #112	; 0x70
 8003d56:	2100      	movs	r1, #0
 8003d58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	b004      	add	sp, #16
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	01ffffff 	.word	0x01ffffff

08003d68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	603b      	str	r3, [r7, #0]
 8003d74:	1dfb      	adds	r3, r7, #7
 8003d76:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d78:	e05d      	b.n	8003e36 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	d05a      	beq.n	8003e36 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d80:	f7fe f870 	bl	8001e64 <HAL_GetTick>
 8003d84:	0002      	movs	r2, r0
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d302      	bcc.n	8003d96 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d11b      	bne.n	8003dce <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	492f      	ldr	r1, [pc, #188]	; (8003e60 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003da2:	400a      	ands	r2, r1
 8003da4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2101      	movs	r1, #1
 8003db2:	438a      	bics	r2, r1
 8003db4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2220      	movs	r2, #32
 8003dba:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2270      	movs	r2, #112	; 0x70
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e043      	b.n	8003e56 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2204      	movs	r2, #4
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	d02d      	beq.n	8003e36 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	69da      	ldr	r2, [r3, #28]
 8003de0:	2380      	movs	r3, #128	; 0x80
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	401a      	ands	r2, r3
 8003de6:	2380      	movs	r3, #128	; 0x80
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d123      	bne.n	8003e36 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2280      	movs	r2, #128	; 0x80
 8003df4:	0112      	lsls	r2, r2, #4
 8003df6:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4917      	ldr	r1, [pc, #92]	; (8003e60 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003e04:	400a      	ands	r2, r1
 8003e06:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689a      	ldr	r2, [r3, #8]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2101      	movs	r1, #1
 8003e14:	438a      	bics	r2, r1
 8003e16:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2220      	movs	r2, #32
 8003e22:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2220      	movs	r2, #32
 8003e28:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2270      	movs	r2, #112	; 0x70
 8003e2e:	2100      	movs	r1, #0
 8003e30:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e00f      	b.n	8003e56 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	69db      	ldr	r3, [r3, #28]
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	425a      	negs	r2, r3
 8003e46:	4153      	adcs	r3, r2
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	001a      	movs	r2, r3
 8003e4c:	1dfb      	adds	r3, r7, #7
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d092      	beq.n	8003d7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	0018      	movs	r0, r3
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	b004      	add	sp, #16
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	46c0      	nop			; (mov r8, r8)
 8003e60:	fffffe5f 	.word	0xfffffe5f

08003e64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	21c0      	movs	r1, #192	; 0xc0
 8003e78:	438a      	bics	r2, r1
 8003e7a:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	46bd      	mov	sp, r7
 8003e86:	b002      	add	sp, #8
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	490a      	ldr	r1, [pc, #40]	; (8003ec8 <UART_EndRxTransfer+0x3c>)
 8003ea0:	400a      	ands	r2, r1
 8003ea2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689a      	ldr	r2, [r3, #8]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2101      	movs	r1, #1
 8003eb0:	438a      	bics	r2, r1
 8003eb2:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003ec0:	46c0      	nop			; (mov r8, r8)
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	b002      	add	sp, #8
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	fffffedf 	.word	0xfffffedf

08003ecc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	2b20      	cmp	r3, #32
 8003ee0:	d01e      	beq.n	8003f20 <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	225a      	movs	r2, #90	; 0x5a
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	490e      	ldr	r1, [pc, #56]	; (8003f30 <UART_DMAReceiveCplt+0x64>)
 8003ef6:	400a      	ands	r2, r1
 8003ef8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2101      	movs	r1, #1
 8003f06:	438a      	bics	r2, r1
 8003f08:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2140      	movs	r1, #64	; 0x40
 8003f16:	438a      	bics	r2, r1
 8003f18:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	0018      	movs	r0, r3
 8003f24:	f7ff fc88 	bl	8003838 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f28:	46c0      	nop			; (mov r8, r8)
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	b004      	add	sp, #16
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	fffffeff 	.word	0xfffffeff

08003f34 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	0018      	movs	r0, r3
 8003f46:	f7ff fc7f 	bl	8003848 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b004      	add	sp, #16
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b086      	sub	sp, #24
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f64:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	2280      	movs	r2, #128	; 0x80
 8003f74:	4013      	ands	r3, r2
 8003f76:	2b80      	cmp	r3, #128	; 0x80
 8003f78:	d10a      	bne.n	8003f90 <UART_DMAError+0x3e>
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	2b21      	cmp	r3, #33	; 0x21
 8003f7e:	d107      	bne.n	8003f90 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	2252      	movs	r2, #82	; 0x52
 8003f84:	2100      	movs	r1, #0
 8003f86:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f7ff ff6a 	bl	8003e64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	2240      	movs	r2, #64	; 0x40
 8003f98:	4013      	ands	r3, r2
 8003f9a:	2b40      	cmp	r3, #64	; 0x40
 8003f9c:	d10a      	bne.n	8003fb4 <UART_DMAError+0x62>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2b22      	cmp	r3, #34	; 0x22
 8003fa2:	d107      	bne.n	8003fb4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	225a      	movs	r2, #90	; 0x5a
 8003fa8:	2100      	movs	r1, #0
 8003faa:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	0018      	movs	r0, r3
 8003fb0:	f7ff ff6c 	bl	8003e8c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fb8:	2210      	movs	r2, #16
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	f7ff fc48 	bl	8003858 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fc8:	46c0      	nop			; (mov r8, r8)
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	b006      	add	sp, #24
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <__errno>:
 8003fd0:	4b01      	ldr	r3, [pc, #4]	; (8003fd8 <__errno+0x8>)
 8003fd2:	6818      	ldr	r0, [r3, #0]
 8003fd4:	4770      	bx	lr
 8003fd6:	46c0      	nop			; (mov r8, r8)
 8003fd8:	20000010 	.word	0x20000010

08003fdc <__libc_init_array>:
 8003fdc:	b570      	push	{r4, r5, r6, lr}
 8003fde:	2600      	movs	r6, #0
 8003fe0:	4d0c      	ldr	r5, [pc, #48]	; (8004014 <__libc_init_array+0x38>)
 8003fe2:	4c0d      	ldr	r4, [pc, #52]	; (8004018 <__libc_init_array+0x3c>)
 8003fe4:	1b64      	subs	r4, r4, r5
 8003fe6:	10a4      	asrs	r4, r4, #2
 8003fe8:	42a6      	cmp	r6, r4
 8003fea:	d109      	bne.n	8004000 <__libc_init_array+0x24>
 8003fec:	2600      	movs	r6, #0
 8003fee:	f001 fa61 	bl	80054b4 <_init>
 8003ff2:	4d0a      	ldr	r5, [pc, #40]	; (800401c <__libc_init_array+0x40>)
 8003ff4:	4c0a      	ldr	r4, [pc, #40]	; (8004020 <__libc_init_array+0x44>)
 8003ff6:	1b64      	subs	r4, r4, r5
 8003ff8:	10a4      	asrs	r4, r4, #2
 8003ffa:	42a6      	cmp	r6, r4
 8003ffc:	d105      	bne.n	800400a <__libc_init_array+0x2e>
 8003ffe:	bd70      	pop	{r4, r5, r6, pc}
 8004000:	00b3      	lsls	r3, r6, #2
 8004002:	58eb      	ldr	r3, [r5, r3]
 8004004:	4798      	blx	r3
 8004006:	3601      	adds	r6, #1
 8004008:	e7ee      	b.n	8003fe8 <__libc_init_array+0xc>
 800400a:	00b3      	lsls	r3, r6, #2
 800400c:	58eb      	ldr	r3, [r5, r3]
 800400e:	4798      	blx	r3
 8004010:	3601      	adds	r6, #1
 8004012:	e7f2      	b.n	8003ffa <__libc_init_array+0x1e>
 8004014:	08005b54 	.word	0x08005b54
 8004018:	08005b54 	.word	0x08005b54
 800401c:	08005b54 	.word	0x08005b54
 8004020:	08005b58 	.word	0x08005b58

08004024 <memset>:
 8004024:	0003      	movs	r3, r0
 8004026:	1812      	adds	r2, r2, r0
 8004028:	4293      	cmp	r3, r2
 800402a:	d100      	bne.n	800402e <memset+0xa>
 800402c:	4770      	bx	lr
 800402e:	7019      	strb	r1, [r3, #0]
 8004030:	3301      	adds	r3, #1
 8004032:	e7f9      	b.n	8004028 <memset+0x4>

08004034 <iprintf>:
 8004034:	b40f      	push	{r0, r1, r2, r3}
 8004036:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <iprintf+0x30>)
 8004038:	b513      	push	{r0, r1, r4, lr}
 800403a:	681c      	ldr	r4, [r3, #0]
 800403c:	2c00      	cmp	r4, #0
 800403e:	d005      	beq.n	800404c <iprintf+0x18>
 8004040:	69a3      	ldr	r3, [r4, #24]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d102      	bne.n	800404c <iprintf+0x18>
 8004046:	0020      	movs	r0, r4
 8004048:	f000 fae4 	bl	8004614 <__sinit>
 800404c:	ab05      	add	r3, sp, #20
 800404e:	9a04      	ldr	r2, [sp, #16]
 8004050:	68a1      	ldr	r1, [r4, #8]
 8004052:	0020      	movs	r0, r4
 8004054:	9301      	str	r3, [sp, #4]
 8004056:	f000 fe37 	bl	8004cc8 <_vfiprintf_r>
 800405a:	bc16      	pop	{r1, r2, r4}
 800405c:	bc08      	pop	{r3}
 800405e:	b004      	add	sp, #16
 8004060:	4718      	bx	r3
 8004062:	46c0      	nop			; (mov r8, r8)
 8004064:	20000010 	.word	0x20000010

08004068 <putchar>:
 8004068:	4b08      	ldr	r3, [pc, #32]	; (800408c <putchar+0x24>)
 800406a:	b570      	push	{r4, r5, r6, lr}
 800406c:	681c      	ldr	r4, [r3, #0]
 800406e:	0005      	movs	r5, r0
 8004070:	2c00      	cmp	r4, #0
 8004072:	d005      	beq.n	8004080 <putchar+0x18>
 8004074:	69a3      	ldr	r3, [r4, #24]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d102      	bne.n	8004080 <putchar+0x18>
 800407a:	0020      	movs	r0, r4
 800407c:	f000 faca 	bl	8004614 <__sinit>
 8004080:	0029      	movs	r1, r5
 8004082:	68a2      	ldr	r2, [r4, #8]
 8004084:	0020      	movs	r0, r4
 8004086:	f001 f8ab 	bl	80051e0 <_putc_r>
 800408a:	bd70      	pop	{r4, r5, r6, pc}
 800408c:	20000010 	.word	0x20000010

08004090 <_puts_r>:
 8004090:	b570      	push	{r4, r5, r6, lr}
 8004092:	0005      	movs	r5, r0
 8004094:	000e      	movs	r6, r1
 8004096:	2800      	cmp	r0, #0
 8004098:	d004      	beq.n	80040a4 <_puts_r+0x14>
 800409a:	6983      	ldr	r3, [r0, #24]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <_puts_r+0x14>
 80040a0:	f000 fab8 	bl	8004614 <__sinit>
 80040a4:	69ab      	ldr	r3, [r5, #24]
 80040a6:	68ac      	ldr	r4, [r5, #8]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d102      	bne.n	80040b2 <_puts_r+0x22>
 80040ac:	0028      	movs	r0, r5
 80040ae:	f000 fab1 	bl	8004614 <__sinit>
 80040b2:	4b24      	ldr	r3, [pc, #144]	; (8004144 <_puts_r+0xb4>)
 80040b4:	429c      	cmp	r4, r3
 80040b6:	d10f      	bne.n	80040d8 <_puts_r+0x48>
 80040b8:	686c      	ldr	r4, [r5, #4]
 80040ba:	89a3      	ldrh	r3, [r4, #12]
 80040bc:	071b      	lsls	r3, r3, #28
 80040be:	d502      	bpl.n	80040c6 <_puts_r+0x36>
 80040c0:	6923      	ldr	r3, [r4, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d11f      	bne.n	8004106 <_puts_r+0x76>
 80040c6:	0021      	movs	r1, r4
 80040c8:	0028      	movs	r0, r5
 80040ca:	f000 f935 	bl	8004338 <__swsetup_r>
 80040ce:	2800      	cmp	r0, #0
 80040d0:	d019      	beq.n	8004106 <_puts_r+0x76>
 80040d2:	2001      	movs	r0, #1
 80040d4:	4240      	negs	r0, r0
 80040d6:	bd70      	pop	{r4, r5, r6, pc}
 80040d8:	4b1b      	ldr	r3, [pc, #108]	; (8004148 <_puts_r+0xb8>)
 80040da:	429c      	cmp	r4, r3
 80040dc:	d101      	bne.n	80040e2 <_puts_r+0x52>
 80040de:	68ac      	ldr	r4, [r5, #8]
 80040e0:	e7eb      	b.n	80040ba <_puts_r+0x2a>
 80040e2:	4b1a      	ldr	r3, [pc, #104]	; (800414c <_puts_r+0xbc>)
 80040e4:	429c      	cmp	r4, r3
 80040e6:	d1e8      	bne.n	80040ba <_puts_r+0x2a>
 80040e8:	68ec      	ldr	r4, [r5, #12]
 80040ea:	e7e6      	b.n	80040ba <_puts_r+0x2a>
 80040ec:	3601      	adds	r6, #1
 80040ee:	60a3      	str	r3, [r4, #8]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	da04      	bge.n	80040fe <_puts_r+0x6e>
 80040f4:	69a2      	ldr	r2, [r4, #24]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	dc16      	bgt.n	8004128 <_puts_r+0x98>
 80040fa:	290a      	cmp	r1, #10
 80040fc:	d014      	beq.n	8004128 <_puts_r+0x98>
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	6022      	str	r2, [r4, #0]
 8004104:	7019      	strb	r1, [r3, #0]
 8004106:	68a3      	ldr	r3, [r4, #8]
 8004108:	7831      	ldrb	r1, [r6, #0]
 800410a:	3b01      	subs	r3, #1
 800410c:	2900      	cmp	r1, #0
 800410e:	d1ed      	bne.n	80040ec <_puts_r+0x5c>
 8004110:	60a3      	str	r3, [r4, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	da0f      	bge.n	8004136 <_puts_r+0xa6>
 8004116:	0022      	movs	r2, r4
 8004118:	310a      	adds	r1, #10
 800411a:	0028      	movs	r0, r5
 800411c:	f000 f8b6 	bl	800428c <__swbuf_r>
 8004120:	1c43      	adds	r3, r0, #1
 8004122:	d0d6      	beq.n	80040d2 <_puts_r+0x42>
 8004124:	200a      	movs	r0, #10
 8004126:	e7d6      	b.n	80040d6 <_puts_r+0x46>
 8004128:	0022      	movs	r2, r4
 800412a:	0028      	movs	r0, r5
 800412c:	f000 f8ae 	bl	800428c <__swbuf_r>
 8004130:	1c43      	adds	r3, r0, #1
 8004132:	d1e8      	bne.n	8004106 <_puts_r+0x76>
 8004134:	e7cd      	b.n	80040d2 <_puts_r+0x42>
 8004136:	200a      	movs	r0, #10
 8004138:	6823      	ldr	r3, [r4, #0]
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	6022      	str	r2, [r4, #0]
 800413e:	7018      	strb	r0, [r3, #0]
 8004140:	e7c9      	b.n	80040d6 <_puts_r+0x46>
 8004142:	46c0      	nop			; (mov r8, r8)
 8004144:	080059d4 	.word	0x080059d4
 8004148:	080059f4 	.word	0x080059f4
 800414c:	080059b4 	.word	0x080059b4

08004150 <puts>:
 8004150:	b510      	push	{r4, lr}
 8004152:	4b03      	ldr	r3, [pc, #12]	; (8004160 <puts+0x10>)
 8004154:	0001      	movs	r1, r0
 8004156:	6818      	ldr	r0, [r3, #0]
 8004158:	f7ff ff9a 	bl	8004090 <_puts_r>
 800415c:	bd10      	pop	{r4, pc}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	20000010 	.word	0x20000010

08004164 <siprintf>:
 8004164:	b40e      	push	{r1, r2, r3}
 8004166:	b500      	push	{lr}
 8004168:	490b      	ldr	r1, [pc, #44]	; (8004198 <siprintf+0x34>)
 800416a:	b09c      	sub	sp, #112	; 0x70
 800416c:	ab1d      	add	r3, sp, #116	; 0x74
 800416e:	9002      	str	r0, [sp, #8]
 8004170:	9006      	str	r0, [sp, #24]
 8004172:	9107      	str	r1, [sp, #28]
 8004174:	9104      	str	r1, [sp, #16]
 8004176:	4809      	ldr	r0, [pc, #36]	; (800419c <siprintf+0x38>)
 8004178:	4909      	ldr	r1, [pc, #36]	; (80041a0 <siprintf+0x3c>)
 800417a:	cb04      	ldmia	r3!, {r2}
 800417c:	9105      	str	r1, [sp, #20]
 800417e:	6800      	ldr	r0, [r0, #0]
 8004180:	a902      	add	r1, sp, #8
 8004182:	9301      	str	r3, [sp, #4]
 8004184:	f000 fc7a 	bl	8004a7c <_svfiprintf_r>
 8004188:	2300      	movs	r3, #0
 800418a:	9a02      	ldr	r2, [sp, #8]
 800418c:	7013      	strb	r3, [r2, #0]
 800418e:	b01c      	add	sp, #112	; 0x70
 8004190:	bc08      	pop	{r3}
 8004192:	b003      	add	sp, #12
 8004194:	4718      	bx	r3
 8004196:	46c0      	nop			; (mov r8, r8)
 8004198:	7fffffff 	.word	0x7fffffff
 800419c:	20000010 	.word	0x20000010
 80041a0:	ffff0208 	.word	0xffff0208

080041a4 <strcasecmp>:
 80041a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a6:	0007      	movs	r7, r0
 80041a8:	000e      	movs	r6, r1
 80041aa:	783c      	ldrb	r4, [r7, #0]
 80041ac:	f000 fac6 	bl	800473c <__locale_ctype_ptr>
 80041b0:	2203      	movs	r2, #3
 80041b2:	1900      	adds	r0, r0, r4
 80041b4:	7843      	ldrb	r3, [r0, #1]
 80041b6:	4013      	ands	r3, r2
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d100      	bne.n	80041be <strcasecmp+0x1a>
 80041bc:	3420      	adds	r4, #32
 80041be:	7835      	ldrb	r5, [r6, #0]
 80041c0:	f000 fabc 	bl	800473c <__locale_ctype_ptr>
 80041c4:	2203      	movs	r2, #3
 80041c6:	1940      	adds	r0, r0, r5
 80041c8:	7843      	ldrb	r3, [r0, #1]
 80041ca:	4013      	ands	r3, r2
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d100      	bne.n	80041d2 <strcasecmp+0x2e>
 80041d0:	3520      	adds	r5, #32
 80041d2:	1b60      	subs	r0, r4, r5
 80041d4:	d103      	bne.n	80041de <strcasecmp+0x3a>
 80041d6:	3701      	adds	r7, #1
 80041d8:	3601      	adds	r6, #1
 80041da:	2d00      	cmp	r5, #0
 80041dc:	d1e5      	bne.n	80041aa <strcasecmp+0x6>
 80041de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080041e0 <strtok>:
 80041e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e2:	4b12      	ldr	r3, [pc, #72]	; (800422c <strtok+0x4c>)
 80041e4:	0006      	movs	r6, r0
 80041e6:	681d      	ldr	r5, [r3, #0]
 80041e8:	000f      	movs	r7, r1
 80041ea:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80041ec:	2c00      	cmp	r4, #0
 80041ee:	d116      	bne.n	800421e <strtok+0x3e>
 80041f0:	2050      	movs	r0, #80	; 0x50
 80041f2:	f000 fb1d 	bl	8004830 <malloc>
 80041f6:	65a8      	str	r0, [r5, #88]	; 0x58
 80041f8:	6004      	str	r4, [r0, #0]
 80041fa:	6044      	str	r4, [r0, #4]
 80041fc:	6084      	str	r4, [r0, #8]
 80041fe:	60c4      	str	r4, [r0, #12]
 8004200:	6104      	str	r4, [r0, #16]
 8004202:	6144      	str	r4, [r0, #20]
 8004204:	6184      	str	r4, [r0, #24]
 8004206:	6284      	str	r4, [r0, #40]	; 0x28
 8004208:	62c4      	str	r4, [r0, #44]	; 0x2c
 800420a:	6304      	str	r4, [r0, #48]	; 0x30
 800420c:	6344      	str	r4, [r0, #52]	; 0x34
 800420e:	6384      	str	r4, [r0, #56]	; 0x38
 8004210:	63c4      	str	r4, [r0, #60]	; 0x3c
 8004212:	6404      	str	r4, [r0, #64]	; 0x40
 8004214:	6444      	str	r4, [r0, #68]	; 0x44
 8004216:	6484      	str	r4, [r0, #72]	; 0x48
 8004218:	64c4      	str	r4, [r0, #76]	; 0x4c
 800421a:	7704      	strb	r4, [r0, #28]
 800421c:	6244      	str	r4, [r0, #36]	; 0x24
 800421e:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8004220:	0039      	movs	r1, r7
 8004222:	0030      	movs	r0, r6
 8004224:	2301      	movs	r3, #1
 8004226:	f000 f803 	bl	8004230 <__strtok_r>
 800422a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800422c:	20000010 	.word	0x20000010

08004230 <__strtok_r>:
 8004230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004232:	2800      	cmp	r0, #0
 8004234:	d104      	bne.n	8004240 <__strtok_r+0x10>
 8004236:	6810      	ldr	r0, [r2, #0]
 8004238:	2800      	cmp	r0, #0
 800423a:	d101      	bne.n	8004240 <__strtok_r+0x10>
 800423c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800423e:	0020      	movs	r0, r4
 8004240:	000e      	movs	r6, r1
 8004242:	7805      	ldrb	r5, [r0, #0]
 8004244:	1c44      	adds	r4, r0, #1
 8004246:	7837      	ldrb	r7, [r6, #0]
 8004248:	2f00      	cmp	r7, #0
 800424a:	d104      	bne.n	8004256 <__strtok_r+0x26>
 800424c:	2d00      	cmp	r5, #0
 800424e:	d110      	bne.n	8004272 <__strtok_r+0x42>
 8004250:	6015      	str	r5, [r2, #0]
 8004252:	0028      	movs	r0, r5
 8004254:	e7f2      	b.n	800423c <__strtok_r+0xc>
 8004256:	3601      	adds	r6, #1
 8004258:	42bd      	cmp	r5, r7
 800425a:	d1f4      	bne.n	8004246 <__strtok_r+0x16>
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1ee      	bne.n	800423e <__strtok_r+0xe>
 8004260:	6014      	str	r4, [r2, #0]
 8004262:	7003      	strb	r3, [r0, #0]
 8004264:	e7ea      	b.n	800423c <__strtok_r+0xc>
 8004266:	0033      	movs	r3, r6
 8004268:	e00d      	b.n	8004286 <__strtok_r+0x56>
 800426a:	3501      	adds	r5, #1
 800426c:	2f00      	cmp	r7, #0
 800426e:	d103      	bne.n	8004278 <__strtok_r+0x48>
 8004270:	001c      	movs	r4, r3
 8004272:	000d      	movs	r5, r1
 8004274:	7826      	ldrb	r6, [r4, #0]
 8004276:	1c63      	adds	r3, r4, #1
 8004278:	782f      	ldrb	r7, [r5, #0]
 800427a:	42be      	cmp	r6, r7
 800427c:	d1f5      	bne.n	800426a <__strtok_r+0x3a>
 800427e:	2e00      	cmp	r6, #0
 8004280:	d0f1      	beq.n	8004266 <__strtok_r+0x36>
 8004282:	2100      	movs	r1, #0
 8004284:	7021      	strb	r1, [r4, #0]
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	e7d8      	b.n	800423c <__strtok_r+0xc>
	...

0800428c <__swbuf_r>:
 800428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428e:	0005      	movs	r5, r0
 8004290:	000e      	movs	r6, r1
 8004292:	0014      	movs	r4, r2
 8004294:	2800      	cmp	r0, #0
 8004296:	d004      	beq.n	80042a2 <__swbuf_r+0x16>
 8004298:	6983      	ldr	r3, [r0, #24]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <__swbuf_r+0x16>
 800429e:	f000 f9b9 	bl	8004614 <__sinit>
 80042a2:	4b22      	ldr	r3, [pc, #136]	; (800432c <__swbuf_r+0xa0>)
 80042a4:	429c      	cmp	r4, r3
 80042a6:	d12d      	bne.n	8004304 <__swbuf_r+0x78>
 80042a8:	686c      	ldr	r4, [r5, #4]
 80042aa:	69a3      	ldr	r3, [r4, #24]
 80042ac:	60a3      	str	r3, [r4, #8]
 80042ae:	89a3      	ldrh	r3, [r4, #12]
 80042b0:	071b      	lsls	r3, r3, #28
 80042b2:	d531      	bpl.n	8004318 <__swbuf_r+0x8c>
 80042b4:	6923      	ldr	r3, [r4, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d02e      	beq.n	8004318 <__swbuf_r+0x8c>
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	6922      	ldr	r2, [r4, #16]
 80042be:	b2f7      	uxtb	r7, r6
 80042c0:	1a98      	subs	r0, r3, r2
 80042c2:	6963      	ldr	r3, [r4, #20]
 80042c4:	b2f6      	uxtb	r6, r6
 80042c6:	4283      	cmp	r3, r0
 80042c8:	dc05      	bgt.n	80042d6 <__swbuf_r+0x4a>
 80042ca:	0021      	movs	r1, r4
 80042cc:	0028      	movs	r0, r5
 80042ce:	f000 f933 	bl	8004538 <_fflush_r>
 80042d2:	2800      	cmp	r0, #0
 80042d4:	d126      	bne.n	8004324 <__swbuf_r+0x98>
 80042d6:	68a3      	ldr	r3, [r4, #8]
 80042d8:	3001      	adds	r0, #1
 80042da:	3b01      	subs	r3, #1
 80042dc:	60a3      	str	r3, [r4, #8]
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	6022      	str	r2, [r4, #0]
 80042e4:	701f      	strb	r7, [r3, #0]
 80042e6:	6963      	ldr	r3, [r4, #20]
 80042e8:	4283      	cmp	r3, r0
 80042ea:	d004      	beq.n	80042f6 <__swbuf_r+0x6a>
 80042ec:	89a3      	ldrh	r3, [r4, #12]
 80042ee:	07db      	lsls	r3, r3, #31
 80042f0:	d51a      	bpl.n	8004328 <__swbuf_r+0x9c>
 80042f2:	2e0a      	cmp	r6, #10
 80042f4:	d118      	bne.n	8004328 <__swbuf_r+0x9c>
 80042f6:	0021      	movs	r1, r4
 80042f8:	0028      	movs	r0, r5
 80042fa:	f000 f91d 	bl	8004538 <_fflush_r>
 80042fe:	2800      	cmp	r0, #0
 8004300:	d012      	beq.n	8004328 <__swbuf_r+0x9c>
 8004302:	e00f      	b.n	8004324 <__swbuf_r+0x98>
 8004304:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <__swbuf_r+0xa4>)
 8004306:	429c      	cmp	r4, r3
 8004308:	d101      	bne.n	800430e <__swbuf_r+0x82>
 800430a:	68ac      	ldr	r4, [r5, #8]
 800430c:	e7cd      	b.n	80042aa <__swbuf_r+0x1e>
 800430e:	4b09      	ldr	r3, [pc, #36]	; (8004334 <__swbuf_r+0xa8>)
 8004310:	429c      	cmp	r4, r3
 8004312:	d1ca      	bne.n	80042aa <__swbuf_r+0x1e>
 8004314:	68ec      	ldr	r4, [r5, #12]
 8004316:	e7c8      	b.n	80042aa <__swbuf_r+0x1e>
 8004318:	0021      	movs	r1, r4
 800431a:	0028      	movs	r0, r5
 800431c:	f000 f80c 	bl	8004338 <__swsetup_r>
 8004320:	2800      	cmp	r0, #0
 8004322:	d0ca      	beq.n	80042ba <__swbuf_r+0x2e>
 8004324:	2601      	movs	r6, #1
 8004326:	4276      	negs	r6, r6
 8004328:	0030      	movs	r0, r6
 800432a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800432c:	080059d4 	.word	0x080059d4
 8004330:	080059f4 	.word	0x080059f4
 8004334:	080059b4 	.word	0x080059b4

08004338 <__swsetup_r>:
 8004338:	4b36      	ldr	r3, [pc, #216]	; (8004414 <__swsetup_r+0xdc>)
 800433a:	b570      	push	{r4, r5, r6, lr}
 800433c:	681d      	ldr	r5, [r3, #0]
 800433e:	0006      	movs	r6, r0
 8004340:	000c      	movs	r4, r1
 8004342:	2d00      	cmp	r5, #0
 8004344:	d005      	beq.n	8004352 <__swsetup_r+0x1a>
 8004346:	69ab      	ldr	r3, [r5, #24]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d102      	bne.n	8004352 <__swsetup_r+0x1a>
 800434c:	0028      	movs	r0, r5
 800434e:	f000 f961 	bl	8004614 <__sinit>
 8004352:	4b31      	ldr	r3, [pc, #196]	; (8004418 <__swsetup_r+0xe0>)
 8004354:	429c      	cmp	r4, r3
 8004356:	d10f      	bne.n	8004378 <__swsetup_r+0x40>
 8004358:	686c      	ldr	r4, [r5, #4]
 800435a:	230c      	movs	r3, #12
 800435c:	5ee2      	ldrsh	r2, [r4, r3]
 800435e:	b293      	uxth	r3, r2
 8004360:	0719      	lsls	r1, r3, #28
 8004362:	d42d      	bmi.n	80043c0 <__swsetup_r+0x88>
 8004364:	06d9      	lsls	r1, r3, #27
 8004366:	d411      	bmi.n	800438c <__swsetup_r+0x54>
 8004368:	2309      	movs	r3, #9
 800436a:	2001      	movs	r0, #1
 800436c:	6033      	str	r3, [r6, #0]
 800436e:	3337      	adds	r3, #55	; 0x37
 8004370:	4313      	orrs	r3, r2
 8004372:	81a3      	strh	r3, [r4, #12]
 8004374:	4240      	negs	r0, r0
 8004376:	bd70      	pop	{r4, r5, r6, pc}
 8004378:	4b28      	ldr	r3, [pc, #160]	; (800441c <__swsetup_r+0xe4>)
 800437a:	429c      	cmp	r4, r3
 800437c:	d101      	bne.n	8004382 <__swsetup_r+0x4a>
 800437e:	68ac      	ldr	r4, [r5, #8]
 8004380:	e7eb      	b.n	800435a <__swsetup_r+0x22>
 8004382:	4b27      	ldr	r3, [pc, #156]	; (8004420 <__swsetup_r+0xe8>)
 8004384:	429c      	cmp	r4, r3
 8004386:	d1e8      	bne.n	800435a <__swsetup_r+0x22>
 8004388:	68ec      	ldr	r4, [r5, #12]
 800438a:	e7e6      	b.n	800435a <__swsetup_r+0x22>
 800438c:	075b      	lsls	r3, r3, #29
 800438e:	d513      	bpl.n	80043b8 <__swsetup_r+0x80>
 8004390:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004392:	2900      	cmp	r1, #0
 8004394:	d008      	beq.n	80043a8 <__swsetup_r+0x70>
 8004396:	0023      	movs	r3, r4
 8004398:	3344      	adds	r3, #68	; 0x44
 800439a:	4299      	cmp	r1, r3
 800439c:	d002      	beq.n	80043a4 <__swsetup_r+0x6c>
 800439e:	0030      	movs	r0, r6
 80043a0:	f000 fa62 	bl	8004868 <_free_r>
 80043a4:	2300      	movs	r3, #0
 80043a6:	6363      	str	r3, [r4, #52]	; 0x34
 80043a8:	2224      	movs	r2, #36	; 0x24
 80043aa:	89a3      	ldrh	r3, [r4, #12]
 80043ac:	4393      	bics	r3, r2
 80043ae:	81a3      	strh	r3, [r4, #12]
 80043b0:	2300      	movs	r3, #0
 80043b2:	6063      	str	r3, [r4, #4]
 80043b4:	6923      	ldr	r3, [r4, #16]
 80043b6:	6023      	str	r3, [r4, #0]
 80043b8:	2308      	movs	r3, #8
 80043ba:	89a2      	ldrh	r2, [r4, #12]
 80043bc:	4313      	orrs	r3, r2
 80043be:	81a3      	strh	r3, [r4, #12]
 80043c0:	6923      	ldr	r3, [r4, #16]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10b      	bne.n	80043de <__swsetup_r+0xa6>
 80043c6:	21a0      	movs	r1, #160	; 0xa0
 80043c8:	2280      	movs	r2, #128	; 0x80
 80043ca:	89a3      	ldrh	r3, [r4, #12]
 80043cc:	0089      	lsls	r1, r1, #2
 80043ce:	0092      	lsls	r2, r2, #2
 80043d0:	400b      	ands	r3, r1
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d003      	beq.n	80043de <__swsetup_r+0xa6>
 80043d6:	0021      	movs	r1, r4
 80043d8:	0030      	movs	r0, r6
 80043da:	f000 f9e5 	bl	80047a8 <__smakebuf_r>
 80043de:	2301      	movs	r3, #1
 80043e0:	89a2      	ldrh	r2, [r4, #12]
 80043e2:	4013      	ands	r3, r2
 80043e4:	d011      	beq.n	800440a <__swsetup_r+0xd2>
 80043e6:	2300      	movs	r3, #0
 80043e8:	60a3      	str	r3, [r4, #8]
 80043ea:	6963      	ldr	r3, [r4, #20]
 80043ec:	425b      	negs	r3, r3
 80043ee:	61a3      	str	r3, [r4, #24]
 80043f0:	2000      	movs	r0, #0
 80043f2:	6923      	ldr	r3, [r4, #16]
 80043f4:	4283      	cmp	r3, r0
 80043f6:	d1be      	bne.n	8004376 <__swsetup_r+0x3e>
 80043f8:	230c      	movs	r3, #12
 80043fa:	5ee2      	ldrsh	r2, [r4, r3]
 80043fc:	0613      	lsls	r3, r2, #24
 80043fe:	d5ba      	bpl.n	8004376 <__swsetup_r+0x3e>
 8004400:	2340      	movs	r3, #64	; 0x40
 8004402:	4313      	orrs	r3, r2
 8004404:	81a3      	strh	r3, [r4, #12]
 8004406:	3801      	subs	r0, #1
 8004408:	e7b5      	b.n	8004376 <__swsetup_r+0x3e>
 800440a:	0792      	lsls	r2, r2, #30
 800440c:	d400      	bmi.n	8004410 <__swsetup_r+0xd8>
 800440e:	6963      	ldr	r3, [r4, #20]
 8004410:	60a3      	str	r3, [r4, #8]
 8004412:	e7ed      	b.n	80043f0 <__swsetup_r+0xb8>
 8004414:	20000010 	.word	0x20000010
 8004418:	080059d4 	.word	0x080059d4
 800441c:	080059f4 	.word	0x080059f4
 8004420:	080059b4 	.word	0x080059b4

08004424 <__sflush_r>:
 8004424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004426:	898a      	ldrh	r2, [r1, #12]
 8004428:	0005      	movs	r5, r0
 800442a:	000c      	movs	r4, r1
 800442c:	0713      	lsls	r3, r2, #28
 800442e:	d460      	bmi.n	80044f2 <__sflush_r+0xce>
 8004430:	684b      	ldr	r3, [r1, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	dc04      	bgt.n	8004440 <__sflush_r+0x1c>
 8004436:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004438:	2b00      	cmp	r3, #0
 800443a:	dc01      	bgt.n	8004440 <__sflush_r+0x1c>
 800443c:	2000      	movs	r0, #0
 800443e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004440:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004442:	2f00      	cmp	r7, #0
 8004444:	d0fa      	beq.n	800443c <__sflush_r+0x18>
 8004446:	2300      	movs	r3, #0
 8004448:	682e      	ldr	r6, [r5, #0]
 800444a:	602b      	str	r3, [r5, #0]
 800444c:	2380      	movs	r3, #128	; 0x80
 800444e:	015b      	lsls	r3, r3, #5
 8004450:	6a21      	ldr	r1, [r4, #32]
 8004452:	401a      	ands	r2, r3
 8004454:	d034      	beq.n	80044c0 <__sflush_r+0x9c>
 8004456:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004458:	89a3      	ldrh	r3, [r4, #12]
 800445a:	075b      	lsls	r3, r3, #29
 800445c:	d506      	bpl.n	800446c <__sflush_r+0x48>
 800445e:	6863      	ldr	r3, [r4, #4]
 8004460:	1ac0      	subs	r0, r0, r3
 8004462:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <__sflush_r+0x48>
 8004468:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800446a:	1ac0      	subs	r0, r0, r3
 800446c:	0002      	movs	r2, r0
 800446e:	6a21      	ldr	r1, [r4, #32]
 8004470:	2300      	movs	r3, #0
 8004472:	0028      	movs	r0, r5
 8004474:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004476:	47b8      	blx	r7
 8004478:	89a1      	ldrh	r1, [r4, #12]
 800447a:	1c43      	adds	r3, r0, #1
 800447c:	d106      	bne.n	800448c <__sflush_r+0x68>
 800447e:	682b      	ldr	r3, [r5, #0]
 8004480:	2b1d      	cmp	r3, #29
 8004482:	d830      	bhi.n	80044e6 <__sflush_r+0xc2>
 8004484:	4a2b      	ldr	r2, [pc, #172]	; (8004534 <__sflush_r+0x110>)
 8004486:	40da      	lsrs	r2, r3
 8004488:	07d3      	lsls	r3, r2, #31
 800448a:	d52c      	bpl.n	80044e6 <__sflush_r+0xc2>
 800448c:	2300      	movs	r3, #0
 800448e:	6063      	str	r3, [r4, #4]
 8004490:	6923      	ldr	r3, [r4, #16]
 8004492:	6023      	str	r3, [r4, #0]
 8004494:	04cb      	lsls	r3, r1, #19
 8004496:	d505      	bpl.n	80044a4 <__sflush_r+0x80>
 8004498:	1c43      	adds	r3, r0, #1
 800449a:	d102      	bne.n	80044a2 <__sflush_r+0x7e>
 800449c:	682b      	ldr	r3, [r5, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d100      	bne.n	80044a4 <__sflush_r+0x80>
 80044a2:	6560      	str	r0, [r4, #84]	; 0x54
 80044a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044a6:	602e      	str	r6, [r5, #0]
 80044a8:	2900      	cmp	r1, #0
 80044aa:	d0c7      	beq.n	800443c <__sflush_r+0x18>
 80044ac:	0023      	movs	r3, r4
 80044ae:	3344      	adds	r3, #68	; 0x44
 80044b0:	4299      	cmp	r1, r3
 80044b2:	d002      	beq.n	80044ba <__sflush_r+0x96>
 80044b4:	0028      	movs	r0, r5
 80044b6:	f000 f9d7 	bl	8004868 <_free_r>
 80044ba:	2000      	movs	r0, #0
 80044bc:	6360      	str	r0, [r4, #52]	; 0x34
 80044be:	e7be      	b.n	800443e <__sflush_r+0x1a>
 80044c0:	2301      	movs	r3, #1
 80044c2:	0028      	movs	r0, r5
 80044c4:	47b8      	blx	r7
 80044c6:	1c43      	adds	r3, r0, #1
 80044c8:	d1c6      	bne.n	8004458 <__sflush_r+0x34>
 80044ca:	682b      	ldr	r3, [r5, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0c3      	beq.n	8004458 <__sflush_r+0x34>
 80044d0:	2b1d      	cmp	r3, #29
 80044d2:	d001      	beq.n	80044d8 <__sflush_r+0xb4>
 80044d4:	2b16      	cmp	r3, #22
 80044d6:	d101      	bne.n	80044dc <__sflush_r+0xb8>
 80044d8:	602e      	str	r6, [r5, #0]
 80044da:	e7af      	b.n	800443c <__sflush_r+0x18>
 80044dc:	2340      	movs	r3, #64	; 0x40
 80044de:	89a2      	ldrh	r2, [r4, #12]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	81a3      	strh	r3, [r4, #12]
 80044e4:	e7ab      	b.n	800443e <__sflush_r+0x1a>
 80044e6:	2340      	movs	r3, #64	; 0x40
 80044e8:	430b      	orrs	r3, r1
 80044ea:	2001      	movs	r0, #1
 80044ec:	81a3      	strh	r3, [r4, #12]
 80044ee:	4240      	negs	r0, r0
 80044f0:	e7a5      	b.n	800443e <__sflush_r+0x1a>
 80044f2:	690f      	ldr	r7, [r1, #16]
 80044f4:	2f00      	cmp	r7, #0
 80044f6:	d0a1      	beq.n	800443c <__sflush_r+0x18>
 80044f8:	680b      	ldr	r3, [r1, #0]
 80044fa:	600f      	str	r7, [r1, #0]
 80044fc:	1bdb      	subs	r3, r3, r7
 80044fe:	9301      	str	r3, [sp, #4]
 8004500:	2300      	movs	r3, #0
 8004502:	0792      	lsls	r2, r2, #30
 8004504:	d100      	bne.n	8004508 <__sflush_r+0xe4>
 8004506:	694b      	ldr	r3, [r1, #20]
 8004508:	60a3      	str	r3, [r4, #8]
 800450a:	9b01      	ldr	r3, [sp, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	dc00      	bgt.n	8004512 <__sflush_r+0xee>
 8004510:	e794      	b.n	800443c <__sflush_r+0x18>
 8004512:	9b01      	ldr	r3, [sp, #4]
 8004514:	003a      	movs	r2, r7
 8004516:	6a21      	ldr	r1, [r4, #32]
 8004518:	0028      	movs	r0, r5
 800451a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800451c:	47b0      	blx	r6
 800451e:	2800      	cmp	r0, #0
 8004520:	dc03      	bgt.n	800452a <__sflush_r+0x106>
 8004522:	2340      	movs	r3, #64	; 0x40
 8004524:	89a2      	ldrh	r2, [r4, #12]
 8004526:	4313      	orrs	r3, r2
 8004528:	e7df      	b.n	80044ea <__sflush_r+0xc6>
 800452a:	9b01      	ldr	r3, [sp, #4]
 800452c:	183f      	adds	r7, r7, r0
 800452e:	1a1b      	subs	r3, r3, r0
 8004530:	9301      	str	r3, [sp, #4]
 8004532:	e7ea      	b.n	800450a <__sflush_r+0xe6>
 8004534:	20400001 	.word	0x20400001

08004538 <_fflush_r>:
 8004538:	690b      	ldr	r3, [r1, #16]
 800453a:	b570      	push	{r4, r5, r6, lr}
 800453c:	0005      	movs	r5, r0
 800453e:	000c      	movs	r4, r1
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <_fflush_r+0x10>
 8004544:	2000      	movs	r0, #0
 8004546:	bd70      	pop	{r4, r5, r6, pc}
 8004548:	2800      	cmp	r0, #0
 800454a:	d004      	beq.n	8004556 <_fflush_r+0x1e>
 800454c:	6983      	ldr	r3, [r0, #24]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <_fflush_r+0x1e>
 8004552:	f000 f85f 	bl	8004614 <__sinit>
 8004556:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <_fflush_r+0x4c>)
 8004558:	429c      	cmp	r4, r3
 800455a:	d109      	bne.n	8004570 <_fflush_r+0x38>
 800455c:	686c      	ldr	r4, [r5, #4]
 800455e:	220c      	movs	r2, #12
 8004560:	5ea3      	ldrsh	r3, [r4, r2]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0ee      	beq.n	8004544 <_fflush_r+0xc>
 8004566:	0021      	movs	r1, r4
 8004568:	0028      	movs	r0, r5
 800456a:	f7ff ff5b 	bl	8004424 <__sflush_r>
 800456e:	e7ea      	b.n	8004546 <_fflush_r+0xe>
 8004570:	4b05      	ldr	r3, [pc, #20]	; (8004588 <_fflush_r+0x50>)
 8004572:	429c      	cmp	r4, r3
 8004574:	d101      	bne.n	800457a <_fflush_r+0x42>
 8004576:	68ac      	ldr	r4, [r5, #8]
 8004578:	e7f1      	b.n	800455e <_fflush_r+0x26>
 800457a:	4b04      	ldr	r3, [pc, #16]	; (800458c <_fflush_r+0x54>)
 800457c:	429c      	cmp	r4, r3
 800457e:	d1ee      	bne.n	800455e <_fflush_r+0x26>
 8004580:	68ec      	ldr	r4, [r5, #12]
 8004582:	e7ec      	b.n	800455e <_fflush_r+0x26>
 8004584:	080059d4 	.word	0x080059d4
 8004588:	080059f4 	.word	0x080059f4
 800458c:	080059b4 	.word	0x080059b4

08004590 <std>:
 8004590:	2300      	movs	r3, #0
 8004592:	b510      	push	{r4, lr}
 8004594:	0004      	movs	r4, r0
 8004596:	6003      	str	r3, [r0, #0]
 8004598:	6043      	str	r3, [r0, #4]
 800459a:	6083      	str	r3, [r0, #8]
 800459c:	8181      	strh	r1, [r0, #12]
 800459e:	6643      	str	r3, [r0, #100]	; 0x64
 80045a0:	81c2      	strh	r2, [r0, #14]
 80045a2:	6103      	str	r3, [r0, #16]
 80045a4:	6143      	str	r3, [r0, #20]
 80045a6:	6183      	str	r3, [r0, #24]
 80045a8:	0019      	movs	r1, r3
 80045aa:	2208      	movs	r2, #8
 80045ac:	305c      	adds	r0, #92	; 0x5c
 80045ae:	f7ff fd39 	bl	8004024 <memset>
 80045b2:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <std+0x38>)
 80045b4:	6224      	str	r4, [r4, #32]
 80045b6:	6263      	str	r3, [r4, #36]	; 0x24
 80045b8:	4b04      	ldr	r3, [pc, #16]	; (80045cc <std+0x3c>)
 80045ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80045bc:	4b04      	ldr	r3, [pc, #16]	; (80045d0 <std+0x40>)
 80045be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80045c0:	4b04      	ldr	r3, [pc, #16]	; (80045d4 <std+0x44>)
 80045c2:	6323      	str	r3, [r4, #48]	; 0x30
 80045c4:	bd10      	pop	{r4, pc}
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	08005271 	.word	0x08005271
 80045cc:	08005299 	.word	0x08005299
 80045d0:	080052d1 	.word	0x080052d1
 80045d4:	080052fd 	.word	0x080052fd

080045d8 <_cleanup_r>:
 80045d8:	b510      	push	{r4, lr}
 80045da:	4902      	ldr	r1, [pc, #8]	; (80045e4 <_cleanup_r+0xc>)
 80045dc:	f000 f88c 	bl	80046f8 <_fwalk_reent>
 80045e0:	bd10      	pop	{r4, pc}
 80045e2:	46c0      	nop			; (mov r8, r8)
 80045e4:	08004539 	.word	0x08004539

080045e8 <__sfmoreglue>:
 80045e8:	b570      	push	{r4, r5, r6, lr}
 80045ea:	2568      	movs	r5, #104	; 0x68
 80045ec:	1e4a      	subs	r2, r1, #1
 80045ee:	4355      	muls	r5, r2
 80045f0:	000e      	movs	r6, r1
 80045f2:	0029      	movs	r1, r5
 80045f4:	3174      	adds	r1, #116	; 0x74
 80045f6:	f000 f981 	bl	80048fc <_malloc_r>
 80045fa:	1e04      	subs	r4, r0, #0
 80045fc:	d008      	beq.n	8004610 <__sfmoreglue+0x28>
 80045fe:	2100      	movs	r1, #0
 8004600:	002a      	movs	r2, r5
 8004602:	6001      	str	r1, [r0, #0]
 8004604:	6046      	str	r6, [r0, #4]
 8004606:	300c      	adds	r0, #12
 8004608:	60a0      	str	r0, [r4, #8]
 800460a:	3268      	adds	r2, #104	; 0x68
 800460c:	f7ff fd0a 	bl	8004024 <memset>
 8004610:	0020      	movs	r0, r4
 8004612:	bd70      	pop	{r4, r5, r6, pc}

08004614 <__sinit>:
 8004614:	6983      	ldr	r3, [r0, #24]
 8004616:	b513      	push	{r0, r1, r4, lr}
 8004618:	0004      	movs	r4, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d128      	bne.n	8004670 <__sinit+0x5c>
 800461e:	6483      	str	r3, [r0, #72]	; 0x48
 8004620:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004622:	6503      	str	r3, [r0, #80]	; 0x50
 8004624:	4b13      	ldr	r3, [pc, #76]	; (8004674 <__sinit+0x60>)
 8004626:	4a14      	ldr	r2, [pc, #80]	; (8004678 <__sinit+0x64>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6282      	str	r2, [r0, #40]	; 0x28
 800462c:	9301      	str	r3, [sp, #4]
 800462e:	4298      	cmp	r0, r3
 8004630:	d101      	bne.n	8004636 <__sinit+0x22>
 8004632:	2301      	movs	r3, #1
 8004634:	6183      	str	r3, [r0, #24]
 8004636:	0020      	movs	r0, r4
 8004638:	f000 f820 	bl	800467c <__sfp>
 800463c:	6060      	str	r0, [r4, #4]
 800463e:	0020      	movs	r0, r4
 8004640:	f000 f81c 	bl	800467c <__sfp>
 8004644:	60a0      	str	r0, [r4, #8]
 8004646:	0020      	movs	r0, r4
 8004648:	f000 f818 	bl	800467c <__sfp>
 800464c:	2200      	movs	r2, #0
 800464e:	60e0      	str	r0, [r4, #12]
 8004650:	2104      	movs	r1, #4
 8004652:	6860      	ldr	r0, [r4, #4]
 8004654:	f7ff ff9c 	bl	8004590 <std>
 8004658:	2201      	movs	r2, #1
 800465a:	2109      	movs	r1, #9
 800465c:	68a0      	ldr	r0, [r4, #8]
 800465e:	f7ff ff97 	bl	8004590 <std>
 8004662:	2202      	movs	r2, #2
 8004664:	2112      	movs	r1, #18
 8004666:	68e0      	ldr	r0, [r4, #12]
 8004668:	f7ff ff92 	bl	8004590 <std>
 800466c:	2301      	movs	r3, #1
 800466e:	61a3      	str	r3, [r4, #24]
 8004670:	bd13      	pop	{r0, r1, r4, pc}
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	080059b0 	.word	0x080059b0
 8004678:	080045d9 	.word	0x080045d9

0800467c <__sfp>:
 800467c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800467e:	4b1c      	ldr	r3, [pc, #112]	; (80046f0 <__sfp+0x74>)
 8004680:	0007      	movs	r7, r0
 8004682:	681e      	ldr	r6, [r3, #0]
 8004684:	69b3      	ldr	r3, [r6, #24]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d102      	bne.n	8004690 <__sfp+0x14>
 800468a:	0030      	movs	r0, r6
 800468c:	f7ff ffc2 	bl	8004614 <__sinit>
 8004690:	3648      	adds	r6, #72	; 0x48
 8004692:	68b4      	ldr	r4, [r6, #8]
 8004694:	6873      	ldr	r3, [r6, #4]
 8004696:	3b01      	subs	r3, #1
 8004698:	d504      	bpl.n	80046a4 <__sfp+0x28>
 800469a:	6833      	ldr	r3, [r6, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d007      	beq.n	80046b0 <__sfp+0x34>
 80046a0:	6836      	ldr	r6, [r6, #0]
 80046a2:	e7f6      	b.n	8004692 <__sfp+0x16>
 80046a4:	220c      	movs	r2, #12
 80046a6:	5ea5      	ldrsh	r5, [r4, r2]
 80046a8:	2d00      	cmp	r5, #0
 80046aa:	d00d      	beq.n	80046c8 <__sfp+0x4c>
 80046ac:	3468      	adds	r4, #104	; 0x68
 80046ae:	e7f2      	b.n	8004696 <__sfp+0x1a>
 80046b0:	2104      	movs	r1, #4
 80046b2:	0038      	movs	r0, r7
 80046b4:	f7ff ff98 	bl	80045e8 <__sfmoreglue>
 80046b8:	6030      	str	r0, [r6, #0]
 80046ba:	2800      	cmp	r0, #0
 80046bc:	d1f0      	bne.n	80046a0 <__sfp+0x24>
 80046be:	230c      	movs	r3, #12
 80046c0:	0004      	movs	r4, r0
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	0020      	movs	r0, r4
 80046c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046c8:	0020      	movs	r0, r4
 80046ca:	4b0a      	ldr	r3, [pc, #40]	; (80046f4 <__sfp+0x78>)
 80046cc:	6665      	str	r5, [r4, #100]	; 0x64
 80046ce:	6025      	str	r5, [r4, #0]
 80046d0:	6065      	str	r5, [r4, #4]
 80046d2:	60a5      	str	r5, [r4, #8]
 80046d4:	60e3      	str	r3, [r4, #12]
 80046d6:	6125      	str	r5, [r4, #16]
 80046d8:	6165      	str	r5, [r4, #20]
 80046da:	61a5      	str	r5, [r4, #24]
 80046dc:	2208      	movs	r2, #8
 80046de:	0029      	movs	r1, r5
 80046e0:	305c      	adds	r0, #92	; 0x5c
 80046e2:	f7ff fc9f 	bl	8004024 <memset>
 80046e6:	6365      	str	r5, [r4, #52]	; 0x34
 80046e8:	63a5      	str	r5, [r4, #56]	; 0x38
 80046ea:	64a5      	str	r5, [r4, #72]	; 0x48
 80046ec:	64e5      	str	r5, [r4, #76]	; 0x4c
 80046ee:	e7e9      	b.n	80046c4 <__sfp+0x48>
 80046f0:	080059b0 	.word	0x080059b0
 80046f4:	ffff0001 	.word	0xffff0001

080046f8 <_fwalk_reent>:
 80046f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046fa:	0004      	movs	r4, r0
 80046fc:	0007      	movs	r7, r0
 80046fe:	2600      	movs	r6, #0
 8004700:	9101      	str	r1, [sp, #4]
 8004702:	3448      	adds	r4, #72	; 0x48
 8004704:	2c00      	cmp	r4, #0
 8004706:	d101      	bne.n	800470c <_fwalk_reent+0x14>
 8004708:	0030      	movs	r0, r6
 800470a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800470c:	6863      	ldr	r3, [r4, #4]
 800470e:	68a5      	ldr	r5, [r4, #8]
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	9b00      	ldr	r3, [sp, #0]
 8004714:	3b01      	subs	r3, #1
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	d501      	bpl.n	800471e <_fwalk_reent+0x26>
 800471a:	6824      	ldr	r4, [r4, #0]
 800471c:	e7f2      	b.n	8004704 <_fwalk_reent+0xc>
 800471e:	89ab      	ldrh	r3, [r5, #12]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d908      	bls.n	8004736 <_fwalk_reent+0x3e>
 8004724:	220e      	movs	r2, #14
 8004726:	5eab      	ldrsh	r3, [r5, r2]
 8004728:	3301      	adds	r3, #1
 800472a:	d004      	beq.n	8004736 <_fwalk_reent+0x3e>
 800472c:	0029      	movs	r1, r5
 800472e:	0038      	movs	r0, r7
 8004730:	9b01      	ldr	r3, [sp, #4]
 8004732:	4798      	blx	r3
 8004734:	4306      	orrs	r6, r0
 8004736:	3568      	adds	r5, #104	; 0x68
 8004738:	e7eb      	b.n	8004712 <_fwalk_reent+0x1a>
	...

0800473c <__locale_ctype_ptr>:
 800473c:	4b04      	ldr	r3, [pc, #16]	; (8004750 <__locale_ctype_ptr+0x14>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d100      	bne.n	8004748 <__locale_ctype_ptr+0xc>
 8004746:	4b03      	ldr	r3, [pc, #12]	; (8004754 <__locale_ctype_ptr+0x18>)
 8004748:	33ec      	adds	r3, #236	; 0xec
 800474a:	6818      	ldr	r0, [r3, #0]
 800474c:	4770      	bx	lr
 800474e:	46c0      	nop			; (mov r8, r8)
 8004750:	20000010 	.word	0x20000010
 8004754:	20000074 	.word	0x20000074

08004758 <__swhatbuf_r>:
 8004758:	b570      	push	{r4, r5, r6, lr}
 800475a:	000e      	movs	r6, r1
 800475c:	001d      	movs	r5, r3
 800475e:	230e      	movs	r3, #14
 8004760:	5ec9      	ldrsh	r1, [r1, r3]
 8004762:	b096      	sub	sp, #88	; 0x58
 8004764:	0014      	movs	r4, r2
 8004766:	2900      	cmp	r1, #0
 8004768:	da07      	bge.n	800477a <__swhatbuf_r+0x22>
 800476a:	2300      	movs	r3, #0
 800476c:	602b      	str	r3, [r5, #0]
 800476e:	89b3      	ldrh	r3, [r6, #12]
 8004770:	061b      	lsls	r3, r3, #24
 8004772:	d411      	bmi.n	8004798 <__swhatbuf_r+0x40>
 8004774:	2380      	movs	r3, #128	; 0x80
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	e00f      	b.n	800479a <__swhatbuf_r+0x42>
 800477a:	466a      	mov	r2, sp
 800477c:	f000 fdf6 	bl	800536c <_fstat_r>
 8004780:	2800      	cmp	r0, #0
 8004782:	dbf2      	blt.n	800476a <__swhatbuf_r+0x12>
 8004784:	22f0      	movs	r2, #240	; 0xf0
 8004786:	9b01      	ldr	r3, [sp, #4]
 8004788:	0212      	lsls	r2, r2, #8
 800478a:	4013      	ands	r3, r2
 800478c:	4a05      	ldr	r2, [pc, #20]	; (80047a4 <__swhatbuf_r+0x4c>)
 800478e:	189b      	adds	r3, r3, r2
 8004790:	425a      	negs	r2, r3
 8004792:	4153      	adcs	r3, r2
 8004794:	602b      	str	r3, [r5, #0]
 8004796:	e7ed      	b.n	8004774 <__swhatbuf_r+0x1c>
 8004798:	2340      	movs	r3, #64	; 0x40
 800479a:	2000      	movs	r0, #0
 800479c:	6023      	str	r3, [r4, #0]
 800479e:	b016      	add	sp, #88	; 0x58
 80047a0:	bd70      	pop	{r4, r5, r6, pc}
 80047a2:	46c0      	nop			; (mov r8, r8)
 80047a4:	ffffe000 	.word	0xffffe000

080047a8 <__smakebuf_r>:
 80047a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047aa:	2602      	movs	r6, #2
 80047ac:	898b      	ldrh	r3, [r1, #12]
 80047ae:	0005      	movs	r5, r0
 80047b0:	000c      	movs	r4, r1
 80047b2:	4233      	tst	r3, r6
 80047b4:	d006      	beq.n	80047c4 <__smakebuf_r+0x1c>
 80047b6:	0023      	movs	r3, r4
 80047b8:	3347      	adds	r3, #71	; 0x47
 80047ba:	6023      	str	r3, [r4, #0]
 80047bc:	6123      	str	r3, [r4, #16]
 80047be:	2301      	movs	r3, #1
 80047c0:	6163      	str	r3, [r4, #20]
 80047c2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80047c4:	ab01      	add	r3, sp, #4
 80047c6:	466a      	mov	r2, sp
 80047c8:	f7ff ffc6 	bl	8004758 <__swhatbuf_r>
 80047cc:	9900      	ldr	r1, [sp, #0]
 80047ce:	0007      	movs	r7, r0
 80047d0:	0028      	movs	r0, r5
 80047d2:	f000 f893 	bl	80048fc <_malloc_r>
 80047d6:	2800      	cmp	r0, #0
 80047d8:	d108      	bne.n	80047ec <__smakebuf_r+0x44>
 80047da:	220c      	movs	r2, #12
 80047dc:	5ea3      	ldrsh	r3, [r4, r2]
 80047de:	059a      	lsls	r2, r3, #22
 80047e0:	d4ef      	bmi.n	80047c2 <__smakebuf_r+0x1a>
 80047e2:	2203      	movs	r2, #3
 80047e4:	4393      	bics	r3, r2
 80047e6:	431e      	orrs	r6, r3
 80047e8:	81a6      	strh	r6, [r4, #12]
 80047ea:	e7e4      	b.n	80047b6 <__smakebuf_r+0xe>
 80047ec:	4b0f      	ldr	r3, [pc, #60]	; (800482c <__smakebuf_r+0x84>)
 80047ee:	62ab      	str	r3, [r5, #40]	; 0x28
 80047f0:	2380      	movs	r3, #128	; 0x80
 80047f2:	89a2      	ldrh	r2, [r4, #12]
 80047f4:	6020      	str	r0, [r4, #0]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	81a3      	strh	r3, [r4, #12]
 80047fa:	9b00      	ldr	r3, [sp, #0]
 80047fc:	6120      	str	r0, [r4, #16]
 80047fe:	6163      	str	r3, [r4, #20]
 8004800:	9b01      	ldr	r3, [sp, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00d      	beq.n	8004822 <__smakebuf_r+0x7a>
 8004806:	230e      	movs	r3, #14
 8004808:	5ee1      	ldrsh	r1, [r4, r3]
 800480a:	0028      	movs	r0, r5
 800480c:	f000 fdc0 	bl	8005390 <_isatty_r>
 8004810:	2800      	cmp	r0, #0
 8004812:	d006      	beq.n	8004822 <__smakebuf_r+0x7a>
 8004814:	2203      	movs	r2, #3
 8004816:	89a3      	ldrh	r3, [r4, #12]
 8004818:	4393      	bics	r3, r2
 800481a:	001a      	movs	r2, r3
 800481c:	2301      	movs	r3, #1
 800481e:	4313      	orrs	r3, r2
 8004820:	81a3      	strh	r3, [r4, #12]
 8004822:	89a0      	ldrh	r0, [r4, #12]
 8004824:	4338      	orrs	r0, r7
 8004826:	81a0      	strh	r0, [r4, #12]
 8004828:	e7cb      	b.n	80047c2 <__smakebuf_r+0x1a>
 800482a:	46c0      	nop			; (mov r8, r8)
 800482c:	080045d9 	.word	0x080045d9

08004830 <malloc>:
 8004830:	b510      	push	{r4, lr}
 8004832:	4b03      	ldr	r3, [pc, #12]	; (8004840 <malloc+0x10>)
 8004834:	0001      	movs	r1, r0
 8004836:	6818      	ldr	r0, [r3, #0]
 8004838:	f000 f860 	bl	80048fc <_malloc_r>
 800483c:	bd10      	pop	{r4, pc}
 800483e:	46c0      	nop			; (mov r8, r8)
 8004840:	20000010 	.word	0x20000010

08004844 <__ascii_mbtowc>:
 8004844:	b082      	sub	sp, #8
 8004846:	2900      	cmp	r1, #0
 8004848:	d100      	bne.n	800484c <__ascii_mbtowc+0x8>
 800484a:	a901      	add	r1, sp, #4
 800484c:	1e10      	subs	r0, r2, #0
 800484e:	d006      	beq.n	800485e <__ascii_mbtowc+0x1a>
 8004850:	2b00      	cmp	r3, #0
 8004852:	d006      	beq.n	8004862 <__ascii_mbtowc+0x1e>
 8004854:	7813      	ldrb	r3, [r2, #0]
 8004856:	600b      	str	r3, [r1, #0]
 8004858:	7810      	ldrb	r0, [r2, #0]
 800485a:	1e43      	subs	r3, r0, #1
 800485c:	4198      	sbcs	r0, r3
 800485e:	b002      	add	sp, #8
 8004860:	4770      	bx	lr
 8004862:	2002      	movs	r0, #2
 8004864:	4240      	negs	r0, r0
 8004866:	e7fa      	b.n	800485e <__ascii_mbtowc+0x1a>

08004868 <_free_r>:
 8004868:	b570      	push	{r4, r5, r6, lr}
 800486a:	0005      	movs	r5, r0
 800486c:	2900      	cmp	r1, #0
 800486e:	d010      	beq.n	8004892 <_free_r+0x2a>
 8004870:	1f0c      	subs	r4, r1, #4
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	da00      	bge.n	800487a <_free_r+0x12>
 8004878:	18e4      	adds	r4, r4, r3
 800487a:	0028      	movs	r0, r5
 800487c:	f000 fdd5 	bl	800542a <__malloc_lock>
 8004880:	4a1d      	ldr	r2, [pc, #116]	; (80048f8 <_free_r+0x90>)
 8004882:	6813      	ldr	r3, [r2, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d105      	bne.n	8004894 <_free_r+0x2c>
 8004888:	6063      	str	r3, [r4, #4]
 800488a:	6014      	str	r4, [r2, #0]
 800488c:	0028      	movs	r0, r5
 800488e:	f000 fdcd 	bl	800542c <__malloc_unlock>
 8004892:	bd70      	pop	{r4, r5, r6, pc}
 8004894:	42a3      	cmp	r3, r4
 8004896:	d909      	bls.n	80048ac <_free_r+0x44>
 8004898:	6821      	ldr	r1, [r4, #0]
 800489a:	1860      	adds	r0, r4, r1
 800489c:	4283      	cmp	r3, r0
 800489e:	d1f3      	bne.n	8004888 <_free_r+0x20>
 80048a0:	6818      	ldr	r0, [r3, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	1841      	adds	r1, r0, r1
 80048a6:	6021      	str	r1, [r4, #0]
 80048a8:	e7ee      	b.n	8004888 <_free_r+0x20>
 80048aa:	0013      	movs	r3, r2
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	2a00      	cmp	r2, #0
 80048b0:	d001      	beq.n	80048b6 <_free_r+0x4e>
 80048b2:	42a2      	cmp	r2, r4
 80048b4:	d9f9      	bls.n	80048aa <_free_r+0x42>
 80048b6:	6819      	ldr	r1, [r3, #0]
 80048b8:	1858      	adds	r0, r3, r1
 80048ba:	42a0      	cmp	r0, r4
 80048bc:	d10b      	bne.n	80048d6 <_free_r+0x6e>
 80048be:	6820      	ldr	r0, [r4, #0]
 80048c0:	1809      	adds	r1, r1, r0
 80048c2:	1858      	adds	r0, r3, r1
 80048c4:	6019      	str	r1, [r3, #0]
 80048c6:	4282      	cmp	r2, r0
 80048c8:	d1e0      	bne.n	800488c <_free_r+0x24>
 80048ca:	6810      	ldr	r0, [r2, #0]
 80048cc:	6852      	ldr	r2, [r2, #4]
 80048ce:	1841      	adds	r1, r0, r1
 80048d0:	6019      	str	r1, [r3, #0]
 80048d2:	605a      	str	r2, [r3, #4]
 80048d4:	e7da      	b.n	800488c <_free_r+0x24>
 80048d6:	42a0      	cmp	r0, r4
 80048d8:	d902      	bls.n	80048e0 <_free_r+0x78>
 80048da:	230c      	movs	r3, #12
 80048dc:	602b      	str	r3, [r5, #0]
 80048de:	e7d5      	b.n	800488c <_free_r+0x24>
 80048e0:	6821      	ldr	r1, [r4, #0]
 80048e2:	1860      	adds	r0, r4, r1
 80048e4:	4282      	cmp	r2, r0
 80048e6:	d103      	bne.n	80048f0 <_free_r+0x88>
 80048e8:	6810      	ldr	r0, [r2, #0]
 80048ea:	6852      	ldr	r2, [r2, #4]
 80048ec:	1841      	adds	r1, r0, r1
 80048ee:	6021      	str	r1, [r4, #0]
 80048f0:	6062      	str	r2, [r4, #4]
 80048f2:	605c      	str	r4, [r3, #4]
 80048f4:	e7ca      	b.n	800488c <_free_r+0x24>
 80048f6:	46c0      	nop			; (mov r8, r8)
 80048f8:	200002cc 	.word	0x200002cc

080048fc <_malloc_r>:
 80048fc:	2303      	movs	r3, #3
 80048fe:	b570      	push	{r4, r5, r6, lr}
 8004900:	1ccd      	adds	r5, r1, #3
 8004902:	439d      	bics	r5, r3
 8004904:	3508      	adds	r5, #8
 8004906:	0006      	movs	r6, r0
 8004908:	2d0c      	cmp	r5, #12
 800490a:	d21e      	bcs.n	800494a <_malloc_r+0x4e>
 800490c:	250c      	movs	r5, #12
 800490e:	42a9      	cmp	r1, r5
 8004910:	d81d      	bhi.n	800494e <_malloc_r+0x52>
 8004912:	0030      	movs	r0, r6
 8004914:	f000 fd89 	bl	800542a <__malloc_lock>
 8004918:	4a25      	ldr	r2, [pc, #148]	; (80049b0 <_malloc_r+0xb4>)
 800491a:	6814      	ldr	r4, [r2, #0]
 800491c:	0021      	movs	r1, r4
 800491e:	2900      	cmp	r1, #0
 8004920:	d119      	bne.n	8004956 <_malloc_r+0x5a>
 8004922:	4c24      	ldr	r4, [pc, #144]	; (80049b4 <_malloc_r+0xb8>)
 8004924:	6823      	ldr	r3, [r4, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d103      	bne.n	8004932 <_malloc_r+0x36>
 800492a:	0030      	movs	r0, r6
 800492c:	f000 fc8e 	bl	800524c <_sbrk_r>
 8004930:	6020      	str	r0, [r4, #0]
 8004932:	0029      	movs	r1, r5
 8004934:	0030      	movs	r0, r6
 8004936:	f000 fc89 	bl	800524c <_sbrk_r>
 800493a:	1c43      	adds	r3, r0, #1
 800493c:	d12b      	bne.n	8004996 <_malloc_r+0x9a>
 800493e:	230c      	movs	r3, #12
 8004940:	0030      	movs	r0, r6
 8004942:	6033      	str	r3, [r6, #0]
 8004944:	f000 fd72 	bl	800542c <__malloc_unlock>
 8004948:	e003      	b.n	8004952 <_malloc_r+0x56>
 800494a:	2d00      	cmp	r5, #0
 800494c:	dadf      	bge.n	800490e <_malloc_r+0x12>
 800494e:	230c      	movs	r3, #12
 8004950:	6033      	str	r3, [r6, #0]
 8004952:	2000      	movs	r0, #0
 8004954:	bd70      	pop	{r4, r5, r6, pc}
 8004956:	680b      	ldr	r3, [r1, #0]
 8004958:	1b5b      	subs	r3, r3, r5
 800495a:	d419      	bmi.n	8004990 <_malloc_r+0x94>
 800495c:	2b0b      	cmp	r3, #11
 800495e:	d903      	bls.n	8004968 <_malloc_r+0x6c>
 8004960:	600b      	str	r3, [r1, #0]
 8004962:	18cc      	adds	r4, r1, r3
 8004964:	6025      	str	r5, [r4, #0]
 8004966:	e003      	b.n	8004970 <_malloc_r+0x74>
 8004968:	684b      	ldr	r3, [r1, #4]
 800496a:	428c      	cmp	r4, r1
 800496c:	d10d      	bne.n	800498a <_malloc_r+0x8e>
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	0030      	movs	r0, r6
 8004972:	f000 fd5b 	bl	800542c <__malloc_unlock>
 8004976:	0020      	movs	r0, r4
 8004978:	2207      	movs	r2, #7
 800497a:	300b      	adds	r0, #11
 800497c:	1d23      	adds	r3, r4, #4
 800497e:	4390      	bics	r0, r2
 8004980:	1ac3      	subs	r3, r0, r3
 8004982:	d0e7      	beq.n	8004954 <_malloc_r+0x58>
 8004984:	425a      	negs	r2, r3
 8004986:	50e2      	str	r2, [r4, r3]
 8004988:	e7e4      	b.n	8004954 <_malloc_r+0x58>
 800498a:	6063      	str	r3, [r4, #4]
 800498c:	000c      	movs	r4, r1
 800498e:	e7ef      	b.n	8004970 <_malloc_r+0x74>
 8004990:	000c      	movs	r4, r1
 8004992:	6849      	ldr	r1, [r1, #4]
 8004994:	e7c3      	b.n	800491e <_malloc_r+0x22>
 8004996:	2303      	movs	r3, #3
 8004998:	1cc4      	adds	r4, r0, #3
 800499a:	439c      	bics	r4, r3
 800499c:	42a0      	cmp	r0, r4
 800499e:	d0e1      	beq.n	8004964 <_malloc_r+0x68>
 80049a0:	1a21      	subs	r1, r4, r0
 80049a2:	0030      	movs	r0, r6
 80049a4:	f000 fc52 	bl	800524c <_sbrk_r>
 80049a8:	1c43      	adds	r3, r0, #1
 80049aa:	d1db      	bne.n	8004964 <_malloc_r+0x68>
 80049ac:	e7c7      	b.n	800493e <_malloc_r+0x42>
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	200002cc 	.word	0x200002cc
 80049b4:	200002d0 	.word	0x200002d0

080049b8 <__ssputs_r>:
 80049b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ba:	688e      	ldr	r6, [r1, #8]
 80049bc:	b085      	sub	sp, #20
 80049be:	0007      	movs	r7, r0
 80049c0:	000c      	movs	r4, r1
 80049c2:	9203      	str	r2, [sp, #12]
 80049c4:	9301      	str	r3, [sp, #4]
 80049c6:	429e      	cmp	r6, r3
 80049c8:	d83c      	bhi.n	8004a44 <__ssputs_r+0x8c>
 80049ca:	2390      	movs	r3, #144	; 0x90
 80049cc:	898a      	ldrh	r2, [r1, #12]
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	421a      	tst	r2, r3
 80049d2:	d034      	beq.n	8004a3e <__ssputs_r+0x86>
 80049d4:	2503      	movs	r5, #3
 80049d6:	6909      	ldr	r1, [r1, #16]
 80049d8:	6823      	ldr	r3, [r4, #0]
 80049da:	1a5b      	subs	r3, r3, r1
 80049dc:	9302      	str	r3, [sp, #8]
 80049de:	6963      	ldr	r3, [r4, #20]
 80049e0:	9802      	ldr	r0, [sp, #8]
 80049e2:	435d      	muls	r5, r3
 80049e4:	0feb      	lsrs	r3, r5, #31
 80049e6:	195d      	adds	r5, r3, r5
 80049e8:	9b01      	ldr	r3, [sp, #4]
 80049ea:	106d      	asrs	r5, r5, #1
 80049ec:	3301      	adds	r3, #1
 80049ee:	181b      	adds	r3, r3, r0
 80049f0:	42ab      	cmp	r3, r5
 80049f2:	d900      	bls.n	80049f6 <__ssputs_r+0x3e>
 80049f4:	001d      	movs	r5, r3
 80049f6:	0553      	lsls	r3, r2, #21
 80049f8:	d532      	bpl.n	8004a60 <__ssputs_r+0xa8>
 80049fa:	0029      	movs	r1, r5
 80049fc:	0038      	movs	r0, r7
 80049fe:	f7ff ff7d 	bl	80048fc <_malloc_r>
 8004a02:	1e06      	subs	r6, r0, #0
 8004a04:	d109      	bne.n	8004a1a <__ssputs_r+0x62>
 8004a06:	230c      	movs	r3, #12
 8004a08:	603b      	str	r3, [r7, #0]
 8004a0a:	2340      	movs	r3, #64	; 0x40
 8004a0c:	2001      	movs	r0, #1
 8004a0e:	89a2      	ldrh	r2, [r4, #12]
 8004a10:	4240      	negs	r0, r0
 8004a12:	4313      	orrs	r3, r2
 8004a14:	81a3      	strh	r3, [r4, #12]
 8004a16:	b005      	add	sp, #20
 8004a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a1a:	9a02      	ldr	r2, [sp, #8]
 8004a1c:	6921      	ldr	r1, [r4, #16]
 8004a1e:	f000 fce8 	bl	80053f2 <memcpy>
 8004a22:	89a3      	ldrh	r3, [r4, #12]
 8004a24:	4a14      	ldr	r2, [pc, #80]	; (8004a78 <__ssputs_r+0xc0>)
 8004a26:	401a      	ands	r2, r3
 8004a28:	2380      	movs	r3, #128	; 0x80
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	81a3      	strh	r3, [r4, #12]
 8004a2e:	9b02      	ldr	r3, [sp, #8]
 8004a30:	6126      	str	r6, [r4, #16]
 8004a32:	18f6      	adds	r6, r6, r3
 8004a34:	6026      	str	r6, [r4, #0]
 8004a36:	6165      	str	r5, [r4, #20]
 8004a38:	9e01      	ldr	r6, [sp, #4]
 8004a3a:	1aed      	subs	r5, r5, r3
 8004a3c:	60a5      	str	r5, [r4, #8]
 8004a3e:	9b01      	ldr	r3, [sp, #4]
 8004a40:	429e      	cmp	r6, r3
 8004a42:	d900      	bls.n	8004a46 <__ssputs_r+0x8e>
 8004a44:	9e01      	ldr	r6, [sp, #4]
 8004a46:	0032      	movs	r2, r6
 8004a48:	9903      	ldr	r1, [sp, #12]
 8004a4a:	6820      	ldr	r0, [r4, #0]
 8004a4c:	f000 fcda 	bl	8005404 <memmove>
 8004a50:	68a3      	ldr	r3, [r4, #8]
 8004a52:	2000      	movs	r0, #0
 8004a54:	1b9b      	subs	r3, r3, r6
 8004a56:	60a3      	str	r3, [r4, #8]
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	199e      	adds	r6, r3, r6
 8004a5c:	6026      	str	r6, [r4, #0]
 8004a5e:	e7da      	b.n	8004a16 <__ssputs_r+0x5e>
 8004a60:	002a      	movs	r2, r5
 8004a62:	0038      	movs	r0, r7
 8004a64:	f000 fce3 	bl	800542e <_realloc_r>
 8004a68:	1e06      	subs	r6, r0, #0
 8004a6a:	d1e0      	bne.n	8004a2e <__ssputs_r+0x76>
 8004a6c:	6921      	ldr	r1, [r4, #16]
 8004a6e:	0038      	movs	r0, r7
 8004a70:	f7ff fefa 	bl	8004868 <_free_r>
 8004a74:	e7c7      	b.n	8004a06 <__ssputs_r+0x4e>
 8004a76:	46c0      	nop			; (mov r8, r8)
 8004a78:	fffffb7f 	.word	0xfffffb7f

08004a7c <_svfiprintf_r>:
 8004a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a7e:	b0a1      	sub	sp, #132	; 0x84
 8004a80:	9003      	str	r0, [sp, #12]
 8004a82:	001d      	movs	r5, r3
 8004a84:	898b      	ldrh	r3, [r1, #12]
 8004a86:	000f      	movs	r7, r1
 8004a88:	0016      	movs	r6, r2
 8004a8a:	061b      	lsls	r3, r3, #24
 8004a8c:	d511      	bpl.n	8004ab2 <_svfiprintf_r+0x36>
 8004a8e:	690b      	ldr	r3, [r1, #16]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10e      	bne.n	8004ab2 <_svfiprintf_r+0x36>
 8004a94:	2140      	movs	r1, #64	; 0x40
 8004a96:	f7ff ff31 	bl	80048fc <_malloc_r>
 8004a9a:	6038      	str	r0, [r7, #0]
 8004a9c:	6138      	str	r0, [r7, #16]
 8004a9e:	2800      	cmp	r0, #0
 8004aa0:	d105      	bne.n	8004aae <_svfiprintf_r+0x32>
 8004aa2:	230c      	movs	r3, #12
 8004aa4:	9a03      	ldr	r2, [sp, #12]
 8004aa6:	3801      	subs	r0, #1
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	b021      	add	sp, #132	; 0x84
 8004aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004aae:	2340      	movs	r3, #64	; 0x40
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	ac08      	add	r4, sp, #32
 8004ab6:	6163      	str	r3, [r4, #20]
 8004ab8:	3320      	adds	r3, #32
 8004aba:	7663      	strb	r3, [r4, #25]
 8004abc:	3310      	adds	r3, #16
 8004abe:	76a3      	strb	r3, [r4, #26]
 8004ac0:	9507      	str	r5, [sp, #28]
 8004ac2:	0035      	movs	r5, r6
 8004ac4:	782b      	ldrb	r3, [r5, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <_svfiprintf_r+0x52>
 8004aca:	2b25      	cmp	r3, #37	; 0x25
 8004acc:	d146      	bne.n	8004b5c <_svfiprintf_r+0xe0>
 8004ace:	1bab      	subs	r3, r5, r6
 8004ad0:	9305      	str	r3, [sp, #20]
 8004ad2:	d00c      	beq.n	8004aee <_svfiprintf_r+0x72>
 8004ad4:	0032      	movs	r2, r6
 8004ad6:	0039      	movs	r1, r7
 8004ad8:	9803      	ldr	r0, [sp, #12]
 8004ada:	f7ff ff6d 	bl	80049b8 <__ssputs_r>
 8004ade:	1c43      	adds	r3, r0, #1
 8004ae0:	d100      	bne.n	8004ae4 <_svfiprintf_r+0x68>
 8004ae2:	e0ae      	b.n	8004c42 <_svfiprintf_r+0x1c6>
 8004ae4:	6962      	ldr	r2, [r4, #20]
 8004ae6:	9b05      	ldr	r3, [sp, #20]
 8004ae8:	4694      	mov	ip, r2
 8004aea:	4463      	add	r3, ip
 8004aec:	6163      	str	r3, [r4, #20]
 8004aee:	782b      	ldrb	r3, [r5, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d100      	bne.n	8004af6 <_svfiprintf_r+0x7a>
 8004af4:	e0a5      	b.n	8004c42 <_svfiprintf_r+0x1c6>
 8004af6:	2201      	movs	r2, #1
 8004af8:	2300      	movs	r3, #0
 8004afa:	4252      	negs	r2, r2
 8004afc:	6062      	str	r2, [r4, #4]
 8004afe:	a904      	add	r1, sp, #16
 8004b00:	3254      	adds	r2, #84	; 0x54
 8004b02:	1852      	adds	r2, r2, r1
 8004b04:	1c6e      	adds	r6, r5, #1
 8004b06:	6023      	str	r3, [r4, #0]
 8004b08:	60e3      	str	r3, [r4, #12]
 8004b0a:	60a3      	str	r3, [r4, #8]
 8004b0c:	7013      	strb	r3, [r2, #0]
 8004b0e:	65a3      	str	r3, [r4, #88]	; 0x58
 8004b10:	7831      	ldrb	r1, [r6, #0]
 8004b12:	2205      	movs	r2, #5
 8004b14:	4853      	ldr	r0, [pc, #332]	; (8004c64 <_svfiprintf_r+0x1e8>)
 8004b16:	f000 fc61 	bl	80053dc <memchr>
 8004b1a:	1c75      	adds	r5, r6, #1
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	d11f      	bne.n	8004b60 <_svfiprintf_r+0xe4>
 8004b20:	6822      	ldr	r2, [r4, #0]
 8004b22:	06d3      	lsls	r3, r2, #27
 8004b24:	d504      	bpl.n	8004b30 <_svfiprintf_r+0xb4>
 8004b26:	2353      	movs	r3, #83	; 0x53
 8004b28:	a904      	add	r1, sp, #16
 8004b2a:	185b      	adds	r3, r3, r1
 8004b2c:	2120      	movs	r1, #32
 8004b2e:	7019      	strb	r1, [r3, #0]
 8004b30:	0713      	lsls	r3, r2, #28
 8004b32:	d504      	bpl.n	8004b3e <_svfiprintf_r+0xc2>
 8004b34:	2353      	movs	r3, #83	; 0x53
 8004b36:	a904      	add	r1, sp, #16
 8004b38:	185b      	adds	r3, r3, r1
 8004b3a:	212b      	movs	r1, #43	; 0x2b
 8004b3c:	7019      	strb	r1, [r3, #0]
 8004b3e:	7833      	ldrb	r3, [r6, #0]
 8004b40:	2b2a      	cmp	r3, #42	; 0x2a
 8004b42:	d016      	beq.n	8004b72 <_svfiprintf_r+0xf6>
 8004b44:	0035      	movs	r5, r6
 8004b46:	2100      	movs	r1, #0
 8004b48:	200a      	movs	r0, #10
 8004b4a:	68e3      	ldr	r3, [r4, #12]
 8004b4c:	782a      	ldrb	r2, [r5, #0]
 8004b4e:	1c6e      	adds	r6, r5, #1
 8004b50:	3a30      	subs	r2, #48	; 0x30
 8004b52:	2a09      	cmp	r2, #9
 8004b54:	d94e      	bls.n	8004bf4 <_svfiprintf_r+0x178>
 8004b56:	2900      	cmp	r1, #0
 8004b58:	d018      	beq.n	8004b8c <_svfiprintf_r+0x110>
 8004b5a:	e010      	b.n	8004b7e <_svfiprintf_r+0x102>
 8004b5c:	3501      	adds	r5, #1
 8004b5e:	e7b1      	b.n	8004ac4 <_svfiprintf_r+0x48>
 8004b60:	4b40      	ldr	r3, [pc, #256]	; (8004c64 <_svfiprintf_r+0x1e8>)
 8004b62:	6822      	ldr	r2, [r4, #0]
 8004b64:	1ac0      	subs	r0, r0, r3
 8004b66:	2301      	movs	r3, #1
 8004b68:	4083      	lsls	r3, r0
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	6023      	str	r3, [r4, #0]
 8004b6e:	002e      	movs	r6, r5
 8004b70:	e7ce      	b.n	8004b10 <_svfiprintf_r+0x94>
 8004b72:	9b07      	ldr	r3, [sp, #28]
 8004b74:	1d19      	adds	r1, r3, #4
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	9107      	str	r1, [sp, #28]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	db01      	blt.n	8004b82 <_svfiprintf_r+0x106>
 8004b7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b80:	e004      	b.n	8004b8c <_svfiprintf_r+0x110>
 8004b82:	425b      	negs	r3, r3
 8004b84:	60e3      	str	r3, [r4, #12]
 8004b86:	2302      	movs	r3, #2
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	6023      	str	r3, [r4, #0]
 8004b8c:	782b      	ldrb	r3, [r5, #0]
 8004b8e:	2b2e      	cmp	r3, #46	; 0x2e
 8004b90:	d10a      	bne.n	8004ba8 <_svfiprintf_r+0x12c>
 8004b92:	786b      	ldrb	r3, [r5, #1]
 8004b94:	2b2a      	cmp	r3, #42	; 0x2a
 8004b96:	d135      	bne.n	8004c04 <_svfiprintf_r+0x188>
 8004b98:	9b07      	ldr	r3, [sp, #28]
 8004b9a:	3502      	adds	r5, #2
 8004b9c:	1d1a      	adds	r2, r3, #4
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	9207      	str	r2, [sp, #28]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	db2b      	blt.n	8004bfe <_svfiprintf_r+0x182>
 8004ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ba8:	4e2f      	ldr	r6, [pc, #188]	; (8004c68 <_svfiprintf_r+0x1ec>)
 8004baa:	7829      	ldrb	r1, [r5, #0]
 8004bac:	2203      	movs	r2, #3
 8004bae:	0030      	movs	r0, r6
 8004bb0:	f000 fc14 	bl	80053dc <memchr>
 8004bb4:	2800      	cmp	r0, #0
 8004bb6:	d006      	beq.n	8004bc6 <_svfiprintf_r+0x14a>
 8004bb8:	2340      	movs	r3, #64	; 0x40
 8004bba:	1b80      	subs	r0, r0, r6
 8004bbc:	4083      	lsls	r3, r0
 8004bbe:	6822      	ldr	r2, [r4, #0]
 8004bc0:	3501      	adds	r5, #1
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	6023      	str	r3, [r4, #0]
 8004bc6:	7829      	ldrb	r1, [r5, #0]
 8004bc8:	2206      	movs	r2, #6
 8004bca:	4828      	ldr	r0, [pc, #160]	; (8004c6c <_svfiprintf_r+0x1f0>)
 8004bcc:	1c6e      	adds	r6, r5, #1
 8004bce:	7621      	strb	r1, [r4, #24]
 8004bd0:	f000 fc04 	bl	80053dc <memchr>
 8004bd4:	2800      	cmp	r0, #0
 8004bd6:	d03c      	beq.n	8004c52 <_svfiprintf_r+0x1d6>
 8004bd8:	4b25      	ldr	r3, [pc, #148]	; (8004c70 <_svfiprintf_r+0x1f4>)
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d125      	bne.n	8004c2a <_svfiprintf_r+0x1ae>
 8004bde:	2207      	movs	r2, #7
 8004be0:	9b07      	ldr	r3, [sp, #28]
 8004be2:	3307      	adds	r3, #7
 8004be4:	4393      	bics	r3, r2
 8004be6:	3308      	adds	r3, #8
 8004be8:	9307      	str	r3, [sp, #28]
 8004bea:	6963      	ldr	r3, [r4, #20]
 8004bec:	9a04      	ldr	r2, [sp, #16]
 8004bee:	189b      	adds	r3, r3, r2
 8004bf0:	6163      	str	r3, [r4, #20]
 8004bf2:	e766      	b.n	8004ac2 <_svfiprintf_r+0x46>
 8004bf4:	4343      	muls	r3, r0
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	189b      	adds	r3, r3, r2
 8004bfa:	0035      	movs	r5, r6
 8004bfc:	e7a6      	b.n	8004b4c <_svfiprintf_r+0xd0>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	425b      	negs	r3, r3
 8004c02:	e7d0      	b.n	8004ba6 <_svfiprintf_r+0x12a>
 8004c04:	2300      	movs	r3, #0
 8004c06:	200a      	movs	r0, #10
 8004c08:	001a      	movs	r2, r3
 8004c0a:	3501      	adds	r5, #1
 8004c0c:	6063      	str	r3, [r4, #4]
 8004c0e:	7829      	ldrb	r1, [r5, #0]
 8004c10:	1c6e      	adds	r6, r5, #1
 8004c12:	3930      	subs	r1, #48	; 0x30
 8004c14:	2909      	cmp	r1, #9
 8004c16:	d903      	bls.n	8004c20 <_svfiprintf_r+0x1a4>
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d0c5      	beq.n	8004ba8 <_svfiprintf_r+0x12c>
 8004c1c:	9209      	str	r2, [sp, #36]	; 0x24
 8004c1e:	e7c3      	b.n	8004ba8 <_svfiprintf_r+0x12c>
 8004c20:	4342      	muls	r2, r0
 8004c22:	2301      	movs	r3, #1
 8004c24:	1852      	adds	r2, r2, r1
 8004c26:	0035      	movs	r5, r6
 8004c28:	e7f1      	b.n	8004c0e <_svfiprintf_r+0x192>
 8004c2a:	ab07      	add	r3, sp, #28
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	003a      	movs	r2, r7
 8004c30:	4b10      	ldr	r3, [pc, #64]	; (8004c74 <_svfiprintf_r+0x1f8>)
 8004c32:	0021      	movs	r1, r4
 8004c34:	9803      	ldr	r0, [sp, #12]
 8004c36:	e000      	b.n	8004c3a <_svfiprintf_r+0x1be>
 8004c38:	bf00      	nop
 8004c3a:	9004      	str	r0, [sp, #16]
 8004c3c:	9b04      	ldr	r3, [sp, #16]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	d1d3      	bne.n	8004bea <_svfiprintf_r+0x16e>
 8004c42:	89bb      	ldrh	r3, [r7, #12]
 8004c44:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004c46:	065b      	lsls	r3, r3, #25
 8004c48:	d400      	bmi.n	8004c4c <_svfiprintf_r+0x1d0>
 8004c4a:	e72e      	b.n	8004aaa <_svfiprintf_r+0x2e>
 8004c4c:	2001      	movs	r0, #1
 8004c4e:	4240      	negs	r0, r0
 8004c50:	e72b      	b.n	8004aaa <_svfiprintf_r+0x2e>
 8004c52:	ab07      	add	r3, sp, #28
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	003a      	movs	r2, r7
 8004c58:	4b06      	ldr	r3, [pc, #24]	; (8004c74 <_svfiprintf_r+0x1f8>)
 8004c5a:	0021      	movs	r1, r4
 8004c5c:	9803      	ldr	r0, [sp, #12]
 8004c5e:	f000 f9b7 	bl	8004fd0 <_printf_i>
 8004c62:	e7ea      	b.n	8004c3a <_svfiprintf_r+0x1be>
 8004c64:	08005a1e 	.word	0x08005a1e
 8004c68:	08005a24 	.word	0x08005a24
 8004c6c:	08005a28 	.word	0x08005a28
 8004c70:	00000000 	.word	0x00000000
 8004c74:	080049b9 	.word	0x080049b9

08004c78 <__sfputc_r>:
 8004c78:	6893      	ldr	r3, [r2, #8]
 8004c7a:	b510      	push	{r4, lr}
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	6093      	str	r3, [r2, #8]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	da04      	bge.n	8004c8e <__sfputc_r+0x16>
 8004c84:	6994      	ldr	r4, [r2, #24]
 8004c86:	42a3      	cmp	r3, r4
 8004c88:	db07      	blt.n	8004c9a <__sfputc_r+0x22>
 8004c8a:	290a      	cmp	r1, #10
 8004c8c:	d005      	beq.n	8004c9a <__sfputc_r+0x22>
 8004c8e:	6813      	ldr	r3, [r2, #0]
 8004c90:	1c58      	adds	r0, r3, #1
 8004c92:	6010      	str	r0, [r2, #0]
 8004c94:	7019      	strb	r1, [r3, #0]
 8004c96:	0008      	movs	r0, r1
 8004c98:	bd10      	pop	{r4, pc}
 8004c9a:	f7ff faf7 	bl	800428c <__swbuf_r>
 8004c9e:	0001      	movs	r1, r0
 8004ca0:	e7f9      	b.n	8004c96 <__sfputc_r+0x1e>

08004ca2 <__sfputs_r>:
 8004ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca4:	0006      	movs	r6, r0
 8004ca6:	000f      	movs	r7, r1
 8004ca8:	0014      	movs	r4, r2
 8004caa:	18d5      	adds	r5, r2, r3
 8004cac:	42ac      	cmp	r4, r5
 8004cae:	d101      	bne.n	8004cb4 <__sfputs_r+0x12>
 8004cb0:	2000      	movs	r0, #0
 8004cb2:	e007      	b.n	8004cc4 <__sfputs_r+0x22>
 8004cb4:	7821      	ldrb	r1, [r4, #0]
 8004cb6:	003a      	movs	r2, r7
 8004cb8:	0030      	movs	r0, r6
 8004cba:	f7ff ffdd 	bl	8004c78 <__sfputc_r>
 8004cbe:	3401      	adds	r4, #1
 8004cc0:	1c43      	adds	r3, r0, #1
 8004cc2:	d1f3      	bne.n	8004cac <__sfputs_r+0xa>
 8004cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004cc8 <_vfiprintf_r>:
 8004cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cca:	b0a1      	sub	sp, #132	; 0x84
 8004ccc:	9003      	str	r0, [sp, #12]
 8004cce:	000f      	movs	r7, r1
 8004cd0:	0016      	movs	r6, r2
 8004cd2:	001d      	movs	r5, r3
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	d005      	beq.n	8004ce4 <_vfiprintf_r+0x1c>
 8004cd8:	6983      	ldr	r3, [r0, #24]
 8004cda:	9305      	str	r3, [sp, #20]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <_vfiprintf_r+0x1c>
 8004ce0:	f7ff fc98 	bl	8004614 <__sinit>
 8004ce4:	4b7b      	ldr	r3, [pc, #492]	; (8004ed4 <_vfiprintf_r+0x20c>)
 8004ce6:	429f      	cmp	r7, r3
 8004ce8:	d15c      	bne.n	8004da4 <_vfiprintf_r+0xdc>
 8004cea:	9b03      	ldr	r3, [sp, #12]
 8004cec:	685f      	ldr	r7, [r3, #4]
 8004cee:	89bb      	ldrh	r3, [r7, #12]
 8004cf0:	071b      	lsls	r3, r3, #28
 8004cf2:	d563      	bpl.n	8004dbc <_vfiprintf_r+0xf4>
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d060      	beq.n	8004dbc <_vfiprintf_r+0xf4>
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	ac08      	add	r4, sp, #32
 8004cfe:	6163      	str	r3, [r4, #20]
 8004d00:	3320      	adds	r3, #32
 8004d02:	7663      	strb	r3, [r4, #25]
 8004d04:	3310      	adds	r3, #16
 8004d06:	76a3      	strb	r3, [r4, #26]
 8004d08:	9507      	str	r5, [sp, #28]
 8004d0a:	0035      	movs	r5, r6
 8004d0c:	782b      	ldrb	r3, [r5, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <_vfiprintf_r+0x4e>
 8004d12:	2b25      	cmp	r3, #37	; 0x25
 8004d14:	d15c      	bne.n	8004dd0 <_vfiprintf_r+0x108>
 8004d16:	1bab      	subs	r3, r5, r6
 8004d18:	9305      	str	r3, [sp, #20]
 8004d1a:	d00c      	beq.n	8004d36 <_vfiprintf_r+0x6e>
 8004d1c:	0032      	movs	r2, r6
 8004d1e:	0039      	movs	r1, r7
 8004d20:	9803      	ldr	r0, [sp, #12]
 8004d22:	f7ff ffbe 	bl	8004ca2 <__sfputs_r>
 8004d26:	1c43      	adds	r3, r0, #1
 8004d28:	d100      	bne.n	8004d2c <_vfiprintf_r+0x64>
 8004d2a:	e0c4      	b.n	8004eb6 <_vfiprintf_r+0x1ee>
 8004d2c:	6962      	ldr	r2, [r4, #20]
 8004d2e:	9b05      	ldr	r3, [sp, #20]
 8004d30:	4694      	mov	ip, r2
 8004d32:	4463      	add	r3, ip
 8004d34:	6163      	str	r3, [r4, #20]
 8004d36:	782b      	ldrb	r3, [r5, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d100      	bne.n	8004d3e <_vfiprintf_r+0x76>
 8004d3c:	e0bb      	b.n	8004eb6 <_vfiprintf_r+0x1ee>
 8004d3e:	2201      	movs	r2, #1
 8004d40:	2300      	movs	r3, #0
 8004d42:	4252      	negs	r2, r2
 8004d44:	6062      	str	r2, [r4, #4]
 8004d46:	a904      	add	r1, sp, #16
 8004d48:	3254      	adds	r2, #84	; 0x54
 8004d4a:	1852      	adds	r2, r2, r1
 8004d4c:	1c6e      	adds	r6, r5, #1
 8004d4e:	6023      	str	r3, [r4, #0]
 8004d50:	60e3      	str	r3, [r4, #12]
 8004d52:	60a3      	str	r3, [r4, #8]
 8004d54:	7013      	strb	r3, [r2, #0]
 8004d56:	65a3      	str	r3, [r4, #88]	; 0x58
 8004d58:	7831      	ldrb	r1, [r6, #0]
 8004d5a:	2205      	movs	r2, #5
 8004d5c:	485e      	ldr	r0, [pc, #376]	; (8004ed8 <_vfiprintf_r+0x210>)
 8004d5e:	f000 fb3d 	bl	80053dc <memchr>
 8004d62:	1c75      	adds	r5, r6, #1
 8004d64:	2800      	cmp	r0, #0
 8004d66:	d135      	bne.n	8004dd4 <_vfiprintf_r+0x10c>
 8004d68:	6822      	ldr	r2, [r4, #0]
 8004d6a:	06d3      	lsls	r3, r2, #27
 8004d6c:	d504      	bpl.n	8004d78 <_vfiprintf_r+0xb0>
 8004d6e:	2353      	movs	r3, #83	; 0x53
 8004d70:	a904      	add	r1, sp, #16
 8004d72:	185b      	adds	r3, r3, r1
 8004d74:	2120      	movs	r1, #32
 8004d76:	7019      	strb	r1, [r3, #0]
 8004d78:	0713      	lsls	r3, r2, #28
 8004d7a:	d504      	bpl.n	8004d86 <_vfiprintf_r+0xbe>
 8004d7c:	2353      	movs	r3, #83	; 0x53
 8004d7e:	a904      	add	r1, sp, #16
 8004d80:	185b      	adds	r3, r3, r1
 8004d82:	212b      	movs	r1, #43	; 0x2b
 8004d84:	7019      	strb	r1, [r3, #0]
 8004d86:	7833      	ldrb	r3, [r6, #0]
 8004d88:	2b2a      	cmp	r3, #42	; 0x2a
 8004d8a:	d02c      	beq.n	8004de6 <_vfiprintf_r+0x11e>
 8004d8c:	0035      	movs	r5, r6
 8004d8e:	2100      	movs	r1, #0
 8004d90:	200a      	movs	r0, #10
 8004d92:	68e3      	ldr	r3, [r4, #12]
 8004d94:	782a      	ldrb	r2, [r5, #0]
 8004d96:	1c6e      	adds	r6, r5, #1
 8004d98:	3a30      	subs	r2, #48	; 0x30
 8004d9a:	2a09      	cmp	r2, #9
 8004d9c:	d964      	bls.n	8004e68 <_vfiprintf_r+0x1a0>
 8004d9e:	2900      	cmp	r1, #0
 8004da0:	d02e      	beq.n	8004e00 <_vfiprintf_r+0x138>
 8004da2:	e026      	b.n	8004df2 <_vfiprintf_r+0x12a>
 8004da4:	4b4d      	ldr	r3, [pc, #308]	; (8004edc <_vfiprintf_r+0x214>)
 8004da6:	429f      	cmp	r7, r3
 8004da8:	d102      	bne.n	8004db0 <_vfiprintf_r+0xe8>
 8004daa:	9b03      	ldr	r3, [sp, #12]
 8004dac:	689f      	ldr	r7, [r3, #8]
 8004dae:	e79e      	b.n	8004cee <_vfiprintf_r+0x26>
 8004db0:	4b4b      	ldr	r3, [pc, #300]	; (8004ee0 <_vfiprintf_r+0x218>)
 8004db2:	429f      	cmp	r7, r3
 8004db4:	d19b      	bne.n	8004cee <_vfiprintf_r+0x26>
 8004db6:	9b03      	ldr	r3, [sp, #12]
 8004db8:	68df      	ldr	r7, [r3, #12]
 8004dba:	e798      	b.n	8004cee <_vfiprintf_r+0x26>
 8004dbc:	0039      	movs	r1, r7
 8004dbe:	9803      	ldr	r0, [sp, #12]
 8004dc0:	f7ff faba 	bl	8004338 <__swsetup_r>
 8004dc4:	2800      	cmp	r0, #0
 8004dc6:	d098      	beq.n	8004cfa <_vfiprintf_r+0x32>
 8004dc8:	2001      	movs	r0, #1
 8004dca:	4240      	negs	r0, r0
 8004dcc:	b021      	add	sp, #132	; 0x84
 8004dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dd0:	3501      	adds	r5, #1
 8004dd2:	e79b      	b.n	8004d0c <_vfiprintf_r+0x44>
 8004dd4:	4b40      	ldr	r3, [pc, #256]	; (8004ed8 <_vfiprintf_r+0x210>)
 8004dd6:	6822      	ldr	r2, [r4, #0]
 8004dd8:	1ac0      	subs	r0, r0, r3
 8004dda:	2301      	movs	r3, #1
 8004ddc:	4083      	lsls	r3, r0
 8004dde:	4313      	orrs	r3, r2
 8004de0:	6023      	str	r3, [r4, #0]
 8004de2:	002e      	movs	r6, r5
 8004de4:	e7b8      	b.n	8004d58 <_vfiprintf_r+0x90>
 8004de6:	9b07      	ldr	r3, [sp, #28]
 8004de8:	1d19      	adds	r1, r3, #4
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	9107      	str	r1, [sp, #28]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	db01      	blt.n	8004df6 <_vfiprintf_r+0x12e>
 8004df2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004df4:	e004      	b.n	8004e00 <_vfiprintf_r+0x138>
 8004df6:	425b      	negs	r3, r3
 8004df8:	60e3      	str	r3, [r4, #12]
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	6023      	str	r3, [r4, #0]
 8004e00:	782b      	ldrb	r3, [r5, #0]
 8004e02:	2b2e      	cmp	r3, #46	; 0x2e
 8004e04:	d10a      	bne.n	8004e1c <_vfiprintf_r+0x154>
 8004e06:	786b      	ldrb	r3, [r5, #1]
 8004e08:	2b2a      	cmp	r3, #42	; 0x2a
 8004e0a:	d135      	bne.n	8004e78 <_vfiprintf_r+0x1b0>
 8004e0c:	9b07      	ldr	r3, [sp, #28]
 8004e0e:	3502      	adds	r5, #2
 8004e10:	1d1a      	adds	r2, r3, #4
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	9207      	str	r2, [sp, #28]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	db2b      	blt.n	8004e72 <_vfiprintf_r+0x1aa>
 8004e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e1c:	4e31      	ldr	r6, [pc, #196]	; (8004ee4 <_vfiprintf_r+0x21c>)
 8004e1e:	7829      	ldrb	r1, [r5, #0]
 8004e20:	2203      	movs	r2, #3
 8004e22:	0030      	movs	r0, r6
 8004e24:	f000 fada 	bl	80053dc <memchr>
 8004e28:	2800      	cmp	r0, #0
 8004e2a:	d006      	beq.n	8004e3a <_vfiprintf_r+0x172>
 8004e2c:	2340      	movs	r3, #64	; 0x40
 8004e2e:	1b80      	subs	r0, r0, r6
 8004e30:	4083      	lsls	r3, r0
 8004e32:	6822      	ldr	r2, [r4, #0]
 8004e34:	3501      	adds	r5, #1
 8004e36:	4313      	orrs	r3, r2
 8004e38:	6023      	str	r3, [r4, #0]
 8004e3a:	7829      	ldrb	r1, [r5, #0]
 8004e3c:	2206      	movs	r2, #6
 8004e3e:	482a      	ldr	r0, [pc, #168]	; (8004ee8 <_vfiprintf_r+0x220>)
 8004e40:	1c6e      	adds	r6, r5, #1
 8004e42:	7621      	strb	r1, [r4, #24]
 8004e44:	f000 faca 	bl	80053dc <memchr>
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	d03a      	beq.n	8004ec2 <_vfiprintf_r+0x1fa>
 8004e4c:	4b27      	ldr	r3, [pc, #156]	; (8004eec <_vfiprintf_r+0x224>)
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d125      	bne.n	8004e9e <_vfiprintf_r+0x1d6>
 8004e52:	2207      	movs	r2, #7
 8004e54:	9b07      	ldr	r3, [sp, #28]
 8004e56:	3307      	adds	r3, #7
 8004e58:	4393      	bics	r3, r2
 8004e5a:	3308      	adds	r3, #8
 8004e5c:	9307      	str	r3, [sp, #28]
 8004e5e:	6963      	ldr	r3, [r4, #20]
 8004e60:	9a04      	ldr	r2, [sp, #16]
 8004e62:	189b      	adds	r3, r3, r2
 8004e64:	6163      	str	r3, [r4, #20]
 8004e66:	e750      	b.n	8004d0a <_vfiprintf_r+0x42>
 8004e68:	4343      	muls	r3, r0
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	189b      	adds	r3, r3, r2
 8004e6e:	0035      	movs	r5, r6
 8004e70:	e790      	b.n	8004d94 <_vfiprintf_r+0xcc>
 8004e72:	2301      	movs	r3, #1
 8004e74:	425b      	negs	r3, r3
 8004e76:	e7d0      	b.n	8004e1a <_vfiprintf_r+0x152>
 8004e78:	2300      	movs	r3, #0
 8004e7a:	200a      	movs	r0, #10
 8004e7c:	001a      	movs	r2, r3
 8004e7e:	3501      	adds	r5, #1
 8004e80:	6063      	str	r3, [r4, #4]
 8004e82:	7829      	ldrb	r1, [r5, #0]
 8004e84:	1c6e      	adds	r6, r5, #1
 8004e86:	3930      	subs	r1, #48	; 0x30
 8004e88:	2909      	cmp	r1, #9
 8004e8a:	d903      	bls.n	8004e94 <_vfiprintf_r+0x1cc>
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0c5      	beq.n	8004e1c <_vfiprintf_r+0x154>
 8004e90:	9209      	str	r2, [sp, #36]	; 0x24
 8004e92:	e7c3      	b.n	8004e1c <_vfiprintf_r+0x154>
 8004e94:	4342      	muls	r2, r0
 8004e96:	2301      	movs	r3, #1
 8004e98:	1852      	adds	r2, r2, r1
 8004e9a:	0035      	movs	r5, r6
 8004e9c:	e7f1      	b.n	8004e82 <_vfiprintf_r+0x1ba>
 8004e9e:	ab07      	add	r3, sp, #28
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	003a      	movs	r2, r7
 8004ea4:	4b12      	ldr	r3, [pc, #72]	; (8004ef0 <_vfiprintf_r+0x228>)
 8004ea6:	0021      	movs	r1, r4
 8004ea8:	9803      	ldr	r0, [sp, #12]
 8004eaa:	e000      	b.n	8004eae <_vfiprintf_r+0x1e6>
 8004eac:	bf00      	nop
 8004eae:	9004      	str	r0, [sp, #16]
 8004eb0:	9b04      	ldr	r3, [sp, #16]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	d1d3      	bne.n	8004e5e <_vfiprintf_r+0x196>
 8004eb6:	89bb      	ldrh	r3, [r7, #12]
 8004eb8:	065b      	lsls	r3, r3, #25
 8004eba:	d500      	bpl.n	8004ebe <_vfiprintf_r+0x1f6>
 8004ebc:	e784      	b.n	8004dc8 <_vfiprintf_r+0x100>
 8004ebe:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004ec0:	e784      	b.n	8004dcc <_vfiprintf_r+0x104>
 8004ec2:	ab07      	add	r3, sp, #28
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	003a      	movs	r2, r7
 8004ec8:	4b09      	ldr	r3, [pc, #36]	; (8004ef0 <_vfiprintf_r+0x228>)
 8004eca:	0021      	movs	r1, r4
 8004ecc:	9803      	ldr	r0, [sp, #12]
 8004ece:	f000 f87f 	bl	8004fd0 <_printf_i>
 8004ed2:	e7ec      	b.n	8004eae <_vfiprintf_r+0x1e6>
 8004ed4:	080059d4 	.word	0x080059d4
 8004ed8:	08005a1e 	.word	0x08005a1e
 8004edc:	080059f4 	.word	0x080059f4
 8004ee0:	080059b4 	.word	0x080059b4
 8004ee4:	08005a24 	.word	0x08005a24
 8004ee8:	08005a28 	.word	0x08005a28
 8004eec:	00000000 	.word	0x00000000
 8004ef0:	08004ca3 	.word	0x08004ca3

08004ef4 <_printf_common>:
 8004ef4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ef6:	0015      	movs	r5, r2
 8004ef8:	9301      	str	r3, [sp, #4]
 8004efa:	688a      	ldr	r2, [r1, #8]
 8004efc:	690b      	ldr	r3, [r1, #16]
 8004efe:	9000      	str	r0, [sp, #0]
 8004f00:	000c      	movs	r4, r1
 8004f02:	4293      	cmp	r3, r2
 8004f04:	da00      	bge.n	8004f08 <_printf_common+0x14>
 8004f06:	0013      	movs	r3, r2
 8004f08:	0022      	movs	r2, r4
 8004f0a:	602b      	str	r3, [r5, #0]
 8004f0c:	3243      	adds	r2, #67	; 0x43
 8004f0e:	7812      	ldrb	r2, [r2, #0]
 8004f10:	2a00      	cmp	r2, #0
 8004f12:	d001      	beq.n	8004f18 <_printf_common+0x24>
 8004f14:	3301      	adds	r3, #1
 8004f16:	602b      	str	r3, [r5, #0]
 8004f18:	6823      	ldr	r3, [r4, #0]
 8004f1a:	069b      	lsls	r3, r3, #26
 8004f1c:	d502      	bpl.n	8004f24 <_printf_common+0x30>
 8004f1e:	682b      	ldr	r3, [r5, #0]
 8004f20:	3302      	adds	r3, #2
 8004f22:	602b      	str	r3, [r5, #0]
 8004f24:	2706      	movs	r7, #6
 8004f26:	6823      	ldr	r3, [r4, #0]
 8004f28:	401f      	ands	r7, r3
 8004f2a:	d027      	beq.n	8004f7c <_printf_common+0x88>
 8004f2c:	0023      	movs	r3, r4
 8004f2e:	3343      	adds	r3, #67	; 0x43
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	1e5a      	subs	r2, r3, #1
 8004f34:	4193      	sbcs	r3, r2
 8004f36:	6822      	ldr	r2, [r4, #0]
 8004f38:	0692      	lsls	r2, r2, #26
 8004f3a:	d430      	bmi.n	8004f9e <_printf_common+0xaa>
 8004f3c:	0022      	movs	r2, r4
 8004f3e:	9901      	ldr	r1, [sp, #4]
 8004f40:	3243      	adds	r2, #67	; 0x43
 8004f42:	9800      	ldr	r0, [sp, #0]
 8004f44:	9e08      	ldr	r6, [sp, #32]
 8004f46:	47b0      	blx	r6
 8004f48:	1c43      	adds	r3, r0, #1
 8004f4a:	d025      	beq.n	8004f98 <_printf_common+0xa4>
 8004f4c:	2306      	movs	r3, #6
 8004f4e:	6820      	ldr	r0, [r4, #0]
 8004f50:	682a      	ldr	r2, [r5, #0]
 8004f52:	68e1      	ldr	r1, [r4, #12]
 8004f54:	4003      	ands	r3, r0
 8004f56:	2500      	movs	r5, #0
 8004f58:	2b04      	cmp	r3, #4
 8004f5a:	d103      	bne.n	8004f64 <_printf_common+0x70>
 8004f5c:	1a8d      	subs	r5, r1, r2
 8004f5e:	43eb      	mvns	r3, r5
 8004f60:	17db      	asrs	r3, r3, #31
 8004f62:	401d      	ands	r5, r3
 8004f64:	68a3      	ldr	r3, [r4, #8]
 8004f66:	6922      	ldr	r2, [r4, #16]
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	dd01      	ble.n	8004f70 <_printf_common+0x7c>
 8004f6c:	1a9b      	subs	r3, r3, r2
 8004f6e:	18ed      	adds	r5, r5, r3
 8004f70:	2700      	movs	r7, #0
 8004f72:	42bd      	cmp	r5, r7
 8004f74:	d120      	bne.n	8004fb8 <_printf_common+0xc4>
 8004f76:	2000      	movs	r0, #0
 8004f78:	e010      	b.n	8004f9c <_printf_common+0xa8>
 8004f7a:	3701      	adds	r7, #1
 8004f7c:	68e3      	ldr	r3, [r4, #12]
 8004f7e:	682a      	ldr	r2, [r5, #0]
 8004f80:	1a9b      	subs	r3, r3, r2
 8004f82:	42bb      	cmp	r3, r7
 8004f84:	ddd2      	ble.n	8004f2c <_printf_common+0x38>
 8004f86:	0022      	movs	r2, r4
 8004f88:	2301      	movs	r3, #1
 8004f8a:	3219      	adds	r2, #25
 8004f8c:	9901      	ldr	r1, [sp, #4]
 8004f8e:	9800      	ldr	r0, [sp, #0]
 8004f90:	9e08      	ldr	r6, [sp, #32]
 8004f92:	47b0      	blx	r6
 8004f94:	1c43      	adds	r3, r0, #1
 8004f96:	d1f0      	bne.n	8004f7a <_printf_common+0x86>
 8004f98:	2001      	movs	r0, #1
 8004f9a:	4240      	negs	r0, r0
 8004f9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f9e:	2030      	movs	r0, #48	; 0x30
 8004fa0:	18e1      	adds	r1, r4, r3
 8004fa2:	3143      	adds	r1, #67	; 0x43
 8004fa4:	7008      	strb	r0, [r1, #0]
 8004fa6:	0021      	movs	r1, r4
 8004fa8:	1c5a      	adds	r2, r3, #1
 8004faa:	3145      	adds	r1, #69	; 0x45
 8004fac:	7809      	ldrb	r1, [r1, #0]
 8004fae:	18a2      	adds	r2, r4, r2
 8004fb0:	3243      	adds	r2, #67	; 0x43
 8004fb2:	3302      	adds	r3, #2
 8004fb4:	7011      	strb	r1, [r2, #0]
 8004fb6:	e7c1      	b.n	8004f3c <_printf_common+0x48>
 8004fb8:	0022      	movs	r2, r4
 8004fba:	2301      	movs	r3, #1
 8004fbc:	321a      	adds	r2, #26
 8004fbe:	9901      	ldr	r1, [sp, #4]
 8004fc0:	9800      	ldr	r0, [sp, #0]
 8004fc2:	9e08      	ldr	r6, [sp, #32]
 8004fc4:	47b0      	blx	r6
 8004fc6:	1c43      	adds	r3, r0, #1
 8004fc8:	d0e6      	beq.n	8004f98 <_printf_common+0xa4>
 8004fca:	3701      	adds	r7, #1
 8004fcc:	e7d1      	b.n	8004f72 <_printf_common+0x7e>
	...

08004fd0 <_printf_i>:
 8004fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fd2:	b089      	sub	sp, #36	; 0x24
 8004fd4:	9204      	str	r2, [sp, #16]
 8004fd6:	000a      	movs	r2, r1
 8004fd8:	3243      	adds	r2, #67	; 0x43
 8004fda:	9305      	str	r3, [sp, #20]
 8004fdc:	9003      	str	r0, [sp, #12]
 8004fde:	9202      	str	r2, [sp, #8]
 8004fe0:	7e0a      	ldrb	r2, [r1, #24]
 8004fe2:	000c      	movs	r4, r1
 8004fe4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fe6:	2a6e      	cmp	r2, #110	; 0x6e
 8004fe8:	d100      	bne.n	8004fec <_printf_i+0x1c>
 8004fea:	e086      	b.n	80050fa <_printf_i+0x12a>
 8004fec:	d81f      	bhi.n	800502e <_printf_i+0x5e>
 8004fee:	2a63      	cmp	r2, #99	; 0x63
 8004ff0:	d033      	beq.n	800505a <_printf_i+0x8a>
 8004ff2:	d808      	bhi.n	8005006 <_printf_i+0x36>
 8004ff4:	2a00      	cmp	r2, #0
 8004ff6:	d100      	bne.n	8004ffa <_printf_i+0x2a>
 8004ff8:	e08c      	b.n	8005114 <_printf_i+0x144>
 8004ffa:	2a58      	cmp	r2, #88	; 0x58
 8004ffc:	d04d      	beq.n	800509a <_printf_i+0xca>
 8004ffe:	0025      	movs	r5, r4
 8005000:	3542      	adds	r5, #66	; 0x42
 8005002:	702a      	strb	r2, [r5, #0]
 8005004:	e030      	b.n	8005068 <_printf_i+0x98>
 8005006:	2a64      	cmp	r2, #100	; 0x64
 8005008:	d001      	beq.n	800500e <_printf_i+0x3e>
 800500a:	2a69      	cmp	r2, #105	; 0x69
 800500c:	d1f7      	bne.n	8004ffe <_printf_i+0x2e>
 800500e:	6819      	ldr	r1, [r3, #0]
 8005010:	6825      	ldr	r5, [r4, #0]
 8005012:	1d0a      	adds	r2, r1, #4
 8005014:	0628      	lsls	r0, r5, #24
 8005016:	d529      	bpl.n	800506c <_printf_i+0x9c>
 8005018:	6808      	ldr	r0, [r1, #0]
 800501a:	601a      	str	r2, [r3, #0]
 800501c:	2800      	cmp	r0, #0
 800501e:	da03      	bge.n	8005028 <_printf_i+0x58>
 8005020:	232d      	movs	r3, #45	; 0x2d
 8005022:	9a02      	ldr	r2, [sp, #8]
 8005024:	4240      	negs	r0, r0
 8005026:	7013      	strb	r3, [r2, #0]
 8005028:	4e6b      	ldr	r6, [pc, #428]	; (80051d8 <_printf_i+0x208>)
 800502a:	270a      	movs	r7, #10
 800502c:	e04f      	b.n	80050ce <_printf_i+0xfe>
 800502e:	2a73      	cmp	r2, #115	; 0x73
 8005030:	d074      	beq.n	800511c <_printf_i+0x14c>
 8005032:	d808      	bhi.n	8005046 <_printf_i+0x76>
 8005034:	2a6f      	cmp	r2, #111	; 0x6f
 8005036:	d01f      	beq.n	8005078 <_printf_i+0xa8>
 8005038:	2a70      	cmp	r2, #112	; 0x70
 800503a:	d1e0      	bne.n	8004ffe <_printf_i+0x2e>
 800503c:	2220      	movs	r2, #32
 800503e:	6809      	ldr	r1, [r1, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	6022      	str	r2, [r4, #0]
 8005044:	e003      	b.n	800504e <_printf_i+0x7e>
 8005046:	2a75      	cmp	r2, #117	; 0x75
 8005048:	d016      	beq.n	8005078 <_printf_i+0xa8>
 800504a:	2a78      	cmp	r2, #120	; 0x78
 800504c:	d1d7      	bne.n	8004ffe <_printf_i+0x2e>
 800504e:	0022      	movs	r2, r4
 8005050:	2178      	movs	r1, #120	; 0x78
 8005052:	3245      	adds	r2, #69	; 0x45
 8005054:	7011      	strb	r1, [r2, #0]
 8005056:	4e61      	ldr	r6, [pc, #388]	; (80051dc <_printf_i+0x20c>)
 8005058:	e022      	b.n	80050a0 <_printf_i+0xd0>
 800505a:	0025      	movs	r5, r4
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	3542      	adds	r5, #66	; 0x42
 8005060:	1d11      	adds	r1, r2, #4
 8005062:	6019      	str	r1, [r3, #0]
 8005064:	6813      	ldr	r3, [r2, #0]
 8005066:	702b      	strb	r3, [r5, #0]
 8005068:	2301      	movs	r3, #1
 800506a:	e065      	b.n	8005138 <_printf_i+0x168>
 800506c:	6808      	ldr	r0, [r1, #0]
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	0669      	lsls	r1, r5, #25
 8005072:	d5d3      	bpl.n	800501c <_printf_i+0x4c>
 8005074:	b200      	sxth	r0, r0
 8005076:	e7d1      	b.n	800501c <_printf_i+0x4c>
 8005078:	6819      	ldr	r1, [r3, #0]
 800507a:	6825      	ldr	r5, [r4, #0]
 800507c:	1d08      	adds	r0, r1, #4
 800507e:	6018      	str	r0, [r3, #0]
 8005080:	6808      	ldr	r0, [r1, #0]
 8005082:	062e      	lsls	r6, r5, #24
 8005084:	d505      	bpl.n	8005092 <_printf_i+0xc2>
 8005086:	4e54      	ldr	r6, [pc, #336]	; (80051d8 <_printf_i+0x208>)
 8005088:	2708      	movs	r7, #8
 800508a:	2a6f      	cmp	r2, #111	; 0x6f
 800508c:	d01b      	beq.n	80050c6 <_printf_i+0xf6>
 800508e:	270a      	movs	r7, #10
 8005090:	e019      	b.n	80050c6 <_printf_i+0xf6>
 8005092:	066d      	lsls	r5, r5, #25
 8005094:	d5f7      	bpl.n	8005086 <_printf_i+0xb6>
 8005096:	b280      	uxth	r0, r0
 8005098:	e7f5      	b.n	8005086 <_printf_i+0xb6>
 800509a:	3145      	adds	r1, #69	; 0x45
 800509c:	4e4e      	ldr	r6, [pc, #312]	; (80051d8 <_printf_i+0x208>)
 800509e:	700a      	strb	r2, [r1, #0]
 80050a0:	6818      	ldr	r0, [r3, #0]
 80050a2:	6822      	ldr	r2, [r4, #0]
 80050a4:	1d01      	adds	r1, r0, #4
 80050a6:	6800      	ldr	r0, [r0, #0]
 80050a8:	6019      	str	r1, [r3, #0]
 80050aa:	0615      	lsls	r5, r2, #24
 80050ac:	d521      	bpl.n	80050f2 <_printf_i+0x122>
 80050ae:	07d3      	lsls	r3, r2, #31
 80050b0:	d502      	bpl.n	80050b8 <_printf_i+0xe8>
 80050b2:	2320      	movs	r3, #32
 80050b4:	431a      	orrs	r2, r3
 80050b6:	6022      	str	r2, [r4, #0]
 80050b8:	2710      	movs	r7, #16
 80050ba:	2800      	cmp	r0, #0
 80050bc:	d103      	bne.n	80050c6 <_printf_i+0xf6>
 80050be:	2320      	movs	r3, #32
 80050c0:	6822      	ldr	r2, [r4, #0]
 80050c2:	439a      	bics	r2, r3
 80050c4:	6022      	str	r2, [r4, #0]
 80050c6:	0023      	movs	r3, r4
 80050c8:	2200      	movs	r2, #0
 80050ca:	3343      	adds	r3, #67	; 0x43
 80050cc:	701a      	strb	r2, [r3, #0]
 80050ce:	6863      	ldr	r3, [r4, #4]
 80050d0:	60a3      	str	r3, [r4, #8]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	db58      	blt.n	8005188 <_printf_i+0x1b8>
 80050d6:	2204      	movs	r2, #4
 80050d8:	6821      	ldr	r1, [r4, #0]
 80050da:	4391      	bics	r1, r2
 80050dc:	6021      	str	r1, [r4, #0]
 80050de:	2800      	cmp	r0, #0
 80050e0:	d154      	bne.n	800518c <_printf_i+0x1bc>
 80050e2:	9d02      	ldr	r5, [sp, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d05a      	beq.n	800519e <_printf_i+0x1ce>
 80050e8:	0025      	movs	r5, r4
 80050ea:	7833      	ldrb	r3, [r6, #0]
 80050ec:	3542      	adds	r5, #66	; 0x42
 80050ee:	702b      	strb	r3, [r5, #0]
 80050f0:	e055      	b.n	800519e <_printf_i+0x1ce>
 80050f2:	0655      	lsls	r5, r2, #25
 80050f4:	d5db      	bpl.n	80050ae <_printf_i+0xde>
 80050f6:	b280      	uxth	r0, r0
 80050f8:	e7d9      	b.n	80050ae <_printf_i+0xde>
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	680d      	ldr	r5, [r1, #0]
 80050fe:	1d10      	adds	r0, r2, #4
 8005100:	6949      	ldr	r1, [r1, #20]
 8005102:	6018      	str	r0, [r3, #0]
 8005104:	6813      	ldr	r3, [r2, #0]
 8005106:	062e      	lsls	r6, r5, #24
 8005108:	d501      	bpl.n	800510e <_printf_i+0x13e>
 800510a:	6019      	str	r1, [r3, #0]
 800510c:	e002      	b.n	8005114 <_printf_i+0x144>
 800510e:	066d      	lsls	r5, r5, #25
 8005110:	d5fb      	bpl.n	800510a <_printf_i+0x13a>
 8005112:	8019      	strh	r1, [r3, #0]
 8005114:	2300      	movs	r3, #0
 8005116:	9d02      	ldr	r5, [sp, #8]
 8005118:	6123      	str	r3, [r4, #16]
 800511a:	e04f      	b.n	80051bc <_printf_i+0x1ec>
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	1d11      	adds	r1, r2, #4
 8005120:	6019      	str	r1, [r3, #0]
 8005122:	6815      	ldr	r5, [r2, #0]
 8005124:	2100      	movs	r1, #0
 8005126:	6862      	ldr	r2, [r4, #4]
 8005128:	0028      	movs	r0, r5
 800512a:	f000 f957 	bl	80053dc <memchr>
 800512e:	2800      	cmp	r0, #0
 8005130:	d001      	beq.n	8005136 <_printf_i+0x166>
 8005132:	1b40      	subs	r0, r0, r5
 8005134:	6060      	str	r0, [r4, #4]
 8005136:	6863      	ldr	r3, [r4, #4]
 8005138:	6123      	str	r3, [r4, #16]
 800513a:	2300      	movs	r3, #0
 800513c:	9a02      	ldr	r2, [sp, #8]
 800513e:	7013      	strb	r3, [r2, #0]
 8005140:	e03c      	b.n	80051bc <_printf_i+0x1ec>
 8005142:	6923      	ldr	r3, [r4, #16]
 8005144:	002a      	movs	r2, r5
 8005146:	9904      	ldr	r1, [sp, #16]
 8005148:	9803      	ldr	r0, [sp, #12]
 800514a:	9d05      	ldr	r5, [sp, #20]
 800514c:	47a8      	blx	r5
 800514e:	1c43      	adds	r3, r0, #1
 8005150:	d03e      	beq.n	80051d0 <_printf_i+0x200>
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	079b      	lsls	r3, r3, #30
 8005156:	d415      	bmi.n	8005184 <_printf_i+0x1b4>
 8005158:	9b07      	ldr	r3, [sp, #28]
 800515a:	68e0      	ldr	r0, [r4, #12]
 800515c:	4298      	cmp	r0, r3
 800515e:	da39      	bge.n	80051d4 <_printf_i+0x204>
 8005160:	0018      	movs	r0, r3
 8005162:	e037      	b.n	80051d4 <_printf_i+0x204>
 8005164:	0022      	movs	r2, r4
 8005166:	2301      	movs	r3, #1
 8005168:	3219      	adds	r2, #25
 800516a:	9904      	ldr	r1, [sp, #16]
 800516c:	9803      	ldr	r0, [sp, #12]
 800516e:	9e05      	ldr	r6, [sp, #20]
 8005170:	47b0      	blx	r6
 8005172:	1c43      	adds	r3, r0, #1
 8005174:	d02c      	beq.n	80051d0 <_printf_i+0x200>
 8005176:	3501      	adds	r5, #1
 8005178:	68e3      	ldr	r3, [r4, #12]
 800517a:	9a07      	ldr	r2, [sp, #28]
 800517c:	1a9b      	subs	r3, r3, r2
 800517e:	42ab      	cmp	r3, r5
 8005180:	dcf0      	bgt.n	8005164 <_printf_i+0x194>
 8005182:	e7e9      	b.n	8005158 <_printf_i+0x188>
 8005184:	2500      	movs	r5, #0
 8005186:	e7f7      	b.n	8005178 <_printf_i+0x1a8>
 8005188:	2800      	cmp	r0, #0
 800518a:	d0ad      	beq.n	80050e8 <_printf_i+0x118>
 800518c:	9d02      	ldr	r5, [sp, #8]
 800518e:	0039      	movs	r1, r7
 8005190:	f7fb f848 	bl	8000224 <__aeabi_uidivmod>
 8005194:	5c73      	ldrb	r3, [r6, r1]
 8005196:	3d01      	subs	r5, #1
 8005198:	702b      	strb	r3, [r5, #0]
 800519a:	2800      	cmp	r0, #0
 800519c:	d1f7      	bne.n	800518e <_printf_i+0x1be>
 800519e:	2f08      	cmp	r7, #8
 80051a0:	d109      	bne.n	80051b6 <_printf_i+0x1e6>
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	07db      	lsls	r3, r3, #31
 80051a6:	d506      	bpl.n	80051b6 <_printf_i+0x1e6>
 80051a8:	6863      	ldr	r3, [r4, #4]
 80051aa:	6922      	ldr	r2, [r4, #16]
 80051ac:	4293      	cmp	r3, r2
 80051ae:	dc02      	bgt.n	80051b6 <_printf_i+0x1e6>
 80051b0:	2330      	movs	r3, #48	; 0x30
 80051b2:	3d01      	subs	r5, #1
 80051b4:	702b      	strb	r3, [r5, #0]
 80051b6:	9b02      	ldr	r3, [sp, #8]
 80051b8:	1b5b      	subs	r3, r3, r5
 80051ba:	6123      	str	r3, [r4, #16]
 80051bc:	9b05      	ldr	r3, [sp, #20]
 80051be:	aa07      	add	r2, sp, #28
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	0021      	movs	r1, r4
 80051c4:	9b04      	ldr	r3, [sp, #16]
 80051c6:	9803      	ldr	r0, [sp, #12]
 80051c8:	f7ff fe94 	bl	8004ef4 <_printf_common>
 80051cc:	1c43      	adds	r3, r0, #1
 80051ce:	d1b8      	bne.n	8005142 <_printf_i+0x172>
 80051d0:	2001      	movs	r0, #1
 80051d2:	4240      	negs	r0, r0
 80051d4:	b009      	add	sp, #36	; 0x24
 80051d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051d8:	08005a2f 	.word	0x08005a2f
 80051dc:	08005a40 	.word	0x08005a40

080051e0 <_putc_r>:
 80051e0:	b570      	push	{r4, r5, r6, lr}
 80051e2:	0006      	movs	r6, r0
 80051e4:	000d      	movs	r5, r1
 80051e6:	0014      	movs	r4, r2
 80051e8:	2800      	cmp	r0, #0
 80051ea:	d004      	beq.n	80051f6 <_putc_r+0x16>
 80051ec:	6983      	ldr	r3, [r0, #24]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <_putc_r+0x16>
 80051f2:	f7ff fa0f 	bl	8004614 <__sinit>
 80051f6:	4b12      	ldr	r3, [pc, #72]	; (8005240 <_putc_r+0x60>)
 80051f8:	429c      	cmp	r4, r3
 80051fa:	d111      	bne.n	8005220 <_putc_r+0x40>
 80051fc:	6874      	ldr	r4, [r6, #4]
 80051fe:	68a3      	ldr	r3, [r4, #8]
 8005200:	3b01      	subs	r3, #1
 8005202:	60a3      	str	r3, [r4, #8]
 8005204:	2b00      	cmp	r3, #0
 8005206:	da05      	bge.n	8005214 <_putc_r+0x34>
 8005208:	69a2      	ldr	r2, [r4, #24]
 800520a:	4293      	cmp	r3, r2
 800520c:	db12      	blt.n	8005234 <_putc_r+0x54>
 800520e:	b2eb      	uxtb	r3, r5
 8005210:	2b0a      	cmp	r3, #10
 8005212:	d00f      	beq.n	8005234 <_putc_r+0x54>
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	b2e8      	uxtb	r0, r5
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	6022      	str	r2, [r4, #0]
 800521c:	701d      	strb	r5, [r3, #0]
 800521e:	bd70      	pop	{r4, r5, r6, pc}
 8005220:	4b08      	ldr	r3, [pc, #32]	; (8005244 <_putc_r+0x64>)
 8005222:	429c      	cmp	r4, r3
 8005224:	d101      	bne.n	800522a <_putc_r+0x4a>
 8005226:	68b4      	ldr	r4, [r6, #8]
 8005228:	e7e9      	b.n	80051fe <_putc_r+0x1e>
 800522a:	4b07      	ldr	r3, [pc, #28]	; (8005248 <_putc_r+0x68>)
 800522c:	429c      	cmp	r4, r3
 800522e:	d1e6      	bne.n	80051fe <_putc_r+0x1e>
 8005230:	68f4      	ldr	r4, [r6, #12]
 8005232:	e7e4      	b.n	80051fe <_putc_r+0x1e>
 8005234:	0022      	movs	r2, r4
 8005236:	0029      	movs	r1, r5
 8005238:	0030      	movs	r0, r6
 800523a:	f7ff f827 	bl	800428c <__swbuf_r>
 800523e:	e7ee      	b.n	800521e <_putc_r+0x3e>
 8005240:	080059d4 	.word	0x080059d4
 8005244:	080059f4 	.word	0x080059f4
 8005248:	080059b4 	.word	0x080059b4

0800524c <_sbrk_r>:
 800524c:	2300      	movs	r3, #0
 800524e:	b570      	push	{r4, r5, r6, lr}
 8005250:	4c06      	ldr	r4, [pc, #24]	; (800526c <_sbrk_r+0x20>)
 8005252:	0005      	movs	r5, r0
 8005254:	0008      	movs	r0, r1
 8005256:	6023      	str	r3, [r4, #0]
 8005258:	f7fc fd4e 	bl	8001cf8 <_sbrk>
 800525c:	1c43      	adds	r3, r0, #1
 800525e:	d103      	bne.n	8005268 <_sbrk_r+0x1c>
 8005260:	6823      	ldr	r3, [r4, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d000      	beq.n	8005268 <_sbrk_r+0x1c>
 8005266:	602b      	str	r3, [r5, #0]
 8005268:	bd70      	pop	{r4, r5, r6, pc}
 800526a:	46c0      	nop			; (mov r8, r8)
 800526c:	20000460 	.word	0x20000460

08005270 <__sread>:
 8005270:	b570      	push	{r4, r5, r6, lr}
 8005272:	000c      	movs	r4, r1
 8005274:	250e      	movs	r5, #14
 8005276:	5f49      	ldrsh	r1, [r1, r5]
 8005278:	f000 f900 	bl	800547c <_read_r>
 800527c:	2800      	cmp	r0, #0
 800527e:	db03      	blt.n	8005288 <__sread+0x18>
 8005280:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005282:	181b      	adds	r3, r3, r0
 8005284:	6563      	str	r3, [r4, #84]	; 0x54
 8005286:	bd70      	pop	{r4, r5, r6, pc}
 8005288:	89a3      	ldrh	r3, [r4, #12]
 800528a:	4a02      	ldr	r2, [pc, #8]	; (8005294 <__sread+0x24>)
 800528c:	4013      	ands	r3, r2
 800528e:	81a3      	strh	r3, [r4, #12]
 8005290:	e7f9      	b.n	8005286 <__sread+0x16>
 8005292:	46c0      	nop			; (mov r8, r8)
 8005294:	ffffefff 	.word	0xffffefff

08005298 <__swrite>:
 8005298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529a:	001f      	movs	r7, r3
 800529c:	898b      	ldrh	r3, [r1, #12]
 800529e:	0005      	movs	r5, r0
 80052a0:	000c      	movs	r4, r1
 80052a2:	0016      	movs	r6, r2
 80052a4:	05db      	lsls	r3, r3, #23
 80052a6:	d505      	bpl.n	80052b4 <__swrite+0x1c>
 80052a8:	230e      	movs	r3, #14
 80052aa:	5ec9      	ldrsh	r1, [r1, r3]
 80052ac:	2200      	movs	r2, #0
 80052ae:	2302      	movs	r3, #2
 80052b0:	f000 f880 	bl	80053b4 <_lseek_r>
 80052b4:	89a3      	ldrh	r3, [r4, #12]
 80052b6:	4a05      	ldr	r2, [pc, #20]	; (80052cc <__swrite+0x34>)
 80052b8:	0028      	movs	r0, r5
 80052ba:	4013      	ands	r3, r2
 80052bc:	81a3      	strh	r3, [r4, #12]
 80052be:	0032      	movs	r2, r6
 80052c0:	230e      	movs	r3, #14
 80052c2:	5ee1      	ldrsh	r1, [r4, r3]
 80052c4:	003b      	movs	r3, r7
 80052c6:	f000 f82b 	bl	8005320 <_write_r>
 80052ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052cc:	ffffefff 	.word	0xffffefff

080052d0 <__sseek>:
 80052d0:	b570      	push	{r4, r5, r6, lr}
 80052d2:	000c      	movs	r4, r1
 80052d4:	250e      	movs	r5, #14
 80052d6:	5f49      	ldrsh	r1, [r1, r5]
 80052d8:	f000 f86c 	bl	80053b4 <_lseek_r>
 80052dc:	89a3      	ldrh	r3, [r4, #12]
 80052de:	1c42      	adds	r2, r0, #1
 80052e0:	d103      	bne.n	80052ea <__sseek+0x1a>
 80052e2:	4a05      	ldr	r2, [pc, #20]	; (80052f8 <__sseek+0x28>)
 80052e4:	4013      	ands	r3, r2
 80052e6:	81a3      	strh	r3, [r4, #12]
 80052e8:	bd70      	pop	{r4, r5, r6, pc}
 80052ea:	2280      	movs	r2, #128	; 0x80
 80052ec:	0152      	lsls	r2, r2, #5
 80052ee:	4313      	orrs	r3, r2
 80052f0:	81a3      	strh	r3, [r4, #12]
 80052f2:	6560      	str	r0, [r4, #84]	; 0x54
 80052f4:	e7f8      	b.n	80052e8 <__sseek+0x18>
 80052f6:	46c0      	nop			; (mov r8, r8)
 80052f8:	ffffefff 	.word	0xffffefff

080052fc <__sclose>:
 80052fc:	b510      	push	{r4, lr}
 80052fe:	230e      	movs	r3, #14
 8005300:	5ec9      	ldrsh	r1, [r1, r3]
 8005302:	f000 f821 	bl	8005348 <_close_r>
 8005306:	bd10      	pop	{r4, pc}

08005308 <__ascii_wctomb>:
 8005308:	1e0b      	subs	r3, r1, #0
 800530a:	d004      	beq.n	8005316 <__ascii_wctomb+0xe>
 800530c:	2aff      	cmp	r2, #255	; 0xff
 800530e:	d904      	bls.n	800531a <__ascii_wctomb+0x12>
 8005310:	238a      	movs	r3, #138	; 0x8a
 8005312:	6003      	str	r3, [r0, #0]
 8005314:	3b8b      	subs	r3, #139	; 0x8b
 8005316:	0018      	movs	r0, r3
 8005318:	4770      	bx	lr
 800531a:	700a      	strb	r2, [r1, #0]
 800531c:	2301      	movs	r3, #1
 800531e:	e7fa      	b.n	8005316 <__ascii_wctomb+0xe>

08005320 <_write_r>:
 8005320:	b570      	push	{r4, r5, r6, lr}
 8005322:	0005      	movs	r5, r0
 8005324:	0008      	movs	r0, r1
 8005326:	0011      	movs	r1, r2
 8005328:	2200      	movs	r2, #0
 800532a:	4c06      	ldr	r4, [pc, #24]	; (8005344 <_write_r+0x24>)
 800532c:	6022      	str	r2, [r4, #0]
 800532e:	001a      	movs	r2, r3
 8005330:	f7fa ff7e 	bl	8000230 <_write>
 8005334:	1c43      	adds	r3, r0, #1
 8005336:	d103      	bne.n	8005340 <_write_r+0x20>
 8005338:	6823      	ldr	r3, [r4, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d000      	beq.n	8005340 <_write_r+0x20>
 800533e:	602b      	str	r3, [r5, #0]
 8005340:	bd70      	pop	{r4, r5, r6, pc}
 8005342:	46c0      	nop			; (mov r8, r8)
 8005344:	20000460 	.word	0x20000460

08005348 <_close_r>:
 8005348:	2300      	movs	r3, #0
 800534a:	b570      	push	{r4, r5, r6, lr}
 800534c:	4c06      	ldr	r4, [pc, #24]	; (8005368 <_close_r+0x20>)
 800534e:	0005      	movs	r5, r0
 8005350:	0008      	movs	r0, r1
 8005352:	6023      	str	r3, [r4, #0]
 8005354:	f7fc fca3 	bl	8001c9e <_close>
 8005358:	1c43      	adds	r3, r0, #1
 800535a:	d103      	bne.n	8005364 <_close_r+0x1c>
 800535c:	6823      	ldr	r3, [r4, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d000      	beq.n	8005364 <_close_r+0x1c>
 8005362:	602b      	str	r3, [r5, #0]
 8005364:	bd70      	pop	{r4, r5, r6, pc}
 8005366:	46c0      	nop			; (mov r8, r8)
 8005368:	20000460 	.word	0x20000460

0800536c <_fstat_r>:
 800536c:	2300      	movs	r3, #0
 800536e:	b570      	push	{r4, r5, r6, lr}
 8005370:	4c06      	ldr	r4, [pc, #24]	; (800538c <_fstat_r+0x20>)
 8005372:	0005      	movs	r5, r0
 8005374:	0008      	movs	r0, r1
 8005376:	0011      	movs	r1, r2
 8005378:	6023      	str	r3, [r4, #0]
 800537a:	f7fc fc9a 	bl	8001cb2 <_fstat>
 800537e:	1c43      	adds	r3, r0, #1
 8005380:	d103      	bne.n	800538a <_fstat_r+0x1e>
 8005382:	6823      	ldr	r3, [r4, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d000      	beq.n	800538a <_fstat_r+0x1e>
 8005388:	602b      	str	r3, [r5, #0]
 800538a:	bd70      	pop	{r4, r5, r6, pc}
 800538c:	20000460 	.word	0x20000460

08005390 <_isatty_r>:
 8005390:	2300      	movs	r3, #0
 8005392:	b570      	push	{r4, r5, r6, lr}
 8005394:	4c06      	ldr	r4, [pc, #24]	; (80053b0 <_isatty_r+0x20>)
 8005396:	0005      	movs	r5, r0
 8005398:	0008      	movs	r0, r1
 800539a:	6023      	str	r3, [r4, #0]
 800539c:	f7fc fc97 	bl	8001cce <_isatty>
 80053a0:	1c43      	adds	r3, r0, #1
 80053a2:	d103      	bne.n	80053ac <_isatty_r+0x1c>
 80053a4:	6823      	ldr	r3, [r4, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d000      	beq.n	80053ac <_isatty_r+0x1c>
 80053aa:	602b      	str	r3, [r5, #0]
 80053ac:	bd70      	pop	{r4, r5, r6, pc}
 80053ae:	46c0      	nop			; (mov r8, r8)
 80053b0:	20000460 	.word	0x20000460

080053b4 <_lseek_r>:
 80053b4:	b570      	push	{r4, r5, r6, lr}
 80053b6:	0005      	movs	r5, r0
 80053b8:	0008      	movs	r0, r1
 80053ba:	0011      	movs	r1, r2
 80053bc:	2200      	movs	r2, #0
 80053be:	4c06      	ldr	r4, [pc, #24]	; (80053d8 <_lseek_r+0x24>)
 80053c0:	6022      	str	r2, [r4, #0]
 80053c2:	001a      	movs	r2, r3
 80053c4:	f7fc fc8c 	bl	8001ce0 <_lseek>
 80053c8:	1c43      	adds	r3, r0, #1
 80053ca:	d103      	bne.n	80053d4 <_lseek_r+0x20>
 80053cc:	6823      	ldr	r3, [r4, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d000      	beq.n	80053d4 <_lseek_r+0x20>
 80053d2:	602b      	str	r3, [r5, #0]
 80053d4:	bd70      	pop	{r4, r5, r6, pc}
 80053d6:	46c0      	nop			; (mov r8, r8)
 80053d8:	20000460 	.word	0x20000460

080053dc <memchr>:
 80053dc:	b2c9      	uxtb	r1, r1
 80053de:	1882      	adds	r2, r0, r2
 80053e0:	4290      	cmp	r0, r2
 80053e2:	d101      	bne.n	80053e8 <memchr+0xc>
 80053e4:	2000      	movs	r0, #0
 80053e6:	4770      	bx	lr
 80053e8:	7803      	ldrb	r3, [r0, #0]
 80053ea:	428b      	cmp	r3, r1
 80053ec:	d0fb      	beq.n	80053e6 <memchr+0xa>
 80053ee:	3001      	adds	r0, #1
 80053f0:	e7f6      	b.n	80053e0 <memchr+0x4>

080053f2 <memcpy>:
 80053f2:	2300      	movs	r3, #0
 80053f4:	b510      	push	{r4, lr}
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d100      	bne.n	80053fc <memcpy+0xa>
 80053fa:	bd10      	pop	{r4, pc}
 80053fc:	5ccc      	ldrb	r4, [r1, r3]
 80053fe:	54c4      	strb	r4, [r0, r3]
 8005400:	3301      	adds	r3, #1
 8005402:	e7f8      	b.n	80053f6 <memcpy+0x4>

08005404 <memmove>:
 8005404:	b510      	push	{r4, lr}
 8005406:	4288      	cmp	r0, r1
 8005408:	d902      	bls.n	8005410 <memmove+0xc>
 800540a:	188b      	adds	r3, r1, r2
 800540c:	4298      	cmp	r0, r3
 800540e:	d303      	bcc.n	8005418 <memmove+0x14>
 8005410:	2300      	movs	r3, #0
 8005412:	e007      	b.n	8005424 <memmove+0x20>
 8005414:	5c8b      	ldrb	r3, [r1, r2]
 8005416:	5483      	strb	r3, [r0, r2]
 8005418:	3a01      	subs	r2, #1
 800541a:	d2fb      	bcs.n	8005414 <memmove+0x10>
 800541c:	bd10      	pop	{r4, pc}
 800541e:	5ccc      	ldrb	r4, [r1, r3]
 8005420:	54c4      	strb	r4, [r0, r3]
 8005422:	3301      	adds	r3, #1
 8005424:	429a      	cmp	r2, r3
 8005426:	d1fa      	bne.n	800541e <memmove+0x1a>
 8005428:	e7f8      	b.n	800541c <memmove+0x18>

0800542a <__malloc_lock>:
 800542a:	4770      	bx	lr

0800542c <__malloc_unlock>:
 800542c:	4770      	bx	lr

0800542e <_realloc_r>:
 800542e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005430:	0007      	movs	r7, r0
 8005432:	000d      	movs	r5, r1
 8005434:	0016      	movs	r6, r2
 8005436:	2900      	cmp	r1, #0
 8005438:	d105      	bne.n	8005446 <_realloc_r+0x18>
 800543a:	0011      	movs	r1, r2
 800543c:	f7ff fa5e 	bl	80048fc <_malloc_r>
 8005440:	0004      	movs	r4, r0
 8005442:	0020      	movs	r0, r4
 8005444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005446:	2a00      	cmp	r2, #0
 8005448:	d103      	bne.n	8005452 <_realloc_r+0x24>
 800544a:	f7ff fa0d 	bl	8004868 <_free_r>
 800544e:	0034      	movs	r4, r6
 8005450:	e7f7      	b.n	8005442 <_realloc_r+0x14>
 8005452:	f000 f827 	bl	80054a4 <_malloc_usable_size_r>
 8005456:	002c      	movs	r4, r5
 8005458:	42b0      	cmp	r0, r6
 800545a:	d2f2      	bcs.n	8005442 <_realloc_r+0x14>
 800545c:	0031      	movs	r1, r6
 800545e:	0038      	movs	r0, r7
 8005460:	f7ff fa4c 	bl	80048fc <_malloc_r>
 8005464:	1e04      	subs	r4, r0, #0
 8005466:	d0ec      	beq.n	8005442 <_realloc_r+0x14>
 8005468:	0029      	movs	r1, r5
 800546a:	0032      	movs	r2, r6
 800546c:	f7ff ffc1 	bl	80053f2 <memcpy>
 8005470:	0029      	movs	r1, r5
 8005472:	0038      	movs	r0, r7
 8005474:	f7ff f9f8 	bl	8004868 <_free_r>
 8005478:	e7e3      	b.n	8005442 <_realloc_r+0x14>
	...

0800547c <_read_r>:
 800547c:	b570      	push	{r4, r5, r6, lr}
 800547e:	0005      	movs	r5, r0
 8005480:	0008      	movs	r0, r1
 8005482:	0011      	movs	r1, r2
 8005484:	2200      	movs	r2, #0
 8005486:	4c06      	ldr	r4, [pc, #24]	; (80054a0 <_read_r+0x24>)
 8005488:	6022      	str	r2, [r4, #0]
 800548a:	001a      	movs	r2, r3
 800548c:	f7fc fbea 	bl	8001c64 <_read>
 8005490:	1c43      	adds	r3, r0, #1
 8005492:	d103      	bne.n	800549c <_read_r+0x20>
 8005494:	6823      	ldr	r3, [r4, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d000      	beq.n	800549c <_read_r+0x20>
 800549a:	602b      	str	r3, [r5, #0]
 800549c:	bd70      	pop	{r4, r5, r6, pc}
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	20000460 	.word	0x20000460

080054a4 <_malloc_usable_size_r>:
 80054a4:	1f0b      	subs	r3, r1, #4
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	1f18      	subs	r0, r3, #4
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	da01      	bge.n	80054b2 <_malloc_usable_size_r+0xe>
 80054ae:	580b      	ldr	r3, [r1, r0]
 80054b0:	18c0      	adds	r0, r0, r3
 80054b2:	4770      	bx	lr

080054b4 <_init>:
 80054b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b6:	46c0      	nop			; (mov r8, r8)
 80054b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ba:	bc08      	pop	{r3}
 80054bc:	469e      	mov	lr, r3
 80054be:	4770      	bx	lr

080054c0 <_fini>:
 80054c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054c6:	bc08      	pop	{r3}
 80054c8:	469e      	mov	lr, r3
 80054ca:	4770      	bx	lr
