
cr95test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068c8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f7c  08006988  08006988  00016988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009904  08009904  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08009904  08009904  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009904  08009904  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009904  08009904  00019904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009908  08009908  00019908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800990c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ec  2000008c  08009998  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000778  08009998  00020778  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102f6  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000281d  00000000  00000000  000303aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  00032bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae8  00000000  00000000  00033778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011b36  00000000  00000000  00034260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104c9  00000000  00000000  00045d96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005fb0e  00000000  00000000  0005625f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b5d6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003554  00000000  00000000  000b5dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000008c 	.word	0x2000008c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006970 	.word	0x08006970

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000090 	.word	0x20000090
 8000104:	08006970 	.word	0x08006970

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <uart_init>:
bool printf_en = true;
uint8_t disp_len;
static uint8_t DacDataRef;

void uart_init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart2, uart_rx_buf, RX_BUFFER_LEN);
 8000248:	4904      	ldr	r1, [pc, #16]	; (800025c <uart_init+0x18>)
 800024a:	4b05      	ldr	r3, [pc, #20]	; (8000260 <uart_init+0x1c>)
 800024c:	2240      	movs	r2, #64	; 0x40
 800024e:	0018      	movs	r0, r3
 8000250:	f004 fb17 	bl	8004882 <HAL_UART_Receive_DMA>
}
 8000254:	46c0      	nop			; (mov r8, r8)
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	20000504 	.word	0x20000504
 8000260:	200006e0 	.word	0x200006e0

08000264 <_write>:

int _write(int file, char const *buf, int n)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
 800026a:	60f8      	str	r0, [r7, #12]
 800026c:	60b9      	str	r1, [r7, #8]
 800026e:	607a      	str	r2, [r7, #4]
    if (printf_en) HAL_UART_Transmit(&huart2, (uint8_t*)(buf), n, HAL_MAX_DELAY);
 8000270:	4b08      	ldr	r3, [pc, #32]	; (8000294 <_write+0x30>)
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d007      	beq.n	8000288 <_write+0x24>
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	b29a      	uxth	r2, r3
 800027c:	2301      	movs	r3, #1
 800027e:	425b      	negs	r3, r3
 8000280:	68b9      	ldr	r1, [r7, #8]
 8000282:	4805      	ldr	r0, [pc, #20]	; (8000298 <_write+0x34>)
 8000284:	f004 fa54 	bl	8004730 <HAL_UART_Transmit>
    return n;
 8000288:	687b      	ldr	r3, [r7, #4]
}
 800028a:	0018      	movs	r0, r3
 800028c:	46bd      	mov	sp, r7
 800028e:	b004      	add	sp, #16
 8000290:	bd80      	pop	{r7, pc}
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	20000000 	.word	0x20000000
 8000298:	200006e0 	.word	0x200006e0

0800029c <cr95write>:

static void cr95write(const uint8_t *data, uint8_t length)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
 80002a4:	000a      	movs	r2, r1
 80002a6:	1cfb      	adds	r3, r7, #3
 80002a8:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t *)(data), length, HAL_MAX_DELAY);
 80002aa:	1cfb      	adds	r3, r7, #3
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	b29a      	uxth	r2, r3
 80002b0:	2301      	movs	r3, #1
 80002b2:	425b      	negs	r3, r3
 80002b4:	6879      	ldr	r1, [r7, #4]
 80002b6:	4803      	ldr	r0, [pc, #12]	; (80002c4 <cr95write+0x28>)
 80002b8:	f004 fa3a 	bl	8004730 <HAL_UART_Transmit>
}
 80002bc:	46c0      	nop			; (mov r8, r8)
 80002be:	46bd      	mov	sp, r7
 80002c0:	b002      	add	sp, #8
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	2000065c 	.word	0x2000065c

080002c8 <cr95read>:

static uint8_t cr95read(uint8_t *data, uint8_t *length)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b086      	sub	sp, #24
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
 80002d0:	6039      	str	r1, [r7, #0]
	uint32_t timeout = HAL_GetTick();
 80002d2:	f002 fa0f 	bl	80026f4 <HAL_GetTick>
 80002d6:	0003      	movs	r3, r0
 80002d8:	613b      	str	r3, [r7, #16]

	do {
		if (HAL_GetTick() - timeout > NFC_TIMEOUT) return 0xFF; // timeout
 80002da:	f002 fa0b 	bl	80026f4 <HAL_GetTick>
 80002de:	0002      	movs	r2, r0
 80002e0:	693b      	ldr	r3, [r7, #16]
 80002e2:	1ad2      	subs	r2, r2, r3
 80002e4:	23fa      	movs	r3, #250	; 0xfa
 80002e6:	009b      	lsls	r3, r3, #2
 80002e8:	429a      	cmp	r2, r3
 80002ea:	d901      	bls.n	80002f0 <cr95read+0x28>
 80002ec:	23ff      	movs	r3, #255	; 0xff
 80002ee:	e098      	b.n	8000422 <cr95read+0x15a>
	} while (nfc_rx_read_ptr == nfc_rx_write_ptr);
 80002f0:	4b4e      	ldr	r3, [pc, #312]	; (800042c <cr95read+0x164>)
 80002f2:	881b      	ldrh	r3, [r3, #0]
 80002f4:	b29b      	uxth	r3, r3
 80002f6:	0019      	movs	r1, r3
 80002f8:	4b4d      	ldr	r3, [pc, #308]	; (8000430 <cr95read+0x168>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	685b      	ldr	r3, [r3, #4]
 80002fe:	2240      	movs	r2, #64	; 0x40
 8000300:	1ad3      	subs	r3, r2, r3
 8000302:	4299      	cmp	r1, r3
 8000304:	d0e9      	beq.n	80002da <cr95read+0x12>
	uint8_t resp = nfc_rx_buf[nfc_rx_read_ptr];
 8000306:	4b49      	ldr	r3, [pc, #292]	; (800042c <cr95read+0x164>)
 8000308:	881b      	ldrh	r3, [r3, #0]
 800030a:	b29b      	uxth	r3, r3
 800030c:	0019      	movs	r1, r3
 800030e:	230f      	movs	r3, #15
 8000310:	18fb      	adds	r3, r7, r3
 8000312:	4a48      	ldr	r2, [pc, #288]	; (8000434 <cr95read+0x16c>)
 8000314:	5c52      	ldrb	r2, [r2, r1]
 8000316:	701a      	strb	r2, [r3, #0]
    if (++nfc_rx_read_ptr >= RX_BUFFER_LEN) nfc_rx_read_ptr = 0; // increase read pointer
 8000318:	4b44      	ldr	r3, [pc, #272]	; (800042c <cr95read+0x164>)
 800031a:	881b      	ldrh	r3, [r3, #0]
 800031c:	b29b      	uxth	r3, r3
 800031e:	3301      	adds	r3, #1
 8000320:	b29b      	uxth	r3, r3
 8000322:	4a42      	ldr	r2, [pc, #264]	; (800042c <cr95read+0x164>)
 8000324:	1c19      	adds	r1, r3, #0
 8000326:	8011      	strh	r1, [r2, #0]
 8000328:	2b3f      	cmp	r3, #63	; 0x3f
 800032a:	d902      	bls.n	8000332 <cr95read+0x6a>
 800032c:	4b3f      	ldr	r3, [pc, #252]	; (800042c <cr95read+0x164>)
 800032e:	2200      	movs	r2, #0
 8000330:	801a      	strh	r2, [r3, #0]

    if (resp == 0x55) return resp;
 8000332:	220f      	movs	r2, #15
 8000334:	18bb      	adds	r3, r7, r2
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	2b55      	cmp	r3, #85	; 0x55
 800033a:	d102      	bne.n	8000342 <cr95read+0x7a>
 800033c:	18bb      	adds	r3, r7, r2
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	e06f      	b.n	8000422 <cr95read+0x15a>

	do {
		if (HAL_GetTick() - timeout > NFC_TIMEOUT) return 0xFF; // timeout
 8000342:	f002 f9d7 	bl	80026f4 <HAL_GetTick>
 8000346:	0002      	movs	r2, r0
 8000348:	693b      	ldr	r3, [r7, #16]
 800034a:	1ad2      	subs	r2, r2, r3
 800034c:	23fa      	movs	r3, #250	; 0xfa
 800034e:	009b      	lsls	r3, r3, #2
 8000350:	429a      	cmp	r2, r3
 8000352:	d901      	bls.n	8000358 <cr95read+0x90>
 8000354:	23ff      	movs	r3, #255	; 0xff
 8000356:	e064      	b.n	8000422 <cr95read+0x15a>
	} while (nfc_rx_read_ptr == nfc_rx_write_ptr);
 8000358:	4b34      	ldr	r3, [pc, #208]	; (800042c <cr95read+0x164>)
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	b29b      	uxth	r3, r3
 800035e:	0019      	movs	r1, r3
 8000360:	4b33      	ldr	r3, [pc, #204]	; (8000430 <cr95read+0x168>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	685b      	ldr	r3, [r3, #4]
 8000366:	2240      	movs	r2, #64	; 0x40
 8000368:	1ad3      	subs	r3, r2, r3
 800036a:	4299      	cmp	r1, r3
 800036c:	d0e9      	beq.n	8000342 <cr95read+0x7a>
	uint8_t len = nfc_rx_buf[nfc_rx_read_ptr];
 800036e:	4b2f      	ldr	r3, [pc, #188]	; (800042c <cr95read+0x164>)
 8000370:	881b      	ldrh	r3, [r3, #0]
 8000372:	b29b      	uxth	r3, r3
 8000374:	0019      	movs	r1, r3
 8000376:	2317      	movs	r3, #23
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	4a2e      	ldr	r2, [pc, #184]	; (8000434 <cr95read+0x16c>)
 800037c:	5c52      	ldrb	r2, [r2, r1]
 800037e:	701a      	strb	r2, [r3, #0]
    if (++nfc_rx_read_ptr >= RX_BUFFER_LEN) nfc_rx_read_ptr = 0; // increase read pointer
 8000380:	4b2a      	ldr	r3, [pc, #168]	; (800042c <cr95read+0x164>)
 8000382:	881b      	ldrh	r3, [r3, #0]
 8000384:	b29b      	uxth	r3, r3
 8000386:	3301      	adds	r3, #1
 8000388:	b29b      	uxth	r3, r3
 800038a:	4a28      	ldr	r2, [pc, #160]	; (800042c <cr95read+0x164>)
 800038c:	1c19      	adds	r1, r3, #0
 800038e:	8011      	strh	r1, [r2, #0]
 8000390:	2b3f      	cmp	r3, #63	; 0x3f
 8000392:	d902      	bls.n	800039a <cr95read+0xd2>
 8000394:	4b25      	ldr	r3, [pc, #148]	; (800042c <cr95read+0x164>)
 8000396:	2200      	movs	r2, #0
 8000398:	801a      	strh	r2, [r3, #0]

    if (length) *length = len;
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d035      	beq.n	800040c <cr95read+0x144>
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	2217      	movs	r2, #23
 80003a4:	18ba      	adds	r2, r7, r2
 80003a6:	7812      	ldrb	r2, [r2, #0]
 80003a8:	701a      	strb	r2, [r3, #0]
    while (len--) {
 80003aa:	e02f      	b.n	800040c <cr95read+0x144>
    	do {
    		if (HAL_GetTick() - timeout > NFC_TIMEOUT) return 0xFF; // timeout
 80003ac:	f002 f9a2 	bl	80026f4 <HAL_GetTick>
 80003b0:	0002      	movs	r2, r0
 80003b2:	693b      	ldr	r3, [r7, #16]
 80003b4:	1ad2      	subs	r2, r2, r3
 80003b6:	23fa      	movs	r3, #250	; 0xfa
 80003b8:	009b      	lsls	r3, r3, #2
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d901      	bls.n	80003c2 <cr95read+0xfa>
 80003be:	23ff      	movs	r3, #255	; 0xff
 80003c0:	e02f      	b.n	8000422 <cr95read+0x15a>
    	} while (nfc_rx_read_ptr == nfc_rx_write_ptr);
 80003c2:	4b1a      	ldr	r3, [pc, #104]	; (800042c <cr95read+0x164>)
 80003c4:	881b      	ldrh	r3, [r3, #0]
 80003c6:	b29b      	uxth	r3, r3
 80003c8:	0019      	movs	r1, r3
 80003ca:	4b19      	ldr	r3, [pc, #100]	; (8000430 <cr95read+0x168>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	685b      	ldr	r3, [r3, #4]
 80003d0:	2240      	movs	r2, #64	; 0x40
 80003d2:	1ad3      	subs	r3, r2, r3
 80003d4:	4299      	cmp	r1, r3
 80003d6:	d0e9      	beq.n	80003ac <cr95read+0xe4>
    	if (data) *data++ = nfc_rx_buf[nfc_rx_read_ptr];
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d009      	beq.n	80003f2 <cr95read+0x12a>
 80003de:	4b13      	ldr	r3, [pc, #76]	; (800042c <cr95read+0x164>)
 80003e0:	881b      	ldrh	r3, [r3, #0]
 80003e2:	b29b      	uxth	r3, r3
 80003e4:	0019      	movs	r1, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	1c5a      	adds	r2, r3, #1
 80003ea:	607a      	str	r2, [r7, #4]
 80003ec:	4a11      	ldr	r2, [pc, #68]	; (8000434 <cr95read+0x16c>)
 80003ee:	5c52      	ldrb	r2, [r2, r1]
 80003f0:	701a      	strb	r2, [r3, #0]
        if (++nfc_rx_read_ptr >= RX_BUFFER_LEN) nfc_rx_read_ptr = 0; // increase read pointer
 80003f2:	4b0e      	ldr	r3, [pc, #56]	; (800042c <cr95read+0x164>)
 80003f4:	881b      	ldrh	r3, [r3, #0]
 80003f6:	b29b      	uxth	r3, r3
 80003f8:	3301      	adds	r3, #1
 80003fa:	b29b      	uxth	r3, r3
 80003fc:	4a0b      	ldr	r2, [pc, #44]	; (800042c <cr95read+0x164>)
 80003fe:	1c19      	adds	r1, r3, #0
 8000400:	8011      	strh	r1, [r2, #0]
 8000402:	2b3f      	cmp	r3, #63	; 0x3f
 8000404:	d902      	bls.n	800040c <cr95read+0x144>
 8000406:	4b09      	ldr	r3, [pc, #36]	; (800042c <cr95read+0x164>)
 8000408:	2200      	movs	r2, #0
 800040a:	801a      	strh	r2, [r3, #0]
    while (len--) {
 800040c:	2217      	movs	r2, #23
 800040e:	18bb      	adds	r3, r7, r2
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	18ba      	adds	r2, r7, r2
 8000414:	1e59      	subs	r1, r3, #1
 8000416:	7011      	strb	r1, [r2, #0]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d1c7      	bne.n	80003ac <cr95read+0xe4>
    }

    return resp;
 800041c:	230f      	movs	r3, #15
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	781b      	ldrb	r3, [r3, #0]
}
 8000422:	0018      	movs	r0, r3
 8000424:	46bd      	mov	sp, r7
 8000426:	b006      	add	sp, #24
 8000428:	bd80      	pop	{r7, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	200000aa 	.word	0x200000aa
 8000430:	20000618 	.word	0x20000618
 8000434:	20000548 	.word	0x20000548

08000438 <cr95_wakeup>:

static void cr95_wakeup(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
	const uint8_t wakeup = 0;
 800043e:	1dfb      	adds	r3, r7, #7
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]
	cr95write(&wakeup, 1);
 8000444:	1dfb      	adds	r3, r7, #7
 8000446:	2101      	movs	r1, #1
 8000448:	0018      	movs	r0, r3
 800044a:	f7ff ff27 	bl	800029c <cr95write>
	printf("WAKEUP sent\n");
 800044e:	4b04      	ldr	r3, [pc, #16]	; (8000460 <cr95_wakeup+0x28>)
 8000450:	0018      	movs	r0, r3
 8000452:	f004 ffe1 	bl	8005418 <puts>
}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	46bd      	mov	sp, r7
 800045a:	b002      	add	sp, #8
 800045c:	bd80      	pop	{r7, pc}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	08006988 	.word	0x08006988

08000464 <cr95_idle>:

static void cr95_idle(uint8_t mode)
{
 8000464:	b5b0      	push	{r4, r5, r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af00      	add	r7, sp, #0
 800046a:	0002      	movs	r2, r0
 800046c:	1dfb      	adds	r3, r7, #7
 800046e:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_idle[] =  		{ 0x07, 0x0E, 0x0A, 0x21, 0x00, 0x79, 0x01, 0x18, 0x00, 0x20, 0x60, 0x60, 0x00, 0x00, 0x3F, 0x08 };
 8000470:	2108      	movs	r1, #8
 8000472:	187b      	adds	r3, r7, r1
 8000474:	4a15      	ldr	r2, [pc, #84]	; (80004cc <cr95_idle+0x68>)
 8000476:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000478:	c331      	stmia	r3!, {r0, r4, r5}
 800047a:	6812      	ldr	r2, [r2, #0]
 800047c:	601a      	str	r2, [r3, #0]

	if (mode == 1) cmd_idle[2] = 0x08;   // Hibernate
 800047e:	1dfb      	adds	r3, r7, #7
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	2b01      	cmp	r3, #1
 8000484:	d103      	bne.n	800048e <cr95_idle+0x2a>
 8000486:	187b      	adds	r3, r7, r1
 8000488:	2208      	movs	r2, #8
 800048a:	709a      	strb	r2, [r3, #2]
 800048c:	e003      	b.n	8000496 <cr95_idle+0x32>
	else cmd_idle[2] = 0x0A;             // TagDetect
 800048e:	2308      	movs	r3, #8
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	220a      	movs	r2, #10
 8000494:	709a      	strb	r2, [r3, #2]

	cmd_idle[12] = DacDataRef - 8;
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <cr95_idle+0x6c>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	3b08      	subs	r3, #8
 800049c:	b2da      	uxtb	r2, r3
 800049e:	2108      	movs	r1, #8
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	731a      	strb	r2, [r3, #12]
	cmd_idle[13] = DacDataRef + 8;
 80004a4:	4b0a      	ldr	r3, [pc, #40]	; (80004d0 <cr95_idle+0x6c>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	3308      	adds	r3, #8
 80004aa:	b2da      	uxtb	r2, r3
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_idle, sizeof(cmd_idle));
 80004b0:	187b      	adds	r3, r7, r1
 80004b2:	2110      	movs	r1, #16
 80004b4:	0018      	movs	r0, r3
 80004b6:	f7ff fef1 	bl	800029c <cr95write>
	printf("IDLE sent\n");
 80004ba:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <cr95_idle+0x70>)
 80004bc:	0018      	movs	r0, r3
 80004be:	f004 ffab 	bl	8005418 <puts>
}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	b006      	add	sp, #24
 80004c8:	bdb0      	pop	{r4, r5, r7, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	080069a0 	.word	0x080069a0
 80004d0:	200000ad 	.word	0x200000ad
 80004d4:	08006994 	.word	0x08006994

080004d8 <cr95_init14>:


static void cr95_init14(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
	const uint8_t cmd_init1[] = { 0x02, 0x02, 0x02, 0x00 };
 80004de:	2014      	movs	r0, #20
 80004e0:	183b      	adds	r3, r7, r0
 80004e2:	4a26      	ldr	r2, [pc, #152]	; (800057c <cr95_init14+0xa4>)
 80004e4:	601a      	str	r2, [r3, #0]
	const uint8_t cmd_init2[] = { 0x09, 0x04, 0x68, 0x01, 0x01, 0xD1 };
 80004e6:	230c      	movs	r3, #12
 80004e8:	18fb      	adds	r3, r7, r3
 80004ea:	4a25      	ldr	r2, [pc, #148]	; (8000580 <cr95_init14+0xa8>)
 80004ec:	6811      	ldr	r1, [r2, #0]
 80004ee:	6019      	str	r1, [r3, #0]
 80004f0:	8892      	ldrh	r2, [r2, #4]
 80004f2:	809a      	strh	r2, [r3, #4]
	const uint8_t cmd_init3[] = { 0x09, 0x04, 0x3A, 0x00, 0x58, 0x04 };
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	4a23      	ldr	r2, [pc, #140]	; (8000584 <cr95_init14+0xac>)
 80004f8:	6811      	ldr	r1, [r2, #0]
 80004fa:	6019      	str	r1, [r3, #0]
 80004fc:	8892      	ldrh	r2, [r2, #4]
 80004fe:	809a      	strh	r2, [r3, #4]


	cr95write(cmd_init1, sizeof(cmd_init1));
 8000500:	183b      	adds	r3, r7, r0
 8000502:	2104      	movs	r1, #4
 8000504:	0018      	movs	r0, r3
 8000506:	f7ff fec9 	bl	800029c <cr95write>
	printf("Initiation of 14 %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 800050a:	2100      	movs	r1, #0
 800050c:	2000      	movs	r0, #0
 800050e:	f7ff fedb 	bl	80002c8 <cr95read>
 8000512:	1e03      	subs	r3, r0, #0
 8000514:	d101      	bne.n	800051a <cr95_init14+0x42>
 8000516:	4b1c      	ldr	r3, [pc, #112]	; (8000588 <cr95_init14+0xb0>)
 8000518:	e000      	b.n	800051c <cr95_init14+0x44>
 800051a:	4b1c      	ldr	r3, [pc, #112]	; (800058c <cr95_init14+0xb4>)
 800051c:	4a1c      	ldr	r2, [pc, #112]	; (8000590 <cr95_init14+0xb8>)
 800051e:	0019      	movs	r1, r3
 8000520:	0010      	movs	r0, r2
 8000522:	f004 fed9 	bl	80052d8 <iprintf>
	cr95write(cmd_init2, sizeof(cmd_init2));
 8000526:	230c      	movs	r3, #12
 8000528:	18fb      	adds	r3, r7, r3
 800052a:	2106      	movs	r1, #6
 800052c:	0018      	movs	r0, r3
 800052e:	f7ff feb5 	bl	800029c <cr95write>
	printf(" %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 8000532:	2100      	movs	r1, #0
 8000534:	2000      	movs	r0, #0
 8000536:	f7ff fec7 	bl	80002c8 <cr95read>
 800053a:	1e03      	subs	r3, r0, #0
 800053c:	d101      	bne.n	8000542 <cr95_init14+0x6a>
 800053e:	4b12      	ldr	r3, [pc, #72]	; (8000588 <cr95_init14+0xb0>)
 8000540:	e000      	b.n	8000544 <cr95_init14+0x6c>
 8000542:	4b12      	ldr	r3, [pc, #72]	; (800058c <cr95_init14+0xb4>)
 8000544:	4a13      	ldr	r2, [pc, #76]	; (8000594 <cr95_init14+0xbc>)
 8000546:	0019      	movs	r1, r3
 8000548:	0010      	movs	r0, r2
 800054a:	f004 fec5 	bl	80052d8 <iprintf>
	cr95write(cmd_init3, sizeof(cmd_init3));
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2106      	movs	r1, #6
 8000552:	0018      	movs	r0, r3
 8000554:	f7ff fea2 	bl	800029c <cr95write>
	printf(" %s\n", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 8000558:	2100      	movs	r1, #0
 800055a:	2000      	movs	r0, #0
 800055c:	f7ff feb4 	bl	80002c8 <cr95read>
 8000560:	1e03      	subs	r3, r0, #0
 8000562:	d101      	bne.n	8000568 <cr95_init14+0x90>
 8000564:	4b08      	ldr	r3, [pc, #32]	; (8000588 <cr95_init14+0xb0>)
 8000566:	e000      	b.n	800056a <cr95_init14+0x92>
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <cr95_init14+0xb4>)
 800056a:	4a0b      	ldr	r2, [pc, #44]	; (8000598 <cr95_init14+0xc0>)
 800056c:	0019      	movs	r1, r3
 800056e:	0010      	movs	r0, r2
 8000570:	f004 feb2 	bl	80052d8 <iprintf>
}
 8000574:	46c0      	nop			; (mov r8, r8)
 8000576:	46bd      	mov	sp, r7
 8000578:	b006      	add	sp, #24
 800057a:	bd80      	pop	{r7, pc}
 800057c:	00020202 	.word	0x00020202
 8000580:	080069d8 	.word	0x080069d8
 8000584:	080069e0 	.word	0x080069e0
 8000588:	080069b0 	.word	0x080069b0
 800058c:	080069b4 	.word	0x080069b4
 8000590:	080069b8 	.word	0x080069b8
 8000594:	080069cc 	.word	0x080069cc
 8000598:	080069d0 	.word	0x080069d0

0800059c <cr95_init15>:

static void cr95_init15(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
	const uint8_t cmd_init1_15[] = { 0x02, 0x02, 0x01, 0x05 };
 80005a2:	200c      	movs	r0, #12
 80005a4:	183b      	adds	r3, r7, r0
 80005a6:	4a19      	ldr	r2, [pc, #100]	; (800060c <cr95_init15+0x70>)
 80005a8:	601a      	str	r2, [r3, #0]
	const uint8_t cmd_init2_15[] = { 0x09, 0x04, 0x68, 0x01, 0x01, 0x50 };
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	4a18      	ldr	r2, [pc, #96]	; (8000610 <cr95_init15+0x74>)
 80005ae:	6811      	ldr	r1, [r2, #0]
 80005b0:	6019      	str	r1, [r3, #0]
 80005b2:	8892      	ldrh	r2, [r2, #4]
 80005b4:	809a      	strh	r2, [r3, #4]

	cr95write(cmd_init1_15, sizeof(cmd_init1_15));
 80005b6:	183b      	adds	r3, r7, r0
 80005b8:	2104      	movs	r1, #4
 80005ba:	0018      	movs	r0, r3
 80005bc:	f7ff fe6e 	bl	800029c <cr95write>
	printf("Initiation of 15 %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 80005c0:	2100      	movs	r1, #0
 80005c2:	2000      	movs	r0, #0
 80005c4:	f7ff fe80 	bl	80002c8 <cr95read>
 80005c8:	1e03      	subs	r3, r0, #0
 80005ca:	d101      	bne.n	80005d0 <cr95_init15+0x34>
 80005cc:	4b11      	ldr	r3, [pc, #68]	; (8000614 <cr95_init15+0x78>)
 80005ce:	e000      	b.n	80005d2 <cr95_init15+0x36>
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <cr95_init15+0x7c>)
 80005d2:	4a12      	ldr	r2, [pc, #72]	; (800061c <cr95_init15+0x80>)
 80005d4:	0019      	movs	r1, r3
 80005d6:	0010      	movs	r0, r2
 80005d8:	f004 fe7e 	bl	80052d8 <iprintf>
	cr95write(cmd_init2_15, sizeof(cmd_init2_15));
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2106      	movs	r1, #6
 80005e0:	0018      	movs	r0, r3
 80005e2:	f7ff fe5b 	bl	800029c <cr95write>
	printf(" %s\n", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 80005e6:	2100      	movs	r1, #0
 80005e8:	2000      	movs	r0, #0
 80005ea:	f7ff fe6d 	bl	80002c8 <cr95read>
 80005ee:	1e03      	subs	r3, r0, #0
 80005f0:	d101      	bne.n	80005f6 <cr95_init15+0x5a>
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <cr95_init15+0x78>)
 80005f4:	e000      	b.n	80005f8 <cr95_init15+0x5c>
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <cr95_init15+0x7c>)
 80005f8:	4a09      	ldr	r2, [pc, #36]	; (8000620 <cr95_init15+0x84>)
 80005fa:	0019      	movs	r1, r3
 80005fc:	0010      	movs	r0, r2
 80005fe:	f004 fe6b 	bl	80052d8 <iprintf>
}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	b004      	add	sp, #16
 8000608:	bd80      	pop	{r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	05010202 	.word	0x05010202
 8000610:	080069fc 	.word	0x080069fc
 8000614:	080069b0 	.word	0x080069b0
 8000618:	080069b4 	.word	0x080069b4
 800061c:	080069e8 	.word	0x080069e8
 8000620:	080069d0 	.word	0x080069d0

08000624 <cr95_read>:

static void cr95_read(void)
{
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	46ce      	mov	lr, r9
 8000628:	4647      	mov	r7, r8
 800062a:	b580      	push	{r7, lr}
 800062c:	b09d      	sub	sp, #116	; 0x74
 800062e:	af06      	add	r7, sp, #24
	const uint8_t cmd_reqa[] =  { 0x04, 0x02, 0x26, 0x07 };
 8000630:	204c      	movs	r0, #76	; 0x4c
 8000632:	183b      	adds	r3, r7, r0
 8000634:	4ae1      	ldr	r2, [pc, #900]	; (80009bc <cr95_read+0x398>)
 8000636:	601a      	str	r2, [r3, #0]
	const uint8_t cmd_acl1[] =  { 0x04, 0x03, 0x93, 0x20, 0x08 };
 8000638:	2344      	movs	r3, #68	; 0x44
 800063a:	18fb      	adds	r3, r7, r3
 800063c:	4ae0      	ldr	r2, [pc, #896]	; (80009c0 <cr95_read+0x39c>)
 800063e:	6811      	ldr	r1, [r2, #0]
 8000640:	6019      	str	r1, [r3, #0]
 8000642:	7912      	ldrb	r2, [r2, #4]
 8000644:	711a      	strb	r2, [r3, #4]
	const uint8_t cmd_acl2[] =  { 0x04, 0x03, 0x95, 0x20, 0x08 };
 8000646:	233c      	movs	r3, #60	; 0x3c
 8000648:	18fb      	adds	r3, r7, r3
 800064a:	4ade      	ldr	r2, [pc, #888]	; (80009c4 <cr95_read+0x3a0>)
 800064c:	6811      	ldr	r1, [r2, #0]
 800064e:	6019      	str	r1, [r3, #0]
 8000650:	7912      	ldrb	r2, [r2, #4]
 8000652:	711a      	strb	r2, [r3, #4]

	uint8_t data[8];
	uint8_t saved_data[10] =  { 0x04, 0x08, 0x93, 0x70, 0x00, 0x00, 0x00, 0x00,  0x00, 0x28};
 8000654:	2328      	movs	r3, #40	; 0x28
 8000656:	18fb      	adds	r3, r7, r3
 8000658:	4adb      	ldr	r2, [pc, #876]	; (80009c8 <cr95_read+0x3a4>)
 800065a:	ca12      	ldmia	r2!, {r1, r4}
 800065c:	c312      	stmia	r3!, {r1, r4}
 800065e:	8812      	ldrh	r2, [r2, #0]
 8000660:	801a      	strh	r2, [r3, #0]
	char uid[32];
	uint8_t len;


	cr95write(cmd_reqa, sizeof(cmd_reqa));
 8000662:	183b      	adds	r3, r7, r0
 8000664:	2104      	movs	r1, #4
 8000666:	0018      	movs	r0, r3
 8000668:	f7ff fe18 	bl	800029c <cr95write>
	if (cr95read(data, &len) == 0x80) {
 800066c:	1dfa      	adds	r2, r7, #7
 800066e:	2334      	movs	r3, #52	; 0x34
 8000670:	18fb      	adds	r3, r7, r3
 8000672:	0011      	movs	r1, r2
 8000674:	0018      	movs	r0, r3
 8000676:	f7ff fe27 	bl	80002c8 <cr95read>
 800067a:	0003      	movs	r3, r0
 800067c:	2b80      	cmp	r3, #128	; 0x80
 800067e:	d000      	beq.n	8000682 <cr95_read+0x5e>
 8000680:	e222      	b.n	8000ac8 <cr95_read+0x4a4>
		printf("ATQA =");
 8000682:	4bd2      	ldr	r3, [pc, #840]	; (80009cc <cr95_read+0x3a8>)
 8000684:	0018      	movs	r0, r3
 8000686:	f004 fe27 	bl	80052d8 <iprintf>
		for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 800068a:	2357      	movs	r3, #87	; 0x57
 800068c:	18fb      	adds	r3, r7, r3
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
 8000692:	e010      	b.n	80006b6 <cr95_read+0x92>
 8000694:	2457      	movs	r4, #87	; 0x57
 8000696:	193b      	adds	r3, r7, r4
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2234      	movs	r2, #52	; 0x34
 800069c:	18ba      	adds	r2, r7, r2
 800069e:	5cd3      	ldrb	r3, [r2, r3]
 80006a0:	001a      	movs	r2, r3
 80006a2:	4bcb      	ldr	r3, [pc, #812]	; (80009d0 <cr95_read+0x3ac>)
 80006a4:	0011      	movs	r1, r2
 80006a6:	0018      	movs	r0, r3
 80006a8:	f004 fe16 	bl	80052d8 <iprintf>
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	3201      	adds	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
 80006b6:	1dfb      	adds	r3, r7, #7
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2257      	movs	r2, #87	; 0x57
 80006bc:	18ba      	adds	r2, r7, r2
 80006be:	7812      	ldrb	r2, [r2, #0]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d3e7      	bcc.n	8000694 <cr95_read+0x70>
		printf("\n");
 80006c4:	200a      	movs	r0, #10
 80006c6:	f004 fe21 	bl	800530c <putchar>

    	sprintf(uid, "UID=");
 80006ca:	4ac2      	ldr	r2, [pc, #776]	; (80009d4 <cr95_read+0x3b0>)
 80006cc:	2308      	movs	r3, #8
 80006ce:	18fb      	adds	r3, r7, r3
 80006d0:	0011      	movs	r1, r2
 80006d2:	0018      	movs	r0, r3
 80006d4:	f004 feaa 	bl	800542c <siprintf>

    	cr95write(cmd_acl1, sizeof(cmd_acl1));
 80006d8:	2344      	movs	r3, #68	; 0x44
 80006da:	18fb      	adds	r3, r7, r3
 80006dc:	2105      	movs	r1, #5
 80006de:	0018      	movs	r0, r3
 80006e0:	f7ff fddc 	bl	800029c <cr95write>
    	if (cr95read(data, &len) == 0x80 && len == 8 && (data[0]^data[1]^data[2]^data[3]) == data[4]) {
 80006e4:	1dfa      	adds	r2, r7, #7
 80006e6:	2434      	movs	r4, #52	; 0x34
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	0011      	movs	r1, r2
 80006ec:	0018      	movs	r0, r3
 80006ee:	f7ff fdeb 	bl	80002c8 <cr95read>
 80006f2:	0003      	movs	r3, r0
 80006f4:	2b80      	cmp	r3, #128	; 0x80
 80006f6:	d000      	beq.n	80006fa <cr95_read+0xd6>
 80006f8:	e1de      	b.n	8000ab8 <cr95_read+0x494>
 80006fa:	1dfb      	adds	r3, r7, #7
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b08      	cmp	r3, #8
 8000700:	d000      	beq.n	8000704 <cr95_read+0xe0>
 8000702:	e1d9      	b.n	8000ab8 <cr95_read+0x494>
 8000704:	0021      	movs	r1, r4
 8000706:	187b      	adds	r3, r7, r1
 8000708:	781a      	ldrb	r2, [r3, #0]
 800070a:	187b      	adds	r3, r7, r1
 800070c:	785b      	ldrb	r3, [r3, #1]
 800070e:	4053      	eors	r3, r2
 8000710:	b2da      	uxtb	r2, r3
 8000712:	187b      	adds	r3, r7, r1
 8000714:	789b      	ldrb	r3, [r3, #2]
 8000716:	4053      	eors	r3, r2
 8000718:	b2da      	uxtb	r2, r3
 800071a:	187b      	adds	r3, r7, r1
 800071c:	78db      	ldrb	r3, [r3, #3]
 800071e:	4053      	eors	r3, r2
 8000720:	b2da      	uxtb	r2, r3
 8000722:	187b      	adds	r3, r7, r1
 8000724:	791b      	ldrb	r3, [r3, #4]
 8000726:	429a      	cmp	r2, r3
 8000728:	d000      	beq.n	800072c <cr95_read+0x108>
 800072a:	e1c5      	b.n	8000ab8 <cr95_read+0x494>
    		printf("UID CL1 =");
 800072c:	4baa      	ldr	r3, [pc, #680]	; (80009d8 <cr95_read+0x3b4>)
 800072e:	0018      	movs	r0, r3
 8000730:	f004 fdd2 	bl	80052d8 <iprintf>
    		for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8000734:	2356      	movs	r3, #86	; 0x56
 8000736:	18fb      	adds	r3, r7, r3
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
 800073c:	e010      	b.n	8000760 <cr95_read+0x13c>
 800073e:	2456      	movs	r4, #86	; 0x56
 8000740:	193b      	adds	r3, r7, r4
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2234      	movs	r2, #52	; 0x34
 8000746:	18ba      	adds	r2, r7, r2
 8000748:	5cd3      	ldrb	r3, [r2, r3]
 800074a:	001a      	movs	r2, r3
 800074c:	4ba0      	ldr	r3, [pc, #640]	; (80009d0 <cr95_read+0x3ac>)
 800074e:	0011      	movs	r1, r2
 8000750:	0018      	movs	r0, r3
 8000752:	f004 fdc1 	bl	80052d8 <iprintf>
 8000756:	193b      	adds	r3, r7, r4
 8000758:	781a      	ldrb	r2, [r3, #0]
 800075a:	193b      	adds	r3, r7, r4
 800075c:	3201      	adds	r2, #1
 800075e:	701a      	strb	r2, [r3, #0]
 8000760:	1dfb      	adds	r3, r7, #7
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2256      	movs	r2, #86	; 0x56
 8000766:	18ba      	adds	r2, r7, r2
 8000768:	7812      	ldrb	r2, [r2, #0]
 800076a:	429a      	cmp	r2, r3
 800076c:	d3e7      	bcc.n	800073e <cr95_read+0x11a>
    		printf("\n");
 800076e:	200a      	movs	r0, #10
 8000770:	f004 fdcc 	bl	800530c <putchar>
    		saved_data[4] = data[0]; saved_data[5] = data[1]; saved_data[6] = data[2]; saved_data[7] = data[3]; saved_data[8] = data[4];
 8000774:	2434      	movs	r4, #52	; 0x34
 8000776:	193b      	adds	r3, r7, r4
 8000778:	781a      	ldrb	r2, [r3, #0]
 800077a:	2528      	movs	r5, #40	; 0x28
 800077c:	197b      	adds	r3, r7, r5
 800077e:	711a      	strb	r2, [r3, #4]
 8000780:	193b      	adds	r3, r7, r4
 8000782:	785a      	ldrb	r2, [r3, #1]
 8000784:	197b      	adds	r3, r7, r5
 8000786:	715a      	strb	r2, [r3, #5]
 8000788:	193b      	adds	r3, r7, r4
 800078a:	789a      	ldrb	r2, [r3, #2]
 800078c:	197b      	adds	r3, r7, r5
 800078e:	719a      	strb	r2, [r3, #6]
 8000790:	193b      	adds	r3, r7, r4
 8000792:	78da      	ldrb	r2, [r3, #3]
 8000794:	197b      	adds	r3, r7, r5
 8000796:	71da      	strb	r2, [r3, #7]
 8000798:	193b      	adds	r3, r7, r4
 800079a:	791a      	ldrb	r2, [r3, #4]
 800079c:	197b      	adds	r3, r7, r5
 800079e:	721a      	strb	r2, [r3, #8]

			if (data[0] == 0x88) {
 80007a0:	193b      	adds	r3, r7, r4
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b88      	cmp	r3, #136	; 0x88
 80007a6:	d000      	beq.n	80007aa <cr95_read+0x186>
 80007a8:	e128      	b.n	80009fc <cr95_read+0x3d8>
				printf("Cascade bit detected, longer UID!\n");
 80007aa:	4b8c      	ldr	r3, [pc, #560]	; (80009dc <cr95_read+0x3b8>)
 80007ac:	0018      	movs	r0, r3
 80007ae:	f004 fe33 	bl	8005418 <puts>
				cr95write(saved_data, sizeof(saved_data));
 80007b2:	197b      	adds	r3, r7, r5
 80007b4:	210a      	movs	r1, #10
 80007b6:	0018      	movs	r0, r3
 80007b8:	f7ff fd70 	bl	800029c <cr95write>
				if (cr95read(data, &len) == 0x80) {
 80007bc:	1dfa      	adds	r2, r7, #7
 80007be:	193b      	adds	r3, r7, r4
 80007c0:	0011      	movs	r1, r2
 80007c2:	0018      	movs	r0, r3
 80007c4:	f7ff fd80 	bl	80002c8 <cr95read>
 80007c8:	0003      	movs	r3, r0
 80007ca:	2b80      	cmp	r3, #128	; 0x80
 80007cc:	d123      	bne.n	8000816 <cr95_read+0x1f2>
					printf("SEL1 Response =");
 80007ce:	4b84      	ldr	r3, [pc, #528]	; (80009e0 <cr95_read+0x3bc>)
 80007d0:	0018      	movs	r0, r3
 80007d2:	f004 fd81 	bl	80052d8 <iprintf>
					for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 80007d6:	2355      	movs	r3, #85	; 0x55
 80007d8:	18fb      	adds	r3, r7, r3
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
 80007de:	e010      	b.n	8000802 <cr95_read+0x1de>
 80007e0:	2455      	movs	r4, #85	; 0x55
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2234      	movs	r2, #52	; 0x34
 80007e8:	18ba      	adds	r2, r7, r2
 80007ea:	5cd3      	ldrb	r3, [r2, r3]
 80007ec:	001a      	movs	r2, r3
 80007ee:	4b78      	ldr	r3, [pc, #480]	; (80009d0 <cr95_read+0x3ac>)
 80007f0:	0011      	movs	r1, r2
 80007f2:	0018      	movs	r0, r3
 80007f4:	f004 fd70 	bl	80052d8 <iprintf>
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	781a      	ldrb	r2, [r3, #0]
 80007fc:	193b      	adds	r3, r7, r4
 80007fe:	3201      	adds	r2, #1
 8000800:	701a      	strb	r2, [r3, #0]
 8000802:	1dfb      	adds	r3, r7, #7
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2255      	movs	r2, #85	; 0x55
 8000808:	18ba      	adds	r2, r7, r2
 800080a:	7812      	ldrb	r2, [r2, #0]
 800080c:	429a      	cmp	r2, r3
 800080e:	d3e7      	bcc.n	80007e0 <cr95_read+0x1bc>
					printf("\n");
 8000810:	200a      	movs	r0, #10
 8000812:	f004 fd7b 	bl	800530c <putchar>
				}

				if (data[0] != 0x08) {
 8000816:	2434      	movs	r4, #52	; 0x34
 8000818:	193b      	adds	r3, r7, r4
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b08      	cmp	r3, #8
 800081e:	d100      	bne.n	8000822 <cr95_read+0x1fe>
 8000820:	e0c4      	b.n	80009ac <cr95_read+0x388>
				   cr95write(cmd_acl2, sizeof(cmd_acl2));
 8000822:	233c      	movs	r3, #60	; 0x3c
 8000824:	18fb      	adds	r3, r7, r3
 8000826:	2105      	movs	r1, #5
 8000828:	0018      	movs	r0, r3
 800082a:	f7ff fd37 	bl	800029c <cr95write>
				   if (cr95read(data, &len) == 0x80 && (data[0]^data[1]^data[2]^data[3]) == data[4]) {
 800082e:	1dfa      	adds	r2, r7, #7
 8000830:	193b      	adds	r3, r7, r4
 8000832:	0011      	movs	r1, r2
 8000834:	0018      	movs	r0, r3
 8000836:	f7ff fd47 	bl	80002c8 <cr95read>
 800083a:	0003      	movs	r3, r0
 800083c:	2b80      	cmp	r3, #128	; 0x80
 800083e:	d000      	beq.n	8000842 <cr95_read+0x21e>
 8000840:	e0ac      	b.n	800099c <cr95_read+0x378>
 8000842:	0021      	movs	r1, r4
 8000844:	187b      	adds	r3, r7, r1
 8000846:	781a      	ldrb	r2, [r3, #0]
 8000848:	187b      	adds	r3, r7, r1
 800084a:	785b      	ldrb	r3, [r3, #1]
 800084c:	4053      	eors	r3, r2
 800084e:	b2da      	uxtb	r2, r3
 8000850:	187b      	adds	r3, r7, r1
 8000852:	789b      	ldrb	r3, [r3, #2]
 8000854:	4053      	eors	r3, r2
 8000856:	b2da      	uxtb	r2, r3
 8000858:	187b      	adds	r3, r7, r1
 800085a:	78db      	ldrb	r3, [r3, #3]
 800085c:	4053      	eors	r3, r2
 800085e:	b2da      	uxtb	r2, r3
 8000860:	187b      	adds	r3, r7, r1
 8000862:	791b      	ldrb	r3, [r3, #4]
 8000864:	429a      	cmp	r2, r3
 8000866:	d000      	beq.n	800086a <cr95_read+0x246>
 8000868:	e098      	b.n	800099c <cr95_read+0x378>
				    	printf("UID CL2 =");
 800086a:	4b5e      	ldr	r3, [pc, #376]	; (80009e4 <cr95_read+0x3c0>)
 800086c:	0018      	movs	r0, r3
 800086e:	f004 fd33 	bl	80052d8 <iprintf>
				    	for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8000872:	2354      	movs	r3, #84	; 0x54
 8000874:	18fb      	adds	r3, r7, r3
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
 800087a:	e010      	b.n	800089e <cr95_read+0x27a>
 800087c:	2454      	movs	r4, #84	; 0x54
 800087e:	193b      	adds	r3, r7, r4
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2234      	movs	r2, #52	; 0x34
 8000884:	18ba      	adds	r2, r7, r2
 8000886:	5cd3      	ldrb	r3, [r2, r3]
 8000888:	001a      	movs	r2, r3
 800088a:	4b51      	ldr	r3, [pc, #324]	; (80009d0 <cr95_read+0x3ac>)
 800088c:	0011      	movs	r1, r2
 800088e:	0018      	movs	r0, r3
 8000890:	f004 fd22 	bl	80052d8 <iprintf>
 8000894:	193b      	adds	r3, r7, r4
 8000896:	781a      	ldrb	r2, [r3, #0]
 8000898:	193b      	adds	r3, r7, r4
 800089a:	3201      	adds	r2, #1
 800089c:	701a      	strb	r2, [r3, #0]
 800089e:	1dfb      	adds	r3, r7, #7
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2254      	movs	r2, #84	; 0x54
 80008a4:	18ba      	adds	r2, r7, r2
 80008a6:	7812      	ldrb	r2, [r2, #0]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d3e7      	bcc.n	800087c <cr95_read+0x258>
				    	printf("\n");
 80008ac:	200a      	movs	r0, #10
 80008ae:	f004 fd2d 	bl	800530c <putchar>
				    	sprintf(uid, "%s%X%X%X%X%X%X%X", uid, saved_data[5], saved_data[6], saved_data[7], data[0], data[1], data[2], data[3]);
 80008b2:	2128      	movs	r1, #40	; 0x28
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	795b      	ldrb	r3, [r3, #5]
 80008b8:	4699      	mov	r9, r3
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	799b      	ldrb	r3, [r3, #6]
 80008be:	001c      	movs	r4, r3
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	79db      	ldrb	r3, [r3, #7]
 80008c4:	001d      	movs	r5, r3
 80008c6:	2234      	movs	r2, #52	; 0x34
 80008c8:	18bb      	adds	r3, r7, r2
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	001e      	movs	r6, r3
 80008ce:	18bb      	adds	r3, r7, r2
 80008d0:	785b      	ldrb	r3, [r3, #1]
 80008d2:	469c      	mov	ip, r3
 80008d4:	18bb      	adds	r3, r7, r2
 80008d6:	789b      	ldrb	r3, [r3, #2]
 80008d8:	4698      	mov	r8, r3
 80008da:	18bb      	adds	r3, r7, r2
 80008dc:	78db      	ldrb	r3, [r3, #3]
 80008de:	2008      	movs	r0, #8
 80008e0:	183a      	adds	r2, r7, r0
 80008e2:	4941      	ldr	r1, [pc, #260]	; (80009e8 <cr95_read+0x3c4>)
 80008e4:	1838      	adds	r0, r7, r0
 80008e6:	9305      	str	r3, [sp, #20]
 80008e8:	4643      	mov	r3, r8
 80008ea:	9304      	str	r3, [sp, #16]
 80008ec:	4663      	mov	r3, ip
 80008ee:	9303      	str	r3, [sp, #12]
 80008f0:	9602      	str	r6, [sp, #8]
 80008f2:	9501      	str	r5, [sp, #4]
 80008f4:	9400      	str	r4, [sp, #0]
 80008f6:	464b      	mov	r3, r9
 80008f8:	f004 fd98 	bl	800542c <siprintf>
				    	saved_data[2] = 0x95; saved_data[4] = data[0]; saved_data[5] = data[1]; saved_data[6] = data[2]; saved_data[7] = data[3]; saved_data[8] = data[4];
 80008fc:	2128      	movs	r1, #40	; 0x28
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	2295      	movs	r2, #149	; 0x95
 8000902:	709a      	strb	r2, [r3, #2]
 8000904:	2434      	movs	r4, #52	; 0x34
 8000906:	193b      	adds	r3, r7, r4
 8000908:	781a      	ldrb	r2, [r3, #0]
 800090a:	187b      	adds	r3, r7, r1
 800090c:	711a      	strb	r2, [r3, #4]
 800090e:	193b      	adds	r3, r7, r4
 8000910:	785a      	ldrb	r2, [r3, #1]
 8000912:	187b      	adds	r3, r7, r1
 8000914:	715a      	strb	r2, [r3, #5]
 8000916:	193b      	adds	r3, r7, r4
 8000918:	789a      	ldrb	r2, [r3, #2]
 800091a:	187b      	adds	r3, r7, r1
 800091c:	719a      	strb	r2, [r3, #6]
 800091e:	193b      	adds	r3, r7, r4
 8000920:	78da      	ldrb	r2, [r3, #3]
 8000922:	187b      	adds	r3, r7, r1
 8000924:	71da      	strb	r2, [r3, #7]
 8000926:	193b      	adds	r3, r7, r4
 8000928:	791a      	ldrb	r2, [r3, #4]
 800092a:	187b      	adds	r3, r7, r1
 800092c:	721a      	strb	r2, [r3, #8]

				    	cr95write(saved_data, sizeof(saved_data));
 800092e:	187b      	adds	r3, r7, r1
 8000930:	210a      	movs	r1, #10
 8000932:	0018      	movs	r0, r3
 8000934:	f7ff fcb2 	bl	800029c <cr95write>
				    	if (cr95read(data, &len) == 0x80) {
 8000938:	1dfa      	adds	r2, r7, #7
 800093a:	193b      	adds	r3, r7, r4
 800093c:	0011      	movs	r1, r2
 800093e:	0018      	movs	r0, r3
 8000940:	f7ff fcc2 	bl	80002c8 <cr95read>
 8000944:	0003      	movs	r3, r0
 8000946:	2b80      	cmp	r3, #128	; 0x80
 8000948:	d000      	beq.n	800094c <cr95_read+0x328>
 800094a:	e0a4      	b.n	8000a96 <cr95_read+0x472>
				    		printf("SEL2 Response =");
 800094c:	4b27      	ldr	r3, [pc, #156]	; (80009ec <cr95_read+0x3c8>)
 800094e:	0018      	movs	r0, r3
 8000950:	f004 fcc2 	bl	80052d8 <iprintf>
				    		for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8000954:	2353      	movs	r3, #83	; 0x53
 8000956:	18fb      	adds	r3, r7, r3
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
 800095c:	e010      	b.n	8000980 <cr95_read+0x35c>
 800095e:	2453      	movs	r4, #83	; 0x53
 8000960:	193b      	adds	r3, r7, r4
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2234      	movs	r2, #52	; 0x34
 8000966:	18ba      	adds	r2, r7, r2
 8000968:	5cd3      	ldrb	r3, [r2, r3]
 800096a:	001a      	movs	r2, r3
 800096c:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <cr95_read+0x3ac>)
 800096e:	0011      	movs	r1, r2
 8000970:	0018      	movs	r0, r3
 8000972:	f004 fcb1 	bl	80052d8 <iprintf>
 8000976:	193b      	adds	r3, r7, r4
 8000978:	781a      	ldrb	r2, [r3, #0]
 800097a:	193b      	adds	r3, r7, r4
 800097c:	3201      	adds	r2, #1
 800097e:	701a      	strb	r2, [r3, #0]
 8000980:	1dfb      	adds	r3, r7, #7
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2253      	movs	r2, #83	; 0x53
 8000986:	18ba      	adds	r2, r7, r2
 8000988:	7812      	ldrb	r2, [r2, #0]
 800098a:	429a      	cmp	r2, r3
 800098c:	d3e7      	bcc.n	800095e <cr95_read+0x33a>
				    		printf("\n");
 800098e:	200a      	movs	r0, #10
 8000990:	f004 fcbc 	bl	800530c <putchar>
				    		disp_len=2;
 8000994:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <cr95_read+0x3cc>)
 8000996:	2202      	movs	r2, #2
 8000998:	701a      	strb	r2, [r3, #0]
				    	if (cr95read(data, &len) == 0x80) {
 800099a:	e07c      	b.n	8000a96 <cr95_read+0x472>
				    	}
				    } else {
				    	printf("UID CL2 error\n");
 800099c:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <cr95_read+0x3d0>)
 800099e:	0018      	movs	r0, r3
 80009a0:	f004 fd3a 	bl	8005418 <puts>
				    	disp_len=3;
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <cr95_read+0x3cc>)
 80009a6:	2203      	movs	r2, #3
 80009a8:	701a      	strb	r2, [r3, #0]
 80009aa:	e074      	b.n	8000a96 <cr95_read+0x472>
				    }
				} else {
					printf("SEL CL1 error\n");
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <cr95_read+0x3d4>)
 80009ae:	0018      	movs	r0, r3
 80009b0:	f004 fd32 	bl	8005418 <puts>
					disp_len=3;
 80009b4:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <cr95_read+0x3cc>)
 80009b6:	2203      	movs	r2, #3
 80009b8:	701a      	strb	r2, [r3, #0]
 80009ba:	e06c      	b.n	8000a96 <cr95_read+0x472>
 80009bc:	07260204 	.word	0x07260204
 80009c0:	08006b04 	.word	0x08006b04
 80009c4:	08006b0c 	.word	0x08006b0c
 80009c8:	08006b14 	.word	0x08006b14
 80009cc:	08006a04 	.word	0x08006a04
 80009d0:	08006a0c 	.word	0x08006a0c
 80009d4:	08006a14 	.word	0x08006a14
 80009d8:	08006a1c 	.word	0x08006a1c
 80009dc:	08006a28 	.word	0x08006a28
 80009e0:	08006a4c 	.word	0x08006a4c
 80009e4:	08006a5c 	.word	0x08006a5c
 80009e8:	08006a68 	.word	0x08006a68
 80009ec:	08006a7c 	.word	0x08006a7c
 80009f0:	20000544 	.word	0x20000544
 80009f4:	08006a8c 	.word	0x08006a8c
 80009f8:	08006a9c 	.word	0x08006a9c
				}
    		} else {
    			cr95write(saved_data, sizeof(saved_data));
 80009fc:	2328      	movs	r3, #40	; 0x28
 80009fe:	18fb      	adds	r3, r7, r3
 8000a00:	210a      	movs	r1, #10
 8000a02:	0018      	movs	r0, r3
 8000a04:	f7ff fc4a 	bl	800029c <cr95write>
    			if (cr95read(data, &len) == 0x80) {
 8000a08:	1dfa      	adds	r2, r7, #7
 8000a0a:	2334      	movs	r3, #52	; 0x34
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	0011      	movs	r1, r2
 8000a10:	0018      	movs	r0, r3
 8000a12:	f7ff fc59 	bl	80002c8 <cr95read>
 8000a16:	0003      	movs	r3, r0
 8000a18:	2b80      	cmp	r3, #128	; 0x80
 8000a1a:	d123      	bne.n	8000a64 <cr95_read+0x440>
    				printf("SEL1 Response =");
 8000a1c:	4b55      	ldr	r3, [pc, #340]	; (8000b74 <cr95_read+0x550>)
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f004 fc5a 	bl	80052d8 <iprintf>
    				for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8000a24:	2352      	movs	r3, #82	; 0x52
 8000a26:	18fb      	adds	r3, r7, r3
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
 8000a2c:	e010      	b.n	8000a50 <cr95_read+0x42c>
 8000a2e:	2452      	movs	r4, #82	; 0x52
 8000a30:	193b      	adds	r3, r7, r4
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2234      	movs	r2, #52	; 0x34
 8000a36:	18ba      	adds	r2, r7, r2
 8000a38:	5cd3      	ldrb	r3, [r2, r3]
 8000a3a:	001a      	movs	r2, r3
 8000a3c:	4b4e      	ldr	r3, [pc, #312]	; (8000b78 <cr95_read+0x554>)
 8000a3e:	0011      	movs	r1, r2
 8000a40:	0018      	movs	r0, r3
 8000a42:	f004 fc49 	bl	80052d8 <iprintf>
 8000a46:	193b      	adds	r3, r7, r4
 8000a48:	781a      	ldrb	r2, [r3, #0]
 8000a4a:	193b      	adds	r3, r7, r4
 8000a4c:	3201      	adds	r2, #1
 8000a4e:	701a      	strb	r2, [r3, #0]
 8000a50:	1dfb      	adds	r3, r7, #7
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2252      	movs	r2, #82	; 0x52
 8000a56:	18ba      	adds	r2, r7, r2
 8000a58:	7812      	ldrb	r2, [r2, #0]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d3e7      	bcc.n	8000a2e <cr95_read+0x40a>
    				printf("\n");
 8000a5e:	200a      	movs	r0, #10
 8000a60:	f004 fc54 	bl	800530c <putchar>
    			}
    			sprintf(uid, "%s%X%X%X%X", uid, saved_data[4], saved_data[5], saved_data[6], saved_data[7]);
 8000a64:	2228      	movs	r2, #40	; 0x28
 8000a66:	18bb      	adds	r3, r7, r2
 8000a68:	791b      	ldrb	r3, [r3, #4]
 8000a6a:	001e      	movs	r6, r3
 8000a6c:	18bb      	adds	r3, r7, r2
 8000a6e:	795b      	ldrb	r3, [r3, #5]
 8000a70:	001c      	movs	r4, r3
 8000a72:	18bb      	adds	r3, r7, r2
 8000a74:	799b      	ldrb	r3, [r3, #6]
 8000a76:	001d      	movs	r5, r3
 8000a78:	18bb      	adds	r3, r7, r2
 8000a7a:	79db      	ldrb	r3, [r3, #7]
 8000a7c:	2008      	movs	r0, #8
 8000a7e:	183a      	adds	r2, r7, r0
 8000a80:	493e      	ldr	r1, [pc, #248]	; (8000b7c <cr95_read+0x558>)
 8000a82:	1838      	adds	r0, r7, r0
 8000a84:	9302      	str	r3, [sp, #8]
 8000a86:	9501      	str	r5, [sp, #4]
 8000a88:	9400      	str	r4, [sp, #0]
 8000a8a:	0033      	movs	r3, r6
 8000a8c:	f004 fcce 	bl	800542c <siprintf>
    			disp_len=1;
 8000a90:	4b3b      	ldr	r3, [pc, #236]	; (8000b80 <cr95_read+0x55c>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	701a      	strb	r2, [r3, #0]
    		}
    		HAL_UART_Transmit(&huart2, (uint8_t*)(uid), strlen(uid), HAL_MAX_DELAY);
 8000a96:	2408      	movs	r4, #8
 8000a98:	193b      	adds	r3, r7, r4
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f7ff fb34 	bl	8000108 <strlen>
 8000aa0:	0003      	movs	r3, r0
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	425b      	negs	r3, r3
 8000aa8:	1939      	adds	r1, r7, r4
 8000aaa:	4836      	ldr	r0, [pc, #216]	; (8000b84 <cr95_read+0x560>)
 8000aac:	f003 fe40 	bl	8004730 <HAL_UART_Transmit>
    		printf("\n");
 8000ab0:	200a      	movs	r0, #10
 8000ab2:	f004 fc2b 	bl	800530c <putchar>
 8000ab6:	e00e      	b.n	8000ad6 <cr95_read+0x4b2>
    	} else {
    		printf("UID CL1 error\n");
 8000ab8:	4b33      	ldr	r3, [pc, #204]	; (8000b88 <cr95_read+0x564>)
 8000aba:	0018      	movs	r0, r3
 8000abc:	f004 fcac 	bl	8005418 <puts>
    		disp_len=3;
 8000ac0:	4b2f      	ldr	r3, [pc, #188]	; (8000b80 <cr95_read+0x55c>)
 8000ac2:	2203      	movs	r2, #3
 8000ac4:	701a      	strb	r2, [r3, #0]
 8000ac6:	e006      	b.n	8000ad6 <cr95_read+0x4b2>
    	}
	} else {
		printf("REQA error\n");
 8000ac8:	4b30      	ldr	r3, [pc, #192]	; (8000b8c <cr95_read+0x568>)
 8000aca:	0018      	movs	r0, r3
 8000acc:	f004 fca4 	bl	8005418 <puts>
		disp_len=3;
 8000ad0:	4b2b      	ldr	r3, [pc, #172]	; (8000b80 <cr95_read+0x55c>)
 8000ad2:	2203      	movs	r2, #3
 8000ad4:	701a      	strb	r2, [r3, #0]
	}
	SSD1306_Clear();
 8000ad6:	f001 fa65 	bl	8001fa4 <SSD1306_Clear>
	SSD1306_GotoXY (50, 10);
 8000ada:	210a      	movs	r1, #10
 8000adc:	2032      	movs	r0, #50	; 0x32
 8000ade:	f001 f9a1 	bl	8001e24 <SSD1306_GotoXY>
	SSD1306_Puts ("UID:", &Font_11x18, 1);
 8000ae2:	492b      	ldr	r1, [pc, #172]	; (8000b90 <cr95_read+0x56c>)
 8000ae4:	4b2b      	ldr	r3, [pc, #172]	; (8000b94 <cr95_read+0x570>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f001 fa35 	bl	8001f58 <SSD1306_Puts>
	SSD1306_GotoXY (5, 30);
 8000aee:	211e      	movs	r1, #30
 8000af0:	2005      	movs	r0, #5
 8000af2:	f001 f997 	bl	8001e24 <SSD1306_GotoXY>
	SSD1306_Puts (uid, &Font_7x10, 1);
 8000af6:	4928      	ldr	r1, [pc, #160]	; (8000b98 <cr95_read+0x574>)
 8000af8:	2308      	movs	r3, #8
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	2201      	movs	r2, #1
 8000afe:	0018      	movs	r0, r3
 8000b00:	f001 fa2a 	bl	8001f58 <SSD1306_Puts>
	if (disp_len == 1) {
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <cr95_read+0x55c>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d10a      	bne.n	8000b22 <cr95_read+0x4fe>
		SSD1306_GotoXY (5, 45);
 8000b0c:	212d      	movs	r1, #45	; 0x2d
 8000b0e:	2005      	movs	r0, #5
 8000b10:	f001 f988 	bl	8001e24 <SSD1306_GotoXY>
		SSD1306_Puts ("UID length: 4B", &Font_7x10, 1);
 8000b14:	4920      	ldr	r1, [pc, #128]	; (8000b98 <cr95_read+0x574>)
 8000b16:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <cr95_read+0x578>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f001 fa1c 	bl	8001f58 <SSD1306_Puts>
 8000b20:	e01e      	b.n	8000b60 <cr95_read+0x53c>
			}
	else if (disp_len == 2) {
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <cr95_read+0x55c>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b02      	cmp	r3, #2
 8000b28:	d10a      	bne.n	8000b40 <cr95_read+0x51c>
		SSD1306_GotoXY (5, 45);
 8000b2a:	212d      	movs	r1, #45	; 0x2d
 8000b2c:	2005      	movs	r0, #5
 8000b2e:	f001 f979 	bl	8001e24 <SSD1306_GotoXY>
		SSD1306_Puts ("UID length: 7B", &Font_7x10, 1);
 8000b32:	4919      	ldr	r1, [pc, #100]	; (8000b98 <cr95_read+0x574>)
 8000b34:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <cr95_read+0x57c>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f001 fa0d 	bl	8001f58 <SSD1306_Puts>
 8000b3e:	e00f      	b.n	8000b60 <cr95_read+0x53c>
	}
	else if (disp_len == 3) {
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <cr95_read+0x55c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b03      	cmp	r3, #3
 8000b46:	d10b      	bne.n	8000b60 <cr95_read+0x53c>
		SSD1306_Clear();
 8000b48:	f001 fa2c 	bl	8001fa4 <SSD1306_Clear>
		SSD1306_GotoXY (25, 19);
 8000b4c:	2113      	movs	r1, #19
 8000b4e:	2019      	movs	r0, #25
 8000b50:	f001 f968 	bl	8001e24 <SSD1306_GotoXY>
		SSD1306_Puts ("ERROR", &Font_16x26, 1);
 8000b54:	4913      	ldr	r1, [pc, #76]	; (8000ba4 <cr95_read+0x580>)
 8000b56:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <cr95_read+0x584>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f001 f9fc 	bl	8001f58 <SSD1306_Puts>
	}
	SSD1306_UpdateScreen(); // update screen
 8000b60:	f001 f8a4 	bl	8001cac <SSD1306_UpdateScreen>
}
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b017      	add	sp, #92	; 0x5c
 8000b6a:	bcc0      	pop	{r6, r7}
 8000b6c:	46b9      	mov	r9, r7
 8000b6e:	46b0      	mov	r8, r6
 8000b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	08006a4c 	.word	0x08006a4c
 8000b78:	08006a0c 	.word	0x08006a0c
 8000b7c:	08006aac 	.word	0x08006aac
 8000b80:	20000544 	.word	0x20000544
 8000b84:	200006e0 	.word	0x200006e0
 8000b88:	08006ab8 	.word	0x08006ab8
 8000b8c:	08006ac8 	.word	0x08006ac8
 8000b90:	2000000c 	.word	0x2000000c
 8000b94:	08006ad4 	.word	0x08006ad4
 8000b98:	20000004 	.word	0x20000004
 8000b9c:	08006adc 	.word	0x08006adc
 8000ba0:	08006aec 	.word	0x08006aec
 8000ba4:	20000014 	.word	0x20000014
 8000ba8:	08006afc 	.word	0x08006afc

08000bac <cr95_read15>:

static void cr95_read15(void)
{
 8000bac:	b590      	push	{r4, r7, lr}
 8000bae:	b093      	sub	sp, #76	; 0x4c
 8000bb0:	af00      	add	r7, sp, #0
	const uint8_t cmd_req15[] =  { 0x04, 0x03, 0x26, 0x01, 0x00 };
 8000bb2:	2040      	movs	r0, #64	; 0x40
 8000bb4:	183b      	adds	r3, r7, r0
 8000bb6:	4a31      	ldr	r2, [pc, #196]	; (8000c7c <cr95_read15+0xd0>)
 8000bb8:	6811      	ldr	r1, [r2, #0]
 8000bba:	6019      	str	r1, [r3, #0]
 8000bbc:	7912      	ldrb	r2, [r2, #4]
 8000bbe:	711a      	strb	r2, [r3, #4]
	uint8_t data[16];
	uint8_t len;
	uint8_t saved_data[8];
	char uid[32];

	cr95write(cmd_req15, sizeof(cmd_req15));
 8000bc0:	183b      	adds	r3, r7, r0
 8000bc2:	2105      	movs	r1, #5
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f7ff fb69 	bl	800029c <cr95write>
	if (cr95read(data, &len) == 0x80) {
 8000bca:	232f      	movs	r3, #47	; 0x2f
 8000bcc:	18fa      	adds	r2, r7, r3
 8000bce:	2430      	movs	r4, #48	; 0x30
 8000bd0:	193b      	adds	r3, r7, r4
 8000bd2:	0011      	movs	r1, r2
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f7ff fb77 	bl	80002c8 <cr95read>
 8000bda:	0003      	movs	r3, r0
 8000bdc:	2b80      	cmp	r3, #128	; 0x80
 8000bde:	d144      	bne.n	8000c6a <cr95_read15+0xbe>
		saved_data[0]=data[9]; saved_data[1]=data[8]; saved_data[2]=data[7];; saved_data[3]=data[6];
 8000be0:	0021      	movs	r1, r4
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	7a5a      	ldrb	r2, [r3, #9]
 8000be6:	2024      	movs	r0, #36	; 0x24
 8000be8:	183b      	adds	r3, r7, r0
 8000bea:	701a      	strb	r2, [r3, #0]
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	7a1a      	ldrb	r2, [r3, #8]
 8000bf0:	183b      	adds	r3, r7, r0
 8000bf2:	705a      	strb	r2, [r3, #1]
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	79da      	ldrb	r2, [r3, #7]
 8000bf8:	183b      	adds	r3, r7, r0
 8000bfa:	709a      	strb	r2, [r3, #2]
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	799a      	ldrb	r2, [r3, #6]
 8000c00:	183b      	adds	r3, r7, r0
 8000c02:	70da      	strb	r2, [r3, #3]
		saved_data[4]=data[5]; saved_data[5]=data[4]; saved_data[6]=data[3]; saved_data[7]=data[2];
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	795a      	ldrb	r2, [r3, #5]
 8000c08:	183b      	adds	r3, r7, r0
 8000c0a:	711a      	strb	r2, [r3, #4]
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	791a      	ldrb	r2, [r3, #4]
 8000c10:	183b      	adds	r3, r7, r0
 8000c12:	715a      	strb	r2, [r3, #5]
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	78da      	ldrb	r2, [r3, #3]
 8000c18:	183b      	adds	r3, r7, r0
 8000c1a:	719a      	strb	r2, [r3, #6]
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	789a      	ldrb	r2, [r3, #2]
 8000c20:	183b      	adds	r3, r7, r0
 8000c22:	71da      	strb	r2, [r3, #7]
		printf("UID = ");
 8000c24:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <cr95_read15+0xd4>)
 8000c26:	0018      	movs	r0, r3
 8000c28:	f004 fb56 	bl	80052d8 <iprintf>
		for (uint8_t i = 0; i < sizeof(saved_data); i++) printf(" %02X", saved_data[i]);
 8000c2c:	2347      	movs	r3, #71	; 0x47
 8000c2e:	18fb      	adds	r3, r7, r3
 8000c30:	2200      	movs	r2, #0
 8000c32:	701a      	strb	r2, [r3, #0]
 8000c34:	e010      	b.n	8000c58 <cr95_read15+0xac>
 8000c36:	2447      	movs	r4, #71	; 0x47
 8000c38:	193b      	adds	r3, r7, r4
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2224      	movs	r2, #36	; 0x24
 8000c3e:	18ba      	adds	r2, r7, r2
 8000c40:	5cd3      	ldrb	r3, [r2, r3]
 8000c42:	001a      	movs	r2, r3
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <cr95_read15+0xd8>)
 8000c46:	0011      	movs	r1, r2
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f004 fb45 	bl	80052d8 <iprintf>
 8000c4e:	193b      	adds	r3, r7, r4
 8000c50:	781a      	ldrb	r2, [r3, #0]
 8000c52:	193b      	adds	r3, r7, r4
 8000c54:	3201      	adds	r2, #1
 8000c56:	701a      	strb	r2, [r3, #0]
 8000c58:	2347      	movs	r3, #71	; 0x47
 8000c5a:	18fb      	adds	r3, r7, r3
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b07      	cmp	r3, #7
 8000c60:	d9e9      	bls.n	8000c36 <cr95_read15+0x8a>
		printf("\n");
 8000c62:	200a      	movs	r0, #10
 8000c64:	f004 fb52 	bl	800530c <putchar>
	} else {
		printf("Reading error\n");
	}

}
 8000c68:	e003      	b.n	8000c72 <cr95_read15+0xc6>
		printf("Reading error\n");
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <cr95_read15+0xdc>)
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f004 fbd3 	bl	8005418 <puts>
}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b013      	add	sp, #76	; 0x4c
 8000c78:	bd90      	pop	{r4, r7, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	08006b38 	.word	0x08006b38
 8000c80:	08006b20 	.word	0x08006b20
 8000c84:	08006a0c 	.word	0x08006a0c
 8000c88:	08006b28 	.word	0x08006b28

08000c8c <cr95_calibrate>:

static void cr95_calibrate(void)
{
 8000c8c:	b5b0      	push	{r4, r5, r7, lr}
 8000c8e:	b08a      	sub	sp, #40	; 0x28
 8000c90:	af00      	add	r7, sp, #0
	uint8_t cmd_cal[] =  	    { 0x07, 0x0E, 0x03, 0xA1, 0x00, 0xF8, 0x01, 0x18, 0x00, 0x20, 0x60, 0x60, 0x00, 0x00, 0x3F, 0x01 };
 8000c92:	2118      	movs	r1, #24
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	4ab6      	ldr	r2, [pc, #728]	; (8000f70 <cr95_calibrate+0x2e4>)
 8000c98:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000c9a:	c331      	stmia	r3!, {r0, r4, r5}
 8000c9c:	6812      	ldr	r2, [r2, #0]
 8000c9e:	601a      	str	r2, [r3, #0]

	uint8_t data[16];
	uint8_t len;

	cmd_cal[13] = 0x00;
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8000ca6:	000c      	movs	r4, r1
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	2110      	movs	r1, #16
 8000cac:	0018      	movs	r0, r3
 8000cae:	f7ff faf5 	bl	800029c <cr95write>
	printf("CAL #0 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8000cb2:	193b      	adds	r3, r7, r4
 8000cb4:	7b5b      	ldrb	r3, [r3, #13]
 8000cb6:	001c      	movs	r4, r3
 8000cb8:	1dfa      	adds	r2, r7, #7
 8000cba:	2308      	movs	r3, #8
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	0011      	movs	r1, r2
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f7ff fb01 	bl	80002c8 <cr95read>
 8000cc6:	1e03      	subs	r3, r0, #0
 8000cc8:	d101      	bne.n	8000cce <cr95_calibrate+0x42>
 8000cca:	2279      	movs	r2, #121	; 0x79
 8000ccc:	e000      	b.n	8000cd0 <cr95_calibrate+0x44>
 8000cce:	226e      	movs	r2, #110	; 0x6e
 8000cd0:	2508      	movs	r5, #8
 8000cd2:	197b      	adds	r3, r7, r5
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	48a7      	ldr	r0, [pc, #668]	; (8000f74 <cr95_calibrate+0x2e8>)
 8000cd8:	0021      	movs	r1, r4
 8000cda:	f004 fafd 	bl	80052d8 <iprintf>

	cmd_cal[13] = 0xFC;
 8000cde:	2118      	movs	r1, #24
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	22fc      	movs	r2, #252	; 0xfc
 8000ce4:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8000ce6:	000c      	movs	r4, r1
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	2110      	movs	r1, #16
 8000cec:	0018      	movs	r0, r3
 8000cee:	f7ff fad5 	bl	800029c <cr95write>
	printf("CAL #1 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8000cf2:	193b      	adds	r3, r7, r4
 8000cf4:	7b5b      	ldrb	r3, [r3, #13]
 8000cf6:	001c      	movs	r4, r3
 8000cf8:	1dfa      	adds	r2, r7, #7
 8000cfa:	197b      	adds	r3, r7, r5
 8000cfc:	0011      	movs	r1, r2
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f7ff fae2 	bl	80002c8 <cr95read>
 8000d04:	1e03      	subs	r3, r0, #0
 8000d06:	d101      	bne.n	8000d0c <cr95_calibrate+0x80>
 8000d08:	2279      	movs	r2, #121	; 0x79
 8000d0a:	e000      	b.n	8000d0e <cr95_calibrate+0x82>
 8000d0c:	226e      	movs	r2, #110	; 0x6e
 8000d0e:	2508      	movs	r5, #8
 8000d10:	197b      	adds	r3, r7, r5
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	4898      	ldr	r0, [pc, #608]	; (8000f78 <cr95_calibrate+0x2ec>)
 8000d16:	0021      	movs	r1, r4
 8000d18:	f004 fade 	bl	80052d8 <iprintf>

	cmd_cal[13] -= 0x80;
 8000d1c:	2118      	movs	r1, #24
 8000d1e:	187b      	adds	r3, r7, r1
 8000d20:	7b5b      	ldrb	r3, [r3, #13]
 8000d22:	3b80      	subs	r3, #128	; 0x80
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	187b      	adds	r3, r7, r1
 8000d28:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8000d2a:	000c      	movs	r4, r1
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	2110      	movs	r1, #16
 8000d30:	0018      	movs	r0, r3
 8000d32:	f7ff fab3 	bl	800029c <cr95write>
	printf("CAL #2 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8000d36:	193b      	adds	r3, r7, r4
 8000d38:	7b5b      	ldrb	r3, [r3, #13]
 8000d3a:	001c      	movs	r4, r3
 8000d3c:	1dfa      	adds	r2, r7, #7
 8000d3e:	197b      	adds	r3, r7, r5
 8000d40:	0011      	movs	r1, r2
 8000d42:	0018      	movs	r0, r3
 8000d44:	f7ff fac0 	bl	80002c8 <cr95read>
 8000d48:	1e03      	subs	r3, r0, #0
 8000d4a:	d101      	bne.n	8000d50 <cr95_calibrate+0xc4>
 8000d4c:	2279      	movs	r2, #121	; 0x79
 8000d4e:	e000      	b.n	8000d52 <cr95_calibrate+0xc6>
 8000d50:	226e      	movs	r2, #110	; 0x6e
 8000d52:	2508      	movs	r5, #8
 8000d54:	197b      	adds	r3, r7, r5
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4888      	ldr	r0, [pc, #544]	; (8000f7c <cr95_calibrate+0x2f0>)
 8000d5a:	0021      	movs	r1, r4
 8000d5c:	f004 fabc 	bl	80052d8 <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x40; else cmd_cal[13] += 0x40;
 8000d60:	197b      	adds	r3, r7, r5
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d107      	bne.n	8000d78 <cr95_calibrate+0xec>
 8000d68:	2118      	movs	r1, #24
 8000d6a:	187b      	adds	r3, r7, r1
 8000d6c:	7b5b      	ldrb	r3, [r3, #13]
 8000d6e:	3b40      	subs	r3, #64	; 0x40
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	187b      	adds	r3, r7, r1
 8000d74:	735a      	strb	r2, [r3, #13]
 8000d76:	e006      	b.n	8000d86 <cr95_calibrate+0xfa>
 8000d78:	2118      	movs	r1, #24
 8000d7a:	187b      	adds	r3, r7, r1
 8000d7c:	7b5b      	ldrb	r3, [r3, #13]
 8000d7e:	3340      	adds	r3, #64	; 0x40
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	187b      	adds	r3, r7, r1
 8000d84:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8000d86:	2418      	movs	r4, #24
 8000d88:	193b      	adds	r3, r7, r4
 8000d8a:	2110      	movs	r1, #16
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f7ff fa85 	bl	800029c <cr95write>
	printf("CAL #3 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8000d92:	193b      	adds	r3, r7, r4
 8000d94:	7b5b      	ldrb	r3, [r3, #13]
 8000d96:	001c      	movs	r4, r3
 8000d98:	1dfa      	adds	r2, r7, #7
 8000d9a:	2308      	movs	r3, #8
 8000d9c:	18fb      	adds	r3, r7, r3
 8000d9e:	0011      	movs	r1, r2
 8000da0:	0018      	movs	r0, r3
 8000da2:	f7ff fa91 	bl	80002c8 <cr95read>
 8000da6:	1e03      	subs	r3, r0, #0
 8000da8:	d101      	bne.n	8000dae <cr95_calibrate+0x122>
 8000daa:	2279      	movs	r2, #121	; 0x79
 8000dac:	e000      	b.n	8000db0 <cr95_calibrate+0x124>
 8000dae:	226e      	movs	r2, #110	; 0x6e
 8000db0:	2508      	movs	r5, #8
 8000db2:	197b      	adds	r3, r7, r5
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	4872      	ldr	r0, [pc, #456]	; (8000f80 <cr95_calibrate+0x2f4>)
 8000db8:	0021      	movs	r1, r4
 8000dba:	f004 fa8d 	bl	80052d8 <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x20; else cmd_cal[13] += 0x20;
 8000dbe:	197b      	adds	r3, r7, r5
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d107      	bne.n	8000dd6 <cr95_calibrate+0x14a>
 8000dc6:	2118      	movs	r1, #24
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	7b5b      	ldrb	r3, [r3, #13]
 8000dcc:	3b20      	subs	r3, #32
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	187b      	adds	r3, r7, r1
 8000dd2:	735a      	strb	r2, [r3, #13]
 8000dd4:	e006      	b.n	8000de4 <cr95_calibrate+0x158>
 8000dd6:	2118      	movs	r1, #24
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	7b5b      	ldrb	r3, [r3, #13]
 8000ddc:	3320      	adds	r3, #32
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8000de4:	2418      	movs	r4, #24
 8000de6:	193b      	adds	r3, r7, r4
 8000de8:	2110      	movs	r1, #16
 8000dea:	0018      	movs	r0, r3
 8000dec:	f7ff fa56 	bl	800029c <cr95write>
	printf("CAL #4 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8000df0:	193b      	adds	r3, r7, r4
 8000df2:	7b5b      	ldrb	r3, [r3, #13]
 8000df4:	001c      	movs	r4, r3
 8000df6:	1dfa      	adds	r2, r7, #7
 8000df8:	2308      	movs	r3, #8
 8000dfa:	18fb      	adds	r3, r7, r3
 8000dfc:	0011      	movs	r1, r2
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f7ff fa62 	bl	80002c8 <cr95read>
 8000e04:	1e03      	subs	r3, r0, #0
 8000e06:	d101      	bne.n	8000e0c <cr95_calibrate+0x180>
 8000e08:	2279      	movs	r2, #121	; 0x79
 8000e0a:	e000      	b.n	8000e0e <cr95_calibrate+0x182>
 8000e0c:	226e      	movs	r2, #110	; 0x6e
 8000e0e:	2508      	movs	r5, #8
 8000e10:	197b      	adds	r3, r7, r5
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	485b      	ldr	r0, [pc, #364]	; (8000f84 <cr95_calibrate+0x2f8>)
 8000e16:	0021      	movs	r1, r4
 8000e18:	f004 fa5e 	bl	80052d8 <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x10; else cmd_cal[13] += 0x10;
 8000e1c:	197b      	adds	r3, r7, r5
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d107      	bne.n	8000e34 <cr95_calibrate+0x1a8>
 8000e24:	2118      	movs	r1, #24
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	7b5b      	ldrb	r3, [r3, #13]
 8000e2a:	3b10      	subs	r3, #16
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	735a      	strb	r2, [r3, #13]
 8000e32:	e006      	b.n	8000e42 <cr95_calibrate+0x1b6>
 8000e34:	2118      	movs	r1, #24
 8000e36:	187b      	adds	r3, r7, r1
 8000e38:	7b5b      	ldrb	r3, [r3, #13]
 8000e3a:	3310      	adds	r3, #16
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8000e42:	2418      	movs	r4, #24
 8000e44:	193b      	adds	r3, r7, r4
 8000e46:	2110      	movs	r1, #16
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f7ff fa27 	bl	800029c <cr95write>
	printf("CAL #5 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8000e4e:	193b      	adds	r3, r7, r4
 8000e50:	7b5b      	ldrb	r3, [r3, #13]
 8000e52:	001c      	movs	r4, r3
 8000e54:	1dfa      	adds	r2, r7, #7
 8000e56:	2308      	movs	r3, #8
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	0011      	movs	r1, r2
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f7ff fa33 	bl	80002c8 <cr95read>
 8000e62:	1e03      	subs	r3, r0, #0
 8000e64:	d101      	bne.n	8000e6a <cr95_calibrate+0x1de>
 8000e66:	2279      	movs	r2, #121	; 0x79
 8000e68:	e000      	b.n	8000e6c <cr95_calibrate+0x1e0>
 8000e6a:	226e      	movs	r2, #110	; 0x6e
 8000e6c:	2508      	movs	r5, #8
 8000e6e:	197b      	adds	r3, r7, r5
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	4845      	ldr	r0, [pc, #276]	; (8000f88 <cr95_calibrate+0x2fc>)
 8000e74:	0021      	movs	r1, r4
 8000e76:	f004 fa2f 	bl	80052d8 <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x08; else cmd_cal[13] += 0x08;
 8000e7a:	197b      	adds	r3, r7, r5
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d107      	bne.n	8000e92 <cr95_calibrate+0x206>
 8000e82:	2118      	movs	r1, #24
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	7b5b      	ldrb	r3, [r3, #13]
 8000e88:	3b08      	subs	r3, #8
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	735a      	strb	r2, [r3, #13]
 8000e90:	e006      	b.n	8000ea0 <cr95_calibrate+0x214>
 8000e92:	2118      	movs	r1, #24
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	7b5b      	ldrb	r3, [r3, #13]
 8000e98:	3308      	adds	r3, #8
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8000ea0:	2418      	movs	r4, #24
 8000ea2:	193b      	adds	r3, r7, r4
 8000ea4:	2110      	movs	r1, #16
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f7ff f9f8 	bl	800029c <cr95write>
	printf("CAL #6 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8000eac:	193b      	adds	r3, r7, r4
 8000eae:	7b5b      	ldrb	r3, [r3, #13]
 8000eb0:	001c      	movs	r4, r3
 8000eb2:	1dfa      	adds	r2, r7, #7
 8000eb4:	2308      	movs	r3, #8
 8000eb6:	18fb      	adds	r3, r7, r3
 8000eb8:	0011      	movs	r1, r2
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f7ff fa04 	bl	80002c8 <cr95read>
 8000ec0:	1e03      	subs	r3, r0, #0
 8000ec2:	d101      	bne.n	8000ec8 <cr95_calibrate+0x23c>
 8000ec4:	2279      	movs	r2, #121	; 0x79
 8000ec6:	e000      	b.n	8000eca <cr95_calibrate+0x23e>
 8000ec8:	226e      	movs	r2, #110	; 0x6e
 8000eca:	2508      	movs	r5, #8
 8000ecc:	197b      	adds	r3, r7, r5
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	482e      	ldr	r0, [pc, #184]	; (8000f8c <cr95_calibrate+0x300>)
 8000ed2:	0021      	movs	r1, r4
 8000ed4:	f004 fa00 	bl	80052d8 <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x04; else cmd_cal[13] += 0x04;
 8000ed8:	197b      	adds	r3, r7, r5
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d107      	bne.n	8000ef0 <cr95_calibrate+0x264>
 8000ee0:	2118      	movs	r1, #24
 8000ee2:	187b      	adds	r3, r7, r1
 8000ee4:	7b5b      	ldrb	r3, [r3, #13]
 8000ee6:	3b04      	subs	r3, #4
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	187b      	adds	r3, r7, r1
 8000eec:	735a      	strb	r2, [r3, #13]
 8000eee:	e006      	b.n	8000efe <cr95_calibrate+0x272>
 8000ef0:	2118      	movs	r1, #24
 8000ef2:	187b      	adds	r3, r7, r1
 8000ef4:	7b5b      	ldrb	r3, [r3, #13]
 8000ef6:	3304      	adds	r3, #4
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	187b      	adds	r3, r7, r1
 8000efc:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8000efe:	2418      	movs	r4, #24
 8000f00:	193b      	adds	r3, r7, r4
 8000f02:	2110      	movs	r1, #16
 8000f04:	0018      	movs	r0, r3
 8000f06:	f7ff f9c9 	bl	800029c <cr95write>
	printf("CAL #7 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8000f0a:	193b      	adds	r3, r7, r4
 8000f0c:	7b5b      	ldrb	r3, [r3, #13]
 8000f0e:	001c      	movs	r4, r3
 8000f10:	1dfa      	adds	r2, r7, #7
 8000f12:	2308      	movs	r3, #8
 8000f14:	18fb      	adds	r3, r7, r3
 8000f16:	0011      	movs	r1, r2
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f7ff f9d5 	bl	80002c8 <cr95read>
 8000f1e:	1e03      	subs	r3, r0, #0
 8000f20:	d101      	bne.n	8000f26 <cr95_calibrate+0x29a>
 8000f22:	2279      	movs	r2, #121	; 0x79
 8000f24:	e000      	b.n	8000f28 <cr95_calibrate+0x29c>
 8000f26:	226e      	movs	r2, #110	; 0x6e
 8000f28:	2508      	movs	r5, #8
 8000f2a:	197b      	adds	r3, r7, r5
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	4818      	ldr	r0, [pc, #96]	; (8000f90 <cr95_calibrate+0x304>)
 8000f30:	0021      	movs	r1, r4
 8000f32:	f004 f9d1 	bl	80052d8 <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x04;
 8000f36:	197b      	adds	r3, r7, r5
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d106      	bne.n	8000f4c <cr95_calibrate+0x2c0>
 8000f3e:	2118      	movs	r1, #24
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	7b5b      	ldrb	r3, [r3, #13]
 8000f44:	3b04      	subs	r3, #4
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	187b      	adds	r3, r7, r1
 8000f4a:	735a      	strb	r2, [r3, #13]
	DacDataRef = cmd_cal[13];
 8000f4c:	2318      	movs	r3, #24
 8000f4e:	18fb      	adds	r3, r7, r3
 8000f50:	7b5a      	ldrb	r2, [r3, #13]
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <cr95_calibrate+0x308>)
 8000f54:	701a      	strb	r2, [r3, #0]
	printf("CAL finished, DacDataRef=0x%02x\n", DacDataRef);
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <cr95_calibrate+0x308>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	001a      	movs	r2, r3
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <cr95_calibrate+0x30c>)
 8000f5e:	0011      	movs	r1, r2
 8000f60:	0018      	movs	r0, r3
 8000f62:	f004 f9b9 	bl	80052d8 <iprintf>
}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b00a      	add	sp, #40	; 0x28
 8000f6c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	08006c84 	.word	0x08006c84
 8000f74:	08006b40 	.word	0x08006b40
 8000f78:	08006b64 	.word	0x08006b64
 8000f7c:	08006b88 	.word	0x08006b88
 8000f80:	08006bac 	.word	0x08006bac
 8000f84:	08006bd0 	.word	0x08006bd0
 8000f88:	08006bf4 	.word	0x08006bf4
 8000f8c:	08006c18 	.word	0x08006c18
 8000f90:	08006c3c 	.word	0x08006c3c
 8000f94:	200000ad 	.word	0x200000ad
 8000f98:	08006c60 	.word	0x08006c60

08000f9c <uart_process_command>:

static void uart_process_command(char *cmd)
{
 8000f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f9e:	b093      	sub	sp, #76	; 0x4c
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
    char *token;
    token = strtok(cmd, " ");
 8000fa4:	4ad2      	ldr	r2, [pc, #840]	; (80012f0 <uart_process_command+0x354>)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	0011      	movs	r1, r2
 8000faa:	0018      	movs	r0, r3
 8000fac:	f004 fa78 	bl	80054a0 <strtok>
 8000fb0:	0003      	movs	r3, r0
 8000fb2:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t data[16];
	uint8_t len;

	const uint8_t cmd_echo[] =  { 0x55 };
 8000fb4:	2328      	movs	r3, #40	; 0x28
 8000fb6:	18fb      	adds	r3, r7, r3
 8000fb8:	4ace      	ldr	r2, [pc, #824]	; (80012f4 <uart_process_command+0x358>)
 8000fba:	7812      	ldrb	r2, [r2, #0]
 8000fbc:	701a      	strb	r2, [r3, #0]
	const uint8_t cmd_idn[] =   { 0x01, 0x00 };
 8000fbe:	2324      	movs	r3, #36	; 0x24
 8000fc0:	18fb      	adds	r3, r7, r3
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	801a      	strh	r2, [r3, #0]

    if (strcasecmp(token, "HELLO") == 0) {
 8000fc6:	4acc      	ldr	r2, [pc, #816]	; (80012f8 <uart_process_command+0x35c>)
 8000fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000fca:	0011      	movs	r1, r2
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f004 fa4d 	bl	800546c <strcasecmp>
 8000fd2:	1e03      	subs	r3, r0, #0
 8000fd4:	d104      	bne.n	8000fe0 <uart_process_command+0x44>
        printf("Communication is working\n");
 8000fd6:	4bc9      	ldr	r3, [pc, #804]	; (80012fc <uart_process_command+0x360>)
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f004 fa1d 	bl	8005418 <puts>
    	} while (uart_rx_read_ptr == uart_rx_write_ptr);
    }
    else {
        printf("Unknown command\n");
    }
}
 8000fde:	e2af      	b.n	8001540 <uart_process_command+0x5a4>
    else if (strcasecmp(token, "ON") == 0) {
 8000fe0:	4ac7      	ldr	r2, [pc, #796]	; (8001300 <uart_process_command+0x364>)
 8000fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000fe4:	0011      	movs	r1, r2
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f004 fa40 	bl	800546c <strcasecmp>
 8000fec:	1e03      	subs	r3, r0, #0
 8000fee:	d13b      	bne.n	8001068 <uart_process_command+0xcc>
    	nfc_init();
 8000ff0:	f000 fb8e 	bl	8001710 <nfc_init>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	0059      	lsls	r1, r3, #1
 8000ff8:	2390      	movs	r3, #144	; 0x90
 8000ffa:	05db      	lsls	r3, r3, #23
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	0018      	movs	r0, r3
 8001000:	f002 f8e8 	bl	80031d4 <HAL_GPIO_WritePin>
        HAL_UART_Receive_DMA(&huart1, nfc_rx_buf, RX_BUFFER_LEN);
 8001004:	49bf      	ldr	r1, [pc, #764]	; (8001304 <uart_process_command+0x368>)
 8001006:	4bc0      	ldr	r3, [pc, #768]	; (8001308 <uart_process_command+0x36c>)
 8001008:	2240      	movs	r2, #64	; 0x40
 800100a:	0018      	movs	r0, r3
 800100c:	f003 fc39 	bl	8004882 <HAL_UART_Receive_DMA>
    	HAL_Delay(5);
 8001010:	2005      	movs	r0, #5
 8001012:	f001 fb79 	bl	8002708 <HAL_Delay>
    	printf("RFID ON\n");
 8001016:	4bbd      	ldr	r3, [pc, #756]	; (800130c <uart_process_command+0x370>)
 8001018:	0018      	movs	r0, r3
 800101a:	f004 f9fd 	bl	8005418 <puts>
        nfc_rx_read_ptr = nfc_rx_write_ptr;
 800101e:	4bbc      	ldr	r3, [pc, #752]	; (8001310 <uart_process_command+0x374>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	b29b      	uxth	r3, r3
 8001026:	2240      	movs	r2, #64	; 0x40
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	b29a      	uxth	r2, r3
 800102c:	4bb9      	ldr	r3, [pc, #740]	; (8001314 <uart_process_command+0x378>)
 800102e:	801a      	strh	r2, [r3, #0]
    	cr95_wakeup();
 8001030:	f7ff fa02 	bl	8000438 <cr95_wakeup>
    	nfc_ready = true;
 8001034:	4bb8      	ldr	r3, [pc, #736]	; (8001318 <uart_process_command+0x37c>)
 8001036:	2201      	movs	r2, #1
 8001038:	701a      	strb	r2, [r3, #0]
    	SSD1306_GotoXY (45,10);
 800103a:	210a      	movs	r1, #10
 800103c:	202d      	movs	r0, #45	; 0x2d
 800103e:	f000 fef1 	bl	8001e24 <SSD1306_GotoXY>
    	SSD1306_Puts ("RFID", &Font_11x18, 1);
 8001042:	49b6      	ldr	r1, [pc, #728]	; (800131c <uart_process_command+0x380>)
 8001044:	4bb6      	ldr	r3, [pc, #728]	; (8001320 <uart_process_command+0x384>)
 8001046:	2201      	movs	r2, #1
 8001048:	0018      	movs	r0, r3
 800104a:	f000 ff85 	bl	8001f58 <SSD1306_Puts>
    	SSD1306_GotoXY (30, 30);
 800104e:	211e      	movs	r1, #30
 8001050:	201e      	movs	r0, #30
 8001052:	f000 fee7 	bl	8001e24 <SSD1306_GotoXY>
    	SSD1306_Puts ("SCANNER", &Font_11x18, 1);
 8001056:	49b1      	ldr	r1, [pc, #708]	; (800131c <uart_process_command+0x380>)
 8001058:	4bb2      	ldr	r3, [pc, #712]	; (8001324 <uart_process_command+0x388>)
 800105a:	2201      	movs	r2, #1
 800105c:	0018      	movs	r0, r3
 800105e:	f000 ff7b 	bl	8001f58 <SSD1306_Puts>
    	SSD1306_UpdateScreen(); // update screen
 8001062:	f000 fe23 	bl	8001cac <SSD1306_UpdateScreen>
}
 8001066:	e26b      	b.n	8001540 <uart_process_command+0x5a4>
    else if (strcasecmp(token, "OFF") == 0) {
 8001068:	4aaf      	ldr	r2, [pc, #700]	; (8001328 <uart_process_command+0x38c>)
 800106a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800106c:	0011      	movs	r1, r2
 800106e:	0018      	movs	r0, r3
 8001070:	f004 f9fc 	bl	800546c <strcasecmp>
 8001074:	1e03      	subs	r3, r0, #0
 8001076:	d126      	bne.n	80010c6 <uart_process_command+0x12a>
    	nfc_ready = false;
 8001078:	4ba7      	ldr	r3, [pc, #668]	; (8001318 <uart_process_command+0x37c>)
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
        HAL_UART_AbortReceive(&huart1);
 800107e:	4ba2      	ldr	r3, [pc, #648]	; (8001308 <uart_process_command+0x36c>)
 8001080:	0018      	movs	r0, r3
 8001082:	f003 fc4f 	bl	8004924 <HAL_UART_AbortReceive>
    	HAL_UART_DeInit(&huart1);
 8001086:	4ba0      	ldr	r3, [pc, #640]	; (8001308 <uart_process_command+0x36c>)
 8001088:	0018      	movs	r0, r3
 800108a:	f003 fb17 	bl	80046bc <HAL_UART_DeInit>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800108e:	2380      	movs	r3, #128	; 0x80
 8001090:	0059      	lsls	r1, r3, #1
 8001092:	2390      	movs	r3, #144	; 0x90
 8001094:	05db      	lsls	r3, r3, #23
 8001096:	2200      	movs	r2, #0
 8001098:	0018      	movs	r0, r3
 800109a:	f002 f89b 	bl	80031d4 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800109e:	2380      	movs	r3, #128	; 0x80
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	48a2      	ldr	r0, [pc, #648]	; (800132c <uart_process_command+0x390>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	0019      	movs	r1, r3
 80010a8:	f002 f894 	bl	80031d4 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80010ac:	4b9f      	ldr	r3, [pc, #636]	; (800132c <uart_process_command+0x390>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	2110      	movs	r1, #16
 80010b2:	0018      	movs	r0, r3
 80010b4:	f002 f88e 	bl	80031d4 <HAL_GPIO_WritePin>
    	SSD1306_Clear();
 80010b8:	f000 ff74 	bl	8001fa4 <SSD1306_Clear>
    	printf("RFID OFF\n");
 80010bc:	4b9c      	ldr	r3, [pc, #624]	; (8001330 <uart_process_command+0x394>)
 80010be:	0018      	movs	r0, r3
 80010c0:	f004 f9aa 	bl	8005418 <puts>
}
 80010c4:	e23c      	b.n	8001540 <uart_process_command+0x5a4>
    else if (strcasecmp(token, "ECHO") == 0) {
 80010c6:	4a9b      	ldr	r2, [pc, #620]	; (8001334 <uart_process_command+0x398>)
 80010c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010ca:	0011      	movs	r1, r2
 80010cc:	0018      	movs	r0, r3
 80010ce:	f004 f9cd 	bl	800546c <strcasecmp>
 80010d2:	1e03      	subs	r3, r0, #0
 80010d4:	d13b      	bne.n	800114e <uart_process_command+0x1b2>
    	cr95write(cmd_echo, sizeof(cmd_echo));
 80010d6:	2328      	movs	r3, #40	; 0x28
 80010d8:	18fb      	adds	r3, r7, r3
 80010da:	2101      	movs	r1, #1
 80010dc:	0018      	movs	r0, r3
 80010de:	f7ff f8dd 	bl	800029c <cr95write>
    	uint8_t resp = cr95read(NULL, NULL);
 80010e2:	253d      	movs	r5, #61	; 0x3d
 80010e4:	197c      	adds	r4, r7, r5
 80010e6:	2100      	movs	r1, #0
 80010e8:	2000      	movs	r0, #0
 80010ea:	f7ff f8ed 	bl	80002c8 <cr95read>
 80010ee:	0003      	movs	r3, r0
 80010f0:	7023      	strb	r3, [r4, #0]
    	printf("ECHO %s %02X\n", (resp == 0x55) ? "yes" : "no", resp);
 80010f2:	197b      	adds	r3, r7, r5
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b55      	cmp	r3, #85	; 0x55
 80010f8:	d101      	bne.n	80010fe <uart_process_command+0x162>
 80010fa:	4b8f      	ldr	r3, [pc, #572]	; (8001338 <uart_process_command+0x39c>)
 80010fc:	e000      	b.n	8001100 <uart_process_command+0x164>
 80010fe:	4b8f      	ldr	r3, [pc, #572]	; (800133c <uart_process_command+0x3a0>)
 8001100:	223d      	movs	r2, #61	; 0x3d
 8001102:	18ba      	adds	r2, r7, r2
 8001104:	7812      	ldrb	r2, [r2, #0]
 8001106:	488e      	ldr	r0, [pc, #568]	; (8001340 <uart_process_command+0x3a4>)
 8001108:	0019      	movs	r1, r3
 800110a:	f004 f8e5 	bl	80052d8 <iprintf>
    	SSD1306_Clear();
 800110e:	f000 ff49 	bl	8001fa4 <SSD1306_Clear>
    	SSD1306_GotoXY (40,10);
 8001112:	210a      	movs	r1, #10
 8001114:	2028      	movs	r0, #40	; 0x28
 8001116:	f000 fe85 	bl	8001e24 <SSD1306_GotoXY>
    	SSD1306_Puts ("ECHO", &Font_11x18, 1);
 800111a:	4980      	ldr	r1, [pc, #512]	; (800131c <uart_process_command+0x380>)
 800111c:	4b85      	ldr	r3, [pc, #532]	; (8001334 <uart_process_command+0x398>)
 800111e:	2201      	movs	r2, #1
 8001120:	0018      	movs	r0, r3
 8001122:	f000 ff19 	bl	8001f58 <SSD1306_Puts>
    	SSD1306_GotoXY (25, 30);
 8001126:	211e      	movs	r1, #30
 8001128:	2019      	movs	r0, #25
 800112a:	f000 fe7b 	bl	8001e24 <SSD1306_GotoXY>
    	SSD1306_Puts ("COMMAND", &Font_11x18, 1);
 800112e:	497b      	ldr	r1, [pc, #492]	; (800131c <uart_process_command+0x380>)
 8001130:	4b84      	ldr	r3, [pc, #528]	; (8001344 <uart_process_command+0x3a8>)
 8001132:	2201      	movs	r2, #1
 8001134:	0018      	movs	r0, r3
 8001136:	f000 ff0f 	bl	8001f58 <SSD1306_Puts>
    	SSD1306_UpdateScreen(); // update screen
 800113a:	f000 fdb7 	bl	8001cac <SSD1306_UpdateScreen>
    	HAL_Delay(1000);
 800113e:	23fa      	movs	r3, #250	; 0xfa
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	0018      	movs	r0, r3
 8001144:	f001 fae0 	bl	8002708 <HAL_Delay>
    	SSD1306_Clear();
 8001148:	f000 ff2c 	bl	8001fa4 <SSD1306_Clear>
}
 800114c:	e1f8      	b.n	8001540 <uart_process_command+0x5a4>
    else if (strcasecmp(token, "IDN") == 0) {
 800114e:	4a7e      	ldr	r2, [pc, #504]	; (8001348 <uart_process_command+0x3ac>)
 8001150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001152:	0011      	movs	r1, r2
 8001154:	0018      	movs	r0, r3
 8001156:	f004 f989 	bl	800546c <strcasecmp>
 800115a:	1e03      	subs	r3, r0, #0
 800115c:	d15c      	bne.n	8001218 <uart_process_command+0x27c>
    	cr95write(cmd_idn, sizeof(cmd_idn));
 800115e:	2324      	movs	r3, #36	; 0x24
 8001160:	18fb      	adds	r3, r7, r3
 8001162:	2102      	movs	r1, #2
 8001164:	0018      	movs	r0, r3
 8001166:	f7ff f899 	bl	800029c <cr95write>
    	if (cr95read(data, &len) == 0x00) {
 800116a:	232b      	movs	r3, #43	; 0x2b
 800116c:	18fa      	adds	r2, r7, r3
 800116e:	232c      	movs	r3, #44	; 0x2c
 8001170:	18fb      	adds	r3, r7, r3
 8001172:	0011      	movs	r1, r2
 8001174:	0018      	movs	r0, r3
 8001176:	f7ff f8a7 	bl	80002c8 <cr95read>
 800117a:	1e03      	subs	r3, r0, #0
 800117c:	d147      	bne.n	800120e <uart_process_command+0x272>
    		printf("IDN =");
 800117e:	4b73      	ldr	r3, [pc, #460]	; (800134c <uart_process_command+0x3b0>)
 8001180:	0018      	movs	r0, r3
 8001182:	f004 f8a9 	bl	80052d8 <iprintf>
    		for (uint8_t i = 0; i < len; i++)
 8001186:	2347      	movs	r3, #71	; 0x47
 8001188:	18fb      	adds	r3, r7, r3
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
 800118e:	e019      	b.n	80011c4 <uart_process_command+0x228>
    			idn[i]=data[i];
 8001190:	2447      	movs	r4, #71	; 0x47
 8001192:	193b      	adds	r3, r7, r4
 8001194:	781a      	ldrb	r2, [r3, #0]
 8001196:	193b      	adds	r3, r7, r4
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	202c      	movs	r0, #44	; 0x2c
 800119c:	1839      	adds	r1, r7, r0
 800119e:	5c89      	ldrb	r1, [r1, r2]
 80011a0:	2208      	movs	r2, #8
 80011a2:	18ba      	adds	r2, r7, r2
 80011a4:	54d1      	strb	r1, [r2, r3]
    			printf(" %02X", data[i]);
 80011a6:	193b      	adds	r3, r7, r4
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	183a      	adds	r2, r7, r0
 80011ac:	5cd3      	ldrb	r3, [r2, r3]
 80011ae:	001a      	movs	r2, r3
 80011b0:	4b67      	ldr	r3, [pc, #412]	; (8001350 <uart_process_command+0x3b4>)
 80011b2:	0011      	movs	r1, r2
 80011b4:	0018      	movs	r0, r3
 80011b6:	f004 f88f 	bl	80052d8 <iprintf>
    		for (uint8_t i = 0; i < len; i++)
 80011ba:	193b      	adds	r3, r7, r4
 80011bc:	781a      	ldrb	r2, [r3, #0]
 80011be:	193b      	adds	r3, r7, r4
 80011c0:	3201      	adds	r2, #1
 80011c2:	701a      	strb	r2, [r3, #0]
 80011c4:	232b      	movs	r3, #43	; 0x2b
 80011c6:	18fb      	adds	r3, r7, r3
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2247      	movs	r2, #71	; 0x47
 80011cc:	18ba      	adds	r2, r7, r2
 80011ce:	7812      	ldrb	r2, [r2, #0]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d3dd      	bcc.n	8001190 <uart_process_command+0x1f4>
    		SSD1306_Clear();
 80011d4:	f000 fee6 	bl	8001fa4 <SSD1306_Clear>
    		SSD1306_GotoXY (50, 10);
 80011d8:	210a      	movs	r1, #10
 80011da:	2032      	movs	r0, #50	; 0x32
 80011dc:	f000 fe22 	bl	8001e24 <SSD1306_GotoXY>
    		SSD1306_Puts ("IDN:", &Font_11x18, 1);
 80011e0:	494e      	ldr	r1, [pc, #312]	; (800131c <uart_process_command+0x380>)
 80011e2:	4b5c      	ldr	r3, [pc, #368]	; (8001354 <uart_process_command+0x3b8>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	0018      	movs	r0, r3
 80011e8:	f000 feb6 	bl	8001f58 <SSD1306_Puts>
    		SSD1306_GotoXY (20, 30);
 80011ec:	211e      	movs	r1, #30
 80011ee:	2014      	movs	r0, #20
 80011f0:	f000 fe18 	bl	8001e24 <SSD1306_GotoXY>
    		SSD1306_Puts (idn, &Font_7x10, 1);
 80011f4:	4958      	ldr	r1, [pc, #352]	; (8001358 <uart_process_command+0x3bc>)
 80011f6:	2308      	movs	r3, #8
 80011f8:	18fb      	adds	r3, r7, r3
 80011fa:	2201      	movs	r2, #1
 80011fc:	0018      	movs	r0, r3
 80011fe:	f000 feab 	bl	8001f58 <SSD1306_Puts>
    		SSD1306_UpdateScreen(); // update screen
 8001202:	f000 fd53 	bl	8001cac <SSD1306_UpdateScreen>
    		printf("\n");
 8001206:	200a      	movs	r0, #10
 8001208:	f004 f880 	bl	800530c <putchar>
}
 800120c:	e198      	b.n	8001540 <uart_process_command+0x5a4>
    		printf("IDN error\n");
 800120e:	4b53      	ldr	r3, [pc, #332]	; (800135c <uart_process_command+0x3c0>)
 8001210:	0018      	movs	r0, r3
 8001212:	f004 f901 	bl	8005418 <puts>
}
 8001216:	e193      	b.n	8001540 <uart_process_command+0x5a4>
    else if (strcasecmp(token, "INIT14") == 0) {
 8001218:	4a51      	ldr	r2, [pc, #324]	; (8001360 <uart_process_command+0x3c4>)
 800121a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800121c:	0011      	movs	r1, r2
 800121e:	0018      	movs	r0, r3
 8001220:	f004 f924 	bl	800546c <strcasecmp>
 8001224:	1e03      	subs	r3, r0, #0
 8001226:	d102      	bne.n	800122e <uart_process_command+0x292>
    	cr95_init14();
 8001228:	f7ff f956 	bl	80004d8 <cr95_init14>
}
 800122c:	e188      	b.n	8001540 <uart_process_command+0x5a4>
    else if (strcasecmp(token, "INIT15") == 0) {
 800122e:	4a4d      	ldr	r2, [pc, #308]	; (8001364 <uart_process_command+0x3c8>)
 8001230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001232:	0011      	movs	r1, r2
 8001234:	0018      	movs	r0, r3
 8001236:	f004 f919 	bl	800546c <strcasecmp>
 800123a:	1e03      	subs	r3, r0, #0
 800123c:	d102      	bne.n	8001244 <uart_process_command+0x2a8>
        cr95_init15();
 800123e:	f7ff f9ad 	bl	800059c <cr95_init15>
}
 8001242:	e17d      	b.n	8001540 <uart_process_command+0x5a4>
    else if (strcasecmp(token, "READ") == 0) {
 8001244:	4a48      	ldr	r2, [pc, #288]	; (8001368 <uart_process_command+0x3cc>)
 8001246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001248:	0011      	movs	r1, r2
 800124a:	0018      	movs	r0, r3
 800124c:	f004 f90e 	bl	800546c <strcasecmp>
 8001250:	1e03      	subs	r3, r0, #0
 8001252:	d12b      	bne.n	80012ac <uart_process_command+0x310>
    	cr95_read();
 8001254:	f7ff f9e6 	bl	8000624 <cr95_read>
    	if (disp_len == 1) {
 8001258:	4b44      	ldr	r3, [pc, #272]	; (800136c <uart_process_command+0x3d0>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d111      	bne.n	8001284 <uart_process_command+0x2e8>
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001260:	4b32      	ldr	r3, [pc, #200]	; (800132c <uart_process_command+0x390>)
 8001262:	2201      	movs	r2, #1
 8001264:	2110      	movs	r1, #16
 8001266:	0018      	movs	r0, r3
 8001268:	f001 ffb4 	bl	80031d4 <HAL_GPIO_WritePin>
    		HAL_Delay(2000);
 800126c:	23fa      	movs	r3, #250	; 0xfa
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	0018      	movs	r0, r3
 8001272:	f001 fa49 	bl	8002708 <HAL_Delay>
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001276:	4b2d      	ldr	r3, [pc, #180]	; (800132c <uart_process_command+0x390>)
 8001278:	2200      	movs	r2, #0
 800127a:	2110      	movs	r1, #16
 800127c:	0018      	movs	r0, r3
 800127e:	f001 ffa9 	bl	80031d4 <HAL_GPIO_WritePin>
}
 8001282:	e15d      	b.n	8001540 <uart_process_command+0x5a4>
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	4828      	ldr	r0, [pc, #160]	; (800132c <uart_process_command+0x390>)
 800128a:	2201      	movs	r2, #1
 800128c:	0019      	movs	r1, r3
 800128e:	f001 ffa1 	bl	80031d4 <HAL_GPIO_WritePin>
    		HAL_Delay(2000);
 8001292:	23fa      	movs	r3, #250	; 0xfa
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	0018      	movs	r0, r3
 8001298:	f001 fa36 	bl	8002708 <HAL_Delay>
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	4822      	ldr	r0, [pc, #136]	; (800132c <uart_process_command+0x390>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	0019      	movs	r1, r3
 80012a6:	f001 ff95 	bl	80031d4 <HAL_GPIO_WritePin>
}
 80012aa:	e149      	b.n	8001540 <uart_process_command+0x5a4>
    else if (strcasecmp(token, "READ15") == 0) {
 80012ac:	4a30      	ldr	r2, [pc, #192]	; (8001370 <uart_process_command+0x3d4>)
 80012ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012b0:	0011      	movs	r1, r2
 80012b2:	0018      	movs	r0, r3
 80012b4:	f004 f8da 	bl	800546c <strcasecmp>
 80012b8:	1e03      	subs	r3, r0, #0
 80012ba:	d102      	bne.n	80012c2 <uart_process_command+0x326>
        cr95_read15();
 80012bc:	f7ff fc76 	bl	8000bac <cr95_read15>
}
 80012c0:	e13e      	b.n	8001540 <uart_process_command+0x5a4>
    else if (strcasecmp(token, "CALIBRATE") == 0) {
 80012c2:	4a2c      	ldr	r2, [pc, #176]	; (8001374 <uart_process_command+0x3d8>)
 80012c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012c6:	0011      	movs	r1, r2
 80012c8:	0018      	movs	r0, r3
 80012ca:	f004 f8cf 	bl	800546c <strcasecmp>
 80012ce:	1e03      	subs	r3, r0, #0
 80012d0:	d102      	bne.n	80012d8 <uart_process_command+0x33c>
    	cr95_calibrate();
 80012d2:	f7ff fcdb 	bl	8000c8c <cr95_calibrate>
}
 80012d6:	e133      	b.n	8001540 <uart_process_command+0x5a4>
    else if (strcasecmp(token, "IDLE") == 0) {
 80012d8:	4a27      	ldr	r2, [pc, #156]	; (8001378 <uart_process_command+0x3dc>)
 80012da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012dc:	0011      	movs	r1, r2
 80012de:	0018      	movs	r0, r3
 80012e0:	f004 f8c4 	bl	800546c <strcasecmp>
 80012e4:	1e03      	subs	r3, r0, #0
 80012e6:	d149      	bne.n	800137c <uart_process_command+0x3e0>
    	cr95_idle(1);
 80012e8:	2001      	movs	r0, #1
 80012ea:	f7ff f8bb 	bl	8000464 <cr95_idle>
}
 80012ee:	e127      	b.n	8001540 <uart_process_command+0x5a4>
 80012f0:	08006c94 	.word	0x08006c94
 80012f4:	08006dfc 	.word	0x08006dfc
 80012f8:	08006c98 	.word	0x08006c98
 80012fc:	08006ca0 	.word	0x08006ca0
 8001300:	08006cbc 	.word	0x08006cbc
 8001304:	20000548 	.word	0x20000548
 8001308:	2000065c 	.word	0x2000065c
 800130c:	08006cc0 	.word	0x08006cc0
 8001310:	20000618 	.word	0x20000618
 8001314:	200000aa 	.word	0x200000aa
 8001318:	200000ac 	.word	0x200000ac
 800131c:	2000000c 	.word	0x2000000c
 8001320:	08006cc8 	.word	0x08006cc8
 8001324:	08006cd0 	.word	0x08006cd0
 8001328:	08006cd8 	.word	0x08006cd8
 800132c:	48000400 	.word	0x48000400
 8001330:	08006cdc 	.word	0x08006cdc
 8001334:	08006ce8 	.word	0x08006ce8
 8001338:	080069b0 	.word	0x080069b0
 800133c:	080069b4 	.word	0x080069b4
 8001340:	08006cf0 	.word	0x08006cf0
 8001344:	08006d00 	.word	0x08006d00
 8001348:	08006d08 	.word	0x08006d08
 800134c:	08006d0c 	.word	0x08006d0c
 8001350:	08006a0c 	.word	0x08006a0c
 8001354:	08006d14 	.word	0x08006d14
 8001358:	20000004 	.word	0x20000004
 800135c:	08006d1c 	.word	0x08006d1c
 8001360:	08006d28 	.word	0x08006d28
 8001364:	08006d30 	.word	0x08006d30
 8001368:	08006d38 	.word	0x08006d38
 800136c:	20000544 	.word	0x20000544
 8001370:	08006d40 	.word	0x08006d40
 8001374:	08006d48 	.word	0x08006d48
 8001378:	08006d54 	.word	0x08006d54
    else if (strcasecmp(token, "WAKEUP") == 0) {
 800137c:	4a72      	ldr	r2, [pc, #456]	; (8001548 <uart_process_command+0x5ac>)
 800137e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001380:	0011      	movs	r1, r2
 8001382:	0018      	movs	r0, r3
 8001384:	f004 f872 	bl	800546c <strcasecmp>
 8001388:	1e03      	subs	r3, r0, #0
 800138a:	d117      	bne.n	80013bc <uart_process_command+0x420>
    	cr95_wakeup();
 800138c:	f7ff f854 	bl	8000438 <cr95_wakeup>
    	uint8_t resp = cr95read(data, &len);
 8001390:	253e      	movs	r5, #62	; 0x3e
 8001392:	197c      	adds	r4, r7, r5
 8001394:	232b      	movs	r3, #43	; 0x2b
 8001396:	18fa      	adds	r2, r7, r3
 8001398:	262c      	movs	r6, #44	; 0x2c
 800139a:	19bb      	adds	r3, r7, r6
 800139c:	0011      	movs	r1, r2
 800139e:	0018      	movs	r0, r3
 80013a0:	f7fe ff92 	bl	80002c8 <cr95read>
 80013a4:	0003      	movs	r3, r0
 80013a6:	7023      	strb	r3, [r4, #0]
    	printf("Code of wakeup is: %02X with response: %02X\n", data[0],resp);
 80013a8:	19bb      	adds	r3, r7, r6
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	0019      	movs	r1, r3
 80013ae:	197b      	adds	r3, r7, r5
 80013b0:	781a      	ldrb	r2, [r3, #0]
 80013b2:	4b66      	ldr	r3, [pc, #408]	; (800154c <uart_process_command+0x5b0>)
 80013b4:	0018      	movs	r0, r3
 80013b6:	f003 ff8f 	bl	80052d8 <iprintf>
}
 80013ba:	e0c1      	b.n	8001540 <uart_process_command+0x5a4>
    else if (strcasecmp(token, "AUTO") == 0) {
 80013bc:	4a64      	ldr	r2, [pc, #400]	; (8001550 <uart_process_command+0x5b4>)
 80013be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013c0:	0011      	movs	r1, r2
 80013c2:	0018      	movs	r0, r3
 80013c4:	f004 f852 	bl	800546c <strcasecmp>
 80013c8:	1e03      	subs	r3, r0, #0
 80013ca:	d000      	beq.n	80013ce <uart_process_command+0x432>
 80013cc:	e0b4      	b.n	8001538 <uart_process_command+0x59c>
    	SSD1306_Clear();
 80013ce:	f000 fde9 	bl	8001fa4 <SSD1306_Clear>
    	SSD1306_GotoXY (1,10);
 80013d2:	210a      	movs	r1, #10
 80013d4:	2001      	movs	r0, #1
 80013d6:	f000 fd25 	bl	8001e24 <SSD1306_GotoXY>
    	SSD1306_Puts ("Calibration", &Font_11x18, 1);
 80013da:	495e      	ldr	r1, [pc, #376]	; (8001554 <uart_process_command+0x5b8>)
 80013dc:	4b5e      	ldr	r3, [pc, #376]	; (8001558 <uart_process_command+0x5bc>)
 80013de:	2201      	movs	r2, #1
 80013e0:	0018      	movs	r0, r3
 80013e2:	f000 fdb9 	bl	8001f58 <SSD1306_Puts>
    	SSD1306_GotoXY (15,30);
 80013e6:	211e      	movs	r1, #30
 80013e8:	200f      	movs	r0, #15
 80013ea:	f000 fd1b 	bl	8001e24 <SSD1306_GotoXY>
    	SSD1306_Puts ("sequence", &Font_11x18, 1);
 80013ee:	4959      	ldr	r1, [pc, #356]	; (8001554 <uart_process_command+0x5b8>)
 80013f0:	4b5a      	ldr	r3, [pc, #360]	; (800155c <uart_process_command+0x5c0>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	0018      	movs	r0, r3
 80013f6:	f000 fdaf 	bl	8001f58 <SSD1306_Puts>
    	SSD1306_UpdateScreen();
 80013fa:	f000 fc57 	bl	8001cac <SSD1306_UpdateScreen>
    	cr95_calibrate();
 80013fe:	f7ff fc45 	bl	8000c8c <cr95_calibrate>
    	SSD1306_Clear();
 8001402:	f000 fdcf 	bl	8001fa4 <SSD1306_Clear>
    	SSD1306_GotoXY (45,10);
 8001406:	210a      	movs	r1, #10
 8001408:	202d      	movs	r0, #45	; 0x2d
 800140a:	f000 fd0b 	bl	8001e24 <SSD1306_GotoXY>
    	SSD1306_Puts ("RFID", &Font_11x18, 1);
 800140e:	4951      	ldr	r1, [pc, #324]	; (8001554 <uart_process_command+0x5b8>)
 8001410:	4b53      	ldr	r3, [pc, #332]	; (8001560 <uart_process_command+0x5c4>)
 8001412:	2201      	movs	r2, #1
 8001414:	0018      	movs	r0, r3
 8001416:	f000 fd9f 	bl	8001f58 <SSD1306_Puts>
    	SSD1306_GotoXY (30, 30);
 800141a:	211e      	movs	r1, #30
 800141c:	201e      	movs	r0, #30
 800141e:	f000 fd01 	bl	8001e24 <SSD1306_GotoXY>
    	SSD1306_Puts ("SCANNER", &Font_11x18, 1);
 8001422:	494c      	ldr	r1, [pc, #304]	; (8001554 <uart_process_command+0x5b8>)
 8001424:	4b4f      	ldr	r3, [pc, #316]	; (8001564 <uart_process_command+0x5c8>)
 8001426:	2201      	movs	r2, #1
 8001428:	0018      	movs	r0, r3
 800142a:	f000 fd95 	bl	8001f58 <SSD1306_Puts>
    	SSD1306_UpdateScreen();
 800142e:	f000 fc3d 	bl	8001cac <SSD1306_UpdateScreen>
        	cr95_idle(0);
 8001432:	2000      	movs	r0, #0
 8001434:	f7ff f816 	bl	8000464 <cr95_idle>
			do {} while (nfc_rx_read_ptr == nfc_rx_write_ptr);
 8001438:	4b4b      	ldr	r3, [pc, #300]	; (8001568 <uart_process_command+0x5cc>)
 800143a:	881b      	ldrh	r3, [r3, #0]
 800143c:	b29b      	uxth	r3, r3
 800143e:	0019      	movs	r1, r3
 8001440:	4b4a      	ldr	r3, [pc, #296]	; (800156c <uart_process_command+0x5d0>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2240      	movs	r2, #64	; 0x40
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	4299      	cmp	r1, r3
 800144c:	d0f4      	beq.n	8001438 <uart_process_command+0x49c>
			uint8_t resp = cr95read(data, &len);
 800144e:	253f      	movs	r5, #63	; 0x3f
 8001450:	197c      	adds	r4, r7, r5
 8001452:	232b      	movs	r3, #43	; 0x2b
 8001454:	18fa      	adds	r2, r7, r3
 8001456:	262c      	movs	r6, #44	; 0x2c
 8001458:	19bb      	adds	r3, r7, r6
 800145a:	0011      	movs	r1, r2
 800145c:	0018      	movs	r0, r3
 800145e:	f7fe ff33 	bl	80002c8 <cr95read>
 8001462:	0003      	movs	r3, r0
 8001464:	7023      	strb	r3, [r4, #0]
			if (resp == 0x00 && data[0] == 0x02) printf("WAKEUP by tag detect\n");
 8001466:	197b      	adds	r3, r7, r5
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d108      	bne.n	8001480 <uart_process_command+0x4e4>
 800146e:	19bb      	adds	r3, r7, r6
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b02      	cmp	r3, #2
 8001474:	d104      	bne.n	8001480 <uart_process_command+0x4e4>
 8001476:	4b3e      	ldr	r3, [pc, #248]	; (8001570 <uart_process_command+0x5d4>)
 8001478:	0018      	movs	r0, r3
 800147a:	f003 ffcd 	bl	8005418 <puts>
 800147e:	e003      	b.n	8001488 <uart_process_command+0x4ec>
			else printf("Error\n");
 8001480:	4b3c      	ldr	r3, [pc, #240]	; (8001574 <uart_process_command+0x5d8>)
 8001482:	0018      	movs	r0, r3
 8001484:	f003 ffc8 	bl	8005418 <puts>
			printf("Code of wakeup is:%02X\n", data[0]);
 8001488:	232c      	movs	r3, #44	; 0x2c
 800148a:	18fb      	adds	r3, r7, r3
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	001a      	movs	r2, r3
 8001490:	4b39      	ldr	r3, [pc, #228]	; (8001578 <uart_process_command+0x5dc>)
 8001492:	0011      	movs	r1, r2
 8001494:	0018      	movs	r0, r3
 8001496:	f003 ff1f 	bl	80052d8 <iprintf>
			cr95_init14();
 800149a:	f7ff f81d 	bl	80004d8 <cr95_init14>
        	cr95_read();
 800149e:	f7ff f8c1 	bl	8000624 <cr95_read>
        	if (disp_len == 1) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80014a2:	4b36      	ldr	r3, [pc, #216]	; (800157c <uart_process_command+0x5e0>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d105      	bne.n	80014b6 <uart_process_command+0x51a>
 80014aa:	4b35      	ldr	r3, [pc, #212]	; (8001580 <uart_process_command+0x5e4>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	2110      	movs	r1, #16
 80014b0:	0018      	movs	r0, r3
 80014b2:	f001 fe8f 	bl	80031d4 <HAL_GPIO_WritePin>
        	if (disp_len == 2) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80014b6:	4b31      	ldr	r3, [pc, #196]	; (800157c <uart_process_command+0x5e0>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d106      	bne.n	80014cc <uart_process_command+0x530>
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	482f      	ldr	r0, [pc, #188]	; (8001580 <uart_process_command+0x5e4>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	0019      	movs	r1, r3
 80014c8:	f001 fe84 	bl	80031d4 <HAL_GPIO_WritePin>
        	HAL_Delay(3000);
 80014cc:	4b2d      	ldr	r3, [pc, #180]	; (8001584 <uart_process_command+0x5e8>)
 80014ce:	0018      	movs	r0, r3
 80014d0:	f001 f91a 	bl	8002708 <HAL_Delay>
        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80014d4:	4b2a      	ldr	r3, [pc, #168]	; (8001580 <uart_process_command+0x5e4>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	2110      	movs	r1, #16
 80014da:	0018      	movs	r0, r3
 80014dc:	f001 fe7a 	bl	80031d4 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	4826      	ldr	r0, [pc, #152]	; (8001580 <uart_process_command+0x5e4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	0019      	movs	r1, r3
 80014ea:	f001 fe73 	bl	80031d4 <HAL_GPIO_WritePin>
        	SSD1306_Clear();
 80014ee:	f000 fd59 	bl	8001fa4 <SSD1306_Clear>
        	SSD1306_GotoXY (45,10);
 80014f2:	210a      	movs	r1, #10
 80014f4:	202d      	movs	r0, #45	; 0x2d
 80014f6:	f000 fc95 	bl	8001e24 <SSD1306_GotoXY>
        	SSD1306_Puts ("RFID", &Font_11x18, 1);
 80014fa:	4916      	ldr	r1, [pc, #88]	; (8001554 <uart_process_command+0x5b8>)
 80014fc:	4b18      	ldr	r3, [pc, #96]	; (8001560 <uart_process_command+0x5c4>)
 80014fe:	2201      	movs	r2, #1
 8001500:	0018      	movs	r0, r3
 8001502:	f000 fd29 	bl	8001f58 <SSD1306_Puts>
        	SSD1306_GotoXY (30, 30);
 8001506:	211e      	movs	r1, #30
 8001508:	201e      	movs	r0, #30
 800150a:	f000 fc8b 	bl	8001e24 <SSD1306_GotoXY>
        	SSD1306_Puts ("SCANNER", &Font_11x18, 1);
 800150e:	4911      	ldr	r1, [pc, #68]	; (8001554 <uart_process_command+0x5b8>)
 8001510:	4b14      	ldr	r3, [pc, #80]	; (8001564 <uart_process_command+0x5c8>)
 8001512:	2201      	movs	r2, #1
 8001514:	0018      	movs	r0, r3
 8001516:	f000 fd1f 	bl	8001f58 <SSD1306_Puts>
        	SSD1306_UpdateScreen();
 800151a:	f000 fbc7 	bl	8001cac <SSD1306_UpdateScreen>
    	} while (uart_rx_read_ptr == uart_rx_write_ptr);
 800151e:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <uart_process_command+0x5ec>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	b29b      	uxth	r3, r3
 8001524:	0019      	movs	r1, r3
 8001526:	4b19      	ldr	r3, [pc, #100]	; (800158c <uart_process_command+0x5f0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2240      	movs	r2, #64	; 0x40
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	4299      	cmp	r1, r3
 8001532:	d100      	bne.n	8001536 <uart_process_command+0x59a>
 8001534:	e77d      	b.n	8001432 <uart_process_command+0x496>
}
 8001536:	e003      	b.n	8001540 <uart_process_command+0x5a4>
        printf("Unknown command\n");
 8001538:	4b15      	ldr	r3, [pc, #84]	; (8001590 <uart_process_command+0x5f4>)
 800153a:	0018      	movs	r0, r3
 800153c:	f003 ff6c 	bl	8005418 <puts>
}
 8001540:	46c0      	nop			; (mov r8, r8)
 8001542:	46bd      	mov	sp, r7
 8001544:	b013      	add	sp, #76	; 0x4c
 8001546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001548:	08006d5c 	.word	0x08006d5c
 800154c:	08006d64 	.word	0x08006d64
 8001550:	08006d94 	.word	0x08006d94
 8001554:	2000000c 	.word	0x2000000c
 8001558:	08006d9c 	.word	0x08006d9c
 800155c:	08006da8 	.word	0x08006da8
 8001560:	08006cc8 	.word	0x08006cc8
 8001564:	08006cd0 	.word	0x08006cd0
 8001568:	200000aa 	.word	0x200000aa
 800156c:	20000618 	.word	0x20000618
 8001570:	08006db4 	.word	0x08006db4
 8001574:	08006dcc 	.word	0x08006dcc
 8001578:	08006dd4 	.word	0x08006dd4
 800157c:	20000544 	.word	0x20000544
 8001580:	48000400 	.word	0x48000400
 8001584:	00000bb8 	.word	0x00000bb8
 8001588:	200000a8 	.word	0x200000a8
 800158c:	20000588 	.word	0x20000588
 8001590:	08006dec 	.word	0x08006dec

08001594 <uart_byte_available>:

static void uart_byte_available(uint8_t c)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	0002      	movs	r2, r0
 800159c:	1dfb      	adds	r3, r7, #7
 800159e:	701a      	strb	r2, [r3, #0]
    static uint16_t cnt;
    static char data[CMD_BUFFER_LEN];

    if (cnt < CMD_BUFFER_LEN) data[cnt++] = c;
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <uart_byte_available+0x5c>)
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	2b3f      	cmp	r3, #63	; 0x3f
 80015a6:	d80a      	bhi.n	80015be <uart_byte_available+0x2a>
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <uart_byte_available+0x5c>)
 80015aa:	881b      	ldrh	r3, [r3, #0]
 80015ac:	1c5a      	adds	r2, r3, #1
 80015ae:	b291      	uxth	r1, r2
 80015b0:	4a0f      	ldr	r2, [pc, #60]	; (80015f0 <uart_byte_available+0x5c>)
 80015b2:	8011      	strh	r1, [r2, #0]
 80015b4:	0019      	movs	r1, r3
 80015b6:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <uart_byte_available+0x60>)
 80015b8:	1dfa      	adds	r2, r7, #7
 80015ba:	7812      	ldrb	r2, [r2, #0]
 80015bc:	545a      	strb	r2, [r3, r1]
    if (c == '\n' || c == '\r') {
 80015be:	1dfb      	adds	r3, r7, #7
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b0a      	cmp	r3, #10
 80015c4:	d003      	beq.n	80015ce <uart_byte_available+0x3a>
 80015c6:	1dfb      	adds	r3, r7, #7
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b0d      	cmp	r3, #13
 80015cc:	d10c      	bne.n	80015e8 <uart_byte_available+0x54>
        data[cnt - 1] = '\0';
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <uart_byte_available+0x5c>)
 80015d0:	881b      	ldrh	r3, [r3, #0]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <uart_byte_available+0x60>)
 80015d6:	2100      	movs	r1, #0
 80015d8:	54d1      	strb	r1, [r2, r3]
        uart_process_command(data);
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <uart_byte_available+0x60>)
 80015dc:	0018      	movs	r0, r3
 80015de:	f7ff fcdd 	bl	8000f9c <uart_process_command>
        cnt = 0;
 80015e2:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <uart_byte_available+0x5c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	801a      	strh	r2, [r3, #0]
    }
}
 80015e8:	46c0      	nop			; (mov r8, r8)
 80015ea:	46bd      	mov	sp, r7
 80015ec:	b002      	add	sp, #8
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	200000ae 	.word	0x200000ae
 80015f4:	200000b0 	.word	0x200000b0

080015f8 <manual_operation>:

void manual_operation(void)
{
 80015f8:	b5b0      	push	{r4, r5, r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
	while (uart_rx_read_ptr != uart_rx_write_ptr) {
 80015fe:	e01b      	b.n	8001638 <manual_operation+0x40>
		      uint8_t b = uart_rx_buf[uart_rx_read_ptr];
 8001600:	4b3a      	ldr	r3, [pc, #232]	; (80016ec <manual_operation+0xf4>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	b29b      	uxth	r3, r3
 8001606:	0019      	movs	r1, r3
 8001608:	2315      	movs	r3, #21
 800160a:	18fb      	adds	r3, r7, r3
 800160c:	4a38      	ldr	r2, [pc, #224]	; (80016f0 <manual_operation+0xf8>)
 800160e:	5c52      	ldrb	r2, [r2, r1]
 8001610:	701a      	strb	r2, [r3, #0]
		      if (++uart_rx_read_ptr >= RX_BUFFER_LEN) uart_rx_read_ptr = 0; // increase read pointer
 8001612:	4b36      	ldr	r3, [pc, #216]	; (80016ec <manual_operation+0xf4>)
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	b29b      	uxth	r3, r3
 8001618:	3301      	adds	r3, #1
 800161a:	b29b      	uxth	r3, r3
 800161c:	4a33      	ldr	r2, [pc, #204]	; (80016ec <manual_operation+0xf4>)
 800161e:	1c19      	adds	r1, r3, #0
 8001620:	8011      	strh	r1, [r2, #0]
 8001622:	2b3f      	cmp	r3, #63	; 0x3f
 8001624:	d902      	bls.n	800162c <manual_operation+0x34>
 8001626:	4b31      	ldr	r3, [pc, #196]	; (80016ec <manual_operation+0xf4>)
 8001628:	2200      	movs	r2, #0
 800162a:	801a      	strh	r2, [r3, #0]
		      uart_byte_available(b); // process every received byte with the RX state machine
 800162c:	2315      	movs	r3, #21
 800162e:	18fb      	adds	r3, r7, r3
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	0018      	movs	r0, r3
 8001634:	f7ff ffae 	bl	8001594 <uart_byte_available>
	while (uart_rx_read_ptr != uart_rx_write_ptr) {
 8001638:	4b2c      	ldr	r3, [pc, #176]	; (80016ec <manual_operation+0xf4>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	b29b      	uxth	r3, r3
 800163e:	0019      	movs	r1, r3
 8001640:	4b2c      	ldr	r3, [pc, #176]	; (80016f4 <manual_operation+0xfc>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2240      	movs	r2, #64	; 0x40
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	4299      	cmp	r1, r3
 800164c:	d1d8      	bne.n	8001600 <manual_operation+0x8>
		  }
		  if (nfc_ready && nfc_rx_read_ptr != nfc_rx_write_ptr) {
 800164e:	4b2a      	ldr	r3, [pc, #168]	; (80016f8 <manual_operation+0x100>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d045      	beq.n	80016e2 <manual_operation+0xea>
 8001656:	4b29      	ldr	r3, [pc, #164]	; (80016fc <manual_operation+0x104>)
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	b29b      	uxth	r3, r3
 800165c:	0019      	movs	r1, r3
 800165e:	4b28      	ldr	r3, [pc, #160]	; (8001700 <manual_operation+0x108>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2240      	movs	r2, #64	; 0x40
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	4299      	cmp	r1, r3
 800166a:	d03a      	beq.n	80016e2 <manual_operation+0xea>
			  uint8_t data[16];
			  uint8_t len;
			  uint8_t resp = cr95read(data, &len);
 800166c:	2516      	movs	r5, #22
 800166e:	197c      	adds	r4, r7, r5
 8001670:	1cfa      	adds	r2, r7, #3
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	0011      	movs	r1, r2
 8001676:	0018      	movs	r0, r3
 8001678:	f7fe fe26 	bl	80002c8 <cr95read>
 800167c:	0003      	movs	r3, r0
 800167e:	7023      	strb	r3, [r4, #0]
			  if (resp != 0xFF) {
 8001680:	197b      	adds	r3, r7, r5
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2bff      	cmp	r3, #255	; 0xff
 8001686:	d028      	beq.n	80016da <manual_operation+0xe2>
				  printf("Async response, code = 0x%02x, len = %d, data =", resp, len);
 8001688:	197b      	adds	r3, r7, r5
 800168a:	7819      	ldrb	r1, [r3, #0]
 800168c:	1cfb      	adds	r3, r7, #3
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	001a      	movs	r2, r3
 8001692:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <manual_operation+0x10c>)
 8001694:	0018      	movs	r0, r3
 8001696:	f003 fe1f 	bl	80052d8 <iprintf>
				  for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 800169a:	2317      	movs	r3, #23
 800169c:	18fb      	adds	r3, r7, r3
 800169e:	2200      	movs	r2, #0
 80016a0:	701a      	strb	r2, [r3, #0]
 80016a2:	e00f      	b.n	80016c4 <manual_operation+0xcc>
 80016a4:	2417      	movs	r4, #23
 80016a6:	193b      	adds	r3, r7, r4
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	1d3a      	adds	r2, r7, #4
 80016ac:	5cd3      	ldrb	r3, [r2, r3]
 80016ae:	001a      	movs	r2, r3
 80016b0:	4b15      	ldr	r3, [pc, #84]	; (8001708 <manual_operation+0x110>)
 80016b2:	0011      	movs	r1, r2
 80016b4:	0018      	movs	r0, r3
 80016b6:	f003 fe0f 	bl	80052d8 <iprintf>
 80016ba:	193b      	adds	r3, r7, r4
 80016bc:	781a      	ldrb	r2, [r3, #0]
 80016be:	193b      	adds	r3, r7, r4
 80016c0:	3201      	adds	r2, #1
 80016c2:	701a      	strb	r2, [r3, #0]
 80016c4:	1cfb      	adds	r3, r7, #3
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2217      	movs	r2, #23
 80016ca:	18ba      	adds	r2, r7, r2
 80016cc:	7812      	ldrb	r2, [r2, #0]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d3e8      	bcc.n	80016a4 <manual_operation+0xac>
				  printf("\n");
 80016d2:	200a      	movs	r0, #10
 80016d4:	f003 fe1a 	bl	800530c <putchar>
			  } else {
				  printf("Async reponse, invalid (timeout)\n");
			  }
		  }
}
 80016d8:	e003      	b.n	80016e2 <manual_operation+0xea>
				  printf("Async reponse, invalid (timeout)\n");
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <manual_operation+0x114>)
 80016dc:	0018      	movs	r0, r3
 80016de:	f003 fe9b 	bl	8005418 <puts>
}
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	46bd      	mov	sp, r7
 80016e6:	b006      	add	sp, #24
 80016e8:	bdb0      	pop	{r4, r5, r7, pc}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	200000a8 	.word	0x200000a8
 80016f0:	20000504 	.word	0x20000504
 80016f4:	20000588 	.word	0x20000588
 80016f8:	200000ac 	.word	0x200000ac
 80016fc:	200000aa 	.word	0x200000aa
 8001700:	20000618 	.word	0x20000618
 8001704:	08006e00 	.word	0x08006e00
 8001708:	08006a0c 	.word	0x08006a0c
 800170c:	08006e30 	.word	0x08006e30

08001710 <nfc_init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void nfc_init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	MX_USART1_UART_Init();
 8001714:	f000 f8c6 	bl	80018a4 <MX_USART1_UART_Init>
}
 8001718:	46c0      	nop			; (mov r8, r8)
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001724:	f000 ff8c 	bl	8002640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001728:	f000 f818 	bl	800175c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800172c:	f000 f942 	bl	80019b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001730:	f000 f91a 	bl	8001968 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001734:	f000 f8e8 	bl	8001908 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001738:	f000 f8b4 	bl	80018a4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800173c:	f000 f872 	bl	8001824 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init ();
 8001740:	f000 f9f0 	bl	8001b24 <SSD1306_Init>
  HAL_UART_DeInit(&huart1);
 8001744:	4b04      	ldr	r3, [pc, #16]	; (8001758 <main+0x38>)
 8001746:	0018      	movs	r0, r3
 8001748:	f002 ffb8 	bl	80046bc <HAL_UART_DeInit>
  uart_init();
 800174c:	f7fe fd7a 	bl	8000244 <uart_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
#if 1
	  manual_operation();
 8001750:	f7ff ff52 	bl	80015f8 <manual_operation>
 8001754:	e7fc      	b.n	8001750 <main+0x30>
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	2000065c 	.word	0x2000065c

0800175c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800175c:	b590      	push	{r4, r7, lr}
 800175e:	b095      	sub	sp, #84	; 0x54
 8001760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001762:	2420      	movs	r4, #32
 8001764:	193b      	adds	r3, r7, r4
 8001766:	0018      	movs	r0, r3
 8001768:	2330      	movs	r3, #48	; 0x30
 800176a:	001a      	movs	r2, r3
 800176c:	2100      	movs	r1, #0
 800176e:	f003 fdab 	bl	80052c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001772:	2310      	movs	r3, #16
 8001774:	18fb      	adds	r3, r7, r3
 8001776:	0018      	movs	r0, r3
 8001778:	2310      	movs	r3, #16
 800177a:	001a      	movs	r2, r3
 800177c:	2100      	movs	r1, #0
 800177e:	f003 fda3 	bl	80052c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001782:	003b      	movs	r3, r7
 8001784:	0018      	movs	r0, r3
 8001786:	2310      	movs	r3, #16
 8001788:	001a      	movs	r2, r3
 800178a:	2100      	movs	r1, #0
 800178c:	f003 fd9c 	bl	80052c8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001790:	0021      	movs	r1, r4
 8001792:	187b      	adds	r3, r7, r1
 8001794:	2202      	movs	r2, #2
 8001796:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001798:	187b      	adds	r3, r7, r1
 800179a:	2201      	movs	r2, #1
 800179c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800179e:	187b      	adds	r3, r7, r1
 80017a0:	2210      	movs	r2, #16
 80017a2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a4:	187b      	adds	r3, r7, r1
 80017a6:	2202      	movs	r2, #2
 80017a8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017aa:	187b      	adds	r3, r7, r1
 80017ac:	2200      	movs	r2, #0
 80017ae:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80017b0:	187b      	adds	r3, r7, r1
 80017b2:	22a0      	movs	r2, #160	; 0xa0
 80017b4:	0392      	lsls	r2, r2, #14
 80017b6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80017b8:	187b      	adds	r3, r7, r1
 80017ba:	2200      	movs	r2, #0
 80017bc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017be:	187b      	adds	r3, r7, r1
 80017c0:	0018      	movs	r0, r3
 80017c2:	f002 f9ed 	bl	8003ba0 <HAL_RCC_OscConfig>
 80017c6:	1e03      	subs	r3, r0, #0
 80017c8:	d001      	beq.n	80017ce <SystemClock_Config+0x72>
  {
    Error_Handler();
 80017ca:	f000 f9a5 	bl	8001b18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ce:	2110      	movs	r1, #16
 80017d0:	187b      	adds	r3, r7, r1
 80017d2:	2207      	movs	r2, #7
 80017d4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d6:	187b      	adds	r3, r7, r1
 80017d8:	2202      	movs	r2, #2
 80017da:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017dc:	187b      	adds	r3, r7, r1
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017e2:	187b      	adds	r3, r7, r1
 80017e4:	2200      	movs	r2, #0
 80017e6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017e8:	187b      	adds	r3, r7, r1
 80017ea:	2101      	movs	r1, #1
 80017ec:	0018      	movs	r0, r3
 80017ee:	f002 fcf1 	bl	80041d4 <HAL_RCC_ClockConfig>
 80017f2:	1e03      	subs	r3, r0, #0
 80017f4:	d001      	beq.n	80017fa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80017f6:	f000 f98f 	bl	8001b18 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80017fa:	003b      	movs	r3, r7
 80017fc:	2221      	movs	r2, #33	; 0x21
 80017fe:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001800:	003b      	movs	r3, r7
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001806:	003b      	movs	r3, r7
 8001808:	2200      	movs	r2, #0
 800180a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800180c:	003b      	movs	r3, r7
 800180e:	0018      	movs	r0, r3
 8001810:	f002 fe32 	bl	8004478 <HAL_RCCEx_PeriphCLKConfig>
 8001814:	1e03      	subs	r3, r0, #0
 8001816:	d001      	beq.n	800181c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001818:	f000 f97e 	bl	8001b18 <Error_Handler>
  }
}
 800181c:	46c0      	nop			; (mov r8, r8)
 800181e:	46bd      	mov	sp, r7
 8001820:	b015      	add	sp, #84	; 0x54
 8001822:	bd90      	pop	{r4, r7, pc}

08001824 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001828:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <MX_I2C1_Init+0x74>)
 800182a:	4a1c      	ldr	r2, [pc, #112]	; (800189c <MX_I2C1_Init+0x78>)
 800182c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800182e:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <MX_I2C1_Init+0x74>)
 8001830:	4a1b      	ldr	r2, [pc, #108]	; (80018a0 <MX_I2C1_Init+0x7c>)
 8001832:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001834:	4b18      	ldr	r3, [pc, #96]	; (8001898 <MX_I2C1_Init+0x74>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800183a:	4b17      	ldr	r3, [pc, #92]	; (8001898 <MX_I2C1_Init+0x74>)
 800183c:	2201      	movs	r2, #1
 800183e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001840:	4b15      	ldr	r3, [pc, #84]	; (8001898 <MX_I2C1_Init+0x74>)
 8001842:	2200      	movs	r2, #0
 8001844:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001846:	4b14      	ldr	r3, [pc, #80]	; (8001898 <MX_I2C1_Init+0x74>)
 8001848:	2200      	movs	r2, #0
 800184a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <MX_I2C1_Init+0x74>)
 800184e:	2200      	movs	r2, #0
 8001850:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <MX_I2C1_Init+0x74>)
 8001854:	2200      	movs	r2, #0
 8001856:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <MX_I2C1_Init+0x74>)
 800185a:	2200      	movs	r2, #0
 800185c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <MX_I2C1_Init+0x74>)
 8001860:	0018      	movs	r0, r3
 8001862:	f001 fcd5 	bl	8003210 <HAL_I2C_Init>
 8001866:	1e03      	subs	r3, r0, #0
 8001868:	d001      	beq.n	800186e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800186a:	f000 f955 	bl	8001b18 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <MX_I2C1_Init+0x74>)
 8001870:	2100      	movs	r1, #0
 8001872:	0018      	movs	r0, r3
 8001874:	f002 f8fc 	bl	8003a70 <HAL_I2CEx_ConfigAnalogFilter>
 8001878:	1e03      	subs	r3, r0, #0
 800187a:	d001      	beq.n	8001880 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800187c:	f000 f94c 	bl	8001b18 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <MX_I2C1_Init+0x74>)
 8001882:	2100      	movs	r1, #0
 8001884:	0018      	movs	r0, r3
 8001886:	f002 f93f 	bl	8003b08 <HAL_I2CEx_ConfigDigitalFilter>
 800188a:	1e03      	subs	r3, r0, #0
 800188c:	d001      	beq.n	8001892 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800188e:	f000 f943 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	200005cc 	.word	0x200005cc
 800189c:	40005400 	.word	0x40005400
 80018a0:	0000020b 	.word	0x0000020b

080018a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018a8:	4b15      	ldr	r3, [pc, #84]	; (8001900 <MX_USART1_UART_Init+0x5c>)
 80018aa:	4a16      	ldr	r2, [pc, #88]	; (8001904 <MX_USART1_UART_Init+0x60>)
 80018ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80018ae:	4b14      	ldr	r3, [pc, #80]	; (8001900 <MX_USART1_UART_Init+0x5c>)
 80018b0:	22e1      	movs	r2, #225	; 0xe1
 80018b2:	0212      	lsls	r2, r2, #8
 80018b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018b6:	4b12      	ldr	r3, [pc, #72]	; (8001900 <MX_USART1_UART_Init+0x5c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 80018bc:	4b10      	ldr	r3, [pc, #64]	; (8001900 <MX_USART1_UART_Init+0x5c>)
 80018be:	2280      	movs	r2, #128	; 0x80
 80018c0:	0192      	lsls	r2, r2, #6
 80018c2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018c4:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <MX_USART1_UART_Init+0x5c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018ca:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <MX_USART1_UART_Init+0x5c>)
 80018cc:	220c      	movs	r2, #12
 80018ce:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <MX_USART1_UART_Init+0x5c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d6:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <MX_USART1_UART_Init+0x5c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <MX_USART1_UART_Init+0x5c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018e2:	4b07      	ldr	r3, [pc, #28]	; (8001900 <MX_USART1_UART_Init+0x5c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <MX_USART1_UART_Init+0x5c>)
 80018ea:	0018      	movs	r0, r3
 80018ec:	f002 fe92 	bl	8004614 <HAL_UART_Init>
 80018f0:	1e03      	subs	r3, r0, #0
 80018f2:	d001      	beq.n	80018f8 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 80018f4:	f000 f910 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018f8:	46c0      	nop			; (mov r8, r8)
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	2000065c 	.word	0x2000065c
 8001904:	40013800 	.word	0x40013800

08001908 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800190c:	4b14      	ldr	r3, [pc, #80]	; (8001960 <MX_USART2_UART_Init+0x58>)
 800190e:	4a15      	ldr	r2, [pc, #84]	; (8001964 <MX_USART2_UART_Init+0x5c>)
 8001910:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001912:	4b13      	ldr	r3, [pc, #76]	; (8001960 <MX_USART2_UART_Init+0x58>)
 8001914:	2296      	movs	r2, #150	; 0x96
 8001916:	0212      	lsls	r2, r2, #8
 8001918:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800191a:	4b11      	ldr	r3, [pc, #68]	; (8001960 <MX_USART2_UART_Init+0x58>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <MX_USART2_UART_Init+0x58>)
 8001922:	2200      	movs	r2, #0
 8001924:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001926:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <MX_USART2_UART_Init+0x58>)
 8001928:	2200      	movs	r2, #0
 800192a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <MX_USART2_UART_Init+0x58>)
 800192e:	220c      	movs	r2, #12
 8001930:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <MX_USART2_UART_Init+0x58>)
 8001934:	2200      	movs	r2, #0
 8001936:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <MX_USART2_UART_Init+0x58>)
 800193a:	2200      	movs	r2, #0
 800193c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800193e:	4b08      	ldr	r3, [pc, #32]	; (8001960 <MX_USART2_UART_Init+0x58>)
 8001940:	2200      	movs	r2, #0
 8001942:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <MX_USART2_UART_Init+0x58>)
 8001946:	2200      	movs	r2, #0
 8001948:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800194a:	4b05      	ldr	r3, [pc, #20]	; (8001960 <MX_USART2_UART_Init+0x58>)
 800194c:	0018      	movs	r0, r3
 800194e:	f002 fe61 	bl	8004614 <HAL_UART_Init>
 8001952:	1e03      	subs	r3, r0, #0
 8001954:	d001      	beq.n	800195a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001956:	f000 f8df 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	200006e0 	.word	0x200006e0
 8001964:	40004400 	.word	0x40004400

08001968 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <MX_DMA_Init+0x48>)
 8001970:	695a      	ldr	r2, [r3, #20]
 8001972:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <MX_DMA_Init+0x48>)
 8001974:	2101      	movs	r1, #1
 8001976:	430a      	orrs	r2, r1
 8001978:	615a      	str	r2, [r3, #20]
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <MX_DMA_Init+0x48>)
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	2201      	movs	r2, #1
 8001980:	4013      	ands	r3, r2
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	2100      	movs	r1, #0
 800198a:	200a      	movs	r0, #10
 800198c:	f000 ff8c 	bl	80028a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001990:	200a      	movs	r0, #10
 8001992:	f000 ff9e 	bl	80028d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2100      	movs	r1, #0
 800199a:	200b      	movs	r0, #11
 800199c:	f000 ff84 	bl	80028a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80019a0:	200b      	movs	r0, #11
 80019a2:	f000 ff96 	bl	80028d2 <HAL_NVIC_EnableIRQ>

}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b002      	add	sp, #8
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	40021000 	.word	0x40021000

080019b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019b4:	b590      	push	{r4, r7, lr}
 80019b6:	b08b      	sub	sp, #44	; 0x2c
 80019b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ba:	2414      	movs	r4, #20
 80019bc:	193b      	adds	r3, r7, r4
 80019be:	0018      	movs	r0, r3
 80019c0:	2314      	movs	r3, #20
 80019c2:	001a      	movs	r2, r3
 80019c4:	2100      	movs	r1, #0
 80019c6:	f003 fc7f 	bl	80052c8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ca:	4b4f      	ldr	r3, [pc, #316]	; (8001b08 <MX_GPIO_Init+0x154>)
 80019cc:	695a      	ldr	r2, [r3, #20]
 80019ce:	4b4e      	ldr	r3, [pc, #312]	; (8001b08 <MX_GPIO_Init+0x154>)
 80019d0:	2180      	movs	r1, #128	; 0x80
 80019d2:	0309      	lsls	r1, r1, #12
 80019d4:	430a      	orrs	r2, r1
 80019d6:	615a      	str	r2, [r3, #20]
 80019d8:	4b4b      	ldr	r3, [pc, #300]	; (8001b08 <MX_GPIO_Init+0x154>)
 80019da:	695a      	ldr	r2, [r3, #20]
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	031b      	lsls	r3, r3, #12
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019e6:	4b48      	ldr	r3, [pc, #288]	; (8001b08 <MX_GPIO_Init+0x154>)
 80019e8:	695a      	ldr	r2, [r3, #20]
 80019ea:	4b47      	ldr	r3, [pc, #284]	; (8001b08 <MX_GPIO_Init+0x154>)
 80019ec:	2180      	movs	r1, #128	; 0x80
 80019ee:	03c9      	lsls	r1, r1, #15
 80019f0:	430a      	orrs	r2, r1
 80019f2:	615a      	str	r2, [r3, #20]
 80019f4:	4b44      	ldr	r3, [pc, #272]	; (8001b08 <MX_GPIO_Init+0x154>)
 80019f6:	695a      	ldr	r2, [r3, #20]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	03db      	lsls	r3, r3, #15
 80019fc:	4013      	ands	r3, r2
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a02:	4b41      	ldr	r3, [pc, #260]	; (8001b08 <MX_GPIO_Init+0x154>)
 8001a04:	695a      	ldr	r2, [r3, #20]
 8001a06:	4b40      	ldr	r3, [pc, #256]	; (8001b08 <MX_GPIO_Init+0x154>)
 8001a08:	2180      	movs	r1, #128	; 0x80
 8001a0a:	0289      	lsls	r1, r1, #10
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	615a      	str	r2, [r3, #20]
 8001a10:	4b3d      	ldr	r3, [pc, #244]	; (8001b08 <MX_GPIO_Init+0x154>)
 8001a12:	695a      	ldr	r2, [r3, #20]
 8001a14:	2380      	movs	r3, #128	; 0x80
 8001a16:	029b      	lsls	r3, r3, #10
 8001a18:	4013      	ands	r3, r2
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1e:	4b3a      	ldr	r3, [pc, #232]	; (8001b08 <MX_GPIO_Init+0x154>)
 8001a20:	695a      	ldr	r2, [r3, #20]
 8001a22:	4b39      	ldr	r3, [pc, #228]	; (8001b08 <MX_GPIO_Init+0x154>)
 8001a24:	2180      	movs	r1, #128	; 0x80
 8001a26:	02c9      	lsls	r1, r1, #11
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	615a      	str	r2, [r3, #20]
 8001a2c:	4b36      	ldr	r3, [pc, #216]	; (8001b08 <MX_GPIO_Init+0x154>)
 8001a2e:	695a      	ldr	r2, [r3, #20]
 8001a30:	2380      	movs	r3, #128	; 0x80
 8001a32:	02db      	lsls	r3, r3, #11
 8001a34:	4013      	ands	r3, r2
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8001a3a:	2390      	movs	r3, #144	; 0x90
 8001a3c:	0059      	lsls	r1, r3, #1
 8001a3e:	2390      	movs	r3, #144	; 0x90
 8001a40:	05db      	lsls	r3, r3, #23
 8001a42:	2200      	movs	r2, #0
 8001a44:	0018      	movs	r0, r3
 8001a46:	f001 fbc5 	bl	80031d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001a4a:	2386      	movs	r3, #134	; 0x86
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	482f      	ldr	r0, [pc, #188]	; (8001b0c <MX_GPIO_Init+0x158>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	0019      	movs	r1, r3
 8001a54:	f001 fbbe 	bl	80031d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001a58:	4b2d      	ldr	r3, [pc, #180]	; (8001b10 <MX_GPIO_Init+0x15c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2180      	movs	r1, #128	; 0x80
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f001 fbb8 	bl	80031d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a64:	193b      	adds	r3, r7, r4
 8001a66:	2280      	movs	r2, #128	; 0x80
 8001a68:	0192      	lsls	r2, r2, #6
 8001a6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a6c:	193b      	adds	r3, r7, r4
 8001a6e:	4a29      	ldr	r2, [pc, #164]	; (8001b14 <MX_GPIO_Init+0x160>)
 8001a70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	193b      	adds	r3, r7, r4
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a78:	193b      	adds	r3, r7, r4
 8001a7a:	4a25      	ldr	r2, [pc, #148]	; (8001b10 <MX_GPIO_Init+0x15c>)
 8001a7c:	0019      	movs	r1, r3
 8001a7e:	0010      	movs	r0, r2
 8001a80:	f001 f968 	bl	8002d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8001a84:	0021      	movs	r1, r4
 8001a86:	187b      	adds	r3, r7, r1
 8001a88:	2290      	movs	r2, #144	; 0x90
 8001a8a:	0052      	lsls	r2, r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8e:	000c      	movs	r4, r1
 8001a90:	193b      	adds	r3, r7, r4
 8001a92:	2201      	movs	r2, #1
 8001a94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	193b      	adds	r3, r7, r4
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9c:	193b      	adds	r3, r7, r4
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa2:	193a      	adds	r2, r7, r4
 8001aa4:	2390      	movs	r3, #144	; 0x90
 8001aa6:	05db      	lsls	r3, r3, #23
 8001aa8:	0011      	movs	r1, r2
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f001 f952 	bl	8002d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 8001ab0:	0021      	movs	r1, r4
 8001ab2:	187b      	adds	r3, r7, r1
 8001ab4:	2286      	movs	r2, #134	; 0x86
 8001ab6:	00d2      	lsls	r2, r2, #3
 8001ab8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aba:	000c      	movs	r4, r1
 8001abc:	193b      	adds	r3, r7, r4
 8001abe:	2201      	movs	r2, #1
 8001ac0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	193b      	adds	r3, r7, r4
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac8:	193b      	adds	r3, r7, r4
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ace:	193b      	adds	r3, r7, r4
 8001ad0:	4a0e      	ldr	r2, [pc, #56]	; (8001b0c <MX_GPIO_Init+0x158>)
 8001ad2:	0019      	movs	r1, r3
 8001ad4:	0010      	movs	r0, r2
 8001ad6:	f001 f93d 	bl	8002d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ada:	0021      	movs	r1, r4
 8001adc:	187b      	adds	r3, r7, r1
 8001ade:	2280      	movs	r2, #128	; 0x80
 8001ae0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae2:	187b      	adds	r3, r7, r1
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	187b      	adds	r3, r7, r1
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aee:	187b      	adds	r3, r7, r1
 8001af0:	2200      	movs	r2, #0
 8001af2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af4:	187b      	adds	r3, r7, r1
 8001af6:	4a06      	ldr	r2, [pc, #24]	; (8001b10 <MX_GPIO_Init+0x15c>)
 8001af8:	0019      	movs	r1, r3
 8001afa:	0010      	movs	r0, r2
 8001afc:	f001 f92a 	bl	8002d54 <HAL_GPIO_Init>

}
 8001b00:	46c0      	nop			; (mov r8, r8)
 8001b02:	46bd      	mov	sp, r7
 8001b04:	b00b      	add	sp, #44	; 0x2c
 8001b06:	bd90      	pop	{r4, r7, pc}
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	48000400 	.word	0x48000400
 8001b10:	48000800 	.word	0x48000800
 8001b14:	10210000 	.word	0x10210000

08001b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b1c:	46c0      	nop			; (mov r8, r8)
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001b2a:	f000 fa45 	bl	8001fb8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001b2e:	4b5b      	ldr	r3, [pc, #364]	; (8001c9c <SSD1306_Init+0x178>)
 8001b30:	485b      	ldr	r0, [pc, #364]	; (8001ca0 <SSD1306_Init+0x17c>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	2178      	movs	r1, #120	; 0x78
 8001b36:	f001 fd09 	bl	800354c <HAL_I2C_IsDeviceReady>
 8001b3a:	1e03      	subs	r3, r0, #0
 8001b3c:	d001      	beq.n	8001b42 <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e0a8      	b.n	8001c94 <SSD1306_Init+0x170>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001b42:	4b58      	ldr	r3, [pc, #352]	; (8001ca4 <SSD1306_Init+0x180>)
 8001b44:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b46:	e002      	b.n	8001b4e <SSD1306_Init+0x2a>
		p--;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1f9      	bne.n	8001b48 <SSD1306_Init+0x24>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001b54:	22ae      	movs	r2, #174	; 0xae
 8001b56:	2100      	movs	r1, #0
 8001b58:	2078      	movs	r0, #120	; 0x78
 8001b5a:	f000 fabf 	bl	80020dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001b5e:	2220      	movs	r2, #32
 8001b60:	2100      	movs	r1, #0
 8001b62:	2078      	movs	r0, #120	; 0x78
 8001b64:	f000 faba 	bl	80020dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001b68:	2210      	movs	r2, #16
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	2078      	movs	r0, #120	; 0x78
 8001b6e:	f000 fab5 	bl	80020dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001b72:	22b0      	movs	r2, #176	; 0xb0
 8001b74:	2100      	movs	r1, #0
 8001b76:	2078      	movs	r0, #120	; 0x78
 8001b78:	f000 fab0 	bl	80020dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001b7c:	22c8      	movs	r2, #200	; 0xc8
 8001b7e:	2100      	movs	r1, #0
 8001b80:	2078      	movs	r0, #120	; 0x78
 8001b82:	f000 faab 	bl	80020dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001b86:	2200      	movs	r2, #0
 8001b88:	2100      	movs	r1, #0
 8001b8a:	2078      	movs	r0, #120	; 0x78
 8001b8c:	f000 faa6 	bl	80020dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001b90:	2210      	movs	r2, #16
 8001b92:	2100      	movs	r1, #0
 8001b94:	2078      	movs	r0, #120	; 0x78
 8001b96:	f000 faa1 	bl	80020dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001b9a:	2240      	movs	r2, #64	; 0x40
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	2078      	movs	r0, #120	; 0x78
 8001ba0:	f000 fa9c 	bl	80020dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001ba4:	2281      	movs	r2, #129	; 0x81
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	2078      	movs	r0, #120	; 0x78
 8001baa:	f000 fa97 	bl	80020dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001bae:	22ff      	movs	r2, #255	; 0xff
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	2078      	movs	r0, #120	; 0x78
 8001bb4:	f000 fa92 	bl	80020dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001bb8:	22a1      	movs	r2, #161	; 0xa1
 8001bba:	2100      	movs	r1, #0
 8001bbc:	2078      	movs	r0, #120	; 0x78
 8001bbe:	f000 fa8d 	bl	80020dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001bc2:	22a6      	movs	r2, #166	; 0xa6
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	2078      	movs	r0, #120	; 0x78
 8001bc8:	f000 fa88 	bl	80020dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001bcc:	22a8      	movs	r2, #168	; 0xa8
 8001bce:	2100      	movs	r1, #0
 8001bd0:	2078      	movs	r0, #120	; 0x78
 8001bd2:	f000 fa83 	bl	80020dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001bd6:	223f      	movs	r2, #63	; 0x3f
 8001bd8:	2100      	movs	r1, #0
 8001bda:	2078      	movs	r0, #120	; 0x78
 8001bdc:	f000 fa7e 	bl	80020dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001be0:	22a4      	movs	r2, #164	; 0xa4
 8001be2:	2100      	movs	r1, #0
 8001be4:	2078      	movs	r0, #120	; 0x78
 8001be6:	f000 fa79 	bl	80020dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001bea:	22d3      	movs	r2, #211	; 0xd3
 8001bec:	2100      	movs	r1, #0
 8001bee:	2078      	movs	r0, #120	; 0x78
 8001bf0:	f000 fa74 	bl	80020dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	2078      	movs	r0, #120	; 0x78
 8001bfa:	f000 fa6f 	bl	80020dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001bfe:	22d5      	movs	r2, #213	; 0xd5
 8001c00:	2100      	movs	r1, #0
 8001c02:	2078      	movs	r0, #120	; 0x78
 8001c04:	f000 fa6a 	bl	80020dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001c08:	22f0      	movs	r2, #240	; 0xf0
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	2078      	movs	r0, #120	; 0x78
 8001c0e:	f000 fa65 	bl	80020dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001c12:	22d9      	movs	r2, #217	; 0xd9
 8001c14:	2100      	movs	r1, #0
 8001c16:	2078      	movs	r0, #120	; 0x78
 8001c18:	f000 fa60 	bl	80020dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001c1c:	2222      	movs	r2, #34	; 0x22
 8001c1e:	2100      	movs	r1, #0
 8001c20:	2078      	movs	r0, #120	; 0x78
 8001c22:	f000 fa5b 	bl	80020dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001c26:	22da      	movs	r2, #218	; 0xda
 8001c28:	2100      	movs	r1, #0
 8001c2a:	2078      	movs	r0, #120	; 0x78
 8001c2c:	f000 fa56 	bl	80020dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001c30:	2212      	movs	r2, #18
 8001c32:	2100      	movs	r1, #0
 8001c34:	2078      	movs	r0, #120	; 0x78
 8001c36:	f000 fa51 	bl	80020dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001c3a:	22db      	movs	r2, #219	; 0xdb
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	2078      	movs	r0, #120	; 0x78
 8001c40:	f000 fa4c 	bl	80020dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001c44:	2220      	movs	r2, #32
 8001c46:	2100      	movs	r1, #0
 8001c48:	2078      	movs	r0, #120	; 0x78
 8001c4a:	f000 fa47 	bl	80020dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001c4e:	228d      	movs	r2, #141	; 0x8d
 8001c50:	2100      	movs	r1, #0
 8001c52:	2078      	movs	r0, #120	; 0x78
 8001c54:	f000 fa42 	bl	80020dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001c58:	2214      	movs	r2, #20
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	2078      	movs	r0, #120	; 0x78
 8001c5e:	f000 fa3d 	bl	80020dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001c62:	22af      	movs	r2, #175	; 0xaf
 8001c64:	2100      	movs	r1, #0
 8001c66:	2078      	movs	r0, #120	; 0x78
 8001c68:	f000 fa38 	bl	80020dc <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001c6c:	222e      	movs	r2, #46	; 0x2e
 8001c6e:	2100      	movs	r1, #0
 8001c70:	2078      	movs	r0, #120	; 0x78
 8001c72:	f000 fa33 	bl	80020dc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001c76:	2000      	movs	r0, #0
 8001c78:	f000 f84c 	bl	8001d14 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001c7c:	f000 f816 	bl	8001cac <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001c80:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <SSD1306_Init+0x184>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001c86:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <SSD1306_Init+0x184>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <SSD1306_Init+0x184>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001c92:	2301      	movs	r3, #1
}
 8001c94:	0018      	movs	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	b002      	add	sp, #8
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	00004e20 	.word	0x00004e20
 8001ca0:	200005cc 	.word	0x200005cc
 8001ca4:	000009c4 	.word	0x000009c4
 8001ca8:	200004f0 	.word	0x200004f0

08001cac <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001cb2:	1dfb      	adds	r3, r7, #7
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
 8001cb8:	e021      	b.n	8001cfe <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001cba:	1dfb      	adds	r3, r7, #7
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	3b50      	subs	r3, #80	; 0x50
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	001a      	movs	r2, r3
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	2078      	movs	r0, #120	; 0x78
 8001cc8:	f000 fa08 	bl	80020dc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2100      	movs	r1, #0
 8001cd0:	2078      	movs	r0, #120	; 0x78
 8001cd2:	f000 fa03 	bl	80020dc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001cd6:	2210      	movs	r2, #16
 8001cd8:	2100      	movs	r1, #0
 8001cda:	2078      	movs	r0, #120	; 0x78
 8001cdc:	f000 f9fe 	bl	80020dc <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001ce0:	1dfb      	adds	r3, r7, #7
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	01da      	lsls	r2, r3, #7
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <SSD1306_UpdateScreen+0x64>)
 8001ce8:	18d2      	adds	r2, r2, r3
 8001cea:	2380      	movs	r3, #128	; 0x80
 8001cec:	2140      	movs	r1, #64	; 0x40
 8001cee:	2078      	movs	r0, #120	; 0x78
 8001cf0:	f000 f976 	bl	8001fe0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001cf4:	1dfb      	adds	r3, r7, #7
 8001cf6:	781a      	ldrb	r2, [r3, #0]
 8001cf8:	1dfb      	adds	r3, r7, #7
 8001cfa:	3201      	adds	r2, #1
 8001cfc:	701a      	strb	r2, [r3, #0]
 8001cfe:	1dfb      	adds	r3, r7, #7
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b07      	cmp	r3, #7
 8001d04:	d9d9      	bls.n	8001cba <SSD1306_UpdateScreen+0xe>
	}
}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	46c0      	nop			; (mov r8, r8)
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b002      	add	sp, #8
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	200000f0 	.word	0x200000f0

08001d14 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	0002      	movs	r2, r0
 8001d1c:	1dfb      	adds	r3, r7, #7
 8001d1e:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001d20:	1dfb      	adds	r3, r7, #7
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <SSD1306_Fill+0x18>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	e000      	b.n	8001d2e <SSD1306_Fill+0x1a>
 8001d2c:	23ff      	movs	r3, #255	; 0xff
 8001d2e:	2280      	movs	r2, #128	; 0x80
 8001d30:	00d2      	lsls	r2, r2, #3
 8001d32:	4804      	ldr	r0, [pc, #16]	; (8001d44 <SSD1306_Fill+0x30>)
 8001d34:	0019      	movs	r1, r3
 8001d36:	f003 fac7 	bl	80052c8 <memset>
}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	b002      	add	sp, #8
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	200000f0 	.word	0x200000f0

08001d48 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001d48:	b590      	push	{r4, r7, lr}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	0004      	movs	r4, r0
 8001d50:	0008      	movs	r0, r1
 8001d52:	0011      	movs	r1, r2
 8001d54:	1dbb      	adds	r3, r7, #6
 8001d56:	1c22      	adds	r2, r4, #0
 8001d58:	801a      	strh	r2, [r3, #0]
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	1c02      	adds	r2, r0, #0
 8001d5e:	801a      	strh	r2, [r3, #0]
 8001d60:	1cfb      	adds	r3, r7, #3
 8001d62:	1c0a      	adds	r2, r1, #0
 8001d64:	701a      	strb	r2, [r3, #0]
	if (
 8001d66:	1dbb      	adds	r3, r7, #6
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	2b7f      	cmp	r3, #127	; 0x7f
 8001d6c:	d852      	bhi.n	8001e14 <SSD1306_DrawPixel+0xcc>
		x >= SSD1306_WIDTH ||
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	881b      	ldrh	r3, [r3, #0]
 8001d72:	2b3f      	cmp	r3, #63	; 0x3f
 8001d74:	d84e      	bhi.n	8001e14 <SSD1306_DrawPixel+0xcc>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001d76:	4b29      	ldr	r3, [pc, #164]	; (8001e1c <SSD1306_DrawPixel+0xd4>)
 8001d78:	791b      	ldrb	r3, [r3, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d006      	beq.n	8001d8c <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 8001d7e:	1cfb      	adds	r3, r7, #3
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	425a      	negs	r2, r3
 8001d84:	4153      	adcs	r3, r2
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	1cfb      	adds	r3, r7, #3
 8001d8a:	701a      	strb	r2, [r3, #0]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001d8c:	1cfb      	adds	r3, r7, #3
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d11e      	bne.n	8001dd2 <SSD1306_DrawPixel+0x8a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001d94:	1dbb      	adds	r3, r7, #6
 8001d96:	881a      	ldrh	r2, [r3, #0]
 8001d98:	1d3b      	adds	r3, r7, #4
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	08db      	lsrs	r3, r3, #3
 8001d9e:	b298      	uxth	r0, r3
 8001da0:	0003      	movs	r3, r0
 8001da2:	01db      	lsls	r3, r3, #7
 8001da4:	18d3      	adds	r3, r2, r3
 8001da6:	4a1e      	ldr	r2, [pc, #120]	; (8001e20 <SSD1306_DrawPixel+0xd8>)
 8001da8:	5cd3      	ldrb	r3, [r2, r3]
 8001daa:	b25a      	sxtb	r2, r3
 8001dac:	1d3b      	adds	r3, r7, #4
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	2107      	movs	r1, #7
 8001db2:	400b      	ands	r3, r1
 8001db4:	2101      	movs	r1, #1
 8001db6:	4099      	lsls	r1, r3
 8001db8:	000b      	movs	r3, r1
 8001dba:	b25b      	sxtb	r3, r3
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	b259      	sxtb	r1, r3
 8001dc0:	1dbb      	adds	r3, r7, #6
 8001dc2:	881a      	ldrh	r2, [r3, #0]
 8001dc4:	0003      	movs	r3, r0
 8001dc6:	01db      	lsls	r3, r3, #7
 8001dc8:	18d3      	adds	r3, r2, r3
 8001dca:	b2c9      	uxtb	r1, r1
 8001dcc:	4a14      	ldr	r2, [pc, #80]	; (8001e20 <SSD1306_DrawPixel+0xd8>)
 8001dce:	54d1      	strb	r1, [r2, r3]
 8001dd0:	e021      	b.n	8001e16 <SSD1306_DrawPixel+0xce>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001dd2:	1dbb      	adds	r3, r7, #6
 8001dd4:	881a      	ldrh	r2, [r3, #0]
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	08db      	lsrs	r3, r3, #3
 8001ddc:	b298      	uxth	r0, r3
 8001dde:	0003      	movs	r3, r0
 8001de0:	01db      	lsls	r3, r3, #7
 8001de2:	18d3      	adds	r3, r2, r3
 8001de4:	4a0e      	ldr	r2, [pc, #56]	; (8001e20 <SSD1306_DrawPixel+0xd8>)
 8001de6:	5cd3      	ldrb	r3, [r2, r3]
 8001de8:	b25b      	sxtb	r3, r3
 8001dea:	1d3a      	adds	r2, r7, #4
 8001dec:	8812      	ldrh	r2, [r2, #0]
 8001dee:	2107      	movs	r1, #7
 8001df0:	400a      	ands	r2, r1
 8001df2:	2101      	movs	r1, #1
 8001df4:	4091      	lsls	r1, r2
 8001df6:	000a      	movs	r2, r1
 8001df8:	b252      	sxtb	r2, r2
 8001dfa:	43d2      	mvns	r2, r2
 8001dfc:	b252      	sxtb	r2, r2
 8001dfe:	4013      	ands	r3, r2
 8001e00:	b259      	sxtb	r1, r3
 8001e02:	1dbb      	adds	r3, r7, #6
 8001e04:	881a      	ldrh	r2, [r3, #0]
 8001e06:	0003      	movs	r3, r0
 8001e08:	01db      	lsls	r3, r3, #7
 8001e0a:	18d3      	adds	r3, r2, r3
 8001e0c:	b2c9      	uxtb	r1, r1
 8001e0e:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <SSD1306_DrawPixel+0xd8>)
 8001e10:	54d1      	strb	r1, [r2, r3]
 8001e12:	e000      	b.n	8001e16 <SSD1306_DrawPixel+0xce>
		return;
 8001e14:	46c0      	nop			; (mov r8, r8)
	}
}
 8001e16:	46bd      	mov	sp, r7
 8001e18:	b003      	add	sp, #12
 8001e1a:	bd90      	pop	{r4, r7, pc}
 8001e1c:	200004f0 	.word	0x200004f0
 8001e20:	200000f0 	.word	0x200000f0

08001e24 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	0002      	movs	r2, r0
 8001e2c:	1dbb      	adds	r3, r7, #6
 8001e2e:	801a      	strh	r2, [r3, #0]
 8001e30:	1d3b      	adds	r3, r7, #4
 8001e32:	1c0a      	adds	r2, r1, #0
 8001e34:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <SSD1306_GotoXY+0x2c>)
 8001e38:	1dba      	adds	r2, r7, #6
 8001e3a:	8812      	ldrh	r2, [r2, #0]
 8001e3c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8001e3e:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <SSD1306_GotoXY+0x2c>)
 8001e40:	1d3a      	adds	r2, r7, #4
 8001e42:	8812      	ldrh	r2, [r2, #0]
 8001e44:	805a      	strh	r2, [r3, #2]
}
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	b002      	add	sp, #8
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	200004f0 	.word	0x200004f0

08001e54 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6039      	str	r1, [r7, #0]
 8001e5c:	0011      	movs	r1, r2
 8001e5e:	1dfb      	adds	r3, r7, #7
 8001e60:	1c02      	adds	r2, r0, #0
 8001e62:	701a      	strb	r2, [r3, #0]
 8001e64:	1dbb      	adds	r3, r7, #6
 8001e66:	1c0a      	adds	r2, r1, #0
 8001e68:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001e6a:	4b3a      	ldr	r3, [pc, #232]	; (8001f54 <SSD1306_Putc+0x100>)
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	001a      	movs	r2, r3
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	18d3      	adds	r3, r2, r3
	if (
 8001e76:	2b7f      	cmp	r3, #127	; 0x7f
 8001e78:	dc07      	bgt.n	8001e8a <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001e7a:	4b36      	ldr	r3, [pc, #216]	; (8001f54 <SSD1306_Putc+0x100>)
 8001e7c:	885b      	ldrh	r3, [r3, #2]
 8001e7e:	001a      	movs	r2, r3
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	785b      	ldrb	r3, [r3, #1]
 8001e84:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001e86:	2b3f      	cmp	r3, #63	; 0x3f
 8001e88:	dd01      	ble.n	8001e8e <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e05e      	b.n	8001f4c <SSD1306_Putc+0xf8>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	e04a      	b.n	8001f2a <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	1dfb      	adds	r3, r7, #7
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	3b20      	subs	r3, #32
 8001e9e:	6839      	ldr	r1, [r7, #0]
 8001ea0:	7849      	ldrb	r1, [r1, #1]
 8001ea2:	434b      	muls	r3, r1
 8001ea4:	0019      	movs	r1, r3
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	18cb      	adds	r3, r1, r3
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	18d3      	adds	r3, r2, r3
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	e02f      	b.n	8001f18 <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	2380      	movs	r3, #128	; 0x80
 8001ec0:	021b      	lsls	r3, r3, #8
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d011      	beq.n	8001eea <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001ec6:	4b23      	ldr	r3, [pc, #140]	; (8001f54 <SSD1306_Putc+0x100>)
 8001ec8:	881a      	ldrh	r2, [r3, #0]
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	18d3      	adds	r3, r2, r3
 8001ed0:	b298      	uxth	r0, r3
 8001ed2:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <SSD1306_Putc+0x100>)
 8001ed4:	885a      	ldrh	r2, [r3, #2]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	18d3      	adds	r3, r2, r3
 8001edc:	b299      	uxth	r1, r3
 8001ede:	1dbb      	adds	r3, r7, #6
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	001a      	movs	r2, r3
 8001ee4:	f7ff ff30 	bl	8001d48 <SSD1306_DrawPixel>
 8001ee8:	e013      	b.n	8001f12 <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001eea:	4b1a      	ldr	r3, [pc, #104]	; (8001f54 <SSD1306_Putc+0x100>)
 8001eec:	881a      	ldrh	r2, [r3, #0]
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	18d3      	adds	r3, r2, r3
 8001ef4:	b298      	uxth	r0, r3
 8001ef6:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <SSD1306_Putc+0x100>)
 8001ef8:	885a      	ldrh	r2, [r3, #2]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	18d3      	adds	r3, r2, r3
 8001f00:	b299      	uxth	r1, r3
 8001f02:	1dbb      	adds	r3, r7, #6
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	425a      	negs	r2, r3
 8001f08:	4153      	adcs	r3, r2
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	001a      	movs	r2, r3
 8001f0e:	f7ff ff1b 	bl	8001d48 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	3301      	adds	r3, #1
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	001a      	movs	r2, r3
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d3c9      	bcc.n	8001eb8 <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	3301      	adds	r3, #1
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	785b      	ldrb	r3, [r3, #1]
 8001f2e:	001a      	movs	r2, r3
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d3ae      	bcc.n	8001e94 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001f36:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <SSD1306_Putc+0x100>)
 8001f38:	881a      	ldrh	r2, [r3, #0]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	18d3      	adds	r3, r2, r3
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <SSD1306_Putc+0x100>)
 8001f46:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001f48:	1dfb      	adds	r3, r7, #7
 8001f4a:	781b      	ldrb	r3, [r3, #0]
}
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	b006      	add	sp, #24
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	200004f0 	.word	0x200004f0

08001f58 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	1dfb      	adds	r3, r7, #7
 8001f64:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 8001f66:	e013      	b.n	8001f90 <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	7818      	ldrb	r0, [r3, #0]
 8001f6c:	1dfb      	adds	r3, r7, #7
 8001f6e:	781a      	ldrb	r2, [r3, #0]
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	0019      	movs	r1, r3
 8001f74:	f7ff ff6e 	bl	8001e54 <SSD1306_Putc>
 8001f78:	0003      	movs	r3, r0
 8001f7a:	001a      	movs	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d002      	beq.n	8001f8a <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	e008      	b.n	8001f9c <SSD1306_Puts+0x44>
		}
		
		/* Increase string pointer */
		str++;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1e7      	bne.n	8001f68 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	781b      	ldrb	r3, [r3, #0]
}
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	b004      	add	sp, #16
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f7ff feb3 	bl	8001d14 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001fae:	f7ff fe7d 	bl	8001cac <SSD1306_UpdateScreen>
}
 8001fb2:	46c0      	nop			; (mov r8, r8)
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001fbe:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <ssd1306_I2C_Init+0x24>)
 8001fc0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001fc2:	e002      	b.n	8001fca <ssd1306_I2C_Init+0x12>
		p--;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1f9      	bne.n	8001fc4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001fd0:	46c0      	nop			; (mov r8, r8)
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	b002      	add	sp, #8
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	0003d090 	.word	0x0003d090

08001fe0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001fe0:	b590      	push	{r4, r7, lr}
 8001fe2:	b0c7      	sub	sp, #284	; 0x11c
 8001fe4:	af02      	add	r7, sp, #8
 8001fe6:	0004      	movs	r4, r0
 8001fe8:	0008      	movs	r0, r1
 8001fea:	603a      	str	r2, [r7, #0]
 8001fec:	0019      	movs	r1, r3
 8001fee:	4b36      	ldr	r3, [pc, #216]	; (80020c8 <ssd1306_I2C_WriteMulti+0xe8>)
 8001ff0:	2288      	movs	r2, #136	; 0x88
 8001ff2:	0052      	lsls	r2, r2, #1
 8001ff4:	4694      	mov	ip, r2
 8001ff6:	44bc      	add	ip, r7
 8001ff8:	4463      	add	r3, ip
 8001ffa:	1c22      	adds	r2, r4, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
 8001ffe:	4b33      	ldr	r3, [pc, #204]	; (80020cc <ssd1306_I2C_WriteMulti+0xec>)
 8002000:	2288      	movs	r2, #136	; 0x88
 8002002:	0052      	lsls	r2, r2, #1
 8002004:	4694      	mov	ip, r2
 8002006:	44bc      	add	ip, r7
 8002008:	4463      	add	r3, ip
 800200a:	1c02      	adds	r2, r0, #0
 800200c:	701a      	strb	r2, [r3, #0]
 800200e:	4b30      	ldr	r3, [pc, #192]	; (80020d0 <ssd1306_I2C_WriteMulti+0xf0>)
 8002010:	2288      	movs	r2, #136	; 0x88
 8002012:	0052      	lsls	r2, r2, #1
 8002014:	4694      	mov	ip, r2
 8002016:	44bc      	add	ip, r7
 8002018:	4463      	add	r3, ip
 800201a:	1c0a      	adds	r2, r1, #0
 800201c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800201e:	4b2d      	ldr	r3, [pc, #180]	; (80020d4 <ssd1306_I2C_WriteMulti+0xf4>)
 8002020:	2288      	movs	r2, #136	; 0x88
 8002022:	0052      	lsls	r2, r2, #1
 8002024:	4694      	mov	ip, r2
 8002026:	44bc      	add	ip, r7
 8002028:	4463      	add	r3, ip
 800202a:	4a28      	ldr	r2, [pc, #160]	; (80020cc <ssd1306_I2C_WriteMulti+0xec>)
 800202c:	2188      	movs	r1, #136	; 0x88
 800202e:	0049      	lsls	r1, r1, #1
 8002030:	468c      	mov	ip, r1
 8002032:	44bc      	add	ip, r7
 8002034:	4462      	add	r2, ip
 8002036:	7812      	ldrb	r2, [r2, #0]
 8002038:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800203a:	2310      	movs	r3, #16
 800203c:	33ff      	adds	r3, #255	; 0xff
 800203e:	18fb      	adds	r3, r7, r3
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]
 8002044:	e015      	b.n	8002072 <ssd1306_I2C_WriteMulti+0x92>
dt[i+1] = data[i];
 8002046:	2010      	movs	r0, #16
 8002048:	30ff      	adds	r0, #255	; 0xff
 800204a:	183b      	adds	r3, r7, r0
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	18d2      	adds	r2, r2, r3
 8002052:	183b      	adds	r3, r7, r0
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	3301      	adds	r3, #1
 8002058:	7811      	ldrb	r1, [r2, #0]
 800205a:	4a1e      	ldr	r2, [pc, #120]	; (80020d4 <ssd1306_I2C_WriteMulti+0xf4>)
 800205c:	2488      	movs	r4, #136	; 0x88
 800205e:	0064      	lsls	r4, r4, #1
 8002060:	46a4      	mov	ip, r4
 8002062:	44bc      	add	ip, r7
 8002064:	4462      	add	r2, ip
 8002066:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002068:	183b      	adds	r3, r7, r0
 800206a:	781a      	ldrb	r2, [r3, #0]
 800206c:	183b      	adds	r3, r7, r0
 800206e:	3201      	adds	r2, #1
 8002070:	701a      	strb	r2, [r3, #0]
 8002072:	2310      	movs	r3, #16
 8002074:	33ff      	adds	r3, #255	; 0xff
 8002076:	18fb      	adds	r3, r7, r3
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	b29b      	uxth	r3, r3
 800207c:	4a14      	ldr	r2, [pc, #80]	; (80020d0 <ssd1306_I2C_WriteMulti+0xf0>)
 800207e:	2188      	movs	r1, #136	; 0x88
 8002080:	0049      	lsls	r1, r1, #1
 8002082:	468c      	mov	ip, r1
 8002084:	44bc      	add	ip, r7
 8002086:	4462      	add	r2, ip
 8002088:	8812      	ldrh	r2, [r2, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d8db      	bhi.n	8002046 <ssd1306_I2C_WriteMulti+0x66>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800208e:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <ssd1306_I2C_WriteMulti+0xe8>)
 8002090:	2288      	movs	r2, #136	; 0x88
 8002092:	0052      	lsls	r2, r2, #1
 8002094:	4694      	mov	ip, r2
 8002096:	44bc      	add	ip, r7
 8002098:	4463      	add	r3, ip
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	b299      	uxth	r1, r3
 800209e:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <ssd1306_I2C_WriteMulti+0xf0>)
 80020a0:	2288      	movs	r2, #136	; 0x88
 80020a2:	0052      	lsls	r2, r2, #1
 80020a4:	4694      	mov	ip, r2
 80020a6:	44bc      	add	ip, r7
 80020a8:	4463      	add	r3, ip
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	3301      	adds	r3, #1
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	220c      	movs	r2, #12
 80020b2:	18ba      	adds	r2, r7, r2
 80020b4:	4808      	ldr	r0, [pc, #32]	; (80020d8 <ssd1306_I2C_WriteMulti+0xf8>)
 80020b6:	240a      	movs	r4, #10
 80020b8:	9400      	str	r4, [sp, #0]
 80020ba:	f001 f93f 	bl	800333c <HAL_I2C_Master_Transmit>
}
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b045      	add	sp, #276	; 0x114
 80020c4:	bd90      	pop	{r4, r7, pc}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	fffffef7 	.word	0xfffffef7
 80020cc:	fffffef6 	.word	0xfffffef6
 80020d0:	fffffef4 	.word	0xfffffef4
 80020d4:	fffffefc 	.word	0xfffffefc
 80020d8:	200005cc 	.word	0x200005cc

080020dc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80020dc:	b590      	push	{r4, r7, lr}
 80020de:	b087      	sub	sp, #28
 80020e0:	af02      	add	r7, sp, #8
 80020e2:	0004      	movs	r4, r0
 80020e4:	0008      	movs	r0, r1
 80020e6:	0011      	movs	r1, r2
 80020e8:	1dfb      	adds	r3, r7, #7
 80020ea:	1c22      	adds	r2, r4, #0
 80020ec:	701a      	strb	r2, [r3, #0]
 80020ee:	1dbb      	adds	r3, r7, #6
 80020f0:	1c02      	adds	r2, r0, #0
 80020f2:	701a      	strb	r2, [r3, #0]
 80020f4:	1d7b      	adds	r3, r7, #5
 80020f6:	1c0a      	adds	r2, r1, #0
 80020f8:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 80020fa:	200c      	movs	r0, #12
 80020fc:	183b      	adds	r3, r7, r0
 80020fe:	1dba      	adds	r2, r7, #6
 8002100:	7812      	ldrb	r2, [r2, #0]
 8002102:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 8002104:	183b      	adds	r3, r7, r0
 8002106:	1d7a      	adds	r2, r7, #5
 8002108:	7812      	ldrb	r2, [r2, #0]
 800210a:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800210c:	1dfb      	adds	r3, r7, #7
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	b299      	uxth	r1, r3
 8002112:	183a      	adds	r2, r7, r0
 8002114:	4804      	ldr	r0, [pc, #16]	; (8002128 <ssd1306_I2C_Write+0x4c>)
 8002116:	230a      	movs	r3, #10
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	2302      	movs	r3, #2
 800211c:	f001 f90e 	bl	800333c <HAL_I2C_Master_Transmit>
}
 8002120:	46c0      	nop			; (mov r8, r8)
 8002122:	46bd      	mov	sp, r7
 8002124:	b005      	add	sp, #20
 8002126:	bd90      	pop	{r4, r7, pc}
 8002128:	200005cc 	.word	0x200005cc

0800212c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002132:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <HAL_MspInit+0x44>)
 8002134:	699a      	ldr	r2, [r3, #24]
 8002136:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <HAL_MspInit+0x44>)
 8002138:	2101      	movs	r1, #1
 800213a:	430a      	orrs	r2, r1
 800213c:	619a      	str	r2, [r3, #24]
 800213e:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <HAL_MspInit+0x44>)
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	2201      	movs	r2, #1
 8002144:	4013      	ands	r3, r2
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800214a:	4b09      	ldr	r3, [pc, #36]	; (8002170 <HAL_MspInit+0x44>)
 800214c:	69da      	ldr	r2, [r3, #28]
 800214e:	4b08      	ldr	r3, [pc, #32]	; (8002170 <HAL_MspInit+0x44>)
 8002150:	2180      	movs	r1, #128	; 0x80
 8002152:	0549      	lsls	r1, r1, #21
 8002154:	430a      	orrs	r2, r1
 8002156:	61da      	str	r2, [r3, #28]
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <HAL_MspInit+0x44>)
 800215a:	69da      	ldr	r2, [r3, #28]
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	055b      	lsls	r3, r3, #21
 8002160:	4013      	ands	r3, r2
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	46bd      	mov	sp, r7
 800216a:	b002      	add	sp, #8
 800216c:	bd80      	pop	{r7, pc}
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	40021000 	.word	0x40021000

08002174 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002174:	b590      	push	{r4, r7, lr}
 8002176:	b08b      	sub	sp, #44	; 0x2c
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217c:	2414      	movs	r4, #20
 800217e:	193b      	adds	r3, r7, r4
 8002180:	0018      	movs	r0, r3
 8002182:	2314      	movs	r3, #20
 8002184:	001a      	movs	r2, r3
 8002186:	2100      	movs	r1, #0
 8002188:	f003 f89e 	bl	80052c8 <memset>
  if(hi2c->Instance==I2C1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a1c      	ldr	r2, [pc, #112]	; (8002204 <HAL_I2C_MspInit+0x90>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d132      	bne.n	80021fc <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002196:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <HAL_I2C_MspInit+0x94>)
 8002198:	695a      	ldr	r2, [r3, #20]
 800219a:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_I2C_MspInit+0x94>)
 800219c:	2180      	movs	r1, #128	; 0x80
 800219e:	02c9      	lsls	r1, r1, #11
 80021a0:	430a      	orrs	r2, r1
 80021a2:	615a      	str	r2, [r3, #20]
 80021a4:	4b18      	ldr	r3, [pc, #96]	; (8002208 <HAL_I2C_MspInit+0x94>)
 80021a6:	695a      	ldr	r2, [r3, #20]
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	02db      	lsls	r3, r3, #11
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021b2:	193b      	adds	r3, r7, r4
 80021b4:	22c0      	movs	r2, #192	; 0xc0
 80021b6:	0092      	lsls	r2, r2, #2
 80021b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021ba:	0021      	movs	r1, r4
 80021bc:	187b      	adds	r3, r7, r1
 80021be:	2212      	movs	r2, #18
 80021c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021c2:	187b      	adds	r3, r7, r1
 80021c4:	2201      	movs	r2, #1
 80021c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021c8:	187b      	adds	r3, r7, r1
 80021ca:	2203      	movs	r2, #3
 80021cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80021ce:	187b      	adds	r3, r7, r1
 80021d0:	2201      	movs	r2, #1
 80021d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d4:	187b      	adds	r3, r7, r1
 80021d6:	4a0d      	ldr	r2, [pc, #52]	; (800220c <HAL_I2C_MspInit+0x98>)
 80021d8:	0019      	movs	r1, r3
 80021da:	0010      	movs	r0, r2
 80021dc:	f000 fdba 	bl	8002d54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021e0:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_I2C_MspInit+0x94>)
 80021e2:	69da      	ldr	r2, [r3, #28]
 80021e4:	4b08      	ldr	r3, [pc, #32]	; (8002208 <HAL_I2C_MspInit+0x94>)
 80021e6:	2180      	movs	r1, #128	; 0x80
 80021e8:	0389      	lsls	r1, r1, #14
 80021ea:	430a      	orrs	r2, r1
 80021ec:	61da      	str	r2, [r3, #28]
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <HAL_I2C_MspInit+0x94>)
 80021f0:	69da      	ldr	r2, [r3, #28]
 80021f2:	2380      	movs	r3, #128	; 0x80
 80021f4:	039b      	lsls	r3, r3, #14
 80021f6:	4013      	ands	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021fc:	46c0      	nop			; (mov r8, r8)
 80021fe:	46bd      	mov	sp, r7
 8002200:	b00b      	add	sp, #44	; 0x2c
 8002202:	bd90      	pop	{r4, r7, pc}
 8002204:	40005400 	.word	0x40005400
 8002208:	40021000 	.word	0x40021000
 800220c:	48000400 	.word	0x48000400

08002210 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002210:	b590      	push	{r4, r7, lr}
 8002212:	b08d      	sub	sp, #52	; 0x34
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	241c      	movs	r4, #28
 800221a:	193b      	adds	r3, r7, r4
 800221c:	0018      	movs	r0, r3
 800221e:	2314      	movs	r3, #20
 8002220:	001a      	movs	r2, r3
 8002222:	2100      	movs	r1, #0
 8002224:	f003 f850 	bl	80052c8 <memset>
  if(huart->Instance==USART1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a5f      	ldr	r2, [pc, #380]	; (80023ac <HAL_UART_MspInit+0x19c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d15a      	bne.n	80022e8 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002232:	4b5f      	ldr	r3, [pc, #380]	; (80023b0 <HAL_UART_MspInit+0x1a0>)
 8002234:	699a      	ldr	r2, [r3, #24]
 8002236:	4b5e      	ldr	r3, [pc, #376]	; (80023b0 <HAL_UART_MspInit+0x1a0>)
 8002238:	2180      	movs	r1, #128	; 0x80
 800223a:	01c9      	lsls	r1, r1, #7
 800223c:	430a      	orrs	r2, r1
 800223e:	619a      	str	r2, [r3, #24]
 8002240:	4b5b      	ldr	r3, [pc, #364]	; (80023b0 <HAL_UART_MspInit+0x1a0>)
 8002242:	699a      	ldr	r2, [r3, #24]
 8002244:	2380      	movs	r3, #128	; 0x80
 8002246:	01db      	lsls	r3, r3, #7
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
 800224c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224e:	4b58      	ldr	r3, [pc, #352]	; (80023b0 <HAL_UART_MspInit+0x1a0>)
 8002250:	695a      	ldr	r2, [r3, #20]
 8002252:	4b57      	ldr	r3, [pc, #348]	; (80023b0 <HAL_UART_MspInit+0x1a0>)
 8002254:	2180      	movs	r1, #128	; 0x80
 8002256:	0289      	lsls	r1, r1, #10
 8002258:	430a      	orrs	r2, r1
 800225a:	615a      	str	r2, [r3, #20]
 800225c:	4b54      	ldr	r3, [pc, #336]	; (80023b0 <HAL_UART_MspInit+0x1a0>)
 800225e:	695a      	ldr	r2, [r3, #20]
 8002260:	2380      	movs	r3, #128	; 0x80
 8002262:	029b      	lsls	r3, r3, #10
 8002264:	4013      	ands	r3, r2
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800226a:	193b      	adds	r3, r7, r4
 800226c:	22c0      	movs	r2, #192	; 0xc0
 800226e:	00d2      	lsls	r2, r2, #3
 8002270:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002272:	0021      	movs	r1, r4
 8002274:	187b      	adds	r3, r7, r1
 8002276:	2202      	movs	r2, #2
 8002278:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	187b      	adds	r3, r7, r1
 800227c:	2200      	movs	r2, #0
 800227e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002280:	187b      	adds	r3, r7, r1
 8002282:	2203      	movs	r2, #3
 8002284:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002286:	187b      	adds	r3, r7, r1
 8002288:	2201      	movs	r2, #1
 800228a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228c:	187a      	adds	r2, r7, r1
 800228e:	2390      	movs	r3, #144	; 0x90
 8002290:	05db      	lsls	r3, r3, #23
 8002292:	0011      	movs	r1, r2
 8002294:	0018      	movs	r0, r3
 8002296:	f000 fd5d 	bl	8002d54 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 800229a:	4b46      	ldr	r3, [pc, #280]	; (80023b4 <HAL_UART_MspInit+0x1a4>)
 800229c:	4a46      	ldr	r2, [pc, #280]	; (80023b8 <HAL_UART_MspInit+0x1a8>)
 800229e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022a0:	4b44      	ldr	r3, [pc, #272]	; (80023b4 <HAL_UART_MspInit+0x1a4>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022a6:	4b43      	ldr	r3, [pc, #268]	; (80023b4 <HAL_UART_MspInit+0x1a4>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022ac:	4b41      	ldr	r3, [pc, #260]	; (80023b4 <HAL_UART_MspInit+0x1a4>)
 80022ae:	2280      	movs	r2, #128	; 0x80
 80022b0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022b2:	4b40      	ldr	r3, [pc, #256]	; (80023b4 <HAL_UART_MspInit+0x1a4>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022b8:	4b3e      	ldr	r3, [pc, #248]	; (80023b4 <HAL_UART_MspInit+0x1a4>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80022be:	4b3d      	ldr	r3, [pc, #244]	; (80023b4 <HAL_UART_MspInit+0x1a4>)
 80022c0:	2220      	movs	r2, #32
 80022c2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022c4:	4b3b      	ldr	r3, [pc, #236]	; (80023b4 <HAL_UART_MspInit+0x1a4>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80022ca:	4b3a      	ldr	r3, [pc, #232]	; (80023b4 <HAL_UART_MspInit+0x1a4>)
 80022cc:	0018      	movs	r0, r3
 80022ce:	f000 fb1d 	bl	800290c <HAL_DMA_Init>
 80022d2:	1e03      	subs	r3, r0, #0
 80022d4:	d001      	beq.n	80022da <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80022d6:	f7ff fc1f 	bl	8001b18 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a35      	ldr	r2, [pc, #212]	; (80023b4 <HAL_UART_MspInit+0x1a4>)
 80022de:	671a      	str	r2, [r3, #112]	; 0x70
 80022e0:	4b34      	ldr	r3, [pc, #208]	; (80023b4 <HAL_UART_MspInit+0x1a4>)
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022e6:	e05d      	b.n	80023a4 <HAL_UART_MspInit+0x194>
  else if(huart->Instance==USART2)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a33      	ldr	r2, [pc, #204]	; (80023bc <HAL_UART_MspInit+0x1ac>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d158      	bne.n	80023a4 <HAL_UART_MspInit+0x194>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022f2:	4b2f      	ldr	r3, [pc, #188]	; (80023b0 <HAL_UART_MspInit+0x1a0>)
 80022f4:	69da      	ldr	r2, [r3, #28]
 80022f6:	4b2e      	ldr	r3, [pc, #184]	; (80023b0 <HAL_UART_MspInit+0x1a0>)
 80022f8:	2180      	movs	r1, #128	; 0x80
 80022fa:	0289      	lsls	r1, r1, #10
 80022fc:	430a      	orrs	r2, r1
 80022fe:	61da      	str	r2, [r3, #28]
 8002300:	4b2b      	ldr	r3, [pc, #172]	; (80023b0 <HAL_UART_MspInit+0x1a0>)
 8002302:	69da      	ldr	r2, [r3, #28]
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	029b      	lsls	r3, r3, #10
 8002308:	4013      	ands	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230e:	4b28      	ldr	r3, [pc, #160]	; (80023b0 <HAL_UART_MspInit+0x1a0>)
 8002310:	695a      	ldr	r2, [r3, #20]
 8002312:	4b27      	ldr	r3, [pc, #156]	; (80023b0 <HAL_UART_MspInit+0x1a0>)
 8002314:	2180      	movs	r1, #128	; 0x80
 8002316:	0289      	lsls	r1, r1, #10
 8002318:	430a      	orrs	r2, r1
 800231a:	615a      	str	r2, [r3, #20]
 800231c:	4b24      	ldr	r3, [pc, #144]	; (80023b0 <HAL_UART_MspInit+0x1a0>)
 800231e:	695a      	ldr	r2, [r3, #20]
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	029b      	lsls	r3, r3, #10
 8002324:	4013      	ands	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800232a:	211c      	movs	r1, #28
 800232c:	187b      	adds	r3, r7, r1
 800232e:	220c      	movs	r2, #12
 8002330:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002332:	187b      	adds	r3, r7, r1
 8002334:	2202      	movs	r2, #2
 8002336:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	187b      	adds	r3, r7, r1
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233e:	187b      	adds	r3, r7, r1
 8002340:	2200      	movs	r2, #0
 8002342:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002344:	187b      	adds	r3, r7, r1
 8002346:	2201      	movs	r2, #1
 8002348:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234a:	187a      	adds	r2, r7, r1
 800234c:	2390      	movs	r3, #144	; 0x90
 800234e:	05db      	lsls	r3, r3, #23
 8002350:	0011      	movs	r1, r2
 8002352:	0018      	movs	r0, r3
 8002354:	f000 fcfe 	bl	8002d54 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8002358:	4b19      	ldr	r3, [pc, #100]	; (80023c0 <HAL_UART_MspInit+0x1b0>)
 800235a:	4a1a      	ldr	r2, [pc, #104]	; (80023c4 <HAL_UART_MspInit+0x1b4>)
 800235c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800235e:	4b18      	ldr	r3, [pc, #96]	; (80023c0 <HAL_UART_MspInit+0x1b0>)
 8002360:	2200      	movs	r2, #0
 8002362:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002364:	4b16      	ldr	r3, [pc, #88]	; (80023c0 <HAL_UART_MspInit+0x1b0>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800236a:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <HAL_UART_MspInit+0x1b0>)
 800236c:	2280      	movs	r2, #128	; 0x80
 800236e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002370:	4b13      	ldr	r3, [pc, #76]	; (80023c0 <HAL_UART_MspInit+0x1b0>)
 8002372:	2200      	movs	r2, #0
 8002374:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002376:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <HAL_UART_MspInit+0x1b0>)
 8002378:	2200      	movs	r2, #0
 800237a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800237c:	4b10      	ldr	r3, [pc, #64]	; (80023c0 <HAL_UART_MspInit+0x1b0>)
 800237e:	2220      	movs	r2, #32
 8002380:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002382:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <HAL_UART_MspInit+0x1b0>)
 8002384:	2200      	movs	r2, #0
 8002386:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002388:	4b0d      	ldr	r3, [pc, #52]	; (80023c0 <HAL_UART_MspInit+0x1b0>)
 800238a:	0018      	movs	r0, r3
 800238c:	f000 fabe 	bl	800290c <HAL_DMA_Init>
 8002390:	1e03      	subs	r3, r0, #0
 8002392:	d001      	beq.n	8002398 <HAL_UART_MspInit+0x188>
      Error_Handler();
 8002394:	f7ff fbc0 	bl	8001b18 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a09      	ldr	r2, [pc, #36]	; (80023c0 <HAL_UART_MspInit+0x1b0>)
 800239c:	671a      	str	r2, [r3, #112]	; 0x70
 800239e:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <HAL_UART_MspInit+0x1b0>)
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80023a4:	46c0      	nop			; (mov r8, r8)
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b00d      	add	sp, #52	; 0x34
 80023aa:	bd90      	pop	{r4, r7, pc}
 80023ac:	40013800 	.word	0x40013800
 80023b0:	40021000 	.word	0x40021000
 80023b4:	20000618 	.word	0x20000618
 80023b8:	40020030 	.word	0x40020030
 80023bc:	40004400 	.word	0x40004400
 80023c0:	20000588 	.word	0x20000588
 80023c4:	40020058 	.word	0x40020058

080023c8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a18      	ldr	r2, [pc, #96]	; (8002438 <HAL_UART_MspDeInit+0x70>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d113      	bne.n	8002402 <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80023da:	4b18      	ldr	r3, [pc, #96]	; (800243c <HAL_UART_MspDeInit+0x74>)
 80023dc:	699a      	ldr	r2, [r3, #24]
 80023de:	4b17      	ldr	r3, [pc, #92]	; (800243c <HAL_UART_MspDeInit+0x74>)
 80023e0:	4917      	ldr	r1, [pc, #92]	; (8002440 <HAL_UART_MspDeInit+0x78>)
 80023e2:	400a      	ands	r2, r1
 80023e4:	619a      	str	r2, [r3, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80023e6:	23c0      	movs	r3, #192	; 0xc0
 80023e8:	00da      	lsls	r2, r3, #3
 80023ea:	2390      	movs	r3, #144	; 0x90
 80023ec:	05db      	lsls	r3, r3, #23
 80023ee:	0011      	movs	r1, r2
 80023f0:	0018      	movs	r0, r3
 80023f2:	f000 fe1f 	bl	8003034 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fa:	0018      	movs	r0, r3
 80023fc:	f000 face 	bl	800299c <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8002400:	e015      	b.n	800242e <HAL_UART_MspDeInit+0x66>
  else if(huart->Instance==USART2)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a0f      	ldr	r2, [pc, #60]	; (8002444 <HAL_UART_MspDeInit+0x7c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d110      	bne.n	800242e <HAL_UART_MspDeInit+0x66>
    __HAL_RCC_USART2_CLK_DISABLE();
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_UART_MspDeInit+0x74>)
 800240e:	69da      	ldr	r2, [r3, #28]
 8002410:	4b0a      	ldr	r3, [pc, #40]	; (800243c <HAL_UART_MspDeInit+0x74>)
 8002412:	490d      	ldr	r1, [pc, #52]	; (8002448 <HAL_UART_MspDeInit+0x80>)
 8002414:	400a      	ands	r2, r1
 8002416:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 8002418:	2390      	movs	r3, #144	; 0x90
 800241a:	05db      	lsls	r3, r3, #23
 800241c:	210c      	movs	r1, #12
 800241e:	0018      	movs	r0, r3
 8002420:	f000 fe08 	bl	8003034 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002428:	0018      	movs	r0, r3
 800242a:	f000 fab7 	bl	800299c <HAL_DMA_DeInit>
}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	46bd      	mov	sp, r7
 8002432:	b002      	add	sp, #8
 8002434:	bd80      	pop	{r7, pc}
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	40013800 	.word	0x40013800
 800243c:	40021000 	.word	0x40021000
 8002440:	ffffbfff 	.word	0xffffbfff
 8002444:	40004400 	.word	0x40004400
 8002448:	fffdffff 	.word	0xfffdffff

0800244c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002450:	46c0      	nop			; (mov r8, r8)
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800245a:	e7fe      	b.n	800245a <HardFault_Handler+0x4>

0800245c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002460:	46c0      	nop			; (mov r8, r8)
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002474:	f000 f92c 	bl	80026d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002478:	46c0      	nop			; (mov r8, r8)
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002484:	4b03      	ldr	r3, [pc, #12]	; (8002494 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002486:	0018      	movs	r0, r3
 8002488:	f000 fb6f 	bl	8002b6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800248c:	46c0      	nop			; (mov r8, r8)
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	20000618 	.word	0x20000618

08002498 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800249c:	4b03      	ldr	r3, [pc, #12]	; (80024ac <DMA1_Channel4_5_IRQHandler+0x14>)
 800249e:	0018      	movs	r0, r3
 80024a0:	f000 fb63 	bl	8002b6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80024a4:	46c0      	nop			; (mov r8, r8)
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	20000588 	.word	0x20000588

080024b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
	return 1;
 80024b4:	2301      	movs	r3, #1
}
 80024b6:	0018      	movs	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <_kill>:

int _kill(int pid, int sig)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024c6:	f002 fed5 	bl	8005274 <__errno>
 80024ca:	0003      	movs	r3, r0
 80024cc:	2216      	movs	r2, #22
 80024ce:	601a      	str	r2, [r3, #0]
	return -1;
 80024d0:	2301      	movs	r3, #1
 80024d2:	425b      	negs	r3, r3
}
 80024d4:	0018      	movs	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b002      	add	sp, #8
 80024da:	bd80      	pop	{r7, pc}

080024dc <_exit>:

void _exit (int status)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024e4:	2301      	movs	r3, #1
 80024e6:	425a      	negs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	0011      	movs	r1, r2
 80024ec:	0018      	movs	r0, r3
 80024ee:	f7ff ffe5 	bl	80024bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80024f2:	e7fe      	b.n	80024f2 <_exit+0x16>

080024f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	e00a      	b.n	800251c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002506:	e000      	b.n	800250a <_read+0x16>
 8002508:	bf00      	nop
 800250a:	0001      	movs	r1, r0
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	60ba      	str	r2, [r7, #8]
 8002512:	b2ca      	uxtb	r2, r1
 8002514:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	3301      	adds	r3, #1
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	429a      	cmp	r2, r3
 8002522:	dbf0      	blt.n	8002506 <_read+0x12>
	}

return len;
 8002524:	687b      	ldr	r3, [r7, #4]
}
 8002526:	0018      	movs	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	b006      	add	sp, #24
 800252c:	bd80      	pop	{r7, pc}

0800252e <_close>:
	}
	return len;
}

int _close(int file)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
	return -1;
 8002536:	2301      	movs	r3, #1
 8002538:	425b      	negs	r3, r3
}
 800253a:	0018      	movs	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	b002      	add	sp, #8
 8002540:	bd80      	pop	{r7, pc}

08002542 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	2280      	movs	r2, #128	; 0x80
 8002550:	0192      	lsls	r2, r2, #6
 8002552:	605a      	str	r2, [r3, #4]
	return 0;
 8002554:	2300      	movs	r3, #0
}
 8002556:	0018      	movs	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	b002      	add	sp, #8
 800255c:	bd80      	pop	{r7, pc}

0800255e <_isatty>:

int _isatty(int file)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
	return 1;
 8002566:	2301      	movs	r3, #1
}
 8002568:	0018      	movs	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	b002      	add	sp, #8
 800256e:	bd80      	pop	{r7, pc}

08002570 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
	return 0;
 800257c:	2300      	movs	r3, #0
}
 800257e:	0018      	movs	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	b004      	add	sp, #16
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002590:	4b11      	ldr	r3, [pc, #68]	; (80025d8 <_sbrk+0x50>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d102      	bne.n	800259e <_sbrk+0x16>
		heap_end = &end;
 8002598:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <_sbrk+0x50>)
 800259a:	4a10      	ldr	r2, [pc, #64]	; (80025dc <_sbrk+0x54>)
 800259c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800259e:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <_sbrk+0x50>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80025a4:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <_sbrk+0x50>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	18d2      	adds	r2, r2, r3
 80025ac:	466b      	mov	r3, sp
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d907      	bls.n	80025c2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80025b2:	f002 fe5f 	bl	8005274 <__errno>
 80025b6:	0003      	movs	r3, r0
 80025b8:	220c      	movs	r2, #12
 80025ba:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80025bc:	2301      	movs	r3, #1
 80025be:	425b      	negs	r3, r3
 80025c0:	e006      	b.n	80025d0 <_sbrk+0x48>
	}

	heap_end += incr;
 80025c2:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <_sbrk+0x50>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	18d2      	adds	r2, r2, r3
 80025ca:	4b03      	ldr	r3, [pc, #12]	; (80025d8 <_sbrk+0x50>)
 80025cc:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 80025ce:	68fb      	ldr	r3, [r7, #12]
}
 80025d0:	0018      	movs	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	b004      	add	sp, #16
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	200004f8 	.word	0x200004f8
 80025dc:	20000778 	.word	0x20000778

080025e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80025e4:	46c0      	nop			; (mov r8, r8)
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
	...

080025ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025ec:	480d      	ldr	r0, [pc, #52]	; (8002624 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025f0:	480d      	ldr	r0, [pc, #52]	; (8002628 <LoopForever+0x6>)
  ldr r1, =_edata
 80025f2:	490e      	ldr	r1, [pc, #56]	; (800262c <LoopForever+0xa>)
  ldr r2, =_sidata
 80025f4:	4a0e      	ldr	r2, [pc, #56]	; (8002630 <LoopForever+0xe>)
  movs r3, #0
 80025f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025f8:	e002      	b.n	8002600 <LoopCopyDataInit>

080025fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025fe:	3304      	adds	r3, #4

08002600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002604:	d3f9      	bcc.n	80025fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002606:	4a0b      	ldr	r2, [pc, #44]	; (8002634 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002608:	4c0b      	ldr	r4, [pc, #44]	; (8002638 <LoopForever+0x16>)
  movs r3, #0
 800260a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800260c:	e001      	b.n	8002612 <LoopFillZerobss>

0800260e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800260e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002610:	3204      	adds	r2, #4

08002612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002614:	d3fb      	bcc.n	800260e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002616:	f7ff ffe3 	bl	80025e0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800261a:	f002 fe31 	bl	8005280 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800261e:	f7ff f87f 	bl	8001720 <main>

08002622 <LoopForever>:

LoopForever:
    b LoopForever
 8002622:	e7fe      	b.n	8002622 <LoopForever>
  ldr   r0, =_estack
 8002624:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800262c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002630:	0800990c 	.word	0x0800990c
  ldr r2, =_sbss
 8002634:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002638:	20000778 	.word	0x20000778

0800263c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800263c:	e7fe      	b.n	800263c <ADC1_IRQHandler>
	...

08002640 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002644:	4b07      	ldr	r3, [pc, #28]	; (8002664 <HAL_Init+0x24>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_Init+0x24>)
 800264a:	2110      	movs	r1, #16
 800264c:	430a      	orrs	r2, r1
 800264e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002650:	2000      	movs	r0, #0
 8002652:	f000 f809 	bl	8002668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002656:	f7ff fd69 	bl	800212c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	0018      	movs	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	40022000 	.word	0x40022000

08002668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002668:	b590      	push	{r4, r7, lr}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002670:	4b14      	ldr	r3, [pc, #80]	; (80026c4 <HAL_InitTick+0x5c>)
 8002672:	681c      	ldr	r4, [r3, #0]
 8002674:	4b14      	ldr	r3, [pc, #80]	; (80026c8 <HAL_InitTick+0x60>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	0019      	movs	r1, r3
 800267a:	23fa      	movs	r3, #250	; 0xfa
 800267c:	0098      	lsls	r0, r3, #2
 800267e:	f7fd fd55 	bl	800012c <__udivsi3>
 8002682:	0003      	movs	r3, r0
 8002684:	0019      	movs	r1, r3
 8002686:	0020      	movs	r0, r4
 8002688:	f7fd fd50 	bl	800012c <__udivsi3>
 800268c:	0003      	movs	r3, r0
 800268e:	0018      	movs	r0, r3
 8002690:	f000 f92f 	bl	80028f2 <HAL_SYSTICK_Config>
 8002694:	1e03      	subs	r3, r0, #0
 8002696:	d001      	beq.n	800269c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e00f      	b.n	80026bc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b03      	cmp	r3, #3
 80026a0:	d80b      	bhi.n	80026ba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	2301      	movs	r3, #1
 80026a6:	425b      	negs	r3, r3
 80026a8:	2200      	movs	r2, #0
 80026aa:	0018      	movs	r0, r3
 80026ac:	f000 f8fc 	bl	80028a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026b0:	4b06      	ldr	r3, [pc, #24]	; (80026cc <HAL_InitTick+0x64>)
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	e000      	b.n	80026bc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
}
 80026bc:	0018      	movs	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	b003      	add	sp, #12
 80026c2:	bd90      	pop	{r4, r7, pc}
 80026c4:	2000001c 	.word	0x2000001c
 80026c8:	20000024 	.word	0x20000024
 80026cc:	20000020 	.word	0x20000020

080026d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <HAL_IncTick+0x1c>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	001a      	movs	r2, r3
 80026da:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <HAL_IncTick+0x20>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	18d2      	adds	r2, r2, r3
 80026e0:	4b03      	ldr	r3, [pc, #12]	; (80026f0 <HAL_IncTick+0x20>)
 80026e2:	601a      	str	r2, [r3, #0]
}
 80026e4:	46c0      	nop			; (mov r8, r8)
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	20000024 	.word	0x20000024
 80026f0:	20000764 	.word	0x20000764

080026f4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  return uwTick;
 80026f8:	4b02      	ldr	r3, [pc, #8]	; (8002704 <HAL_GetTick+0x10>)
 80026fa:	681b      	ldr	r3, [r3, #0]
}
 80026fc:	0018      	movs	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	20000764 	.word	0x20000764

08002708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002710:	f7ff fff0 	bl	80026f4 <HAL_GetTick>
 8002714:	0003      	movs	r3, r0
 8002716:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3301      	adds	r3, #1
 8002720:	d005      	beq.n	800272e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002722:	4b0a      	ldr	r3, [pc, #40]	; (800274c <HAL_Delay+0x44>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	001a      	movs	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	189b      	adds	r3, r3, r2
 800272c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	f7ff ffe0 	bl	80026f4 <HAL_GetTick>
 8002734:	0002      	movs	r2, r0
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	429a      	cmp	r2, r3
 800273e:	d8f7      	bhi.n	8002730 <HAL_Delay+0x28>
  {
  }
}
 8002740:	46c0      	nop			; (mov r8, r8)
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	46bd      	mov	sp, r7
 8002746:	b004      	add	sp, #16
 8002748:	bd80      	pop	{r7, pc}
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	20000024 	.word	0x20000024

08002750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	0002      	movs	r2, r0
 8002758:	1dfb      	adds	r3, r7, #7
 800275a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800275c:	1dfb      	adds	r3, r7, #7
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b7f      	cmp	r3, #127	; 0x7f
 8002762:	d809      	bhi.n	8002778 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002764:	1dfb      	adds	r3, r7, #7
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	001a      	movs	r2, r3
 800276a:	231f      	movs	r3, #31
 800276c:	401a      	ands	r2, r3
 800276e:	4b04      	ldr	r3, [pc, #16]	; (8002780 <__NVIC_EnableIRQ+0x30>)
 8002770:	2101      	movs	r1, #1
 8002772:	4091      	lsls	r1, r2
 8002774:	000a      	movs	r2, r1
 8002776:	601a      	str	r2, [r3, #0]
  }
}
 8002778:	46c0      	nop			; (mov r8, r8)
 800277a:	46bd      	mov	sp, r7
 800277c:	b002      	add	sp, #8
 800277e:	bd80      	pop	{r7, pc}
 8002780:	e000e100 	.word	0xe000e100

08002784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002784:	b590      	push	{r4, r7, lr}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	0002      	movs	r2, r0
 800278c:	6039      	str	r1, [r7, #0]
 800278e:	1dfb      	adds	r3, r7, #7
 8002790:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002792:	1dfb      	adds	r3, r7, #7
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b7f      	cmp	r3, #127	; 0x7f
 8002798:	d828      	bhi.n	80027ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800279a:	4a2f      	ldr	r2, [pc, #188]	; (8002858 <__NVIC_SetPriority+0xd4>)
 800279c:	1dfb      	adds	r3, r7, #7
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	b25b      	sxtb	r3, r3
 80027a2:	089b      	lsrs	r3, r3, #2
 80027a4:	33c0      	adds	r3, #192	; 0xc0
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	589b      	ldr	r3, [r3, r2]
 80027aa:	1dfa      	adds	r2, r7, #7
 80027ac:	7812      	ldrb	r2, [r2, #0]
 80027ae:	0011      	movs	r1, r2
 80027b0:	2203      	movs	r2, #3
 80027b2:	400a      	ands	r2, r1
 80027b4:	00d2      	lsls	r2, r2, #3
 80027b6:	21ff      	movs	r1, #255	; 0xff
 80027b8:	4091      	lsls	r1, r2
 80027ba:	000a      	movs	r2, r1
 80027bc:	43d2      	mvns	r2, r2
 80027be:	401a      	ands	r2, r3
 80027c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	019b      	lsls	r3, r3, #6
 80027c6:	22ff      	movs	r2, #255	; 0xff
 80027c8:	401a      	ands	r2, r3
 80027ca:	1dfb      	adds	r3, r7, #7
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	0018      	movs	r0, r3
 80027d0:	2303      	movs	r3, #3
 80027d2:	4003      	ands	r3, r0
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027d8:	481f      	ldr	r0, [pc, #124]	; (8002858 <__NVIC_SetPriority+0xd4>)
 80027da:	1dfb      	adds	r3, r7, #7
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	b25b      	sxtb	r3, r3
 80027e0:	089b      	lsrs	r3, r3, #2
 80027e2:	430a      	orrs	r2, r1
 80027e4:	33c0      	adds	r3, #192	; 0xc0
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80027ea:	e031      	b.n	8002850 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027ec:	4a1b      	ldr	r2, [pc, #108]	; (800285c <__NVIC_SetPriority+0xd8>)
 80027ee:	1dfb      	adds	r3, r7, #7
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	0019      	movs	r1, r3
 80027f4:	230f      	movs	r3, #15
 80027f6:	400b      	ands	r3, r1
 80027f8:	3b08      	subs	r3, #8
 80027fa:	089b      	lsrs	r3, r3, #2
 80027fc:	3306      	adds	r3, #6
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	18d3      	adds	r3, r2, r3
 8002802:	3304      	adds	r3, #4
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	1dfa      	adds	r2, r7, #7
 8002808:	7812      	ldrb	r2, [r2, #0]
 800280a:	0011      	movs	r1, r2
 800280c:	2203      	movs	r2, #3
 800280e:	400a      	ands	r2, r1
 8002810:	00d2      	lsls	r2, r2, #3
 8002812:	21ff      	movs	r1, #255	; 0xff
 8002814:	4091      	lsls	r1, r2
 8002816:	000a      	movs	r2, r1
 8002818:	43d2      	mvns	r2, r2
 800281a:	401a      	ands	r2, r3
 800281c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	019b      	lsls	r3, r3, #6
 8002822:	22ff      	movs	r2, #255	; 0xff
 8002824:	401a      	ands	r2, r3
 8002826:	1dfb      	adds	r3, r7, #7
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	0018      	movs	r0, r3
 800282c:	2303      	movs	r3, #3
 800282e:	4003      	ands	r3, r0
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002834:	4809      	ldr	r0, [pc, #36]	; (800285c <__NVIC_SetPriority+0xd8>)
 8002836:	1dfb      	adds	r3, r7, #7
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	001c      	movs	r4, r3
 800283c:	230f      	movs	r3, #15
 800283e:	4023      	ands	r3, r4
 8002840:	3b08      	subs	r3, #8
 8002842:	089b      	lsrs	r3, r3, #2
 8002844:	430a      	orrs	r2, r1
 8002846:	3306      	adds	r3, #6
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	18c3      	adds	r3, r0, r3
 800284c:	3304      	adds	r3, #4
 800284e:	601a      	str	r2, [r3, #0]
}
 8002850:	46c0      	nop			; (mov r8, r8)
 8002852:	46bd      	mov	sp, r7
 8002854:	b003      	add	sp, #12
 8002856:	bd90      	pop	{r4, r7, pc}
 8002858:	e000e100 	.word	0xe000e100
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	1e5a      	subs	r2, r3, #1
 800286c:	2380      	movs	r3, #128	; 0x80
 800286e:	045b      	lsls	r3, r3, #17
 8002870:	429a      	cmp	r2, r3
 8002872:	d301      	bcc.n	8002878 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002874:	2301      	movs	r3, #1
 8002876:	e010      	b.n	800289a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002878:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <SysTick_Config+0x44>)
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	3a01      	subs	r2, #1
 800287e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002880:	2301      	movs	r3, #1
 8002882:	425b      	negs	r3, r3
 8002884:	2103      	movs	r1, #3
 8002886:	0018      	movs	r0, r3
 8002888:	f7ff ff7c 	bl	8002784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800288c:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <SysTick_Config+0x44>)
 800288e:	2200      	movs	r2, #0
 8002890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002892:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <SysTick_Config+0x44>)
 8002894:	2207      	movs	r2, #7
 8002896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002898:	2300      	movs	r3, #0
}
 800289a:	0018      	movs	r0, r3
 800289c:	46bd      	mov	sp, r7
 800289e:	b002      	add	sp, #8
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	e000e010 	.word	0xe000e010

080028a8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	210f      	movs	r1, #15
 80028b4:	187b      	adds	r3, r7, r1
 80028b6:	1c02      	adds	r2, r0, #0
 80028b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	187b      	adds	r3, r7, r1
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	b25b      	sxtb	r3, r3
 80028c2:	0011      	movs	r1, r2
 80028c4:	0018      	movs	r0, r3
 80028c6:	f7ff ff5d 	bl	8002784 <__NVIC_SetPriority>
}
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	46bd      	mov	sp, r7
 80028ce:	b004      	add	sp, #16
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	0002      	movs	r2, r0
 80028da:	1dfb      	adds	r3, r7, #7
 80028dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028de:	1dfb      	adds	r3, r7, #7
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	b25b      	sxtb	r3, r3
 80028e4:	0018      	movs	r0, r3
 80028e6:	f7ff ff33 	bl	8002750 <__NVIC_EnableIRQ>
}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	46bd      	mov	sp, r7
 80028ee:	b002      	add	sp, #8
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	0018      	movs	r0, r3
 80028fe:	f7ff ffaf 	bl	8002860 <SysTick_Config>
 8002902:	0003      	movs	r3, r0
}
 8002904:	0018      	movs	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	b002      	add	sp, #8
 800290a:	bd80      	pop	{r7, pc}

0800290c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e036      	b.n	8002990 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2221      	movs	r2, #33	; 0x21
 8002926:	2102      	movs	r1, #2
 8002928:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4a18      	ldr	r2, [pc, #96]	; (8002998 <HAL_DMA_Init+0x8c>)
 8002936:	4013      	ands	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002942:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800294e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800295a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	4313      	orrs	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	0018      	movs	r0, r3
 8002974:	f000 f9d2 	bl	8002d1c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2221      	movs	r2, #33	; 0x21
 8002982:	2101      	movs	r1, #1
 8002984:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2220      	movs	r2, #32
 800298a:	2100      	movs	r1, #0
 800298c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}  
 8002990:	0018      	movs	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	b004      	add	sp, #16
 8002996:	bd80      	pop	{r7, pc}
 8002998:	ffffc00f 	.word	0xffffc00f

0800299c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e03b      	b.n	8002a26 <HAL_DMA_DeInit+0x8a>
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2101      	movs	r1, #1
 80029ba:	438a      	bics	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2200      	movs	r2, #0
 80029cc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
  
  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2200      	movs	r2, #0
 80029dc:	60da      	str	r2, [r3, #12]

/* Get DMA Base Address */  
  DMA_CalcBaseAndBitshift(hdma);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	0018      	movs	r0, r3
 80029e2:	f000 f99b 	bl	8002d1c <DMA_CalcBaseAndBitshift>

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ee:	2101      	movs	r1, #1
 80029f0:	4091      	lsls	r1, r2
 80029f2:	000a      	movs	r2, r1
 80029f4:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2221      	movs	r2, #33	; 0x21
 8002a18:	2100      	movs	r1, #0
 8002a1a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	2100      	movs	r1, #0
 8002a22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	0018      	movs	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	b002      	add	sp, #8
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b086      	sub	sp, #24
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	60f8      	str	r0, [r7, #12]
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	607a      	str	r2, [r7, #4]
 8002a3a:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002a3c:	2317      	movs	r3, #23
 8002a3e:	18fb      	adds	r3, r7, r3
 8002a40:	2200      	movs	r2, #0
 8002a42:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2220      	movs	r2, #32
 8002a48:	5c9b      	ldrb	r3, [r3, r2]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <HAL_DMA_Start_IT+0x24>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e04f      	b.n	8002af2 <HAL_DMA_Start_IT+0xc4>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2220      	movs	r2, #32
 8002a56:	2101      	movs	r1, #1
 8002a58:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2221      	movs	r2, #33	; 0x21
 8002a5e:	5c9b      	ldrb	r3, [r3, r2]
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d13a      	bne.n	8002adc <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2221      	movs	r2, #33	; 0x21
 8002a6a:	2102      	movs	r1, #2
 8002a6c:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2101      	movs	r1, #1
 8002a80:	438a      	bics	r2, r1
 8002a82:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 f919 	bl	8002cc2 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d008      	beq.n	8002aaa <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	210e      	movs	r1, #14
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	e00f      	b.n	8002aca <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	210a      	movs	r1, #10
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2104      	movs	r1, #4
 8002ac6:	438a      	bics	r2, r1
 8002ac8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	e007      	b.n	8002aec <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002ae4:	2317      	movs	r3, #23
 8002ae6:	18fb      	adds	r3, r7, r3
 8002ae8:	2202      	movs	r2, #2
 8002aea:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002aec:	2317      	movs	r3, #23
 8002aee:	18fb      	adds	r3, r7, r3
 8002af0:	781b      	ldrb	r3, [r3, #0]
} 
 8002af2:	0018      	movs	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	b006      	add	sp, #24
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2221      	movs	r2, #33	; 0x21
 8002b06:	5c9b      	ldrb	r3, [r3, r2]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d008      	beq.n	8002b20 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2204      	movs	r2, #4
 8002b12:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2220      	movs	r2, #32
 8002b18:	2100      	movs	r1, #0
 8002b1a:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e020      	b.n	8002b62 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	210e      	movs	r1, #14
 8002b2c:	438a      	bics	r2, r1
 8002b2e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	438a      	bics	r2, r1
 8002b3e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b48:	2101      	movs	r1, #1
 8002b4a:	4091      	lsls	r1, r2
 8002b4c:	000a      	movs	r2, r1
 8002b4e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2221      	movs	r2, #33	; 0x21
 8002b54:	2101      	movs	r1, #1
 8002b56:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	0018      	movs	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	b002      	add	sp, #8
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b084      	sub	sp, #16
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	2204      	movs	r2, #4
 8002b88:	409a      	lsls	r2, r3
 8002b8a:	0013      	movs	r3, r2
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d024      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x72>
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2204      	movs	r2, #4
 8002b96:	4013      	ands	r3, r2
 8002b98:	d020      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d107      	bne.n	8002bb6 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2104      	movs	r1, #4
 8002bb2:	438a      	bics	r2, r1
 8002bb4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbe:	2104      	movs	r1, #4
 8002bc0:	4091      	lsls	r1, r2
 8002bc2:	000a      	movs	r2, r1
 8002bc4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d100      	bne.n	8002bd0 <HAL_DMA_IRQHandler+0x66>
 8002bce:	e06a      	b.n	8002ca6 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	0010      	movs	r0, r2
 8002bd8:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002bda:	e064      	b.n	8002ca6 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	2202      	movs	r2, #2
 8002be2:	409a      	lsls	r2, r3
 8002be4:	0013      	movs	r3, r2
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	4013      	ands	r3, r2
 8002bea:	d02b      	beq.n	8002c44 <HAL_DMA_IRQHandler+0xda>
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	d027      	beq.n	8002c44 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d10b      	bne.n	8002c18 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	210a      	movs	r1, #10
 8002c0c:	438a      	bics	r2, r1
 8002c0e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2221      	movs	r2, #33	; 0x21
 8002c14:	2101      	movs	r1, #1
 8002c16:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c20:	2102      	movs	r1, #2
 8002c22:	4091      	lsls	r1, r2
 8002c24:	000a      	movs	r2, r1
 8002c26:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d036      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	0010      	movs	r0, r2
 8002c40:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002c42:	e030      	b.n	8002ca6 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	2208      	movs	r2, #8
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	0013      	movs	r3, r2
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4013      	ands	r3, r2
 8002c52:	d028      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0x13c>
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2208      	movs	r2, #8
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d024      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	210e      	movs	r1, #14
 8002c68:	438a      	bics	r2, r1
 8002c6a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c74:	2101      	movs	r1, #1
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2221      	movs	r2, #33	; 0x21
 8002c86:	2101      	movs	r1, #1
 8002c88:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	2100      	movs	r1, #0
 8002c90:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d005      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	0010      	movs	r0, r2
 8002ca2:	4798      	blx	r3
    }
   }
}  
 8002ca4:	e7ff      	b.n	8002ca6 <HAL_DMA_IRQHandler+0x13c>
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b004      	add	sp, #16
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8002cba:	0018      	movs	r0, r3
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	b002      	add	sp, #8
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b084      	sub	sp, #16
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	60f8      	str	r0, [r7, #12]
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd8:	2101      	movs	r1, #1
 8002cda:	4091      	lsls	r1, r2
 8002cdc:	000a      	movs	r2, r1
 8002cde:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b10      	cmp	r3, #16
 8002cee:	d108      	bne.n	8002d02 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d00:	e007      	b.n	8002d12 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	60da      	str	r2, [r3, #12]
}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	46bd      	mov	sp, r7
 8002d16:	b004      	add	sp, #16
 8002d18:	bd80      	pop	{r7, pc}
	...

08002d1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a08      	ldr	r2, [pc, #32]	; (8002d4c <DMA_CalcBaseAndBitshift+0x30>)
 8002d2a:	4694      	mov	ip, r2
 8002d2c:	4463      	add	r3, ip
 8002d2e:	2114      	movs	r1, #20
 8002d30:	0018      	movs	r0, r3
 8002d32:	f7fd f9fb 	bl	800012c <__udivsi3>
 8002d36:	0003      	movs	r3, r0
 8002d38:	009a      	lsls	r2, r3, #2
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a03      	ldr	r2, [pc, #12]	; (8002d50 <DMA_CalcBaseAndBitshift+0x34>)
 8002d42:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002d44:	46c0      	nop			; (mov r8, r8)
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b002      	add	sp, #8
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	bffdfff8 	.word	0xbffdfff8
 8002d50:	40020000 	.word	0x40020000

08002d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d62:	e14f      	b.n	8003004 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2101      	movs	r1, #1
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	4091      	lsls	r1, r2
 8002d6e:	000a      	movs	r2, r1
 8002d70:	4013      	ands	r3, r2
 8002d72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d100      	bne.n	8002d7c <HAL_GPIO_Init+0x28>
 8002d7a:	e140      	b.n	8002ffe <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d00b      	beq.n	8002d9c <HAL_GPIO_Init+0x48>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d007      	beq.n	8002d9c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d90:	2b11      	cmp	r3, #17
 8002d92:	d003      	beq.n	8002d9c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b12      	cmp	r3, #18
 8002d9a:	d130      	bne.n	8002dfe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	2203      	movs	r2, #3
 8002da8:	409a      	lsls	r2, r3
 8002daa:	0013      	movs	r3, r2
 8002dac:	43da      	mvns	r2, r3
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4013      	ands	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	409a      	lsls	r2, r3
 8002dbe:	0013      	movs	r3, r2
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	409a      	lsls	r2, r3
 8002dd8:	0013      	movs	r3, r2
 8002dda:	43da      	mvns	r2, r3
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4013      	ands	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	091b      	lsrs	r3, r3, #4
 8002de8:	2201      	movs	r2, #1
 8002dea:	401a      	ands	r2, r3
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	409a      	lsls	r2, r3
 8002df0:	0013      	movs	r3, r2
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	2203      	movs	r2, #3
 8002e0a:	409a      	lsls	r2, r3
 8002e0c:	0013      	movs	r3, r2
 8002e0e:	43da      	mvns	r2, r3
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	4013      	ands	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	409a      	lsls	r2, r3
 8002e20:	0013      	movs	r3, r2
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d003      	beq.n	8002e3e <HAL_GPIO_Init+0xea>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b12      	cmp	r3, #18
 8002e3c:	d123      	bne.n	8002e86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	08da      	lsrs	r2, r3, #3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3208      	adds	r2, #8
 8002e46:	0092      	lsls	r2, r2, #2
 8002e48:	58d3      	ldr	r3, [r2, r3]
 8002e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	2207      	movs	r2, #7
 8002e50:	4013      	ands	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	220f      	movs	r2, #15
 8002e56:	409a      	lsls	r2, r3
 8002e58:	0013      	movs	r3, r2
 8002e5a:	43da      	mvns	r2, r3
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	691a      	ldr	r2, [r3, #16]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2107      	movs	r1, #7
 8002e6a:	400b      	ands	r3, r1
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	0013      	movs	r3, r2
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	08da      	lsrs	r2, r3, #3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3208      	adds	r2, #8
 8002e80:	0092      	lsls	r2, r2, #2
 8002e82:	6939      	ldr	r1, [r7, #16]
 8002e84:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	2203      	movs	r2, #3
 8002e92:	409a      	lsls	r2, r3
 8002e94:	0013      	movs	r3, r2
 8002e96:	43da      	mvns	r2, r3
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	401a      	ands	r2, r3
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	0013      	movs	r3, r2
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	2380      	movs	r3, #128	; 0x80
 8002ec0:	055b      	lsls	r3, r3, #21
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d100      	bne.n	8002ec8 <HAL_GPIO_Init+0x174>
 8002ec6:	e09a      	b.n	8002ffe <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ec8:	4b54      	ldr	r3, [pc, #336]	; (800301c <HAL_GPIO_Init+0x2c8>)
 8002eca:	699a      	ldr	r2, [r3, #24]
 8002ecc:	4b53      	ldr	r3, [pc, #332]	; (800301c <HAL_GPIO_Init+0x2c8>)
 8002ece:	2101      	movs	r1, #1
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	619a      	str	r2, [r3, #24]
 8002ed4:	4b51      	ldr	r3, [pc, #324]	; (800301c <HAL_GPIO_Init+0x2c8>)
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	4013      	ands	r3, r2
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ee0:	4a4f      	ldr	r2, [pc, #316]	; (8003020 <HAL_GPIO_Init+0x2cc>)
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	089b      	lsrs	r3, r3, #2
 8002ee6:	3302      	adds	r3, #2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	589b      	ldr	r3, [r3, r2]
 8002eec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2203      	movs	r2, #3
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	220f      	movs	r2, #15
 8002ef8:	409a      	lsls	r2, r3
 8002efa:	0013      	movs	r3, r2
 8002efc:	43da      	mvns	r2, r3
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	4013      	ands	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	2390      	movs	r3, #144	; 0x90
 8002f08:	05db      	lsls	r3, r3, #23
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d013      	beq.n	8002f36 <HAL_GPIO_Init+0x1e2>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a44      	ldr	r2, [pc, #272]	; (8003024 <HAL_GPIO_Init+0x2d0>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d00d      	beq.n	8002f32 <HAL_GPIO_Init+0x1de>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a43      	ldr	r2, [pc, #268]	; (8003028 <HAL_GPIO_Init+0x2d4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d007      	beq.n	8002f2e <HAL_GPIO_Init+0x1da>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a42      	ldr	r2, [pc, #264]	; (800302c <HAL_GPIO_Init+0x2d8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d101      	bne.n	8002f2a <HAL_GPIO_Init+0x1d6>
 8002f26:	2303      	movs	r3, #3
 8002f28:	e006      	b.n	8002f38 <HAL_GPIO_Init+0x1e4>
 8002f2a:	2305      	movs	r3, #5
 8002f2c:	e004      	b.n	8002f38 <HAL_GPIO_Init+0x1e4>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e002      	b.n	8002f38 <HAL_GPIO_Init+0x1e4>
 8002f32:	2301      	movs	r3, #1
 8002f34:	e000      	b.n	8002f38 <HAL_GPIO_Init+0x1e4>
 8002f36:	2300      	movs	r3, #0
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	2103      	movs	r1, #3
 8002f3c:	400a      	ands	r2, r1
 8002f3e:	0092      	lsls	r2, r2, #2
 8002f40:	4093      	lsls	r3, r2
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f48:	4935      	ldr	r1, [pc, #212]	; (8003020 <HAL_GPIO_Init+0x2cc>)
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	089b      	lsrs	r3, r3, #2
 8002f4e:	3302      	adds	r3, #2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f56:	4b36      	ldr	r3, [pc, #216]	; (8003030 <HAL_GPIO_Init+0x2dc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	43da      	mvns	r2, r3
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	4013      	ands	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	2380      	movs	r3, #128	; 0x80
 8002f6c:	025b      	lsls	r3, r3, #9
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d003      	beq.n	8002f7a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002f7a:	4b2d      	ldr	r3, [pc, #180]	; (8003030 <HAL_GPIO_Init+0x2dc>)
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002f80:	4b2b      	ldr	r3, [pc, #172]	; (8003030 <HAL_GPIO_Init+0x2dc>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	43da      	mvns	r2, r3
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	2380      	movs	r3, #128	; 0x80
 8002f96:	029b      	lsls	r3, r3, #10
 8002f98:	4013      	ands	r3, r2
 8002f9a:	d003      	beq.n	8002fa4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002fa4:	4b22      	ldr	r3, [pc, #136]	; (8003030 <HAL_GPIO_Init+0x2dc>)
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002faa:	4b21      	ldr	r3, [pc, #132]	; (8003030 <HAL_GPIO_Init+0x2dc>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	43da      	mvns	r2, r3
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	035b      	lsls	r3, r3, #13
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d003      	beq.n	8002fce <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002fce:	4b18      	ldr	r3, [pc, #96]	; (8003030 <HAL_GPIO_Init+0x2dc>)
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002fd4:	4b16      	ldr	r3, [pc, #88]	; (8003030 <HAL_GPIO_Init+0x2dc>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	43da      	mvns	r2, r3
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	2380      	movs	r3, #128	; 0x80
 8002fea:	039b      	lsls	r3, r3, #14
 8002fec:	4013      	ands	r3, r2
 8002fee:	d003      	beq.n	8002ff8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ff8:	4b0d      	ldr	r3, [pc, #52]	; (8003030 <HAL_GPIO_Init+0x2dc>)
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	3301      	adds	r3, #1
 8003002:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	40da      	lsrs	r2, r3
 800300c:	1e13      	subs	r3, r2, #0
 800300e:	d000      	beq.n	8003012 <HAL_GPIO_Init+0x2be>
 8003010:	e6a8      	b.n	8002d64 <HAL_GPIO_Init+0x10>
  } 
}
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	46c0      	nop			; (mov r8, r8)
 8003016:	46bd      	mov	sp, r7
 8003018:	b006      	add	sp, #24
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40021000 	.word	0x40021000
 8003020:	40010000 	.word	0x40010000
 8003024:	48000400 	.word	0x48000400
 8003028:	48000800 	.word	0x48000800
 800302c:	48000c00 	.word	0x48000c00
 8003030:	40010400 	.word	0x40010400

08003034 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800303e:	2300      	movs	r3, #0
 8003040:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003042:	e0b1      	b.n	80031a8 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003044:	2201      	movs	r2, #1
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	409a      	lsls	r2, r3
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	4013      	ands	r3, r2
 800304e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d100      	bne.n	8003058 <HAL_GPIO_DeInit+0x24>
 8003056:	e0a4      	b.n	80031a2 <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003058:	4a59      	ldr	r2, [pc, #356]	; (80031c0 <HAL_GPIO_DeInit+0x18c>)
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	089b      	lsrs	r3, r3, #2
 800305e:	3302      	adds	r3, #2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	589b      	ldr	r3, [r3, r2]
 8003064:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2203      	movs	r2, #3
 800306a:	4013      	ands	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	220f      	movs	r2, #15
 8003070:	409a      	lsls	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	4013      	ands	r3, r2
 8003076:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	2390      	movs	r3, #144	; 0x90
 800307c:	05db      	lsls	r3, r3, #23
 800307e:	429a      	cmp	r2, r3
 8003080:	d013      	beq.n	80030aa <HAL_GPIO_DeInit+0x76>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a4f      	ldr	r2, [pc, #316]	; (80031c4 <HAL_GPIO_DeInit+0x190>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d00d      	beq.n	80030a6 <HAL_GPIO_DeInit+0x72>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a4e      	ldr	r2, [pc, #312]	; (80031c8 <HAL_GPIO_DeInit+0x194>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d007      	beq.n	80030a2 <HAL_GPIO_DeInit+0x6e>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a4d      	ldr	r2, [pc, #308]	; (80031cc <HAL_GPIO_DeInit+0x198>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d101      	bne.n	800309e <HAL_GPIO_DeInit+0x6a>
 800309a:	2303      	movs	r3, #3
 800309c:	e006      	b.n	80030ac <HAL_GPIO_DeInit+0x78>
 800309e:	2305      	movs	r3, #5
 80030a0:	e004      	b.n	80030ac <HAL_GPIO_DeInit+0x78>
 80030a2:	2302      	movs	r3, #2
 80030a4:	e002      	b.n	80030ac <HAL_GPIO_DeInit+0x78>
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <HAL_GPIO_DeInit+0x78>
 80030aa:	2300      	movs	r3, #0
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	2103      	movs	r1, #3
 80030b0:	400a      	ands	r2, r1
 80030b2:	0092      	lsls	r2, r2, #2
 80030b4:	4093      	lsls	r3, r2
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d132      	bne.n	8003122 <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80030bc:	4b44      	ldr	r3, [pc, #272]	; (80031d0 <HAL_GPIO_DeInit+0x19c>)
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	43d9      	mvns	r1, r3
 80030c4:	4b42      	ldr	r3, [pc, #264]	; (80031d0 <HAL_GPIO_DeInit+0x19c>)
 80030c6:	400a      	ands	r2, r1
 80030c8:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80030ca:	4b41      	ldr	r3, [pc, #260]	; (80031d0 <HAL_GPIO_DeInit+0x19c>)
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	43d9      	mvns	r1, r3
 80030d2:	4b3f      	ldr	r3, [pc, #252]	; (80031d0 <HAL_GPIO_DeInit+0x19c>)
 80030d4:	400a      	ands	r2, r1
 80030d6:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80030d8:	4b3d      	ldr	r3, [pc, #244]	; (80031d0 <HAL_GPIO_DeInit+0x19c>)
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	43d9      	mvns	r1, r3
 80030e0:	4b3b      	ldr	r3, [pc, #236]	; (80031d0 <HAL_GPIO_DeInit+0x19c>)
 80030e2:	400a      	ands	r2, r1
 80030e4:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80030e6:	4b3a      	ldr	r3, [pc, #232]	; (80031d0 <HAL_GPIO_DeInit+0x19c>)
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	43d9      	mvns	r1, r3
 80030ee:	4b38      	ldr	r3, [pc, #224]	; (80031d0 <HAL_GPIO_DeInit+0x19c>)
 80030f0:	400a      	ands	r2, r1
 80030f2:	60da      	str	r2, [r3, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	2203      	movs	r2, #3
 80030f8:	4013      	ands	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	220f      	movs	r2, #15
 80030fe:	409a      	lsls	r2, r3
 8003100:	0013      	movs	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003104:	4a2e      	ldr	r2, [pc, #184]	; (80031c0 <HAL_GPIO_DeInit+0x18c>)
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	089b      	lsrs	r3, r3, #2
 800310a:	3302      	adds	r3, #2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	589a      	ldr	r2, [r3, r2]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	43d9      	mvns	r1, r3
 8003114:	482a      	ldr	r0, [pc, #168]	; (80031c0 <HAL_GPIO_DeInit+0x18c>)
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	089b      	lsrs	r3, r3, #2
 800311a:	400a      	ands	r2, r1
 800311c:	3302      	adds	r3, #2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	0052      	lsls	r2, r2, #1
 800312a:	2103      	movs	r1, #3
 800312c:	4091      	lsls	r1, r2
 800312e:	000a      	movs	r2, r1
 8003130:	43d2      	mvns	r2, r2
 8003132:	401a      	ands	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	08da      	lsrs	r2, r3, #3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3208      	adds	r2, #8
 8003140:	0092      	lsls	r2, r2, #2
 8003142:	58d3      	ldr	r3, [r2, r3]
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	2107      	movs	r1, #7
 8003148:	400a      	ands	r2, r1
 800314a:	0092      	lsls	r2, r2, #2
 800314c:	210f      	movs	r1, #15
 800314e:	4091      	lsls	r1, r2
 8003150:	000a      	movs	r2, r1
 8003152:	43d1      	mvns	r1, r2
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	08d2      	lsrs	r2, r2, #3
 8003158:	4019      	ands	r1, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3208      	adds	r2, #8
 800315e:	0092      	lsls	r2, r2, #2
 8003160:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	0052      	lsls	r2, r2, #1
 800316a:	2103      	movs	r1, #3
 800316c:	4091      	lsls	r1, r2
 800316e:	000a      	movs	r2, r1
 8003170:	43d2      	mvns	r2, r2
 8003172:	401a      	ands	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2101      	movs	r1, #1
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	4091      	lsls	r1, r2
 8003182:	000a      	movs	r2, r1
 8003184:	43d2      	mvns	r2, r2
 8003186:	401a      	ands	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	0052      	lsls	r2, r2, #1
 8003194:	2103      	movs	r1, #3
 8003196:	4091      	lsls	r1, r2
 8003198:	000a      	movs	r2, r1
 800319a:	43d2      	mvns	r2, r2
 800319c:	401a      	ands	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	609a      	str	r2, [r3, #8]

    }

    position++;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	3301      	adds	r3, #1
 80031a6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	40da      	lsrs	r2, r3
 80031ae:	1e13      	subs	r3, r2, #0
 80031b0:	d000      	beq.n	80031b4 <HAL_GPIO_DeInit+0x180>
 80031b2:	e747      	b.n	8003044 <HAL_GPIO_DeInit+0x10>
  }
}
 80031b4:	46c0      	nop			; (mov r8, r8)
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	46bd      	mov	sp, r7
 80031ba:	b006      	add	sp, #24
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	40010000 	.word	0x40010000
 80031c4:	48000400 	.word	0x48000400
 80031c8:	48000800 	.word	0x48000800
 80031cc:	48000c00 	.word	0x48000c00
 80031d0:	40010400 	.word	0x40010400

080031d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	0008      	movs	r0, r1
 80031de:	0011      	movs	r1, r2
 80031e0:	1cbb      	adds	r3, r7, #2
 80031e2:	1c02      	adds	r2, r0, #0
 80031e4:	801a      	strh	r2, [r3, #0]
 80031e6:	1c7b      	adds	r3, r7, #1
 80031e8:	1c0a      	adds	r2, r1, #0
 80031ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031ec:	1c7b      	adds	r3, r7, #1
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d004      	beq.n	80031fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031f4:	1cbb      	adds	r3, r7, #2
 80031f6:	881a      	ldrh	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031fc:	e003      	b.n	8003206 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031fe:	1cbb      	adds	r3, r7, #2
 8003200:	881a      	ldrh	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	46bd      	mov	sp, r7
 800320a:	b002      	add	sp, #8
 800320c:	bd80      	pop	{r7, pc}
	...

08003210 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e082      	b.n	8003328 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2241      	movs	r2, #65	; 0x41
 8003226:	5c9b      	ldrb	r3, [r3, r2]
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d107      	bne.n	800323e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2240      	movs	r2, #64	; 0x40
 8003232:	2100      	movs	r1, #0
 8003234:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	0018      	movs	r0, r3
 800323a:	f7fe ff9b 	bl	8002174 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2241      	movs	r2, #65	; 0x41
 8003242:	2124      	movs	r1, #36	; 0x24
 8003244:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2101      	movs	r1, #1
 8003252:	438a      	bics	r2, r1
 8003254:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4934      	ldr	r1, [pc, #208]	; (8003330 <HAL_I2C_Init+0x120>)
 8003260:	400a      	ands	r2, r1
 8003262:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4931      	ldr	r1, [pc, #196]	; (8003334 <HAL_I2C_Init+0x124>)
 8003270:	400a      	ands	r2, r1
 8003272:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d108      	bne.n	800328e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2180      	movs	r1, #128	; 0x80
 8003286:	0209      	lsls	r1, r1, #8
 8003288:	430a      	orrs	r2, r1
 800328a:	609a      	str	r2, [r3, #8]
 800328c:	e007      	b.n	800329e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2184      	movs	r1, #132	; 0x84
 8003298:	0209      	lsls	r1, r1, #8
 800329a:	430a      	orrs	r2, r1
 800329c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d104      	bne.n	80032b0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2280      	movs	r2, #128	; 0x80
 80032ac:	0112      	lsls	r2, r2, #4
 80032ae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	491f      	ldr	r1, [pc, #124]	; (8003338 <HAL_I2C_Init+0x128>)
 80032bc:	430a      	orrs	r2, r1
 80032be:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	491a      	ldr	r1, [pc, #104]	; (8003334 <HAL_I2C_Init+0x124>)
 80032cc:	400a      	ands	r2, r1
 80032ce:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	431a      	orrs	r2, r3
 80032da:	0011      	movs	r1, r2
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	021a      	lsls	r2, r3, #8
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69d9      	ldr	r1, [r3, #28]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a1a      	ldr	r2, [r3, #32]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2101      	movs	r1, #1
 8003306:	430a      	orrs	r2, r1
 8003308:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2241      	movs	r2, #65	; 0x41
 8003314:	2120      	movs	r1, #32
 8003316:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2242      	movs	r2, #66	; 0x42
 8003322:	2100      	movs	r1, #0
 8003324:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	0018      	movs	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	b002      	add	sp, #8
 800332e:	bd80      	pop	{r7, pc}
 8003330:	f0ffffff 	.word	0xf0ffffff
 8003334:	ffff7fff 	.word	0xffff7fff
 8003338:	02008000 	.word	0x02008000

0800333c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800333c:	b590      	push	{r4, r7, lr}
 800333e:	b089      	sub	sp, #36	; 0x24
 8003340:	af02      	add	r7, sp, #8
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	0008      	movs	r0, r1
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	0019      	movs	r1, r3
 800334a:	230a      	movs	r3, #10
 800334c:	18fb      	adds	r3, r7, r3
 800334e:	1c02      	adds	r2, r0, #0
 8003350:	801a      	strh	r2, [r3, #0]
 8003352:	2308      	movs	r3, #8
 8003354:	18fb      	adds	r3, r7, r3
 8003356:	1c0a      	adds	r2, r1, #0
 8003358:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2241      	movs	r2, #65	; 0x41
 800335e:	5c9b      	ldrb	r3, [r3, r2]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b20      	cmp	r3, #32
 8003364:	d000      	beq.n	8003368 <HAL_I2C_Master_Transmit+0x2c>
 8003366:	e0e7      	b.n	8003538 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2240      	movs	r2, #64	; 0x40
 800336c:	5c9b      	ldrb	r3, [r3, r2]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d101      	bne.n	8003376 <HAL_I2C_Master_Transmit+0x3a>
 8003372:	2302      	movs	r3, #2
 8003374:	e0e1      	b.n	800353a <HAL_I2C_Master_Transmit+0x1fe>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2240      	movs	r2, #64	; 0x40
 800337a:	2101      	movs	r1, #1
 800337c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800337e:	f7ff f9b9 	bl	80026f4 <HAL_GetTick>
 8003382:	0003      	movs	r3, r0
 8003384:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003386:	2380      	movs	r3, #128	; 0x80
 8003388:	0219      	lsls	r1, r3, #8
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	2319      	movs	r3, #25
 8003392:	2201      	movs	r2, #1
 8003394:	f000 fa16 	bl	80037c4 <I2C_WaitOnFlagUntilTimeout>
 8003398:	1e03      	subs	r3, r0, #0
 800339a:	d001      	beq.n	80033a0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e0cc      	b.n	800353a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2241      	movs	r2, #65	; 0x41
 80033a4:	2121      	movs	r1, #33	; 0x21
 80033a6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2242      	movs	r2, #66	; 0x42
 80033ac:	2110      	movs	r1, #16
 80033ae:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2208      	movs	r2, #8
 80033c0:	18ba      	adds	r2, r7, r2
 80033c2:	8812      	ldrh	r2, [r2, #0]
 80033c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	2bff      	cmp	r3, #255	; 0xff
 80033d4:	d911      	bls.n	80033fa <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	22ff      	movs	r2, #255	; 0xff
 80033da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	2380      	movs	r3, #128	; 0x80
 80033e4:	045c      	lsls	r4, r3, #17
 80033e6:	230a      	movs	r3, #10
 80033e8:	18fb      	adds	r3, r7, r3
 80033ea:	8819      	ldrh	r1, [r3, #0]
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	4b55      	ldr	r3, [pc, #340]	; (8003544 <HAL_I2C_Master_Transmit+0x208>)
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	0023      	movs	r3, r4
 80033f4:	f000 fb06 	bl	8003a04 <I2C_TransferConfig>
 80033f8:	e075      	b.n	80034e6 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003408:	b2da      	uxtb	r2, r3
 800340a:	2380      	movs	r3, #128	; 0x80
 800340c:	049c      	lsls	r4, r3, #18
 800340e:	230a      	movs	r3, #10
 8003410:	18fb      	adds	r3, r7, r3
 8003412:	8819      	ldrh	r1, [r3, #0]
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	4b4b      	ldr	r3, [pc, #300]	; (8003544 <HAL_I2C_Master_Transmit+0x208>)
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	0023      	movs	r3, r4
 800341c:	f000 faf2 	bl	8003a04 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003420:	e061      	b.n	80034e6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	0018      	movs	r0, r3
 800342a:	f000 fa0a 	bl	8003842 <I2C_WaitOnTXISFlagUntilTimeout>
 800342e:	1e03      	subs	r3, r0, #0
 8003430:	d001      	beq.n	8003436 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e081      	b.n	800353a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	781a      	ldrb	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345e:	3b01      	subs	r3, #1
 8003460:	b29a      	uxth	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346a:	b29b      	uxth	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d03a      	beq.n	80034e6 <HAL_I2C_Master_Transmit+0x1aa>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003474:	2b00      	cmp	r3, #0
 8003476:	d136      	bne.n	80034e6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003478:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	0013      	movs	r3, r2
 8003482:	2200      	movs	r2, #0
 8003484:	2180      	movs	r1, #128	; 0x80
 8003486:	f000 f99d 	bl	80037c4 <I2C_WaitOnFlagUntilTimeout>
 800348a:	1e03      	subs	r3, r0, #0
 800348c:	d001      	beq.n	8003492 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e053      	b.n	800353a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003496:	b29b      	uxth	r3, r3
 8003498:	2bff      	cmp	r3, #255	; 0xff
 800349a:	d911      	bls.n	80034c0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	22ff      	movs	r2, #255	; 0xff
 80034a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	2380      	movs	r3, #128	; 0x80
 80034aa:	045c      	lsls	r4, r3, #17
 80034ac:	230a      	movs	r3, #10
 80034ae:	18fb      	adds	r3, r7, r3
 80034b0:	8819      	ldrh	r1, [r3, #0]
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	2300      	movs	r3, #0
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	0023      	movs	r3, r4
 80034ba:	f000 faa3 	bl	8003a04 <I2C_TransferConfig>
 80034be:	e012      	b.n	80034e6 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	2380      	movs	r3, #128	; 0x80
 80034d2:	049c      	lsls	r4, r3, #18
 80034d4:	230a      	movs	r3, #10
 80034d6:	18fb      	adds	r3, r7, r3
 80034d8:	8819      	ldrh	r1, [r3, #0]
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	2300      	movs	r3, #0
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	0023      	movs	r3, r4
 80034e2:	f000 fa8f 	bl	8003a04 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d198      	bne.n	8003422 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	0018      	movs	r0, r3
 80034f8:	f000 f9e2 	bl	80038c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034fc:	1e03      	subs	r3, r0, #0
 80034fe:	d001      	beq.n	8003504 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e01a      	b.n	800353a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2220      	movs	r2, #32
 800350a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	490c      	ldr	r1, [pc, #48]	; (8003548 <HAL_I2C_Master_Transmit+0x20c>)
 8003518:	400a      	ands	r2, r1
 800351a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2241      	movs	r2, #65	; 0x41
 8003520:	2120      	movs	r1, #32
 8003522:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2242      	movs	r2, #66	; 0x42
 8003528:	2100      	movs	r1, #0
 800352a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2240      	movs	r2, #64	; 0x40
 8003530:	2100      	movs	r1, #0
 8003532:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	e000      	b.n	800353a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003538:	2302      	movs	r3, #2
  }
}
 800353a:	0018      	movs	r0, r3
 800353c:	46bd      	mov	sp, r7
 800353e:	b007      	add	sp, #28
 8003540:	bd90      	pop	{r4, r7, pc}
 8003542:	46c0      	nop			; (mov r8, r8)
 8003544:	80002000 	.word	0x80002000
 8003548:	fe00e800 	.word	0xfe00e800

0800354c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08a      	sub	sp, #40	; 0x28
 8003550:	af02      	add	r7, sp, #8
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	607a      	str	r2, [r7, #4]
 8003556:	603b      	str	r3, [r7, #0]
 8003558:	230a      	movs	r3, #10
 800355a:	18fb      	adds	r3, r7, r3
 800355c:	1c0a      	adds	r2, r1, #0
 800355e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003560:	2300      	movs	r3, #0
 8003562:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2241      	movs	r2, #65	; 0x41
 8003568:	5c9b      	ldrb	r3, [r3, r2]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b20      	cmp	r3, #32
 800356e:	d000      	beq.n	8003572 <HAL_I2C_IsDeviceReady+0x26>
 8003570:	e0fe      	b.n	8003770 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	699a      	ldr	r2, [r3, #24]
 8003578:	2380      	movs	r3, #128	; 0x80
 800357a:	021b      	lsls	r3, r3, #8
 800357c:	401a      	ands	r2, r3
 800357e:	2380      	movs	r3, #128	; 0x80
 8003580:	021b      	lsls	r3, r3, #8
 8003582:	429a      	cmp	r2, r3
 8003584:	d101      	bne.n	800358a <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8003586:	2302      	movs	r3, #2
 8003588:	e0f3      	b.n	8003772 <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2240      	movs	r2, #64	; 0x40
 800358e:	5c9b      	ldrb	r3, [r3, r2]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d101      	bne.n	8003598 <HAL_I2C_IsDeviceReady+0x4c>
 8003594:	2302      	movs	r3, #2
 8003596:	e0ec      	b.n	8003772 <HAL_I2C_IsDeviceReady+0x226>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2240      	movs	r2, #64	; 0x40
 800359c:	2101      	movs	r1, #1
 800359e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2241      	movs	r2, #65	; 0x41
 80035a4:	2124      	movs	r1, #36	; 0x24
 80035a6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d107      	bne.n	80035c6 <HAL_I2C_IsDeviceReady+0x7a>
 80035b6:	230a      	movs	r3, #10
 80035b8:	18fb      	adds	r3, r7, r3
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	059b      	lsls	r3, r3, #22
 80035be:	0d9b      	lsrs	r3, r3, #22
 80035c0:	4a6e      	ldr	r2, [pc, #440]	; (800377c <HAL_I2C_IsDeviceReady+0x230>)
 80035c2:	431a      	orrs	r2, r3
 80035c4:	e007      	b.n	80035d6 <HAL_I2C_IsDeviceReady+0x8a>
 80035c6:	230a      	movs	r3, #10
 80035c8:	18fb      	adds	r3, r7, r3
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	059b      	lsls	r3, r3, #22
 80035ce:	0d9b      	lsrs	r3, r3, #22
 80035d0:	22a0      	movs	r2, #160	; 0xa0
 80035d2:	0192      	lsls	r2, r2, #6
 80035d4:	431a      	orrs	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80035dc:	f7ff f88a 	bl	80026f4 <HAL_GetTick>
 80035e0:	0003      	movs	r3, r0
 80035e2:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	2220      	movs	r2, #32
 80035ec:	4013      	ands	r3, r2
 80035ee:	3b20      	subs	r3, #32
 80035f0:	425a      	negs	r2, r3
 80035f2:	4153      	adcs	r3, r2
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	231f      	movs	r3, #31
 80035f8:	18fb      	adds	r3, r7, r3
 80035fa:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	2210      	movs	r2, #16
 8003604:	4013      	ands	r3, r2
 8003606:	3b10      	subs	r3, #16
 8003608:	425a      	negs	r2, r3
 800360a:	4153      	adcs	r3, r2
 800360c:	b2da      	uxtb	r2, r3
 800360e:	231e      	movs	r3, #30
 8003610:	18fb      	adds	r3, r7, r3
 8003612:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003614:	e035      	b.n	8003682 <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	3301      	adds	r3, #1
 800361a:	d01a      	beq.n	8003652 <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800361c:	f7ff f86a 	bl	80026f4 <HAL_GetTick>
 8003620:	0002      	movs	r2, r0
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d302      	bcc.n	8003632 <HAL_I2C_IsDeviceReady+0xe6>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10f      	bne.n	8003652 <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2241      	movs	r2, #65	; 0x41
 8003636:	2120      	movs	r1, #32
 8003638:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363e:	2220      	movs	r2, #32
 8003640:	431a      	orrs	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2240      	movs	r2, #64	; 0x40
 800364a:	2100      	movs	r1, #0
 800364c:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e08f      	b.n	8003772 <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	2220      	movs	r2, #32
 800365a:	4013      	ands	r3, r2
 800365c:	3b20      	subs	r3, #32
 800365e:	425a      	negs	r2, r3
 8003660:	4153      	adcs	r3, r2
 8003662:	b2da      	uxtb	r2, r3
 8003664:	231f      	movs	r3, #31
 8003666:	18fb      	adds	r3, r7, r3
 8003668:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	2210      	movs	r2, #16
 8003672:	4013      	ands	r3, r2
 8003674:	3b10      	subs	r3, #16
 8003676:	425a      	negs	r2, r3
 8003678:	4153      	adcs	r3, r2
 800367a:	b2da      	uxtb	r2, r3
 800367c:	231e      	movs	r3, #30
 800367e:	18fb      	adds	r3, r7, r3
 8003680:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003682:	231f      	movs	r3, #31
 8003684:	18fb      	adds	r3, r7, r3
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d104      	bne.n	8003696 <HAL_I2C_IsDeviceReady+0x14a>
 800368c:	231e      	movs	r3, #30
 800368e:	18fb      	adds	r3, r7, r3
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0bf      	beq.n	8003616 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	2210      	movs	r2, #16
 800369e:	4013      	ands	r3, r2
 80036a0:	2b10      	cmp	r3, #16
 80036a2:	d01a      	beq.n	80036da <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	0013      	movs	r3, r2
 80036ae:	2200      	movs	r2, #0
 80036b0:	2120      	movs	r1, #32
 80036b2:	f000 f887 	bl	80037c4 <I2C_WaitOnFlagUntilTimeout>
 80036b6:	1e03      	subs	r3, r0, #0
 80036b8:	d001      	beq.n	80036be <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e059      	b.n	8003772 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2220      	movs	r2, #32
 80036c4:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2241      	movs	r2, #65	; 0x41
 80036ca:	2120      	movs	r1, #32
 80036cc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2240      	movs	r2, #64	; 0x40
 80036d2:	2100      	movs	r1, #0
 80036d4:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	e04b      	b.n	8003772 <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	0013      	movs	r3, r2
 80036e4:	2200      	movs	r2, #0
 80036e6:	2120      	movs	r1, #32
 80036e8:	f000 f86c 	bl	80037c4 <I2C_WaitOnFlagUntilTimeout>
 80036ec:	1e03      	subs	r3, r0, #0
 80036ee:	d001      	beq.n	80036f4 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e03e      	b.n	8003772 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2210      	movs	r2, #16
 80036fa:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2220      	movs	r2, #32
 8003702:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	429a      	cmp	r2, r3
 800370a:	d119      	bne.n	8003740 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2180      	movs	r1, #128	; 0x80
 8003718:	01c9      	lsls	r1, r1, #7
 800371a:	430a      	orrs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	0013      	movs	r3, r2
 8003728:	2200      	movs	r2, #0
 800372a:	2120      	movs	r1, #32
 800372c:	f000 f84a 	bl	80037c4 <I2C_WaitOnFlagUntilTimeout>
 8003730:	1e03      	subs	r3, r0, #0
 8003732:	d001      	beq.n	8003738 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e01c      	b.n	8003772 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2220      	movs	r2, #32
 800373e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	3301      	adds	r3, #1
 8003744:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	429a      	cmp	r2, r3
 800374c:	d900      	bls.n	8003750 <HAL_I2C_IsDeviceReady+0x204>
 800374e:	e72e      	b.n	80035ae <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2241      	movs	r2, #65	; 0x41
 8003754:	2120      	movs	r1, #32
 8003756:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375c:	2220      	movs	r2, #32
 800375e:	431a      	orrs	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2240      	movs	r2, #64	; 0x40
 8003768:	2100      	movs	r1, #0
 800376a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e000      	b.n	8003772 <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8003770:	2302      	movs	r3, #2
  }
}
 8003772:	0018      	movs	r0, r3
 8003774:	46bd      	mov	sp, r7
 8003776:	b008      	add	sp, #32
 8003778:	bd80      	pop	{r7, pc}
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	02002000 	.word	0x02002000

08003780 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	2202      	movs	r2, #2
 8003790:	4013      	ands	r3, r2
 8003792:	2b02      	cmp	r3, #2
 8003794:	d103      	bne.n	800379e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2200      	movs	r2, #0
 800379c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	2201      	movs	r2, #1
 80037a6:	4013      	ands	r3, r2
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d007      	beq.n	80037bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699a      	ldr	r2, [r3, #24]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2101      	movs	r1, #1
 80037b8:	430a      	orrs	r2, r1
 80037ba:	619a      	str	r2, [r3, #24]
  }
}
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	46bd      	mov	sp, r7
 80037c0:	b002      	add	sp, #8
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	603b      	str	r3, [r7, #0]
 80037d0:	1dfb      	adds	r3, r7, #7
 80037d2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037d4:	e021      	b.n	800381a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	3301      	adds	r3, #1
 80037da:	d01e      	beq.n	800381a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037dc:	f7fe ff8a 	bl	80026f4 <HAL_GetTick>
 80037e0:	0002      	movs	r2, r0
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d302      	bcc.n	80037f2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d113      	bne.n	800381a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	2220      	movs	r2, #32
 80037f8:	431a      	orrs	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2241      	movs	r2, #65	; 0x41
 8003802:	2120      	movs	r1, #32
 8003804:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2242      	movs	r2, #66	; 0x42
 800380a:	2100      	movs	r1, #0
 800380c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2240      	movs	r2, #64	; 0x40
 8003812:	2100      	movs	r1, #0
 8003814:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e00f      	b.n	800383a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	4013      	ands	r3, r2
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	425a      	negs	r2, r3
 800382a:	4153      	adcs	r3, r2
 800382c:	b2db      	uxtb	r3, r3
 800382e:	001a      	movs	r2, r3
 8003830:	1dfb      	adds	r3, r7, #7
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	429a      	cmp	r2, r3
 8003836:	d0ce      	beq.n	80037d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	0018      	movs	r0, r3
 800383c:	46bd      	mov	sp, r7
 800383e:	b004      	add	sp, #16
 8003840:	bd80      	pop	{r7, pc}

08003842 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b084      	sub	sp, #16
 8003846:	af00      	add	r7, sp, #0
 8003848:	60f8      	str	r0, [r7, #12]
 800384a:	60b9      	str	r1, [r7, #8]
 800384c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800384e:	e02b      	b.n	80038a8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	68b9      	ldr	r1, [r7, #8]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	0018      	movs	r0, r3
 8003858:	f000 f86e 	bl	8003938 <I2C_IsAcknowledgeFailed>
 800385c:	1e03      	subs	r3, r0, #0
 800385e:	d001      	beq.n	8003864 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e029      	b.n	80038b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	3301      	adds	r3, #1
 8003868:	d01e      	beq.n	80038a8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800386a:	f7fe ff43 	bl	80026f4 <HAL_GetTick>
 800386e:	0002      	movs	r2, r0
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	429a      	cmp	r2, r3
 8003878:	d302      	bcc.n	8003880 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d113      	bne.n	80038a8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003884:	2220      	movs	r2, #32
 8003886:	431a      	orrs	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2241      	movs	r2, #65	; 0x41
 8003890:	2120      	movs	r1, #32
 8003892:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2242      	movs	r2, #66	; 0x42
 8003898:	2100      	movs	r1, #0
 800389a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2240      	movs	r2, #64	; 0x40
 80038a0:	2100      	movs	r1, #0
 80038a2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e007      	b.n	80038b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	2202      	movs	r2, #2
 80038b0:	4013      	ands	r3, r2
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d1cc      	bne.n	8003850 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	0018      	movs	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	b004      	add	sp, #16
 80038be:	bd80      	pop	{r7, pc}

080038c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038cc:	e028      	b.n	8003920 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	68b9      	ldr	r1, [r7, #8]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	0018      	movs	r0, r3
 80038d6:	f000 f82f 	bl	8003938 <I2C_IsAcknowledgeFailed>
 80038da:	1e03      	subs	r3, r0, #0
 80038dc:	d001      	beq.n	80038e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e026      	b.n	8003930 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e2:	f7fe ff07 	bl	80026f4 <HAL_GetTick>
 80038e6:	0002      	movs	r2, r0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d302      	bcc.n	80038f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d113      	bne.n	8003920 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fc:	2220      	movs	r2, #32
 80038fe:	431a      	orrs	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2241      	movs	r2, #65	; 0x41
 8003908:	2120      	movs	r1, #32
 800390a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2242      	movs	r2, #66	; 0x42
 8003910:	2100      	movs	r1, #0
 8003912:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2240      	movs	r2, #64	; 0x40
 8003918:	2100      	movs	r1, #0
 800391a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e007      	b.n	8003930 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	2220      	movs	r2, #32
 8003928:	4013      	ands	r3, r2
 800392a:	2b20      	cmp	r3, #32
 800392c:	d1cf      	bne.n	80038ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	0018      	movs	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	b004      	add	sp, #16
 8003936:	bd80      	pop	{r7, pc}

08003938 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	2210      	movs	r2, #16
 800394c:	4013      	ands	r3, r2
 800394e:	2b10      	cmp	r3, #16
 8003950:	d151      	bne.n	80039f6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003952:	e021      	b.n	8003998 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	3301      	adds	r3, #1
 8003958:	d01e      	beq.n	8003998 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800395a:	f7fe fecb 	bl	80026f4 <HAL_GetTick>
 800395e:	0002      	movs	r2, r0
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	429a      	cmp	r2, r3
 8003968:	d302      	bcc.n	8003970 <I2C_IsAcknowledgeFailed+0x38>
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d113      	bne.n	8003998 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003974:	2220      	movs	r2, #32
 8003976:	431a      	orrs	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2241      	movs	r2, #65	; 0x41
 8003980:	2120      	movs	r1, #32
 8003982:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2242      	movs	r2, #66	; 0x42
 8003988:	2100      	movs	r1, #0
 800398a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2240      	movs	r2, #64	; 0x40
 8003990:	2100      	movs	r1, #0
 8003992:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e02f      	b.n	80039f8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	2220      	movs	r2, #32
 80039a0:	4013      	ands	r3, r2
 80039a2:	2b20      	cmp	r3, #32
 80039a4:	d1d6      	bne.n	8003954 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2210      	movs	r2, #16
 80039ac:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2220      	movs	r2, #32
 80039b4:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	0018      	movs	r0, r3
 80039ba:	f7ff fee1 	bl	8003780 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	490d      	ldr	r1, [pc, #52]	; (8003a00 <I2C_IsAcknowledgeFailed+0xc8>)
 80039ca:	400a      	ands	r2, r1
 80039cc:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d2:	2204      	movs	r2, #4
 80039d4:	431a      	orrs	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2241      	movs	r2, #65	; 0x41
 80039de:	2120      	movs	r1, #32
 80039e0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2242      	movs	r2, #66	; 0x42
 80039e6:	2100      	movs	r1, #0
 80039e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2240      	movs	r2, #64	; 0x40
 80039ee:	2100      	movs	r1, #0
 80039f0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	0018      	movs	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b004      	add	sp, #16
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	fe00e800 	.word	0xfe00e800

08003a04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a04:	b590      	push	{r4, r7, lr}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	0008      	movs	r0, r1
 8003a0e:	0011      	movs	r1, r2
 8003a10:	607b      	str	r3, [r7, #4]
 8003a12:	240a      	movs	r4, #10
 8003a14:	193b      	adds	r3, r7, r4
 8003a16:	1c02      	adds	r2, r0, #0
 8003a18:	801a      	strh	r2, [r3, #0]
 8003a1a:	2009      	movs	r0, #9
 8003a1c:	183b      	adds	r3, r7, r0
 8003a1e:	1c0a      	adds	r2, r1, #0
 8003a20:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	6a3a      	ldr	r2, [r7, #32]
 8003a2a:	0d51      	lsrs	r1, r2, #21
 8003a2c:	2280      	movs	r2, #128	; 0x80
 8003a2e:	00d2      	lsls	r2, r2, #3
 8003a30:	400a      	ands	r2, r1
 8003a32:	490e      	ldr	r1, [pc, #56]	; (8003a6c <I2C_TransferConfig+0x68>)
 8003a34:	430a      	orrs	r2, r1
 8003a36:	43d2      	mvns	r2, r2
 8003a38:	401a      	ands	r2, r3
 8003a3a:	0011      	movs	r1, r2
 8003a3c:	193b      	adds	r3, r7, r4
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	059b      	lsls	r3, r3, #22
 8003a42:	0d9a      	lsrs	r2, r3, #22
 8003a44:	183b      	adds	r3, r7, r0
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	0418      	lsls	r0, r3, #16
 8003a4a:	23ff      	movs	r3, #255	; 0xff
 8003a4c:	041b      	lsls	r3, r3, #16
 8003a4e:	4003      	ands	r3, r0
 8003a50:	431a      	orrs	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	431a      	orrs	r2, r3
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003a62:	46c0      	nop			; (mov r8, r8)
 8003a64:	46bd      	mov	sp, r7
 8003a66:	b005      	add	sp, #20
 8003a68:	bd90      	pop	{r4, r7, pc}
 8003a6a:	46c0      	nop			; (mov r8, r8)
 8003a6c:	03ff63ff 	.word	0x03ff63ff

08003a70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2241      	movs	r2, #65	; 0x41
 8003a7e:	5c9b      	ldrb	r3, [r3, r2]
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b20      	cmp	r3, #32
 8003a84:	d138      	bne.n	8003af8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2240      	movs	r2, #64	; 0x40
 8003a8a:	5c9b      	ldrb	r3, [r3, r2]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e032      	b.n	8003afa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2240      	movs	r2, #64	; 0x40
 8003a98:	2101      	movs	r1, #1
 8003a9a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2241      	movs	r2, #65	; 0x41
 8003aa0:	2124      	movs	r1, #36	; 0x24
 8003aa2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2101      	movs	r1, #1
 8003ab0:	438a      	bics	r2, r1
 8003ab2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4911      	ldr	r1, [pc, #68]	; (8003b04 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003ac0:	400a      	ands	r2, r1
 8003ac2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6819      	ldr	r1, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2101      	movs	r1, #1
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2241      	movs	r2, #65	; 0x41
 8003ae8:	2120      	movs	r1, #32
 8003aea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2240      	movs	r2, #64	; 0x40
 8003af0:	2100      	movs	r1, #0
 8003af2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003af4:	2300      	movs	r3, #0
 8003af6:	e000      	b.n	8003afa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003af8:	2302      	movs	r3, #2
  }
}
 8003afa:	0018      	movs	r0, r3
 8003afc:	46bd      	mov	sp, r7
 8003afe:	b002      	add	sp, #8
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	ffffefff 	.word	0xffffefff

08003b08 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2241      	movs	r2, #65	; 0x41
 8003b16:	5c9b      	ldrb	r3, [r3, r2]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	d139      	bne.n	8003b92 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2240      	movs	r2, #64	; 0x40
 8003b22:	5c9b      	ldrb	r3, [r3, r2]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e033      	b.n	8003b94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2240      	movs	r2, #64	; 0x40
 8003b30:	2101      	movs	r1, #1
 8003b32:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2241      	movs	r2, #65	; 0x41
 8003b38:	2124      	movs	r1, #36	; 0x24
 8003b3a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2101      	movs	r1, #1
 8003b48:	438a      	bics	r2, r1
 8003b4a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4a11      	ldr	r2, [pc, #68]	; (8003b9c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003b58:	4013      	ands	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2101      	movs	r1, #1
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2241      	movs	r2, #65	; 0x41
 8003b82:	2120      	movs	r1, #32
 8003b84:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2240      	movs	r2, #64	; 0x40
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	e000      	b.n	8003b94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b92:	2302      	movs	r3, #2
  }
}
 8003b94:	0018      	movs	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b004      	add	sp, #16
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	fffff0ff 	.word	0xfffff0ff

08003ba0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b088      	sub	sp, #32
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e301      	b.n	80041b6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d100      	bne.n	8003bbe <HAL_RCC_OscConfig+0x1e>
 8003bbc:	e08d      	b.n	8003cda <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003bbe:	4bc3      	ldr	r3, [pc, #780]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	220c      	movs	r2, #12
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d00e      	beq.n	8003be8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bca:	4bc0      	ldr	r3, [pc, #768]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	220c      	movs	r2, #12
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d116      	bne.n	8003c04 <HAL_RCC_OscConfig+0x64>
 8003bd6:	4bbd      	ldr	r3, [pc, #756]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	2380      	movs	r3, #128	; 0x80
 8003bdc:	025b      	lsls	r3, r3, #9
 8003bde:	401a      	ands	r2, r3
 8003be0:	2380      	movs	r3, #128	; 0x80
 8003be2:	025b      	lsls	r3, r3, #9
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d10d      	bne.n	8003c04 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be8:	4bb8      	ldr	r3, [pc, #736]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	2380      	movs	r3, #128	; 0x80
 8003bee:	029b      	lsls	r3, r3, #10
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	d100      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x56>
 8003bf4:	e070      	b.n	8003cd8 <HAL_RCC_OscConfig+0x138>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d000      	beq.n	8003c00 <HAL_RCC_OscConfig+0x60>
 8003bfe:	e06b      	b.n	8003cd8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e2d8      	b.n	80041b6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d107      	bne.n	8003c1c <HAL_RCC_OscConfig+0x7c>
 8003c0c:	4baf      	ldr	r3, [pc, #700]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	4bae      	ldr	r3, [pc, #696]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003c12:	2180      	movs	r1, #128	; 0x80
 8003c14:	0249      	lsls	r1, r1, #9
 8003c16:	430a      	orrs	r2, r1
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	e02f      	b.n	8003c7c <HAL_RCC_OscConfig+0xdc>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10c      	bne.n	8003c3e <HAL_RCC_OscConfig+0x9e>
 8003c24:	4ba9      	ldr	r3, [pc, #676]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	4ba8      	ldr	r3, [pc, #672]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003c2a:	49a9      	ldr	r1, [pc, #676]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003c2c:	400a      	ands	r2, r1
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	4ba6      	ldr	r3, [pc, #664]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	4ba5      	ldr	r3, [pc, #660]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003c36:	49a7      	ldr	r1, [pc, #668]	; (8003ed4 <HAL_RCC_OscConfig+0x334>)
 8003c38:	400a      	ands	r2, r1
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	e01e      	b.n	8003c7c <HAL_RCC_OscConfig+0xdc>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b05      	cmp	r3, #5
 8003c44:	d10e      	bne.n	8003c64 <HAL_RCC_OscConfig+0xc4>
 8003c46:	4ba1      	ldr	r3, [pc, #644]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	4ba0      	ldr	r3, [pc, #640]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003c4c:	2180      	movs	r1, #128	; 0x80
 8003c4e:	02c9      	lsls	r1, r1, #11
 8003c50:	430a      	orrs	r2, r1
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	4b9d      	ldr	r3, [pc, #628]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	4b9c      	ldr	r3, [pc, #624]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003c5a:	2180      	movs	r1, #128	; 0x80
 8003c5c:	0249      	lsls	r1, r1, #9
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	e00b      	b.n	8003c7c <HAL_RCC_OscConfig+0xdc>
 8003c64:	4b99      	ldr	r3, [pc, #612]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	4b98      	ldr	r3, [pc, #608]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003c6a:	4999      	ldr	r1, [pc, #612]	; (8003ed0 <HAL_RCC_OscConfig+0x330>)
 8003c6c:	400a      	ands	r2, r1
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	4b96      	ldr	r3, [pc, #600]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	4b95      	ldr	r3, [pc, #596]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003c76:	4997      	ldr	r1, [pc, #604]	; (8003ed4 <HAL_RCC_OscConfig+0x334>)
 8003c78:	400a      	ands	r2, r1
 8003c7a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d014      	beq.n	8003cae <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c84:	f7fe fd36 	bl	80026f4 <HAL_GetTick>
 8003c88:	0003      	movs	r3, r0
 8003c8a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8c:	e008      	b.n	8003ca0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c8e:	f7fe fd31 	bl	80026f4 <HAL_GetTick>
 8003c92:	0002      	movs	r2, r0
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b64      	cmp	r3, #100	; 0x64
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e28a      	b.n	80041b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca0:	4b8a      	ldr	r3, [pc, #552]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	2380      	movs	r3, #128	; 0x80
 8003ca6:	029b      	lsls	r3, r3, #10
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d0f0      	beq.n	8003c8e <HAL_RCC_OscConfig+0xee>
 8003cac:	e015      	b.n	8003cda <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cae:	f7fe fd21 	bl	80026f4 <HAL_GetTick>
 8003cb2:	0003      	movs	r3, r0
 8003cb4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cb8:	f7fe fd1c 	bl	80026f4 <HAL_GetTick>
 8003cbc:	0002      	movs	r2, r0
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b64      	cmp	r3, #100	; 0x64
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e275      	b.n	80041b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cca:	4b80      	ldr	r3, [pc, #512]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	2380      	movs	r3, #128	; 0x80
 8003cd0:	029b      	lsls	r3, r3, #10
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x118>
 8003cd6:	e000      	b.n	8003cda <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	d100      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x146>
 8003ce4:	e069      	b.n	8003dba <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003ce6:	4b79      	ldr	r3, [pc, #484]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	220c      	movs	r2, #12
 8003cec:	4013      	ands	r3, r2
 8003cee:	d00b      	beq.n	8003d08 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003cf0:	4b76      	ldr	r3, [pc, #472]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	220c      	movs	r2, #12
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d11c      	bne.n	8003d36 <HAL_RCC_OscConfig+0x196>
 8003cfc:	4b73      	ldr	r3, [pc, #460]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	2380      	movs	r3, #128	; 0x80
 8003d02:	025b      	lsls	r3, r3, #9
 8003d04:	4013      	ands	r3, r2
 8003d06:	d116      	bne.n	8003d36 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d08:	4b70      	ldr	r3, [pc, #448]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	4013      	ands	r3, r2
 8003d10:	d005      	beq.n	8003d1e <HAL_RCC_OscConfig+0x17e>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d001      	beq.n	8003d1e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e24b      	b.n	80041b6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d1e:	4b6b      	ldr	r3, [pc, #428]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	22f8      	movs	r2, #248	; 0xf8
 8003d24:	4393      	bics	r3, r2
 8003d26:	0019      	movs	r1, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	00da      	lsls	r2, r3, #3
 8003d2e:	4b67      	ldr	r3, [pc, #412]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003d30:	430a      	orrs	r2, r1
 8003d32:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d34:	e041      	b.n	8003dba <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d024      	beq.n	8003d88 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d3e:	4b63      	ldr	r3, [pc, #396]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	4b62      	ldr	r3, [pc, #392]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003d44:	2101      	movs	r1, #1
 8003d46:	430a      	orrs	r2, r1
 8003d48:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4a:	f7fe fcd3 	bl	80026f4 <HAL_GetTick>
 8003d4e:	0003      	movs	r3, r0
 8003d50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d54:	f7fe fcce 	bl	80026f4 <HAL_GetTick>
 8003d58:	0002      	movs	r2, r0
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e227      	b.n	80041b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d66:	4b59      	ldr	r3, [pc, #356]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	d0f1      	beq.n	8003d54 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d70:	4b56      	ldr	r3, [pc, #344]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	22f8      	movs	r2, #248	; 0xf8
 8003d76:	4393      	bics	r3, r2
 8003d78:	0019      	movs	r1, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	00da      	lsls	r2, r3, #3
 8003d80:	4b52      	ldr	r3, [pc, #328]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003d82:	430a      	orrs	r2, r1
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	e018      	b.n	8003dba <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d88:	4b50      	ldr	r3, [pc, #320]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	4b4f      	ldr	r3, [pc, #316]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003d8e:	2101      	movs	r1, #1
 8003d90:	438a      	bics	r2, r1
 8003d92:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d94:	f7fe fcae 	bl	80026f4 <HAL_GetTick>
 8003d98:	0003      	movs	r3, r0
 8003d9a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d9e:	f7fe fca9 	bl	80026f4 <HAL_GetTick>
 8003da2:	0002      	movs	r2, r0
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e202      	b.n	80041b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003db0:	4b46      	ldr	r3, [pc, #280]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2202      	movs	r2, #2
 8003db6:	4013      	ands	r3, r2
 8003db8:	d1f1      	bne.n	8003d9e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2208      	movs	r2, #8
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	d036      	beq.n	8003e32 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d019      	beq.n	8003e00 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dcc:	4b3f      	ldr	r3, [pc, #252]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003dce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dd0:	4b3e      	ldr	r3, [pc, #248]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd8:	f7fe fc8c 	bl	80026f4 <HAL_GetTick>
 8003ddc:	0003      	movs	r3, r0
 8003dde:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003de2:	f7fe fc87 	bl	80026f4 <HAL_GetTick>
 8003de6:	0002      	movs	r2, r0
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e1e0      	b.n	80041b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003df4:	4b35      	ldr	r3, [pc, #212]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	2202      	movs	r2, #2
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	d0f1      	beq.n	8003de2 <HAL_RCC_OscConfig+0x242>
 8003dfe:	e018      	b.n	8003e32 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e00:	4b32      	ldr	r3, [pc, #200]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003e02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e04:	4b31      	ldr	r3, [pc, #196]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003e06:	2101      	movs	r1, #1
 8003e08:	438a      	bics	r2, r1
 8003e0a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e0c:	f7fe fc72 	bl	80026f4 <HAL_GetTick>
 8003e10:	0003      	movs	r3, r0
 8003e12:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e14:	e008      	b.n	8003e28 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e16:	f7fe fc6d 	bl	80026f4 <HAL_GetTick>
 8003e1a:	0002      	movs	r2, r0
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e1c6      	b.n	80041b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e28:	4b28      	ldr	r3, [pc, #160]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	4013      	ands	r3, r2
 8003e30:	d1f1      	bne.n	8003e16 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2204      	movs	r2, #4
 8003e38:	4013      	ands	r3, r2
 8003e3a:	d100      	bne.n	8003e3e <HAL_RCC_OscConfig+0x29e>
 8003e3c:	e0b4      	b.n	8003fa8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e3e:	201f      	movs	r0, #31
 8003e40:	183b      	adds	r3, r7, r0
 8003e42:	2200      	movs	r2, #0
 8003e44:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e46:	4b21      	ldr	r3, [pc, #132]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003e48:	69da      	ldr	r2, [r3, #28]
 8003e4a:	2380      	movs	r3, #128	; 0x80
 8003e4c:	055b      	lsls	r3, r3, #21
 8003e4e:	4013      	ands	r3, r2
 8003e50:	d110      	bne.n	8003e74 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e52:	4b1e      	ldr	r3, [pc, #120]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003e54:	69da      	ldr	r2, [r3, #28]
 8003e56:	4b1d      	ldr	r3, [pc, #116]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003e58:	2180      	movs	r1, #128	; 0x80
 8003e5a:	0549      	lsls	r1, r1, #21
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	61da      	str	r2, [r3, #28]
 8003e60:	4b1a      	ldr	r3, [pc, #104]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003e62:	69da      	ldr	r2, [r3, #28]
 8003e64:	2380      	movs	r3, #128	; 0x80
 8003e66:	055b      	lsls	r3, r3, #21
 8003e68:	4013      	ands	r3, r2
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e6e:	183b      	adds	r3, r7, r0
 8003e70:	2201      	movs	r2, #1
 8003e72:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e74:	4b18      	ldr	r3, [pc, #96]	; (8003ed8 <HAL_RCC_OscConfig+0x338>)
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	2380      	movs	r3, #128	; 0x80
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	d11a      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e80:	4b15      	ldr	r3, [pc, #84]	; (8003ed8 <HAL_RCC_OscConfig+0x338>)
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	4b14      	ldr	r3, [pc, #80]	; (8003ed8 <HAL_RCC_OscConfig+0x338>)
 8003e86:	2180      	movs	r1, #128	; 0x80
 8003e88:	0049      	lsls	r1, r1, #1
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e8e:	f7fe fc31 	bl	80026f4 <HAL_GetTick>
 8003e92:	0003      	movs	r3, r0
 8003e94:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e98:	f7fe fc2c 	bl	80026f4 <HAL_GetTick>
 8003e9c:	0002      	movs	r2, r0
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b64      	cmp	r3, #100	; 0x64
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e185      	b.n	80041b6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <HAL_RCC_OscConfig+0x338>)
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	2380      	movs	r3, #128	; 0x80
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d0f0      	beq.n	8003e98 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d10e      	bne.n	8003edc <HAL_RCC_OscConfig+0x33c>
 8003ebe:	4b03      	ldr	r3, [pc, #12]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003ec0:	6a1a      	ldr	r2, [r3, #32]
 8003ec2:	4b02      	ldr	r3, [pc, #8]	; (8003ecc <HAL_RCC_OscConfig+0x32c>)
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	621a      	str	r2, [r3, #32]
 8003eca:	e035      	b.n	8003f38 <HAL_RCC_OscConfig+0x398>
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	fffeffff 	.word	0xfffeffff
 8003ed4:	fffbffff 	.word	0xfffbffff
 8003ed8:	40007000 	.word	0x40007000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10c      	bne.n	8003efe <HAL_RCC_OscConfig+0x35e>
 8003ee4:	4bb6      	ldr	r3, [pc, #728]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 8003ee6:	6a1a      	ldr	r2, [r3, #32]
 8003ee8:	4bb5      	ldr	r3, [pc, #724]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 8003eea:	2101      	movs	r1, #1
 8003eec:	438a      	bics	r2, r1
 8003eee:	621a      	str	r2, [r3, #32]
 8003ef0:	4bb3      	ldr	r3, [pc, #716]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 8003ef2:	6a1a      	ldr	r2, [r3, #32]
 8003ef4:	4bb2      	ldr	r3, [pc, #712]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 8003ef6:	2104      	movs	r1, #4
 8003ef8:	438a      	bics	r2, r1
 8003efa:	621a      	str	r2, [r3, #32]
 8003efc:	e01c      	b.n	8003f38 <HAL_RCC_OscConfig+0x398>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	2b05      	cmp	r3, #5
 8003f04:	d10c      	bne.n	8003f20 <HAL_RCC_OscConfig+0x380>
 8003f06:	4bae      	ldr	r3, [pc, #696]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 8003f08:	6a1a      	ldr	r2, [r3, #32]
 8003f0a:	4bad      	ldr	r3, [pc, #692]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 8003f0c:	2104      	movs	r1, #4
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	621a      	str	r2, [r3, #32]
 8003f12:	4bab      	ldr	r3, [pc, #684]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 8003f14:	6a1a      	ldr	r2, [r3, #32]
 8003f16:	4baa      	ldr	r3, [pc, #680]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 8003f18:	2101      	movs	r1, #1
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	621a      	str	r2, [r3, #32]
 8003f1e:	e00b      	b.n	8003f38 <HAL_RCC_OscConfig+0x398>
 8003f20:	4ba7      	ldr	r3, [pc, #668]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 8003f22:	6a1a      	ldr	r2, [r3, #32]
 8003f24:	4ba6      	ldr	r3, [pc, #664]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 8003f26:	2101      	movs	r1, #1
 8003f28:	438a      	bics	r2, r1
 8003f2a:	621a      	str	r2, [r3, #32]
 8003f2c:	4ba4      	ldr	r3, [pc, #656]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 8003f2e:	6a1a      	ldr	r2, [r3, #32]
 8003f30:	4ba3      	ldr	r3, [pc, #652]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 8003f32:	2104      	movs	r1, #4
 8003f34:	438a      	bics	r2, r1
 8003f36:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d014      	beq.n	8003f6a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f40:	f7fe fbd8 	bl	80026f4 <HAL_GetTick>
 8003f44:	0003      	movs	r3, r0
 8003f46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f48:	e009      	b.n	8003f5e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f4a:	f7fe fbd3 	bl	80026f4 <HAL_GetTick>
 8003f4e:	0002      	movs	r2, r0
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	4a9b      	ldr	r2, [pc, #620]	; (80041c4 <HAL_RCC_OscConfig+0x624>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e12b      	b.n	80041b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f5e:	4b98      	ldr	r3, [pc, #608]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	2202      	movs	r2, #2
 8003f64:	4013      	ands	r3, r2
 8003f66:	d0f0      	beq.n	8003f4a <HAL_RCC_OscConfig+0x3aa>
 8003f68:	e013      	b.n	8003f92 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f6a:	f7fe fbc3 	bl	80026f4 <HAL_GetTick>
 8003f6e:	0003      	movs	r3, r0
 8003f70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f72:	e009      	b.n	8003f88 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f74:	f7fe fbbe 	bl	80026f4 <HAL_GetTick>
 8003f78:	0002      	movs	r2, r0
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	4a91      	ldr	r2, [pc, #580]	; (80041c4 <HAL_RCC_OscConfig+0x624>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e116      	b.n	80041b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f88:	4b8d      	ldr	r3, [pc, #564]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	4013      	ands	r3, r2
 8003f90:	d1f0      	bne.n	8003f74 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f92:	231f      	movs	r3, #31
 8003f94:	18fb      	adds	r3, r7, r3
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d105      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f9c:	4b88      	ldr	r3, [pc, #544]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 8003f9e:	69da      	ldr	r2, [r3, #28]
 8003fa0:	4b87      	ldr	r3, [pc, #540]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 8003fa2:	4989      	ldr	r1, [pc, #548]	; (80041c8 <HAL_RCC_OscConfig+0x628>)
 8003fa4:	400a      	ands	r2, r1
 8003fa6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2210      	movs	r2, #16
 8003fae:	4013      	ands	r3, r2
 8003fb0:	d063      	beq.n	800407a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d12a      	bne.n	8004010 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003fba:	4b81      	ldr	r3, [pc, #516]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 8003fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fbe:	4b80      	ldr	r3, [pc, #512]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 8003fc0:	2104      	movs	r1, #4
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003fc6:	4b7e      	ldr	r3, [pc, #504]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 8003fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fca:	4b7d      	ldr	r3, [pc, #500]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 8003fcc:	2101      	movs	r1, #1
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd2:	f7fe fb8f 	bl	80026f4 <HAL_GetTick>
 8003fd6:	0003      	movs	r3, r0
 8003fd8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003fdc:	f7fe fb8a 	bl	80026f4 <HAL_GetTick>
 8003fe0:	0002      	movs	r2, r0
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e0e3      	b.n	80041b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003fee:	4b74      	ldr	r3, [pc, #464]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 8003ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	d0f1      	beq.n	8003fdc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003ff8:	4b71      	ldr	r3, [pc, #452]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 8003ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffc:	22f8      	movs	r2, #248	; 0xf8
 8003ffe:	4393      	bics	r3, r2
 8004000:	0019      	movs	r1, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	00da      	lsls	r2, r3, #3
 8004008:	4b6d      	ldr	r3, [pc, #436]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 800400a:	430a      	orrs	r2, r1
 800400c:	635a      	str	r2, [r3, #52]	; 0x34
 800400e:	e034      	b.n	800407a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	3305      	adds	r3, #5
 8004016:	d111      	bne.n	800403c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004018:	4b69      	ldr	r3, [pc, #420]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 800401a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800401c:	4b68      	ldr	r3, [pc, #416]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 800401e:	2104      	movs	r1, #4
 8004020:	438a      	bics	r2, r1
 8004022:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004024:	4b66      	ldr	r3, [pc, #408]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 8004026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004028:	22f8      	movs	r2, #248	; 0xf8
 800402a:	4393      	bics	r3, r2
 800402c:	0019      	movs	r1, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	00da      	lsls	r2, r3, #3
 8004034:	4b62      	ldr	r3, [pc, #392]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 8004036:	430a      	orrs	r2, r1
 8004038:	635a      	str	r2, [r3, #52]	; 0x34
 800403a:	e01e      	b.n	800407a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800403c:	4b60      	ldr	r3, [pc, #384]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 800403e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004040:	4b5f      	ldr	r3, [pc, #380]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 8004042:	2104      	movs	r1, #4
 8004044:	430a      	orrs	r2, r1
 8004046:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004048:	4b5d      	ldr	r3, [pc, #372]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 800404a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800404c:	4b5c      	ldr	r3, [pc, #368]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 800404e:	2101      	movs	r1, #1
 8004050:	438a      	bics	r2, r1
 8004052:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004054:	f7fe fb4e 	bl	80026f4 <HAL_GetTick>
 8004058:	0003      	movs	r3, r0
 800405a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800405c:	e008      	b.n	8004070 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800405e:	f7fe fb49 	bl	80026f4 <HAL_GetTick>
 8004062:	0002      	movs	r2, r0
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e0a2      	b.n	80041b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004070:	4b53      	ldr	r3, [pc, #332]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 8004072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004074:	2202      	movs	r2, #2
 8004076:	4013      	ands	r3, r2
 8004078:	d1f1      	bne.n	800405e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d100      	bne.n	8004084 <HAL_RCC_OscConfig+0x4e4>
 8004082:	e097      	b.n	80041b4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004084:	4b4e      	ldr	r3, [pc, #312]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	220c      	movs	r2, #12
 800408a:	4013      	ands	r3, r2
 800408c:	2b08      	cmp	r3, #8
 800408e:	d100      	bne.n	8004092 <HAL_RCC_OscConfig+0x4f2>
 8004090:	e06b      	b.n	800416a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	2b02      	cmp	r3, #2
 8004098:	d14c      	bne.n	8004134 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800409a:	4b49      	ldr	r3, [pc, #292]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	4b48      	ldr	r3, [pc, #288]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 80040a0:	494a      	ldr	r1, [pc, #296]	; (80041cc <HAL_RCC_OscConfig+0x62c>)
 80040a2:	400a      	ands	r2, r1
 80040a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a6:	f7fe fb25 	bl	80026f4 <HAL_GetTick>
 80040aa:	0003      	movs	r3, r0
 80040ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040b0:	f7fe fb20 	bl	80026f4 <HAL_GetTick>
 80040b4:	0002      	movs	r2, r0
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e079      	b.n	80041b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040c2:	4b3f      	ldr	r3, [pc, #252]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	2380      	movs	r3, #128	; 0x80
 80040c8:	049b      	lsls	r3, r3, #18
 80040ca:	4013      	ands	r3, r2
 80040cc:	d1f0      	bne.n	80040b0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040ce:	4b3c      	ldr	r3, [pc, #240]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 80040d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d2:	220f      	movs	r2, #15
 80040d4:	4393      	bics	r3, r2
 80040d6:	0019      	movs	r1, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040dc:	4b38      	ldr	r3, [pc, #224]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 80040de:	430a      	orrs	r2, r1
 80040e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80040e2:	4b37      	ldr	r3, [pc, #220]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	4a3a      	ldr	r2, [pc, #232]	; (80041d0 <HAL_RCC_OscConfig+0x630>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	0019      	movs	r1, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	431a      	orrs	r2, r3
 80040f6:	4b32      	ldr	r3, [pc, #200]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 80040f8:	430a      	orrs	r2, r1
 80040fa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040fc:	4b30      	ldr	r3, [pc, #192]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	4b2f      	ldr	r3, [pc, #188]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 8004102:	2180      	movs	r1, #128	; 0x80
 8004104:	0449      	lsls	r1, r1, #17
 8004106:	430a      	orrs	r2, r1
 8004108:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800410a:	f7fe faf3 	bl	80026f4 <HAL_GetTick>
 800410e:	0003      	movs	r3, r0
 8004110:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004114:	f7fe faee 	bl	80026f4 <HAL_GetTick>
 8004118:	0002      	movs	r2, r0
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e047      	b.n	80041b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004126:	4b26      	ldr	r3, [pc, #152]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	2380      	movs	r3, #128	; 0x80
 800412c:	049b      	lsls	r3, r3, #18
 800412e:	4013      	ands	r3, r2
 8004130:	d0f0      	beq.n	8004114 <HAL_RCC_OscConfig+0x574>
 8004132:	e03f      	b.n	80041b4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004134:	4b22      	ldr	r3, [pc, #136]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	4b21      	ldr	r3, [pc, #132]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 800413a:	4924      	ldr	r1, [pc, #144]	; (80041cc <HAL_RCC_OscConfig+0x62c>)
 800413c:	400a      	ands	r2, r1
 800413e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004140:	f7fe fad8 	bl	80026f4 <HAL_GetTick>
 8004144:	0003      	movs	r3, r0
 8004146:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800414a:	f7fe fad3 	bl	80026f4 <HAL_GetTick>
 800414e:	0002      	movs	r2, r0
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e02c      	b.n	80041b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800415c:	4b18      	ldr	r3, [pc, #96]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	2380      	movs	r3, #128	; 0x80
 8004162:	049b      	lsls	r3, r3, #18
 8004164:	4013      	ands	r3, r2
 8004166:	d1f0      	bne.n	800414a <HAL_RCC_OscConfig+0x5aa>
 8004168:	e024      	b.n	80041b4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d101      	bne.n	8004176 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e01f      	b.n	80041b6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004176:	4b12      	ldr	r3, [pc, #72]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800417c:	4b10      	ldr	r3, [pc, #64]	; (80041c0 <HAL_RCC_OscConfig+0x620>)
 800417e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004180:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	2380      	movs	r3, #128	; 0x80
 8004186:	025b      	lsls	r3, r3, #9
 8004188:	401a      	ands	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	429a      	cmp	r2, r3
 8004190:	d10e      	bne.n	80041b0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	220f      	movs	r2, #15
 8004196:	401a      	ands	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800419c:	429a      	cmp	r2, r3
 800419e:	d107      	bne.n	80041b0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	23f0      	movs	r3, #240	; 0xf0
 80041a4:	039b      	lsls	r3, r3, #14
 80041a6:	401a      	ands	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d001      	beq.n	80041b4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e000      	b.n	80041b6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	0018      	movs	r0, r3
 80041b8:	46bd      	mov	sp, r7
 80041ba:	b008      	add	sp, #32
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	40021000 	.word	0x40021000
 80041c4:	00001388 	.word	0x00001388
 80041c8:	efffffff 	.word	0xefffffff
 80041cc:	feffffff 	.word	0xfeffffff
 80041d0:	ffc2ffff 	.word	0xffc2ffff

080041d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e0b3      	b.n	8004350 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041e8:	4b5b      	ldr	r3, [pc, #364]	; (8004358 <HAL_RCC_ClockConfig+0x184>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2201      	movs	r2, #1
 80041ee:	4013      	ands	r3, r2
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d911      	bls.n	800421a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f6:	4b58      	ldr	r3, [pc, #352]	; (8004358 <HAL_RCC_ClockConfig+0x184>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2201      	movs	r2, #1
 80041fc:	4393      	bics	r3, r2
 80041fe:	0019      	movs	r1, r3
 8004200:	4b55      	ldr	r3, [pc, #340]	; (8004358 <HAL_RCC_ClockConfig+0x184>)
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004208:	4b53      	ldr	r3, [pc, #332]	; (8004358 <HAL_RCC_ClockConfig+0x184>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2201      	movs	r2, #1
 800420e:	4013      	ands	r3, r2
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	d001      	beq.n	800421a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e09a      	b.n	8004350 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2202      	movs	r2, #2
 8004220:	4013      	ands	r3, r2
 8004222:	d015      	beq.n	8004250 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2204      	movs	r2, #4
 800422a:	4013      	ands	r3, r2
 800422c:	d006      	beq.n	800423c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800422e:	4b4b      	ldr	r3, [pc, #300]	; (800435c <HAL_RCC_ClockConfig+0x188>)
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	4b4a      	ldr	r3, [pc, #296]	; (800435c <HAL_RCC_ClockConfig+0x188>)
 8004234:	21e0      	movs	r1, #224	; 0xe0
 8004236:	00c9      	lsls	r1, r1, #3
 8004238:	430a      	orrs	r2, r1
 800423a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800423c:	4b47      	ldr	r3, [pc, #284]	; (800435c <HAL_RCC_ClockConfig+0x188>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	22f0      	movs	r2, #240	; 0xf0
 8004242:	4393      	bics	r3, r2
 8004244:	0019      	movs	r1, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689a      	ldr	r2, [r3, #8]
 800424a:	4b44      	ldr	r3, [pc, #272]	; (800435c <HAL_RCC_ClockConfig+0x188>)
 800424c:	430a      	orrs	r2, r1
 800424e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2201      	movs	r2, #1
 8004256:	4013      	ands	r3, r2
 8004258:	d040      	beq.n	80042dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d107      	bne.n	8004272 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004262:	4b3e      	ldr	r3, [pc, #248]	; (800435c <HAL_RCC_ClockConfig+0x188>)
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	2380      	movs	r3, #128	; 0x80
 8004268:	029b      	lsls	r3, r3, #10
 800426a:	4013      	ands	r3, r2
 800426c:	d114      	bne.n	8004298 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e06e      	b.n	8004350 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d107      	bne.n	800428a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800427a:	4b38      	ldr	r3, [pc, #224]	; (800435c <HAL_RCC_ClockConfig+0x188>)
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	2380      	movs	r3, #128	; 0x80
 8004280:	049b      	lsls	r3, r3, #18
 8004282:	4013      	ands	r3, r2
 8004284:	d108      	bne.n	8004298 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e062      	b.n	8004350 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800428a:	4b34      	ldr	r3, [pc, #208]	; (800435c <HAL_RCC_ClockConfig+0x188>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2202      	movs	r2, #2
 8004290:	4013      	ands	r3, r2
 8004292:	d101      	bne.n	8004298 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e05b      	b.n	8004350 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004298:	4b30      	ldr	r3, [pc, #192]	; (800435c <HAL_RCC_ClockConfig+0x188>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2203      	movs	r2, #3
 800429e:	4393      	bics	r3, r2
 80042a0:	0019      	movs	r1, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	4b2d      	ldr	r3, [pc, #180]	; (800435c <HAL_RCC_ClockConfig+0x188>)
 80042a8:	430a      	orrs	r2, r1
 80042aa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042ac:	f7fe fa22 	bl	80026f4 <HAL_GetTick>
 80042b0:	0003      	movs	r3, r0
 80042b2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b4:	e009      	b.n	80042ca <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b6:	f7fe fa1d 	bl	80026f4 <HAL_GetTick>
 80042ba:	0002      	movs	r2, r0
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	4a27      	ldr	r2, [pc, #156]	; (8004360 <HAL_RCC_ClockConfig+0x18c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e042      	b.n	8004350 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ca:	4b24      	ldr	r3, [pc, #144]	; (800435c <HAL_RCC_ClockConfig+0x188>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	220c      	movs	r2, #12
 80042d0:	401a      	ands	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	429a      	cmp	r2, r3
 80042da:	d1ec      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042dc:	4b1e      	ldr	r3, [pc, #120]	; (8004358 <HAL_RCC_ClockConfig+0x184>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2201      	movs	r2, #1
 80042e2:	4013      	ands	r3, r2
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d211      	bcs.n	800430e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ea:	4b1b      	ldr	r3, [pc, #108]	; (8004358 <HAL_RCC_ClockConfig+0x184>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2201      	movs	r2, #1
 80042f0:	4393      	bics	r3, r2
 80042f2:	0019      	movs	r1, r3
 80042f4:	4b18      	ldr	r3, [pc, #96]	; (8004358 <HAL_RCC_ClockConfig+0x184>)
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fc:	4b16      	ldr	r3, [pc, #88]	; (8004358 <HAL_RCC_ClockConfig+0x184>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2201      	movs	r2, #1
 8004302:	4013      	ands	r3, r2
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	429a      	cmp	r2, r3
 8004308:	d001      	beq.n	800430e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e020      	b.n	8004350 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2204      	movs	r2, #4
 8004314:	4013      	ands	r3, r2
 8004316:	d009      	beq.n	800432c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004318:	4b10      	ldr	r3, [pc, #64]	; (800435c <HAL_RCC_ClockConfig+0x188>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	4a11      	ldr	r2, [pc, #68]	; (8004364 <HAL_RCC_ClockConfig+0x190>)
 800431e:	4013      	ands	r3, r2
 8004320:	0019      	movs	r1, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	4b0d      	ldr	r3, [pc, #52]	; (800435c <HAL_RCC_ClockConfig+0x188>)
 8004328:	430a      	orrs	r2, r1
 800432a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800432c:	f000 f820 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 8004330:	0001      	movs	r1, r0
 8004332:	4b0a      	ldr	r3, [pc, #40]	; (800435c <HAL_RCC_ClockConfig+0x188>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	091b      	lsrs	r3, r3, #4
 8004338:	220f      	movs	r2, #15
 800433a:	4013      	ands	r3, r2
 800433c:	4a0a      	ldr	r2, [pc, #40]	; (8004368 <HAL_RCC_ClockConfig+0x194>)
 800433e:	5cd3      	ldrb	r3, [r2, r3]
 8004340:	000a      	movs	r2, r1
 8004342:	40da      	lsrs	r2, r3
 8004344:	4b09      	ldr	r3, [pc, #36]	; (800436c <HAL_RCC_ClockConfig+0x198>)
 8004346:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004348:	2000      	movs	r0, #0
 800434a:	f7fe f98d 	bl	8002668 <HAL_InitTick>
  
  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	0018      	movs	r0, r3
 8004352:	46bd      	mov	sp, r7
 8004354:	b004      	add	sp, #16
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40022000 	.word	0x40022000
 800435c:	40021000 	.word	0x40021000
 8004360:	00001388 	.word	0x00001388
 8004364:	fffff8ff 	.word	0xfffff8ff
 8004368:	0800969c 	.word	0x0800969c
 800436c:	2000001c 	.word	0x2000001c

08004370 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004370:	b590      	push	{r4, r7, lr}
 8004372:	b08f      	sub	sp, #60	; 0x3c
 8004374:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004376:	2314      	movs	r3, #20
 8004378:	18fb      	adds	r3, r7, r3
 800437a:	4a2b      	ldr	r2, [pc, #172]	; (8004428 <HAL_RCC_GetSysClockFreq+0xb8>)
 800437c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800437e:	c313      	stmia	r3!, {r0, r1, r4}
 8004380:	6812      	ldr	r2, [r2, #0]
 8004382:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004384:	1d3b      	adds	r3, r7, #4
 8004386:	4a29      	ldr	r2, [pc, #164]	; (800442c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004388:	ca13      	ldmia	r2!, {r0, r1, r4}
 800438a:	c313      	stmia	r3!, {r0, r1, r4}
 800438c:	6812      	ldr	r2, [r2, #0]
 800438e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004394:	2300      	movs	r3, #0
 8004396:	62bb      	str	r3, [r7, #40]	; 0x28
 8004398:	2300      	movs	r3, #0
 800439a:	637b      	str	r3, [r7, #52]	; 0x34
 800439c:	2300      	movs	r3, #0
 800439e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80043a4:	4b22      	ldr	r3, [pc, #136]	; (8004430 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ac:	220c      	movs	r2, #12
 80043ae:	4013      	ands	r3, r2
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d002      	beq.n	80043ba <HAL_RCC_GetSysClockFreq+0x4a>
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d003      	beq.n	80043c0 <HAL_RCC_GetSysClockFreq+0x50>
 80043b8:	e02d      	b.n	8004416 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043ba:	4b1e      	ldr	r3, [pc, #120]	; (8004434 <HAL_RCC_GetSysClockFreq+0xc4>)
 80043bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80043be:	e02d      	b.n	800441c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80043c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c2:	0c9b      	lsrs	r3, r3, #18
 80043c4:	220f      	movs	r2, #15
 80043c6:	4013      	ands	r3, r2
 80043c8:	2214      	movs	r2, #20
 80043ca:	18ba      	adds	r2, r7, r2
 80043cc:	5cd3      	ldrb	r3, [r2, r3]
 80043ce:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80043d0:	4b17      	ldr	r3, [pc, #92]	; (8004430 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d4:	220f      	movs	r2, #15
 80043d6:	4013      	ands	r3, r2
 80043d8:	1d3a      	adds	r2, r7, #4
 80043da:	5cd3      	ldrb	r3, [r2, r3]
 80043dc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80043de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043e0:	2380      	movs	r3, #128	; 0x80
 80043e2:	025b      	lsls	r3, r3, #9
 80043e4:	4013      	ands	r3, r2
 80043e6:	d009      	beq.n	80043fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80043e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043ea:	4812      	ldr	r0, [pc, #72]	; (8004434 <HAL_RCC_GetSysClockFreq+0xc4>)
 80043ec:	f7fb fe9e 	bl	800012c <__udivsi3>
 80043f0:	0003      	movs	r3, r0
 80043f2:	001a      	movs	r2, r3
 80043f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f6:	4353      	muls	r3, r2
 80043f8:	637b      	str	r3, [r7, #52]	; 0x34
 80043fa:	e009      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80043fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043fe:	000a      	movs	r2, r1
 8004400:	0152      	lsls	r2, r2, #5
 8004402:	1a52      	subs	r2, r2, r1
 8004404:	0193      	lsls	r3, r2, #6
 8004406:	1a9b      	subs	r3, r3, r2
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	185b      	adds	r3, r3, r1
 800440c:	021b      	lsls	r3, r3, #8
 800440e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004412:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004414:	e002      	b.n	800441c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004416:	4b07      	ldr	r3, [pc, #28]	; (8004434 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004418:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800441a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800441c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800441e:	0018      	movs	r0, r3
 8004420:	46bd      	mov	sp, r7
 8004422:	b00f      	add	sp, #60	; 0x3c
 8004424:	bd90      	pop	{r4, r7, pc}
 8004426:	46c0      	nop			; (mov r8, r8)
 8004428:	08006e68 	.word	0x08006e68
 800442c:	08006e78 	.word	0x08006e78
 8004430:	40021000 	.word	0x40021000
 8004434:	007a1200 	.word	0x007a1200

08004438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800443c:	4b02      	ldr	r3, [pc, #8]	; (8004448 <HAL_RCC_GetHCLKFreq+0x10>)
 800443e:	681b      	ldr	r3, [r3, #0]
}
 8004440:	0018      	movs	r0, r3
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	2000001c 	.word	0x2000001c

0800444c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004450:	f7ff fff2 	bl	8004438 <HAL_RCC_GetHCLKFreq>
 8004454:	0001      	movs	r1, r0
 8004456:	4b06      	ldr	r3, [pc, #24]	; (8004470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	0a1b      	lsrs	r3, r3, #8
 800445c:	2207      	movs	r2, #7
 800445e:	4013      	ands	r3, r2
 8004460:	4a04      	ldr	r2, [pc, #16]	; (8004474 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004462:	5cd3      	ldrb	r3, [r2, r3]
 8004464:	40d9      	lsrs	r1, r3
 8004466:	000b      	movs	r3, r1
}    
 8004468:	0018      	movs	r0, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	40021000 	.word	0x40021000
 8004474:	080096ac 	.word	0x080096ac

08004478 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	2380      	movs	r3, #128	; 0x80
 800448e:	025b      	lsls	r3, r3, #9
 8004490:	4013      	ands	r3, r2
 8004492:	d100      	bne.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004494:	e08e      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004496:	2017      	movs	r0, #23
 8004498:	183b      	adds	r3, r7, r0
 800449a:	2200      	movs	r2, #0
 800449c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800449e:	4b57      	ldr	r3, [pc, #348]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80044a0:	69da      	ldr	r2, [r3, #28]
 80044a2:	2380      	movs	r3, #128	; 0x80
 80044a4:	055b      	lsls	r3, r3, #21
 80044a6:	4013      	ands	r3, r2
 80044a8:	d110      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044aa:	4b54      	ldr	r3, [pc, #336]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80044ac:	69da      	ldr	r2, [r3, #28]
 80044ae:	4b53      	ldr	r3, [pc, #332]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80044b0:	2180      	movs	r1, #128	; 0x80
 80044b2:	0549      	lsls	r1, r1, #21
 80044b4:	430a      	orrs	r2, r1
 80044b6:	61da      	str	r2, [r3, #28]
 80044b8:	4b50      	ldr	r3, [pc, #320]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80044ba:	69da      	ldr	r2, [r3, #28]
 80044bc:	2380      	movs	r3, #128	; 0x80
 80044be:	055b      	lsls	r3, r3, #21
 80044c0:	4013      	ands	r3, r2
 80044c2:	60bb      	str	r3, [r7, #8]
 80044c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044c6:	183b      	adds	r3, r7, r0
 80044c8:	2201      	movs	r2, #1
 80044ca:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044cc:	4b4c      	ldr	r3, [pc, #304]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	2380      	movs	r3, #128	; 0x80
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	4013      	ands	r3, r2
 80044d6:	d11a      	bne.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044d8:	4b49      	ldr	r3, [pc, #292]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	4b48      	ldr	r3, [pc, #288]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80044de:	2180      	movs	r1, #128	; 0x80
 80044e0:	0049      	lsls	r1, r1, #1
 80044e2:	430a      	orrs	r2, r1
 80044e4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044e6:	f7fe f905 	bl	80026f4 <HAL_GetTick>
 80044ea:	0003      	movs	r3, r0
 80044ec:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ee:	e008      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f0:	f7fe f900 	bl	80026f4 <HAL_GetTick>
 80044f4:	0002      	movs	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b64      	cmp	r3, #100	; 0x64
 80044fc:	d901      	bls.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e077      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004502:	4b3f      	ldr	r3, [pc, #252]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	2380      	movs	r3, #128	; 0x80
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	4013      	ands	r3, r2
 800450c:	d0f0      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800450e:	4b3b      	ldr	r3, [pc, #236]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004510:	6a1a      	ldr	r2, [r3, #32]
 8004512:	23c0      	movs	r3, #192	; 0xc0
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4013      	ands	r3, r2
 8004518:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d034      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	23c0      	movs	r3, #192	; 0xc0
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4013      	ands	r3, r2
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	429a      	cmp	r2, r3
 800452e:	d02c      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004530:	4b32      	ldr	r3, [pc, #200]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	4a33      	ldr	r2, [pc, #204]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004536:	4013      	ands	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800453a:	4b30      	ldr	r3, [pc, #192]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800453c:	6a1a      	ldr	r2, [r3, #32]
 800453e:	4b2f      	ldr	r3, [pc, #188]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004540:	2180      	movs	r1, #128	; 0x80
 8004542:	0249      	lsls	r1, r1, #9
 8004544:	430a      	orrs	r2, r1
 8004546:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004548:	4b2c      	ldr	r3, [pc, #176]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800454a:	6a1a      	ldr	r2, [r3, #32]
 800454c:	4b2b      	ldr	r3, [pc, #172]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800454e:	492e      	ldr	r1, [pc, #184]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004550:	400a      	ands	r2, r1
 8004552:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004554:	4b29      	ldr	r3, [pc, #164]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2201      	movs	r2, #1
 800455e:	4013      	ands	r3, r2
 8004560:	d013      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004562:	f7fe f8c7 	bl	80026f4 <HAL_GetTick>
 8004566:	0003      	movs	r3, r0
 8004568:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800456a:	e009      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800456c:	f7fe f8c2 	bl	80026f4 <HAL_GetTick>
 8004570:	0002      	movs	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	4a25      	ldr	r2, [pc, #148]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d901      	bls.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e038      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004580:	4b1e      	ldr	r3, [pc, #120]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	2202      	movs	r2, #2
 8004586:	4013      	ands	r3, r2
 8004588:	d0f0      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800458a:	4b1c      	ldr	r3, [pc, #112]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	4a1d      	ldr	r2, [pc, #116]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004590:	4013      	ands	r3, r2
 8004592:	0019      	movs	r1, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	4b18      	ldr	r3, [pc, #96]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800459a:	430a      	orrs	r2, r1
 800459c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800459e:	2317      	movs	r3, #23
 80045a0:	18fb      	adds	r3, r7, r3
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d105      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045a8:	4b14      	ldr	r3, [pc, #80]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045aa:	69da      	ldr	r2, [r3, #28]
 80045ac:	4b13      	ldr	r3, [pc, #76]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045ae:	4918      	ldr	r1, [pc, #96]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80045b0:	400a      	ands	r2, r1
 80045b2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2201      	movs	r2, #1
 80045ba:	4013      	ands	r3, r2
 80045bc:	d009      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045be:	4b0f      	ldr	r3, [pc, #60]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c2:	2203      	movs	r2, #3
 80045c4:	4393      	bics	r3, r2
 80045c6:	0019      	movs	r1, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	4b0b      	ldr	r3, [pc, #44]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045ce:	430a      	orrs	r2, r1
 80045d0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2220      	movs	r2, #32
 80045d8:	4013      	ands	r3, r2
 80045da:	d009      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045dc:	4b07      	ldr	r3, [pc, #28]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e0:	2210      	movs	r2, #16
 80045e2:	4393      	bics	r3, r2
 80045e4:	0019      	movs	r1, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	4b04      	ldr	r3, [pc, #16]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045ec:	430a      	orrs	r2, r1
 80045ee:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	0018      	movs	r0, r3
 80045f4:	46bd      	mov	sp, r7
 80045f6:	b006      	add	sp, #24
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	46c0      	nop			; (mov r8, r8)
 80045fc:	40021000 	.word	0x40021000
 8004600:	40007000 	.word	0x40007000
 8004604:	fffffcff 	.word	0xfffffcff
 8004608:	fffeffff 	.word	0xfffeffff
 800460c:	00001388 	.word	0x00001388
 8004610:	efffffff 	.word	0xefffffff

08004614 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e044      	b.n	80046b0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800462a:	2b00      	cmp	r3, #0
 800462c:	d107      	bne.n	800463e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2274      	movs	r2, #116	; 0x74
 8004632:	2100      	movs	r1, #0
 8004634:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	0018      	movs	r0, r3
 800463a:	f7fd fde9 	bl	8002210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2224      	movs	r2, #36	; 0x24
 8004642:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2101      	movs	r1, #1
 8004650:	438a      	bics	r2, r1
 8004652:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	0018      	movs	r0, r3
 8004658:	f000 f9f2 	bl	8004a40 <UART_SetConfig>
 800465c:	0003      	movs	r3, r0
 800465e:	2b01      	cmp	r3, #1
 8004660:	d101      	bne.n	8004666 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e024      	b.n	80046b0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	0018      	movs	r0, r3
 8004672:	f000 fb25 	bl	8004cc0 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	490d      	ldr	r1, [pc, #52]	; (80046b8 <HAL_UART_Init+0xa4>)
 8004682:	400a      	ands	r2, r1
 8004684:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2108      	movs	r1, #8
 8004692:	438a      	bics	r2, r1
 8004694:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2101      	movs	r1, #1
 80046a2:	430a      	orrs	r2, r1
 80046a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	0018      	movs	r0, r3
 80046aa:	f000 fbbd 	bl	8004e28 <UART_CheckIdleState>
 80046ae:	0003      	movs	r3, r0
}
 80046b0:	0018      	movs	r0, r3
 80046b2:	46bd      	mov	sp, r7
 80046b4:	b002      	add	sp, #8
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	fffff7ff 	.word	0xfffff7ff

080046bc <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e02c      	b.n	8004728 <HAL_UART_DeInit+0x6c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2224      	movs	r2, #36	; 0x24
 80046d2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2101      	movs	r1, #1
 80046e0:	438a      	bics	r2, r1
 80046e2:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2200      	movs	r2, #0
 80046f2:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2200      	movs	r2, #0
 80046fa:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	0018      	movs	r0, r3
 8004700:	f7fd fe62 	bl	80023c8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2280      	movs	r2, #128	; 0x80
 8004708:	2100      	movs	r1, #0
 800470a:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2274      	movs	r2, #116	; 0x74
 8004722:	2100      	movs	r1, #0
 8004724:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	0018      	movs	r0, r3
 800472a:	46bd      	mov	sp, r7
 800472c:	b002      	add	sp, #8
 800472e:	bd80      	pop	{r7, pc}

08004730 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b08a      	sub	sp, #40	; 0x28
 8004734:	af02      	add	r7, sp, #8
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	603b      	str	r3, [r7, #0]
 800473c:	1dbb      	adds	r3, r7, #6
 800473e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004744:	2b20      	cmp	r3, #32
 8004746:	d000      	beq.n	800474a <HAL_UART_Transmit+0x1a>
 8004748:	e096      	b.n	8004878 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <HAL_UART_Transmit+0x28>
 8004750:	1dbb      	adds	r3, r7, #6
 8004752:	881b      	ldrh	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e08e      	b.n	800487a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	2380      	movs	r3, #128	; 0x80
 8004762:	015b      	lsls	r3, r3, #5
 8004764:	429a      	cmp	r2, r3
 8004766:	d109      	bne.n	800477c <HAL_UART_Transmit+0x4c>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d105      	bne.n	800477c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2201      	movs	r2, #1
 8004774:	4013      	ands	r3, r2
 8004776:	d001      	beq.n	800477c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e07e      	b.n	800487a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2274      	movs	r2, #116	; 0x74
 8004780:	5c9b      	ldrb	r3, [r3, r2]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d101      	bne.n	800478a <HAL_UART_Transmit+0x5a>
 8004786:	2302      	movs	r3, #2
 8004788:	e077      	b.n	800487a <HAL_UART_Transmit+0x14a>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2274      	movs	r2, #116	; 0x74
 800478e:	2101      	movs	r1, #1
 8004790:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2280      	movs	r2, #128	; 0x80
 8004796:	2100      	movs	r1, #0
 8004798:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2221      	movs	r2, #33	; 0x21
 800479e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047a0:	f7fd ffa8 	bl	80026f4 <HAL_GetTick>
 80047a4:	0003      	movs	r3, r0
 80047a6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	1dba      	adds	r2, r7, #6
 80047ac:	2150      	movs	r1, #80	; 0x50
 80047ae:	8812      	ldrh	r2, [r2, #0]
 80047b0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	1dba      	adds	r2, r7, #6
 80047b6:	2152      	movs	r1, #82	; 0x52
 80047b8:	8812      	ldrh	r2, [r2, #0]
 80047ba:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	2380      	movs	r3, #128	; 0x80
 80047c2:	015b      	lsls	r3, r3, #5
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d108      	bne.n	80047da <HAL_UART_Transmit+0xaa>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d104      	bne.n	80047da <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80047d0:	2300      	movs	r3, #0
 80047d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	61bb      	str	r3, [r7, #24]
 80047d8:	e003      	b.n	80047e2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047de:	2300      	movs	r3, #0
 80047e0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2274      	movs	r2, #116	; 0x74
 80047e6:	2100      	movs	r1, #0
 80047e8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80047ea:	e02d      	b.n	8004848 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	0013      	movs	r3, r2
 80047f6:	2200      	movs	r2, #0
 80047f8:	2180      	movs	r1, #128	; 0x80
 80047fa:	f000 fb5d 	bl	8004eb8 <UART_WaitOnFlagUntilTimeout>
 80047fe:	1e03      	subs	r3, r0, #0
 8004800:	d001      	beq.n	8004806 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e039      	b.n	800487a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10b      	bne.n	8004824 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	881a      	ldrh	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	05d2      	lsls	r2, r2, #23
 8004816:	0dd2      	lsrs	r2, r2, #23
 8004818:	b292      	uxth	r2, r2
 800481a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	3302      	adds	r3, #2
 8004820:	61bb      	str	r3, [r7, #24]
 8004822:	e008      	b.n	8004836 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	781a      	ldrb	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	b292      	uxth	r2, r2
 800482e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	3301      	adds	r3, #1
 8004834:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2252      	movs	r2, #82	; 0x52
 800483a:	5a9b      	ldrh	r3, [r3, r2]
 800483c:	b29b      	uxth	r3, r3
 800483e:	3b01      	subs	r3, #1
 8004840:	b299      	uxth	r1, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2252      	movs	r2, #82	; 0x52
 8004846:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2252      	movs	r2, #82	; 0x52
 800484c:	5a9b      	ldrh	r3, [r3, r2]
 800484e:	b29b      	uxth	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1cb      	bne.n	80047ec <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	0013      	movs	r3, r2
 800485e:	2200      	movs	r2, #0
 8004860:	2140      	movs	r1, #64	; 0x40
 8004862:	f000 fb29 	bl	8004eb8 <UART_WaitOnFlagUntilTimeout>
 8004866:	1e03      	subs	r3, r0, #0
 8004868:	d001      	beq.n	800486e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e005      	b.n	800487a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2220      	movs	r2, #32
 8004872:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004874:	2300      	movs	r3, #0
 8004876:	e000      	b.n	800487a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004878:	2302      	movs	r3, #2
  }
}
 800487a:	0018      	movs	r0, r3
 800487c:	46bd      	mov	sp, r7
 800487e:	b008      	add	sp, #32
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b084      	sub	sp, #16
 8004886:	af00      	add	r7, sp, #0
 8004888:	60f8      	str	r0, [r7, #12]
 800488a:	60b9      	str	r1, [r7, #8]
 800488c:	1dbb      	adds	r3, r7, #6
 800488e:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004894:	2b20      	cmp	r3, #32
 8004896:	d13f      	bne.n	8004918 <HAL_UART_Receive_DMA+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_UART_Receive_DMA+0x24>
 800489e:	1dbb      	adds	r3, r7, #6
 80048a0:	881b      	ldrh	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e037      	b.n	800491a <HAL_UART_Receive_DMA+0x98>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	2380      	movs	r3, #128	; 0x80
 80048b0:	015b      	lsls	r3, r3, #5
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d109      	bne.n	80048ca <HAL_UART_Receive_DMA+0x48>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d105      	bne.n	80048ca <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2201      	movs	r2, #1
 80048c2:	4013      	ands	r3, r2
 80048c4:	d001      	beq.n	80048ca <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e027      	b.n	800491a <HAL_UART_Receive_DMA+0x98>
      }
    }

    __HAL_LOCK(huart);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2274      	movs	r2, #116	; 0x74
 80048ce:	5c9b      	ldrb	r3, [r3, r2]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d101      	bne.n	80048d8 <HAL_UART_Receive_DMA+0x56>
 80048d4:	2302      	movs	r3, #2
 80048d6:	e020      	b.n	800491a <HAL_UART_Receive_DMA+0x98>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2274      	movs	r2, #116	; 0x74
 80048dc:	2101      	movs	r1, #1
 80048de:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	2380      	movs	r3, #128	; 0x80
 80048ee:	041b      	lsls	r3, r3, #16
 80048f0:	4013      	ands	r3, r2
 80048f2:	d008      	beq.n	8004906 <HAL_UART_Receive_DMA+0x84>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2180      	movs	r1, #128	; 0x80
 8004900:	04c9      	lsls	r1, r1, #19
 8004902:	430a      	orrs	r2, r1
 8004904:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004906:	1dbb      	adds	r3, r7, #6
 8004908:	881a      	ldrh	r2, [r3, #0]
 800490a:	68b9      	ldr	r1, [r7, #8]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	0018      	movs	r0, r3
 8004910:	f000 fb50 	bl	8004fb4 <UART_Start_Receive_DMA>
 8004914:	0003      	movs	r3, r0
 8004916:	e000      	b.n	800491a <HAL_UART_Receive_DMA+0x98>
  }
  else
  {
    return HAL_BUSY;
 8004918:	2302      	movs	r3, #2
  }
}
 800491a:	0018      	movs	r0, r3
 800491c:	46bd      	mov	sp, r7
 800491e:	b004      	add	sp, #16
 8004920:	bd80      	pop	{r7, pc}
	...

08004924 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	492f      	ldr	r1, [pc, #188]	; (80049f4 <HAL_UART_AbortReceive+0xd0>)
 8004938:	400a      	ands	r2, r1
 800493a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689a      	ldr	r2, [r3, #8]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2101      	movs	r1, #1
 8004948:	438a      	bics	r2, r1
 800494a:	609a      	str	r2, [r3, #8]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004950:	2b01      	cmp	r3, #1
 8004952:	d107      	bne.n	8004964 <HAL_UART_AbortReceive+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2110      	movs	r1, #16
 8004960:	438a      	bics	r2, r1
 8004962:	601a      	str	r2, [r3, #0]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	2240      	movs	r2, #64	; 0x40
 800496c:	4013      	ands	r3, r2
 800496e:	2b40      	cmp	r3, #64	; 0x40
 8004970:	d124      	bne.n	80049bc <HAL_UART_AbortReceive+0x98>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2140      	movs	r1, #64	; 0x40
 800497e:	438a      	bics	r2, r1
 8004980:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004986:	2b00      	cmp	r3, #0
 8004988:	d018      	beq.n	80049bc <HAL_UART_AbortReceive+0x98>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498e:	2200      	movs	r2, #0
 8004990:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004996:	0018      	movs	r0, r3
 8004998:	f7fe f8af 	bl	8002afa <HAL_DMA_Abort>
 800499c:	1e03      	subs	r3, r0, #0
 800499e:	d00d      	beq.n	80049bc <HAL_UART_AbortReceive+0x98>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a4:	0018      	movs	r0, r3
 80049a6:	f7fe f982 	bl	8002cae <HAL_DMA_GetError>
 80049aa:	0003      	movs	r3, r0
 80049ac:	2b20      	cmp	r3, #32
 80049ae:	d105      	bne.n	80049bc <HAL_UART_AbortReceive+0x98>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2280      	movs	r2, #128	; 0x80
 80049b4:	2110      	movs	r1, #16
 80049b6:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e016      	b.n	80049ea <HAL_UART_AbortReceive+0xc6>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	225a      	movs	r2, #90	; 0x5a
 80049c0:	2100      	movs	r1, #0
 80049c2:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	220f      	movs	r2, #15
 80049ca:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699a      	ldr	r2, [r3, #24]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2108      	movs	r1, #8
 80049d8:	430a      	orrs	r2, r1
 80049da:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2220      	movs	r2, #32
 80049e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	0018      	movs	r0, r3
 80049ec:	46bd      	mov	sp, r7
 80049ee:	b002      	add	sp, #8
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	46c0      	nop			; (mov r8, r8)
 80049f4:	fffffedf 	.word	0xfffffedf

080049f8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004a00:	46c0      	nop			; (mov r8, r8)
 8004a02:	46bd      	mov	sp, r7
 8004a04:	b002      	add	sp, #8
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004a10:	46c0      	nop			; (mov r8, r8)
 8004a12:	46bd      	mov	sp, r7
 8004a14:	b002      	add	sp, #8
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a20:	46c0      	nop			; (mov r8, r8)
 8004a22:	46bd      	mov	sp, r7
 8004a24:	b002      	add	sp, #8
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	000a      	movs	r2, r1
 8004a32:	1cbb      	adds	r3, r7, #2
 8004a34:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a36:	46c0      	nop			; (mov r8, r8)
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	b002      	add	sp, #8
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b088      	sub	sp, #32
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a48:	231e      	movs	r3, #30
 8004a4a:	18fb      	adds	r3, r7, r3
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a8d      	ldr	r2, [pc, #564]	; (8004ca4 <UART_SetConfig+0x264>)
 8004a70:	4013      	ands	r3, r2
 8004a72:	0019      	movs	r1, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	4a88      	ldr	r2, [pc, #544]	; (8004ca8 <UART_SetConfig+0x268>)
 8004a86:	4013      	ands	r3, r2
 8004a88:	0019      	movs	r1, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68da      	ldr	r2, [r3, #12]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	4a7f      	ldr	r2, [pc, #508]	; (8004cac <UART_SetConfig+0x26c>)
 8004aae:	4013      	ands	r3, r2
 8004ab0:	0019      	movs	r1, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a7b      	ldr	r2, [pc, #492]	; (8004cb0 <UART_SetConfig+0x270>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d127      	bne.n	8004b16 <UART_SetConfig+0xd6>
 8004ac6:	4b7b      	ldr	r3, [pc, #492]	; (8004cb4 <UART_SetConfig+0x274>)
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aca:	2203      	movs	r2, #3
 8004acc:	4013      	ands	r3, r2
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	d00d      	beq.n	8004aee <UART_SetConfig+0xae>
 8004ad2:	d81b      	bhi.n	8004b0c <UART_SetConfig+0xcc>
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d014      	beq.n	8004b02 <UART_SetConfig+0xc2>
 8004ad8:	d818      	bhi.n	8004b0c <UART_SetConfig+0xcc>
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <UART_SetConfig+0xa4>
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d00a      	beq.n	8004af8 <UART_SetConfig+0xb8>
 8004ae2:	e013      	b.n	8004b0c <UART_SetConfig+0xcc>
 8004ae4:	231f      	movs	r3, #31
 8004ae6:	18fb      	adds	r3, r7, r3
 8004ae8:	2200      	movs	r2, #0
 8004aea:	701a      	strb	r2, [r3, #0]
 8004aec:	e021      	b.n	8004b32 <UART_SetConfig+0xf2>
 8004aee:	231f      	movs	r3, #31
 8004af0:	18fb      	adds	r3, r7, r3
 8004af2:	2202      	movs	r2, #2
 8004af4:	701a      	strb	r2, [r3, #0]
 8004af6:	e01c      	b.n	8004b32 <UART_SetConfig+0xf2>
 8004af8:	231f      	movs	r3, #31
 8004afa:	18fb      	adds	r3, r7, r3
 8004afc:	2204      	movs	r2, #4
 8004afe:	701a      	strb	r2, [r3, #0]
 8004b00:	e017      	b.n	8004b32 <UART_SetConfig+0xf2>
 8004b02:	231f      	movs	r3, #31
 8004b04:	18fb      	adds	r3, r7, r3
 8004b06:	2208      	movs	r2, #8
 8004b08:	701a      	strb	r2, [r3, #0]
 8004b0a:	e012      	b.n	8004b32 <UART_SetConfig+0xf2>
 8004b0c:	231f      	movs	r3, #31
 8004b0e:	18fb      	adds	r3, r7, r3
 8004b10:	2210      	movs	r2, #16
 8004b12:	701a      	strb	r2, [r3, #0]
 8004b14:	e00d      	b.n	8004b32 <UART_SetConfig+0xf2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a67      	ldr	r2, [pc, #412]	; (8004cb8 <UART_SetConfig+0x278>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d104      	bne.n	8004b2a <UART_SetConfig+0xea>
 8004b20:	231f      	movs	r3, #31
 8004b22:	18fb      	adds	r3, r7, r3
 8004b24:	2200      	movs	r2, #0
 8004b26:	701a      	strb	r2, [r3, #0]
 8004b28:	e003      	b.n	8004b32 <UART_SetConfig+0xf2>
 8004b2a:	231f      	movs	r3, #31
 8004b2c:	18fb      	adds	r3, r7, r3
 8004b2e:	2210      	movs	r2, #16
 8004b30:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	69da      	ldr	r2, [r3, #28]
 8004b36:	2380      	movs	r3, #128	; 0x80
 8004b38:	021b      	lsls	r3, r3, #8
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d15d      	bne.n	8004bfa <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8004b3e:	231f      	movs	r3, #31
 8004b40:	18fb      	adds	r3, r7, r3
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d015      	beq.n	8004b74 <UART_SetConfig+0x134>
 8004b48:	dc18      	bgt.n	8004b7c <UART_SetConfig+0x13c>
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d00d      	beq.n	8004b6a <UART_SetConfig+0x12a>
 8004b4e:	dc15      	bgt.n	8004b7c <UART_SetConfig+0x13c>
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <UART_SetConfig+0x11a>
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d005      	beq.n	8004b64 <UART_SetConfig+0x124>
 8004b58:	e010      	b.n	8004b7c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b5a:	f7ff fc77 	bl	800444c <HAL_RCC_GetPCLK1Freq>
 8004b5e:	0003      	movs	r3, r0
 8004b60:	61bb      	str	r3, [r7, #24]
        break;
 8004b62:	e012      	b.n	8004b8a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b64:	4b55      	ldr	r3, [pc, #340]	; (8004cbc <UART_SetConfig+0x27c>)
 8004b66:	61bb      	str	r3, [r7, #24]
        break;
 8004b68:	e00f      	b.n	8004b8a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b6a:	f7ff fc01 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 8004b6e:	0003      	movs	r3, r0
 8004b70:	61bb      	str	r3, [r7, #24]
        break;
 8004b72:	e00a      	b.n	8004b8a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b74:	2380      	movs	r3, #128	; 0x80
 8004b76:	021b      	lsls	r3, r3, #8
 8004b78:	61bb      	str	r3, [r7, #24]
        break;
 8004b7a:	e006      	b.n	8004b8a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b80:	231e      	movs	r3, #30
 8004b82:	18fb      	adds	r3, r7, r3
 8004b84:	2201      	movs	r2, #1
 8004b86:	701a      	strb	r2, [r3, #0]
        break;
 8004b88:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d100      	bne.n	8004b92 <UART_SetConfig+0x152>
 8004b90:	e07b      	b.n	8004c8a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	005a      	lsls	r2, r3, #1
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	085b      	lsrs	r3, r3, #1
 8004b9c:	18d2      	adds	r2, r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	0019      	movs	r1, r3
 8004ba4:	0010      	movs	r0, r2
 8004ba6:	f7fb fac1 	bl	800012c <__udivsi3>
 8004baa:	0003      	movs	r3, r0
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	2b0f      	cmp	r3, #15
 8004bb4:	d91c      	bls.n	8004bf0 <UART_SetConfig+0x1b0>
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	2380      	movs	r3, #128	; 0x80
 8004bba:	025b      	lsls	r3, r3, #9
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d217      	bcs.n	8004bf0 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	200e      	movs	r0, #14
 8004bc6:	183b      	adds	r3, r7, r0
 8004bc8:	210f      	movs	r1, #15
 8004bca:	438a      	bics	r2, r1
 8004bcc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	085b      	lsrs	r3, r3, #1
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	2207      	movs	r2, #7
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	b299      	uxth	r1, r3
 8004bda:	183b      	adds	r3, r7, r0
 8004bdc:	183a      	adds	r2, r7, r0
 8004bde:	8812      	ldrh	r2, [r2, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	183a      	adds	r2, r7, r0
 8004bea:	8812      	ldrh	r2, [r2, #0]
 8004bec:	60da      	str	r2, [r3, #12]
 8004bee:	e04c      	b.n	8004c8a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004bf0:	231e      	movs	r3, #30
 8004bf2:	18fb      	adds	r3, r7, r3
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	701a      	strb	r2, [r3, #0]
 8004bf8:	e047      	b.n	8004c8a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bfa:	231f      	movs	r3, #31
 8004bfc:	18fb      	adds	r3, r7, r3
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d015      	beq.n	8004c30 <UART_SetConfig+0x1f0>
 8004c04:	dc18      	bgt.n	8004c38 <UART_SetConfig+0x1f8>
 8004c06:	2b04      	cmp	r3, #4
 8004c08:	d00d      	beq.n	8004c26 <UART_SetConfig+0x1e6>
 8004c0a:	dc15      	bgt.n	8004c38 <UART_SetConfig+0x1f8>
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <UART_SetConfig+0x1d6>
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d005      	beq.n	8004c20 <UART_SetConfig+0x1e0>
 8004c14:	e010      	b.n	8004c38 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c16:	f7ff fc19 	bl	800444c <HAL_RCC_GetPCLK1Freq>
 8004c1a:	0003      	movs	r3, r0
 8004c1c:	61bb      	str	r3, [r7, #24]
        break;
 8004c1e:	e012      	b.n	8004c46 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c20:	4b26      	ldr	r3, [pc, #152]	; (8004cbc <UART_SetConfig+0x27c>)
 8004c22:	61bb      	str	r3, [r7, #24]
        break;
 8004c24:	e00f      	b.n	8004c46 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c26:	f7ff fba3 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 8004c2a:	0003      	movs	r3, r0
 8004c2c:	61bb      	str	r3, [r7, #24]
        break;
 8004c2e:	e00a      	b.n	8004c46 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c30:	2380      	movs	r3, #128	; 0x80
 8004c32:	021b      	lsls	r3, r3, #8
 8004c34:	61bb      	str	r3, [r7, #24]
        break;
 8004c36:	e006      	b.n	8004c46 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c3c:	231e      	movs	r3, #30
 8004c3e:	18fb      	adds	r3, r7, r3
 8004c40:	2201      	movs	r2, #1
 8004c42:	701a      	strb	r2, [r3, #0]
        break;
 8004c44:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d01e      	beq.n	8004c8a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	085a      	lsrs	r2, r3, #1
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	18d2      	adds	r2, r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	0019      	movs	r1, r3
 8004c5c:	0010      	movs	r0, r2
 8004c5e:	f7fb fa65 	bl	800012c <__udivsi3>
 8004c62:	0003      	movs	r3, r0
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	2b0f      	cmp	r3, #15
 8004c6c:	d909      	bls.n	8004c82 <UART_SetConfig+0x242>
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	2380      	movs	r3, #128	; 0x80
 8004c72:	025b      	lsls	r3, r3, #9
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d204      	bcs.n	8004c82 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	60da      	str	r2, [r3, #12]
 8004c80:	e003      	b.n	8004c8a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004c82:	231e      	movs	r3, #30
 8004c84:	18fb      	adds	r3, r7, r3
 8004c86:	2201      	movs	r2, #1
 8004c88:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c96:	231e      	movs	r3, #30
 8004c98:	18fb      	adds	r3, r7, r3
 8004c9a:	781b      	ldrb	r3, [r3, #0]
}
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	b008      	add	sp, #32
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	ffff69f3 	.word	0xffff69f3
 8004ca8:	ffffcfff 	.word	0xffffcfff
 8004cac:	fffff4ff 	.word	0xfffff4ff
 8004cb0:	40013800 	.word	0x40013800
 8004cb4:	40021000 	.word	0x40021000
 8004cb8:	40004400 	.word	0x40004400
 8004cbc:	007a1200 	.word	0x007a1200

08004cc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	2201      	movs	r2, #1
 8004cce:	4013      	ands	r3, r2
 8004cd0:	d00b      	beq.n	8004cea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	4a4a      	ldr	r2, [pc, #296]	; (8004e04 <UART_AdvFeatureConfig+0x144>)
 8004cda:	4013      	ands	r3, r2
 8004cdc:	0019      	movs	r1, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	2202      	movs	r2, #2
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	d00b      	beq.n	8004d0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	4a43      	ldr	r2, [pc, #268]	; (8004e08 <UART_AdvFeatureConfig+0x148>)
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	0019      	movs	r1, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	2204      	movs	r2, #4
 8004d12:	4013      	ands	r3, r2
 8004d14:	d00b      	beq.n	8004d2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	4a3b      	ldr	r2, [pc, #236]	; (8004e0c <UART_AdvFeatureConfig+0x14c>)
 8004d1e:	4013      	ands	r3, r2
 8004d20:	0019      	movs	r1, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	2208      	movs	r2, #8
 8004d34:	4013      	ands	r3, r2
 8004d36:	d00b      	beq.n	8004d50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	4a34      	ldr	r2, [pc, #208]	; (8004e10 <UART_AdvFeatureConfig+0x150>)
 8004d40:	4013      	ands	r3, r2
 8004d42:	0019      	movs	r1, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	2210      	movs	r2, #16
 8004d56:	4013      	ands	r3, r2
 8004d58:	d00b      	beq.n	8004d72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	4a2c      	ldr	r2, [pc, #176]	; (8004e14 <UART_AdvFeatureConfig+0x154>)
 8004d62:	4013      	ands	r3, r2
 8004d64:	0019      	movs	r1, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	2220      	movs	r2, #32
 8004d78:	4013      	ands	r3, r2
 8004d7a:	d00b      	beq.n	8004d94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	4a25      	ldr	r2, [pc, #148]	; (8004e18 <UART_AdvFeatureConfig+0x158>)
 8004d84:	4013      	ands	r3, r2
 8004d86:	0019      	movs	r1, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	2240      	movs	r2, #64	; 0x40
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	d01d      	beq.n	8004dda <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	4a1d      	ldr	r2, [pc, #116]	; (8004e1c <UART_AdvFeatureConfig+0x15c>)
 8004da6:	4013      	ands	r3, r2
 8004da8:	0019      	movs	r1, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dba:	2380      	movs	r3, #128	; 0x80
 8004dbc:	035b      	lsls	r3, r3, #13
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d10b      	bne.n	8004dda <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	4a15      	ldr	r2, [pc, #84]	; (8004e20 <UART_AdvFeatureConfig+0x160>)
 8004dca:	4013      	ands	r3, r2
 8004dcc:	0019      	movs	r1, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	2280      	movs	r2, #128	; 0x80
 8004de0:	4013      	ands	r3, r2
 8004de2:	d00b      	beq.n	8004dfc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	4a0e      	ldr	r2, [pc, #56]	; (8004e24 <UART_AdvFeatureConfig+0x164>)
 8004dec:	4013      	ands	r3, r2
 8004dee:	0019      	movs	r1, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	605a      	str	r2, [r3, #4]
  }
}
 8004dfc:	46c0      	nop			; (mov r8, r8)
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	b002      	add	sp, #8
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	fffdffff 	.word	0xfffdffff
 8004e08:	fffeffff 	.word	0xfffeffff
 8004e0c:	fffbffff 	.word	0xfffbffff
 8004e10:	ffff7fff 	.word	0xffff7fff
 8004e14:	ffffefff 	.word	0xffffefff
 8004e18:	ffffdfff 	.word	0xffffdfff
 8004e1c:	ffefffff 	.word	0xffefffff
 8004e20:	ff9fffff 	.word	0xff9fffff
 8004e24:	fff7ffff 	.word	0xfff7ffff

08004e28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af02      	add	r7, sp, #8
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2280      	movs	r2, #128	; 0x80
 8004e34:	2100      	movs	r1, #0
 8004e36:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e38:	f7fd fc5c 	bl	80026f4 <HAL_GetTick>
 8004e3c:	0003      	movs	r3, r0
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2208      	movs	r2, #8
 8004e48:	4013      	ands	r3, r2
 8004e4a:	2b08      	cmp	r3, #8
 8004e4c:	d10c      	bne.n	8004e68 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2280      	movs	r2, #128	; 0x80
 8004e52:	0391      	lsls	r1, r2, #14
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	4a17      	ldr	r2, [pc, #92]	; (8004eb4 <UART_CheckIdleState+0x8c>)
 8004e58:	9200      	str	r2, [sp, #0]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f000 f82c 	bl	8004eb8 <UART_WaitOnFlagUntilTimeout>
 8004e60:	1e03      	subs	r3, r0, #0
 8004e62:	d001      	beq.n	8004e68 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e021      	b.n	8004eac <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2204      	movs	r2, #4
 8004e70:	4013      	ands	r3, r2
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d10c      	bne.n	8004e90 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2280      	movs	r2, #128	; 0x80
 8004e7a:	03d1      	lsls	r1, r2, #15
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	4a0d      	ldr	r2, [pc, #52]	; (8004eb4 <UART_CheckIdleState+0x8c>)
 8004e80:	9200      	str	r2, [sp, #0]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f000 f818 	bl	8004eb8 <UART_WaitOnFlagUntilTimeout>
 8004e88:	1e03      	subs	r3, r0, #0
 8004e8a:	d001      	beq.n	8004e90 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e00d      	b.n	8004eac <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2220      	movs	r2, #32
 8004e94:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2274      	movs	r2, #116	; 0x74
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	0018      	movs	r0, r3
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	b004      	add	sp, #16
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	01ffffff 	.word	0x01ffffff

08004eb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	603b      	str	r3, [r7, #0]
 8004ec4:	1dfb      	adds	r3, r7, #7
 8004ec6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ec8:	e05e      	b.n	8004f88 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	d05b      	beq.n	8004f88 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ed0:	f7fd fc10 	bl	80026f4 <HAL_GetTick>
 8004ed4:	0002      	movs	r2, r0
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d302      	bcc.n	8004ee6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d11b      	bne.n	8004f1e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	492f      	ldr	r1, [pc, #188]	; (8004fb0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004ef2:	400a      	ands	r2, r1
 8004ef4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2101      	movs	r1, #1
 8004f02:	438a      	bics	r2, r1
 8004f04:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2274      	movs	r2, #116	; 0x74
 8004f16:	2100      	movs	r1, #0
 8004f18:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e044      	b.n	8004fa8 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2204      	movs	r2, #4
 8004f26:	4013      	ands	r3, r2
 8004f28:	d02e      	beq.n	8004f88 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	69da      	ldr	r2, [r3, #28]
 8004f30:	2380      	movs	r3, #128	; 0x80
 8004f32:	011b      	lsls	r3, r3, #4
 8004f34:	401a      	ands	r2, r3
 8004f36:	2380      	movs	r3, #128	; 0x80
 8004f38:	011b      	lsls	r3, r3, #4
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d124      	bne.n	8004f88 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2280      	movs	r2, #128	; 0x80
 8004f44:	0112      	lsls	r2, r2, #4
 8004f46:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4917      	ldr	r1, [pc, #92]	; (8004fb0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004f54:	400a      	ands	r2, r1
 8004f56:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689a      	ldr	r2, [r3, #8]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2101      	movs	r1, #1
 8004f64:	438a      	bics	r2, r1
 8004f66:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2220      	movs	r2, #32
 8004f72:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2280      	movs	r2, #128	; 0x80
 8004f78:	2120      	movs	r1, #32
 8004f7a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2274      	movs	r2, #116	; 0x74
 8004f80:	2100      	movs	r1, #0
 8004f82:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e00f      	b.n	8004fa8 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	4013      	ands	r3, r2
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	425a      	negs	r2, r3
 8004f98:	4153      	adcs	r3, r2
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	001a      	movs	r2, r3
 8004f9e:	1dfb      	adds	r3, r7, #7
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d091      	beq.n	8004eca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	0018      	movs	r0, r3
 8004faa:	46bd      	mov	sp, r7
 8004fac:	b004      	add	sp, #16
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	fffffe5f 	.word	0xfffffe5f

08004fb4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	1dbb      	adds	r3, r7, #6
 8004fc0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	1dba      	adds	r2, r7, #6
 8004fcc:	2158      	movs	r1, #88	; 0x58
 8004fce:	8812      	ldrh	r2, [r2, #0]
 8004fd0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2280      	movs	r2, #128	; 0x80
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2222      	movs	r2, #34	; 0x22
 8004fde:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d02b      	beq.n	8005040 <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fec:	4a25      	ldr	r2, [pc, #148]	; (8005084 <UART_Start_Receive_DMA+0xd0>)
 8004fee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff4:	4a24      	ldr	r2, [pc, #144]	; (8005088 <UART_Start_Receive_DMA+0xd4>)
 8004ff6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffc:	4a23      	ldr	r2, [pc, #140]	; (800508c <UART_Start_Receive_DMA+0xd8>)
 8004ffe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005004:	2200      	movs	r2, #0
 8005006:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	3324      	adds	r3, #36	; 0x24
 8005012:	0019      	movs	r1, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005018:	001a      	movs	r2, r3
 800501a:	1dbb      	adds	r3, r7, #6
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	f7fd fd06 	bl	8002a2e <HAL_DMA_Start_IT>
 8005022:	1e03      	subs	r3, r0, #0
 8005024:	d00c      	beq.n	8005040 <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2280      	movs	r2, #128	; 0x80
 800502a:	2110      	movs	r1, #16
 800502c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2274      	movs	r2, #116	; 0x74
 8005032:	2100      	movs	r1, #0
 8005034:	5499      	strb	r1, [r3, r2]

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2220      	movs	r2, #32
 800503a:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e01d      	b.n	800507c <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2274      	movs	r2, #116	; 0x74
 8005044:	2100      	movs	r1, #0
 8005046:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2180      	movs	r1, #128	; 0x80
 8005054:	0049      	lsls	r1, r1, #1
 8005056:	430a      	orrs	r2, r1
 8005058:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2101      	movs	r1, #1
 8005066:	430a      	orrs	r2, r1
 8005068:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2140      	movs	r1, #64	; 0x40
 8005076:	430a      	orrs	r2, r1
 8005078:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	0018      	movs	r0, r3
 800507e:	46bd      	mov	sp, r7
 8005080:	b004      	add	sp, #16
 8005082:	bd80      	pop	{r7, pc}
 8005084:	08005119 	.word	0x08005119
 8005088:	080051b5 	.word	0x080051b5
 800508c:	080051f1 	.word	0x080051f1

08005090 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	21c0      	movs	r1, #192	; 0xc0
 80050a4:	438a      	bics	r2, r1
 80050a6:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2220      	movs	r2, #32
 80050ac:	679a      	str	r2, [r3, #120]	; 0x78
}
 80050ae:	46c0      	nop			; (mov r8, r8)
 80050b0:	46bd      	mov	sp, r7
 80050b2:	b002      	add	sp, #8
 80050b4:	bd80      	pop	{r7, pc}
	...

080050b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4912      	ldr	r1, [pc, #72]	; (8005114 <UART_EndRxTransfer+0x5c>)
 80050cc:	400a      	ands	r2, r1
 80050ce:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2101      	movs	r1, #1
 80050dc:	438a      	bics	r2, r1
 80050de:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d107      	bne.n	80050f8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2110      	movs	r1, #16
 80050f4:	438a      	bics	r2, r1
 80050f6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2220      	movs	r2, #32
 80050fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	665a      	str	r2, [r3, #100]	; 0x64
}
 800510a:	46c0      	nop			; (mov r8, r8)
 800510c:	46bd      	mov	sp, r7
 800510e:	b002      	add	sp, #8
 8005110:	bd80      	pop	{r7, pc}
 8005112:	46c0      	nop			; (mov r8, r8)
 8005114:	fffffedf 	.word	0xfffffedf

08005118 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	2b20      	cmp	r3, #32
 800512c:	d02a      	beq.n	8005184 <UART_DMAReceiveCplt+0x6c>
  {
    huart->RxXferCount = 0U;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	225a      	movs	r2, #90	; 0x5a
 8005132:	2100      	movs	r1, #0
 8005134:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	491b      	ldr	r1, [pc, #108]	; (80051b0 <UART_DMAReceiveCplt+0x98>)
 8005142:	400a      	ands	r2, r1
 8005144:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2101      	movs	r1, #1
 8005152:	438a      	bics	r2, r1
 8005154:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2140      	movs	r1, #64	; 0x40
 8005162:	438a      	bics	r2, r1
 8005164:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2220      	movs	r2, #32
 800516a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005170:	2b01      	cmp	r3, #1
 8005172:	d107      	bne.n	8005184 <UART_DMAReceiveCplt+0x6c>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2110      	movs	r1, #16
 8005180:	438a      	bics	r2, r1
 8005182:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005188:	2b01      	cmp	r3, #1
 800518a:	d108      	bne.n	800519e <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2258      	movs	r2, #88	; 0x58
 8005190:	5a9a      	ldrh	r2, [r3, r2]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	0011      	movs	r1, r2
 8005196:	0018      	movs	r0, r3
 8005198:	f7ff fc46 	bl	8004a28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800519c:	e003      	b.n	80051a6 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	0018      	movs	r0, r3
 80051a2:	f7ff fc29 	bl	80049f8 <HAL_UART_RxCpltCallback>
}
 80051a6:	46c0      	nop			; (mov r8, r8)
 80051a8:	46bd      	mov	sp, r7
 80051aa:	b004      	add	sp, #16
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	46c0      	nop			; (mov r8, r8)
 80051b0:	fffffeff 	.word	0xfffffeff

080051b4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d10a      	bne.n	80051e0 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2258      	movs	r2, #88	; 0x58
 80051ce:	5a9b      	ldrh	r3, [r3, r2]
 80051d0:	085b      	lsrs	r3, r3, #1
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	0011      	movs	r1, r2
 80051d8:	0018      	movs	r0, r3
 80051da:	f7ff fc25 	bl	8004a28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80051de:	e003      	b.n	80051e8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	0018      	movs	r0, r3
 80051e4:	f7ff fc10 	bl	8004a08 <HAL_UART_RxHalfCpltCallback>
}
 80051e8:	46c0      	nop			; (mov r8, r8)
 80051ea:	46bd      	mov	sp, r7
 80051ec:	b004      	add	sp, #16
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005202:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005208:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	2280      	movs	r2, #128	; 0x80
 8005212:	4013      	ands	r3, r2
 8005214:	2b80      	cmp	r3, #128	; 0x80
 8005216:	d10a      	bne.n	800522e <UART_DMAError+0x3e>
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	2b21      	cmp	r3, #33	; 0x21
 800521c:	d107      	bne.n	800522e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2252      	movs	r2, #82	; 0x52
 8005222:	2100      	movs	r1, #0
 8005224:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	0018      	movs	r0, r3
 800522a:	f7ff ff31 	bl	8005090 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	2240      	movs	r2, #64	; 0x40
 8005236:	4013      	ands	r3, r2
 8005238:	2b40      	cmp	r3, #64	; 0x40
 800523a:	d10a      	bne.n	8005252 <UART_DMAError+0x62>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2b22      	cmp	r3, #34	; 0x22
 8005240:	d107      	bne.n	8005252 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	225a      	movs	r2, #90	; 0x5a
 8005246:	2100      	movs	r1, #0
 8005248:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	0018      	movs	r0, r3
 800524e:	f7ff ff33 	bl	80050b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2280      	movs	r2, #128	; 0x80
 8005256:	589b      	ldr	r3, [r3, r2]
 8005258:	2210      	movs	r2, #16
 800525a:	431a      	orrs	r2, r3
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	2180      	movs	r1, #128	; 0x80
 8005260:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	0018      	movs	r0, r3
 8005266:	f7ff fbd7 	bl	8004a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800526a:	46c0      	nop			; (mov r8, r8)
 800526c:	46bd      	mov	sp, r7
 800526e:	b006      	add	sp, #24
 8005270:	bd80      	pop	{r7, pc}
	...

08005274 <__errno>:
 8005274:	4b01      	ldr	r3, [pc, #4]	; (800527c <__errno+0x8>)
 8005276:	6818      	ldr	r0, [r3, #0]
 8005278:	4770      	bx	lr
 800527a:	46c0      	nop			; (mov r8, r8)
 800527c:	20000028 	.word	0x20000028

08005280 <__libc_init_array>:
 8005280:	b570      	push	{r4, r5, r6, lr}
 8005282:	2600      	movs	r6, #0
 8005284:	4d0c      	ldr	r5, [pc, #48]	; (80052b8 <__libc_init_array+0x38>)
 8005286:	4c0d      	ldr	r4, [pc, #52]	; (80052bc <__libc_init_array+0x3c>)
 8005288:	1b64      	subs	r4, r4, r5
 800528a:	10a4      	asrs	r4, r4, #2
 800528c:	42a6      	cmp	r6, r4
 800528e:	d109      	bne.n	80052a4 <__libc_init_array+0x24>
 8005290:	2600      	movs	r6, #0
 8005292:	f001 fb6d 	bl	8006970 <_init>
 8005296:	4d0a      	ldr	r5, [pc, #40]	; (80052c0 <__libc_init_array+0x40>)
 8005298:	4c0a      	ldr	r4, [pc, #40]	; (80052c4 <__libc_init_array+0x44>)
 800529a:	1b64      	subs	r4, r4, r5
 800529c:	10a4      	asrs	r4, r4, #2
 800529e:	42a6      	cmp	r6, r4
 80052a0:	d105      	bne.n	80052ae <__libc_init_array+0x2e>
 80052a2:	bd70      	pop	{r4, r5, r6, pc}
 80052a4:	00b3      	lsls	r3, r6, #2
 80052a6:	58eb      	ldr	r3, [r5, r3]
 80052a8:	4798      	blx	r3
 80052aa:	3601      	adds	r6, #1
 80052ac:	e7ee      	b.n	800528c <__libc_init_array+0xc>
 80052ae:	00b3      	lsls	r3, r6, #2
 80052b0:	58eb      	ldr	r3, [r5, r3]
 80052b2:	4798      	blx	r3
 80052b4:	3601      	adds	r6, #1
 80052b6:	e7f2      	b.n	800529e <__libc_init_array+0x1e>
 80052b8:	08009904 	.word	0x08009904
 80052bc:	08009904 	.word	0x08009904
 80052c0:	08009904 	.word	0x08009904
 80052c4:	08009908 	.word	0x08009908

080052c8 <memset>:
 80052c8:	0003      	movs	r3, r0
 80052ca:	1882      	adds	r2, r0, r2
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d100      	bne.n	80052d2 <memset+0xa>
 80052d0:	4770      	bx	lr
 80052d2:	7019      	strb	r1, [r3, #0]
 80052d4:	3301      	adds	r3, #1
 80052d6:	e7f9      	b.n	80052cc <memset+0x4>

080052d8 <iprintf>:
 80052d8:	b40f      	push	{r0, r1, r2, r3}
 80052da:	4b0b      	ldr	r3, [pc, #44]	; (8005308 <iprintf+0x30>)
 80052dc:	b513      	push	{r0, r1, r4, lr}
 80052de:	681c      	ldr	r4, [r3, #0]
 80052e0:	2c00      	cmp	r4, #0
 80052e2:	d005      	beq.n	80052f0 <iprintf+0x18>
 80052e4:	69a3      	ldr	r3, [r4, #24]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d102      	bne.n	80052f0 <iprintf+0x18>
 80052ea:	0020      	movs	r0, r4
 80052ec:	f000 fb56 	bl	800599c <__sinit>
 80052f0:	ab05      	add	r3, sp, #20
 80052f2:	0020      	movs	r0, r4
 80052f4:	9a04      	ldr	r2, [sp, #16]
 80052f6:	68a1      	ldr	r1, [r4, #8]
 80052f8:	9301      	str	r3, [sp, #4]
 80052fa:	f000 feab 	bl	8006054 <_vfiprintf_r>
 80052fe:	bc16      	pop	{r1, r2, r4}
 8005300:	bc08      	pop	{r3}
 8005302:	b004      	add	sp, #16
 8005304:	4718      	bx	r3
 8005306:	46c0      	nop			; (mov r8, r8)
 8005308:	20000028 	.word	0x20000028

0800530c <putchar>:
 800530c:	4b08      	ldr	r3, [pc, #32]	; (8005330 <putchar+0x24>)
 800530e:	b570      	push	{r4, r5, r6, lr}
 8005310:	681c      	ldr	r4, [r3, #0]
 8005312:	0005      	movs	r5, r0
 8005314:	2c00      	cmp	r4, #0
 8005316:	d005      	beq.n	8005324 <putchar+0x18>
 8005318:	69a3      	ldr	r3, [r4, #24]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d102      	bne.n	8005324 <putchar+0x18>
 800531e:	0020      	movs	r0, r4
 8005320:	f000 fb3c 	bl	800599c <__sinit>
 8005324:	0029      	movs	r1, r5
 8005326:	0020      	movs	r0, r4
 8005328:	68a2      	ldr	r2, [r4, #8]
 800532a:	f001 f94f 	bl	80065cc <_putc_r>
 800532e:	bd70      	pop	{r4, r5, r6, pc}
 8005330:	20000028 	.word	0x20000028

08005334 <_puts_r>:
 8005334:	b570      	push	{r4, r5, r6, lr}
 8005336:	0005      	movs	r5, r0
 8005338:	000e      	movs	r6, r1
 800533a:	2800      	cmp	r0, #0
 800533c:	d004      	beq.n	8005348 <_puts_r+0x14>
 800533e:	6983      	ldr	r3, [r0, #24]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <_puts_r+0x14>
 8005344:	f000 fb2a 	bl	800599c <__sinit>
 8005348:	69ab      	ldr	r3, [r5, #24]
 800534a:	68ac      	ldr	r4, [r5, #8]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d102      	bne.n	8005356 <_puts_r+0x22>
 8005350:	0028      	movs	r0, r5
 8005352:	f000 fb23 	bl	800599c <__sinit>
 8005356:	4b2d      	ldr	r3, [pc, #180]	; (800540c <_puts_r+0xd8>)
 8005358:	429c      	cmp	r4, r3
 800535a:	d122      	bne.n	80053a2 <_puts_r+0x6e>
 800535c:	686c      	ldr	r4, [r5, #4]
 800535e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005360:	07db      	lsls	r3, r3, #31
 8005362:	d405      	bmi.n	8005370 <_puts_r+0x3c>
 8005364:	89a3      	ldrh	r3, [r4, #12]
 8005366:	059b      	lsls	r3, r3, #22
 8005368:	d402      	bmi.n	8005370 <_puts_r+0x3c>
 800536a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800536c:	f000 fbc7 	bl	8005afe <__retarget_lock_acquire_recursive>
 8005370:	89a3      	ldrh	r3, [r4, #12]
 8005372:	071b      	lsls	r3, r3, #28
 8005374:	d502      	bpl.n	800537c <_puts_r+0x48>
 8005376:	6923      	ldr	r3, [r4, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d129      	bne.n	80053d0 <_puts_r+0x9c>
 800537c:	0021      	movs	r1, r4
 800537e:	0028      	movs	r0, r5
 8005380:	f000 f948 	bl	8005614 <__swsetup_r>
 8005384:	2800      	cmp	r0, #0
 8005386:	d023      	beq.n	80053d0 <_puts_r+0x9c>
 8005388:	2501      	movs	r5, #1
 800538a:	426d      	negs	r5, r5
 800538c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800538e:	07db      	lsls	r3, r3, #31
 8005390:	d405      	bmi.n	800539e <_puts_r+0x6a>
 8005392:	89a3      	ldrh	r3, [r4, #12]
 8005394:	059b      	lsls	r3, r3, #22
 8005396:	d402      	bmi.n	800539e <_puts_r+0x6a>
 8005398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800539a:	f000 fbb1 	bl	8005b00 <__retarget_lock_release_recursive>
 800539e:	0028      	movs	r0, r5
 80053a0:	bd70      	pop	{r4, r5, r6, pc}
 80053a2:	4b1b      	ldr	r3, [pc, #108]	; (8005410 <_puts_r+0xdc>)
 80053a4:	429c      	cmp	r4, r3
 80053a6:	d101      	bne.n	80053ac <_puts_r+0x78>
 80053a8:	68ac      	ldr	r4, [r5, #8]
 80053aa:	e7d8      	b.n	800535e <_puts_r+0x2a>
 80053ac:	4b19      	ldr	r3, [pc, #100]	; (8005414 <_puts_r+0xe0>)
 80053ae:	429c      	cmp	r4, r3
 80053b0:	d1d5      	bne.n	800535e <_puts_r+0x2a>
 80053b2:	68ec      	ldr	r4, [r5, #12]
 80053b4:	e7d3      	b.n	800535e <_puts_r+0x2a>
 80053b6:	3601      	adds	r6, #1
 80053b8:	60a3      	str	r3, [r4, #8]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	da04      	bge.n	80053c8 <_puts_r+0x94>
 80053be:	69a2      	ldr	r2, [r4, #24]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	dc16      	bgt.n	80053f2 <_puts_r+0xbe>
 80053c4:	290a      	cmp	r1, #10
 80053c6:	d014      	beq.n	80053f2 <_puts_r+0xbe>
 80053c8:	6823      	ldr	r3, [r4, #0]
 80053ca:	1c5a      	adds	r2, r3, #1
 80053cc:	6022      	str	r2, [r4, #0]
 80053ce:	7019      	strb	r1, [r3, #0]
 80053d0:	68a3      	ldr	r3, [r4, #8]
 80053d2:	7831      	ldrb	r1, [r6, #0]
 80053d4:	3b01      	subs	r3, #1
 80053d6:	2900      	cmp	r1, #0
 80053d8:	d1ed      	bne.n	80053b6 <_puts_r+0x82>
 80053da:	60a3      	str	r3, [r4, #8]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	da0f      	bge.n	8005400 <_puts_r+0xcc>
 80053e0:	0028      	movs	r0, r5
 80053e2:	0022      	movs	r2, r4
 80053e4:	310a      	adds	r1, #10
 80053e6:	f000 f8bf 	bl	8005568 <__swbuf_r>
 80053ea:	250a      	movs	r5, #10
 80053ec:	1c43      	adds	r3, r0, #1
 80053ee:	d1cd      	bne.n	800538c <_puts_r+0x58>
 80053f0:	e7ca      	b.n	8005388 <_puts_r+0x54>
 80053f2:	0022      	movs	r2, r4
 80053f4:	0028      	movs	r0, r5
 80053f6:	f000 f8b7 	bl	8005568 <__swbuf_r>
 80053fa:	1c43      	adds	r3, r0, #1
 80053fc:	d1e8      	bne.n	80053d0 <_puts_r+0x9c>
 80053fe:	e7c3      	b.n	8005388 <_puts_r+0x54>
 8005400:	250a      	movs	r5, #10
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	1c5a      	adds	r2, r3, #1
 8005406:	6022      	str	r2, [r4, #0]
 8005408:	701d      	strb	r5, [r3, #0]
 800540a:	e7bf      	b.n	800538c <_puts_r+0x58>
 800540c:	08009890 	.word	0x08009890
 8005410:	080098b0 	.word	0x080098b0
 8005414:	08009870 	.word	0x08009870

08005418 <puts>:
 8005418:	b510      	push	{r4, lr}
 800541a:	4b03      	ldr	r3, [pc, #12]	; (8005428 <puts+0x10>)
 800541c:	0001      	movs	r1, r0
 800541e:	6818      	ldr	r0, [r3, #0]
 8005420:	f7ff ff88 	bl	8005334 <_puts_r>
 8005424:	bd10      	pop	{r4, pc}
 8005426:	46c0      	nop			; (mov r8, r8)
 8005428:	20000028 	.word	0x20000028

0800542c <siprintf>:
 800542c:	b40e      	push	{r1, r2, r3}
 800542e:	b500      	push	{lr}
 8005430:	490b      	ldr	r1, [pc, #44]	; (8005460 <siprintf+0x34>)
 8005432:	b09c      	sub	sp, #112	; 0x70
 8005434:	ab1d      	add	r3, sp, #116	; 0x74
 8005436:	9002      	str	r0, [sp, #8]
 8005438:	9006      	str	r0, [sp, #24]
 800543a:	9107      	str	r1, [sp, #28]
 800543c:	9104      	str	r1, [sp, #16]
 800543e:	4809      	ldr	r0, [pc, #36]	; (8005464 <siprintf+0x38>)
 8005440:	4909      	ldr	r1, [pc, #36]	; (8005468 <siprintf+0x3c>)
 8005442:	cb04      	ldmia	r3!, {r2}
 8005444:	9105      	str	r1, [sp, #20]
 8005446:	6800      	ldr	r0, [r0, #0]
 8005448:	a902      	add	r1, sp, #8
 800544a:	9301      	str	r3, [sp, #4]
 800544c:	f000 fcda 	bl	8005e04 <_svfiprintf_r>
 8005450:	2300      	movs	r3, #0
 8005452:	9a02      	ldr	r2, [sp, #8]
 8005454:	7013      	strb	r3, [r2, #0]
 8005456:	b01c      	add	sp, #112	; 0x70
 8005458:	bc08      	pop	{r3}
 800545a:	b003      	add	sp, #12
 800545c:	4718      	bx	r3
 800545e:	46c0      	nop			; (mov r8, r8)
 8005460:	7fffffff 	.word	0x7fffffff
 8005464:	20000028 	.word	0x20000028
 8005468:	ffff0208 	.word	0xffff0208

0800546c <strcasecmp>:
 800546c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800546e:	0005      	movs	r5, r0
 8005470:	2400      	movs	r4, #0
 8005472:	2703      	movs	r7, #3
 8005474:	4e09      	ldr	r6, [pc, #36]	; (800549c <strcasecmp+0x30>)
 8005476:	5d2a      	ldrb	r2, [r5, r4]
 8005478:	5cb3      	ldrb	r3, [r6, r2]
 800547a:	403b      	ands	r3, r7
 800547c:	2b01      	cmp	r3, #1
 800547e:	d100      	bne.n	8005482 <strcasecmp+0x16>
 8005480:	3220      	adds	r2, #32
 8005482:	5d0b      	ldrb	r3, [r1, r4]
 8005484:	5cf0      	ldrb	r0, [r6, r3]
 8005486:	4038      	ands	r0, r7
 8005488:	2801      	cmp	r0, #1
 800548a:	d100      	bne.n	800548e <strcasecmp+0x22>
 800548c:	3320      	adds	r3, #32
 800548e:	1ad0      	subs	r0, r2, r3
 8005490:	429a      	cmp	r2, r3
 8005492:	d102      	bne.n	800549a <strcasecmp+0x2e>
 8005494:	3401      	adds	r4, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1ed      	bne.n	8005476 <strcasecmp+0xa>
 800549a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800549c:	0800976d 	.word	0x0800976d

080054a0 <strtok>:
 80054a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a2:	4b16      	ldr	r3, [pc, #88]	; (80054fc <strtok+0x5c>)
 80054a4:	0005      	movs	r5, r0
 80054a6:	681f      	ldr	r7, [r3, #0]
 80054a8:	000e      	movs	r6, r1
 80054aa:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80054ac:	2c00      	cmp	r4, #0
 80054ae:	d11d      	bne.n	80054ec <strtok+0x4c>
 80054b0:	2050      	movs	r0, #80	; 0x50
 80054b2:	f000 fb93 	bl	8005bdc <malloc>
 80054b6:	1e02      	subs	r2, r0, #0
 80054b8:	65b8      	str	r0, [r7, #88]	; 0x58
 80054ba:	d104      	bne.n	80054c6 <strtok+0x26>
 80054bc:	2157      	movs	r1, #87	; 0x57
 80054be:	4b10      	ldr	r3, [pc, #64]	; (8005500 <strtok+0x60>)
 80054c0:	4810      	ldr	r0, [pc, #64]	; (8005504 <strtok+0x64>)
 80054c2:	f000 f91f 	bl	8005704 <__assert_func>
 80054c6:	6004      	str	r4, [r0, #0]
 80054c8:	6044      	str	r4, [r0, #4]
 80054ca:	6084      	str	r4, [r0, #8]
 80054cc:	60c4      	str	r4, [r0, #12]
 80054ce:	6104      	str	r4, [r0, #16]
 80054d0:	6144      	str	r4, [r0, #20]
 80054d2:	6184      	str	r4, [r0, #24]
 80054d4:	6284      	str	r4, [r0, #40]	; 0x28
 80054d6:	62c4      	str	r4, [r0, #44]	; 0x2c
 80054d8:	6304      	str	r4, [r0, #48]	; 0x30
 80054da:	6344      	str	r4, [r0, #52]	; 0x34
 80054dc:	6384      	str	r4, [r0, #56]	; 0x38
 80054de:	63c4      	str	r4, [r0, #60]	; 0x3c
 80054e0:	6404      	str	r4, [r0, #64]	; 0x40
 80054e2:	6444      	str	r4, [r0, #68]	; 0x44
 80054e4:	6484      	str	r4, [r0, #72]	; 0x48
 80054e6:	64c4      	str	r4, [r0, #76]	; 0x4c
 80054e8:	7704      	strb	r4, [r0, #28]
 80054ea:	6244      	str	r4, [r0, #36]	; 0x24
 80054ec:	0031      	movs	r1, r6
 80054ee:	0028      	movs	r0, r5
 80054f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054f2:	2301      	movs	r3, #1
 80054f4:	f000 f808 	bl	8005508 <__strtok_r>
 80054f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054fa:	46c0      	nop			; (mov r8, r8)
 80054fc:	20000028 	.word	0x20000028
 8005500:	080096b8 	.word	0x080096b8
 8005504:	080096cf 	.word	0x080096cf

08005508 <__strtok_r>:
 8005508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800550a:	2800      	cmp	r0, #0
 800550c:	d102      	bne.n	8005514 <__strtok_r+0xc>
 800550e:	6810      	ldr	r0, [r2, #0]
 8005510:	2800      	cmp	r0, #0
 8005512:	d013      	beq.n	800553c <__strtok_r+0x34>
 8005514:	0004      	movs	r4, r0
 8005516:	0020      	movs	r0, r4
 8005518:	000e      	movs	r6, r1
 800551a:	7805      	ldrb	r5, [r0, #0]
 800551c:	3401      	adds	r4, #1
 800551e:	7837      	ldrb	r7, [r6, #0]
 8005520:	2f00      	cmp	r7, #0
 8005522:	d104      	bne.n	800552e <__strtok_r+0x26>
 8005524:	2d00      	cmp	r5, #0
 8005526:	d10f      	bne.n	8005548 <__strtok_r+0x40>
 8005528:	0028      	movs	r0, r5
 800552a:	6015      	str	r5, [r2, #0]
 800552c:	e006      	b.n	800553c <__strtok_r+0x34>
 800552e:	3601      	adds	r6, #1
 8005530:	42bd      	cmp	r5, r7
 8005532:	d1f4      	bne.n	800551e <__strtok_r+0x16>
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1ee      	bne.n	8005516 <__strtok_r+0xe>
 8005538:	6014      	str	r4, [r2, #0]
 800553a:	7003      	strb	r3, [r0, #0]
 800553c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800553e:	002f      	movs	r7, r5
 8005540:	e00f      	b.n	8005562 <__strtok_r+0x5a>
 8005542:	3301      	adds	r3, #1
 8005544:	2e00      	cmp	r6, #0
 8005546:	d104      	bne.n	8005552 <__strtok_r+0x4a>
 8005548:	0023      	movs	r3, r4
 800554a:	3401      	adds	r4, #1
 800554c:	781d      	ldrb	r5, [r3, #0]
 800554e:	0027      	movs	r7, r4
 8005550:	000b      	movs	r3, r1
 8005552:	781e      	ldrb	r6, [r3, #0]
 8005554:	42b5      	cmp	r5, r6
 8005556:	d1f4      	bne.n	8005542 <__strtok_r+0x3a>
 8005558:	2d00      	cmp	r5, #0
 800555a:	d0f0      	beq.n	800553e <__strtok_r+0x36>
 800555c:	2300      	movs	r3, #0
 800555e:	3c01      	subs	r4, #1
 8005560:	7023      	strb	r3, [r4, #0]
 8005562:	6017      	str	r7, [r2, #0]
 8005564:	e7ea      	b.n	800553c <__strtok_r+0x34>
	...

08005568 <__swbuf_r>:
 8005568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800556a:	0005      	movs	r5, r0
 800556c:	000e      	movs	r6, r1
 800556e:	0014      	movs	r4, r2
 8005570:	2800      	cmp	r0, #0
 8005572:	d004      	beq.n	800557e <__swbuf_r+0x16>
 8005574:	6983      	ldr	r3, [r0, #24]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <__swbuf_r+0x16>
 800557a:	f000 fa0f 	bl	800599c <__sinit>
 800557e:	4b22      	ldr	r3, [pc, #136]	; (8005608 <__swbuf_r+0xa0>)
 8005580:	429c      	cmp	r4, r3
 8005582:	d12e      	bne.n	80055e2 <__swbuf_r+0x7a>
 8005584:	686c      	ldr	r4, [r5, #4]
 8005586:	69a3      	ldr	r3, [r4, #24]
 8005588:	60a3      	str	r3, [r4, #8]
 800558a:	89a3      	ldrh	r3, [r4, #12]
 800558c:	071b      	lsls	r3, r3, #28
 800558e:	d532      	bpl.n	80055f6 <__swbuf_r+0x8e>
 8005590:	6923      	ldr	r3, [r4, #16]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d02f      	beq.n	80055f6 <__swbuf_r+0x8e>
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	6922      	ldr	r2, [r4, #16]
 800559a:	b2f7      	uxtb	r7, r6
 800559c:	1a98      	subs	r0, r3, r2
 800559e:	6963      	ldr	r3, [r4, #20]
 80055a0:	b2f6      	uxtb	r6, r6
 80055a2:	4283      	cmp	r3, r0
 80055a4:	dc05      	bgt.n	80055b2 <__swbuf_r+0x4a>
 80055a6:	0021      	movs	r1, r4
 80055a8:	0028      	movs	r0, r5
 80055aa:	f000 f955 	bl	8005858 <_fflush_r>
 80055ae:	2800      	cmp	r0, #0
 80055b0:	d127      	bne.n	8005602 <__swbuf_r+0x9a>
 80055b2:	68a3      	ldr	r3, [r4, #8]
 80055b4:	3001      	adds	r0, #1
 80055b6:	3b01      	subs	r3, #1
 80055b8:	60a3      	str	r3, [r4, #8]
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	1c5a      	adds	r2, r3, #1
 80055be:	6022      	str	r2, [r4, #0]
 80055c0:	701f      	strb	r7, [r3, #0]
 80055c2:	6963      	ldr	r3, [r4, #20]
 80055c4:	4283      	cmp	r3, r0
 80055c6:	d004      	beq.n	80055d2 <__swbuf_r+0x6a>
 80055c8:	89a3      	ldrh	r3, [r4, #12]
 80055ca:	07db      	lsls	r3, r3, #31
 80055cc:	d507      	bpl.n	80055de <__swbuf_r+0x76>
 80055ce:	2e0a      	cmp	r6, #10
 80055d0:	d105      	bne.n	80055de <__swbuf_r+0x76>
 80055d2:	0021      	movs	r1, r4
 80055d4:	0028      	movs	r0, r5
 80055d6:	f000 f93f 	bl	8005858 <_fflush_r>
 80055da:	2800      	cmp	r0, #0
 80055dc:	d111      	bne.n	8005602 <__swbuf_r+0x9a>
 80055de:	0030      	movs	r0, r6
 80055e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055e2:	4b0a      	ldr	r3, [pc, #40]	; (800560c <__swbuf_r+0xa4>)
 80055e4:	429c      	cmp	r4, r3
 80055e6:	d101      	bne.n	80055ec <__swbuf_r+0x84>
 80055e8:	68ac      	ldr	r4, [r5, #8]
 80055ea:	e7cc      	b.n	8005586 <__swbuf_r+0x1e>
 80055ec:	4b08      	ldr	r3, [pc, #32]	; (8005610 <__swbuf_r+0xa8>)
 80055ee:	429c      	cmp	r4, r3
 80055f0:	d1c9      	bne.n	8005586 <__swbuf_r+0x1e>
 80055f2:	68ec      	ldr	r4, [r5, #12]
 80055f4:	e7c7      	b.n	8005586 <__swbuf_r+0x1e>
 80055f6:	0021      	movs	r1, r4
 80055f8:	0028      	movs	r0, r5
 80055fa:	f000 f80b 	bl	8005614 <__swsetup_r>
 80055fe:	2800      	cmp	r0, #0
 8005600:	d0c9      	beq.n	8005596 <__swbuf_r+0x2e>
 8005602:	2601      	movs	r6, #1
 8005604:	4276      	negs	r6, r6
 8005606:	e7ea      	b.n	80055de <__swbuf_r+0x76>
 8005608:	08009890 	.word	0x08009890
 800560c:	080098b0 	.word	0x080098b0
 8005610:	08009870 	.word	0x08009870

08005614 <__swsetup_r>:
 8005614:	4b37      	ldr	r3, [pc, #220]	; (80056f4 <__swsetup_r+0xe0>)
 8005616:	b570      	push	{r4, r5, r6, lr}
 8005618:	681d      	ldr	r5, [r3, #0]
 800561a:	0006      	movs	r6, r0
 800561c:	000c      	movs	r4, r1
 800561e:	2d00      	cmp	r5, #0
 8005620:	d005      	beq.n	800562e <__swsetup_r+0x1a>
 8005622:	69ab      	ldr	r3, [r5, #24]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d102      	bne.n	800562e <__swsetup_r+0x1a>
 8005628:	0028      	movs	r0, r5
 800562a:	f000 f9b7 	bl	800599c <__sinit>
 800562e:	4b32      	ldr	r3, [pc, #200]	; (80056f8 <__swsetup_r+0xe4>)
 8005630:	429c      	cmp	r4, r3
 8005632:	d10f      	bne.n	8005654 <__swsetup_r+0x40>
 8005634:	686c      	ldr	r4, [r5, #4]
 8005636:	230c      	movs	r3, #12
 8005638:	5ee2      	ldrsh	r2, [r4, r3]
 800563a:	b293      	uxth	r3, r2
 800563c:	0711      	lsls	r1, r2, #28
 800563e:	d42d      	bmi.n	800569c <__swsetup_r+0x88>
 8005640:	06d9      	lsls	r1, r3, #27
 8005642:	d411      	bmi.n	8005668 <__swsetup_r+0x54>
 8005644:	2309      	movs	r3, #9
 8005646:	2001      	movs	r0, #1
 8005648:	6033      	str	r3, [r6, #0]
 800564a:	3337      	adds	r3, #55	; 0x37
 800564c:	4313      	orrs	r3, r2
 800564e:	81a3      	strh	r3, [r4, #12]
 8005650:	4240      	negs	r0, r0
 8005652:	bd70      	pop	{r4, r5, r6, pc}
 8005654:	4b29      	ldr	r3, [pc, #164]	; (80056fc <__swsetup_r+0xe8>)
 8005656:	429c      	cmp	r4, r3
 8005658:	d101      	bne.n	800565e <__swsetup_r+0x4a>
 800565a:	68ac      	ldr	r4, [r5, #8]
 800565c:	e7eb      	b.n	8005636 <__swsetup_r+0x22>
 800565e:	4b28      	ldr	r3, [pc, #160]	; (8005700 <__swsetup_r+0xec>)
 8005660:	429c      	cmp	r4, r3
 8005662:	d1e8      	bne.n	8005636 <__swsetup_r+0x22>
 8005664:	68ec      	ldr	r4, [r5, #12]
 8005666:	e7e6      	b.n	8005636 <__swsetup_r+0x22>
 8005668:	075b      	lsls	r3, r3, #29
 800566a:	d513      	bpl.n	8005694 <__swsetup_r+0x80>
 800566c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800566e:	2900      	cmp	r1, #0
 8005670:	d008      	beq.n	8005684 <__swsetup_r+0x70>
 8005672:	0023      	movs	r3, r4
 8005674:	3344      	adds	r3, #68	; 0x44
 8005676:	4299      	cmp	r1, r3
 8005678:	d002      	beq.n	8005680 <__swsetup_r+0x6c>
 800567a:	0030      	movs	r0, r6
 800567c:	f000 fab8 	bl	8005bf0 <_free_r>
 8005680:	2300      	movs	r3, #0
 8005682:	6363      	str	r3, [r4, #52]	; 0x34
 8005684:	2224      	movs	r2, #36	; 0x24
 8005686:	89a3      	ldrh	r3, [r4, #12]
 8005688:	4393      	bics	r3, r2
 800568a:	81a3      	strh	r3, [r4, #12]
 800568c:	2300      	movs	r3, #0
 800568e:	6063      	str	r3, [r4, #4]
 8005690:	6923      	ldr	r3, [r4, #16]
 8005692:	6023      	str	r3, [r4, #0]
 8005694:	2308      	movs	r3, #8
 8005696:	89a2      	ldrh	r2, [r4, #12]
 8005698:	4313      	orrs	r3, r2
 800569a:	81a3      	strh	r3, [r4, #12]
 800569c:	6923      	ldr	r3, [r4, #16]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10b      	bne.n	80056ba <__swsetup_r+0xa6>
 80056a2:	21a0      	movs	r1, #160	; 0xa0
 80056a4:	2280      	movs	r2, #128	; 0x80
 80056a6:	89a3      	ldrh	r3, [r4, #12]
 80056a8:	0089      	lsls	r1, r1, #2
 80056aa:	0092      	lsls	r2, r2, #2
 80056ac:	400b      	ands	r3, r1
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d003      	beq.n	80056ba <__swsetup_r+0xa6>
 80056b2:	0021      	movs	r1, r4
 80056b4:	0030      	movs	r0, r6
 80056b6:	f000 fa4d 	bl	8005b54 <__smakebuf_r>
 80056ba:	220c      	movs	r2, #12
 80056bc:	5ea3      	ldrsh	r3, [r4, r2]
 80056be:	2001      	movs	r0, #1
 80056c0:	001a      	movs	r2, r3
 80056c2:	b299      	uxth	r1, r3
 80056c4:	4002      	ands	r2, r0
 80056c6:	4203      	tst	r3, r0
 80056c8:	d00f      	beq.n	80056ea <__swsetup_r+0xd6>
 80056ca:	2200      	movs	r2, #0
 80056cc:	60a2      	str	r2, [r4, #8]
 80056ce:	6962      	ldr	r2, [r4, #20]
 80056d0:	4252      	negs	r2, r2
 80056d2:	61a2      	str	r2, [r4, #24]
 80056d4:	2000      	movs	r0, #0
 80056d6:	6922      	ldr	r2, [r4, #16]
 80056d8:	4282      	cmp	r2, r0
 80056da:	d1ba      	bne.n	8005652 <__swsetup_r+0x3e>
 80056dc:	060a      	lsls	r2, r1, #24
 80056de:	d5b8      	bpl.n	8005652 <__swsetup_r+0x3e>
 80056e0:	2240      	movs	r2, #64	; 0x40
 80056e2:	4313      	orrs	r3, r2
 80056e4:	81a3      	strh	r3, [r4, #12]
 80056e6:	3801      	subs	r0, #1
 80056e8:	e7b3      	b.n	8005652 <__swsetup_r+0x3e>
 80056ea:	0788      	lsls	r0, r1, #30
 80056ec:	d400      	bmi.n	80056f0 <__swsetup_r+0xdc>
 80056ee:	6962      	ldr	r2, [r4, #20]
 80056f0:	60a2      	str	r2, [r4, #8]
 80056f2:	e7ef      	b.n	80056d4 <__swsetup_r+0xc0>
 80056f4:	20000028 	.word	0x20000028
 80056f8:	08009890 	.word	0x08009890
 80056fc:	080098b0 	.word	0x080098b0
 8005700:	08009870 	.word	0x08009870

08005704 <__assert_func>:
 8005704:	b530      	push	{r4, r5, lr}
 8005706:	0014      	movs	r4, r2
 8005708:	001a      	movs	r2, r3
 800570a:	4b09      	ldr	r3, [pc, #36]	; (8005730 <__assert_func+0x2c>)
 800570c:	0005      	movs	r5, r0
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	b085      	sub	sp, #20
 8005712:	68d8      	ldr	r0, [r3, #12]
 8005714:	4b07      	ldr	r3, [pc, #28]	; (8005734 <__assert_func+0x30>)
 8005716:	2c00      	cmp	r4, #0
 8005718:	d101      	bne.n	800571e <__assert_func+0x1a>
 800571a:	4b07      	ldr	r3, [pc, #28]	; (8005738 <__assert_func+0x34>)
 800571c:	001c      	movs	r4, r3
 800571e:	9301      	str	r3, [sp, #4]
 8005720:	9100      	str	r1, [sp, #0]
 8005722:	002b      	movs	r3, r5
 8005724:	4905      	ldr	r1, [pc, #20]	; (800573c <__assert_func+0x38>)
 8005726:	9402      	str	r4, [sp, #8]
 8005728:	f000 f9b8 	bl	8005a9c <fiprintf>
 800572c:	f001 f80a 	bl	8006744 <abort>
 8005730:	20000028 	.word	0x20000028
 8005734:	08009730 	.word	0x08009730
 8005738:	0800976b 	.word	0x0800976b
 800573c:	0800973d 	.word	0x0800973d

08005740 <__sflush_r>:
 8005740:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005742:	898b      	ldrh	r3, [r1, #12]
 8005744:	0005      	movs	r5, r0
 8005746:	000c      	movs	r4, r1
 8005748:	071a      	lsls	r2, r3, #28
 800574a:	d45f      	bmi.n	800580c <__sflush_r+0xcc>
 800574c:	684a      	ldr	r2, [r1, #4]
 800574e:	2a00      	cmp	r2, #0
 8005750:	dc04      	bgt.n	800575c <__sflush_r+0x1c>
 8005752:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005754:	2a00      	cmp	r2, #0
 8005756:	dc01      	bgt.n	800575c <__sflush_r+0x1c>
 8005758:	2000      	movs	r0, #0
 800575a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800575c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800575e:	2f00      	cmp	r7, #0
 8005760:	d0fa      	beq.n	8005758 <__sflush_r+0x18>
 8005762:	2200      	movs	r2, #0
 8005764:	2180      	movs	r1, #128	; 0x80
 8005766:	682e      	ldr	r6, [r5, #0]
 8005768:	602a      	str	r2, [r5, #0]
 800576a:	001a      	movs	r2, r3
 800576c:	0149      	lsls	r1, r1, #5
 800576e:	400a      	ands	r2, r1
 8005770:	420b      	tst	r3, r1
 8005772:	d034      	beq.n	80057de <__sflush_r+0x9e>
 8005774:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005776:	89a3      	ldrh	r3, [r4, #12]
 8005778:	075b      	lsls	r3, r3, #29
 800577a:	d506      	bpl.n	800578a <__sflush_r+0x4a>
 800577c:	6863      	ldr	r3, [r4, #4]
 800577e:	1ac0      	subs	r0, r0, r3
 8005780:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <__sflush_r+0x4a>
 8005786:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005788:	1ac0      	subs	r0, r0, r3
 800578a:	0002      	movs	r2, r0
 800578c:	6a21      	ldr	r1, [r4, #32]
 800578e:	2300      	movs	r3, #0
 8005790:	0028      	movs	r0, r5
 8005792:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005794:	47b8      	blx	r7
 8005796:	89a1      	ldrh	r1, [r4, #12]
 8005798:	1c43      	adds	r3, r0, #1
 800579a:	d106      	bne.n	80057aa <__sflush_r+0x6a>
 800579c:	682b      	ldr	r3, [r5, #0]
 800579e:	2b1d      	cmp	r3, #29
 80057a0:	d831      	bhi.n	8005806 <__sflush_r+0xc6>
 80057a2:	4a2c      	ldr	r2, [pc, #176]	; (8005854 <__sflush_r+0x114>)
 80057a4:	40da      	lsrs	r2, r3
 80057a6:	07d3      	lsls	r3, r2, #31
 80057a8:	d52d      	bpl.n	8005806 <__sflush_r+0xc6>
 80057aa:	2300      	movs	r3, #0
 80057ac:	6063      	str	r3, [r4, #4]
 80057ae:	6923      	ldr	r3, [r4, #16]
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	04cb      	lsls	r3, r1, #19
 80057b4:	d505      	bpl.n	80057c2 <__sflush_r+0x82>
 80057b6:	1c43      	adds	r3, r0, #1
 80057b8:	d102      	bne.n	80057c0 <__sflush_r+0x80>
 80057ba:	682b      	ldr	r3, [r5, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d100      	bne.n	80057c2 <__sflush_r+0x82>
 80057c0:	6560      	str	r0, [r4, #84]	; 0x54
 80057c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057c4:	602e      	str	r6, [r5, #0]
 80057c6:	2900      	cmp	r1, #0
 80057c8:	d0c6      	beq.n	8005758 <__sflush_r+0x18>
 80057ca:	0023      	movs	r3, r4
 80057cc:	3344      	adds	r3, #68	; 0x44
 80057ce:	4299      	cmp	r1, r3
 80057d0:	d002      	beq.n	80057d8 <__sflush_r+0x98>
 80057d2:	0028      	movs	r0, r5
 80057d4:	f000 fa0c 	bl	8005bf0 <_free_r>
 80057d8:	2000      	movs	r0, #0
 80057da:	6360      	str	r0, [r4, #52]	; 0x34
 80057dc:	e7bd      	b.n	800575a <__sflush_r+0x1a>
 80057de:	2301      	movs	r3, #1
 80057e0:	0028      	movs	r0, r5
 80057e2:	6a21      	ldr	r1, [r4, #32]
 80057e4:	47b8      	blx	r7
 80057e6:	1c43      	adds	r3, r0, #1
 80057e8:	d1c5      	bne.n	8005776 <__sflush_r+0x36>
 80057ea:	682b      	ldr	r3, [r5, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0c2      	beq.n	8005776 <__sflush_r+0x36>
 80057f0:	2b1d      	cmp	r3, #29
 80057f2:	d001      	beq.n	80057f8 <__sflush_r+0xb8>
 80057f4:	2b16      	cmp	r3, #22
 80057f6:	d101      	bne.n	80057fc <__sflush_r+0xbc>
 80057f8:	602e      	str	r6, [r5, #0]
 80057fa:	e7ad      	b.n	8005758 <__sflush_r+0x18>
 80057fc:	2340      	movs	r3, #64	; 0x40
 80057fe:	89a2      	ldrh	r2, [r4, #12]
 8005800:	4313      	orrs	r3, r2
 8005802:	81a3      	strh	r3, [r4, #12]
 8005804:	e7a9      	b.n	800575a <__sflush_r+0x1a>
 8005806:	2340      	movs	r3, #64	; 0x40
 8005808:	430b      	orrs	r3, r1
 800580a:	e7fa      	b.n	8005802 <__sflush_r+0xc2>
 800580c:	690f      	ldr	r7, [r1, #16]
 800580e:	2f00      	cmp	r7, #0
 8005810:	d0a2      	beq.n	8005758 <__sflush_r+0x18>
 8005812:	680a      	ldr	r2, [r1, #0]
 8005814:	600f      	str	r7, [r1, #0]
 8005816:	1bd2      	subs	r2, r2, r7
 8005818:	9201      	str	r2, [sp, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	079b      	lsls	r3, r3, #30
 800581e:	d100      	bne.n	8005822 <__sflush_r+0xe2>
 8005820:	694a      	ldr	r2, [r1, #20]
 8005822:	60a2      	str	r2, [r4, #8]
 8005824:	9b01      	ldr	r3, [sp, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	dc00      	bgt.n	800582c <__sflush_r+0xec>
 800582a:	e795      	b.n	8005758 <__sflush_r+0x18>
 800582c:	003a      	movs	r2, r7
 800582e:	0028      	movs	r0, r5
 8005830:	9b01      	ldr	r3, [sp, #4]
 8005832:	6a21      	ldr	r1, [r4, #32]
 8005834:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005836:	47b0      	blx	r6
 8005838:	2800      	cmp	r0, #0
 800583a:	dc06      	bgt.n	800584a <__sflush_r+0x10a>
 800583c:	2340      	movs	r3, #64	; 0x40
 800583e:	2001      	movs	r0, #1
 8005840:	89a2      	ldrh	r2, [r4, #12]
 8005842:	4240      	negs	r0, r0
 8005844:	4313      	orrs	r3, r2
 8005846:	81a3      	strh	r3, [r4, #12]
 8005848:	e787      	b.n	800575a <__sflush_r+0x1a>
 800584a:	9b01      	ldr	r3, [sp, #4]
 800584c:	183f      	adds	r7, r7, r0
 800584e:	1a1b      	subs	r3, r3, r0
 8005850:	9301      	str	r3, [sp, #4]
 8005852:	e7e7      	b.n	8005824 <__sflush_r+0xe4>
 8005854:	20400001 	.word	0x20400001

08005858 <_fflush_r>:
 8005858:	690b      	ldr	r3, [r1, #16]
 800585a:	b570      	push	{r4, r5, r6, lr}
 800585c:	0005      	movs	r5, r0
 800585e:	000c      	movs	r4, r1
 8005860:	2b00      	cmp	r3, #0
 8005862:	d102      	bne.n	800586a <_fflush_r+0x12>
 8005864:	2500      	movs	r5, #0
 8005866:	0028      	movs	r0, r5
 8005868:	bd70      	pop	{r4, r5, r6, pc}
 800586a:	2800      	cmp	r0, #0
 800586c:	d004      	beq.n	8005878 <_fflush_r+0x20>
 800586e:	6983      	ldr	r3, [r0, #24]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <_fflush_r+0x20>
 8005874:	f000 f892 	bl	800599c <__sinit>
 8005878:	4b14      	ldr	r3, [pc, #80]	; (80058cc <_fflush_r+0x74>)
 800587a:	429c      	cmp	r4, r3
 800587c:	d11b      	bne.n	80058b6 <_fflush_r+0x5e>
 800587e:	686c      	ldr	r4, [r5, #4]
 8005880:	220c      	movs	r2, #12
 8005882:	5ea3      	ldrsh	r3, [r4, r2]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0ed      	beq.n	8005864 <_fflush_r+0xc>
 8005888:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800588a:	07d2      	lsls	r2, r2, #31
 800588c:	d404      	bmi.n	8005898 <_fflush_r+0x40>
 800588e:	059b      	lsls	r3, r3, #22
 8005890:	d402      	bmi.n	8005898 <_fflush_r+0x40>
 8005892:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005894:	f000 f933 	bl	8005afe <__retarget_lock_acquire_recursive>
 8005898:	0028      	movs	r0, r5
 800589a:	0021      	movs	r1, r4
 800589c:	f7ff ff50 	bl	8005740 <__sflush_r>
 80058a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058a2:	0005      	movs	r5, r0
 80058a4:	07db      	lsls	r3, r3, #31
 80058a6:	d4de      	bmi.n	8005866 <_fflush_r+0xe>
 80058a8:	89a3      	ldrh	r3, [r4, #12]
 80058aa:	059b      	lsls	r3, r3, #22
 80058ac:	d4db      	bmi.n	8005866 <_fflush_r+0xe>
 80058ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058b0:	f000 f926 	bl	8005b00 <__retarget_lock_release_recursive>
 80058b4:	e7d7      	b.n	8005866 <_fflush_r+0xe>
 80058b6:	4b06      	ldr	r3, [pc, #24]	; (80058d0 <_fflush_r+0x78>)
 80058b8:	429c      	cmp	r4, r3
 80058ba:	d101      	bne.n	80058c0 <_fflush_r+0x68>
 80058bc:	68ac      	ldr	r4, [r5, #8]
 80058be:	e7df      	b.n	8005880 <_fflush_r+0x28>
 80058c0:	4b04      	ldr	r3, [pc, #16]	; (80058d4 <_fflush_r+0x7c>)
 80058c2:	429c      	cmp	r4, r3
 80058c4:	d1dc      	bne.n	8005880 <_fflush_r+0x28>
 80058c6:	68ec      	ldr	r4, [r5, #12]
 80058c8:	e7da      	b.n	8005880 <_fflush_r+0x28>
 80058ca:	46c0      	nop			; (mov r8, r8)
 80058cc:	08009890 	.word	0x08009890
 80058d0:	080098b0 	.word	0x080098b0
 80058d4:	08009870 	.word	0x08009870

080058d8 <std>:
 80058d8:	2300      	movs	r3, #0
 80058da:	b510      	push	{r4, lr}
 80058dc:	0004      	movs	r4, r0
 80058de:	6003      	str	r3, [r0, #0]
 80058e0:	6043      	str	r3, [r0, #4]
 80058e2:	6083      	str	r3, [r0, #8]
 80058e4:	8181      	strh	r1, [r0, #12]
 80058e6:	6643      	str	r3, [r0, #100]	; 0x64
 80058e8:	0019      	movs	r1, r3
 80058ea:	81c2      	strh	r2, [r0, #14]
 80058ec:	6103      	str	r3, [r0, #16]
 80058ee:	6143      	str	r3, [r0, #20]
 80058f0:	6183      	str	r3, [r0, #24]
 80058f2:	2208      	movs	r2, #8
 80058f4:	305c      	adds	r0, #92	; 0x5c
 80058f6:	f7ff fce7 	bl	80052c8 <memset>
 80058fa:	4b05      	ldr	r3, [pc, #20]	; (8005910 <std+0x38>)
 80058fc:	6263      	str	r3, [r4, #36]	; 0x24
 80058fe:	4b05      	ldr	r3, [pc, #20]	; (8005914 <std+0x3c>)
 8005900:	6224      	str	r4, [r4, #32]
 8005902:	62a3      	str	r3, [r4, #40]	; 0x28
 8005904:	4b04      	ldr	r3, [pc, #16]	; (8005918 <std+0x40>)
 8005906:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005908:	4b04      	ldr	r3, [pc, #16]	; (800591c <std+0x44>)
 800590a:	6323      	str	r3, [r4, #48]	; 0x30
 800590c:	bd10      	pop	{r4, pc}
 800590e:	46c0      	nop			; (mov r8, r8)
 8005910:	08006685 	.word	0x08006685
 8005914:	080066ad 	.word	0x080066ad
 8005918:	080066e5 	.word	0x080066e5
 800591c:	08006711 	.word	0x08006711

08005920 <_cleanup_r>:
 8005920:	b510      	push	{r4, lr}
 8005922:	4902      	ldr	r1, [pc, #8]	; (800592c <_cleanup_r+0xc>)
 8005924:	f000 f8ca 	bl	8005abc <_fwalk_reent>
 8005928:	bd10      	pop	{r4, pc}
 800592a:	46c0      	nop			; (mov r8, r8)
 800592c:	08005859 	.word	0x08005859

08005930 <__sfmoreglue>:
 8005930:	b570      	push	{r4, r5, r6, lr}
 8005932:	2568      	movs	r5, #104	; 0x68
 8005934:	1e4a      	subs	r2, r1, #1
 8005936:	4355      	muls	r5, r2
 8005938:	000e      	movs	r6, r1
 800593a:	0029      	movs	r1, r5
 800593c:	3174      	adds	r1, #116	; 0x74
 800593e:	f000 f9a1 	bl	8005c84 <_malloc_r>
 8005942:	1e04      	subs	r4, r0, #0
 8005944:	d008      	beq.n	8005958 <__sfmoreglue+0x28>
 8005946:	2100      	movs	r1, #0
 8005948:	002a      	movs	r2, r5
 800594a:	6001      	str	r1, [r0, #0]
 800594c:	6046      	str	r6, [r0, #4]
 800594e:	300c      	adds	r0, #12
 8005950:	60a0      	str	r0, [r4, #8]
 8005952:	3268      	adds	r2, #104	; 0x68
 8005954:	f7ff fcb8 	bl	80052c8 <memset>
 8005958:	0020      	movs	r0, r4
 800595a:	bd70      	pop	{r4, r5, r6, pc}

0800595c <__sfp_lock_acquire>:
 800595c:	b510      	push	{r4, lr}
 800595e:	4802      	ldr	r0, [pc, #8]	; (8005968 <__sfp_lock_acquire+0xc>)
 8005960:	f000 f8cd 	bl	8005afe <__retarget_lock_acquire_recursive>
 8005964:	bd10      	pop	{r4, pc}
 8005966:	46c0      	nop			; (mov r8, r8)
 8005968:	20000770 	.word	0x20000770

0800596c <__sfp_lock_release>:
 800596c:	b510      	push	{r4, lr}
 800596e:	4802      	ldr	r0, [pc, #8]	; (8005978 <__sfp_lock_release+0xc>)
 8005970:	f000 f8c6 	bl	8005b00 <__retarget_lock_release_recursive>
 8005974:	bd10      	pop	{r4, pc}
 8005976:	46c0      	nop			; (mov r8, r8)
 8005978:	20000770 	.word	0x20000770

0800597c <__sinit_lock_acquire>:
 800597c:	b510      	push	{r4, lr}
 800597e:	4802      	ldr	r0, [pc, #8]	; (8005988 <__sinit_lock_acquire+0xc>)
 8005980:	f000 f8bd 	bl	8005afe <__retarget_lock_acquire_recursive>
 8005984:	bd10      	pop	{r4, pc}
 8005986:	46c0      	nop			; (mov r8, r8)
 8005988:	2000076b 	.word	0x2000076b

0800598c <__sinit_lock_release>:
 800598c:	b510      	push	{r4, lr}
 800598e:	4802      	ldr	r0, [pc, #8]	; (8005998 <__sinit_lock_release+0xc>)
 8005990:	f000 f8b6 	bl	8005b00 <__retarget_lock_release_recursive>
 8005994:	bd10      	pop	{r4, pc}
 8005996:	46c0      	nop			; (mov r8, r8)
 8005998:	2000076b 	.word	0x2000076b

0800599c <__sinit>:
 800599c:	b513      	push	{r0, r1, r4, lr}
 800599e:	0004      	movs	r4, r0
 80059a0:	f7ff ffec 	bl	800597c <__sinit_lock_acquire>
 80059a4:	69a3      	ldr	r3, [r4, #24]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d002      	beq.n	80059b0 <__sinit+0x14>
 80059aa:	f7ff ffef 	bl	800598c <__sinit_lock_release>
 80059ae:	bd13      	pop	{r0, r1, r4, pc}
 80059b0:	64a3      	str	r3, [r4, #72]	; 0x48
 80059b2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80059b4:	6523      	str	r3, [r4, #80]	; 0x50
 80059b6:	4b13      	ldr	r3, [pc, #76]	; (8005a04 <__sinit+0x68>)
 80059b8:	4a13      	ldr	r2, [pc, #76]	; (8005a08 <__sinit+0x6c>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80059be:	9301      	str	r3, [sp, #4]
 80059c0:	42a3      	cmp	r3, r4
 80059c2:	d101      	bne.n	80059c8 <__sinit+0x2c>
 80059c4:	2301      	movs	r3, #1
 80059c6:	61a3      	str	r3, [r4, #24]
 80059c8:	0020      	movs	r0, r4
 80059ca:	f000 f81f 	bl	8005a0c <__sfp>
 80059ce:	6060      	str	r0, [r4, #4]
 80059d0:	0020      	movs	r0, r4
 80059d2:	f000 f81b 	bl	8005a0c <__sfp>
 80059d6:	60a0      	str	r0, [r4, #8]
 80059d8:	0020      	movs	r0, r4
 80059da:	f000 f817 	bl	8005a0c <__sfp>
 80059de:	2200      	movs	r2, #0
 80059e0:	2104      	movs	r1, #4
 80059e2:	60e0      	str	r0, [r4, #12]
 80059e4:	6860      	ldr	r0, [r4, #4]
 80059e6:	f7ff ff77 	bl	80058d8 <std>
 80059ea:	2201      	movs	r2, #1
 80059ec:	2109      	movs	r1, #9
 80059ee:	68a0      	ldr	r0, [r4, #8]
 80059f0:	f7ff ff72 	bl	80058d8 <std>
 80059f4:	2202      	movs	r2, #2
 80059f6:	2112      	movs	r1, #18
 80059f8:	68e0      	ldr	r0, [r4, #12]
 80059fa:	f7ff ff6d 	bl	80058d8 <std>
 80059fe:	2301      	movs	r3, #1
 8005a00:	61a3      	str	r3, [r4, #24]
 8005a02:	e7d2      	b.n	80059aa <__sinit+0xe>
 8005a04:	080096b4 	.word	0x080096b4
 8005a08:	08005921 	.word	0x08005921

08005a0c <__sfp>:
 8005a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a0e:	0007      	movs	r7, r0
 8005a10:	f7ff ffa4 	bl	800595c <__sfp_lock_acquire>
 8005a14:	4b1f      	ldr	r3, [pc, #124]	; (8005a94 <__sfp+0x88>)
 8005a16:	681e      	ldr	r6, [r3, #0]
 8005a18:	69b3      	ldr	r3, [r6, #24]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d102      	bne.n	8005a24 <__sfp+0x18>
 8005a1e:	0030      	movs	r0, r6
 8005a20:	f7ff ffbc 	bl	800599c <__sinit>
 8005a24:	3648      	adds	r6, #72	; 0x48
 8005a26:	68b4      	ldr	r4, [r6, #8]
 8005a28:	6873      	ldr	r3, [r6, #4]
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	d504      	bpl.n	8005a38 <__sfp+0x2c>
 8005a2e:	6833      	ldr	r3, [r6, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d022      	beq.n	8005a7a <__sfp+0x6e>
 8005a34:	6836      	ldr	r6, [r6, #0]
 8005a36:	e7f6      	b.n	8005a26 <__sfp+0x1a>
 8005a38:	220c      	movs	r2, #12
 8005a3a:	5ea5      	ldrsh	r5, [r4, r2]
 8005a3c:	2d00      	cmp	r5, #0
 8005a3e:	d11a      	bne.n	8005a76 <__sfp+0x6a>
 8005a40:	0020      	movs	r0, r4
 8005a42:	4b15      	ldr	r3, [pc, #84]	; (8005a98 <__sfp+0x8c>)
 8005a44:	3058      	adds	r0, #88	; 0x58
 8005a46:	60e3      	str	r3, [r4, #12]
 8005a48:	6665      	str	r5, [r4, #100]	; 0x64
 8005a4a:	f000 f857 	bl	8005afc <__retarget_lock_init_recursive>
 8005a4e:	f7ff ff8d 	bl	800596c <__sfp_lock_release>
 8005a52:	0020      	movs	r0, r4
 8005a54:	2208      	movs	r2, #8
 8005a56:	0029      	movs	r1, r5
 8005a58:	6025      	str	r5, [r4, #0]
 8005a5a:	60a5      	str	r5, [r4, #8]
 8005a5c:	6065      	str	r5, [r4, #4]
 8005a5e:	6125      	str	r5, [r4, #16]
 8005a60:	6165      	str	r5, [r4, #20]
 8005a62:	61a5      	str	r5, [r4, #24]
 8005a64:	305c      	adds	r0, #92	; 0x5c
 8005a66:	f7ff fc2f 	bl	80052c8 <memset>
 8005a6a:	6365      	str	r5, [r4, #52]	; 0x34
 8005a6c:	63a5      	str	r5, [r4, #56]	; 0x38
 8005a6e:	64a5      	str	r5, [r4, #72]	; 0x48
 8005a70:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005a72:	0020      	movs	r0, r4
 8005a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a76:	3468      	adds	r4, #104	; 0x68
 8005a78:	e7d7      	b.n	8005a2a <__sfp+0x1e>
 8005a7a:	2104      	movs	r1, #4
 8005a7c:	0038      	movs	r0, r7
 8005a7e:	f7ff ff57 	bl	8005930 <__sfmoreglue>
 8005a82:	1e04      	subs	r4, r0, #0
 8005a84:	6030      	str	r0, [r6, #0]
 8005a86:	d1d5      	bne.n	8005a34 <__sfp+0x28>
 8005a88:	f7ff ff70 	bl	800596c <__sfp_lock_release>
 8005a8c:	230c      	movs	r3, #12
 8005a8e:	603b      	str	r3, [r7, #0]
 8005a90:	e7ef      	b.n	8005a72 <__sfp+0x66>
 8005a92:	46c0      	nop			; (mov r8, r8)
 8005a94:	080096b4 	.word	0x080096b4
 8005a98:	ffff0001 	.word	0xffff0001

08005a9c <fiprintf>:
 8005a9c:	b40e      	push	{r1, r2, r3}
 8005a9e:	b503      	push	{r0, r1, lr}
 8005aa0:	0001      	movs	r1, r0
 8005aa2:	ab03      	add	r3, sp, #12
 8005aa4:	4804      	ldr	r0, [pc, #16]	; (8005ab8 <fiprintf+0x1c>)
 8005aa6:	cb04      	ldmia	r3!, {r2}
 8005aa8:	6800      	ldr	r0, [r0, #0]
 8005aaa:	9301      	str	r3, [sp, #4]
 8005aac:	f000 fad2 	bl	8006054 <_vfiprintf_r>
 8005ab0:	b002      	add	sp, #8
 8005ab2:	bc08      	pop	{r3}
 8005ab4:	b003      	add	sp, #12
 8005ab6:	4718      	bx	r3
 8005ab8:	20000028 	.word	0x20000028

08005abc <_fwalk_reent>:
 8005abc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005abe:	0004      	movs	r4, r0
 8005ac0:	0006      	movs	r6, r0
 8005ac2:	2700      	movs	r7, #0
 8005ac4:	9101      	str	r1, [sp, #4]
 8005ac6:	3448      	adds	r4, #72	; 0x48
 8005ac8:	6863      	ldr	r3, [r4, #4]
 8005aca:	68a5      	ldr	r5, [r4, #8]
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	9b00      	ldr	r3, [sp, #0]
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	9300      	str	r3, [sp, #0]
 8005ad4:	d504      	bpl.n	8005ae0 <_fwalk_reent+0x24>
 8005ad6:	6824      	ldr	r4, [r4, #0]
 8005ad8:	2c00      	cmp	r4, #0
 8005ada:	d1f5      	bne.n	8005ac8 <_fwalk_reent+0xc>
 8005adc:	0038      	movs	r0, r7
 8005ade:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ae0:	89ab      	ldrh	r3, [r5, #12]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d908      	bls.n	8005af8 <_fwalk_reent+0x3c>
 8005ae6:	220e      	movs	r2, #14
 8005ae8:	5eab      	ldrsh	r3, [r5, r2]
 8005aea:	3301      	adds	r3, #1
 8005aec:	d004      	beq.n	8005af8 <_fwalk_reent+0x3c>
 8005aee:	0029      	movs	r1, r5
 8005af0:	0030      	movs	r0, r6
 8005af2:	9b01      	ldr	r3, [sp, #4]
 8005af4:	4798      	blx	r3
 8005af6:	4307      	orrs	r7, r0
 8005af8:	3568      	adds	r5, #104	; 0x68
 8005afa:	e7e8      	b.n	8005ace <_fwalk_reent+0x12>

08005afc <__retarget_lock_init_recursive>:
 8005afc:	4770      	bx	lr

08005afe <__retarget_lock_acquire_recursive>:
 8005afe:	4770      	bx	lr

08005b00 <__retarget_lock_release_recursive>:
 8005b00:	4770      	bx	lr
	...

08005b04 <__swhatbuf_r>:
 8005b04:	b570      	push	{r4, r5, r6, lr}
 8005b06:	000e      	movs	r6, r1
 8005b08:	001d      	movs	r5, r3
 8005b0a:	230e      	movs	r3, #14
 8005b0c:	5ec9      	ldrsh	r1, [r1, r3]
 8005b0e:	0014      	movs	r4, r2
 8005b10:	b096      	sub	sp, #88	; 0x58
 8005b12:	2900      	cmp	r1, #0
 8005b14:	da07      	bge.n	8005b26 <__swhatbuf_r+0x22>
 8005b16:	2300      	movs	r3, #0
 8005b18:	602b      	str	r3, [r5, #0]
 8005b1a:	89b3      	ldrh	r3, [r6, #12]
 8005b1c:	061b      	lsls	r3, r3, #24
 8005b1e:	d411      	bmi.n	8005b44 <__swhatbuf_r+0x40>
 8005b20:	2380      	movs	r3, #128	; 0x80
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	e00f      	b.n	8005b46 <__swhatbuf_r+0x42>
 8005b26:	466a      	mov	r2, sp
 8005b28:	f000 fe26 	bl	8006778 <_fstat_r>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	dbf2      	blt.n	8005b16 <__swhatbuf_r+0x12>
 8005b30:	23f0      	movs	r3, #240	; 0xf0
 8005b32:	9901      	ldr	r1, [sp, #4]
 8005b34:	021b      	lsls	r3, r3, #8
 8005b36:	4019      	ands	r1, r3
 8005b38:	4b05      	ldr	r3, [pc, #20]	; (8005b50 <__swhatbuf_r+0x4c>)
 8005b3a:	18c9      	adds	r1, r1, r3
 8005b3c:	424b      	negs	r3, r1
 8005b3e:	4159      	adcs	r1, r3
 8005b40:	6029      	str	r1, [r5, #0]
 8005b42:	e7ed      	b.n	8005b20 <__swhatbuf_r+0x1c>
 8005b44:	2340      	movs	r3, #64	; 0x40
 8005b46:	2000      	movs	r0, #0
 8005b48:	6023      	str	r3, [r4, #0]
 8005b4a:	b016      	add	sp, #88	; 0x58
 8005b4c:	bd70      	pop	{r4, r5, r6, pc}
 8005b4e:	46c0      	nop			; (mov r8, r8)
 8005b50:	ffffe000 	.word	0xffffe000

08005b54 <__smakebuf_r>:
 8005b54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b56:	2602      	movs	r6, #2
 8005b58:	898b      	ldrh	r3, [r1, #12]
 8005b5a:	0005      	movs	r5, r0
 8005b5c:	000c      	movs	r4, r1
 8005b5e:	4233      	tst	r3, r6
 8005b60:	d006      	beq.n	8005b70 <__smakebuf_r+0x1c>
 8005b62:	0023      	movs	r3, r4
 8005b64:	3347      	adds	r3, #71	; 0x47
 8005b66:	6023      	str	r3, [r4, #0]
 8005b68:	6123      	str	r3, [r4, #16]
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	6163      	str	r3, [r4, #20]
 8005b6e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005b70:	466a      	mov	r2, sp
 8005b72:	ab01      	add	r3, sp, #4
 8005b74:	f7ff ffc6 	bl	8005b04 <__swhatbuf_r>
 8005b78:	9900      	ldr	r1, [sp, #0]
 8005b7a:	0007      	movs	r7, r0
 8005b7c:	0028      	movs	r0, r5
 8005b7e:	f000 f881 	bl	8005c84 <_malloc_r>
 8005b82:	2800      	cmp	r0, #0
 8005b84:	d108      	bne.n	8005b98 <__smakebuf_r+0x44>
 8005b86:	220c      	movs	r2, #12
 8005b88:	5ea3      	ldrsh	r3, [r4, r2]
 8005b8a:	059a      	lsls	r2, r3, #22
 8005b8c:	d4ef      	bmi.n	8005b6e <__smakebuf_r+0x1a>
 8005b8e:	2203      	movs	r2, #3
 8005b90:	4393      	bics	r3, r2
 8005b92:	431e      	orrs	r6, r3
 8005b94:	81a6      	strh	r6, [r4, #12]
 8005b96:	e7e4      	b.n	8005b62 <__smakebuf_r+0xe>
 8005b98:	4b0f      	ldr	r3, [pc, #60]	; (8005bd8 <__smakebuf_r+0x84>)
 8005b9a:	62ab      	str	r3, [r5, #40]	; 0x28
 8005b9c:	2380      	movs	r3, #128	; 0x80
 8005b9e:	89a2      	ldrh	r2, [r4, #12]
 8005ba0:	6020      	str	r0, [r4, #0]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	81a3      	strh	r3, [r4, #12]
 8005ba6:	9b00      	ldr	r3, [sp, #0]
 8005ba8:	6120      	str	r0, [r4, #16]
 8005baa:	6163      	str	r3, [r4, #20]
 8005bac:	9b01      	ldr	r3, [sp, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00d      	beq.n	8005bce <__smakebuf_r+0x7a>
 8005bb2:	0028      	movs	r0, r5
 8005bb4:	230e      	movs	r3, #14
 8005bb6:	5ee1      	ldrsh	r1, [r4, r3]
 8005bb8:	f000 fdf0 	bl	800679c <_isatty_r>
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	d006      	beq.n	8005bce <__smakebuf_r+0x7a>
 8005bc0:	2203      	movs	r2, #3
 8005bc2:	89a3      	ldrh	r3, [r4, #12]
 8005bc4:	4393      	bics	r3, r2
 8005bc6:	001a      	movs	r2, r3
 8005bc8:	2301      	movs	r3, #1
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	81a3      	strh	r3, [r4, #12]
 8005bce:	89a0      	ldrh	r0, [r4, #12]
 8005bd0:	4307      	orrs	r7, r0
 8005bd2:	81a7      	strh	r7, [r4, #12]
 8005bd4:	e7cb      	b.n	8005b6e <__smakebuf_r+0x1a>
 8005bd6:	46c0      	nop			; (mov r8, r8)
 8005bd8:	08005921 	.word	0x08005921

08005bdc <malloc>:
 8005bdc:	b510      	push	{r4, lr}
 8005bde:	4b03      	ldr	r3, [pc, #12]	; (8005bec <malloc+0x10>)
 8005be0:	0001      	movs	r1, r0
 8005be2:	6818      	ldr	r0, [r3, #0]
 8005be4:	f000 f84e 	bl	8005c84 <_malloc_r>
 8005be8:	bd10      	pop	{r4, pc}
 8005bea:	46c0      	nop			; (mov r8, r8)
 8005bec:	20000028 	.word	0x20000028

08005bf0 <_free_r>:
 8005bf0:	b570      	push	{r4, r5, r6, lr}
 8005bf2:	0005      	movs	r5, r0
 8005bf4:	2900      	cmp	r1, #0
 8005bf6:	d010      	beq.n	8005c1a <_free_r+0x2a>
 8005bf8:	1f0c      	subs	r4, r1, #4
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	da00      	bge.n	8005c02 <_free_r+0x12>
 8005c00:	18e4      	adds	r4, r4, r3
 8005c02:	0028      	movs	r0, r5
 8005c04:	f000 fe18 	bl	8006838 <__malloc_lock>
 8005c08:	4a1d      	ldr	r2, [pc, #116]	; (8005c80 <_free_r+0x90>)
 8005c0a:	6813      	ldr	r3, [r2, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d105      	bne.n	8005c1c <_free_r+0x2c>
 8005c10:	6063      	str	r3, [r4, #4]
 8005c12:	6014      	str	r4, [r2, #0]
 8005c14:	0028      	movs	r0, r5
 8005c16:	f000 fe17 	bl	8006848 <__malloc_unlock>
 8005c1a:	bd70      	pop	{r4, r5, r6, pc}
 8005c1c:	42a3      	cmp	r3, r4
 8005c1e:	d908      	bls.n	8005c32 <_free_r+0x42>
 8005c20:	6821      	ldr	r1, [r4, #0]
 8005c22:	1860      	adds	r0, r4, r1
 8005c24:	4283      	cmp	r3, r0
 8005c26:	d1f3      	bne.n	8005c10 <_free_r+0x20>
 8005c28:	6818      	ldr	r0, [r3, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	1841      	adds	r1, r0, r1
 8005c2e:	6021      	str	r1, [r4, #0]
 8005c30:	e7ee      	b.n	8005c10 <_free_r+0x20>
 8005c32:	001a      	movs	r2, r3
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <_free_r+0x4e>
 8005c3a:	42a3      	cmp	r3, r4
 8005c3c:	d9f9      	bls.n	8005c32 <_free_r+0x42>
 8005c3e:	6811      	ldr	r1, [r2, #0]
 8005c40:	1850      	adds	r0, r2, r1
 8005c42:	42a0      	cmp	r0, r4
 8005c44:	d10b      	bne.n	8005c5e <_free_r+0x6e>
 8005c46:	6820      	ldr	r0, [r4, #0]
 8005c48:	1809      	adds	r1, r1, r0
 8005c4a:	1850      	adds	r0, r2, r1
 8005c4c:	6011      	str	r1, [r2, #0]
 8005c4e:	4283      	cmp	r3, r0
 8005c50:	d1e0      	bne.n	8005c14 <_free_r+0x24>
 8005c52:	6818      	ldr	r0, [r3, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	1841      	adds	r1, r0, r1
 8005c58:	6011      	str	r1, [r2, #0]
 8005c5a:	6053      	str	r3, [r2, #4]
 8005c5c:	e7da      	b.n	8005c14 <_free_r+0x24>
 8005c5e:	42a0      	cmp	r0, r4
 8005c60:	d902      	bls.n	8005c68 <_free_r+0x78>
 8005c62:	230c      	movs	r3, #12
 8005c64:	602b      	str	r3, [r5, #0]
 8005c66:	e7d5      	b.n	8005c14 <_free_r+0x24>
 8005c68:	6821      	ldr	r1, [r4, #0]
 8005c6a:	1860      	adds	r0, r4, r1
 8005c6c:	4283      	cmp	r3, r0
 8005c6e:	d103      	bne.n	8005c78 <_free_r+0x88>
 8005c70:	6818      	ldr	r0, [r3, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	1841      	adds	r1, r0, r1
 8005c76:	6021      	str	r1, [r4, #0]
 8005c78:	6063      	str	r3, [r4, #4]
 8005c7a:	6054      	str	r4, [r2, #4]
 8005c7c:	e7ca      	b.n	8005c14 <_free_r+0x24>
 8005c7e:	46c0      	nop			; (mov r8, r8)
 8005c80:	200004fc 	.word	0x200004fc

08005c84 <_malloc_r>:
 8005c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c86:	2303      	movs	r3, #3
 8005c88:	1ccd      	adds	r5, r1, #3
 8005c8a:	439d      	bics	r5, r3
 8005c8c:	3508      	adds	r5, #8
 8005c8e:	0006      	movs	r6, r0
 8005c90:	2d0c      	cmp	r5, #12
 8005c92:	d21f      	bcs.n	8005cd4 <_malloc_r+0x50>
 8005c94:	250c      	movs	r5, #12
 8005c96:	42a9      	cmp	r1, r5
 8005c98:	d81e      	bhi.n	8005cd8 <_malloc_r+0x54>
 8005c9a:	0030      	movs	r0, r6
 8005c9c:	f000 fdcc 	bl	8006838 <__malloc_lock>
 8005ca0:	4925      	ldr	r1, [pc, #148]	; (8005d38 <_malloc_r+0xb4>)
 8005ca2:	680a      	ldr	r2, [r1, #0]
 8005ca4:	0014      	movs	r4, r2
 8005ca6:	2c00      	cmp	r4, #0
 8005ca8:	d11a      	bne.n	8005ce0 <_malloc_r+0x5c>
 8005caa:	4f24      	ldr	r7, [pc, #144]	; (8005d3c <_malloc_r+0xb8>)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d104      	bne.n	8005cbc <_malloc_r+0x38>
 8005cb2:	0021      	movs	r1, r4
 8005cb4:	0030      	movs	r0, r6
 8005cb6:	f000 fcd3 	bl	8006660 <_sbrk_r>
 8005cba:	6038      	str	r0, [r7, #0]
 8005cbc:	0029      	movs	r1, r5
 8005cbe:	0030      	movs	r0, r6
 8005cc0:	f000 fcce 	bl	8006660 <_sbrk_r>
 8005cc4:	1c43      	adds	r3, r0, #1
 8005cc6:	d12b      	bne.n	8005d20 <_malloc_r+0x9c>
 8005cc8:	230c      	movs	r3, #12
 8005cca:	0030      	movs	r0, r6
 8005ccc:	6033      	str	r3, [r6, #0]
 8005cce:	f000 fdbb 	bl	8006848 <__malloc_unlock>
 8005cd2:	e003      	b.n	8005cdc <_malloc_r+0x58>
 8005cd4:	2d00      	cmp	r5, #0
 8005cd6:	dade      	bge.n	8005c96 <_malloc_r+0x12>
 8005cd8:	230c      	movs	r3, #12
 8005cda:	6033      	str	r3, [r6, #0]
 8005cdc:	2000      	movs	r0, #0
 8005cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	1b5b      	subs	r3, r3, r5
 8005ce4:	d419      	bmi.n	8005d1a <_malloc_r+0x96>
 8005ce6:	2b0b      	cmp	r3, #11
 8005ce8:	d903      	bls.n	8005cf2 <_malloc_r+0x6e>
 8005cea:	6023      	str	r3, [r4, #0]
 8005cec:	18e4      	adds	r4, r4, r3
 8005cee:	6025      	str	r5, [r4, #0]
 8005cf0:	e003      	b.n	8005cfa <_malloc_r+0x76>
 8005cf2:	6863      	ldr	r3, [r4, #4]
 8005cf4:	42a2      	cmp	r2, r4
 8005cf6:	d10e      	bne.n	8005d16 <_malloc_r+0x92>
 8005cf8:	600b      	str	r3, [r1, #0]
 8005cfa:	0030      	movs	r0, r6
 8005cfc:	f000 fda4 	bl	8006848 <__malloc_unlock>
 8005d00:	0020      	movs	r0, r4
 8005d02:	2207      	movs	r2, #7
 8005d04:	300b      	adds	r0, #11
 8005d06:	1d23      	adds	r3, r4, #4
 8005d08:	4390      	bics	r0, r2
 8005d0a:	1ac2      	subs	r2, r0, r3
 8005d0c:	4298      	cmp	r0, r3
 8005d0e:	d0e6      	beq.n	8005cde <_malloc_r+0x5a>
 8005d10:	1a1b      	subs	r3, r3, r0
 8005d12:	50a3      	str	r3, [r4, r2]
 8005d14:	e7e3      	b.n	8005cde <_malloc_r+0x5a>
 8005d16:	6053      	str	r3, [r2, #4]
 8005d18:	e7ef      	b.n	8005cfa <_malloc_r+0x76>
 8005d1a:	0022      	movs	r2, r4
 8005d1c:	6864      	ldr	r4, [r4, #4]
 8005d1e:	e7c2      	b.n	8005ca6 <_malloc_r+0x22>
 8005d20:	2303      	movs	r3, #3
 8005d22:	1cc4      	adds	r4, r0, #3
 8005d24:	439c      	bics	r4, r3
 8005d26:	42a0      	cmp	r0, r4
 8005d28:	d0e1      	beq.n	8005cee <_malloc_r+0x6a>
 8005d2a:	1a21      	subs	r1, r4, r0
 8005d2c:	0030      	movs	r0, r6
 8005d2e:	f000 fc97 	bl	8006660 <_sbrk_r>
 8005d32:	1c43      	adds	r3, r0, #1
 8005d34:	d1db      	bne.n	8005cee <_malloc_r+0x6a>
 8005d36:	e7c7      	b.n	8005cc8 <_malloc_r+0x44>
 8005d38:	200004fc 	.word	0x200004fc
 8005d3c:	20000500 	.word	0x20000500

08005d40 <__ssputs_r>:
 8005d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d42:	688e      	ldr	r6, [r1, #8]
 8005d44:	b085      	sub	sp, #20
 8005d46:	0007      	movs	r7, r0
 8005d48:	000c      	movs	r4, r1
 8005d4a:	9203      	str	r2, [sp, #12]
 8005d4c:	9301      	str	r3, [sp, #4]
 8005d4e:	429e      	cmp	r6, r3
 8005d50:	d83c      	bhi.n	8005dcc <__ssputs_r+0x8c>
 8005d52:	2390      	movs	r3, #144	; 0x90
 8005d54:	898a      	ldrh	r2, [r1, #12]
 8005d56:	00db      	lsls	r3, r3, #3
 8005d58:	421a      	tst	r2, r3
 8005d5a:	d034      	beq.n	8005dc6 <__ssputs_r+0x86>
 8005d5c:	2503      	movs	r5, #3
 8005d5e:	6909      	ldr	r1, [r1, #16]
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	1a5b      	subs	r3, r3, r1
 8005d64:	9302      	str	r3, [sp, #8]
 8005d66:	6963      	ldr	r3, [r4, #20]
 8005d68:	9802      	ldr	r0, [sp, #8]
 8005d6a:	435d      	muls	r5, r3
 8005d6c:	0feb      	lsrs	r3, r5, #31
 8005d6e:	195d      	adds	r5, r3, r5
 8005d70:	9b01      	ldr	r3, [sp, #4]
 8005d72:	106d      	asrs	r5, r5, #1
 8005d74:	3301      	adds	r3, #1
 8005d76:	181b      	adds	r3, r3, r0
 8005d78:	42ab      	cmp	r3, r5
 8005d7a:	d900      	bls.n	8005d7e <__ssputs_r+0x3e>
 8005d7c:	001d      	movs	r5, r3
 8005d7e:	0553      	lsls	r3, r2, #21
 8005d80:	d532      	bpl.n	8005de8 <__ssputs_r+0xa8>
 8005d82:	0029      	movs	r1, r5
 8005d84:	0038      	movs	r0, r7
 8005d86:	f7ff ff7d 	bl	8005c84 <_malloc_r>
 8005d8a:	1e06      	subs	r6, r0, #0
 8005d8c:	d109      	bne.n	8005da2 <__ssputs_r+0x62>
 8005d8e:	230c      	movs	r3, #12
 8005d90:	603b      	str	r3, [r7, #0]
 8005d92:	2340      	movs	r3, #64	; 0x40
 8005d94:	2001      	movs	r0, #1
 8005d96:	89a2      	ldrh	r2, [r4, #12]
 8005d98:	4240      	negs	r0, r0
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	81a3      	strh	r3, [r4, #12]
 8005d9e:	b005      	add	sp, #20
 8005da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005da2:	9a02      	ldr	r2, [sp, #8]
 8005da4:	6921      	ldr	r1, [r4, #16]
 8005da6:	f000 fd2a 	bl	80067fe <memcpy>
 8005daa:	89a3      	ldrh	r3, [r4, #12]
 8005dac:	4a14      	ldr	r2, [pc, #80]	; (8005e00 <__ssputs_r+0xc0>)
 8005dae:	401a      	ands	r2, r3
 8005db0:	2380      	movs	r3, #128	; 0x80
 8005db2:	4313      	orrs	r3, r2
 8005db4:	81a3      	strh	r3, [r4, #12]
 8005db6:	9b02      	ldr	r3, [sp, #8]
 8005db8:	6126      	str	r6, [r4, #16]
 8005dba:	18f6      	adds	r6, r6, r3
 8005dbc:	6026      	str	r6, [r4, #0]
 8005dbe:	6165      	str	r5, [r4, #20]
 8005dc0:	9e01      	ldr	r6, [sp, #4]
 8005dc2:	1aed      	subs	r5, r5, r3
 8005dc4:	60a5      	str	r5, [r4, #8]
 8005dc6:	9b01      	ldr	r3, [sp, #4]
 8005dc8:	429e      	cmp	r6, r3
 8005dca:	d900      	bls.n	8005dce <__ssputs_r+0x8e>
 8005dcc:	9e01      	ldr	r6, [sp, #4]
 8005dce:	0032      	movs	r2, r6
 8005dd0:	9903      	ldr	r1, [sp, #12]
 8005dd2:	6820      	ldr	r0, [r4, #0]
 8005dd4:	f000 fd1c 	bl	8006810 <memmove>
 8005dd8:	68a3      	ldr	r3, [r4, #8]
 8005dda:	2000      	movs	r0, #0
 8005ddc:	1b9b      	subs	r3, r3, r6
 8005dde:	60a3      	str	r3, [r4, #8]
 8005de0:	6823      	ldr	r3, [r4, #0]
 8005de2:	199e      	adds	r6, r3, r6
 8005de4:	6026      	str	r6, [r4, #0]
 8005de6:	e7da      	b.n	8005d9e <__ssputs_r+0x5e>
 8005de8:	002a      	movs	r2, r5
 8005dea:	0038      	movs	r0, r7
 8005dec:	f000 fd34 	bl	8006858 <_realloc_r>
 8005df0:	1e06      	subs	r6, r0, #0
 8005df2:	d1e0      	bne.n	8005db6 <__ssputs_r+0x76>
 8005df4:	0038      	movs	r0, r7
 8005df6:	6921      	ldr	r1, [r4, #16]
 8005df8:	f7ff fefa 	bl	8005bf0 <_free_r>
 8005dfc:	e7c7      	b.n	8005d8e <__ssputs_r+0x4e>
 8005dfe:	46c0      	nop			; (mov r8, r8)
 8005e00:	fffffb7f 	.word	0xfffffb7f

08005e04 <_svfiprintf_r>:
 8005e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e06:	b0a1      	sub	sp, #132	; 0x84
 8005e08:	9003      	str	r0, [sp, #12]
 8005e0a:	001d      	movs	r5, r3
 8005e0c:	898b      	ldrh	r3, [r1, #12]
 8005e0e:	000f      	movs	r7, r1
 8005e10:	0016      	movs	r6, r2
 8005e12:	061b      	lsls	r3, r3, #24
 8005e14:	d511      	bpl.n	8005e3a <_svfiprintf_r+0x36>
 8005e16:	690b      	ldr	r3, [r1, #16]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10e      	bne.n	8005e3a <_svfiprintf_r+0x36>
 8005e1c:	2140      	movs	r1, #64	; 0x40
 8005e1e:	f7ff ff31 	bl	8005c84 <_malloc_r>
 8005e22:	6038      	str	r0, [r7, #0]
 8005e24:	6138      	str	r0, [r7, #16]
 8005e26:	2800      	cmp	r0, #0
 8005e28:	d105      	bne.n	8005e36 <_svfiprintf_r+0x32>
 8005e2a:	230c      	movs	r3, #12
 8005e2c:	9a03      	ldr	r2, [sp, #12]
 8005e2e:	3801      	subs	r0, #1
 8005e30:	6013      	str	r3, [r2, #0]
 8005e32:	b021      	add	sp, #132	; 0x84
 8005e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e36:	2340      	movs	r3, #64	; 0x40
 8005e38:	617b      	str	r3, [r7, #20]
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	ac08      	add	r4, sp, #32
 8005e3e:	6163      	str	r3, [r4, #20]
 8005e40:	3320      	adds	r3, #32
 8005e42:	7663      	strb	r3, [r4, #25]
 8005e44:	3310      	adds	r3, #16
 8005e46:	76a3      	strb	r3, [r4, #26]
 8005e48:	9507      	str	r5, [sp, #28]
 8005e4a:	0035      	movs	r5, r6
 8005e4c:	782b      	ldrb	r3, [r5, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <_svfiprintf_r+0x52>
 8005e52:	2b25      	cmp	r3, #37	; 0x25
 8005e54:	d147      	bne.n	8005ee6 <_svfiprintf_r+0xe2>
 8005e56:	1bab      	subs	r3, r5, r6
 8005e58:	9305      	str	r3, [sp, #20]
 8005e5a:	42b5      	cmp	r5, r6
 8005e5c:	d00c      	beq.n	8005e78 <_svfiprintf_r+0x74>
 8005e5e:	0032      	movs	r2, r6
 8005e60:	0039      	movs	r1, r7
 8005e62:	9803      	ldr	r0, [sp, #12]
 8005e64:	f7ff ff6c 	bl	8005d40 <__ssputs_r>
 8005e68:	1c43      	adds	r3, r0, #1
 8005e6a:	d100      	bne.n	8005e6e <_svfiprintf_r+0x6a>
 8005e6c:	e0ae      	b.n	8005fcc <_svfiprintf_r+0x1c8>
 8005e6e:	6962      	ldr	r2, [r4, #20]
 8005e70:	9b05      	ldr	r3, [sp, #20]
 8005e72:	4694      	mov	ip, r2
 8005e74:	4463      	add	r3, ip
 8005e76:	6163      	str	r3, [r4, #20]
 8005e78:	782b      	ldrb	r3, [r5, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d100      	bne.n	8005e80 <_svfiprintf_r+0x7c>
 8005e7e:	e0a5      	b.n	8005fcc <_svfiprintf_r+0x1c8>
 8005e80:	2201      	movs	r2, #1
 8005e82:	2300      	movs	r3, #0
 8005e84:	4252      	negs	r2, r2
 8005e86:	6062      	str	r2, [r4, #4]
 8005e88:	a904      	add	r1, sp, #16
 8005e8a:	3254      	adds	r2, #84	; 0x54
 8005e8c:	1852      	adds	r2, r2, r1
 8005e8e:	1c6e      	adds	r6, r5, #1
 8005e90:	6023      	str	r3, [r4, #0]
 8005e92:	60e3      	str	r3, [r4, #12]
 8005e94:	60a3      	str	r3, [r4, #8]
 8005e96:	7013      	strb	r3, [r2, #0]
 8005e98:	65a3      	str	r3, [r4, #88]	; 0x58
 8005e9a:	2205      	movs	r2, #5
 8005e9c:	7831      	ldrb	r1, [r6, #0]
 8005e9e:	4854      	ldr	r0, [pc, #336]	; (8005ff0 <_svfiprintf_r+0x1ec>)
 8005ea0:	f000 fca2 	bl	80067e8 <memchr>
 8005ea4:	1c75      	adds	r5, r6, #1
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d11f      	bne.n	8005eea <_svfiprintf_r+0xe6>
 8005eaa:	6822      	ldr	r2, [r4, #0]
 8005eac:	06d3      	lsls	r3, r2, #27
 8005eae:	d504      	bpl.n	8005eba <_svfiprintf_r+0xb6>
 8005eb0:	2353      	movs	r3, #83	; 0x53
 8005eb2:	a904      	add	r1, sp, #16
 8005eb4:	185b      	adds	r3, r3, r1
 8005eb6:	2120      	movs	r1, #32
 8005eb8:	7019      	strb	r1, [r3, #0]
 8005eba:	0713      	lsls	r3, r2, #28
 8005ebc:	d504      	bpl.n	8005ec8 <_svfiprintf_r+0xc4>
 8005ebe:	2353      	movs	r3, #83	; 0x53
 8005ec0:	a904      	add	r1, sp, #16
 8005ec2:	185b      	adds	r3, r3, r1
 8005ec4:	212b      	movs	r1, #43	; 0x2b
 8005ec6:	7019      	strb	r1, [r3, #0]
 8005ec8:	7833      	ldrb	r3, [r6, #0]
 8005eca:	2b2a      	cmp	r3, #42	; 0x2a
 8005ecc:	d016      	beq.n	8005efc <_svfiprintf_r+0xf8>
 8005ece:	0035      	movs	r5, r6
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	200a      	movs	r0, #10
 8005ed4:	68e3      	ldr	r3, [r4, #12]
 8005ed6:	782a      	ldrb	r2, [r5, #0]
 8005ed8:	1c6e      	adds	r6, r5, #1
 8005eda:	3a30      	subs	r2, #48	; 0x30
 8005edc:	2a09      	cmp	r2, #9
 8005ede:	d94e      	bls.n	8005f7e <_svfiprintf_r+0x17a>
 8005ee0:	2900      	cmp	r1, #0
 8005ee2:	d111      	bne.n	8005f08 <_svfiprintf_r+0x104>
 8005ee4:	e017      	b.n	8005f16 <_svfiprintf_r+0x112>
 8005ee6:	3501      	adds	r5, #1
 8005ee8:	e7b0      	b.n	8005e4c <_svfiprintf_r+0x48>
 8005eea:	4b41      	ldr	r3, [pc, #260]	; (8005ff0 <_svfiprintf_r+0x1ec>)
 8005eec:	6822      	ldr	r2, [r4, #0]
 8005eee:	1ac0      	subs	r0, r0, r3
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	4083      	lsls	r3, r0
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	002e      	movs	r6, r5
 8005ef8:	6023      	str	r3, [r4, #0]
 8005efa:	e7ce      	b.n	8005e9a <_svfiprintf_r+0x96>
 8005efc:	9b07      	ldr	r3, [sp, #28]
 8005efe:	1d19      	adds	r1, r3, #4
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	9107      	str	r1, [sp, #28]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	db01      	blt.n	8005f0c <_svfiprintf_r+0x108>
 8005f08:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f0a:	e004      	b.n	8005f16 <_svfiprintf_r+0x112>
 8005f0c:	425b      	negs	r3, r3
 8005f0e:	60e3      	str	r3, [r4, #12]
 8005f10:	2302      	movs	r3, #2
 8005f12:	4313      	orrs	r3, r2
 8005f14:	6023      	str	r3, [r4, #0]
 8005f16:	782b      	ldrb	r3, [r5, #0]
 8005f18:	2b2e      	cmp	r3, #46	; 0x2e
 8005f1a:	d10a      	bne.n	8005f32 <_svfiprintf_r+0x12e>
 8005f1c:	786b      	ldrb	r3, [r5, #1]
 8005f1e:	2b2a      	cmp	r3, #42	; 0x2a
 8005f20:	d135      	bne.n	8005f8e <_svfiprintf_r+0x18a>
 8005f22:	9b07      	ldr	r3, [sp, #28]
 8005f24:	3502      	adds	r5, #2
 8005f26:	1d1a      	adds	r2, r3, #4
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	9207      	str	r2, [sp, #28]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	db2b      	blt.n	8005f88 <_svfiprintf_r+0x184>
 8005f30:	9309      	str	r3, [sp, #36]	; 0x24
 8005f32:	4e30      	ldr	r6, [pc, #192]	; (8005ff4 <_svfiprintf_r+0x1f0>)
 8005f34:	2203      	movs	r2, #3
 8005f36:	0030      	movs	r0, r6
 8005f38:	7829      	ldrb	r1, [r5, #0]
 8005f3a:	f000 fc55 	bl	80067e8 <memchr>
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	d006      	beq.n	8005f50 <_svfiprintf_r+0x14c>
 8005f42:	2340      	movs	r3, #64	; 0x40
 8005f44:	1b80      	subs	r0, r0, r6
 8005f46:	4083      	lsls	r3, r0
 8005f48:	6822      	ldr	r2, [r4, #0]
 8005f4a:	3501      	adds	r5, #1
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	6023      	str	r3, [r4, #0]
 8005f50:	7829      	ldrb	r1, [r5, #0]
 8005f52:	2206      	movs	r2, #6
 8005f54:	4828      	ldr	r0, [pc, #160]	; (8005ff8 <_svfiprintf_r+0x1f4>)
 8005f56:	1c6e      	adds	r6, r5, #1
 8005f58:	7621      	strb	r1, [r4, #24]
 8005f5a:	f000 fc45 	bl	80067e8 <memchr>
 8005f5e:	2800      	cmp	r0, #0
 8005f60:	d03c      	beq.n	8005fdc <_svfiprintf_r+0x1d8>
 8005f62:	4b26      	ldr	r3, [pc, #152]	; (8005ffc <_svfiprintf_r+0x1f8>)
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d125      	bne.n	8005fb4 <_svfiprintf_r+0x1b0>
 8005f68:	2207      	movs	r2, #7
 8005f6a:	9b07      	ldr	r3, [sp, #28]
 8005f6c:	3307      	adds	r3, #7
 8005f6e:	4393      	bics	r3, r2
 8005f70:	3308      	adds	r3, #8
 8005f72:	9307      	str	r3, [sp, #28]
 8005f74:	6963      	ldr	r3, [r4, #20]
 8005f76:	9a04      	ldr	r2, [sp, #16]
 8005f78:	189b      	adds	r3, r3, r2
 8005f7a:	6163      	str	r3, [r4, #20]
 8005f7c:	e765      	b.n	8005e4a <_svfiprintf_r+0x46>
 8005f7e:	4343      	muls	r3, r0
 8005f80:	0035      	movs	r5, r6
 8005f82:	2101      	movs	r1, #1
 8005f84:	189b      	adds	r3, r3, r2
 8005f86:	e7a6      	b.n	8005ed6 <_svfiprintf_r+0xd2>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	425b      	negs	r3, r3
 8005f8c:	e7d0      	b.n	8005f30 <_svfiprintf_r+0x12c>
 8005f8e:	2300      	movs	r3, #0
 8005f90:	200a      	movs	r0, #10
 8005f92:	001a      	movs	r2, r3
 8005f94:	3501      	adds	r5, #1
 8005f96:	6063      	str	r3, [r4, #4]
 8005f98:	7829      	ldrb	r1, [r5, #0]
 8005f9a:	1c6e      	adds	r6, r5, #1
 8005f9c:	3930      	subs	r1, #48	; 0x30
 8005f9e:	2909      	cmp	r1, #9
 8005fa0:	d903      	bls.n	8005faa <_svfiprintf_r+0x1a6>
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d0c5      	beq.n	8005f32 <_svfiprintf_r+0x12e>
 8005fa6:	9209      	str	r2, [sp, #36]	; 0x24
 8005fa8:	e7c3      	b.n	8005f32 <_svfiprintf_r+0x12e>
 8005faa:	4342      	muls	r2, r0
 8005fac:	0035      	movs	r5, r6
 8005fae:	2301      	movs	r3, #1
 8005fb0:	1852      	adds	r2, r2, r1
 8005fb2:	e7f1      	b.n	8005f98 <_svfiprintf_r+0x194>
 8005fb4:	ab07      	add	r3, sp, #28
 8005fb6:	9300      	str	r3, [sp, #0]
 8005fb8:	003a      	movs	r2, r7
 8005fba:	0021      	movs	r1, r4
 8005fbc:	4b10      	ldr	r3, [pc, #64]	; (8006000 <_svfiprintf_r+0x1fc>)
 8005fbe:	9803      	ldr	r0, [sp, #12]
 8005fc0:	e000      	b.n	8005fc4 <_svfiprintf_r+0x1c0>
 8005fc2:	bf00      	nop
 8005fc4:	9004      	str	r0, [sp, #16]
 8005fc6:	9b04      	ldr	r3, [sp, #16]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	d1d3      	bne.n	8005f74 <_svfiprintf_r+0x170>
 8005fcc:	89bb      	ldrh	r3, [r7, #12]
 8005fce:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005fd0:	065b      	lsls	r3, r3, #25
 8005fd2:	d400      	bmi.n	8005fd6 <_svfiprintf_r+0x1d2>
 8005fd4:	e72d      	b.n	8005e32 <_svfiprintf_r+0x2e>
 8005fd6:	2001      	movs	r0, #1
 8005fd8:	4240      	negs	r0, r0
 8005fda:	e72a      	b.n	8005e32 <_svfiprintf_r+0x2e>
 8005fdc:	ab07      	add	r3, sp, #28
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	003a      	movs	r2, r7
 8005fe2:	0021      	movs	r1, r4
 8005fe4:	4b06      	ldr	r3, [pc, #24]	; (8006000 <_svfiprintf_r+0x1fc>)
 8005fe6:	9803      	ldr	r0, [sp, #12]
 8005fe8:	f000 f9de 	bl	80063a8 <_printf_i>
 8005fec:	e7ea      	b.n	8005fc4 <_svfiprintf_r+0x1c0>
 8005fee:	46c0      	nop			; (mov r8, r8)
 8005ff0:	080098d0 	.word	0x080098d0
 8005ff4:	080098d6 	.word	0x080098d6
 8005ff8:	080098da 	.word	0x080098da
 8005ffc:	00000000 	.word	0x00000000
 8006000:	08005d41 	.word	0x08005d41

08006004 <__sfputc_r>:
 8006004:	6893      	ldr	r3, [r2, #8]
 8006006:	b510      	push	{r4, lr}
 8006008:	3b01      	subs	r3, #1
 800600a:	6093      	str	r3, [r2, #8]
 800600c:	2b00      	cmp	r3, #0
 800600e:	da04      	bge.n	800601a <__sfputc_r+0x16>
 8006010:	6994      	ldr	r4, [r2, #24]
 8006012:	42a3      	cmp	r3, r4
 8006014:	db07      	blt.n	8006026 <__sfputc_r+0x22>
 8006016:	290a      	cmp	r1, #10
 8006018:	d005      	beq.n	8006026 <__sfputc_r+0x22>
 800601a:	6813      	ldr	r3, [r2, #0]
 800601c:	1c58      	adds	r0, r3, #1
 800601e:	6010      	str	r0, [r2, #0]
 8006020:	7019      	strb	r1, [r3, #0]
 8006022:	0008      	movs	r0, r1
 8006024:	bd10      	pop	{r4, pc}
 8006026:	f7ff fa9f 	bl	8005568 <__swbuf_r>
 800602a:	0001      	movs	r1, r0
 800602c:	e7f9      	b.n	8006022 <__sfputc_r+0x1e>

0800602e <__sfputs_r>:
 800602e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006030:	0006      	movs	r6, r0
 8006032:	000f      	movs	r7, r1
 8006034:	0014      	movs	r4, r2
 8006036:	18d5      	adds	r5, r2, r3
 8006038:	42ac      	cmp	r4, r5
 800603a:	d101      	bne.n	8006040 <__sfputs_r+0x12>
 800603c:	2000      	movs	r0, #0
 800603e:	e007      	b.n	8006050 <__sfputs_r+0x22>
 8006040:	7821      	ldrb	r1, [r4, #0]
 8006042:	003a      	movs	r2, r7
 8006044:	0030      	movs	r0, r6
 8006046:	f7ff ffdd 	bl	8006004 <__sfputc_r>
 800604a:	3401      	adds	r4, #1
 800604c:	1c43      	adds	r3, r0, #1
 800604e:	d1f3      	bne.n	8006038 <__sfputs_r+0xa>
 8006050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006054 <_vfiprintf_r>:
 8006054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006056:	b0a1      	sub	sp, #132	; 0x84
 8006058:	0006      	movs	r6, r0
 800605a:	000c      	movs	r4, r1
 800605c:	001f      	movs	r7, r3
 800605e:	9203      	str	r2, [sp, #12]
 8006060:	2800      	cmp	r0, #0
 8006062:	d004      	beq.n	800606e <_vfiprintf_r+0x1a>
 8006064:	6983      	ldr	r3, [r0, #24]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <_vfiprintf_r+0x1a>
 800606a:	f7ff fc97 	bl	800599c <__sinit>
 800606e:	4b8e      	ldr	r3, [pc, #568]	; (80062a8 <_vfiprintf_r+0x254>)
 8006070:	429c      	cmp	r4, r3
 8006072:	d11c      	bne.n	80060ae <_vfiprintf_r+0x5a>
 8006074:	6874      	ldr	r4, [r6, #4]
 8006076:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006078:	07db      	lsls	r3, r3, #31
 800607a:	d405      	bmi.n	8006088 <_vfiprintf_r+0x34>
 800607c:	89a3      	ldrh	r3, [r4, #12]
 800607e:	059b      	lsls	r3, r3, #22
 8006080:	d402      	bmi.n	8006088 <_vfiprintf_r+0x34>
 8006082:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006084:	f7ff fd3b 	bl	8005afe <__retarget_lock_acquire_recursive>
 8006088:	89a3      	ldrh	r3, [r4, #12]
 800608a:	071b      	lsls	r3, r3, #28
 800608c:	d502      	bpl.n	8006094 <_vfiprintf_r+0x40>
 800608e:	6923      	ldr	r3, [r4, #16]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d11d      	bne.n	80060d0 <_vfiprintf_r+0x7c>
 8006094:	0021      	movs	r1, r4
 8006096:	0030      	movs	r0, r6
 8006098:	f7ff fabc 	bl	8005614 <__swsetup_r>
 800609c:	2800      	cmp	r0, #0
 800609e:	d017      	beq.n	80060d0 <_vfiprintf_r+0x7c>
 80060a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060a2:	07db      	lsls	r3, r3, #31
 80060a4:	d50d      	bpl.n	80060c2 <_vfiprintf_r+0x6e>
 80060a6:	2001      	movs	r0, #1
 80060a8:	4240      	negs	r0, r0
 80060aa:	b021      	add	sp, #132	; 0x84
 80060ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060ae:	4b7f      	ldr	r3, [pc, #508]	; (80062ac <_vfiprintf_r+0x258>)
 80060b0:	429c      	cmp	r4, r3
 80060b2:	d101      	bne.n	80060b8 <_vfiprintf_r+0x64>
 80060b4:	68b4      	ldr	r4, [r6, #8]
 80060b6:	e7de      	b.n	8006076 <_vfiprintf_r+0x22>
 80060b8:	4b7d      	ldr	r3, [pc, #500]	; (80062b0 <_vfiprintf_r+0x25c>)
 80060ba:	429c      	cmp	r4, r3
 80060bc:	d1db      	bne.n	8006076 <_vfiprintf_r+0x22>
 80060be:	68f4      	ldr	r4, [r6, #12]
 80060c0:	e7d9      	b.n	8006076 <_vfiprintf_r+0x22>
 80060c2:	89a3      	ldrh	r3, [r4, #12]
 80060c4:	059b      	lsls	r3, r3, #22
 80060c6:	d4ee      	bmi.n	80060a6 <_vfiprintf_r+0x52>
 80060c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060ca:	f7ff fd19 	bl	8005b00 <__retarget_lock_release_recursive>
 80060ce:	e7ea      	b.n	80060a6 <_vfiprintf_r+0x52>
 80060d0:	2300      	movs	r3, #0
 80060d2:	ad08      	add	r5, sp, #32
 80060d4:	616b      	str	r3, [r5, #20]
 80060d6:	3320      	adds	r3, #32
 80060d8:	766b      	strb	r3, [r5, #25]
 80060da:	3310      	adds	r3, #16
 80060dc:	76ab      	strb	r3, [r5, #26]
 80060de:	9707      	str	r7, [sp, #28]
 80060e0:	9f03      	ldr	r7, [sp, #12]
 80060e2:	783b      	ldrb	r3, [r7, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <_vfiprintf_r+0x98>
 80060e8:	2b25      	cmp	r3, #37	; 0x25
 80060ea:	d14e      	bne.n	800618a <_vfiprintf_r+0x136>
 80060ec:	9b03      	ldr	r3, [sp, #12]
 80060ee:	1afb      	subs	r3, r7, r3
 80060f0:	9305      	str	r3, [sp, #20]
 80060f2:	9b03      	ldr	r3, [sp, #12]
 80060f4:	429f      	cmp	r7, r3
 80060f6:	d00d      	beq.n	8006114 <_vfiprintf_r+0xc0>
 80060f8:	9b05      	ldr	r3, [sp, #20]
 80060fa:	0021      	movs	r1, r4
 80060fc:	0030      	movs	r0, r6
 80060fe:	9a03      	ldr	r2, [sp, #12]
 8006100:	f7ff ff95 	bl	800602e <__sfputs_r>
 8006104:	1c43      	adds	r3, r0, #1
 8006106:	d100      	bne.n	800610a <_vfiprintf_r+0xb6>
 8006108:	e0b5      	b.n	8006276 <_vfiprintf_r+0x222>
 800610a:	696a      	ldr	r2, [r5, #20]
 800610c:	9b05      	ldr	r3, [sp, #20]
 800610e:	4694      	mov	ip, r2
 8006110:	4463      	add	r3, ip
 8006112:	616b      	str	r3, [r5, #20]
 8006114:	783b      	ldrb	r3, [r7, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d100      	bne.n	800611c <_vfiprintf_r+0xc8>
 800611a:	e0ac      	b.n	8006276 <_vfiprintf_r+0x222>
 800611c:	2201      	movs	r2, #1
 800611e:	1c7b      	adds	r3, r7, #1
 8006120:	9303      	str	r3, [sp, #12]
 8006122:	2300      	movs	r3, #0
 8006124:	4252      	negs	r2, r2
 8006126:	606a      	str	r2, [r5, #4]
 8006128:	a904      	add	r1, sp, #16
 800612a:	3254      	adds	r2, #84	; 0x54
 800612c:	1852      	adds	r2, r2, r1
 800612e:	602b      	str	r3, [r5, #0]
 8006130:	60eb      	str	r3, [r5, #12]
 8006132:	60ab      	str	r3, [r5, #8]
 8006134:	7013      	strb	r3, [r2, #0]
 8006136:	65ab      	str	r3, [r5, #88]	; 0x58
 8006138:	9b03      	ldr	r3, [sp, #12]
 800613a:	2205      	movs	r2, #5
 800613c:	7819      	ldrb	r1, [r3, #0]
 800613e:	485d      	ldr	r0, [pc, #372]	; (80062b4 <_vfiprintf_r+0x260>)
 8006140:	f000 fb52 	bl	80067e8 <memchr>
 8006144:	9b03      	ldr	r3, [sp, #12]
 8006146:	1c5f      	adds	r7, r3, #1
 8006148:	2800      	cmp	r0, #0
 800614a:	d120      	bne.n	800618e <_vfiprintf_r+0x13a>
 800614c:	682a      	ldr	r2, [r5, #0]
 800614e:	06d3      	lsls	r3, r2, #27
 8006150:	d504      	bpl.n	800615c <_vfiprintf_r+0x108>
 8006152:	2353      	movs	r3, #83	; 0x53
 8006154:	a904      	add	r1, sp, #16
 8006156:	185b      	adds	r3, r3, r1
 8006158:	2120      	movs	r1, #32
 800615a:	7019      	strb	r1, [r3, #0]
 800615c:	0713      	lsls	r3, r2, #28
 800615e:	d504      	bpl.n	800616a <_vfiprintf_r+0x116>
 8006160:	2353      	movs	r3, #83	; 0x53
 8006162:	a904      	add	r1, sp, #16
 8006164:	185b      	adds	r3, r3, r1
 8006166:	212b      	movs	r1, #43	; 0x2b
 8006168:	7019      	strb	r1, [r3, #0]
 800616a:	9b03      	ldr	r3, [sp, #12]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	2b2a      	cmp	r3, #42	; 0x2a
 8006170:	d016      	beq.n	80061a0 <_vfiprintf_r+0x14c>
 8006172:	2100      	movs	r1, #0
 8006174:	68eb      	ldr	r3, [r5, #12]
 8006176:	9f03      	ldr	r7, [sp, #12]
 8006178:	783a      	ldrb	r2, [r7, #0]
 800617a:	1c78      	adds	r0, r7, #1
 800617c:	3a30      	subs	r2, #48	; 0x30
 800617e:	4684      	mov	ip, r0
 8006180:	2a09      	cmp	r2, #9
 8006182:	d94f      	bls.n	8006224 <_vfiprintf_r+0x1d0>
 8006184:	2900      	cmp	r1, #0
 8006186:	d111      	bne.n	80061ac <_vfiprintf_r+0x158>
 8006188:	e017      	b.n	80061ba <_vfiprintf_r+0x166>
 800618a:	3701      	adds	r7, #1
 800618c:	e7a9      	b.n	80060e2 <_vfiprintf_r+0x8e>
 800618e:	4b49      	ldr	r3, [pc, #292]	; (80062b4 <_vfiprintf_r+0x260>)
 8006190:	682a      	ldr	r2, [r5, #0]
 8006192:	1ac0      	subs	r0, r0, r3
 8006194:	2301      	movs	r3, #1
 8006196:	4083      	lsls	r3, r0
 8006198:	4313      	orrs	r3, r2
 800619a:	602b      	str	r3, [r5, #0]
 800619c:	9703      	str	r7, [sp, #12]
 800619e:	e7cb      	b.n	8006138 <_vfiprintf_r+0xe4>
 80061a0:	9b07      	ldr	r3, [sp, #28]
 80061a2:	1d19      	adds	r1, r3, #4
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	9107      	str	r1, [sp, #28]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	db01      	blt.n	80061b0 <_vfiprintf_r+0x15c>
 80061ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80061ae:	e004      	b.n	80061ba <_vfiprintf_r+0x166>
 80061b0:	425b      	negs	r3, r3
 80061b2:	60eb      	str	r3, [r5, #12]
 80061b4:	2302      	movs	r3, #2
 80061b6:	4313      	orrs	r3, r2
 80061b8:	602b      	str	r3, [r5, #0]
 80061ba:	783b      	ldrb	r3, [r7, #0]
 80061bc:	2b2e      	cmp	r3, #46	; 0x2e
 80061be:	d10a      	bne.n	80061d6 <_vfiprintf_r+0x182>
 80061c0:	787b      	ldrb	r3, [r7, #1]
 80061c2:	2b2a      	cmp	r3, #42	; 0x2a
 80061c4:	d137      	bne.n	8006236 <_vfiprintf_r+0x1e2>
 80061c6:	9b07      	ldr	r3, [sp, #28]
 80061c8:	3702      	adds	r7, #2
 80061ca:	1d1a      	adds	r2, r3, #4
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	9207      	str	r2, [sp, #28]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	db2d      	blt.n	8006230 <_vfiprintf_r+0x1dc>
 80061d4:	9309      	str	r3, [sp, #36]	; 0x24
 80061d6:	2203      	movs	r2, #3
 80061d8:	7839      	ldrb	r1, [r7, #0]
 80061da:	4837      	ldr	r0, [pc, #220]	; (80062b8 <_vfiprintf_r+0x264>)
 80061dc:	f000 fb04 	bl	80067e8 <memchr>
 80061e0:	2800      	cmp	r0, #0
 80061e2:	d007      	beq.n	80061f4 <_vfiprintf_r+0x1a0>
 80061e4:	4b34      	ldr	r3, [pc, #208]	; (80062b8 <_vfiprintf_r+0x264>)
 80061e6:	682a      	ldr	r2, [r5, #0]
 80061e8:	1ac0      	subs	r0, r0, r3
 80061ea:	2340      	movs	r3, #64	; 0x40
 80061ec:	4083      	lsls	r3, r0
 80061ee:	4313      	orrs	r3, r2
 80061f0:	3701      	adds	r7, #1
 80061f2:	602b      	str	r3, [r5, #0]
 80061f4:	7839      	ldrb	r1, [r7, #0]
 80061f6:	1c7b      	adds	r3, r7, #1
 80061f8:	2206      	movs	r2, #6
 80061fa:	4830      	ldr	r0, [pc, #192]	; (80062bc <_vfiprintf_r+0x268>)
 80061fc:	9303      	str	r3, [sp, #12]
 80061fe:	7629      	strb	r1, [r5, #24]
 8006200:	f000 faf2 	bl	80067e8 <memchr>
 8006204:	2800      	cmp	r0, #0
 8006206:	d045      	beq.n	8006294 <_vfiprintf_r+0x240>
 8006208:	4b2d      	ldr	r3, [pc, #180]	; (80062c0 <_vfiprintf_r+0x26c>)
 800620a:	2b00      	cmp	r3, #0
 800620c:	d127      	bne.n	800625e <_vfiprintf_r+0x20a>
 800620e:	2207      	movs	r2, #7
 8006210:	9b07      	ldr	r3, [sp, #28]
 8006212:	3307      	adds	r3, #7
 8006214:	4393      	bics	r3, r2
 8006216:	3308      	adds	r3, #8
 8006218:	9307      	str	r3, [sp, #28]
 800621a:	696b      	ldr	r3, [r5, #20]
 800621c:	9a04      	ldr	r2, [sp, #16]
 800621e:	189b      	adds	r3, r3, r2
 8006220:	616b      	str	r3, [r5, #20]
 8006222:	e75d      	b.n	80060e0 <_vfiprintf_r+0x8c>
 8006224:	210a      	movs	r1, #10
 8006226:	434b      	muls	r3, r1
 8006228:	4667      	mov	r7, ip
 800622a:	189b      	adds	r3, r3, r2
 800622c:	3909      	subs	r1, #9
 800622e:	e7a3      	b.n	8006178 <_vfiprintf_r+0x124>
 8006230:	2301      	movs	r3, #1
 8006232:	425b      	negs	r3, r3
 8006234:	e7ce      	b.n	80061d4 <_vfiprintf_r+0x180>
 8006236:	2300      	movs	r3, #0
 8006238:	001a      	movs	r2, r3
 800623a:	3701      	adds	r7, #1
 800623c:	606b      	str	r3, [r5, #4]
 800623e:	7839      	ldrb	r1, [r7, #0]
 8006240:	1c78      	adds	r0, r7, #1
 8006242:	3930      	subs	r1, #48	; 0x30
 8006244:	4684      	mov	ip, r0
 8006246:	2909      	cmp	r1, #9
 8006248:	d903      	bls.n	8006252 <_vfiprintf_r+0x1fe>
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0c3      	beq.n	80061d6 <_vfiprintf_r+0x182>
 800624e:	9209      	str	r2, [sp, #36]	; 0x24
 8006250:	e7c1      	b.n	80061d6 <_vfiprintf_r+0x182>
 8006252:	230a      	movs	r3, #10
 8006254:	435a      	muls	r2, r3
 8006256:	4667      	mov	r7, ip
 8006258:	1852      	adds	r2, r2, r1
 800625a:	3b09      	subs	r3, #9
 800625c:	e7ef      	b.n	800623e <_vfiprintf_r+0x1ea>
 800625e:	ab07      	add	r3, sp, #28
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	0022      	movs	r2, r4
 8006264:	0029      	movs	r1, r5
 8006266:	0030      	movs	r0, r6
 8006268:	4b16      	ldr	r3, [pc, #88]	; (80062c4 <_vfiprintf_r+0x270>)
 800626a:	e000      	b.n	800626e <_vfiprintf_r+0x21a>
 800626c:	bf00      	nop
 800626e:	9004      	str	r0, [sp, #16]
 8006270:	9b04      	ldr	r3, [sp, #16]
 8006272:	3301      	adds	r3, #1
 8006274:	d1d1      	bne.n	800621a <_vfiprintf_r+0x1c6>
 8006276:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006278:	07db      	lsls	r3, r3, #31
 800627a:	d405      	bmi.n	8006288 <_vfiprintf_r+0x234>
 800627c:	89a3      	ldrh	r3, [r4, #12]
 800627e:	059b      	lsls	r3, r3, #22
 8006280:	d402      	bmi.n	8006288 <_vfiprintf_r+0x234>
 8006282:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006284:	f7ff fc3c 	bl	8005b00 <__retarget_lock_release_recursive>
 8006288:	89a3      	ldrh	r3, [r4, #12]
 800628a:	065b      	lsls	r3, r3, #25
 800628c:	d500      	bpl.n	8006290 <_vfiprintf_r+0x23c>
 800628e:	e70a      	b.n	80060a6 <_vfiprintf_r+0x52>
 8006290:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006292:	e70a      	b.n	80060aa <_vfiprintf_r+0x56>
 8006294:	ab07      	add	r3, sp, #28
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	0022      	movs	r2, r4
 800629a:	0029      	movs	r1, r5
 800629c:	0030      	movs	r0, r6
 800629e:	4b09      	ldr	r3, [pc, #36]	; (80062c4 <_vfiprintf_r+0x270>)
 80062a0:	f000 f882 	bl	80063a8 <_printf_i>
 80062a4:	e7e3      	b.n	800626e <_vfiprintf_r+0x21a>
 80062a6:	46c0      	nop			; (mov r8, r8)
 80062a8:	08009890 	.word	0x08009890
 80062ac:	080098b0 	.word	0x080098b0
 80062b0:	08009870 	.word	0x08009870
 80062b4:	080098d0 	.word	0x080098d0
 80062b8:	080098d6 	.word	0x080098d6
 80062bc:	080098da 	.word	0x080098da
 80062c0:	00000000 	.word	0x00000000
 80062c4:	0800602f 	.word	0x0800602f

080062c8 <_printf_common>:
 80062c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062ca:	0015      	movs	r5, r2
 80062cc:	9301      	str	r3, [sp, #4]
 80062ce:	688a      	ldr	r2, [r1, #8]
 80062d0:	690b      	ldr	r3, [r1, #16]
 80062d2:	000c      	movs	r4, r1
 80062d4:	9000      	str	r0, [sp, #0]
 80062d6:	4293      	cmp	r3, r2
 80062d8:	da00      	bge.n	80062dc <_printf_common+0x14>
 80062da:	0013      	movs	r3, r2
 80062dc:	0022      	movs	r2, r4
 80062de:	602b      	str	r3, [r5, #0]
 80062e0:	3243      	adds	r2, #67	; 0x43
 80062e2:	7812      	ldrb	r2, [r2, #0]
 80062e4:	2a00      	cmp	r2, #0
 80062e6:	d001      	beq.n	80062ec <_printf_common+0x24>
 80062e8:	3301      	adds	r3, #1
 80062ea:	602b      	str	r3, [r5, #0]
 80062ec:	6823      	ldr	r3, [r4, #0]
 80062ee:	069b      	lsls	r3, r3, #26
 80062f0:	d502      	bpl.n	80062f8 <_printf_common+0x30>
 80062f2:	682b      	ldr	r3, [r5, #0]
 80062f4:	3302      	adds	r3, #2
 80062f6:	602b      	str	r3, [r5, #0]
 80062f8:	6822      	ldr	r2, [r4, #0]
 80062fa:	2306      	movs	r3, #6
 80062fc:	0017      	movs	r7, r2
 80062fe:	401f      	ands	r7, r3
 8006300:	421a      	tst	r2, r3
 8006302:	d027      	beq.n	8006354 <_printf_common+0x8c>
 8006304:	0023      	movs	r3, r4
 8006306:	3343      	adds	r3, #67	; 0x43
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	1e5a      	subs	r2, r3, #1
 800630c:	4193      	sbcs	r3, r2
 800630e:	6822      	ldr	r2, [r4, #0]
 8006310:	0692      	lsls	r2, r2, #26
 8006312:	d430      	bmi.n	8006376 <_printf_common+0xae>
 8006314:	0022      	movs	r2, r4
 8006316:	9901      	ldr	r1, [sp, #4]
 8006318:	9800      	ldr	r0, [sp, #0]
 800631a:	9e08      	ldr	r6, [sp, #32]
 800631c:	3243      	adds	r2, #67	; 0x43
 800631e:	47b0      	blx	r6
 8006320:	1c43      	adds	r3, r0, #1
 8006322:	d025      	beq.n	8006370 <_printf_common+0xa8>
 8006324:	2306      	movs	r3, #6
 8006326:	6820      	ldr	r0, [r4, #0]
 8006328:	682a      	ldr	r2, [r5, #0]
 800632a:	68e1      	ldr	r1, [r4, #12]
 800632c:	2500      	movs	r5, #0
 800632e:	4003      	ands	r3, r0
 8006330:	2b04      	cmp	r3, #4
 8006332:	d103      	bne.n	800633c <_printf_common+0x74>
 8006334:	1a8d      	subs	r5, r1, r2
 8006336:	43eb      	mvns	r3, r5
 8006338:	17db      	asrs	r3, r3, #31
 800633a:	401d      	ands	r5, r3
 800633c:	68a3      	ldr	r3, [r4, #8]
 800633e:	6922      	ldr	r2, [r4, #16]
 8006340:	4293      	cmp	r3, r2
 8006342:	dd01      	ble.n	8006348 <_printf_common+0x80>
 8006344:	1a9b      	subs	r3, r3, r2
 8006346:	18ed      	adds	r5, r5, r3
 8006348:	2700      	movs	r7, #0
 800634a:	42bd      	cmp	r5, r7
 800634c:	d120      	bne.n	8006390 <_printf_common+0xc8>
 800634e:	2000      	movs	r0, #0
 8006350:	e010      	b.n	8006374 <_printf_common+0xac>
 8006352:	3701      	adds	r7, #1
 8006354:	68e3      	ldr	r3, [r4, #12]
 8006356:	682a      	ldr	r2, [r5, #0]
 8006358:	1a9b      	subs	r3, r3, r2
 800635a:	42bb      	cmp	r3, r7
 800635c:	ddd2      	ble.n	8006304 <_printf_common+0x3c>
 800635e:	0022      	movs	r2, r4
 8006360:	2301      	movs	r3, #1
 8006362:	9901      	ldr	r1, [sp, #4]
 8006364:	9800      	ldr	r0, [sp, #0]
 8006366:	9e08      	ldr	r6, [sp, #32]
 8006368:	3219      	adds	r2, #25
 800636a:	47b0      	blx	r6
 800636c:	1c43      	adds	r3, r0, #1
 800636e:	d1f0      	bne.n	8006352 <_printf_common+0x8a>
 8006370:	2001      	movs	r0, #1
 8006372:	4240      	negs	r0, r0
 8006374:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006376:	2030      	movs	r0, #48	; 0x30
 8006378:	18e1      	adds	r1, r4, r3
 800637a:	3143      	adds	r1, #67	; 0x43
 800637c:	7008      	strb	r0, [r1, #0]
 800637e:	0021      	movs	r1, r4
 8006380:	1c5a      	adds	r2, r3, #1
 8006382:	3145      	adds	r1, #69	; 0x45
 8006384:	7809      	ldrb	r1, [r1, #0]
 8006386:	18a2      	adds	r2, r4, r2
 8006388:	3243      	adds	r2, #67	; 0x43
 800638a:	3302      	adds	r3, #2
 800638c:	7011      	strb	r1, [r2, #0]
 800638e:	e7c1      	b.n	8006314 <_printf_common+0x4c>
 8006390:	0022      	movs	r2, r4
 8006392:	2301      	movs	r3, #1
 8006394:	9901      	ldr	r1, [sp, #4]
 8006396:	9800      	ldr	r0, [sp, #0]
 8006398:	9e08      	ldr	r6, [sp, #32]
 800639a:	321a      	adds	r2, #26
 800639c:	47b0      	blx	r6
 800639e:	1c43      	adds	r3, r0, #1
 80063a0:	d0e6      	beq.n	8006370 <_printf_common+0xa8>
 80063a2:	3701      	adds	r7, #1
 80063a4:	e7d1      	b.n	800634a <_printf_common+0x82>
	...

080063a8 <_printf_i>:
 80063a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063aa:	b08b      	sub	sp, #44	; 0x2c
 80063ac:	9206      	str	r2, [sp, #24]
 80063ae:	000a      	movs	r2, r1
 80063b0:	3243      	adds	r2, #67	; 0x43
 80063b2:	9307      	str	r3, [sp, #28]
 80063b4:	9005      	str	r0, [sp, #20]
 80063b6:	9204      	str	r2, [sp, #16]
 80063b8:	7e0a      	ldrb	r2, [r1, #24]
 80063ba:	000c      	movs	r4, r1
 80063bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80063be:	2a78      	cmp	r2, #120	; 0x78
 80063c0:	d806      	bhi.n	80063d0 <_printf_i+0x28>
 80063c2:	2a62      	cmp	r2, #98	; 0x62
 80063c4:	d808      	bhi.n	80063d8 <_printf_i+0x30>
 80063c6:	2a00      	cmp	r2, #0
 80063c8:	d100      	bne.n	80063cc <_printf_i+0x24>
 80063ca:	e0c0      	b.n	800654e <_printf_i+0x1a6>
 80063cc:	2a58      	cmp	r2, #88	; 0x58
 80063ce:	d052      	beq.n	8006476 <_printf_i+0xce>
 80063d0:	0026      	movs	r6, r4
 80063d2:	3642      	adds	r6, #66	; 0x42
 80063d4:	7032      	strb	r2, [r6, #0]
 80063d6:	e022      	b.n	800641e <_printf_i+0x76>
 80063d8:	0010      	movs	r0, r2
 80063da:	3863      	subs	r0, #99	; 0x63
 80063dc:	2815      	cmp	r0, #21
 80063de:	d8f7      	bhi.n	80063d0 <_printf_i+0x28>
 80063e0:	f7f9 fe9a 	bl	8000118 <__gnu_thumb1_case_shi>
 80063e4:	001f0016 	.word	0x001f0016
 80063e8:	fff6fff6 	.word	0xfff6fff6
 80063ec:	fff6fff6 	.word	0xfff6fff6
 80063f0:	fff6001f 	.word	0xfff6001f
 80063f4:	fff6fff6 	.word	0xfff6fff6
 80063f8:	00a8fff6 	.word	0x00a8fff6
 80063fc:	009a0036 	.word	0x009a0036
 8006400:	fff6fff6 	.word	0xfff6fff6
 8006404:	fff600b9 	.word	0xfff600b9
 8006408:	fff60036 	.word	0xfff60036
 800640c:	009efff6 	.word	0x009efff6
 8006410:	0026      	movs	r6, r4
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	3642      	adds	r6, #66	; 0x42
 8006416:	1d11      	adds	r1, r2, #4
 8006418:	6019      	str	r1, [r3, #0]
 800641a:	6813      	ldr	r3, [r2, #0]
 800641c:	7033      	strb	r3, [r6, #0]
 800641e:	2301      	movs	r3, #1
 8006420:	e0a7      	b.n	8006572 <_printf_i+0x1ca>
 8006422:	6808      	ldr	r0, [r1, #0]
 8006424:	6819      	ldr	r1, [r3, #0]
 8006426:	1d0a      	adds	r2, r1, #4
 8006428:	0605      	lsls	r5, r0, #24
 800642a:	d50b      	bpl.n	8006444 <_printf_i+0x9c>
 800642c:	680d      	ldr	r5, [r1, #0]
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	2d00      	cmp	r5, #0
 8006432:	da03      	bge.n	800643c <_printf_i+0x94>
 8006434:	232d      	movs	r3, #45	; 0x2d
 8006436:	9a04      	ldr	r2, [sp, #16]
 8006438:	426d      	negs	r5, r5
 800643a:	7013      	strb	r3, [r2, #0]
 800643c:	4b61      	ldr	r3, [pc, #388]	; (80065c4 <_printf_i+0x21c>)
 800643e:	270a      	movs	r7, #10
 8006440:	9303      	str	r3, [sp, #12]
 8006442:	e032      	b.n	80064aa <_printf_i+0x102>
 8006444:	680d      	ldr	r5, [r1, #0]
 8006446:	601a      	str	r2, [r3, #0]
 8006448:	0641      	lsls	r1, r0, #25
 800644a:	d5f1      	bpl.n	8006430 <_printf_i+0x88>
 800644c:	b22d      	sxth	r5, r5
 800644e:	e7ef      	b.n	8006430 <_printf_i+0x88>
 8006450:	680d      	ldr	r5, [r1, #0]
 8006452:	6819      	ldr	r1, [r3, #0]
 8006454:	1d08      	adds	r0, r1, #4
 8006456:	6018      	str	r0, [r3, #0]
 8006458:	062e      	lsls	r6, r5, #24
 800645a:	d501      	bpl.n	8006460 <_printf_i+0xb8>
 800645c:	680d      	ldr	r5, [r1, #0]
 800645e:	e003      	b.n	8006468 <_printf_i+0xc0>
 8006460:	066d      	lsls	r5, r5, #25
 8006462:	d5fb      	bpl.n	800645c <_printf_i+0xb4>
 8006464:	680d      	ldr	r5, [r1, #0]
 8006466:	b2ad      	uxth	r5, r5
 8006468:	4b56      	ldr	r3, [pc, #344]	; (80065c4 <_printf_i+0x21c>)
 800646a:	270a      	movs	r7, #10
 800646c:	9303      	str	r3, [sp, #12]
 800646e:	2a6f      	cmp	r2, #111	; 0x6f
 8006470:	d117      	bne.n	80064a2 <_printf_i+0xfa>
 8006472:	2708      	movs	r7, #8
 8006474:	e015      	b.n	80064a2 <_printf_i+0xfa>
 8006476:	3145      	adds	r1, #69	; 0x45
 8006478:	700a      	strb	r2, [r1, #0]
 800647a:	4a52      	ldr	r2, [pc, #328]	; (80065c4 <_printf_i+0x21c>)
 800647c:	9203      	str	r2, [sp, #12]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	6821      	ldr	r1, [r4, #0]
 8006482:	ca20      	ldmia	r2!, {r5}
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	0608      	lsls	r0, r1, #24
 8006488:	d550      	bpl.n	800652c <_printf_i+0x184>
 800648a:	07cb      	lsls	r3, r1, #31
 800648c:	d502      	bpl.n	8006494 <_printf_i+0xec>
 800648e:	2320      	movs	r3, #32
 8006490:	4319      	orrs	r1, r3
 8006492:	6021      	str	r1, [r4, #0]
 8006494:	2710      	movs	r7, #16
 8006496:	2d00      	cmp	r5, #0
 8006498:	d103      	bne.n	80064a2 <_printf_i+0xfa>
 800649a:	2320      	movs	r3, #32
 800649c:	6822      	ldr	r2, [r4, #0]
 800649e:	439a      	bics	r2, r3
 80064a0:	6022      	str	r2, [r4, #0]
 80064a2:	0023      	movs	r3, r4
 80064a4:	2200      	movs	r2, #0
 80064a6:	3343      	adds	r3, #67	; 0x43
 80064a8:	701a      	strb	r2, [r3, #0]
 80064aa:	6863      	ldr	r3, [r4, #4]
 80064ac:	60a3      	str	r3, [r4, #8]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	db03      	blt.n	80064ba <_printf_i+0x112>
 80064b2:	2204      	movs	r2, #4
 80064b4:	6821      	ldr	r1, [r4, #0]
 80064b6:	4391      	bics	r1, r2
 80064b8:	6021      	str	r1, [r4, #0]
 80064ba:	2d00      	cmp	r5, #0
 80064bc:	d102      	bne.n	80064c4 <_printf_i+0x11c>
 80064be:	9e04      	ldr	r6, [sp, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00c      	beq.n	80064de <_printf_i+0x136>
 80064c4:	9e04      	ldr	r6, [sp, #16]
 80064c6:	0028      	movs	r0, r5
 80064c8:	0039      	movs	r1, r7
 80064ca:	f7f9 feb5 	bl	8000238 <__aeabi_uidivmod>
 80064ce:	9b03      	ldr	r3, [sp, #12]
 80064d0:	3e01      	subs	r6, #1
 80064d2:	5c5b      	ldrb	r3, [r3, r1]
 80064d4:	7033      	strb	r3, [r6, #0]
 80064d6:	002b      	movs	r3, r5
 80064d8:	0005      	movs	r5, r0
 80064da:	429f      	cmp	r7, r3
 80064dc:	d9f3      	bls.n	80064c6 <_printf_i+0x11e>
 80064de:	2f08      	cmp	r7, #8
 80064e0:	d109      	bne.n	80064f6 <_printf_i+0x14e>
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	07db      	lsls	r3, r3, #31
 80064e6:	d506      	bpl.n	80064f6 <_printf_i+0x14e>
 80064e8:	6863      	ldr	r3, [r4, #4]
 80064ea:	6922      	ldr	r2, [r4, #16]
 80064ec:	4293      	cmp	r3, r2
 80064ee:	dc02      	bgt.n	80064f6 <_printf_i+0x14e>
 80064f0:	2330      	movs	r3, #48	; 0x30
 80064f2:	3e01      	subs	r6, #1
 80064f4:	7033      	strb	r3, [r6, #0]
 80064f6:	9b04      	ldr	r3, [sp, #16]
 80064f8:	1b9b      	subs	r3, r3, r6
 80064fa:	6123      	str	r3, [r4, #16]
 80064fc:	9b07      	ldr	r3, [sp, #28]
 80064fe:	0021      	movs	r1, r4
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	9805      	ldr	r0, [sp, #20]
 8006504:	9b06      	ldr	r3, [sp, #24]
 8006506:	aa09      	add	r2, sp, #36	; 0x24
 8006508:	f7ff fede 	bl	80062c8 <_printf_common>
 800650c:	1c43      	adds	r3, r0, #1
 800650e:	d135      	bne.n	800657c <_printf_i+0x1d4>
 8006510:	2001      	movs	r0, #1
 8006512:	4240      	negs	r0, r0
 8006514:	b00b      	add	sp, #44	; 0x2c
 8006516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006518:	2220      	movs	r2, #32
 800651a:	6809      	ldr	r1, [r1, #0]
 800651c:	430a      	orrs	r2, r1
 800651e:	6022      	str	r2, [r4, #0]
 8006520:	0022      	movs	r2, r4
 8006522:	2178      	movs	r1, #120	; 0x78
 8006524:	3245      	adds	r2, #69	; 0x45
 8006526:	7011      	strb	r1, [r2, #0]
 8006528:	4a27      	ldr	r2, [pc, #156]	; (80065c8 <_printf_i+0x220>)
 800652a:	e7a7      	b.n	800647c <_printf_i+0xd4>
 800652c:	0648      	lsls	r0, r1, #25
 800652e:	d5ac      	bpl.n	800648a <_printf_i+0xe2>
 8006530:	b2ad      	uxth	r5, r5
 8006532:	e7aa      	b.n	800648a <_printf_i+0xe2>
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	680d      	ldr	r5, [r1, #0]
 8006538:	1d10      	adds	r0, r2, #4
 800653a:	6949      	ldr	r1, [r1, #20]
 800653c:	6018      	str	r0, [r3, #0]
 800653e:	6813      	ldr	r3, [r2, #0]
 8006540:	062e      	lsls	r6, r5, #24
 8006542:	d501      	bpl.n	8006548 <_printf_i+0x1a0>
 8006544:	6019      	str	r1, [r3, #0]
 8006546:	e002      	b.n	800654e <_printf_i+0x1a6>
 8006548:	066d      	lsls	r5, r5, #25
 800654a:	d5fb      	bpl.n	8006544 <_printf_i+0x19c>
 800654c:	8019      	strh	r1, [r3, #0]
 800654e:	2300      	movs	r3, #0
 8006550:	9e04      	ldr	r6, [sp, #16]
 8006552:	6123      	str	r3, [r4, #16]
 8006554:	e7d2      	b.n	80064fc <_printf_i+0x154>
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	1d11      	adds	r1, r2, #4
 800655a:	6019      	str	r1, [r3, #0]
 800655c:	6816      	ldr	r6, [r2, #0]
 800655e:	2100      	movs	r1, #0
 8006560:	0030      	movs	r0, r6
 8006562:	6862      	ldr	r2, [r4, #4]
 8006564:	f000 f940 	bl	80067e8 <memchr>
 8006568:	2800      	cmp	r0, #0
 800656a:	d001      	beq.n	8006570 <_printf_i+0x1c8>
 800656c:	1b80      	subs	r0, r0, r6
 800656e:	6060      	str	r0, [r4, #4]
 8006570:	6863      	ldr	r3, [r4, #4]
 8006572:	6123      	str	r3, [r4, #16]
 8006574:	2300      	movs	r3, #0
 8006576:	9a04      	ldr	r2, [sp, #16]
 8006578:	7013      	strb	r3, [r2, #0]
 800657a:	e7bf      	b.n	80064fc <_printf_i+0x154>
 800657c:	6923      	ldr	r3, [r4, #16]
 800657e:	0032      	movs	r2, r6
 8006580:	9906      	ldr	r1, [sp, #24]
 8006582:	9805      	ldr	r0, [sp, #20]
 8006584:	9d07      	ldr	r5, [sp, #28]
 8006586:	47a8      	blx	r5
 8006588:	1c43      	adds	r3, r0, #1
 800658a:	d0c1      	beq.n	8006510 <_printf_i+0x168>
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	079b      	lsls	r3, r3, #30
 8006590:	d415      	bmi.n	80065be <_printf_i+0x216>
 8006592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006594:	68e0      	ldr	r0, [r4, #12]
 8006596:	4298      	cmp	r0, r3
 8006598:	dabc      	bge.n	8006514 <_printf_i+0x16c>
 800659a:	0018      	movs	r0, r3
 800659c:	e7ba      	b.n	8006514 <_printf_i+0x16c>
 800659e:	0022      	movs	r2, r4
 80065a0:	2301      	movs	r3, #1
 80065a2:	9906      	ldr	r1, [sp, #24]
 80065a4:	9805      	ldr	r0, [sp, #20]
 80065a6:	9e07      	ldr	r6, [sp, #28]
 80065a8:	3219      	adds	r2, #25
 80065aa:	47b0      	blx	r6
 80065ac:	1c43      	adds	r3, r0, #1
 80065ae:	d0af      	beq.n	8006510 <_printf_i+0x168>
 80065b0:	3501      	adds	r5, #1
 80065b2:	68e3      	ldr	r3, [r4, #12]
 80065b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065b6:	1a9b      	subs	r3, r3, r2
 80065b8:	42ab      	cmp	r3, r5
 80065ba:	dcf0      	bgt.n	800659e <_printf_i+0x1f6>
 80065bc:	e7e9      	b.n	8006592 <_printf_i+0x1ea>
 80065be:	2500      	movs	r5, #0
 80065c0:	e7f7      	b.n	80065b2 <_printf_i+0x20a>
 80065c2:	46c0      	nop			; (mov r8, r8)
 80065c4:	080098e1 	.word	0x080098e1
 80065c8:	080098f2 	.word	0x080098f2

080065cc <_putc_r>:
 80065cc:	b570      	push	{r4, r5, r6, lr}
 80065ce:	0006      	movs	r6, r0
 80065d0:	000d      	movs	r5, r1
 80065d2:	0014      	movs	r4, r2
 80065d4:	2800      	cmp	r0, #0
 80065d6:	d004      	beq.n	80065e2 <_putc_r+0x16>
 80065d8:	6983      	ldr	r3, [r0, #24]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d101      	bne.n	80065e2 <_putc_r+0x16>
 80065de:	f7ff f9dd 	bl	800599c <__sinit>
 80065e2:	4b1c      	ldr	r3, [pc, #112]	; (8006654 <_putc_r+0x88>)
 80065e4:	429c      	cmp	r4, r3
 80065e6:	d124      	bne.n	8006632 <_putc_r+0x66>
 80065e8:	6874      	ldr	r4, [r6, #4]
 80065ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065ec:	07db      	lsls	r3, r3, #31
 80065ee:	d405      	bmi.n	80065fc <_putc_r+0x30>
 80065f0:	89a3      	ldrh	r3, [r4, #12]
 80065f2:	059b      	lsls	r3, r3, #22
 80065f4:	d402      	bmi.n	80065fc <_putc_r+0x30>
 80065f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065f8:	f7ff fa81 	bl	8005afe <__retarget_lock_acquire_recursive>
 80065fc:	68a3      	ldr	r3, [r4, #8]
 80065fe:	3b01      	subs	r3, #1
 8006600:	60a3      	str	r3, [r4, #8]
 8006602:	2b00      	cmp	r3, #0
 8006604:	da05      	bge.n	8006612 <_putc_r+0x46>
 8006606:	69a2      	ldr	r2, [r4, #24]
 8006608:	4293      	cmp	r3, r2
 800660a:	db1c      	blt.n	8006646 <_putc_r+0x7a>
 800660c:	b2eb      	uxtb	r3, r5
 800660e:	2b0a      	cmp	r3, #10
 8006610:	d019      	beq.n	8006646 <_putc_r+0x7a>
 8006612:	6823      	ldr	r3, [r4, #0]
 8006614:	1c5a      	adds	r2, r3, #1
 8006616:	6022      	str	r2, [r4, #0]
 8006618:	701d      	strb	r5, [r3, #0]
 800661a:	b2ed      	uxtb	r5, r5
 800661c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800661e:	07db      	lsls	r3, r3, #31
 8006620:	d405      	bmi.n	800662e <_putc_r+0x62>
 8006622:	89a3      	ldrh	r3, [r4, #12]
 8006624:	059b      	lsls	r3, r3, #22
 8006626:	d402      	bmi.n	800662e <_putc_r+0x62>
 8006628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800662a:	f7ff fa69 	bl	8005b00 <__retarget_lock_release_recursive>
 800662e:	0028      	movs	r0, r5
 8006630:	bd70      	pop	{r4, r5, r6, pc}
 8006632:	4b09      	ldr	r3, [pc, #36]	; (8006658 <_putc_r+0x8c>)
 8006634:	429c      	cmp	r4, r3
 8006636:	d101      	bne.n	800663c <_putc_r+0x70>
 8006638:	68b4      	ldr	r4, [r6, #8]
 800663a:	e7d6      	b.n	80065ea <_putc_r+0x1e>
 800663c:	4b07      	ldr	r3, [pc, #28]	; (800665c <_putc_r+0x90>)
 800663e:	429c      	cmp	r4, r3
 8006640:	d1d3      	bne.n	80065ea <_putc_r+0x1e>
 8006642:	68f4      	ldr	r4, [r6, #12]
 8006644:	e7d1      	b.n	80065ea <_putc_r+0x1e>
 8006646:	0029      	movs	r1, r5
 8006648:	0022      	movs	r2, r4
 800664a:	0030      	movs	r0, r6
 800664c:	f7fe ff8c 	bl	8005568 <__swbuf_r>
 8006650:	0005      	movs	r5, r0
 8006652:	e7e3      	b.n	800661c <_putc_r+0x50>
 8006654:	08009890 	.word	0x08009890
 8006658:	080098b0 	.word	0x080098b0
 800665c:	08009870 	.word	0x08009870

08006660 <_sbrk_r>:
 8006660:	2300      	movs	r3, #0
 8006662:	b570      	push	{r4, r5, r6, lr}
 8006664:	4d06      	ldr	r5, [pc, #24]	; (8006680 <_sbrk_r+0x20>)
 8006666:	0004      	movs	r4, r0
 8006668:	0008      	movs	r0, r1
 800666a:	602b      	str	r3, [r5, #0]
 800666c:	f7fb ff8c 	bl	8002588 <_sbrk>
 8006670:	1c43      	adds	r3, r0, #1
 8006672:	d103      	bne.n	800667c <_sbrk_r+0x1c>
 8006674:	682b      	ldr	r3, [r5, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d000      	beq.n	800667c <_sbrk_r+0x1c>
 800667a:	6023      	str	r3, [r4, #0]
 800667c:	bd70      	pop	{r4, r5, r6, pc}
 800667e:	46c0      	nop			; (mov r8, r8)
 8006680:	20000774 	.word	0x20000774

08006684 <__sread>:
 8006684:	b570      	push	{r4, r5, r6, lr}
 8006686:	000c      	movs	r4, r1
 8006688:	250e      	movs	r5, #14
 800668a:	5f49      	ldrsh	r1, [r1, r5]
 800668c:	f000 f90a 	bl	80068a4 <_read_r>
 8006690:	2800      	cmp	r0, #0
 8006692:	db03      	blt.n	800669c <__sread+0x18>
 8006694:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006696:	181b      	adds	r3, r3, r0
 8006698:	6563      	str	r3, [r4, #84]	; 0x54
 800669a:	bd70      	pop	{r4, r5, r6, pc}
 800669c:	89a3      	ldrh	r3, [r4, #12]
 800669e:	4a02      	ldr	r2, [pc, #8]	; (80066a8 <__sread+0x24>)
 80066a0:	4013      	ands	r3, r2
 80066a2:	81a3      	strh	r3, [r4, #12]
 80066a4:	e7f9      	b.n	800669a <__sread+0x16>
 80066a6:	46c0      	nop			; (mov r8, r8)
 80066a8:	ffffefff 	.word	0xffffefff

080066ac <__swrite>:
 80066ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ae:	001f      	movs	r7, r3
 80066b0:	898b      	ldrh	r3, [r1, #12]
 80066b2:	0005      	movs	r5, r0
 80066b4:	000c      	movs	r4, r1
 80066b6:	0016      	movs	r6, r2
 80066b8:	05db      	lsls	r3, r3, #23
 80066ba:	d505      	bpl.n	80066c8 <__swrite+0x1c>
 80066bc:	230e      	movs	r3, #14
 80066be:	5ec9      	ldrsh	r1, [r1, r3]
 80066c0:	2200      	movs	r2, #0
 80066c2:	2302      	movs	r3, #2
 80066c4:	f000 f87c 	bl	80067c0 <_lseek_r>
 80066c8:	89a3      	ldrh	r3, [r4, #12]
 80066ca:	4a05      	ldr	r2, [pc, #20]	; (80066e0 <__swrite+0x34>)
 80066cc:	0028      	movs	r0, r5
 80066ce:	4013      	ands	r3, r2
 80066d0:	81a3      	strh	r3, [r4, #12]
 80066d2:	0032      	movs	r2, r6
 80066d4:	230e      	movs	r3, #14
 80066d6:	5ee1      	ldrsh	r1, [r4, r3]
 80066d8:	003b      	movs	r3, r7
 80066da:	f000 f81f 	bl	800671c <_write_r>
 80066de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066e0:	ffffefff 	.word	0xffffefff

080066e4 <__sseek>:
 80066e4:	b570      	push	{r4, r5, r6, lr}
 80066e6:	000c      	movs	r4, r1
 80066e8:	250e      	movs	r5, #14
 80066ea:	5f49      	ldrsh	r1, [r1, r5]
 80066ec:	f000 f868 	bl	80067c0 <_lseek_r>
 80066f0:	89a3      	ldrh	r3, [r4, #12]
 80066f2:	1c42      	adds	r2, r0, #1
 80066f4:	d103      	bne.n	80066fe <__sseek+0x1a>
 80066f6:	4a05      	ldr	r2, [pc, #20]	; (800670c <__sseek+0x28>)
 80066f8:	4013      	ands	r3, r2
 80066fa:	81a3      	strh	r3, [r4, #12]
 80066fc:	bd70      	pop	{r4, r5, r6, pc}
 80066fe:	2280      	movs	r2, #128	; 0x80
 8006700:	0152      	lsls	r2, r2, #5
 8006702:	4313      	orrs	r3, r2
 8006704:	81a3      	strh	r3, [r4, #12]
 8006706:	6560      	str	r0, [r4, #84]	; 0x54
 8006708:	e7f8      	b.n	80066fc <__sseek+0x18>
 800670a:	46c0      	nop			; (mov r8, r8)
 800670c:	ffffefff 	.word	0xffffefff

08006710 <__sclose>:
 8006710:	b510      	push	{r4, lr}
 8006712:	230e      	movs	r3, #14
 8006714:	5ec9      	ldrsh	r1, [r1, r3]
 8006716:	f000 f81d 	bl	8006754 <_close_r>
 800671a:	bd10      	pop	{r4, pc}

0800671c <_write_r>:
 800671c:	b570      	push	{r4, r5, r6, lr}
 800671e:	0004      	movs	r4, r0
 8006720:	0008      	movs	r0, r1
 8006722:	0011      	movs	r1, r2
 8006724:	001a      	movs	r2, r3
 8006726:	2300      	movs	r3, #0
 8006728:	4d05      	ldr	r5, [pc, #20]	; (8006740 <_write_r+0x24>)
 800672a:	602b      	str	r3, [r5, #0]
 800672c:	f7f9 fd9a 	bl	8000264 <_write>
 8006730:	1c43      	adds	r3, r0, #1
 8006732:	d103      	bne.n	800673c <_write_r+0x20>
 8006734:	682b      	ldr	r3, [r5, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d000      	beq.n	800673c <_write_r+0x20>
 800673a:	6023      	str	r3, [r4, #0]
 800673c:	bd70      	pop	{r4, r5, r6, pc}
 800673e:	46c0      	nop			; (mov r8, r8)
 8006740:	20000774 	.word	0x20000774

08006744 <abort>:
 8006744:	2006      	movs	r0, #6
 8006746:	b510      	push	{r4, lr}
 8006748:	f000 f8ea 	bl	8006920 <raise>
 800674c:	2001      	movs	r0, #1
 800674e:	f7fb fec5 	bl	80024dc <_exit>
	...

08006754 <_close_r>:
 8006754:	2300      	movs	r3, #0
 8006756:	b570      	push	{r4, r5, r6, lr}
 8006758:	4d06      	ldr	r5, [pc, #24]	; (8006774 <_close_r+0x20>)
 800675a:	0004      	movs	r4, r0
 800675c:	0008      	movs	r0, r1
 800675e:	602b      	str	r3, [r5, #0]
 8006760:	f7fb fee5 	bl	800252e <_close>
 8006764:	1c43      	adds	r3, r0, #1
 8006766:	d103      	bne.n	8006770 <_close_r+0x1c>
 8006768:	682b      	ldr	r3, [r5, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d000      	beq.n	8006770 <_close_r+0x1c>
 800676e:	6023      	str	r3, [r4, #0]
 8006770:	bd70      	pop	{r4, r5, r6, pc}
 8006772:	46c0      	nop			; (mov r8, r8)
 8006774:	20000774 	.word	0x20000774

08006778 <_fstat_r>:
 8006778:	2300      	movs	r3, #0
 800677a:	b570      	push	{r4, r5, r6, lr}
 800677c:	4d06      	ldr	r5, [pc, #24]	; (8006798 <_fstat_r+0x20>)
 800677e:	0004      	movs	r4, r0
 8006780:	0008      	movs	r0, r1
 8006782:	0011      	movs	r1, r2
 8006784:	602b      	str	r3, [r5, #0]
 8006786:	f7fb fedc 	bl	8002542 <_fstat>
 800678a:	1c43      	adds	r3, r0, #1
 800678c:	d103      	bne.n	8006796 <_fstat_r+0x1e>
 800678e:	682b      	ldr	r3, [r5, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d000      	beq.n	8006796 <_fstat_r+0x1e>
 8006794:	6023      	str	r3, [r4, #0]
 8006796:	bd70      	pop	{r4, r5, r6, pc}
 8006798:	20000774 	.word	0x20000774

0800679c <_isatty_r>:
 800679c:	2300      	movs	r3, #0
 800679e:	b570      	push	{r4, r5, r6, lr}
 80067a0:	4d06      	ldr	r5, [pc, #24]	; (80067bc <_isatty_r+0x20>)
 80067a2:	0004      	movs	r4, r0
 80067a4:	0008      	movs	r0, r1
 80067a6:	602b      	str	r3, [r5, #0]
 80067a8:	f7fb fed9 	bl	800255e <_isatty>
 80067ac:	1c43      	adds	r3, r0, #1
 80067ae:	d103      	bne.n	80067b8 <_isatty_r+0x1c>
 80067b0:	682b      	ldr	r3, [r5, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d000      	beq.n	80067b8 <_isatty_r+0x1c>
 80067b6:	6023      	str	r3, [r4, #0]
 80067b8:	bd70      	pop	{r4, r5, r6, pc}
 80067ba:	46c0      	nop			; (mov r8, r8)
 80067bc:	20000774 	.word	0x20000774

080067c0 <_lseek_r>:
 80067c0:	b570      	push	{r4, r5, r6, lr}
 80067c2:	0004      	movs	r4, r0
 80067c4:	0008      	movs	r0, r1
 80067c6:	0011      	movs	r1, r2
 80067c8:	001a      	movs	r2, r3
 80067ca:	2300      	movs	r3, #0
 80067cc:	4d05      	ldr	r5, [pc, #20]	; (80067e4 <_lseek_r+0x24>)
 80067ce:	602b      	str	r3, [r5, #0]
 80067d0:	f7fb fece 	bl	8002570 <_lseek>
 80067d4:	1c43      	adds	r3, r0, #1
 80067d6:	d103      	bne.n	80067e0 <_lseek_r+0x20>
 80067d8:	682b      	ldr	r3, [r5, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d000      	beq.n	80067e0 <_lseek_r+0x20>
 80067de:	6023      	str	r3, [r4, #0]
 80067e0:	bd70      	pop	{r4, r5, r6, pc}
 80067e2:	46c0      	nop			; (mov r8, r8)
 80067e4:	20000774 	.word	0x20000774

080067e8 <memchr>:
 80067e8:	b2c9      	uxtb	r1, r1
 80067ea:	1882      	adds	r2, r0, r2
 80067ec:	4290      	cmp	r0, r2
 80067ee:	d101      	bne.n	80067f4 <memchr+0xc>
 80067f0:	2000      	movs	r0, #0
 80067f2:	4770      	bx	lr
 80067f4:	7803      	ldrb	r3, [r0, #0]
 80067f6:	428b      	cmp	r3, r1
 80067f8:	d0fb      	beq.n	80067f2 <memchr+0xa>
 80067fa:	3001      	adds	r0, #1
 80067fc:	e7f6      	b.n	80067ec <memchr+0x4>

080067fe <memcpy>:
 80067fe:	2300      	movs	r3, #0
 8006800:	b510      	push	{r4, lr}
 8006802:	429a      	cmp	r2, r3
 8006804:	d100      	bne.n	8006808 <memcpy+0xa>
 8006806:	bd10      	pop	{r4, pc}
 8006808:	5ccc      	ldrb	r4, [r1, r3]
 800680a:	54c4      	strb	r4, [r0, r3]
 800680c:	3301      	adds	r3, #1
 800680e:	e7f8      	b.n	8006802 <memcpy+0x4>

08006810 <memmove>:
 8006810:	b510      	push	{r4, lr}
 8006812:	4288      	cmp	r0, r1
 8006814:	d902      	bls.n	800681c <memmove+0xc>
 8006816:	188b      	adds	r3, r1, r2
 8006818:	4298      	cmp	r0, r3
 800681a:	d303      	bcc.n	8006824 <memmove+0x14>
 800681c:	2300      	movs	r3, #0
 800681e:	e007      	b.n	8006830 <memmove+0x20>
 8006820:	5c8b      	ldrb	r3, [r1, r2]
 8006822:	5483      	strb	r3, [r0, r2]
 8006824:	3a01      	subs	r2, #1
 8006826:	d2fb      	bcs.n	8006820 <memmove+0x10>
 8006828:	bd10      	pop	{r4, pc}
 800682a:	5ccc      	ldrb	r4, [r1, r3]
 800682c:	54c4      	strb	r4, [r0, r3]
 800682e:	3301      	adds	r3, #1
 8006830:	429a      	cmp	r2, r3
 8006832:	d1fa      	bne.n	800682a <memmove+0x1a>
 8006834:	e7f8      	b.n	8006828 <memmove+0x18>
	...

08006838 <__malloc_lock>:
 8006838:	b510      	push	{r4, lr}
 800683a:	4802      	ldr	r0, [pc, #8]	; (8006844 <__malloc_lock+0xc>)
 800683c:	f7ff f95f 	bl	8005afe <__retarget_lock_acquire_recursive>
 8006840:	bd10      	pop	{r4, pc}
 8006842:	46c0      	nop			; (mov r8, r8)
 8006844:	2000076c 	.word	0x2000076c

08006848 <__malloc_unlock>:
 8006848:	b510      	push	{r4, lr}
 800684a:	4802      	ldr	r0, [pc, #8]	; (8006854 <__malloc_unlock+0xc>)
 800684c:	f7ff f958 	bl	8005b00 <__retarget_lock_release_recursive>
 8006850:	bd10      	pop	{r4, pc}
 8006852:	46c0      	nop			; (mov r8, r8)
 8006854:	2000076c 	.word	0x2000076c

08006858 <_realloc_r>:
 8006858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800685a:	0007      	movs	r7, r0
 800685c:	000d      	movs	r5, r1
 800685e:	0016      	movs	r6, r2
 8006860:	2900      	cmp	r1, #0
 8006862:	d105      	bne.n	8006870 <_realloc_r+0x18>
 8006864:	0011      	movs	r1, r2
 8006866:	f7ff fa0d 	bl	8005c84 <_malloc_r>
 800686a:	0004      	movs	r4, r0
 800686c:	0020      	movs	r0, r4
 800686e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006870:	2a00      	cmp	r2, #0
 8006872:	d103      	bne.n	800687c <_realloc_r+0x24>
 8006874:	f7ff f9bc 	bl	8005bf0 <_free_r>
 8006878:	0034      	movs	r4, r6
 800687a:	e7f7      	b.n	800686c <_realloc_r+0x14>
 800687c:	f000 f870 	bl	8006960 <_malloc_usable_size_r>
 8006880:	002c      	movs	r4, r5
 8006882:	42b0      	cmp	r0, r6
 8006884:	d2f2      	bcs.n	800686c <_realloc_r+0x14>
 8006886:	0031      	movs	r1, r6
 8006888:	0038      	movs	r0, r7
 800688a:	f7ff f9fb 	bl	8005c84 <_malloc_r>
 800688e:	1e04      	subs	r4, r0, #0
 8006890:	d0ec      	beq.n	800686c <_realloc_r+0x14>
 8006892:	0029      	movs	r1, r5
 8006894:	0032      	movs	r2, r6
 8006896:	f7ff ffb2 	bl	80067fe <memcpy>
 800689a:	0029      	movs	r1, r5
 800689c:	0038      	movs	r0, r7
 800689e:	f7ff f9a7 	bl	8005bf0 <_free_r>
 80068a2:	e7e3      	b.n	800686c <_realloc_r+0x14>

080068a4 <_read_r>:
 80068a4:	b570      	push	{r4, r5, r6, lr}
 80068a6:	0004      	movs	r4, r0
 80068a8:	0008      	movs	r0, r1
 80068aa:	0011      	movs	r1, r2
 80068ac:	001a      	movs	r2, r3
 80068ae:	2300      	movs	r3, #0
 80068b0:	4d05      	ldr	r5, [pc, #20]	; (80068c8 <_read_r+0x24>)
 80068b2:	602b      	str	r3, [r5, #0]
 80068b4:	f7fb fe1e 	bl	80024f4 <_read>
 80068b8:	1c43      	adds	r3, r0, #1
 80068ba:	d103      	bne.n	80068c4 <_read_r+0x20>
 80068bc:	682b      	ldr	r3, [r5, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d000      	beq.n	80068c4 <_read_r+0x20>
 80068c2:	6023      	str	r3, [r4, #0]
 80068c4:	bd70      	pop	{r4, r5, r6, pc}
 80068c6:	46c0      	nop			; (mov r8, r8)
 80068c8:	20000774 	.word	0x20000774

080068cc <_raise_r>:
 80068cc:	b570      	push	{r4, r5, r6, lr}
 80068ce:	0004      	movs	r4, r0
 80068d0:	000d      	movs	r5, r1
 80068d2:	291f      	cmp	r1, #31
 80068d4:	d904      	bls.n	80068e0 <_raise_r+0x14>
 80068d6:	2316      	movs	r3, #22
 80068d8:	6003      	str	r3, [r0, #0]
 80068da:	2001      	movs	r0, #1
 80068dc:	4240      	negs	r0, r0
 80068de:	bd70      	pop	{r4, r5, r6, pc}
 80068e0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d004      	beq.n	80068f0 <_raise_r+0x24>
 80068e6:	008a      	lsls	r2, r1, #2
 80068e8:	189b      	adds	r3, r3, r2
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	2a00      	cmp	r2, #0
 80068ee:	d108      	bne.n	8006902 <_raise_r+0x36>
 80068f0:	0020      	movs	r0, r4
 80068f2:	f000 f831 	bl	8006958 <_getpid_r>
 80068f6:	002a      	movs	r2, r5
 80068f8:	0001      	movs	r1, r0
 80068fa:	0020      	movs	r0, r4
 80068fc:	f000 f81a 	bl	8006934 <_kill_r>
 8006900:	e7ed      	b.n	80068de <_raise_r+0x12>
 8006902:	2000      	movs	r0, #0
 8006904:	2a01      	cmp	r2, #1
 8006906:	d0ea      	beq.n	80068de <_raise_r+0x12>
 8006908:	1c51      	adds	r1, r2, #1
 800690a:	d103      	bne.n	8006914 <_raise_r+0x48>
 800690c:	2316      	movs	r3, #22
 800690e:	3001      	adds	r0, #1
 8006910:	6023      	str	r3, [r4, #0]
 8006912:	e7e4      	b.n	80068de <_raise_r+0x12>
 8006914:	2400      	movs	r4, #0
 8006916:	0028      	movs	r0, r5
 8006918:	601c      	str	r4, [r3, #0]
 800691a:	4790      	blx	r2
 800691c:	0020      	movs	r0, r4
 800691e:	e7de      	b.n	80068de <_raise_r+0x12>

08006920 <raise>:
 8006920:	b510      	push	{r4, lr}
 8006922:	4b03      	ldr	r3, [pc, #12]	; (8006930 <raise+0x10>)
 8006924:	0001      	movs	r1, r0
 8006926:	6818      	ldr	r0, [r3, #0]
 8006928:	f7ff ffd0 	bl	80068cc <_raise_r>
 800692c:	bd10      	pop	{r4, pc}
 800692e:	46c0      	nop			; (mov r8, r8)
 8006930:	20000028 	.word	0x20000028

08006934 <_kill_r>:
 8006934:	2300      	movs	r3, #0
 8006936:	b570      	push	{r4, r5, r6, lr}
 8006938:	4d06      	ldr	r5, [pc, #24]	; (8006954 <_kill_r+0x20>)
 800693a:	0004      	movs	r4, r0
 800693c:	0008      	movs	r0, r1
 800693e:	0011      	movs	r1, r2
 8006940:	602b      	str	r3, [r5, #0]
 8006942:	f7fb fdbb 	bl	80024bc <_kill>
 8006946:	1c43      	adds	r3, r0, #1
 8006948:	d103      	bne.n	8006952 <_kill_r+0x1e>
 800694a:	682b      	ldr	r3, [r5, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d000      	beq.n	8006952 <_kill_r+0x1e>
 8006950:	6023      	str	r3, [r4, #0]
 8006952:	bd70      	pop	{r4, r5, r6, pc}
 8006954:	20000774 	.word	0x20000774

08006958 <_getpid_r>:
 8006958:	b510      	push	{r4, lr}
 800695a:	f7fb fda9 	bl	80024b0 <_getpid>
 800695e:	bd10      	pop	{r4, pc}

08006960 <_malloc_usable_size_r>:
 8006960:	1f0b      	subs	r3, r1, #4
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	1f18      	subs	r0, r3, #4
 8006966:	2b00      	cmp	r3, #0
 8006968:	da01      	bge.n	800696e <_malloc_usable_size_r+0xe>
 800696a:	580b      	ldr	r3, [r1, r0]
 800696c:	18c0      	adds	r0, r0, r3
 800696e:	4770      	bx	lr

08006970 <_init>:
 8006970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006972:	46c0      	nop			; (mov r8, r8)
 8006974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006976:	bc08      	pop	{r3}
 8006978:	469e      	mov	lr, r3
 800697a:	4770      	bx	lr

0800697c <_fini>:
 800697c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800697e:	46c0      	nop			; (mov r8, r8)
 8006980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006982:	bc08      	pop	{r3}
 8006984:	469e      	mov	lr, r3
 8006986:	4770      	bx	lr
