
cr95test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005430  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006bc  080054f0  080054f0  000154f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bac  08005bac  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08005bac  08005bac  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005bac  08005bac  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bac  08005bac  00015bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bb0  08005bb0  00015bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08005bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  200001e0  08005d94  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  08005d94  00020464  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000800b  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018c3  00000000  00000000  00028213  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000788  00000000  00000000  00029ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006b0  00000000  00000000  0002a260  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000d3bc  00000000  00000000  0002a910  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007a70  00000000  00000000  00037ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004605b  00000000  00000000  0003f73c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00085797  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002424  00000000  00000000  00085814  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080054d8 	.word	0x080054d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	080054d8 	.word	0x080054d8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char const *buf, int n)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	60f8      	str	r0, [r7, #12]
 8000238:	60b9      	str	r1, [r7, #8]
 800023a:	607a      	str	r2, [r7, #4]
    if (printf_en) HAL_UART_Transmit(&huart2, (uint8_t*)(buf), n, HAL_MAX_DELAY);
 800023c:	4b08      	ldr	r3, [pc, #32]	; (8000260 <_write+0x30>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d007      	beq.n	8000254 <_write+0x24>
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	b29a      	uxth	r2, r3
 8000248:	2301      	movs	r3, #1
 800024a:	425b      	negs	r3, r3
 800024c:	68b9      	ldr	r1, [r7, #8]
 800024e:	4805      	ldr	r0, [pc, #20]	; (8000264 <_write+0x34>)
 8000250:	f003 f96a 	bl	8003528 <HAL_UART_Transmit>
    return n;
 8000254:	687b      	ldr	r3, [r7, #4]
}
 8000256:	0018      	movs	r0, r3
 8000258:	46bd      	mov	sp, r7
 800025a:	b004      	add	sp, #16
 800025c:	bd80      	pop	{r7, pc}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	20000000 	.word	0x20000000
 8000264:	200003dc 	.word	0x200003dc

08000268 <cr95write>:

void cr95write(const uint8_t *data, uint8_t length)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
 8000270:	000a      	movs	r2, r1
 8000272:	1cfb      	adds	r3, r7, #3
 8000274:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t *)(data), length, HAL_MAX_DELAY);
 8000276:	1cfb      	adds	r3, r7, #3
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	b29a      	uxth	r2, r3
 800027c:	2301      	movs	r3, #1
 800027e:	425b      	negs	r3, r3
 8000280:	6879      	ldr	r1, [r7, #4]
 8000282:	4803      	ldr	r0, [pc, #12]	; (8000290 <cr95write+0x28>)
 8000284:	f003 f950 	bl	8003528 <HAL_UART_Transmit>
}
 8000288:	46c0      	nop			; (mov r8, r8)
 800028a:	46bd      	mov	sp, r7
 800028c:	b002      	add	sp, #8
 800028e:	bd80      	pop	{r7, pc}
 8000290:	2000035c 	.word	0x2000035c

08000294 <cr95read>:

uint8_t cr95read(uint8_t *data, uint8_t *length)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b086      	sub	sp, #24
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
 800029c:	6039      	str	r1, [r7, #0]
	uint32_t timeout = HAL_GetTick();
 800029e:	f001 fdf3 	bl	8001e88 <HAL_GetTick>
 80002a2:	0003      	movs	r3, r0
 80002a4:	613b      	str	r3, [r7, #16]

	do {
		if (HAL_GetTick() - timeout > NFC_TIMEOUT) return 0xFF; // timeout
 80002a6:	f001 fdef 	bl	8001e88 <HAL_GetTick>
 80002aa:	0002      	movs	r2, r0
 80002ac:	693b      	ldr	r3, [r7, #16]
 80002ae:	1ad2      	subs	r2, r2, r3
 80002b0:	23fa      	movs	r3, #250	; 0xfa
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	429a      	cmp	r2, r3
 80002b6:	d901      	bls.n	80002bc <cr95read+0x28>
 80002b8:	23ff      	movs	r3, #255	; 0xff
 80002ba:	e099      	b.n	80003f0 <cr95read+0x15c>
	} while (nfc_rx_read_ptr == nfc_rx_write_ptr);
 80002bc:	4b4e      	ldr	r3, [pc, #312]	; (80003f8 <cr95read+0x164>)
 80002be:	881b      	ldrh	r3, [r3, #0]
 80002c0:	b29b      	uxth	r3, r3
 80002c2:	0019      	movs	r1, r3
 80002c4:	4b4d      	ldr	r3, [pc, #308]	; (80003fc <cr95read+0x168>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	685b      	ldr	r3, [r3, #4]
 80002ca:	2240      	movs	r2, #64	; 0x40
 80002cc:	1ad3      	subs	r3, r2, r3
 80002ce:	4299      	cmp	r1, r3
 80002d0:	d0e9      	beq.n	80002a6 <cr95read+0x12>
	uint8_t resp = nfc_rx_buf[nfc_rx_read_ptr];
 80002d2:	4b49      	ldr	r3, [pc, #292]	; (80003f8 <cr95read+0x164>)
 80002d4:	881b      	ldrh	r3, [r3, #0]
 80002d6:	b29b      	uxth	r3, r3
 80002d8:	0019      	movs	r1, r3
 80002da:	230f      	movs	r3, #15
 80002dc:	18fb      	adds	r3, r7, r3
 80002de:	4a48      	ldr	r2, [pc, #288]	; (8000400 <cr95read+0x16c>)
 80002e0:	5c52      	ldrb	r2, [r2, r1]
 80002e2:	701a      	strb	r2, [r3, #0]
    if (++nfc_rx_read_ptr >= RX_BUFFER_LEN) nfc_rx_read_ptr = 0; // increase read pointer
 80002e4:	4b44      	ldr	r3, [pc, #272]	; (80003f8 <cr95read+0x164>)
 80002e6:	881b      	ldrh	r3, [r3, #0]
 80002e8:	b29b      	uxth	r3, r3
 80002ea:	3301      	adds	r3, #1
 80002ec:	b29b      	uxth	r3, r3
 80002ee:	4a42      	ldr	r2, [pc, #264]	; (80003f8 <cr95read+0x164>)
 80002f0:	1c19      	adds	r1, r3, #0
 80002f2:	8011      	strh	r1, [r2, #0]
 80002f4:	2b3f      	cmp	r3, #63	; 0x3f
 80002f6:	d902      	bls.n	80002fe <cr95read+0x6a>
 80002f8:	4b3f      	ldr	r3, [pc, #252]	; (80003f8 <cr95read+0x164>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	801a      	strh	r2, [r3, #0]

    if (resp == 0x55) return resp;
 80002fe:	230f      	movs	r3, #15
 8000300:	18fb      	adds	r3, r7, r3
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	2b55      	cmp	r3, #85	; 0x55
 8000306:	d103      	bne.n	8000310 <cr95read+0x7c>
 8000308:	230f      	movs	r3, #15
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	e06f      	b.n	80003f0 <cr95read+0x15c>

	do {
		if (HAL_GetTick() - timeout > NFC_TIMEOUT) return 0xFF; // timeout
 8000310:	f001 fdba 	bl	8001e88 <HAL_GetTick>
 8000314:	0002      	movs	r2, r0
 8000316:	693b      	ldr	r3, [r7, #16]
 8000318:	1ad2      	subs	r2, r2, r3
 800031a:	23fa      	movs	r3, #250	; 0xfa
 800031c:	009b      	lsls	r3, r3, #2
 800031e:	429a      	cmp	r2, r3
 8000320:	d901      	bls.n	8000326 <cr95read+0x92>
 8000322:	23ff      	movs	r3, #255	; 0xff
 8000324:	e064      	b.n	80003f0 <cr95read+0x15c>
	} while (nfc_rx_read_ptr == nfc_rx_write_ptr);
 8000326:	4b34      	ldr	r3, [pc, #208]	; (80003f8 <cr95read+0x164>)
 8000328:	881b      	ldrh	r3, [r3, #0]
 800032a:	b29b      	uxth	r3, r3
 800032c:	0019      	movs	r1, r3
 800032e:	4b33      	ldr	r3, [pc, #204]	; (80003fc <cr95read+0x168>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	685b      	ldr	r3, [r3, #4]
 8000334:	2240      	movs	r2, #64	; 0x40
 8000336:	1ad3      	subs	r3, r2, r3
 8000338:	4299      	cmp	r1, r3
 800033a:	d0e9      	beq.n	8000310 <cr95read+0x7c>
	uint8_t len = nfc_rx_buf[nfc_rx_read_ptr];
 800033c:	4b2e      	ldr	r3, [pc, #184]	; (80003f8 <cr95read+0x164>)
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	b29b      	uxth	r3, r3
 8000342:	0019      	movs	r1, r3
 8000344:	2317      	movs	r3, #23
 8000346:	18fb      	adds	r3, r7, r3
 8000348:	4a2d      	ldr	r2, [pc, #180]	; (8000400 <cr95read+0x16c>)
 800034a:	5c52      	ldrb	r2, [r2, r1]
 800034c:	701a      	strb	r2, [r3, #0]
    if (++nfc_rx_read_ptr >= RX_BUFFER_LEN) nfc_rx_read_ptr = 0; // increase read pointer
 800034e:	4b2a      	ldr	r3, [pc, #168]	; (80003f8 <cr95read+0x164>)
 8000350:	881b      	ldrh	r3, [r3, #0]
 8000352:	b29b      	uxth	r3, r3
 8000354:	3301      	adds	r3, #1
 8000356:	b29b      	uxth	r3, r3
 8000358:	4a27      	ldr	r2, [pc, #156]	; (80003f8 <cr95read+0x164>)
 800035a:	1c19      	adds	r1, r3, #0
 800035c:	8011      	strh	r1, [r2, #0]
 800035e:	2b3f      	cmp	r3, #63	; 0x3f
 8000360:	d902      	bls.n	8000368 <cr95read+0xd4>
 8000362:	4b25      	ldr	r3, [pc, #148]	; (80003f8 <cr95read+0x164>)
 8000364:	2200      	movs	r2, #0
 8000366:	801a      	strh	r2, [r3, #0]

    if (length) *length = len;
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d035      	beq.n	80003da <cr95read+0x146>
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	2217      	movs	r2, #23
 8000372:	18ba      	adds	r2, r7, r2
 8000374:	7812      	ldrb	r2, [r2, #0]
 8000376:	701a      	strb	r2, [r3, #0]
    while (len--) {
 8000378:	e02f      	b.n	80003da <cr95read+0x146>
    	do {
    		if (HAL_GetTick() - timeout > NFC_TIMEOUT) return 0xFF; // timeout
 800037a:	f001 fd85 	bl	8001e88 <HAL_GetTick>
 800037e:	0002      	movs	r2, r0
 8000380:	693b      	ldr	r3, [r7, #16]
 8000382:	1ad2      	subs	r2, r2, r3
 8000384:	23fa      	movs	r3, #250	; 0xfa
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	429a      	cmp	r2, r3
 800038a:	d901      	bls.n	8000390 <cr95read+0xfc>
 800038c:	23ff      	movs	r3, #255	; 0xff
 800038e:	e02f      	b.n	80003f0 <cr95read+0x15c>
    	} while (nfc_rx_read_ptr == nfc_rx_write_ptr);
 8000390:	4b19      	ldr	r3, [pc, #100]	; (80003f8 <cr95read+0x164>)
 8000392:	881b      	ldrh	r3, [r3, #0]
 8000394:	b29b      	uxth	r3, r3
 8000396:	0019      	movs	r1, r3
 8000398:	4b18      	ldr	r3, [pc, #96]	; (80003fc <cr95read+0x168>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	2240      	movs	r2, #64	; 0x40
 80003a0:	1ad3      	subs	r3, r2, r3
 80003a2:	4299      	cmp	r1, r3
 80003a4:	d0e9      	beq.n	800037a <cr95read+0xe6>
    	if (data) *data++ = nfc_rx_buf[nfc_rx_read_ptr];
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d009      	beq.n	80003c0 <cr95read+0x12c>
 80003ac:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <cr95read+0x164>)
 80003ae:	881b      	ldrh	r3, [r3, #0]
 80003b0:	b29b      	uxth	r3, r3
 80003b2:	0019      	movs	r1, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	1c5a      	adds	r2, r3, #1
 80003b8:	607a      	str	r2, [r7, #4]
 80003ba:	4a11      	ldr	r2, [pc, #68]	; (8000400 <cr95read+0x16c>)
 80003bc:	5c52      	ldrb	r2, [r2, r1]
 80003be:	701a      	strb	r2, [r3, #0]
        if (++nfc_rx_read_ptr >= RX_BUFFER_LEN) nfc_rx_read_ptr = 0; // increase read pointer
 80003c0:	4b0d      	ldr	r3, [pc, #52]	; (80003f8 <cr95read+0x164>)
 80003c2:	881b      	ldrh	r3, [r3, #0]
 80003c4:	b29b      	uxth	r3, r3
 80003c6:	3301      	adds	r3, #1
 80003c8:	b29b      	uxth	r3, r3
 80003ca:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <cr95read+0x164>)
 80003cc:	1c19      	adds	r1, r3, #0
 80003ce:	8011      	strh	r1, [r2, #0]
 80003d0:	2b3f      	cmp	r3, #63	; 0x3f
 80003d2:	d902      	bls.n	80003da <cr95read+0x146>
 80003d4:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <cr95read+0x164>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	801a      	strh	r2, [r3, #0]
    while (len--) {
 80003da:	2217      	movs	r2, #23
 80003dc:	18bb      	adds	r3, r7, r2
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	18ba      	adds	r2, r7, r2
 80003e2:	1e59      	subs	r1, r3, #1
 80003e4:	7011      	strb	r1, [r2, #0]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d1c7      	bne.n	800037a <cr95read+0xe6>
    }

    return resp;
 80003ea:	230f      	movs	r3, #15
 80003ec:	18fb      	adds	r3, r7, r3
 80003ee:	781b      	ldrb	r3, [r3, #0]
}
 80003f0:	0018      	movs	r0, r3
 80003f2:	46bd      	mov	sp, r7
 80003f4:	b006      	add	sp, #24
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	20000280 	.word	0x20000280
 80003fc:	20000318 	.word	0x20000318
 8000400:	20000240 	.word	0x20000240

08000404 <cr95_wakeup>:

static void cr95_wakeup(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
	const uint8_t wakeup = 0;
 800040a:	1dfb      	adds	r3, r7, #7
 800040c:	2200      	movs	r2, #0
 800040e:	701a      	strb	r2, [r3, #0]
	cr95write(&wakeup, 1);
 8000410:	1dfb      	adds	r3, r7, #7
 8000412:	2101      	movs	r1, #1
 8000414:	0018      	movs	r0, r3
 8000416:	f7ff ff27 	bl	8000268 <cr95write>
	printf("WAKEUP sent\n");
 800041a:	4b04      	ldr	r3, [pc, #16]	; (800042c <cr95_wakeup+0x28>)
 800041c:	0018      	movs	r0, r3
 800041e:	f003 fea9 	bl	8004174 <puts>
}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	46bd      	mov	sp, r7
 8000426:	b002      	add	sp, #8
 8000428:	bd80      	pop	{r7, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	080054f0 	.word	0x080054f0

08000430 <cr95_init14>:

static void cr95_init14(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b086      	sub	sp, #24
 8000434:	af00      	add	r7, sp, #0
	const uint8_t cmd_init1[] = { 0x02, 0x02, 0x02, 0x00 };
 8000436:	2014      	movs	r0, #20
 8000438:	183b      	adds	r3, r7, r0
 800043a:	4a27      	ldr	r2, [pc, #156]	; (80004d8 <cr95_init14+0xa8>)
 800043c:	6812      	ldr	r2, [r2, #0]
 800043e:	601a      	str	r2, [r3, #0]
	const uint8_t cmd_init2[] = { 0x09, 0x04, 0x3A, 0x00, 0x58, 0x04 };
 8000440:	230c      	movs	r3, #12
 8000442:	18fb      	adds	r3, r7, r3
 8000444:	4a25      	ldr	r2, [pc, #148]	; (80004dc <cr95_init14+0xac>)
 8000446:	6811      	ldr	r1, [r2, #0]
 8000448:	6019      	str	r1, [r3, #0]
 800044a:	8892      	ldrh	r2, [r2, #4]
 800044c:	809a      	strh	r2, [r3, #4]
	const uint8_t cmd_init3[] = { 0x09, 0x04, 0x68, 0x01, 0x01, 0xD1 };
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	4a23      	ldr	r2, [pc, #140]	; (80004e0 <cr95_init14+0xb0>)
 8000452:	6811      	ldr	r1, [r2, #0]
 8000454:	6019      	str	r1, [r3, #0]
 8000456:	8892      	ldrh	r2, [r2, #4]
 8000458:	809a      	strh	r2, [r3, #4]

	cr95write(cmd_init1, sizeof(cmd_init1));
 800045a:	183b      	adds	r3, r7, r0
 800045c:	2104      	movs	r1, #4
 800045e:	0018      	movs	r0, r3
 8000460:	f7ff ff02 	bl	8000268 <cr95write>
	printf("Initiation of 14 %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 8000464:	2100      	movs	r1, #0
 8000466:	2000      	movs	r0, #0
 8000468:	f7ff ff14 	bl	8000294 <cr95read>
 800046c:	1e03      	subs	r3, r0, #0
 800046e:	d101      	bne.n	8000474 <cr95_init14+0x44>
 8000470:	4b1c      	ldr	r3, [pc, #112]	; (80004e4 <cr95_init14+0xb4>)
 8000472:	e000      	b.n	8000476 <cr95_init14+0x46>
 8000474:	4b1c      	ldr	r3, [pc, #112]	; (80004e8 <cr95_init14+0xb8>)
 8000476:	4a1d      	ldr	r2, [pc, #116]	; (80004ec <cr95_init14+0xbc>)
 8000478:	0019      	movs	r1, r3
 800047a:	0010      	movs	r0, r2
 800047c:	f003 fdec 	bl	8004058 <iprintf>
	cr95write(cmd_init2, sizeof(cmd_init2));
 8000480:	230c      	movs	r3, #12
 8000482:	18fb      	adds	r3, r7, r3
 8000484:	2106      	movs	r1, #6
 8000486:	0018      	movs	r0, r3
 8000488:	f7ff feee 	bl	8000268 <cr95write>
	printf(" %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 800048c:	2100      	movs	r1, #0
 800048e:	2000      	movs	r0, #0
 8000490:	f7ff ff00 	bl	8000294 <cr95read>
 8000494:	1e03      	subs	r3, r0, #0
 8000496:	d101      	bne.n	800049c <cr95_init14+0x6c>
 8000498:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <cr95_init14+0xb4>)
 800049a:	e000      	b.n	800049e <cr95_init14+0x6e>
 800049c:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <cr95_init14+0xb8>)
 800049e:	4a14      	ldr	r2, [pc, #80]	; (80004f0 <cr95_init14+0xc0>)
 80004a0:	0019      	movs	r1, r3
 80004a2:	0010      	movs	r0, r2
 80004a4:	f003 fdd8 	bl	8004058 <iprintf>
	cr95write(cmd_init3, sizeof(cmd_init3));
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2106      	movs	r1, #6
 80004ac:	0018      	movs	r0, r3
 80004ae:	f7ff fedb 	bl	8000268 <cr95write>
	printf(" %s\n", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 80004b2:	2100      	movs	r1, #0
 80004b4:	2000      	movs	r0, #0
 80004b6:	f7ff feed 	bl	8000294 <cr95read>
 80004ba:	1e03      	subs	r3, r0, #0
 80004bc:	d101      	bne.n	80004c2 <cr95_init14+0x92>
 80004be:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <cr95_init14+0xb4>)
 80004c0:	e000      	b.n	80004c4 <cr95_init14+0x94>
 80004c2:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <cr95_init14+0xb8>)
 80004c4:	4a0b      	ldr	r2, [pc, #44]	; (80004f4 <cr95_init14+0xc4>)
 80004c6:	0019      	movs	r1, r3
 80004c8:	0010      	movs	r0, r2
 80004ca:	f003 fdc5 	bl	8004058 <iprintf>
}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b006      	add	sp, #24
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	08005524 	.word	0x08005524
 80004dc:	08005528 	.word	0x08005528
 80004e0:	08005530 	.word	0x08005530
 80004e4:	080054fc 	.word	0x080054fc
 80004e8:	08005500 	.word	0x08005500
 80004ec:	08005504 	.word	0x08005504
 80004f0:	08005518 	.word	0x08005518
 80004f4:	0800551c 	.word	0x0800551c

080004f8 <cr95_init14B>:

static void cr95_init14B(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0
	const uint8_t cmd_init1B[] = { 0x02, 0x02, 0x03, 0x01 };
 80004fe:	2014      	movs	r0, #20
 8000500:	183b      	adds	r3, r7, r0
 8000502:	4a27      	ldr	r2, [pc, #156]	; (80005a0 <cr95_init14B+0xa8>)
 8000504:	6812      	ldr	r2, [r2, #0]
 8000506:	601a      	str	r2, [r3, #0]
	const uint8_t cmd_init2B[] = { 0x09, 0x04, 0x3A, 0x00, 0x58, 0x04 };
 8000508:	230c      	movs	r3, #12
 800050a:	18fb      	adds	r3, r7, r3
 800050c:	4a25      	ldr	r2, [pc, #148]	; (80005a4 <cr95_init14B+0xac>)
 800050e:	6811      	ldr	r1, [r2, #0]
 8000510:	6019      	str	r1, [r3, #0]
 8000512:	8892      	ldrh	r2, [r2, #4]
 8000514:	809a      	strh	r2, [r3, #4]
	const uint8_t cmd_init3B[] = { 0x09, 0x04, 0x68, 0x01, 0x01, 0x20 };
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	4a23      	ldr	r2, [pc, #140]	; (80005a8 <cr95_init14B+0xb0>)
 800051a:	6811      	ldr	r1, [r2, #0]
 800051c:	6019      	str	r1, [r3, #0]
 800051e:	8892      	ldrh	r2, [r2, #4]
 8000520:	809a      	strh	r2, [r3, #4]

	cr95write(cmd_init1B, sizeof(cmd_init1B));
 8000522:	183b      	adds	r3, r7, r0
 8000524:	2104      	movs	r1, #4
 8000526:	0018      	movs	r0, r3
 8000528:	f7ff fe9e 	bl	8000268 <cr95write>
	printf("Initiation of 14B %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 800052c:	2100      	movs	r1, #0
 800052e:	2000      	movs	r0, #0
 8000530:	f7ff feb0 	bl	8000294 <cr95read>
 8000534:	1e03      	subs	r3, r0, #0
 8000536:	d101      	bne.n	800053c <cr95_init14B+0x44>
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <cr95_init14B+0xb4>)
 800053a:	e000      	b.n	800053e <cr95_init14B+0x46>
 800053c:	4b1c      	ldr	r3, [pc, #112]	; (80005b0 <cr95_init14B+0xb8>)
 800053e:	4a1d      	ldr	r2, [pc, #116]	; (80005b4 <cr95_init14B+0xbc>)
 8000540:	0019      	movs	r1, r3
 8000542:	0010      	movs	r0, r2
 8000544:	f003 fd88 	bl	8004058 <iprintf>
	cr95write(cmd_init2B, sizeof(cmd_init2B));
 8000548:	230c      	movs	r3, #12
 800054a:	18fb      	adds	r3, r7, r3
 800054c:	2106      	movs	r1, #6
 800054e:	0018      	movs	r0, r3
 8000550:	f7ff fe8a 	bl	8000268 <cr95write>
	printf(" %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 8000554:	2100      	movs	r1, #0
 8000556:	2000      	movs	r0, #0
 8000558:	f7ff fe9c 	bl	8000294 <cr95read>
 800055c:	1e03      	subs	r3, r0, #0
 800055e:	d101      	bne.n	8000564 <cr95_init14B+0x6c>
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <cr95_init14B+0xb4>)
 8000562:	e000      	b.n	8000566 <cr95_init14B+0x6e>
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <cr95_init14B+0xb8>)
 8000566:	4a14      	ldr	r2, [pc, #80]	; (80005b8 <cr95_init14B+0xc0>)
 8000568:	0019      	movs	r1, r3
 800056a:	0010      	movs	r0, r2
 800056c:	f003 fd74 	bl	8004058 <iprintf>
	cr95write(cmd_init3B, sizeof(cmd_init3B));
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2106      	movs	r1, #6
 8000574:	0018      	movs	r0, r3
 8000576:	f7ff fe77 	bl	8000268 <cr95write>
	printf(" %s\n", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 800057a:	2100      	movs	r1, #0
 800057c:	2000      	movs	r0, #0
 800057e:	f7ff fe89 	bl	8000294 <cr95read>
 8000582:	1e03      	subs	r3, r0, #0
 8000584:	d101      	bne.n	800058a <cr95_init14B+0x92>
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <cr95_init14B+0xb4>)
 8000588:	e000      	b.n	800058c <cr95_init14B+0x94>
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <cr95_init14B+0xb8>)
 800058c:	4a0b      	ldr	r2, [pc, #44]	; (80005bc <cr95_init14B+0xc4>)
 800058e:	0019      	movs	r1, r3
 8000590:	0010      	movs	r0, r2
 8000592:	f003 fd61 	bl	8004058 <iprintf>
}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b006      	add	sp, #24
 800059c:	bd80      	pop	{r7, pc}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	08005550 	.word	0x08005550
 80005a4:	08005528 	.word	0x08005528
 80005a8:	08005554 	.word	0x08005554
 80005ac:	080054fc 	.word	0x080054fc
 80005b0:	08005500 	.word	0x08005500
 80005b4:	08005538 	.word	0x08005538
 80005b8:	08005518 	.word	0x08005518
 80005bc:	0800551c 	.word	0x0800551c

080005c0 <cr95_init15>:

static void cr95_init15(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
	const uint8_t cmd_init1_15[] = { 0x02, 0x02, 0x01, 0x03 };
 80005c6:	2014      	movs	r0, #20
 80005c8:	183b      	adds	r3, r7, r0
 80005ca:	4a27      	ldr	r2, [pc, #156]	; (8000668 <cr95_init15+0xa8>)
 80005cc:	6812      	ldr	r2, [r2, #0]
 80005ce:	601a      	str	r2, [r3, #0]
	const uint8_t cmd_init2_15[] = { 0x09, 0x04, 0x3A, 0x00, 0x58, 0x04 };
 80005d0:	230c      	movs	r3, #12
 80005d2:	18fb      	adds	r3, r7, r3
 80005d4:	4a25      	ldr	r2, [pc, #148]	; (800066c <cr95_init15+0xac>)
 80005d6:	6811      	ldr	r1, [r2, #0]
 80005d8:	6019      	str	r1, [r3, #0]
 80005da:	8892      	ldrh	r2, [r2, #4]
 80005dc:	809a      	strh	r2, [r3, #4]
	const uint8_t cmd_init3_15[] = { 0x09, 0x04, 0x68, 0x01, 0x01, 0xD0 };
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	4a23      	ldr	r2, [pc, #140]	; (8000670 <cr95_init15+0xb0>)
 80005e2:	6811      	ldr	r1, [r2, #0]
 80005e4:	6019      	str	r1, [r3, #0]
 80005e6:	8892      	ldrh	r2, [r2, #4]
 80005e8:	809a      	strh	r2, [r3, #4]

	cr95write(cmd_init1_15, sizeof(cmd_init1_15));
 80005ea:	183b      	adds	r3, r7, r0
 80005ec:	2104      	movs	r1, #4
 80005ee:	0018      	movs	r0, r3
 80005f0:	f7ff fe3a 	bl	8000268 <cr95write>
	printf("Initiation of 15 %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 80005f4:	2100      	movs	r1, #0
 80005f6:	2000      	movs	r0, #0
 80005f8:	f7ff fe4c 	bl	8000294 <cr95read>
 80005fc:	1e03      	subs	r3, r0, #0
 80005fe:	d101      	bne.n	8000604 <cr95_init15+0x44>
 8000600:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <cr95_init15+0xb4>)
 8000602:	e000      	b.n	8000606 <cr95_init15+0x46>
 8000604:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <cr95_init15+0xb8>)
 8000606:	4a1d      	ldr	r2, [pc, #116]	; (800067c <cr95_init15+0xbc>)
 8000608:	0019      	movs	r1, r3
 800060a:	0010      	movs	r0, r2
 800060c:	f003 fd24 	bl	8004058 <iprintf>
	cr95write(cmd_init2_15, sizeof(cmd_init2_15));
 8000610:	230c      	movs	r3, #12
 8000612:	18fb      	adds	r3, r7, r3
 8000614:	2106      	movs	r1, #6
 8000616:	0018      	movs	r0, r3
 8000618:	f7ff fe26 	bl	8000268 <cr95write>
	printf(" %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 800061c:	2100      	movs	r1, #0
 800061e:	2000      	movs	r0, #0
 8000620:	f7ff fe38 	bl	8000294 <cr95read>
 8000624:	1e03      	subs	r3, r0, #0
 8000626:	d101      	bne.n	800062c <cr95_init15+0x6c>
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <cr95_init15+0xb4>)
 800062a:	e000      	b.n	800062e <cr95_init15+0x6e>
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <cr95_init15+0xb8>)
 800062e:	4a14      	ldr	r2, [pc, #80]	; (8000680 <cr95_init15+0xc0>)
 8000630:	0019      	movs	r1, r3
 8000632:	0010      	movs	r0, r2
 8000634:	f003 fd10 	bl	8004058 <iprintf>
	cr95write(cmd_init3_15, sizeof(cmd_init3_15));
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2106      	movs	r1, #6
 800063c:	0018      	movs	r0, r3
 800063e:	f7ff fe13 	bl	8000268 <cr95write>
	printf(" %s\n", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 8000642:	2100      	movs	r1, #0
 8000644:	2000      	movs	r0, #0
 8000646:	f7ff fe25 	bl	8000294 <cr95read>
 800064a:	1e03      	subs	r3, r0, #0
 800064c:	d101      	bne.n	8000652 <cr95_init15+0x92>
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <cr95_init15+0xb4>)
 8000650:	e000      	b.n	8000654 <cr95_init15+0x94>
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <cr95_init15+0xb8>)
 8000654:	4a0b      	ldr	r2, [pc, #44]	; (8000684 <cr95_init15+0xc4>)
 8000656:	0019      	movs	r1, r3
 8000658:	0010      	movs	r0, r2
 800065a:	f003 fcfd 	bl	8004058 <iprintf>
}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	b006      	add	sp, #24
 8000664:	bd80      	pop	{r7, pc}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	08005570 	.word	0x08005570
 800066c:	08005528 	.word	0x08005528
 8000670:	08005574 	.word	0x08005574
 8000674:	080054fc 	.word	0x080054fc
 8000678:	08005500 	.word	0x08005500
 800067c:	0800555c 	.word	0x0800555c
 8000680:	08005518 	.word	0x08005518
 8000684:	0800551c 	.word	0x0800551c

08000688 <cr95_init18>:

static void cr95_init18(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af00      	add	r7, sp, #0
	const uint8_t cmd_init1_18[] = { 0x02, 0x02, 0x04, 0x51 };
 800068e:	201c      	movs	r0, #28
 8000690:	183b      	adds	r3, r7, r0
 8000692:	4a34      	ldr	r2, [pc, #208]	; (8000764 <cr95_init18+0xdc>)
 8000694:	6812      	ldr	r2, [r2, #0]
 8000696:	601a      	str	r2, [r3, #0]
	const uint8_t cmd_init2_18[] = { 0x09, 0x04, 0x3A, 0x00, 0x58, 0x04 };
 8000698:	2314      	movs	r3, #20
 800069a:	18fb      	adds	r3, r7, r3
 800069c:	4a32      	ldr	r2, [pc, #200]	; (8000768 <cr95_init18+0xe0>)
 800069e:	6811      	ldr	r1, [r2, #0]
 80006a0:	6019      	str	r1, [r3, #0]
 80006a2:	8892      	ldrh	r2, [r2, #4]
 80006a4:	809a      	strh	r2, [r3, #4]
	const uint8_t cmd_init3_18[] = { 0x09, 0x04, 0x68, 0x01, 0x01, 0x50 };
 80006a6:	230c      	movs	r3, #12
 80006a8:	18fb      	adds	r3, r7, r3
 80006aa:	4a30      	ldr	r2, [pc, #192]	; (800076c <cr95_init18+0xe4>)
 80006ac:	6811      	ldr	r1, [r2, #0]
 80006ae:	6019      	str	r1, [r3, #0]
 80006b0:	8892      	ldrh	r2, [r2, #4]
 80006b2:	809a      	strh	r2, [r3, #4]
	const uint8_t cmd_init4_18[] = { 0x09, 0x04, 0x0A, 0x01, 0x02, 0xA1 };
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	4a2e      	ldr	r2, [pc, #184]	; (8000770 <cr95_init18+0xe8>)
 80006b8:	6811      	ldr	r1, [r2, #0]
 80006ba:	6019      	str	r1, [r3, #0]
 80006bc:	8892      	ldrh	r2, [r2, #4]
 80006be:	809a      	strh	r2, [r3, #4]


	cr95write(cmd_init1_18, sizeof(cmd_init1_18));
 80006c0:	183b      	adds	r3, r7, r0
 80006c2:	2104      	movs	r1, #4
 80006c4:	0018      	movs	r0, r3
 80006c6:	f7ff fdcf 	bl	8000268 <cr95write>
	printf("Initiation of 18 %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 80006ca:	2100      	movs	r1, #0
 80006cc:	2000      	movs	r0, #0
 80006ce:	f7ff fde1 	bl	8000294 <cr95read>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	d101      	bne.n	80006da <cr95_init18+0x52>
 80006d6:	4b27      	ldr	r3, [pc, #156]	; (8000774 <cr95_init18+0xec>)
 80006d8:	e000      	b.n	80006dc <cr95_init18+0x54>
 80006da:	4b27      	ldr	r3, [pc, #156]	; (8000778 <cr95_init18+0xf0>)
 80006dc:	4a27      	ldr	r2, [pc, #156]	; (800077c <cr95_init18+0xf4>)
 80006de:	0019      	movs	r1, r3
 80006e0:	0010      	movs	r0, r2
 80006e2:	f003 fcb9 	bl	8004058 <iprintf>
	cr95write(cmd_init2_18, sizeof(cmd_init2_18));
 80006e6:	2314      	movs	r3, #20
 80006e8:	18fb      	adds	r3, r7, r3
 80006ea:	2106      	movs	r1, #6
 80006ec:	0018      	movs	r0, r3
 80006ee:	f7ff fdbb 	bl	8000268 <cr95write>
	printf(" %s", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 80006f2:	2100      	movs	r1, #0
 80006f4:	2000      	movs	r0, #0
 80006f6:	f7ff fdcd 	bl	8000294 <cr95read>
 80006fa:	1e03      	subs	r3, r0, #0
 80006fc:	d101      	bne.n	8000702 <cr95_init18+0x7a>
 80006fe:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <cr95_init18+0xec>)
 8000700:	e000      	b.n	8000704 <cr95_init18+0x7c>
 8000702:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <cr95_init18+0xf0>)
 8000704:	4a1e      	ldr	r2, [pc, #120]	; (8000780 <cr95_init18+0xf8>)
 8000706:	0019      	movs	r1, r3
 8000708:	0010      	movs	r0, r2
 800070a:	f003 fca5 	bl	8004058 <iprintf>
	cr95write(cmd_init3_18, sizeof(cmd_init3_18));
 800070e:	230c      	movs	r3, #12
 8000710:	18fb      	adds	r3, r7, r3
 8000712:	2106      	movs	r1, #6
 8000714:	0018      	movs	r0, r3
 8000716:	f7ff fda7 	bl	8000268 <cr95write>
	printf(" %s\n", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 800071a:	2100      	movs	r1, #0
 800071c:	2000      	movs	r0, #0
 800071e:	f7ff fdb9 	bl	8000294 <cr95read>
 8000722:	1e03      	subs	r3, r0, #0
 8000724:	d101      	bne.n	800072a <cr95_init18+0xa2>
 8000726:	4b13      	ldr	r3, [pc, #76]	; (8000774 <cr95_init18+0xec>)
 8000728:	e000      	b.n	800072c <cr95_init18+0xa4>
 800072a:	4b13      	ldr	r3, [pc, #76]	; (8000778 <cr95_init18+0xf0>)
 800072c:	4a15      	ldr	r2, [pc, #84]	; (8000784 <cr95_init18+0xfc>)
 800072e:	0019      	movs	r1, r3
 8000730:	0010      	movs	r0, r2
 8000732:	f003 fc91 	bl	8004058 <iprintf>
	cr95write(cmd_init4_18, sizeof(cmd_init4_18));
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2106      	movs	r1, #6
 800073a:	0018      	movs	r0, r3
 800073c:	f7ff fd94 	bl	8000268 <cr95write>
	printf(" %s\n", (cr95read(NULL, NULL) == 0x00) ? "yes" : "no");
 8000740:	2100      	movs	r1, #0
 8000742:	2000      	movs	r0, #0
 8000744:	f7ff fda6 	bl	8000294 <cr95read>
 8000748:	1e03      	subs	r3, r0, #0
 800074a:	d101      	bne.n	8000750 <cr95_init18+0xc8>
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <cr95_init18+0xec>)
 800074e:	e000      	b.n	8000752 <cr95_init18+0xca>
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <cr95_init18+0xf0>)
 8000752:	4a0c      	ldr	r2, [pc, #48]	; (8000784 <cr95_init18+0xfc>)
 8000754:	0019      	movs	r1, r3
 8000756:	0010      	movs	r0, r2
 8000758:	f003 fc7e 	bl	8004058 <iprintf>
}
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	b008      	add	sp, #32
 8000762:	bd80      	pop	{r7, pc}
 8000764:	08005590 	.word	0x08005590
 8000768:	08005528 	.word	0x08005528
 800076c:	08005594 	.word	0x08005594
 8000770:	0800559c 	.word	0x0800559c
 8000774:	080054fc 	.word	0x080054fc
 8000778:	08005500 	.word	0x08005500
 800077c:	0800557c 	.word	0x0800557c
 8000780:	08005518 	.word	0x08005518
 8000784:	0800551c 	.word	0x0800551c

08000788 <cr95_read>:


static void cr95_read(void)
{
 8000788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800078a:	b097      	sub	sp, #92	; 0x5c
 800078c:	af04      	add	r7, sp, #16
	const uint8_t cmd_reqa[] =  { 0x04, 0x02, 0x26, 0x07 };
 800078e:	2040      	movs	r0, #64	; 0x40
 8000790:	183b      	adds	r3, r7, r0
 8000792:	4ab8      	ldr	r2, [pc, #736]	; (8000a74 <cr95_read+0x2ec>)
 8000794:	6812      	ldr	r2, [r2, #0]
 8000796:	601a      	str	r2, [r3, #0]
	const uint8_t cmd_acl1[] =  { 0x04, 0x03, 0x93, 0x20, 0x08 };
 8000798:	2338      	movs	r3, #56	; 0x38
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	4ab6      	ldr	r2, [pc, #728]	; (8000a78 <cr95_read+0x2f0>)
 800079e:	6811      	ldr	r1, [r2, #0]
 80007a0:	6019      	str	r1, [r3, #0]
 80007a2:	7912      	ldrb	r2, [r2, #4]
 80007a4:	711a      	strb	r2, [r3, #4]
	const uint8_t cmd_acl2[] =  { 0x04, 0x03, 0x95, 0x20, 0x08 };
 80007a6:	2330      	movs	r3, #48	; 0x30
 80007a8:	18fb      	adds	r3, r7, r3
 80007aa:	4ab4      	ldr	r2, [pc, #720]	; (8000a7c <cr95_read+0x2f4>)
 80007ac:	6811      	ldr	r1, [r2, #0]
 80007ae:	6019      	str	r1, [r3, #0]
 80007b0:	7912      	ldrb	r2, [r2, #4]
 80007b2:	711a      	strb	r2, [r3, #4]

	uint8_t data[8];
	char uid[32];
	uint8_t len;

	cr95write(cmd_reqa, sizeof(cmd_reqa));
 80007b4:	183b      	adds	r3, r7, r0
 80007b6:	2104      	movs	r1, #4
 80007b8:	0018      	movs	r0, r3
 80007ba:	f7ff fd55 	bl	8000268 <cr95write>
	if (cr95read(data, &len) == 0x80) {
 80007be:	1dfa      	adds	r2, r7, #7
 80007c0:	2328      	movs	r3, #40	; 0x28
 80007c2:	18fb      	adds	r3, r7, r3
 80007c4:	0011      	movs	r1, r2
 80007c6:	0018      	movs	r0, r3
 80007c8:	f7ff fd64 	bl	8000294 <cr95read>
 80007cc:	0003      	movs	r3, r0
 80007ce:	2b80      	cmp	r3, #128	; 0x80
 80007d0:	d000      	beq.n	80007d4 <cr95_read+0x4c>
 80007d2:	e147      	b.n	8000a64 <cr95_read+0x2dc>
		printf("ATQA =");
 80007d4:	4baa      	ldr	r3, [pc, #680]	; (8000a80 <cr95_read+0x2f8>)
 80007d6:	0018      	movs	r0, r3
 80007d8:	f003 fc3e 	bl	8004058 <iprintf>
		for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 80007dc:	2347      	movs	r3, #71	; 0x47
 80007de:	18fb      	adds	r3, r7, r3
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
 80007e4:	e010      	b.n	8000808 <cr95_read+0x80>
 80007e6:	2447      	movs	r4, #71	; 0x47
 80007e8:	193b      	adds	r3, r7, r4
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2228      	movs	r2, #40	; 0x28
 80007ee:	18ba      	adds	r2, r7, r2
 80007f0:	5cd3      	ldrb	r3, [r2, r3]
 80007f2:	001a      	movs	r2, r3
 80007f4:	4ba3      	ldr	r3, [pc, #652]	; (8000a84 <cr95_read+0x2fc>)
 80007f6:	0011      	movs	r1, r2
 80007f8:	0018      	movs	r0, r3
 80007fa:	f003 fc2d 	bl	8004058 <iprintf>
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	781a      	ldrb	r2, [r3, #0]
 8000802:	193b      	adds	r3, r7, r4
 8000804:	3201      	adds	r2, #1
 8000806:	701a      	strb	r2, [r3, #0]
 8000808:	1dfb      	adds	r3, r7, #7
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2247      	movs	r2, #71	; 0x47
 800080e:	18ba      	adds	r2, r7, r2
 8000810:	7812      	ldrb	r2, [r2, #0]
 8000812:	429a      	cmp	r2, r3
 8000814:	d3e7      	bcc.n	80007e6 <cr95_read+0x5e>
		printf("\n");
 8000816:	200a      	movs	r0, #10
 8000818:	f003 fc38 	bl	800408c <putchar>

    	sprintf(uid, "UID =");
 800081c:	2308      	movs	r3, #8
 800081e:	18fb      	adds	r3, r7, r3
 8000820:	4a99      	ldr	r2, [pc, #612]	; (8000a88 <cr95_read+0x300>)
 8000822:	6811      	ldr	r1, [r2, #0]
 8000824:	6019      	str	r1, [r3, #0]
 8000826:	8892      	ldrh	r2, [r2, #4]
 8000828:	809a      	strh	r2, [r3, #4]

    	cr95write(cmd_acl1, sizeof(cmd_acl1));
 800082a:	2338      	movs	r3, #56	; 0x38
 800082c:	18fb      	adds	r3, r7, r3
 800082e:	2105      	movs	r1, #5
 8000830:	0018      	movs	r0, r3
 8000832:	f7ff fd19 	bl	8000268 <cr95write>
    	if (cr95read(data, &len) == 0x80 && len == 8 && (data[0]^data[1]^data[2]^data[3]) == data[4]) {
 8000836:	1dfa      	adds	r2, r7, #7
 8000838:	2328      	movs	r3, #40	; 0x28
 800083a:	18fb      	adds	r3, r7, r3
 800083c:	0011      	movs	r1, r2
 800083e:	0018      	movs	r0, r3
 8000840:	f7ff fd28 	bl	8000294 <cr95read>
 8000844:	0003      	movs	r3, r0
 8000846:	2b80      	cmp	r3, #128	; 0x80
 8000848:	d000      	beq.n	800084c <cr95_read+0xc4>
 800084a:	e106      	b.n	8000a5a <cr95_read+0x2d2>
 800084c:	1dfb      	adds	r3, r7, #7
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b08      	cmp	r3, #8
 8000852:	d000      	beq.n	8000856 <cr95_read+0xce>
 8000854:	e101      	b.n	8000a5a <cr95_read+0x2d2>
 8000856:	2128      	movs	r1, #40	; 0x28
 8000858:	187b      	adds	r3, r7, r1
 800085a:	781a      	ldrb	r2, [r3, #0]
 800085c:	187b      	adds	r3, r7, r1
 800085e:	785b      	ldrb	r3, [r3, #1]
 8000860:	4053      	eors	r3, r2
 8000862:	b2da      	uxtb	r2, r3
 8000864:	187b      	adds	r3, r7, r1
 8000866:	789b      	ldrb	r3, [r3, #2]
 8000868:	4053      	eors	r3, r2
 800086a:	b2da      	uxtb	r2, r3
 800086c:	187b      	adds	r3, r7, r1
 800086e:	78db      	ldrb	r3, [r3, #3]
 8000870:	4053      	eors	r3, r2
 8000872:	b2da      	uxtb	r2, r3
 8000874:	187b      	adds	r3, r7, r1
 8000876:	791b      	ldrb	r3, [r3, #4]
 8000878:	429a      	cmp	r2, r3
 800087a:	d000      	beq.n	800087e <cr95_read+0xf6>
 800087c:	e0ed      	b.n	8000a5a <cr95_read+0x2d2>
    		printf("UID CL1 =");
 800087e:	4b83      	ldr	r3, [pc, #524]	; (8000a8c <cr95_read+0x304>)
 8000880:	0018      	movs	r0, r3
 8000882:	f003 fbe9 	bl	8004058 <iprintf>

    		for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8000886:	2346      	movs	r3, #70	; 0x46
 8000888:	18fb      	adds	r3, r7, r3
 800088a:	2200      	movs	r2, #0
 800088c:	701a      	strb	r2, [r3, #0]
 800088e:	e010      	b.n	80008b2 <cr95_read+0x12a>
 8000890:	2446      	movs	r4, #70	; 0x46
 8000892:	193b      	adds	r3, r7, r4
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2228      	movs	r2, #40	; 0x28
 8000898:	18ba      	adds	r2, r7, r2
 800089a:	5cd3      	ldrb	r3, [r2, r3]
 800089c:	001a      	movs	r2, r3
 800089e:	4b79      	ldr	r3, [pc, #484]	; (8000a84 <cr95_read+0x2fc>)
 80008a0:	0011      	movs	r1, r2
 80008a2:	0018      	movs	r0, r3
 80008a4:	f003 fbd8 	bl	8004058 <iprintf>
 80008a8:	193b      	adds	r3, r7, r4
 80008aa:	781a      	ldrb	r2, [r3, #0]
 80008ac:	193b      	adds	r3, r7, r4
 80008ae:	3201      	adds	r2, #1
 80008b0:	701a      	strb	r2, [r3, #0]
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2246      	movs	r2, #70	; 0x46
 80008b8:	18ba      	adds	r2, r7, r2
 80008ba:	7812      	ldrb	r2, [r2, #0]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d3e7      	bcc.n	8000890 <cr95_read+0x108>
    		printf("\n");
 80008c0:	200a      	movs	r0, #10
 80008c2:	f003 fbe3 	bl	800408c <putchar>


    		if (data[5] & 0x80) printf("Collision detected!\n");                                                         //not sure if 0x80 is correct
 80008c6:	2328      	movs	r3, #40	; 0x28
 80008c8:	18fb      	adds	r3, r7, r3
 80008ca:	795b      	ldrb	r3, [r3, #5]
 80008cc:	b25b      	sxtb	r3, r3
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	da03      	bge.n	80008da <cr95_read+0x152>
 80008d2:	4b6f      	ldr	r3, [pc, #444]	; (8000a90 <cr95_read+0x308>)
 80008d4:	0018      	movs	r0, r3
 80008d6:	f003 fc4d 	bl	8004174 <puts>
    		if (data[0] == 0x88) {
 80008da:	2328      	movs	r3, #40	; 0x28
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b88      	cmp	r3, #136	; 0x88
 80008e2:	d000      	beq.n	80008e6 <cr95_read+0x15e>
 80008e4:	e095      	b.n	8000a12 <cr95_read+0x28a>
    			sprintf(uid, "%s %2X %2X %2X\n", uid, data[1], data[2], data[3]);
 80008e6:	2628      	movs	r6, #40	; 0x28
 80008e8:	19bb      	adds	r3, r7, r6
 80008ea:	785b      	ldrb	r3, [r3, #1]
 80008ec:	001d      	movs	r5, r3
 80008ee:	19bb      	adds	r3, r7, r6
 80008f0:	789b      	ldrb	r3, [r3, #2]
 80008f2:	001c      	movs	r4, r3
 80008f4:	19bb      	adds	r3, r7, r6
 80008f6:	78db      	ldrb	r3, [r3, #3]
 80008f8:	2008      	movs	r0, #8
 80008fa:	183a      	adds	r2, r7, r0
 80008fc:	4965      	ldr	r1, [pc, #404]	; (8000a94 <cr95_read+0x30c>)
 80008fe:	1838      	adds	r0, r7, r0
 8000900:	9301      	str	r3, [sp, #4]
 8000902:	9400      	str	r4, [sp, #0]
 8000904:	002b      	movs	r3, r5
 8000906:	f003 fc3f 	bl	8004188 <siprintf>

				cr95write(cmd_acl2, sizeof(cmd_acl2));
 800090a:	2330      	movs	r3, #48	; 0x30
 800090c:	18fb      	adds	r3, r7, r3
 800090e:	2105      	movs	r1, #5
 8000910:	0018      	movs	r0, r3
 8000912:	f7ff fca9 	bl	8000268 <cr95write>
				if (cr95read(data, &len) == 0x80 && (data[0]^data[1]^data[2]^data[3]) == data[4]) {
 8000916:	1dfa      	adds	r2, r7, #7
 8000918:	19bb      	adds	r3, r7, r6
 800091a:	0011      	movs	r1, r2
 800091c:	0018      	movs	r0, r3
 800091e:	f7ff fcb9 	bl	8000294 <cr95read>
 8000922:	0003      	movs	r3, r0
 8000924:	2b80      	cmp	r3, #128	; 0x80
 8000926:	d16f      	bne.n	8000a08 <cr95_read+0x280>
 8000928:	2128      	movs	r1, #40	; 0x28
 800092a:	187b      	adds	r3, r7, r1
 800092c:	781a      	ldrb	r2, [r3, #0]
 800092e:	187b      	adds	r3, r7, r1
 8000930:	785b      	ldrb	r3, [r3, #1]
 8000932:	4053      	eors	r3, r2
 8000934:	b2da      	uxtb	r2, r3
 8000936:	187b      	adds	r3, r7, r1
 8000938:	789b      	ldrb	r3, [r3, #2]
 800093a:	4053      	eors	r3, r2
 800093c:	b2da      	uxtb	r2, r3
 800093e:	187b      	adds	r3, r7, r1
 8000940:	78db      	ldrb	r3, [r3, #3]
 8000942:	4053      	eors	r3, r2
 8000944:	b2da      	uxtb	r2, r3
 8000946:	187b      	adds	r3, r7, r1
 8000948:	791b      	ldrb	r3, [r3, #4]
 800094a:	429a      	cmp	r2, r3
 800094c:	d15c      	bne.n	8000a08 <cr95_read+0x280>
					printf("UID CL2 =");
 800094e:	4b52      	ldr	r3, [pc, #328]	; (8000a98 <cr95_read+0x310>)
 8000950:	0018      	movs	r0, r3
 8000952:	f003 fb81 	bl	8004058 <iprintf>
					for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8000956:	2345      	movs	r3, #69	; 0x45
 8000958:	18fb      	adds	r3, r7, r3
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
 800095e:	e010      	b.n	8000982 <cr95_read+0x1fa>
 8000960:	2445      	movs	r4, #69	; 0x45
 8000962:	193b      	adds	r3, r7, r4
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2228      	movs	r2, #40	; 0x28
 8000968:	18ba      	adds	r2, r7, r2
 800096a:	5cd3      	ldrb	r3, [r2, r3]
 800096c:	001a      	movs	r2, r3
 800096e:	4b45      	ldr	r3, [pc, #276]	; (8000a84 <cr95_read+0x2fc>)
 8000970:	0011      	movs	r1, r2
 8000972:	0018      	movs	r0, r3
 8000974:	f003 fb70 	bl	8004058 <iprintf>
 8000978:	193b      	adds	r3, r7, r4
 800097a:	781a      	ldrb	r2, [r3, #0]
 800097c:	193b      	adds	r3, r7, r4
 800097e:	3201      	adds	r2, #1
 8000980:	701a      	strb	r2, [r3, #0]
 8000982:	1dfb      	adds	r3, r7, #7
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2245      	movs	r2, #69	; 0x45
 8000988:	18ba      	adds	r2, r7, r2
 800098a:	7812      	ldrb	r2, [r2, #0]
 800098c:	429a      	cmp	r2, r3
 800098e:	d3e7      	bcc.n	8000960 <cr95_read+0x1d8>
					printf("\n");
 8000990:	200a      	movs	r0, #10
 8000992:	f003 fb7b 	bl	800408c <putchar>

		    		if (data[5] & 0x80) printf("Collision detected!\n");
 8000996:	2328      	movs	r3, #40	; 0x28
 8000998:	18fb      	adds	r3, r7, r3
 800099a:	795b      	ldrb	r3, [r3, #5]
 800099c:	b25b      	sxtb	r3, r3
 800099e:	2b00      	cmp	r3, #0
 80009a0:	da03      	bge.n	80009aa <cr95_read+0x222>
 80009a2:	4b3b      	ldr	r3, [pc, #236]	; (8000a90 <cr95_read+0x308>)
 80009a4:	0018      	movs	r0, r3
 80009a6:	f003 fbe5 	bl	8004174 <puts>
		    		if (data[0] == 0x88) {
 80009aa:	2328      	movs	r3, #40	; 0x28
 80009ac:	18fb      	adds	r3, r7, r3
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b88      	cmp	r3, #136	; 0x88
 80009b2:	d112      	bne.n	80009da <cr95_read+0x252>
		    			sprintf(uid, "%s %2X %2X %2X\n", uid, data[1], data[2], data[3]);
 80009b4:	2228      	movs	r2, #40	; 0x28
 80009b6:	18bb      	adds	r3, r7, r2
 80009b8:	785b      	ldrb	r3, [r3, #1]
 80009ba:	001d      	movs	r5, r3
 80009bc:	18bb      	adds	r3, r7, r2
 80009be:	789b      	ldrb	r3, [r3, #2]
 80009c0:	001c      	movs	r4, r3
 80009c2:	18bb      	adds	r3, r7, r2
 80009c4:	78db      	ldrb	r3, [r3, #3]
 80009c6:	2008      	movs	r0, #8
 80009c8:	183a      	adds	r2, r7, r0
 80009ca:	4932      	ldr	r1, [pc, #200]	; (8000a94 <cr95_read+0x30c>)
 80009cc:	1838      	adds	r0, r7, r0
 80009ce:	9301      	str	r3, [sp, #4]
 80009d0:	9400      	str	r4, [sp, #0]
 80009d2:	002b      	movs	r3, r5
 80009d4:	f003 fbd8 	bl	8004188 <siprintf>
		    		if (data[0] == 0x88) {
 80009d8:	e031      	b.n	8000a3e <cr95_read+0x2b6>
			    			sprintf(uid, "%s %2X %2X %2X %2X", uid, data[0], data[1], data[2], data[3]);
						} else {
							printf("UID CL3 error\n");
						} */
		    		} else {
		    			sprintf(uid, "%s %2X %2X %2X %2X\n", uid, data[0], data[1], data[2], data[3]);
 80009da:	2228      	movs	r2, #40	; 0x28
 80009dc:	18bb      	adds	r3, r7, r2
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	001e      	movs	r6, r3
 80009e2:	18bb      	adds	r3, r7, r2
 80009e4:	785b      	ldrb	r3, [r3, #1]
 80009e6:	001c      	movs	r4, r3
 80009e8:	18bb      	adds	r3, r7, r2
 80009ea:	789b      	ldrb	r3, [r3, #2]
 80009ec:	001d      	movs	r5, r3
 80009ee:	18bb      	adds	r3, r7, r2
 80009f0:	78db      	ldrb	r3, [r3, #3]
 80009f2:	2008      	movs	r0, #8
 80009f4:	183a      	adds	r2, r7, r0
 80009f6:	4929      	ldr	r1, [pc, #164]	; (8000a9c <cr95_read+0x314>)
 80009f8:	1838      	adds	r0, r7, r0
 80009fa:	9302      	str	r3, [sp, #8]
 80009fc:	9501      	str	r5, [sp, #4]
 80009fe:	9400      	str	r4, [sp, #0]
 8000a00:	0033      	movs	r3, r6
 8000a02:	f003 fbc1 	bl	8004188 <siprintf>
		    		if (data[0] == 0x88) {
 8000a06:	e01a      	b.n	8000a3e <cr95_read+0x2b6>
		    		}
				} else {
					printf("UID CL2 error\n");
 8000a08:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <cr95_read+0x318>)
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f003 fbb2 	bl	8004174 <puts>
 8000a10:	e015      	b.n	8000a3e <cr95_read+0x2b6>
				}

    		} else {
    			sprintf(uid, "%s %2X %2X %2X %2X\n", uid, data[0], data[1], data[2], data[3]);
 8000a12:	2228      	movs	r2, #40	; 0x28
 8000a14:	18bb      	adds	r3, r7, r2
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	001e      	movs	r6, r3
 8000a1a:	18bb      	adds	r3, r7, r2
 8000a1c:	785b      	ldrb	r3, [r3, #1]
 8000a1e:	001c      	movs	r4, r3
 8000a20:	18bb      	adds	r3, r7, r2
 8000a22:	789b      	ldrb	r3, [r3, #2]
 8000a24:	001d      	movs	r5, r3
 8000a26:	18bb      	adds	r3, r7, r2
 8000a28:	78db      	ldrb	r3, [r3, #3]
 8000a2a:	2008      	movs	r0, #8
 8000a2c:	183a      	adds	r2, r7, r0
 8000a2e:	491b      	ldr	r1, [pc, #108]	; (8000a9c <cr95_read+0x314>)
 8000a30:	1838      	adds	r0, r7, r0
 8000a32:	9302      	str	r3, [sp, #8]
 8000a34:	9501      	str	r5, [sp, #4]
 8000a36:	9400      	str	r4, [sp, #0]
 8000a38:	0033      	movs	r3, r6
 8000a3a:	f003 fba5 	bl	8004188 <siprintf>
    		}


    		HAL_UART_Transmit(&huart2, (uint8_t*)(uid), strlen(uid), HAL_MAX_DELAY);
 8000a3e:	2408      	movs	r4, #8
 8000a40:	193b      	adds	r3, r7, r4
 8000a42:	0018      	movs	r0, r3
 8000a44:	f7ff fb60 	bl	8000108 <strlen>
 8000a48:	0003      	movs	r3, r0
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	425b      	negs	r3, r3
 8000a50:	1939      	adds	r1, r7, r4
 8000a52:	4814      	ldr	r0, [pc, #80]	; (8000aa4 <cr95_read+0x31c>)
 8000a54:	f002 fd68 	bl	8003528 <HAL_UART_Transmit>
    	}

	} else {
		printf("REQA error\n");
	}
}
 8000a58:	e008      	b.n	8000a6c <cr95_read+0x2e4>
    		printf("UID CL1 error\n");
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <cr95_read+0x320>)
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f003 fb89 	bl	8004174 <puts>
}
 8000a62:	e003      	b.n	8000a6c <cr95_read+0x2e4>
		printf("REQA error\n");
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <cr95_read+0x324>)
 8000a66:	0018      	movs	r0, r3
 8000a68:	f003 fb84 	bl	8004174 <puts>
}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	b013      	add	sp, #76	; 0x4c
 8000a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a74:	08005638 	.word	0x08005638
 8000a78:	0800563c 	.word	0x0800563c
 8000a7c:	08005644 	.word	0x08005644
 8000a80:	080055a4 	.word	0x080055a4
 8000a84:	080055ac 	.word	0x080055ac
 8000a88:	080055b4 	.word	0x080055b4
 8000a8c:	080055bc 	.word	0x080055bc
 8000a90:	080055c8 	.word	0x080055c8
 8000a94:	080055dc 	.word	0x080055dc
 8000a98:	080055ec 	.word	0x080055ec
 8000a9c:	080055f8 	.word	0x080055f8
 8000aa0:	0800560c 	.word	0x0800560c
 8000aa4:	200003dc 	.word	0x200003dc
 8000aa8:	0800561c 	.word	0x0800561c
 8000aac:	0800562c 	.word	0x0800562c

08000ab0 <cr95_readtopaz>:

static void cr95_readtopaz(void)
{
 8000ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ab2:	b097      	sub	sp, #92	; 0x5c
 8000ab4:	af04      	add	r7, sp, #16
	const uint8_t cmd_reqtopaz[] =  { 0x04, 0x02, 0x26, 0x07 };
 8000ab6:	2140      	movs	r1, #64	; 0x40
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	4a52      	ldr	r2, [pc, #328]	; (8000c04 <cr95_readtopaz+0x154>)
 8000abc:	6812      	ldr	r2, [r2, #0]
 8000abe:	601a      	str	r2, [r3, #0]
	const uint8_t cmd_rid[]      =  { 0x04, 0x08, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA8 };
 8000ac0:	2334      	movs	r3, #52	; 0x34
 8000ac2:	18fb      	adds	r3, r7, r3
 8000ac4:	4a50      	ldr	r2, [pc, #320]	; (8000c08 <cr95_readtopaz+0x158>)
 8000ac6:	ca11      	ldmia	r2!, {r0, r4}
 8000ac8:	c311      	stmia	r3!, {r0, r4}
 8000aca:	8812      	ldrh	r2, [r2, #0]
 8000acc:	801a      	strh	r2, [r3, #0]

	uint8_t data[16];
	char uid[32];
	uint8_t len;

	cr95write(cmd_reqtopaz, sizeof(cmd_reqtopaz));
 8000ace:	187b      	adds	r3, r7, r1
 8000ad0:	2104      	movs	r1, #4
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f7ff fbc8 	bl	8000268 <cr95write>
	if (cr95read(data, &len) == 0x80) {
 8000ad8:	1cfa      	adds	r2, r7, #3
 8000ada:	2324      	movs	r3, #36	; 0x24
 8000adc:	18fb      	adds	r3, r7, r3
 8000ade:	0011      	movs	r1, r2
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f7ff fbd7 	bl	8000294 <cr95read>
 8000ae6:	0003      	movs	r3, r0
 8000ae8:	2b80      	cmp	r3, #128	; 0x80
 8000aea:	d000      	beq.n	8000aee <cr95_readtopaz+0x3e>
 8000aec:	e085      	b.n	8000bfa <cr95_readtopaz+0x14a>
		printf("ATQA =");
 8000aee:	4b47      	ldr	r3, [pc, #284]	; (8000c0c <cr95_readtopaz+0x15c>)
 8000af0:	0018      	movs	r0, r3
 8000af2:	f003 fab1 	bl	8004058 <iprintf>
		for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8000af6:	2347      	movs	r3, #71	; 0x47
 8000af8:	18fb      	adds	r3, r7, r3
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
 8000afe:	e010      	b.n	8000b22 <cr95_readtopaz+0x72>
 8000b00:	2447      	movs	r4, #71	; 0x47
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2224      	movs	r2, #36	; 0x24
 8000b08:	18ba      	adds	r2, r7, r2
 8000b0a:	5cd3      	ldrb	r3, [r2, r3]
 8000b0c:	001a      	movs	r2, r3
 8000b0e:	4b40      	ldr	r3, [pc, #256]	; (8000c10 <cr95_readtopaz+0x160>)
 8000b10:	0011      	movs	r1, r2
 8000b12:	0018      	movs	r0, r3
 8000b14:	f003 faa0 	bl	8004058 <iprintf>
 8000b18:	193b      	adds	r3, r7, r4
 8000b1a:	781a      	ldrb	r2, [r3, #0]
 8000b1c:	193b      	adds	r3, r7, r4
 8000b1e:	3201      	adds	r2, #1
 8000b20:	701a      	strb	r2, [r3, #0]
 8000b22:	1cfb      	adds	r3, r7, #3
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2247      	movs	r2, #71	; 0x47
 8000b28:	18ba      	adds	r2, r7, r2
 8000b2a:	7812      	ldrb	r2, [r2, #0]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d3e7      	bcc.n	8000b00 <cr95_readtopaz+0x50>
		printf("\n");
 8000b30:	200a      	movs	r0, #10
 8000b32:	f003 faab 	bl	800408c <putchar>

		sprintf(uid, "UID =");
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	4a36      	ldr	r2, [pc, #216]	; (8000c14 <cr95_readtopaz+0x164>)
 8000b3a:	6811      	ldr	r1, [r2, #0]
 8000b3c:	6019      	str	r1, [r3, #0]
 8000b3e:	8892      	ldrh	r2, [r2, #4]
 8000b40:	809a      	strh	r2, [r3, #4]

		cr95write(cmd_rid, sizeof(cmd_rid));
 8000b42:	2334      	movs	r3, #52	; 0x34
 8000b44:	18fb      	adds	r3, r7, r3
 8000b46:	210a      	movs	r1, #10
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f7ff fb8d 	bl	8000268 <cr95write>
		if (cr95read(data, &len) == 0x80 ) {
 8000b4e:	1cfa      	adds	r2, r7, #3
 8000b50:	2324      	movs	r3, #36	; 0x24
 8000b52:	18fb      	adds	r3, r7, r3
 8000b54:	0011      	movs	r1, r2
 8000b56:	0018      	movs	r0, r3
 8000b58:	f7ff fb9c 	bl	8000294 <cr95read>
 8000b5c:	0003      	movs	r3, r0
 8000b5e:	2b80      	cmp	r3, #128	; 0x80
 8000b60:	d14b      	bne.n	8000bfa <cr95_readtopaz+0x14a>
			printf("RID =");
 8000b62:	4b2d      	ldr	r3, [pc, #180]	; (8000c18 <cr95_readtopaz+0x168>)
 8000b64:	0018      	movs	r0, r3
 8000b66:	f003 fa77 	bl	8004058 <iprintf>
			for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8000b6a:	2346      	movs	r3, #70	; 0x46
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
 8000b72:	e010      	b.n	8000b96 <cr95_readtopaz+0xe6>
 8000b74:	2446      	movs	r4, #70	; 0x46
 8000b76:	193b      	adds	r3, r7, r4
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2224      	movs	r2, #36	; 0x24
 8000b7c:	18ba      	adds	r2, r7, r2
 8000b7e:	5cd3      	ldrb	r3, [r2, r3]
 8000b80:	001a      	movs	r2, r3
 8000b82:	4b23      	ldr	r3, [pc, #140]	; (8000c10 <cr95_readtopaz+0x160>)
 8000b84:	0011      	movs	r1, r2
 8000b86:	0018      	movs	r0, r3
 8000b88:	f003 fa66 	bl	8004058 <iprintf>
 8000b8c:	193b      	adds	r3, r7, r4
 8000b8e:	781a      	ldrb	r2, [r3, #0]
 8000b90:	193b      	adds	r3, r7, r4
 8000b92:	3201      	adds	r2, #1
 8000b94:	701a      	strb	r2, [r3, #0]
 8000b96:	1cfb      	adds	r3, r7, #3
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2246      	movs	r2, #70	; 0x46
 8000b9c:	18ba      	adds	r2, r7, r2
 8000b9e:	7812      	ldrb	r2, [r2, #0]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d3e7      	bcc.n	8000b74 <cr95_readtopaz+0xc4>
			printf("\n");
 8000ba4:	200a      	movs	r0, #10
 8000ba6:	f003 fa71 	bl	800408c <putchar>
			printf("Header 1 = %2X", data[0]);
 8000baa:	2424      	movs	r4, #36	; 0x24
 8000bac:	193b      	adds	r3, r7, r4
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	001a      	movs	r2, r3
 8000bb2:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <cr95_readtopaz+0x16c>)
 8000bb4:	0011      	movs	r1, r2
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f003 fa4e 	bl	8004058 <iprintf>
			printf("Header 2 = %2X", data[1]);
 8000bbc:	0022      	movs	r2, r4
 8000bbe:	0014      	movs	r4, r2
 8000bc0:	18bb      	adds	r3, r7, r2
 8000bc2:	785b      	ldrb	r3, [r3, #1]
 8000bc4:	001a      	movs	r2, r3
 8000bc6:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <cr95_readtopaz+0x170>)
 8000bc8:	0011      	movs	r1, r2
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f003 fa44 	bl	8004058 <iprintf>
			sprintf(uid, "%s %2X %2X %2X %2X", uid, data[2], data[3], data[4], data[5]);
 8000bd0:	0022      	movs	r2, r4
 8000bd2:	18bb      	adds	r3, r7, r2
 8000bd4:	789b      	ldrb	r3, [r3, #2]
 8000bd6:	001e      	movs	r6, r3
 8000bd8:	18bb      	adds	r3, r7, r2
 8000bda:	78db      	ldrb	r3, [r3, #3]
 8000bdc:	001c      	movs	r4, r3
 8000bde:	18bb      	adds	r3, r7, r2
 8000be0:	791b      	ldrb	r3, [r3, #4]
 8000be2:	001d      	movs	r5, r3
 8000be4:	18bb      	adds	r3, r7, r2
 8000be6:	795b      	ldrb	r3, [r3, #5]
 8000be8:	1d3a      	adds	r2, r7, #4
 8000bea:	490e      	ldr	r1, [pc, #56]	; (8000c24 <cr95_readtopaz+0x174>)
 8000bec:	1d38      	adds	r0, r7, #4
 8000bee:	9302      	str	r3, [sp, #8]
 8000bf0:	9501      	str	r5, [sp, #4]
 8000bf2:	9400      	str	r4, [sp, #0]
 8000bf4:	0033      	movs	r3, r6
 8000bf6:	f003 fac7 	bl	8004188 <siprintf>
		}
	}
}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b013      	add	sp, #76	; 0x4c
 8000c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	08005638 	.word	0x08005638
 8000c08:	08005688 	.word	0x08005688
 8000c0c:	080055a4 	.word	0x080055a4
 8000c10:	080055ac 	.word	0x080055ac
 8000c14:	080055b4 	.word	0x080055b4
 8000c18:	0800564c 	.word	0x0800564c
 8000c1c:	08005654 	.word	0x08005654
 8000c20:	08005664 	.word	0x08005664
 8000c24:	08005674 	.word	0x08005674

08000c28 <cr95_read14B>:

static void cr95_read14B(void)
{
 8000c28:	b590      	push	{r4, r7, lr}
 8000c2a:	b089      	sub	sp, #36	; 0x24
 8000c2c:	af00      	add	r7, sp, #0
	const uint8_t cmd_reqb[] =  { 0x04, 0x03, 0x05, 0x00, 0x00 };
 8000c2e:	2018      	movs	r0, #24
 8000c30:	183b      	adds	r3, r7, r0
 8000c32:	4a20      	ldr	r2, [pc, #128]	; (8000cb4 <cr95_read14B+0x8c>)
 8000c34:	6811      	ldr	r1, [r2, #0]
 8000c36:	6019      	str	r1, [r3, #0]
 8000c38:	7912      	ldrb	r2, [r2, #4]
 8000c3a:	711a      	strb	r2, [r3, #4]

	uint8_t data[16];
	uint8_t len;

	cr95write(cmd_reqb, sizeof(cmd_reqb));
 8000c3c:	183b      	adds	r3, r7, r0
 8000c3e:	2105      	movs	r1, #5
 8000c40:	0018      	movs	r0, r3
 8000c42:	f7ff fb11 	bl	8000268 <cr95write>
	if (cr95read(data, &len) == 0x80 && data[0] == 0x50) {
 8000c46:	1dfa      	adds	r2, r7, #7
 8000c48:	2308      	movs	r3, #8
 8000c4a:	18fb      	adds	r3, r7, r3
 8000c4c:	0011      	movs	r1, r2
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f7ff fb20 	bl	8000294 <cr95read>
 8000c54:	0003      	movs	r3, r0
 8000c56:	2b80      	cmp	r3, #128	; 0x80
 8000c58:	d128      	bne.n	8000cac <cr95_read14B+0x84>
 8000c5a:	2308      	movs	r3, #8
 8000c5c:	18fb      	adds	r3, r7, r3
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b50      	cmp	r3, #80	; 0x50
 8000c62:	d123      	bne.n	8000cac <cr95_read14B+0x84>
		printf("ATQB =");
 8000c64:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <cr95_read14B+0x90>)
 8000c66:	0018      	movs	r0, r3
 8000c68:	f003 f9f6 	bl	8004058 <iprintf>
		for (uint8_t i = 0; i <= len; i++) printf(" %02X", data[i]);
 8000c6c:	231f      	movs	r3, #31
 8000c6e:	18fb      	adds	r3, r7, r3
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
 8000c74:	e010      	b.n	8000c98 <cr95_read14B+0x70>
 8000c76:	241f      	movs	r4, #31
 8000c78:	193b      	adds	r3, r7, r4
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2208      	movs	r2, #8
 8000c7e:	18ba      	adds	r2, r7, r2
 8000c80:	5cd3      	ldrb	r3, [r2, r3]
 8000c82:	001a      	movs	r2, r3
 8000c84:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <cr95_read14B+0x94>)
 8000c86:	0011      	movs	r1, r2
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f003 f9e5 	bl	8004058 <iprintf>
 8000c8e:	193b      	adds	r3, r7, r4
 8000c90:	781a      	ldrb	r2, [r3, #0]
 8000c92:	193b      	adds	r3, r7, r4
 8000c94:	3201      	adds	r2, #1
 8000c96:	701a      	strb	r2, [r3, #0]
 8000c98:	1dfb      	adds	r3, r7, #7
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	221f      	movs	r2, #31
 8000c9e:	18ba      	adds	r2, r7, r2
 8000ca0:	7812      	ldrb	r2, [r2, #0]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d9e7      	bls.n	8000c76 <cr95_read14B+0x4e>
		printf("\n");
 8000ca6:	200a      	movs	r0, #10
 8000ca8:	f003 f9f0 	bl	800408c <putchar>
	}
}
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b009      	add	sp, #36	; 0x24
 8000cb2:	bd90      	pop	{r4, r7, pc}
 8000cb4:	0800569c 	.word	0x0800569c
 8000cb8:	08005694 	.word	0x08005694
 8000cbc:	080055ac 	.word	0x080055ac

08000cc0 <cr95_read18>:

static void cr95_read18(void)
{
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b089      	sub	sp, #36	; 0x24
 8000cc4:	af00      	add	r7, sp, #0
	const uint8_t cmd_reqc[] =  { 0x04, 0x05, 0x00, 0xFF, 0xFF, 0x00, 0x00 };
 8000cc6:	2018      	movs	r0, #24
 8000cc8:	183b      	adds	r3, r7, r0
 8000cca:	4a1f      	ldr	r2, [pc, #124]	; (8000d48 <cr95_read18+0x88>)
 8000ccc:	6811      	ldr	r1, [r2, #0]
 8000cce:	6019      	str	r1, [r3, #0]
 8000cd0:	8891      	ldrh	r1, [r2, #4]
 8000cd2:	8099      	strh	r1, [r3, #4]
 8000cd4:	7992      	ldrb	r2, [r2, #6]
 8000cd6:	719a      	strb	r2, [r3, #6]

	uint8_t data[16];
	uint8_t len;

	cr95write(cmd_reqc, sizeof(cmd_reqc));
 8000cd8:	183b      	adds	r3, r7, r0
 8000cda:	2107      	movs	r1, #7
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f7ff fac3 	bl	8000268 <cr95write>
	if (cr95read(data, &len) == 0x80) {
 8000ce2:	1dfa      	adds	r2, r7, #7
 8000ce4:	2308      	movs	r3, #8
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	0011      	movs	r1, r2
 8000cea:	0018      	movs	r0, r3
 8000cec:	f7ff fad2 	bl	8000294 <cr95read>
 8000cf0:	0003      	movs	r3, r0
 8000cf2:	2b80      	cmp	r3, #128	; 0x80
 8000cf4:	d123      	bne.n	8000d3e <cr95_read18+0x7e>
		printf("ISO/IEC 18092 DATA =");
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <cr95_read18+0x8c>)
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f003 f9ad 	bl	8004058 <iprintf>
		for (uint8_t i = 0; i <= len; i++) printf(" %02X", data[i]);
 8000cfe:	231f      	movs	r3, #31
 8000d00:	18fb      	adds	r3, r7, r3
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
 8000d06:	e010      	b.n	8000d2a <cr95_read18+0x6a>
 8000d08:	241f      	movs	r4, #31
 8000d0a:	193b      	adds	r3, r7, r4
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2208      	movs	r2, #8
 8000d10:	18ba      	adds	r2, r7, r2
 8000d12:	5cd3      	ldrb	r3, [r2, r3]
 8000d14:	001a      	movs	r2, r3
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <cr95_read18+0x90>)
 8000d18:	0011      	movs	r1, r2
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f003 f99c 	bl	8004058 <iprintf>
 8000d20:	193b      	adds	r3, r7, r4
 8000d22:	781a      	ldrb	r2, [r3, #0]
 8000d24:	193b      	adds	r3, r7, r4
 8000d26:	3201      	adds	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
 8000d2a:	1dfb      	adds	r3, r7, #7
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	221f      	movs	r2, #31
 8000d30:	18ba      	adds	r2, r7, r2
 8000d32:	7812      	ldrb	r2, [r2, #0]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d9e7      	bls.n	8000d08 <cr95_read18+0x48>
		printf("\n");
 8000d38:	200a      	movs	r0, #10
 8000d3a:	f003 f9a7 	bl	800408c <putchar>
	}
}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b009      	add	sp, #36	; 0x24
 8000d44:	bd90      	pop	{r4, r7, pc}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	080056bc 	.word	0x080056bc
 8000d4c:	080056a4 	.word	0x080056a4
 8000d50:	080055ac 	.word	0x080055ac

08000d54 <cr95_calibrate>:

static void cr95_calibrate(void)
{
 8000d54:	b5b0      	push	{r4, r5, r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
	uint8_t cmd_cal[] =  	    { 0x07, 0x0E, 0x03, 0xA1, 0x00, 0xF8, 0x01, 0x18, 0x00, 0x20, 0x60, 0x60, 0x00, 0x00, 0x3F, 0x01 };
 8000d5a:	2118      	movs	r1, #24
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	4ab7      	ldr	r2, [pc, #732]	; (800103c <cr95_calibrate+0x2e8>)
 8000d60:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000d62:	c331      	stmia	r3!, {r0, r4, r5}
 8000d64:	6812      	ldr	r2, [r2, #0]
 8000d66:	601a      	str	r2, [r3, #0]

	uint8_t data[16];
	uint8_t len;

	cmd_cal[13] = 0x00;
 8000d68:	187b      	adds	r3, r7, r1
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8000d6e:	000c      	movs	r4, r1
 8000d70:	187b      	adds	r3, r7, r1
 8000d72:	2110      	movs	r1, #16
 8000d74:	0018      	movs	r0, r3
 8000d76:	f7ff fa77 	bl	8000268 <cr95write>
	printf("CAL #0 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8000d7a:	0021      	movs	r1, r4
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	7b5b      	ldrb	r3, [r3, #13]
 8000d80:	001c      	movs	r4, r3
 8000d82:	1dfa      	adds	r2, r7, #7
 8000d84:	2308      	movs	r3, #8
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	0011      	movs	r1, r2
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f7ff fa82 	bl	8000294 <cr95read>
 8000d90:	1e03      	subs	r3, r0, #0
 8000d92:	d101      	bne.n	8000d98 <cr95_calibrate+0x44>
 8000d94:	2279      	movs	r2, #121	; 0x79
 8000d96:	e000      	b.n	8000d9a <cr95_calibrate+0x46>
 8000d98:	226e      	movs	r2, #110	; 0x6e
 8000d9a:	2508      	movs	r5, #8
 8000d9c:	197b      	adds	r3, r7, r5
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	48a7      	ldr	r0, [pc, #668]	; (8001040 <cr95_calibrate+0x2ec>)
 8000da2:	0021      	movs	r1, r4
 8000da4:	f003 f958 	bl	8004058 <iprintf>

	cmd_cal[13] = 0xFC;
 8000da8:	2118      	movs	r1, #24
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	22fc      	movs	r2, #252	; 0xfc
 8000dae:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8000db0:	000c      	movs	r4, r1
 8000db2:	187b      	adds	r3, r7, r1
 8000db4:	2110      	movs	r1, #16
 8000db6:	0018      	movs	r0, r3
 8000db8:	f7ff fa56 	bl	8000268 <cr95write>
	printf("CAL #1 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8000dbc:	0021      	movs	r1, r4
 8000dbe:	187b      	adds	r3, r7, r1
 8000dc0:	7b5b      	ldrb	r3, [r3, #13]
 8000dc2:	001c      	movs	r4, r3
 8000dc4:	1dfa      	adds	r2, r7, #7
 8000dc6:	197b      	adds	r3, r7, r5
 8000dc8:	0011      	movs	r1, r2
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f7ff fa62 	bl	8000294 <cr95read>
 8000dd0:	1e03      	subs	r3, r0, #0
 8000dd2:	d101      	bne.n	8000dd8 <cr95_calibrate+0x84>
 8000dd4:	2279      	movs	r2, #121	; 0x79
 8000dd6:	e000      	b.n	8000dda <cr95_calibrate+0x86>
 8000dd8:	226e      	movs	r2, #110	; 0x6e
 8000dda:	2508      	movs	r5, #8
 8000ddc:	197b      	adds	r3, r7, r5
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4898      	ldr	r0, [pc, #608]	; (8001044 <cr95_calibrate+0x2f0>)
 8000de2:	0021      	movs	r1, r4
 8000de4:	f003 f938 	bl	8004058 <iprintf>

	cmd_cal[13] -= 0x80;
 8000de8:	2118      	movs	r1, #24
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	7b5b      	ldrb	r3, [r3, #13]
 8000dee:	3b80      	subs	r3, #128	; 0x80
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8000df6:	000c      	movs	r4, r1
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	2110      	movs	r1, #16
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f7ff fa33 	bl	8000268 <cr95write>
	printf("CAL #2 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8000e02:	0021      	movs	r1, r4
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	7b5b      	ldrb	r3, [r3, #13]
 8000e08:	001c      	movs	r4, r3
 8000e0a:	1dfa      	adds	r2, r7, #7
 8000e0c:	197b      	adds	r3, r7, r5
 8000e0e:	0011      	movs	r1, r2
 8000e10:	0018      	movs	r0, r3
 8000e12:	f7ff fa3f 	bl	8000294 <cr95read>
 8000e16:	1e03      	subs	r3, r0, #0
 8000e18:	d101      	bne.n	8000e1e <cr95_calibrate+0xca>
 8000e1a:	2279      	movs	r2, #121	; 0x79
 8000e1c:	e000      	b.n	8000e20 <cr95_calibrate+0xcc>
 8000e1e:	226e      	movs	r2, #110	; 0x6e
 8000e20:	2508      	movs	r5, #8
 8000e22:	197b      	adds	r3, r7, r5
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	4888      	ldr	r0, [pc, #544]	; (8001048 <cr95_calibrate+0x2f4>)
 8000e28:	0021      	movs	r1, r4
 8000e2a:	f003 f915 	bl	8004058 <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x40; else cmd_cal[13] += 0x40;
 8000e2e:	197b      	adds	r3, r7, r5
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d107      	bne.n	8000e46 <cr95_calibrate+0xf2>
 8000e36:	2118      	movs	r1, #24
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	7b5b      	ldrb	r3, [r3, #13]
 8000e3c:	3b40      	subs	r3, #64	; 0x40
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	187b      	adds	r3, r7, r1
 8000e42:	735a      	strb	r2, [r3, #13]
 8000e44:	e006      	b.n	8000e54 <cr95_calibrate+0x100>
 8000e46:	2118      	movs	r1, #24
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	7b5b      	ldrb	r3, [r3, #13]
 8000e4c:	3340      	adds	r3, #64	; 0x40
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8000e54:	2418      	movs	r4, #24
 8000e56:	193b      	adds	r3, r7, r4
 8000e58:	2110      	movs	r1, #16
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f7ff fa04 	bl	8000268 <cr95write>
	printf("CAL #3 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8000e60:	193b      	adds	r3, r7, r4
 8000e62:	7b5b      	ldrb	r3, [r3, #13]
 8000e64:	001c      	movs	r4, r3
 8000e66:	1dfa      	adds	r2, r7, #7
 8000e68:	2308      	movs	r3, #8
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	0011      	movs	r1, r2
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f7ff fa10 	bl	8000294 <cr95read>
 8000e74:	1e03      	subs	r3, r0, #0
 8000e76:	d101      	bne.n	8000e7c <cr95_calibrate+0x128>
 8000e78:	2279      	movs	r2, #121	; 0x79
 8000e7a:	e000      	b.n	8000e7e <cr95_calibrate+0x12a>
 8000e7c:	226e      	movs	r2, #110	; 0x6e
 8000e7e:	2508      	movs	r5, #8
 8000e80:	197b      	adds	r3, r7, r5
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4871      	ldr	r0, [pc, #452]	; (800104c <cr95_calibrate+0x2f8>)
 8000e86:	0021      	movs	r1, r4
 8000e88:	f003 f8e6 	bl	8004058 <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x20; else cmd_cal[13] += 0x20;
 8000e8c:	197b      	adds	r3, r7, r5
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d107      	bne.n	8000ea4 <cr95_calibrate+0x150>
 8000e94:	2118      	movs	r1, #24
 8000e96:	187b      	adds	r3, r7, r1
 8000e98:	7b5b      	ldrb	r3, [r3, #13]
 8000e9a:	3b20      	subs	r3, #32
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	735a      	strb	r2, [r3, #13]
 8000ea2:	e006      	b.n	8000eb2 <cr95_calibrate+0x15e>
 8000ea4:	2118      	movs	r1, #24
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	7b5b      	ldrb	r3, [r3, #13]
 8000eaa:	3320      	adds	r3, #32
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	187b      	adds	r3, r7, r1
 8000eb0:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8000eb2:	2418      	movs	r4, #24
 8000eb4:	193b      	adds	r3, r7, r4
 8000eb6:	2110      	movs	r1, #16
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f7ff f9d5 	bl	8000268 <cr95write>
	printf("CAL #4 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8000ebe:	193b      	adds	r3, r7, r4
 8000ec0:	7b5b      	ldrb	r3, [r3, #13]
 8000ec2:	001c      	movs	r4, r3
 8000ec4:	1dfa      	adds	r2, r7, #7
 8000ec6:	2308      	movs	r3, #8
 8000ec8:	18fb      	adds	r3, r7, r3
 8000eca:	0011      	movs	r1, r2
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f7ff f9e1 	bl	8000294 <cr95read>
 8000ed2:	1e03      	subs	r3, r0, #0
 8000ed4:	d101      	bne.n	8000eda <cr95_calibrate+0x186>
 8000ed6:	2279      	movs	r2, #121	; 0x79
 8000ed8:	e000      	b.n	8000edc <cr95_calibrate+0x188>
 8000eda:	226e      	movs	r2, #110	; 0x6e
 8000edc:	2508      	movs	r5, #8
 8000ede:	197b      	adds	r3, r7, r5
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	485b      	ldr	r0, [pc, #364]	; (8001050 <cr95_calibrate+0x2fc>)
 8000ee4:	0021      	movs	r1, r4
 8000ee6:	f003 f8b7 	bl	8004058 <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x10; else cmd_cal[13] += 0x10;
 8000eea:	197b      	adds	r3, r7, r5
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d107      	bne.n	8000f02 <cr95_calibrate+0x1ae>
 8000ef2:	2118      	movs	r1, #24
 8000ef4:	187b      	adds	r3, r7, r1
 8000ef6:	7b5b      	ldrb	r3, [r3, #13]
 8000ef8:	3b10      	subs	r3, #16
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	187b      	adds	r3, r7, r1
 8000efe:	735a      	strb	r2, [r3, #13]
 8000f00:	e006      	b.n	8000f10 <cr95_calibrate+0x1bc>
 8000f02:	2118      	movs	r1, #24
 8000f04:	187b      	adds	r3, r7, r1
 8000f06:	7b5b      	ldrb	r3, [r3, #13]
 8000f08:	3310      	adds	r3, #16
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8000f10:	2418      	movs	r4, #24
 8000f12:	193b      	adds	r3, r7, r4
 8000f14:	2110      	movs	r1, #16
 8000f16:	0018      	movs	r0, r3
 8000f18:	f7ff f9a6 	bl	8000268 <cr95write>
	printf("CAL #5 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8000f1c:	193b      	adds	r3, r7, r4
 8000f1e:	7b5b      	ldrb	r3, [r3, #13]
 8000f20:	001c      	movs	r4, r3
 8000f22:	1dfa      	adds	r2, r7, #7
 8000f24:	2308      	movs	r3, #8
 8000f26:	18fb      	adds	r3, r7, r3
 8000f28:	0011      	movs	r1, r2
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f7ff f9b2 	bl	8000294 <cr95read>
 8000f30:	1e03      	subs	r3, r0, #0
 8000f32:	d101      	bne.n	8000f38 <cr95_calibrate+0x1e4>
 8000f34:	2279      	movs	r2, #121	; 0x79
 8000f36:	e000      	b.n	8000f3a <cr95_calibrate+0x1e6>
 8000f38:	226e      	movs	r2, #110	; 0x6e
 8000f3a:	2508      	movs	r5, #8
 8000f3c:	197b      	adds	r3, r7, r5
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4844      	ldr	r0, [pc, #272]	; (8001054 <cr95_calibrate+0x300>)
 8000f42:	0021      	movs	r1, r4
 8000f44:	f003 f888 	bl	8004058 <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x08; else cmd_cal[13] += 0x08;
 8000f48:	197b      	adds	r3, r7, r5
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d107      	bne.n	8000f60 <cr95_calibrate+0x20c>
 8000f50:	2118      	movs	r1, #24
 8000f52:	187b      	adds	r3, r7, r1
 8000f54:	7b5b      	ldrb	r3, [r3, #13]
 8000f56:	3b08      	subs	r3, #8
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	187b      	adds	r3, r7, r1
 8000f5c:	735a      	strb	r2, [r3, #13]
 8000f5e:	e006      	b.n	8000f6e <cr95_calibrate+0x21a>
 8000f60:	2118      	movs	r1, #24
 8000f62:	187b      	adds	r3, r7, r1
 8000f64:	7b5b      	ldrb	r3, [r3, #13]
 8000f66:	3308      	adds	r3, #8
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	187b      	adds	r3, r7, r1
 8000f6c:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8000f6e:	2418      	movs	r4, #24
 8000f70:	193b      	adds	r3, r7, r4
 8000f72:	2110      	movs	r1, #16
 8000f74:	0018      	movs	r0, r3
 8000f76:	f7ff f977 	bl	8000268 <cr95write>
	printf("CAL #6 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8000f7a:	193b      	adds	r3, r7, r4
 8000f7c:	7b5b      	ldrb	r3, [r3, #13]
 8000f7e:	001c      	movs	r4, r3
 8000f80:	1dfa      	adds	r2, r7, #7
 8000f82:	2308      	movs	r3, #8
 8000f84:	18fb      	adds	r3, r7, r3
 8000f86:	0011      	movs	r1, r2
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f7ff f983 	bl	8000294 <cr95read>
 8000f8e:	1e03      	subs	r3, r0, #0
 8000f90:	d101      	bne.n	8000f96 <cr95_calibrate+0x242>
 8000f92:	2279      	movs	r2, #121	; 0x79
 8000f94:	e000      	b.n	8000f98 <cr95_calibrate+0x244>
 8000f96:	226e      	movs	r2, #110	; 0x6e
 8000f98:	2508      	movs	r5, #8
 8000f9a:	197b      	adds	r3, r7, r5
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	482e      	ldr	r0, [pc, #184]	; (8001058 <cr95_calibrate+0x304>)
 8000fa0:	0021      	movs	r1, r4
 8000fa2:	f003 f859 	bl	8004058 <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x04; else cmd_cal[13] += 0x04;
 8000fa6:	197b      	adds	r3, r7, r5
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d107      	bne.n	8000fbe <cr95_calibrate+0x26a>
 8000fae:	2118      	movs	r1, #24
 8000fb0:	187b      	adds	r3, r7, r1
 8000fb2:	7b5b      	ldrb	r3, [r3, #13]
 8000fb4:	3b04      	subs	r3, #4
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	187b      	adds	r3, r7, r1
 8000fba:	735a      	strb	r2, [r3, #13]
 8000fbc:	e006      	b.n	8000fcc <cr95_calibrate+0x278>
 8000fbe:	2118      	movs	r1, #24
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	7b5b      	ldrb	r3, [r3, #13]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	187b      	adds	r3, r7, r1
 8000fca:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_cal, sizeof(cmd_cal));
 8000fcc:	2418      	movs	r4, #24
 8000fce:	193b      	adds	r3, r7, r4
 8000fd0:	2110      	movs	r1, #16
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f7ff f948 	bl	8000268 <cr95write>
	printf("CAL #7 0x%02x %c, result 0x%02x\n", cmd_cal[13], (cr95read(data, &len) == 0x00) ? 'y' : 'n', data[0]);
 8000fd8:	193b      	adds	r3, r7, r4
 8000fda:	7b5b      	ldrb	r3, [r3, #13]
 8000fdc:	001c      	movs	r4, r3
 8000fde:	1dfa      	adds	r2, r7, #7
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	18fb      	adds	r3, r7, r3
 8000fe4:	0011      	movs	r1, r2
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f7ff f954 	bl	8000294 <cr95read>
 8000fec:	1e03      	subs	r3, r0, #0
 8000fee:	d101      	bne.n	8000ff4 <cr95_calibrate+0x2a0>
 8000ff0:	2279      	movs	r2, #121	; 0x79
 8000ff2:	e000      	b.n	8000ff6 <cr95_calibrate+0x2a2>
 8000ff4:	226e      	movs	r2, #110	; 0x6e
 8000ff6:	2508      	movs	r5, #8
 8000ff8:	197b      	adds	r3, r7, r5
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4817      	ldr	r0, [pc, #92]	; (800105c <cr95_calibrate+0x308>)
 8000ffe:	0021      	movs	r1, r4
 8001000:	f003 f82a 	bl	8004058 <iprintf>

	if (data[0] == 0x01) cmd_cal[13] -= 0x04;
 8001004:	197b      	adds	r3, r7, r5
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d106      	bne.n	800101a <cr95_calibrate+0x2c6>
 800100c:	2118      	movs	r1, #24
 800100e:	187b      	adds	r3, r7, r1
 8001010:	7b5b      	ldrb	r3, [r3, #13]
 8001012:	3b04      	subs	r3, #4
 8001014:	b2da      	uxtb	r2, r3
 8001016:	187b      	adds	r3, r7, r1
 8001018:	735a      	strb	r2, [r3, #13]
	DacDataRef = cmd_cal[13];
 800101a:	2318      	movs	r3, #24
 800101c:	18fb      	adds	r3, r7, r3
 800101e:	7b5a      	ldrb	r2, [r3, #13]
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <cr95_calibrate+0x30c>)
 8001022:	701a      	strb	r2, [r3, #0]
	printf("CAL finished, DacDataRef=0x%02x\n", DacDataRef);
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <cr95_calibrate+0x30c>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	001a      	movs	r2, r3
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <cr95_calibrate+0x310>)
 800102c:	0011      	movs	r1, r2
 800102e:	0018      	movs	r0, r3
 8001030:	f003 f812 	bl	8004058 <iprintf>
}
 8001034:	46c0      	nop			; (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	b00a      	add	sp, #40	; 0x28
 800103a:	bdb0      	pop	{r4, r5, r7, pc}
 800103c:	08005808 	.word	0x08005808
 8001040:	080056c4 	.word	0x080056c4
 8001044:	080056e8 	.word	0x080056e8
 8001048:	0800570c 	.word	0x0800570c
 800104c:	08005730 	.word	0x08005730
 8001050:	08005754 	.word	0x08005754
 8001054:	08005778 	.word	0x08005778
 8001058:	0800579c 	.word	0x0800579c
 800105c:	080057c0 	.word	0x080057c0
 8001060:	20000282 	.word	0x20000282
 8001064:	080057e4 	.word	0x080057e4

08001068 <cr95_idle>:

static void cr95_idle(uint8_t mode)
{
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b087      	sub	sp, #28
 800106c:	af00      	add	r7, sp, #0
 800106e:	0002      	movs	r2, r0
 8001070:	1dfb      	adds	r3, r7, #7
 8001072:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_idle[] =  		{ 0x07, 0x0E, 0x0A, 0x21, 0x00, 0x79, 0x01, 0x18, 0x00, 0x20, 0x60, 0x60, 0x00, 0x00, 0x3F, 0x08 };
 8001074:	2308      	movs	r3, #8
 8001076:	18fb      	adds	r3, r7, r3
 8001078:	4a15      	ldr	r2, [pc, #84]	; (80010d0 <cr95_idle+0x68>)
 800107a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800107c:	c313      	stmia	r3!, {r0, r1, r4}
 800107e:	6812      	ldr	r2, [r2, #0]
 8001080:	601a      	str	r2, [r3, #0]

	if (mode == 1) cmd_idle[2] = 0x08;   // Hibernate
 8001082:	1dfb      	adds	r3, r7, #7
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d104      	bne.n	8001094 <cr95_idle+0x2c>
 800108a:	2308      	movs	r3, #8
 800108c:	18fb      	adds	r3, r7, r3
 800108e:	2208      	movs	r2, #8
 8001090:	709a      	strb	r2, [r3, #2]
 8001092:	e003      	b.n	800109c <cr95_idle+0x34>
	else cmd_idle[2] = 0x0A;             // TagDetect
 8001094:	2308      	movs	r3, #8
 8001096:	18fb      	adds	r3, r7, r3
 8001098:	220a      	movs	r2, #10
 800109a:	709a      	strb	r2, [r3, #2]

	cmd_idle[12] = DacDataRef - 8;
 800109c:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <cr95_idle+0x6c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	3b08      	subs	r3, #8
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	2108      	movs	r1, #8
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	731a      	strb	r2, [r3, #12]
	cmd_idle[13] = DacDataRef + 8;
 80010aa:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <cr95_idle+0x6c>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	3308      	adds	r3, #8
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	187b      	adds	r3, r7, r1
 80010b4:	735a      	strb	r2, [r3, #13]
	cr95write(cmd_idle, sizeof(cmd_idle));
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	2110      	movs	r1, #16
 80010ba:	0018      	movs	r0, r3
 80010bc:	f7ff f8d4 	bl	8000268 <cr95write>
	printf("IDLE sent\n");
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <cr95_idle+0x70>)
 80010c2:	0018      	movs	r0, r3
 80010c4:	f003 f856 	bl	8004174 <puts>
}
 80010c8:	46c0      	nop			; (mov r8, r8)
 80010ca:	46bd      	mov	sp, r7
 80010cc:	b007      	add	sp, #28
 80010ce:	bd90      	pop	{r4, r7, pc}
 80010d0:	08005824 	.word	0x08005824
 80010d4:	20000282 	.word	0x20000282
 80010d8:	08005818 	.word	0x08005818

080010dc <uart_process_command>:

static void uart_process_command(char *cmd)
{
 80010dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010de:	b08d      	sub	sp, #52	; 0x34
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
    char *token;
    token = strtok(cmd, " ");
 80010e4:	4acb      	ldr	r2, [pc, #812]	; (8001414 <uart_process_command+0x338>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	0011      	movs	r1, r2
 80010ea:	0018      	movs	r0, r3
 80010ec:	f003 f88a 	bl	8004204 <strtok>
 80010f0:	0003      	movs	r3, r0
 80010f2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t data[16];
	uint8_t len;

	const uint8_t cmd_echo[] =  { 0x55 };
 80010f4:	2310      	movs	r3, #16
 80010f6:	18fb      	adds	r3, r7, r3
 80010f8:	2255      	movs	r2, #85	; 0x55
 80010fa:	701a      	strb	r2, [r3, #0]
	const uint8_t cmd_idn[] =   { 0x01, 0x00 };
 80010fc:	210c      	movs	r1, #12
 80010fe:	187b      	adds	r3, r7, r1
 8001100:	2201      	movs	r2, #1
 8001102:	701a      	strb	r2, [r3, #0]
 8001104:	187b      	adds	r3, r7, r1
 8001106:	2200      	movs	r2, #0
 8001108:	705a      	strb	r2, [r3, #1]

    if (strcasecmp(token, "HELLO") == 0) {
 800110a:	4ac3      	ldr	r2, [pc, #780]	; (8001418 <uart_process_command+0x33c>)
 800110c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800110e:	0011      	movs	r1, r2
 8001110:	0018      	movs	r0, r3
 8001112:	f003 f859 	bl	80041c8 <strcasecmp>
 8001116:	1e03      	subs	r3, r0, #0
 8001118:	d104      	bne.n	8001124 <uart_process_command+0x48>
        printf("Komunikace OK\n");
 800111a:	4bc0      	ldr	r3, [pc, #768]	; (800141c <uart_process_command+0x340>)
 800111c:	0018      	movs	r0, r3
 800111e:	f003 f829 	bl	8004174 <puts>
    	} while (uart_rx_read_ptr == uart_rx_write_ptr);
    }
    else {
        printf("Unknown command\n");
    }
}
 8001122:	e1e2      	b.n	80014ea <uart_process_command+0x40e>
    else if (strcasecmp(token, "ON") == 0) {
 8001124:	4abe      	ldr	r2, [pc, #760]	; (8001420 <uart_process_command+0x344>)
 8001126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001128:	0011      	movs	r1, r2
 800112a:	0018      	movs	r0, r3
 800112c:	f003 f84c 	bl	80041c8 <strcasecmp>
 8001130:	1e03      	subs	r3, r0, #0
 8001132:	d125      	bne.n	8001180 <uart_process_command+0xa4>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001134:	2380      	movs	r3, #128	; 0x80
 8001136:	0059      	lsls	r1, r3, #1
 8001138:	2390      	movs	r3, #144	; 0x90
 800113a:	05db      	lsls	r3, r3, #23
 800113c:	2201      	movs	r2, #1
 800113e:	0018      	movs	r0, r3
 8001140:	f001 fc0e 	bl	8002960 <HAL_GPIO_WritePin>
    	MX_USART1_UART_Init();
 8001144:	f000 fb18 	bl	8001778 <MX_USART1_UART_Init>
        HAL_UART_Receive_DMA(&huart1, nfc_rx_buf, RX_BUFFER_LEN);
 8001148:	49b6      	ldr	r1, [pc, #728]	; (8001424 <uart_process_command+0x348>)
 800114a:	4bb7      	ldr	r3, [pc, #732]	; (8001428 <uart_process_command+0x34c>)
 800114c:	2240      	movs	r2, #64	; 0x40
 800114e:	0018      	movs	r0, r3
 8001150:	f002 fa92 	bl	8003678 <HAL_UART_Receive_DMA>
    	HAL_Delay(5);
 8001154:	2005      	movs	r0, #5
 8001156:	f000 fea1 	bl	8001e9c <HAL_Delay>
    	printf("RFID ON\n");
 800115a:	4bb4      	ldr	r3, [pc, #720]	; (800142c <uart_process_command+0x350>)
 800115c:	0018      	movs	r0, r3
 800115e:	f003 f809 	bl	8004174 <puts>
        nfc_rx_read_ptr = nfc_rx_write_ptr;
 8001162:	4bb3      	ldr	r3, [pc, #716]	; (8001430 <uart_process_command+0x354>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	b29b      	uxth	r3, r3
 800116a:	2240      	movs	r2, #64	; 0x40
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	b29a      	uxth	r2, r3
 8001170:	4bb0      	ldr	r3, [pc, #704]	; (8001434 <uart_process_command+0x358>)
 8001172:	801a      	strh	r2, [r3, #0]
    	cr95_wakeup();
 8001174:	f7ff f946 	bl	8000404 <cr95_wakeup>
    	nfc_ready = true;
 8001178:	4baf      	ldr	r3, [pc, #700]	; (8001438 <uart_process_command+0x35c>)
 800117a:	2201      	movs	r2, #1
 800117c:	701a      	strb	r2, [r3, #0]
}
 800117e:	e1b4      	b.n	80014ea <uart_process_command+0x40e>
    else if (strcasecmp(token, "OFF") == 0) {
 8001180:	4aae      	ldr	r2, [pc, #696]	; (800143c <uart_process_command+0x360>)
 8001182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001184:	0011      	movs	r1, r2
 8001186:	0018      	movs	r0, r3
 8001188:	f003 f81e 	bl	80041c8 <strcasecmp>
 800118c:	1e03      	subs	r3, r0, #0
 800118e:	d117      	bne.n	80011c0 <uart_process_command+0xe4>
    	nfc_ready = false;
 8001190:	4ba9      	ldr	r3, [pc, #676]	; (8001438 <uart_process_command+0x35c>)
 8001192:	2200      	movs	r2, #0
 8001194:	701a      	strb	r2, [r3, #0]
        HAL_UART_AbortReceive(&huart1);
 8001196:	4ba4      	ldr	r3, [pc, #656]	; (8001428 <uart_process_command+0x34c>)
 8001198:	0018      	movs	r0, r3
 800119a:	f002 fb05 	bl	80037a8 <HAL_UART_AbortReceive>
    	HAL_UART_DeInit(&huart1);
 800119e:	4ba2      	ldr	r3, [pc, #648]	; (8001428 <uart_process_command+0x34c>)
 80011a0:	0018      	movs	r0, r3
 80011a2:	f002 f98b 	bl	80034bc <HAL_UART_DeInit>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80011a6:	2380      	movs	r3, #128	; 0x80
 80011a8:	0059      	lsls	r1, r3, #1
 80011aa:	2390      	movs	r3, #144	; 0x90
 80011ac:	05db      	lsls	r3, r3, #23
 80011ae:	2200      	movs	r2, #0
 80011b0:	0018      	movs	r0, r3
 80011b2:	f001 fbd5 	bl	8002960 <HAL_GPIO_WritePin>
    	printf("RFID OFF\n");
 80011b6:	4ba2      	ldr	r3, [pc, #648]	; (8001440 <uart_process_command+0x364>)
 80011b8:	0018      	movs	r0, r3
 80011ba:	f002 ffdb 	bl	8004174 <puts>
}
 80011be:	e194      	b.n	80014ea <uart_process_command+0x40e>
    else if (strcasecmp(token, "ECHO") == 0) {
 80011c0:	4aa0      	ldr	r2, [pc, #640]	; (8001444 <uart_process_command+0x368>)
 80011c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c4:	0011      	movs	r1, r2
 80011c6:	0018      	movs	r0, r3
 80011c8:	f002 fffe 	bl	80041c8 <strcasecmp>
 80011cc:	1e03      	subs	r3, r0, #0
 80011ce:	d11c      	bne.n	800120a <uart_process_command+0x12e>
    	cr95write(cmd_echo, sizeof(cmd_echo));
 80011d0:	2310      	movs	r3, #16
 80011d2:	18fb      	adds	r3, r7, r3
 80011d4:	2101      	movs	r1, #1
 80011d6:	0018      	movs	r0, r3
 80011d8:	f7ff f846 	bl	8000268 <cr95write>
    	uint8_t resp = cr95read(NULL, NULL);
 80011dc:	2525      	movs	r5, #37	; 0x25
 80011de:	197c      	adds	r4, r7, r5
 80011e0:	2100      	movs	r1, #0
 80011e2:	2000      	movs	r0, #0
 80011e4:	f7ff f856 	bl	8000294 <cr95read>
 80011e8:	0003      	movs	r3, r0
 80011ea:	7023      	strb	r3, [r4, #0]
    	printf("ECHO %s %02X\n", (resp == 0x55) ? "yes" : "no", resp);
 80011ec:	197b      	adds	r3, r7, r5
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b55      	cmp	r3, #85	; 0x55
 80011f2:	d101      	bne.n	80011f8 <uart_process_command+0x11c>
 80011f4:	4b94      	ldr	r3, [pc, #592]	; (8001448 <uart_process_command+0x36c>)
 80011f6:	e000      	b.n	80011fa <uart_process_command+0x11e>
 80011f8:	4b94      	ldr	r3, [pc, #592]	; (800144c <uart_process_command+0x370>)
 80011fa:	2225      	movs	r2, #37	; 0x25
 80011fc:	18ba      	adds	r2, r7, r2
 80011fe:	7812      	ldrb	r2, [r2, #0]
 8001200:	4893      	ldr	r0, [pc, #588]	; (8001450 <uart_process_command+0x374>)
 8001202:	0019      	movs	r1, r3
 8001204:	f002 ff28 	bl	8004058 <iprintf>
}
 8001208:	e16f      	b.n	80014ea <uart_process_command+0x40e>
    else if (strcasecmp(token, "IDN") == 0) {
 800120a:	4a92      	ldr	r2, [pc, #584]	; (8001454 <uart_process_command+0x378>)
 800120c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800120e:	0011      	movs	r1, r2
 8001210:	0018      	movs	r0, r3
 8001212:	f002 ffd9 	bl	80041c8 <strcasecmp>
 8001216:	1e03      	subs	r3, r0, #0
 8001218:	d13a      	bne.n	8001290 <uart_process_command+0x1b4>
    	cr95write(cmd_idn, sizeof(cmd_idn));
 800121a:	230c      	movs	r3, #12
 800121c:	18fb      	adds	r3, r7, r3
 800121e:	2102      	movs	r1, #2
 8001220:	0018      	movs	r0, r3
 8001222:	f7ff f821 	bl	8000268 <cr95write>
    	if (cr95read(data, &len) == 0x00) {
 8001226:	2313      	movs	r3, #19
 8001228:	18fa      	adds	r2, r7, r3
 800122a:	2314      	movs	r3, #20
 800122c:	18fb      	adds	r3, r7, r3
 800122e:	0011      	movs	r1, r2
 8001230:	0018      	movs	r0, r3
 8001232:	f7ff f82f 	bl	8000294 <cr95read>
 8001236:	1e03      	subs	r3, r0, #0
 8001238:	d125      	bne.n	8001286 <uart_process_command+0x1aa>
    		printf("IDN =");
 800123a:	4b87      	ldr	r3, [pc, #540]	; (8001458 <uart_process_command+0x37c>)
 800123c:	0018      	movs	r0, r3
 800123e:	f002 ff0b 	bl	8004058 <iprintf>
    		for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 8001242:	232f      	movs	r3, #47	; 0x2f
 8001244:	18fb      	adds	r3, r7, r3
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
 800124a:	e010      	b.n	800126e <uart_process_command+0x192>
 800124c:	242f      	movs	r4, #47	; 0x2f
 800124e:	193b      	adds	r3, r7, r4
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2214      	movs	r2, #20
 8001254:	18ba      	adds	r2, r7, r2
 8001256:	5cd3      	ldrb	r3, [r2, r3]
 8001258:	001a      	movs	r2, r3
 800125a:	4b80      	ldr	r3, [pc, #512]	; (800145c <uart_process_command+0x380>)
 800125c:	0011      	movs	r1, r2
 800125e:	0018      	movs	r0, r3
 8001260:	f002 fefa 	bl	8004058 <iprintf>
 8001264:	193b      	adds	r3, r7, r4
 8001266:	781a      	ldrb	r2, [r3, #0]
 8001268:	193b      	adds	r3, r7, r4
 800126a:	3201      	adds	r2, #1
 800126c:	701a      	strb	r2, [r3, #0]
 800126e:	2313      	movs	r3, #19
 8001270:	18fb      	adds	r3, r7, r3
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	222f      	movs	r2, #47	; 0x2f
 8001276:	18ba      	adds	r2, r7, r2
 8001278:	7812      	ldrb	r2, [r2, #0]
 800127a:	429a      	cmp	r2, r3
 800127c:	d3e6      	bcc.n	800124c <uart_process_command+0x170>
    		printf("\n");
 800127e:	200a      	movs	r0, #10
 8001280:	f002 ff04 	bl	800408c <putchar>
}
 8001284:	e131      	b.n	80014ea <uart_process_command+0x40e>
    		printf("IDN error\n");
 8001286:	4b76      	ldr	r3, [pc, #472]	; (8001460 <uart_process_command+0x384>)
 8001288:	0018      	movs	r0, r3
 800128a:	f002 ff73 	bl	8004174 <puts>
}
 800128e:	e12c      	b.n	80014ea <uart_process_command+0x40e>
    else if (strcasecmp(token, "INIT14") == 0) {
 8001290:	4a74      	ldr	r2, [pc, #464]	; (8001464 <uart_process_command+0x388>)
 8001292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001294:	0011      	movs	r1, r2
 8001296:	0018      	movs	r0, r3
 8001298:	f002 ff96 	bl	80041c8 <strcasecmp>
 800129c:	1e03      	subs	r3, r0, #0
 800129e:	d102      	bne.n	80012a6 <uart_process_command+0x1ca>
    	cr95_init14();
 80012a0:	f7ff f8c6 	bl	8000430 <cr95_init14>
}
 80012a4:	e121      	b.n	80014ea <uart_process_command+0x40e>
    else if (strcasecmp(token, "INIT14B") == 0) {
 80012a6:	4a70      	ldr	r2, [pc, #448]	; (8001468 <uart_process_command+0x38c>)
 80012a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012aa:	0011      	movs	r1, r2
 80012ac:	0018      	movs	r0, r3
 80012ae:	f002 ff8b 	bl	80041c8 <strcasecmp>
 80012b2:	1e03      	subs	r3, r0, #0
 80012b4:	d102      	bne.n	80012bc <uart_process_command+0x1e0>
        cr95_init14B();
 80012b6:	f7ff f91f 	bl	80004f8 <cr95_init14B>
}
 80012ba:	e116      	b.n	80014ea <uart_process_command+0x40e>
    else if (strcasecmp(token, "INIT15") == 0) {
 80012bc:	4a6b      	ldr	r2, [pc, #428]	; (800146c <uart_process_command+0x390>)
 80012be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c0:	0011      	movs	r1, r2
 80012c2:	0018      	movs	r0, r3
 80012c4:	f002 ff80 	bl	80041c8 <strcasecmp>
 80012c8:	1e03      	subs	r3, r0, #0
 80012ca:	d102      	bne.n	80012d2 <uart_process_command+0x1f6>
        cr95_init15();
 80012cc:	f7ff f978 	bl	80005c0 <cr95_init15>
}
 80012d0:	e10b      	b.n	80014ea <uart_process_command+0x40e>
    else if (strcasecmp(token, "INIT18") == 0) {
 80012d2:	4a67      	ldr	r2, [pc, #412]	; (8001470 <uart_process_command+0x394>)
 80012d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d6:	0011      	movs	r1, r2
 80012d8:	0018      	movs	r0, r3
 80012da:	f002 ff75 	bl	80041c8 <strcasecmp>
 80012de:	1e03      	subs	r3, r0, #0
 80012e0:	d102      	bne.n	80012e8 <uart_process_command+0x20c>
        cr95_init18();
 80012e2:	f7ff f9d1 	bl	8000688 <cr95_init18>
}
 80012e6:	e100      	b.n	80014ea <uart_process_command+0x40e>
    else if (strcasecmp(token, "READ") == 0) {
 80012e8:	4a62      	ldr	r2, [pc, #392]	; (8001474 <uart_process_command+0x398>)
 80012ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ec:	0011      	movs	r1, r2
 80012ee:	0018      	movs	r0, r3
 80012f0:	f002 ff6a 	bl	80041c8 <strcasecmp>
 80012f4:	1e03      	subs	r3, r0, #0
 80012f6:	d102      	bne.n	80012fe <uart_process_command+0x222>
    	cr95_read();
 80012f8:	f7ff fa46 	bl	8000788 <cr95_read>
}
 80012fc:	e0f5      	b.n	80014ea <uart_process_command+0x40e>
    else if (strcasecmp(token, "READTOPAZ") == 0) {
 80012fe:	4a5e      	ldr	r2, [pc, #376]	; (8001478 <uart_process_command+0x39c>)
 8001300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001302:	0011      	movs	r1, r2
 8001304:	0018      	movs	r0, r3
 8001306:	f002 ff5f 	bl	80041c8 <strcasecmp>
 800130a:	1e03      	subs	r3, r0, #0
 800130c:	d102      	bne.n	8001314 <uart_process_command+0x238>
        cr95_readtopaz();
 800130e:	f7ff fbcf 	bl	8000ab0 <cr95_readtopaz>
}
 8001312:	e0ea      	b.n	80014ea <uart_process_command+0x40e>
    else if (strcasecmp(token, "READ14B") == 0) {
 8001314:	4a59      	ldr	r2, [pc, #356]	; (800147c <uart_process_command+0x3a0>)
 8001316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001318:	0011      	movs	r1, r2
 800131a:	0018      	movs	r0, r3
 800131c:	f002 ff54 	bl	80041c8 <strcasecmp>
 8001320:	1e03      	subs	r3, r0, #0
 8001322:	d102      	bne.n	800132a <uart_process_command+0x24e>
        cr95_read14B();
 8001324:	f7ff fc80 	bl	8000c28 <cr95_read14B>
}
 8001328:	e0df      	b.n	80014ea <uart_process_command+0x40e>
    else if (strcasecmp(token, "READ18") == 0) {
 800132a:	4a55      	ldr	r2, [pc, #340]	; (8001480 <uart_process_command+0x3a4>)
 800132c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132e:	0011      	movs	r1, r2
 8001330:	0018      	movs	r0, r3
 8001332:	f002 ff49 	bl	80041c8 <strcasecmp>
 8001336:	1e03      	subs	r3, r0, #0
 8001338:	d102      	bne.n	8001340 <uart_process_command+0x264>
        cr95_read18();
 800133a:	f7ff fcc1 	bl	8000cc0 <cr95_read18>
}
 800133e:	e0d4      	b.n	80014ea <uart_process_command+0x40e>
    else if (strcasecmp(token, "CALIBRATE") == 0) {
 8001340:	4a50      	ldr	r2, [pc, #320]	; (8001484 <uart_process_command+0x3a8>)
 8001342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001344:	0011      	movs	r1, r2
 8001346:	0018      	movs	r0, r3
 8001348:	f002 ff3e 	bl	80041c8 <strcasecmp>
 800134c:	1e03      	subs	r3, r0, #0
 800134e:	d102      	bne.n	8001356 <uart_process_command+0x27a>
    	cr95_calibrate();
 8001350:	f7ff fd00 	bl	8000d54 <cr95_calibrate>
}
 8001354:	e0c9      	b.n	80014ea <uart_process_command+0x40e>
    else if (strcasecmp(token, "IDLE") == 0) {
 8001356:	4a4c      	ldr	r2, [pc, #304]	; (8001488 <uart_process_command+0x3ac>)
 8001358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800135a:	0011      	movs	r1, r2
 800135c:	0018      	movs	r0, r3
 800135e:	f002 ff33 	bl	80041c8 <strcasecmp>
 8001362:	1e03      	subs	r3, r0, #0
 8001364:	d103      	bne.n	800136e <uart_process_command+0x292>
    	cr95_idle(1);
 8001366:	2001      	movs	r0, #1
 8001368:	f7ff fe7e 	bl	8001068 <cr95_idle>
}
 800136c:	e0bd      	b.n	80014ea <uart_process_command+0x40e>
    else if (strcasecmp(token, "WAKEUP") == 0) {
 800136e:	4a47      	ldr	r2, [pc, #284]	; (800148c <uart_process_command+0x3b0>)
 8001370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001372:	0011      	movs	r1, r2
 8001374:	0018      	movs	r0, r3
 8001376:	f002 ff27 	bl	80041c8 <strcasecmp>
 800137a:	1e03      	subs	r3, r0, #0
 800137c:	d117      	bne.n	80013ae <uart_process_command+0x2d2>
    	cr95_wakeup();
 800137e:	f7ff f841 	bl	8000404 <cr95_wakeup>
    	uint8_t resp = cr95read(data, &len);
 8001382:	2526      	movs	r5, #38	; 0x26
 8001384:	197c      	adds	r4, r7, r5
 8001386:	2313      	movs	r3, #19
 8001388:	18fa      	adds	r2, r7, r3
 800138a:	2614      	movs	r6, #20
 800138c:	19bb      	adds	r3, r7, r6
 800138e:	0011      	movs	r1, r2
 8001390:	0018      	movs	r0, r3
 8001392:	f7fe ff7f 	bl	8000294 <cr95read>
 8001396:	0003      	movs	r3, r0
 8001398:	7023      	strb	r3, [r4, #0]
    	printf("Code of wakeup is: %02X with response: %02X\n", data[0],resp);
 800139a:	19bb      	adds	r3, r7, r6
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	0019      	movs	r1, r3
 80013a0:	197b      	adds	r3, r7, r5
 80013a2:	781a      	ldrb	r2, [r3, #0]
 80013a4:	4b3a      	ldr	r3, [pc, #232]	; (8001490 <uart_process_command+0x3b4>)
 80013a6:	0018      	movs	r0, r3
 80013a8:	f002 fe56 	bl	8004058 <iprintf>
}
 80013ac:	e09d      	b.n	80014ea <uart_process_command+0x40e>
    else if (strcasecmp(token, "AUTO") == 0) {
 80013ae:	4a39      	ldr	r2, [pc, #228]	; (8001494 <uart_process_command+0x3b8>)
 80013b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b2:	0011      	movs	r1, r2
 80013b4:	0018      	movs	r0, r3
 80013b6:	f002 ff07 	bl	80041c8 <strcasecmp>
 80013ba:	1e03      	subs	r3, r0, #0
 80013bc:	d000      	beq.n	80013c0 <uart_process_command+0x2e4>
 80013be:	e090      	b.n	80014e2 <uart_process_command+0x406>
    	cr95_calibrate();
 80013c0:	f7ff fcc8 	bl	8000d54 <cr95_calibrate>
        	cr95_idle(0);
 80013c4:	2000      	movs	r0, #0
 80013c6:	f7ff fe4f 	bl	8001068 <cr95_idle>
			do {} while (nfc_rx_read_ptr == nfc_rx_write_ptr);
 80013ca:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <uart_process_command+0x358>)
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	0019      	movs	r1, r3
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <uart_process_command+0x354>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	2240      	movs	r2, #64	; 0x40
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	4299      	cmp	r1, r3
 80013de:	d0f4      	beq.n	80013ca <uart_process_command+0x2ee>
			uint8_t resp = cr95read(data, &len);
 80013e0:	2527      	movs	r5, #39	; 0x27
 80013e2:	197c      	adds	r4, r7, r5
 80013e4:	2313      	movs	r3, #19
 80013e6:	18fa      	adds	r2, r7, r3
 80013e8:	2314      	movs	r3, #20
 80013ea:	18fb      	adds	r3, r7, r3
 80013ec:	0011      	movs	r1, r2
 80013ee:	0018      	movs	r0, r3
 80013f0:	f7fe ff50 	bl	8000294 <cr95read>
 80013f4:	0003      	movs	r3, r0
 80013f6:	7023      	strb	r3, [r4, #0]
			if (resp == 0x00 && data[0] == 0x02) printf("WAKEUP by tag detect\n");
 80013f8:	197b      	adds	r3, r7, r5
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d14d      	bne.n	800149c <uart_process_command+0x3c0>
 8001400:	2314      	movs	r3, #20
 8001402:	18fb      	adds	r3, r7, r3
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b02      	cmp	r3, #2
 8001408:	d148      	bne.n	800149c <uart_process_command+0x3c0>
 800140a:	4b23      	ldr	r3, [pc, #140]	; (8001498 <uart_process_command+0x3bc>)
 800140c:	0018      	movs	r0, r3
 800140e:	f002 feb1 	bl	8004174 <puts>
 8001412:	e047      	b.n	80014a4 <uart_process_command+0x3c8>
 8001414:	08005834 	.word	0x08005834
 8001418:	08005838 	.word	0x08005838
 800141c:	08005840 	.word	0x08005840
 8001420:	08005850 	.word	0x08005850
 8001424:	20000240 	.word	0x20000240
 8001428:	2000035c 	.word	0x2000035c
 800142c:	08005854 	.word	0x08005854
 8001430:	20000318 	.word	0x20000318
 8001434:	20000280 	.word	0x20000280
 8001438:	20000283 	.word	0x20000283
 800143c:	0800585c 	.word	0x0800585c
 8001440:	08005860 	.word	0x08005860
 8001444:	0800586c 	.word	0x0800586c
 8001448:	080054fc 	.word	0x080054fc
 800144c:	08005500 	.word	0x08005500
 8001450:	08005874 	.word	0x08005874
 8001454:	08005884 	.word	0x08005884
 8001458:	08005888 	.word	0x08005888
 800145c:	080055ac 	.word	0x080055ac
 8001460:	08005890 	.word	0x08005890
 8001464:	0800589c 	.word	0x0800589c
 8001468:	080058a4 	.word	0x080058a4
 800146c:	080058ac 	.word	0x080058ac
 8001470:	080058b4 	.word	0x080058b4
 8001474:	080058bc 	.word	0x080058bc
 8001478:	080058c4 	.word	0x080058c4
 800147c:	080058d0 	.word	0x080058d0
 8001480:	080058d8 	.word	0x080058d8
 8001484:	080058e0 	.word	0x080058e0
 8001488:	080058ec 	.word	0x080058ec
 800148c:	080058f4 	.word	0x080058f4
 8001490:	080058fc 	.word	0x080058fc
 8001494:	0800592c 	.word	0x0800592c
 8001498:	08005934 	.word	0x08005934
			else printf("Error\n");
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <uart_process_command+0x418>)
 800149e:	0018      	movs	r0, r3
 80014a0:	f002 fe68 	bl	8004174 <puts>
			printf("Code of wakeup is:%02X\n", data[0]);
 80014a4:	2314      	movs	r3, #20
 80014a6:	18fb      	adds	r3, r7, r3
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	001a      	movs	r2, r3
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <uart_process_command+0x41c>)
 80014ae:	0011      	movs	r1, r2
 80014b0:	0018      	movs	r0, r3
 80014b2:	f002 fdd1 	bl	8004058 <iprintf>
        	cr95_init14();
 80014b6:	f7fe ffbb 	bl	8000430 <cr95_init14>
        	cr95_read();
 80014ba:	f7ff f965 	bl	8000788 <cr95_read>
        	HAL_Delay(2000);
 80014be:	23fa      	movs	r3, #250	; 0xfa
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	0018      	movs	r0, r3
 80014c4:	f000 fcea 	bl	8001e9c <HAL_Delay>
    	} while (uart_rx_read_ptr == uart_rx_write_ptr);
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <uart_process_command+0x420>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	0019      	movs	r1, r3
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <uart_process_command+0x424>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2240      	movs	r2, #64	; 0x40
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	4299      	cmp	r1, r3
 80014dc:	d100      	bne.n	80014e0 <uart_process_command+0x404>
 80014de:	e771      	b.n	80013c4 <uart_process_command+0x2e8>
}
 80014e0:	e003      	b.n	80014ea <uart_process_command+0x40e>
        printf("Unknown command\n");
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <uart_process_command+0x428>)
 80014e4:	0018      	movs	r0, r3
 80014e6:	f002 fe45 	bl	8004174 <puts>
}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b00d      	add	sp, #52	; 0x34
 80014f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	0800594c 	.word	0x0800594c
 80014f8:	08005954 	.word	0x08005954
 80014fc:	2000023c 	.word	0x2000023c
 8001500:	200002d4 	.word	0x200002d4
 8001504:	0800596c 	.word	0x0800596c

08001508 <uart_byte_available>:


static void uart_byte_available(uint8_t c)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	0002      	movs	r2, r0
 8001510:	1dfb      	adds	r3, r7, #7
 8001512:	701a      	strb	r2, [r3, #0]
    static uint16_t cnt;
    static char data[CMD_BUFFER_LEN];

    if (cnt < CMD_BUFFER_LEN) data[cnt++] = c;
 8001514:	4b13      	ldr	r3, [pc, #76]	; (8001564 <uart_byte_available+0x5c>)
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	2b3f      	cmp	r3, #63	; 0x3f
 800151a:	d80a      	bhi.n	8001532 <uart_byte_available+0x2a>
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <uart_byte_available+0x5c>)
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	1c5a      	adds	r2, r3, #1
 8001522:	b291      	uxth	r1, r2
 8001524:	4a0f      	ldr	r2, [pc, #60]	; (8001564 <uart_byte_available+0x5c>)
 8001526:	8011      	strh	r1, [r2, #0]
 8001528:	0019      	movs	r1, r3
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <uart_byte_available+0x60>)
 800152c:	1dfa      	adds	r2, r7, #7
 800152e:	7812      	ldrb	r2, [r2, #0]
 8001530:	545a      	strb	r2, [r3, r1]
    if (c == '\n' || c == '\r') {
 8001532:	1dfb      	adds	r3, r7, #7
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b0a      	cmp	r3, #10
 8001538:	d003      	beq.n	8001542 <uart_byte_available+0x3a>
 800153a:	1dfb      	adds	r3, r7, #7
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b0d      	cmp	r3, #13
 8001540:	d10c      	bne.n	800155c <uart_byte_available+0x54>
        data[cnt - 1] = '\0';
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <uart_byte_available+0x5c>)
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	3b01      	subs	r3, #1
 8001548:	4a07      	ldr	r2, [pc, #28]	; (8001568 <uart_byte_available+0x60>)
 800154a:	2100      	movs	r1, #0
 800154c:	54d1      	strb	r1, [r2, r3]
        uart_process_command(data);
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <uart_byte_available+0x60>)
 8001550:	0018      	movs	r0, r3
 8001552:	f7ff fdc3 	bl	80010dc <uart_process_command>
        cnt = 0;
 8001556:	4b03      	ldr	r3, [pc, #12]	; (8001564 <uart_byte_available+0x5c>)
 8001558:	2200      	movs	r2, #0
 800155a:	801a      	strh	r2, [r3, #0]
    }
}
 800155c:	46c0      	nop			; (mov r8, r8)
 800155e:	46bd      	mov	sp, r7
 8001560:	b002      	add	sp, #8
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000284 	.word	0x20000284
 8001568:	20000288 	.word	0x20000288

0800156c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800156c:	b5b0      	push	{r4, r5, r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001572:	f000 fc2f 	bl	8001dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001576:	f000 f89d 	bl	80016b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800157a:	f000 f985 	bl	8001888 <MX_GPIO_Init>
  MX_DMA_Init();
 800157e:	f000 f95d 	bl	800183c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001582:	f000 f92b 	bl	80017dc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001586:	f000 f8f7 	bl	8001778 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_DeInit(&huart1);
 800158a:	4b3f      	ldr	r3, [pc, #252]	; (8001688 <main+0x11c>)
 800158c:	0018      	movs	r0, r3
 800158e:	f001 ff95 	bl	80034bc <HAL_UART_DeInit>
  HAL_UART_Receive_DMA(&huart2, uart_rx_buf, RX_BUFFER_LEN);
 8001592:	493e      	ldr	r1, [pc, #248]	; (800168c <main+0x120>)
 8001594:	4b3e      	ldr	r3, [pc, #248]	; (8001690 <main+0x124>)
 8001596:	2240      	movs	r2, #64	; 0x40
 8001598:	0018      	movs	r0, r3
 800159a:	f002 f86d 	bl	8003678 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
#if 1
	  while (uart_rx_read_ptr != uart_rx_write_ptr) {
 800159e:	e01b      	b.n	80015d8 <main+0x6c>
	      uint8_t b = uart_rx_buf[uart_rx_read_ptr];
 80015a0:	4b3c      	ldr	r3, [pc, #240]	; (8001694 <main+0x128>)
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	0019      	movs	r1, r3
 80015a8:	2315      	movs	r3, #21
 80015aa:	18fb      	adds	r3, r7, r3
 80015ac:	4a37      	ldr	r2, [pc, #220]	; (800168c <main+0x120>)
 80015ae:	5c52      	ldrb	r2, [r2, r1]
 80015b0:	701a      	strb	r2, [r3, #0]
	      if (++uart_rx_read_ptr >= RX_BUFFER_LEN) uart_rx_read_ptr = 0; // increase read pointer
 80015b2:	4b38      	ldr	r3, [pc, #224]	; (8001694 <main+0x128>)
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	3301      	adds	r3, #1
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	4a35      	ldr	r2, [pc, #212]	; (8001694 <main+0x128>)
 80015be:	1c19      	adds	r1, r3, #0
 80015c0:	8011      	strh	r1, [r2, #0]
 80015c2:	2b3f      	cmp	r3, #63	; 0x3f
 80015c4:	d902      	bls.n	80015cc <main+0x60>
 80015c6:	4b33      	ldr	r3, [pc, #204]	; (8001694 <main+0x128>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	801a      	strh	r2, [r3, #0]

	      uart_byte_available(b); // process every received byte with the RX state machine
 80015cc:	2315      	movs	r3, #21
 80015ce:	18fb      	adds	r3, r7, r3
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	0018      	movs	r0, r3
 80015d4:	f7ff ff98 	bl	8001508 <uart_byte_available>
	  while (uart_rx_read_ptr != uart_rx_write_ptr) {
 80015d8:	4b2e      	ldr	r3, [pc, #184]	; (8001694 <main+0x128>)
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	b29b      	uxth	r3, r3
 80015de:	0019      	movs	r1, r3
 80015e0:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <main+0x12c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2240      	movs	r2, #64	; 0x40
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	4299      	cmp	r1, r3
 80015ec:	d1d8      	bne.n	80015a0 <main+0x34>
	  }

	  if (nfc_ready && nfc_rx_read_ptr != nfc_rx_write_ptr) {
 80015ee:	4b2b      	ldr	r3, [pc, #172]	; (800169c <main+0x130>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f0      	beq.n	80015d8 <main+0x6c>
 80015f6:	4b2a      	ldr	r3, [pc, #168]	; (80016a0 <main+0x134>)
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	0019      	movs	r1, r3
 80015fe:	4b29      	ldr	r3, [pc, #164]	; (80016a4 <main+0x138>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2240      	movs	r2, #64	; 0x40
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	4299      	cmp	r1, r3
 800160a:	d0e5      	beq.n	80015d8 <main+0x6c>
		  uint8_t data[16];
		  uint8_t len;
		  uint8_t resp = cr95read(data, &len);
 800160c:	2516      	movs	r5, #22
 800160e:	197c      	adds	r4, r7, r5
 8001610:	1cfa      	adds	r2, r7, #3
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	0011      	movs	r1, r2
 8001616:	0018      	movs	r0, r3
 8001618:	f7fe fe3c 	bl	8000294 <cr95read>
 800161c:	0003      	movs	r3, r0
 800161e:	7023      	strb	r3, [r4, #0]

		  if (resp != 0xFF) {
 8001620:	197b      	adds	r3, r7, r5
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2bff      	cmp	r3, #255	; 0xff
 8001626:	d029      	beq.n	800167c <main+0x110>
			  printf("Async response, code = 0x%02x, len = %d, data =", resp, len);
 8001628:	2316      	movs	r3, #22
 800162a:	18fb      	adds	r3, r7, r3
 800162c:	7819      	ldrb	r1, [r3, #0]
 800162e:	1cfb      	adds	r3, r7, #3
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	001a      	movs	r2, r3
 8001634:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <main+0x13c>)
 8001636:	0018      	movs	r0, r3
 8001638:	f002 fd0e 	bl	8004058 <iprintf>
			  for (uint8_t i = 0; i < len; i++) printf(" %02X", data[i]);
 800163c:	2317      	movs	r3, #23
 800163e:	18fb      	adds	r3, r7, r3
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
 8001644:	e00f      	b.n	8001666 <main+0xfa>
 8001646:	2417      	movs	r4, #23
 8001648:	193b      	adds	r3, r7, r4
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	1d3a      	adds	r2, r7, #4
 800164e:	5cd3      	ldrb	r3, [r2, r3]
 8001650:	001a      	movs	r2, r3
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <main+0x140>)
 8001654:	0011      	movs	r1, r2
 8001656:	0018      	movs	r0, r3
 8001658:	f002 fcfe 	bl	8004058 <iprintf>
 800165c:	193b      	adds	r3, r7, r4
 800165e:	781a      	ldrb	r2, [r3, #0]
 8001660:	193b      	adds	r3, r7, r4
 8001662:	3201      	adds	r2, #1
 8001664:	701a      	strb	r2, [r3, #0]
 8001666:	1cfb      	adds	r3, r7, #3
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2217      	movs	r2, #23
 800166c:	18ba      	adds	r2, r7, r2
 800166e:	7812      	ldrb	r2, [r2, #0]
 8001670:	429a      	cmp	r2, r3
 8001672:	d3e8      	bcc.n	8001646 <main+0xda>
			  printf("\n");
 8001674:	200a      	movs	r0, #10
 8001676:	f002 fd09 	bl	800408c <putchar>
 800167a:	e7ad      	b.n	80015d8 <main+0x6c>
		  } else {
			  printf("Async reponse, invalid (timeout)\n");
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <main+0x144>)
 800167e:	0018      	movs	r0, r3
 8001680:	f002 fd78 	bl	8004174 <puts>
	  while (uart_rx_read_ptr != uart_rx_write_ptr) {
 8001684:	e7a8      	b.n	80015d8 <main+0x6c>
 8001686:	46c0      	nop			; (mov r8, r8)
 8001688:	2000035c 	.word	0x2000035c
 800168c:	200001fc 	.word	0x200001fc
 8001690:	200003dc 	.word	0x200003dc
 8001694:	2000023c 	.word	0x2000023c
 8001698:	200002d4 	.word	0x200002d4
 800169c:	20000283 	.word	0x20000283
 80016a0:	20000280 	.word	0x20000280
 80016a4:	20000318 	.word	0x20000318
 80016a8:	0800597c 	.word	0x0800597c
 80016ac:	080055ac 	.word	0x080055ac
 80016b0:	080059ac 	.word	0x080059ac

080016b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b095      	sub	sp, #84	; 0x54
 80016b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ba:	2420      	movs	r4, #32
 80016bc:	193b      	adds	r3, r7, r4
 80016be:	0018      	movs	r0, r3
 80016c0:	2330      	movs	r3, #48	; 0x30
 80016c2:	001a      	movs	r2, r3
 80016c4:	2100      	movs	r1, #0
 80016c6:	f002 fcbf 	bl	8004048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016ca:	2310      	movs	r3, #16
 80016cc:	18fb      	adds	r3, r7, r3
 80016ce:	0018      	movs	r0, r3
 80016d0:	2310      	movs	r3, #16
 80016d2:	001a      	movs	r2, r3
 80016d4:	2100      	movs	r1, #0
 80016d6:	f002 fcb7 	bl	8004048 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016da:	003b      	movs	r3, r7
 80016dc:	0018      	movs	r0, r3
 80016de:	2310      	movs	r3, #16
 80016e0:	001a      	movs	r2, r3
 80016e2:	2100      	movs	r1, #0
 80016e4:	f002 fcb0 	bl	8004048 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016e8:	0021      	movs	r1, r4
 80016ea:	187b      	adds	r3, r7, r1
 80016ec:	2202      	movs	r2, #2
 80016ee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f0:	187b      	adds	r3, r7, r1
 80016f2:	2201      	movs	r2, #1
 80016f4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016f6:	187b      	adds	r3, r7, r1
 80016f8:	2210      	movs	r2, #16
 80016fa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016fc:	187b      	adds	r3, r7, r1
 80016fe:	2202      	movs	r2, #2
 8001700:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001702:	187b      	adds	r3, r7, r1
 8001704:	2200      	movs	r2, #0
 8001706:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001708:	187b      	adds	r3, r7, r1
 800170a:	22a0      	movs	r2, #160	; 0xa0
 800170c:	0392      	lsls	r2, r2, #14
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001710:	187b      	adds	r3, r7, r1
 8001712:	2200      	movs	r2, #0
 8001714:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001716:	187b      	adds	r3, r7, r1
 8001718:	0018      	movs	r0, r3
 800171a:	f001 f93f 	bl	800299c <HAL_RCC_OscConfig>
 800171e:	1e03      	subs	r3, r0, #0
 8001720:	d001      	beq.n	8001726 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001722:	f000 f937 	bl	8001994 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001726:	2110      	movs	r1, #16
 8001728:	187b      	adds	r3, r7, r1
 800172a:	2207      	movs	r2, #7
 800172c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800172e:	187b      	adds	r3, r7, r1
 8001730:	2202      	movs	r2, #2
 8001732:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001734:	187b      	adds	r3, r7, r1
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800173a:	187b      	adds	r3, r7, r1
 800173c:	2200      	movs	r2, #0
 800173e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001740:	187b      	adds	r3, r7, r1
 8001742:	2101      	movs	r1, #1
 8001744:	0018      	movs	r0, r3
 8001746:	f001 fc45 	bl	8002fd4 <HAL_RCC_ClockConfig>
 800174a:	1e03      	subs	r3, r0, #0
 800174c:	d001      	beq.n	8001752 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800174e:	f000 f921 	bl	8001994 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001752:	003b      	movs	r3, r7
 8001754:	2201      	movs	r2, #1
 8001756:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001758:	003b      	movs	r3, r7
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800175e:	003b      	movs	r3, r7
 8001760:	0018      	movs	r0, r3
 8001762:	f001 fd89 	bl	8003278 <HAL_RCCEx_PeriphCLKConfig>
 8001766:	1e03      	subs	r3, r0, #0
 8001768:	d001      	beq.n	800176e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800176a:	f000 f913 	bl	8001994 <Error_Handler>
  }
}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	46bd      	mov	sp, r7
 8001772:	b015      	add	sp, #84	; 0x54
 8001774:	bd90      	pop	{r4, r7, pc}
	...

08001778 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800177c:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <MX_USART1_UART_Init+0x5c>)
 800177e:	4a16      	ldr	r2, [pc, #88]	; (80017d8 <MX_USART1_UART_Init+0x60>)
 8001780:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001782:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <MX_USART1_UART_Init+0x5c>)
 8001784:	22e1      	movs	r2, #225	; 0xe1
 8001786:	0212      	lsls	r2, r2, #8
 8001788:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800178a:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <MX_USART1_UART_Init+0x5c>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8001790:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <MX_USART1_UART_Init+0x5c>)
 8001792:	2280      	movs	r2, #128	; 0x80
 8001794:	0192      	lsls	r2, r2, #6
 8001796:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001798:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <MX_USART1_UART_Init+0x5c>)
 800179a:	2200      	movs	r2, #0
 800179c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800179e:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <MX_USART1_UART_Init+0x5c>)
 80017a0:	220c      	movs	r2, #12
 80017a2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <MX_USART1_UART_Init+0x5c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017aa:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <MX_USART1_UART_Init+0x5c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <MX_USART1_UART_Init+0x5c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017b6:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <MX_USART1_UART_Init+0x5c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <MX_USART1_UART_Init+0x5c>)
 80017be:	0018      	movs	r0, r3
 80017c0:	f001 fe28 	bl	8003414 <HAL_UART_Init>
 80017c4:	1e03      	subs	r3, r0, #0
 80017c6:	d001      	beq.n	80017cc <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 80017c8:	f000 f8e4 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017cc:	46c0      	nop			; (mov r8, r8)
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	2000035c 	.word	0x2000035c
 80017d8:	40013800 	.word	0x40013800

080017dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <MX_USART2_UART_Init+0x58>)
 80017e2:	4a15      	ldr	r2, [pc, #84]	; (8001838 <MX_USART2_UART_Init+0x5c>)
 80017e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80017e6:	4b13      	ldr	r3, [pc, #76]	; (8001834 <MX_USART2_UART_Init+0x58>)
 80017e8:	2296      	movs	r2, #150	; 0x96
 80017ea:	0212      	lsls	r2, r2, #8
 80017ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <MX_USART2_UART_Init+0x58>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017f4:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <MX_USART2_UART_Init+0x58>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <MX_USART2_UART_Init+0x58>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <MX_USART2_UART_Init+0x58>)
 8001802:	220c      	movs	r2, #12
 8001804:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <MX_USART2_UART_Init+0x58>)
 8001808:	2200      	movs	r2, #0
 800180a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <MX_USART2_UART_Init+0x58>)
 800180e:	2200      	movs	r2, #0
 8001810:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001812:	4b08      	ldr	r3, [pc, #32]	; (8001834 <MX_USART2_UART_Init+0x58>)
 8001814:	2200      	movs	r2, #0
 8001816:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <MX_USART2_UART_Init+0x58>)
 800181a:	2200      	movs	r2, #0
 800181c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800181e:	4b05      	ldr	r3, [pc, #20]	; (8001834 <MX_USART2_UART_Init+0x58>)
 8001820:	0018      	movs	r0, r3
 8001822:	f001 fdf7 	bl	8003414 <HAL_UART_Init>
 8001826:	1e03      	subs	r3, r0, #0
 8001828:	d001      	beq.n	800182e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800182a:	f000 f8b3 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800182e:	46c0      	nop			; (mov r8, r8)
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	200003dc 	.word	0x200003dc
 8001838:	40004400 	.word	0x40004400

0800183c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001842:	4b10      	ldr	r3, [pc, #64]	; (8001884 <MX_DMA_Init+0x48>)
 8001844:	695a      	ldr	r2, [r3, #20]
 8001846:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <MX_DMA_Init+0x48>)
 8001848:	2101      	movs	r1, #1
 800184a:	430a      	orrs	r2, r1
 800184c:	615a      	str	r2, [r3, #20]
 800184e:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <MX_DMA_Init+0x48>)
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	2201      	movs	r2, #1
 8001854:	4013      	ands	r3, r2
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	2100      	movs	r1, #0
 800185e:	200a      	movs	r0, #10
 8001860:	f000 fbea 	bl	8002038 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001864:	200a      	movs	r0, #10
 8001866:	f000 fbfc 	bl	8002062 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2100      	movs	r1, #0
 800186e:	200b      	movs	r0, #11
 8001870:	f000 fbe2 	bl	8002038 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8001874:	200b      	movs	r0, #11
 8001876:	f000 fbf4 	bl	8002062 <HAL_NVIC_EnableIRQ>

}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	46bd      	mov	sp, r7
 800187e:	b002      	add	sp, #8
 8001880:	bd80      	pop	{r7, pc}
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	40021000 	.word	0x40021000

08001888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b089      	sub	sp, #36	; 0x24
 800188c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188e:	240c      	movs	r4, #12
 8001890:	193b      	adds	r3, r7, r4
 8001892:	0018      	movs	r0, r3
 8001894:	2314      	movs	r3, #20
 8001896:	001a      	movs	r2, r3
 8001898:	2100      	movs	r1, #0
 800189a:	f002 fbd5 	bl	8004048 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800189e:	4b3a      	ldr	r3, [pc, #232]	; (8001988 <MX_GPIO_Init+0x100>)
 80018a0:	695a      	ldr	r2, [r3, #20]
 80018a2:	4b39      	ldr	r3, [pc, #228]	; (8001988 <MX_GPIO_Init+0x100>)
 80018a4:	2180      	movs	r1, #128	; 0x80
 80018a6:	0309      	lsls	r1, r1, #12
 80018a8:	430a      	orrs	r2, r1
 80018aa:	615a      	str	r2, [r3, #20]
 80018ac:	4b36      	ldr	r3, [pc, #216]	; (8001988 <MX_GPIO_Init+0x100>)
 80018ae:	695a      	ldr	r2, [r3, #20]
 80018b0:	2380      	movs	r3, #128	; 0x80
 80018b2:	031b      	lsls	r3, r3, #12
 80018b4:	4013      	ands	r3, r2
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018ba:	4b33      	ldr	r3, [pc, #204]	; (8001988 <MX_GPIO_Init+0x100>)
 80018bc:	695a      	ldr	r2, [r3, #20]
 80018be:	4b32      	ldr	r3, [pc, #200]	; (8001988 <MX_GPIO_Init+0x100>)
 80018c0:	2180      	movs	r1, #128	; 0x80
 80018c2:	03c9      	lsls	r1, r1, #15
 80018c4:	430a      	orrs	r2, r1
 80018c6:	615a      	str	r2, [r3, #20]
 80018c8:	4b2f      	ldr	r3, [pc, #188]	; (8001988 <MX_GPIO_Init+0x100>)
 80018ca:	695a      	ldr	r2, [r3, #20]
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	03db      	lsls	r3, r3, #15
 80018d0:	4013      	ands	r3, r2
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d6:	4b2c      	ldr	r3, [pc, #176]	; (8001988 <MX_GPIO_Init+0x100>)
 80018d8:	695a      	ldr	r2, [r3, #20]
 80018da:	4b2b      	ldr	r3, [pc, #172]	; (8001988 <MX_GPIO_Init+0x100>)
 80018dc:	2180      	movs	r1, #128	; 0x80
 80018de:	0289      	lsls	r1, r1, #10
 80018e0:	430a      	orrs	r2, r1
 80018e2:	615a      	str	r2, [r3, #20]
 80018e4:	4b28      	ldr	r3, [pc, #160]	; (8001988 <MX_GPIO_Init+0x100>)
 80018e6:	695a      	ldr	r2, [r3, #20]
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	029b      	lsls	r3, r3, #10
 80018ec:	4013      	ands	r3, r2
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 80018f2:	2390      	movs	r3, #144	; 0x90
 80018f4:	0059      	lsls	r1, r3, #1
 80018f6:	2390      	movs	r3, #144	; 0x90
 80018f8:	05db      	lsls	r3, r3, #23
 80018fa:	2200      	movs	r2, #0
 80018fc:	0018      	movs	r0, r3
 80018fe:	f001 f82f 	bl	8002960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001902:	4b22      	ldr	r3, [pc, #136]	; (800198c <MX_GPIO_Init+0x104>)
 8001904:	2200      	movs	r2, #0
 8001906:	2180      	movs	r1, #128	; 0x80
 8001908:	0018      	movs	r0, r3
 800190a:	f001 f829 	bl	8002960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800190e:	193b      	adds	r3, r7, r4
 8001910:	2280      	movs	r2, #128	; 0x80
 8001912:	0192      	lsls	r2, r2, #6
 8001914:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001916:	193b      	adds	r3, r7, r4
 8001918:	4a1d      	ldr	r2, [pc, #116]	; (8001990 <MX_GPIO_Init+0x108>)
 800191a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	193b      	adds	r3, r7, r4
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001922:	193b      	adds	r3, r7, r4
 8001924:	4a19      	ldr	r2, [pc, #100]	; (800198c <MX_GPIO_Init+0x104>)
 8001926:	0019      	movs	r1, r3
 8001928:	0010      	movs	r0, r2
 800192a:	f000 fddb 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 800192e:	0021      	movs	r1, r4
 8001930:	187b      	adds	r3, r7, r1
 8001932:	2290      	movs	r2, #144	; 0x90
 8001934:	0052      	lsls	r2, r2, #1
 8001936:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001938:	187b      	adds	r3, r7, r1
 800193a:	2201      	movs	r2, #1
 800193c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	187b      	adds	r3, r7, r1
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	187b      	adds	r3, r7, r1
 8001946:	2200      	movs	r2, #0
 8001948:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194a:	000c      	movs	r4, r1
 800194c:	187a      	adds	r2, r7, r1
 800194e:	2390      	movs	r3, #144	; 0x90
 8001950:	05db      	lsls	r3, r3, #23
 8001952:	0011      	movs	r1, r2
 8001954:	0018      	movs	r0, r3
 8001956:	f000 fdc5 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800195a:	0021      	movs	r1, r4
 800195c:	187b      	adds	r3, r7, r1
 800195e:	2280      	movs	r2, #128	; 0x80
 8001960:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001962:	187b      	adds	r3, r7, r1
 8001964:	2201      	movs	r2, #1
 8001966:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	187b      	adds	r3, r7, r1
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196e:	187b      	adds	r3, r7, r1
 8001970:	2200      	movs	r2, #0
 8001972:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001974:	187b      	adds	r3, r7, r1
 8001976:	4a05      	ldr	r2, [pc, #20]	; (800198c <MX_GPIO_Init+0x104>)
 8001978:	0019      	movs	r1, r3
 800197a:	0010      	movs	r0, r2
 800197c:	f000 fdb2 	bl	80024e4 <HAL_GPIO_Init>

}
 8001980:	46c0      	nop			; (mov r8, r8)
 8001982:	46bd      	mov	sp, r7
 8001984:	b009      	add	sp, #36	; 0x24
 8001986:	bd90      	pop	{r4, r7, pc}
 8001988:	40021000 	.word	0x40021000
 800198c:	48000800 	.word	0x48000800
 8001990:	10210000 	.word	0x10210000

08001994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001998:	46c0      	nop			; (mov r8, r8)
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a6:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <HAL_MspInit+0x44>)
 80019a8:	699a      	ldr	r2, [r3, #24]
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <HAL_MspInit+0x44>)
 80019ac:	2101      	movs	r1, #1
 80019ae:	430a      	orrs	r2, r1
 80019b0:	619a      	str	r2, [r3, #24]
 80019b2:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <HAL_MspInit+0x44>)
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	2201      	movs	r2, #1
 80019b8:	4013      	ands	r3, r2
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_MspInit+0x44>)
 80019c0:	69da      	ldr	r2, [r3, #28]
 80019c2:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <HAL_MspInit+0x44>)
 80019c4:	2180      	movs	r1, #128	; 0x80
 80019c6:	0549      	lsls	r1, r1, #21
 80019c8:	430a      	orrs	r2, r1
 80019ca:	61da      	str	r2, [r3, #28]
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <HAL_MspInit+0x44>)
 80019ce:	69da      	ldr	r2, [r3, #28]
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	055b      	lsls	r3, r3, #21
 80019d4:	4013      	ands	r3, r2
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	46bd      	mov	sp, r7
 80019de:	b002      	add	sp, #8
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	40021000 	.word	0x40021000

080019e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08c      	sub	sp, #48	; 0x30
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	231c      	movs	r3, #28
 80019f2:	18fb      	adds	r3, r7, r3
 80019f4:	0018      	movs	r0, r3
 80019f6:	2314      	movs	r3, #20
 80019f8:	001a      	movs	r2, r3
 80019fa:	2100      	movs	r1, #0
 80019fc:	f002 fb24 	bl	8004048 <memset>
  if(huart->Instance==USART1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a5f      	ldr	r2, [pc, #380]	; (8001b84 <HAL_UART_MspInit+0x19c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d15a      	bne.n	8001ac0 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a0a:	4b5f      	ldr	r3, [pc, #380]	; (8001b88 <HAL_UART_MspInit+0x1a0>)
 8001a0c:	699a      	ldr	r2, [r3, #24]
 8001a0e:	4b5e      	ldr	r3, [pc, #376]	; (8001b88 <HAL_UART_MspInit+0x1a0>)
 8001a10:	2180      	movs	r1, #128	; 0x80
 8001a12:	01c9      	lsls	r1, r1, #7
 8001a14:	430a      	orrs	r2, r1
 8001a16:	619a      	str	r2, [r3, #24]
 8001a18:	4b5b      	ldr	r3, [pc, #364]	; (8001b88 <HAL_UART_MspInit+0x1a0>)
 8001a1a:	699a      	ldr	r2, [r3, #24]
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	01db      	lsls	r3, r3, #7
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
 8001a24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	4b58      	ldr	r3, [pc, #352]	; (8001b88 <HAL_UART_MspInit+0x1a0>)
 8001a28:	695a      	ldr	r2, [r3, #20]
 8001a2a:	4b57      	ldr	r3, [pc, #348]	; (8001b88 <HAL_UART_MspInit+0x1a0>)
 8001a2c:	2180      	movs	r1, #128	; 0x80
 8001a2e:	0289      	lsls	r1, r1, #10
 8001a30:	430a      	orrs	r2, r1
 8001a32:	615a      	str	r2, [r3, #20]
 8001a34:	4b54      	ldr	r3, [pc, #336]	; (8001b88 <HAL_UART_MspInit+0x1a0>)
 8001a36:	695a      	ldr	r2, [r3, #20]
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	029b      	lsls	r3, r3, #10
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a42:	211c      	movs	r1, #28
 8001a44:	187b      	adds	r3, r7, r1
 8001a46:	22c0      	movs	r2, #192	; 0xc0
 8001a48:	00d2      	lsls	r2, r2, #3
 8001a4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4c:	187b      	adds	r3, r7, r1
 8001a4e:	2202      	movs	r2, #2
 8001a50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	187b      	adds	r3, r7, r1
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a58:	187b      	adds	r3, r7, r1
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001a5e:	187b      	adds	r3, r7, r1
 8001a60:	2201      	movs	r2, #1
 8001a62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a64:	187a      	adds	r2, r7, r1
 8001a66:	2390      	movs	r3, #144	; 0x90
 8001a68:	05db      	lsls	r3, r3, #23
 8001a6a:	0011      	movs	r1, r2
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f000 fd39 	bl	80024e4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8001a72:	4b46      	ldr	r3, [pc, #280]	; (8001b8c <HAL_UART_MspInit+0x1a4>)
 8001a74:	4a46      	ldr	r2, [pc, #280]	; (8001b90 <HAL_UART_MspInit+0x1a8>)
 8001a76:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a78:	4b44      	ldr	r3, [pc, #272]	; (8001b8c <HAL_UART_MspInit+0x1a4>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a7e:	4b43      	ldr	r3, [pc, #268]	; (8001b8c <HAL_UART_MspInit+0x1a4>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a84:	4b41      	ldr	r3, [pc, #260]	; (8001b8c <HAL_UART_MspInit+0x1a4>)
 8001a86:	2280      	movs	r2, #128	; 0x80
 8001a88:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a8a:	4b40      	ldr	r3, [pc, #256]	; (8001b8c <HAL_UART_MspInit+0x1a4>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a90:	4b3e      	ldr	r3, [pc, #248]	; (8001b8c <HAL_UART_MspInit+0x1a4>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001a96:	4b3d      	ldr	r3, [pc, #244]	; (8001b8c <HAL_UART_MspInit+0x1a4>)
 8001a98:	2220      	movs	r2, #32
 8001a9a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a9c:	4b3b      	ldr	r3, [pc, #236]	; (8001b8c <HAL_UART_MspInit+0x1a4>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001aa2:	4b3a      	ldr	r3, [pc, #232]	; (8001b8c <HAL_UART_MspInit+0x1a4>)
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f000 faf9 	bl	800209c <HAL_DMA_Init>
 8001aaa:	1e03      	subs	r3, r0, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001aae:	f7ff ff71 	bl	8001994 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a35      	ldr	r2, [pc, #212]	; (8001b8c <HAL_UART_MspInit+0x1a4>)
 8001ab6:	66da      	str	r2, [r3, #108]	; 0x6c
 8001ab8:	4b34      	ldr	r3, [pc, #208]	; (8001b8c <HAL_UART_MspInit+0x1a4>)
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001abe:	e05d      	b.n	8001b7c <HAL_UART_MspInit+0x194>
  else if(huart->Instance==USART2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a33      	ldr	r2, [pc, #204]	; (8001b94 <HAL_UART_MspInit+0x1ac>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d158      	bne.n	8001b7c <HAL_UART_MspInit+0x194>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aca:	4b2f      	ldr	r3, [pc, #188]	; (8001b88 <HAL_UART_MspInit+0x1a0>)
 8001acc:	69da      	ldr	r2, [r3, #28]
 8001ace:	4b2e      	ldr	r3, [pc, #184]	; (8001b88 <HAL_UART_MspInit+0x1a0>)
 8001ad0:	2180      	movs	r1, #128	; 0x80
 8001ad2:	0289      	lsls	r1, r1, #10
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	61da      	str	r2, [r3, #28]
 8001ad8:	4b2b      	ldr	r3, [pc, #172]	; (8001b88 <HAL_UART_MspInit+0x1a0>)
 8001ada:	69da      	ldr	r2, [r3, #28]
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	029b      	lsls	r3, r3, #10
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae6:	4b28      	ldr	r3, [pc, #160]	; (8001b88 <HAL_UART_MspInit+0x1a0>)
 8001ae8:	695a      	ldr	r2, [r3, #20]
 8001aea:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <HAL_UART_MspInit+0x1a0>)
 8001aec:	2180      	movs	r1, #128	; 0x80
 8001aee:	0289      	lsls	r1, r1, #10
 8001af0:	430a      	orrs	r2, r1
 8001af2:	615a      	str	r2, [r3, #20]
 8001af4:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <HAL_UART_MspInit+0x1a0>)
 8001af6:	695a      	ldr	r2, [r3, #20]
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	029b      	lsls	r3, r3, #10
 8001afc:	4013      	ands	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b02:	211c      	movs	r1, #28
 8001b04:	187b      	adds	r3, r7, r1
 8001b06:	220c      	movs	r2, #12
 8001b08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	187b      	adds	r3, r7, r1
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	187b      	adds	r3, r7, r1
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	187b      	adds	r3, r7, r1
 8001b18:	2200      	movs	r2, #0
 8001b1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001b1c:	187b      	adds	r3, r7, r1
 8001b1e:	2201      	movs	r2, #1
 8001b20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b22:	187a      	adds	r2, r7, r1
 8001b24:	2390      	movs	r3, #144	; 0x90
 8001b26:	05db      	lsls	r3, r3, #23
 8001b28:	0011      	movs	r1, r2
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f000 fcda 	bl	80024e4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8001b30:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001b32:	4a1a      	ldr	r2, [pc, #104]	; (8001b9c <HAL_UART_MspInit+0x1b4>)
 8001b34:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b36:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b3c:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001b44:	2280      	movs	r2, #128	; 0x80
 8001b46:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b48:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001b54:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001b56:	2220      	movs	r2, #32
 8001b58:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b5a:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b60:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001b62:	0018      	movs	r0, r3
 8001b64:	f000 fa9a 	bl	800209c <HAL_DMA_Init>
 8001b68:	1e03      	subs	r3, r0, #0
 8001b6a:	d001      	beq.n	8001b70 <HAL_UART_MspInit+0x188>
      Error_Handler();
 8001b6c:	f7ff ff12 	bl	8001994 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a09      	ldr	r2, [pc, #36]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001b74:	66da      	str	r2, [r3, #108]	; 0x6c
 8001b76:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b7c:	46c0      	nop			; (mov r8, r8)
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	b00c      	add	sp, #48	; 0x30
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40013800 	.word	0x40013800
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	20000318 	.word	0x20000318
 8001b90:	40020030 	.word	0x40020030
 8001b94:	40004400 	.word	0x40004400
 8001b98:	200002d4 	.word	0x200002d4
 8001b9c:	40020058 	.word	0x40020058

08001ba0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a18      	ldr	r2, [pc, #96]	; (8001c10 <HAL_UART_MspDeInit+0x70>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d113      	bne.n	8001bda <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001bb2:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <HAL_UART_MspDeInit+0x74>)
 8001bb4:	699a      	ldr	r2, [r3, #24]
 8001bb6:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <HAL_UART_MspDeInit+0x74>)
 8001bb8:	4917      	ldr	r1, [pc, #92]	; (8001c18 <HAL_UART_MspDeInit+0x78>)
 8001bba:	400a      	ands	r2, r1
 8001bbc:	619a      	str	r2, [r3, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8001bbe:	23c0      	movs	r3, #192	; 0xc0
 8001bc0:	00da      	lsls	r2, r3, #3
 8001bc2:	2390      	movs	r3, #144	; 0x90
 8001bc4:	05db      	lsls	r3, r3, #23
 8001bc6:	0011      	movs	r1, r2
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f000 fdfb 	bl	80027c4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	f000 faaa 	bl	800212c <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8001bd8:	e015      	b.n	8001c06 <HAL_UART_MspDeInit+0x66>
  else if(huart->Instance==USART2)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a0f      	ldr	r2, [pc, #60]	; (8001c1c <HAL_UART_MspDeInit+0x7c>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d110      	bne.n	8001c06 <HAL_UART_MspDeInit+0x66>
    __HAL_RCC_USART2_CLK_DISABLE();
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_UART_MspDeInit+0x74>)
 8001be6:	69da      	ldr	r2, [r3, #28]
 8001be8:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <HAL_UART_MspDeInit+0x74>)
 8001bea:	490d      	ldr	r1, [pc, #52]	; (8001c20 <HAL_UART_MspDeInit+0x80>)
 8001bec:	400a      	ands	r2, r1
 8001bee:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 8001bf0:	2390      	movs	r3, #144	; 0x90
 8001bf2:	05db      	lsls	r3, r3, #23
 8001bf4:	210c      	movs	r1, #12
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f000 fde4 	bl	80027c4 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c00:	0018      	movs	r0, r3
 8001c02:	f000 fa93 	bl	800212c <HAL_DMA_DeInit>
}
 8001c06:	46c0      	nop			; (mov r8, r8)
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	b002      	add	sp, #8
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	40013800 	.word	0x40013800
 8001c14:	40021000 	.word	0x40021000
 8001c18:	ffffbfff 	.word	0xffffbfff
 8001c1c:	40004400 	.word	0x40004400
 8001c20:	fffdffff 	.word	0xfffdffff

08001c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c28:	46c0      	nop			; (mov r8, r8)
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c32:	e7fe      	b.n	8001c32 <HardFault_Handler+0x4>

08001c34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c38:	46c0      	nop			; (mov r8, r8)
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c4c:	f000 f90a 	bl	8001e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c50:	46c0      	nop			; (mov r8, r8)
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001c5c:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <DMA1_Channel2_3_IRQHandler+0x14>)
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f000 fb4b 	bl	80022fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001c64:	46c0      	nop			; (mov r8, r8)
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	20000318 	.word	0x20000318

08001c70 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001c74:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <DMA1_Channel4_5_IRQHandler+0x14>)
 8001c76:	0018      	movs	r0, r3
 8001c78:	f000 fb3f 	bl	80022fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8001c7c:	46c0      	nop			; (mov r8, r8)
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	200002d4 	.word	0x200002d4

08001c88 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	e00a      	b.n	8001cb0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c9a:	e000      	b.n	8001c9e <_read+0x16>
 8001c9c:	bf00      	nop
 8001c9e:	0001      	movs	r1, r0
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	60ba      	str	r2, [r7, #8]
 8001ca6:	b2ca      	uxtb	r2, r1
 8001ca8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	3301      	adds	r3, #1
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	dbf0      	blt.n	8001c9a <_read+0x12>
	}

return len;
 8001cb8:	687b      	ldr	r3, [r7, #4]
}
 8001cba:	0018      	movs	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	b006      	add	sp, #24
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
	return -1;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	425b      	negs	r3, r3
}
 8001cce:	0018      	movs	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	b002      	add	sp, #8
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	2280      	movs	r2, #128	; 0x80
 8001ce4:	0192      	lsls	r2, r2, #6
 8001ce6:	605a      	str	r2, [r3, #4]
	return 0;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	0018      	movs	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	b002      	add	sp, #8
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <_isatty>:

int _isatty(int file)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
	return 1;
 8001cfa:	2301      	movs	r3, #1
}
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	b002      	add	sp, #8
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
	return 0;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	0018      	movs	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	b004      	add	sp, #16
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <_sbrk+0x50>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d102      	bne.n	8001d32 <_sbrk+0x16>
		heap_end = &end;
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <_sbrk+0x50>)
 8001d2e:	4a10      	ldr	r2, [pc, #64]	; (8001d70 <_sbrk+0x54>)
 8001d30:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <_sbrk+0x50>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <_sbrk+0x50>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	18d3      	adds	r3, r2, r3
 8001d40:	466a      	mov	r2, sp
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d907      	bls.n	8001d56 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001d46:	f002 f955 	bl	8003ff4 <__errno>
 8001d4a:	0003      	movs	r3, r0
 8001d4c:	220c      	movs	r2, #12
 8001d4e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001d50:	2301      	movs	r3, #1
 8001d52:	425b      	negs	r3, r3
 8001d54:	e006      	b.n	8001d64 <_sbrk+0x48>
	}

	heap_end += incr;
 8001d56:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <_sbrk+0x50>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	18d2      	adds	r2, r2, r3
 8001d5e:	4b03      	ldr	r3, [pc, #12]	; (8001d6c <_sbrk+0x50>)
 8001d60:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8001d62:	68fb      	ldr	r3, [r7, #12]
}
 8001d64:	0018      	movs	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b004      	add	sp, #16
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	200002c8 	.word	0x200002c8
 8001d70:	20000468 	.word	0x20000468

08001d74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001d78:	46c0      	nop			; (mov r8, r8)
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d80:	480d      	ldr	r0, [pc, #52]	; (8001db8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d82:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d84:	480d      	ldr	r0, [pc, #52]	; (8001dbc <LoopForever+0x6>)
  ldr r1, =_edata
 8001d86:	490e      	ldr	r1, [pc, #56]	; (8001dc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d88:	4a0e      	ldr	r2, [pc, #56]	; (8001dc4 <LoopForever+0xe>)
  movs r3, #0
 8001d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d8c:	e002      	b.n	8001d94 <LoopCopyDataInit>

08001d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d92:	3304      	adds	r3, #4

08001d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d98:	d3f9      	bcc.n	8001d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d9a:	4a0b      	ldr	r2, [pc, #44]	; (8001dc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d9c:	4c0b      	ldr	r4, [pc, #44]	; (8001dcc <LoopForever+0x16>)
  movs r3, #0
 8001d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001da0:	e001      	b.n	8001da6 <LoopFillZerobss>

08001da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da4:	3204      	adds	r2, #4

08001da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da8:	d3fb      	bcc.n	8001da2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001daa:	f7ff ffe3 	bl	8001d74 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001dae:	f002 f927 	bl	8004000 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001db2:	f7ff fbdb 	bl	800156c <main>

08001db6 <LoopForever>:

LoopForever:
    b LoopForever
 8001db6:	e7fe      	b.n	8001db6 <LoopForever>
  ldr   r0, =_estack
 8001db8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dc0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001dc4:	08005bb4 	.word	0x08005bb4
  ldr r2, =_sbss
 8001dc8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001dcc:	20000464 	.word	0x20000464

08001dd0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dd0:	e7fe      	b.n	8001dd0 <ADC1_IRQHandler>
	...

08001dd4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dd8:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <HAL_Init+0x24>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_Init+0x24>)
 8001dde:	2110      	movs	r1, #16
 8001de0:	430a      	orrs	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001de4:	2000      	movs	r0, #0
 8001de6:	f000 f809 	bl	8001dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dea:	f7ff fdd9 	bl	80019a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	0018      	movs	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	40022000 	.word	0x40022000

08001dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e04:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <HAL_InitTick+0x5c>)
 8001e06:	681c      	ldr	r4, [r3, #0]
 8001e08:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <HAL_InitTick+0x60>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	0019      	movs	r1, r3
 8001e0e:	23fa      	movs	r3, #250	; 0xfa
 8001e10:	0098      	lsls	r0, r3, #2
 8001e12:	f7fe f981 	bl	8000118 <__udivsi3>
 8001e16:	0003      	movs	r3, r0
 8001e18:	0019      	movs	r1, r3
 8001e1a:	0020      	movs	r0, r4
 8001e1c:	f7fe f97c 	bl	8000118 <__udivsi3>
 8001e20:	0003      	movs	r3, r0
 8001e22:	0018      	movs	r0, r3
 8001e24:	f000 f92d 	bl	8002082 <HAL_SYSTICK_Config>
 8001e28:	1e03      	subs	r3, r0, #0
 8001e2a:	d001      	beq.n	8001e30 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e00f      	b.n	8001e50 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d80b      	bhi.n	8001e4e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	2301      	movs	r3, #1
 8001e3a:	425b      	negs	r3, r3
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	0018      	movs	r0, r3
 8001e40:	f000 f8fa 	bl	8002038 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_InitTick+0x64>)
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e000      	b.n	8001e50 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
}
 8001e50:	0018      	movs	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b003      	add	sp, #12
 8001e56:	bd90      	pop	{r4, r7, pc}
 8001e58:	20000004 	.word	0x20000004
 8001e5c:	2000000c 	.word	0x2000000c
 8001e60:	20000008 	.word	0x20000008

08001e64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e68:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <HAL_IncTick+0x1c>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	001a      	movs	r2, r3
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_IncTick+0x20>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	18d2      	adds	r2, r2, r3
 8001e74:	4b03      	ldr	r3, [pc, #12]	; (8001e84 <HAL_IncTick+0x20>)
 8001e76:	601a      	str	r2, [r3, #0]
}
 8001e78:	46c0      	nop			; (mov r8, r8)
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	2000000c 	.word	0x2000000c
 8001e84:	2000045c 	.word	0x2000045c

08001e88 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e8c:	4b02      	ldr	r3, [pc, #8]	; (8001e98 <HAL_GetTick+0x10>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
}
 8001e90:	0018      	movs	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	2000045c 	.word	0x2000045c

08001e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ea4:	f7ff fff0 	bl	8001e88 <HAL_GetTick>
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	d005      	beq.n	8001ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eb6:	4b09      	ldr	r3, [pc, #36]	; (8001edc <HAL_Delay+0x40>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	001a      	movs	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	189b      	adds	r3, r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	f7ff ffe0 	bl	8001e88 <HAL_GetTick>
 8001ec8:	0002      	movs	r2, r0
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d8f7      	bhi.n	8001ec4 <HAL_Delay+0x28>
  {
  }
}
 8001ed4:	46c0      	nop			; (mov r8, r8)
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	b004      	add	sp, #16
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	2000000c 	.word	0x2000000c

08001ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	0002      	movs	r2, r0
 8001ee8:	1dfb      	adds	r3, r7, #7
 8001eea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001eec:	1dfb      	adds	r3, r7, #7
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b7f      	cmp	r3, #127	; 0x7f
 8001ef2:	d809      	bhi.n	8001f08 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ef4:	1dfb      	adds	r3, r7, #7
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	001a      	movs	r2, r3
 8001efa:	231f      	movs	r3, #31
 8001efc:	401a      	ands	r2, r3
 8001efe:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <__NVIC_EnableIRQ+0x30>)
 8001f00:	2101      	movs	r1, #1
 8001f02:	4091      	lsls	r1, r2
 8001f04:	000a      	movs	r2, r1
 8001f06:	601a      	str	r2, [r3, #0]
  }
}
 8001f08:	46c0      	nop			; (mov r8, r8)
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	b002      	add	sp, #8
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	e000e100 	.word	0xe000e100

08001f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f14:	b590      	push	{r4, r7, lr}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	0002      	movs	r2, r0
 8001f1c:	6039      	str	r1, [r7, #0]
 8001f1e:	1dfb      	adds	r3, r7, #7
 8001f20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f22:	1dfb      	adds	r3, r7, #7
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b7f      	cmp	r3, #127	; 0x7f
 8001f28:	d828      	bhi.n	8001f7c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f2a:	4a2f      	ldr	r2, [pc, #188]	; (8001fe8 <__NVIC_SetPriority+0xd4>)
 8001f2c:	1dfb      	adds	r3, r7, #7
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	b25b      	sxtb	r3, r3
 8001f32:	089b      	lsrs	r3, r3, #2
 8001f34:	33c0      	adds	r3, #192	; 0xc0
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	589b      	ldr	r3, [r3, r2]
 8001f3a:	1dfa      	adds	r2, r7, #7
 8001f3c:	7812      	ldrb	r2, [r2, #0]
 8001f3e:	0011      	movs	r1, r2
 8001f40:	2203      	movs	r2, #3
 8001f42:	400a      	ands	r2, r1
 8001f44:	00d2      	lsls	r2, r2, #3
 8001f46:	21ff      	movs	r1, #255	; 0xff
 8001f48:	4091      	lsls	r1, r2
 8001f4a:	000a      	movs	r2, r1
 8001f4c:	43d2      	mvns	r2, r2
 8001f4e:	401a      	ands	r2, r3
 8001f50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	019b      	lsls	r3, r3, #6
 8001f56:	22ff      	movs	r2, #255	; 0xff
 8001f58:	401a      	ands	r2, r3
 8001f5a:	1dfb      	adds	r3, r7, #7
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	0018      	movs	r0, r3
 8001f60:	2303      	movs	r3, #3
 8001f62:	4003      	ands	r3, r0
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f68:	481f      	ldr	r0, [pc, #124]	; (8001fe8 <__NVIC_SetPriority+0xd4>)
 8001f6a:	1dfb      	adds	r3, r7, #7
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	b25b      	sxtb	r3, r3
 8001f70:	089b      	lsrs	r3, r3, #2
 8001f72:	430a      	orrs	r2, r1
 8001f74:	33c0      	adds	r3, #192	; 0xc0
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f7a:	e031      	b.n	8001fe0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f7c:	4a1b      	ldr	r2, [pc, #108]	; (8001fec <__NVIC_SetPriority+0xd8>)
 8001f7e:	1dfb      	adds	r3, r7, #7
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	0019      	movs	r1, r3
 8001f84:	230f      	movs	r3, #15
 8001f86:	400b      	ands	r3, r1
 8001f88:	3b08      	subs	r3, #8
 8001f8a:	089b      	lsrs	r3, r3, #2
 8001f8c:	3306      	adds	r3, #6
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	18d3      	adds	r3, r2, r3
 8001f92:	3304      	adds	r3, #4
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	1dfa      	adds	r2, r7, #7
 8001f98:	7812      	ldrb	r2, [r2, #0]
 8001f9a:	0011      	movs	r1, r2
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	400a      	ands	r2, r1
 8001fa0:	00d2      	lsls	r2, r2, #3
 8001fa2:	21ff      	movs	r1, #255	; 0xff
 8001fa4:	4091      	lsls	r1, r2
 8001fa6:	000a      	movs	r2, r1
 8001fa8:	43d2      	mvns	r2, r2
 8001faa:	401a      	ands	r2, r3
 8001fac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	019b      	lsls	r3, r3, #6
 8001fb2:	22ff      	movs	r2, #255	; 0xff
 8001fb4:	401a      	ands	r2, r3
 8001fb6:	1dfb      	adds	r3, r7, #7
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	0018      	movs	r0, r3
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	4003      	ands	r3, r0
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fc4:	4809      	ldr	r0, [pc, #36]	; (8001fec <__NVIC_SetPriority+0xd8>)
 8001fc6:	1dfb      	adds	r3, r7, #7
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	001c      	movs	r4, r3
 8001fcc:	230f      	movs	r3, #15
 8001fce:	4023      	ands	r3, r4
 8001fd0:	3b08      	subs	r3, #8
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	3306      	adds	r3, #6
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	18c3      	adds	r3, r0, r3
 8001fdc:	3304      	adds	r3, #4
 8001fde:	601a      	str	r2, [r3, #0]
}
 8001fe0:	46c0      	nop			; (mov r8, r8)
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	b003      	add	sp, #12
 8001fe6:	bd90      	pop	{r4, r7, pc}
 8001fe8:	e000e100 	.word	0xe000e100
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	4a0c      	ldr	r2, [pc, #48]	; (8002030 <SysTick_Config+0x40>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d901      	bls.n	8002006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002002:	2301      	movs	r3, #1
 8002004:	e010      	b.n	8002028 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <SysTick_Config+0x44>)
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	3a01      	subs	r2, #1
 800200c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800200e:	2301      	movs	r3, #1
 8002010:	425b      	negs	r3, r3
 8002012:	2103      	movs	r1, #3
 8002014:	0018      	movs	r0, r3
 8002016:	f7ff ff7d 	bl	8001f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800201a:	4b06      	ldr	r3, [pc, #24]	; (8002034 <SysTick_Config+0x44>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002020:	4b04      	ldr	r3, [pc, #16]	; (8002034 <SysTick_Config+0x44>)
 8002022:	2207      	movs	r2, #7
 8002024:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002026:	2300      	movs	r3, #0
}
 8002028:	0018      	movs	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	b002      	add	sp, #8
 800202e:	bd80      	pop	{r7, pc}
 8002030:	00ffffff 	.word	0x00ffffff
 8002034:	e000e010 	.word	0xe000e010

08002038 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	210f      	movs	r1, #15
 8002044:	187b      	adds	r3, r7, r1
 8002046:	1c02      	adds	r2, r0, #0
 8002048:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	187b      	adds	r3, r7, r1
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	b25b      	sxtb	r3, r3
 8002052:	0011      	movs	r1, r2
 8002054:	0018      	movs	r0, r3
 8002056:	f7ff ff5d 	bl	8001f14 <__NVIC_SetPriority>
}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	46bd      	mov	sp, r7
 800205e:	b004      	add	sp, #16
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	0002      	movs	r2, r0
 800206a:	1dfb      	adds	r3, r7, #7
 800206c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800206e:	1dfb      	adds	r3, r7, #7
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	b25b      	sxtb	r3, r3
 8002074:	0018      	movs	r0, r3
 8002076:	f7ff ff33 	bl	8001ee0 <__NVIC_EnableIRQ>
}
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	46bd      	mov	sp, r7
 800207e:	b002      	add	sp, #8
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	0018      	movs	r0, r3
 800208e:	f7ff ffaf 	bl	8001ff0 <SysTick_Config>
 8002092:	0003      	movs	r3, r0
}
 8002094:	0018      	movs	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	b002      	add	sp, #8
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e036      	b.n	8002120 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2221      	movs	r2, #33	; 0x21
 80020b6:	2102      	movs	r1, #2
 80020b8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4a18      	ldr	r2, [pc, #96]	; (8002128 <HAL_DMA_Init+0x8c>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80020d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	0018      	movs	r0, r3
 8002104:	f000 f9d2 	bl	80024ac <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2221      	movs	r2, #33	; 0x21
 8002112:	2101      	movs	r1, #1
 8002114:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2220      	movs	r2, #32
 800211a:	2100      	movs	r1, #0
 800211c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}  
 8002120:	0018      	movs	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	b004      	add	sp, #16
 8002126:	bd80      	pop	{r7, pc}
 8002128:	ffffc00f 	.word	0xffffc00f

0800212c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e03b      	b.n	80021b6 <HAL_DMA_DeInit+0x8a>
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2101      	movs	r1, #1
 800214a:	438a      	bics	r2, r1
 800214c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2200      	movs	r2, #0
 800215c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2200      	movs	r2, #0
 8002164:	609a      	str	r2, [r3, #8]
  
  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2200      	movs	r2, #0
 800216c:	60da      	str	r2, [r3, #12]

/* Get DMA Base Address */  
  DMA_CalcBaseAndBitshift(hdma);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	0018      	movs	r0, r3
 8002172:	f000 f99b 	bl	80024ac <DMA_CalcBaseAndBitshift>

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217e:	2101      	movs	r1, #1
 8002180:	4091      	lsls	r1, r2
 8002182:	000a      	movs	r2, r1
 8002184:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2221      	movs	r2, #33	; 0x21
 80021a8:	2100      	movs	r1, #0
 80021aa:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2220      	movs	r2, #32
 80021b0:	2100      	movs	r1, #0
 80021b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	0018      	movs	r0, r3
 80021b8:	46bd      	mov	sp, r7
 80021ba:	b002      	add	sp, #8
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
 80021ca:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80021cc:	2317      	movs	r3, #23
 80021ce:	18fb      	adds	r3, r7, r3
 80021d0:	2200      	movs	r2, #0
 80021d2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2220      	movs	r2, #32
 80021d8:	5c9b      	ldrb	r3, [r3, r2]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_DMA_Start_IT+0x24>
 80021de:	2302      	movs	r3, #2
 80021e0:	e04f      	b.n	8002282 <HAL_DMA_Start_IT+0xc4>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2220      	movs	r2, #32
 80021e6:	2101      	movs	r1, #1
 80021e8:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2221      	movs	r2, #33	; 0x21
 80021ee:	5c9b      	ldrb	r3, [r3, r2]
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d13a      	bne.n	800226c <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2221      	movs	r2, #33	; 0x21
 80021fa:	2102      	movs	r1, #2
 80021fc:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2101      	movs	r1, #1
 8002210:	438a      	bics	r2, r1
 8002212:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68b9      	ldr	r1, [r7, #8]
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 f919 	bl	8002452 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002224:	2b00      	cmp	r3, #0
 8002226:	d008      	beq.n	800223a <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	210e      	movs	r1, #14
 8002234:	430a      	orrs	r2, r1
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	e00f      	b.n	800225a <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	210a      	movs	r1, #10
 8002246:	430a      	orrs	r2, r1
 8002248:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2104      	movs	r1, #4
 8002256:	438a      	bics	r2, r1
 8002258:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2101      	movs	r1, #1
 8002266:	430a      	orrs	r2, r1
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	e007      	b.n	800227c <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2220      	movs	r2, #32
 8002270:	2100      	movs	r1, #0
 8002272:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002274:	2317      	movs	r3, #23
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	2202      	movs	r2, #2
 800227a:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 800227c:	2317      	movs	r3, #23
 800227e:	18fb      	adds	r3, r7, r3
 8002280:	781b      	ldrb	r3, [r3, #0]
} 
 8002282:	0018      	movs	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	b006      	add	sp, #24
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2221      	movs	r2, #33	; 0x21
 8002296:	5c9b      	ldrb	r3, [r3, r2]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d008      	beq.n	80022b0 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2204      	movs	r2, #4
 80022a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2220      	movs	r2, #32
 80022a8:	2100      	movs	r1, #0
 80022aa:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e020      	b.n	80022f2 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	210e      	movs	r1, #14
 80022bc:	438a      	bics	r2, r1
 80022be:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2101      	movs	r1, #1
 80022cc:	438a      	bics	r2, r1
 80022ce:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d8:	2101      	movs	r1, #1
 80022da:	4091      	lsls	r1, r2
 80022dc:	000a      	movs	r2, r1
 80022de:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2221      	movs	r2, #33	; 0x21
 80022e4:	2101      	movs	r1, #1
 80022e6:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2220      	movs	r2, #32
 80022ec:	2100      	movs	r1, #0
 80022ee:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	0018      	movs	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	b002      	add	sp, #8
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b084      	sub	sp, #16
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	2204      	movs	r2, #4
 8002318:	409a      	lsls	r2, r3
 800231a:	0013      	movs	r3, r2
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	4013      	ands	r3, r2
 8002320:	d024      	beq.n	800236c <HAL_DMA_IRQHandler+0x72>
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2204      	movs	r2, #4
 8002326:	4013      	ands	r3, r2
 8002328:	d020      	beq.n	800236c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2220      	movs	r2, #32
 8002332:	4013      	ands	r3, r2
 8002334:	d107      	bne.n	8002346 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2104      	movs	r1, #4
 8002342:	438a      	bics	r2, r1
 8002344:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234e:	2104      	movs	r1, #4
 8002350:	4091      	lsls	r1, r2
 8002352:	000a      	movs	r2, r1
 8002354:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235a:	2b00      	cmp	r3, #0
 800235c:	d100      	bne.n	8002360 <HAL_DMA_IRQHandler+0x66>
 800235e:	e06a      	b.n	8002436 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	0010      	movs	r0, r2
 8002368:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800236a:	e064      	b.n	8002436 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	2202      	movs	r2, #2
 8002372:	409a      	lsls	r2, r3
 8002374:	0013      	movs	r3, r2
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	4013      	ands	r3, r2
 800237a:	d02b      	beq.n	80023d4 <HAL_DMA_IRQHandler+0xda>
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2202      	movs	r2, #2
 8002380:	4013      	ands	r3, r2
 8002382:	d027      	beq.n	80023d4 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2220      	movs	r2, #32
 800238c:	4013      	ands	r3, r2
 800238e:	d10b      	bne.n	80023a8 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	210a      	movs	r1, #10
 800239c:	438a      	bics	r2, r1
 800239e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2221      	movs	r2, #33	; 0x21
 80023a4:	2101      	movs	r1, #1
 80023a6:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b0:	2102      	movs	r1, #2
 80023b2:	4091      	lsls	r1, r2
 80023b4:	000a      	movs	r2, r1
 80023b6:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2220      	movs	r2, #32
 80023bc:	2100      	movs	r1, #0
 80023be:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d036      	beq.n	8002436 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	0010      	movs	r0, r2
 80023d0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80023d2:	e030      	b.n	8002436 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	2208      	movs	r2, #8
 80023da:	409a      	lsls	r2, r3
 80023dc:	0013      	movs	r3, r2
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	4013      	ands	r3, r2
 80023e2:	d028      	beq.n	8002436 <HAL_DMA_IRQHandler+0x13c>
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2208      	movs	r2, #8
 80023e8:	4013      	ands	r3, r2
 80023ea:	d024      	beq.n	8002436 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	210e      	movs	r1, #14
 80023f8:	438a      	bics	r2, r1
 80023fa:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002404:	2101      	movs	r1, #1
 8002406:	4091      	lsls	r1, r2
 8002408:	000a      	movs	r2, r1
 800240a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2221      	movs	r2, #33	; 0x21
 8002416:	2101      	movs	r1, #1
 8002418:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2220      	movs	r2, #32
 800241e:	2100      	movs	r1, #0
 8002420:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	0010      	movs	r0, r2
 8002432:	4798      	blx	r3
    }
   }
}  
 8002434:	e7ff      	b.n	8002436 <HAL_DMA_IRQHandler+0x13c>
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	46bd      	mov	sp, r7
 800243a:	b004      	add	sp, #16
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800244a:	0018      	movs	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	b002      	add	sp, #8
 8002450:	bd80      	pop	{r7, pc}

08002452 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
 800245e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002468:	2101      	movs	r1, #1
 800246a:	4091      	lsls	r1, r2
 800246c:	000a      	movs	r2, r1
 800246e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b10      	cmp	r3, #16
 800247e:	d108      	bne.n	8002492 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002490:	e007      	b.n	80024a2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	60da      	str	r2, [r3, #12]
}
 80024a2:	46c0      	nop			; (mov r8, r8)
 80024a4:	46bd      	mov	sp, r7
 80024a6:	b004      	add	sp, #16
 80024a8:	bd80      	pop	{r7, pc}
	...

080024ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a08      	ldr	r2, [pc, #32]	; (80024dc <DMA_CalcBaseAndBitshift+0x30>)
 80024ba:	4694      	mov	ip, r2
 80024bc:	4463      	add	r3, ip
 80024be:	2114      	movs	r1, #20
 80024c0:	0018      	movs	r0, r3
 80024c2:	f7fd fe29 	bl	8000118 <__udivsi3>
 80024c6:	0003      	movs	r3, r0
 80024c8:	009a      	lsls	r2, r3, #2
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a03      	ldr	r2, [pc, #12]	; (80024e0 <DMA_CalcBaseAndBitshift+0x34>)
 80024d2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80024d4:	46c0      	nop			; (mov r8, r8)
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b002      	add	sp, #8
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	bffdfff8 	.word	0xbffdfff8
 80024e0:	40020000 	.word	0x40020000

080024e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024f2:	e14f      	b.n	8002794 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2101      	movs	r1, #1
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	4091      	lsls	r1, r2
 80024fe:	000a      	movs	r2, r1
 8002500:	4013      	ands	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d100      	bne.n	800250c <HAL_GPIO_Init+0x28>
 800250a:	e140      	b.n	800278e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b02      	cmp	r3, #2
 8002512:	d003      	beq.n	800251c <HAL_GPIO_Init+0x38>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b12      	cmp	r3, #18
 800251a:	d123      	bne.n	8002564 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	08da      	lsrs	r2, r3, #3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3208      	adds	r2, #8
 8002524:	0092      	lsls	r2, r2, #2
 8002526:	58d3      	ldr	r3, [r2, r3]
 8002528:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2207      	movs	r2, #7
 800252e:	4013      	ands	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	220f      	movs	r2, #15
 8002534:	409a      	lsls	r2, r3
 8002536:	0013      	movs	r3, r2
 8002538:	43da      	mvns	r2, r3
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	2107      	movs	r1, #7
 8002548:	400b      	ands	r3, r1
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	409a      	lsls	r2, r3
 800254e:	0013      	movs	r3, r2
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	08da      	lsrs	r2, r3, #3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3208      	adds	r2, #8
 800255e:	0092      	lsls	r2, r2, #2
 8002560:	6939      	ldr	r1, [r7, #16]
 8002562:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	2203      	movs	r2, #3
 8002570:	409a      	lsls	r2, r3
 8002572:	0013      	movs	r3, r2
 8002574:	43da      	mvns	r2, r3
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	4013      	ands	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2203      	movs	r2, #3
 8002582:	401a      	ands	r2, r3
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	409a      	lsls	r2, r3
 800258a:	0013      	movs	r3, r2
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d00b      	beq.n	80025b8 <HAL_GPIO_Init+0xd4>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d007      	beq.n	80025b8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025ac:	2b11      	cmp	r3, #17
 80025ae:	d003      	beq.n	80025b8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b12      	cmp	r3, #18
 80025b6:	d130      	bne.n	800261a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	2203      	movs	r2, #3
 80025c4:	409a      	lsls	r2, r3
 80025c6:	0013      	movs	r3, r2
 80025c8:	43da      	mvns	r2, r3
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	4013      	ands	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	409a      	lsls	r2, r3
 80025da:	0013      	movs	r3, r2
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025ee:	2201      	movs	r2, #1
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	409a      	lsls	r2, r3
 80025f4:	0013      	movs	r3, r2
 80025f6:	43da      	mvns	r2, r3
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4013      	ands	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	091b      	lsrs	r3, r3, #4
 8002604:	2201      	movs	r2, #1
 8002606:	401a      	ands	r2, r3
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	409a      	lsls	r2, r3
 800260c:	0013      	movs	r3, r2
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	4313      	orrs	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	2203      	movs	r2, #3
 8002626:	409a      	lsls	r2, r3
 8002628:	0013      	movs	r3, r2
 800262a:	43da      	mvns	r2, r3
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4013      	ands	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	409a      	lsls	r2, r3
 800263c:	0013      	movs	r3, r2
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	2380      	movs	r3, #128	; 0x80
 8002650:	055b      	lsls	r3, r3, #21
 8002652:	4013      	ands	r3, r2
 8002654:	d100      	bne.n	8002658 <HAL_GPIO_Init+0x174>
 8002656:	e09a      	b.n	800278e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002658:	4b54      	ldr	r3, [pc, #336]	; (80027ac <HAL_GPIO_Init+0x2c8>)
 800265a:	699a      	ldr	r2, [r3, #24]
 800265c:	4b53      	ldr	r3, [pc, #332]	; (80027ac <HAL_GPIO_Init+0x2c8>)
 800265e:	2101      	movs	r1, #1
 8002660:	430a      	orrs	r2, r1
 8002662:	619a      	str	r2, [r3, #24]
 8002664:	4b51      	ldr	r3, [pc, #324]	; (80027ac <HAL_GPIO_Init+0x2c8>)
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	2201      	movs	r2, #1
 800266a:	4013      	ands	r3, r2
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002670:	4a4f      	ldr	r2, [pc, #316]	; (80027b0 <HAL_GPIO_Init+0x2cc>)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	089b      	lsrs	r3, r3, #2
 8002676:	3302      	adds	r3, #2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	589b      	ldr	r3, [r3, r2]
 800267c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2203      	movs	r2, #3
 8002682:	4013      	ands	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	220f      	movs	r2, #15
 8002688:	409a      	lsls	r2, r3
 800268a:	0013      	movs	r3, r2
 800268c:	43da      	mvns	r2, r3
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4013      	ands	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	2390      	movs	r3, #144	; 0x90
 8002698:	05db      	lsls	r3, r3, #23
 800269a:	429a      	cmp	r2, r3
 800269c:	d013      	beq.n	80026c6 <HAL_GPIO_Init+0x1e2>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a44      	ldr	r2, [pc, #272]	; (80027b4 <HAL_GPIO_Init+0x2d0>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d00d      	beq.n	80026c2 <HAL_GPIO_Init+0x1de>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a43      	ldr	r2, [pc, #268]	; (80027b8 <HAL_GPIO_Init+0x2d4>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d007      	beq.n	80026be <HAL_GPIO_Init+0x1da>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a42      	ldr	r2, [pc, #264]	; (80027bc <HAL_GPIO_Init+0x2d8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d101      	bne.n	80026ba <HAL_GPIO_Init+0x1d6>
 80026b6:	2303      	movs	r3, #3
 80026b8:	e006      	b.n	80026c8 <HAL_GPIO_Init+0x1e4>
 80026ba:	2305      	movs	r3, #5
 80026bc:	e004      	b.n	80026c8 <HAL_GPIO_Init+0x1e4>
 80026be:	2302      	movs	r3, #2
 80026c0:	e002      	b.n	80026c8 <HAL_GPIO_Init+0x1e4>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <HAL_GPIO_Init+0x1e4>
 80026c6:	2300      	movs	r3, #0
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	2103      	movs	r1, #3
 80026cc:	400a      	ands	r2, r1
 80026ce:	0092      	lsls	r2, r2, #2
 80026d0:	4093      	lsls	r3, r2
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026d8:	4935      	ldr	r1, [pc, #212]	; (80027b0 <HAL_GPIO_Init+0x2cc>)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	089b      	lsrs	r3, r3, #2
 80026de:	3302      	adds	r3, #2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026e6:	4b36      	ldr	r3, [pc, #216]	; (80027c0 <HAL_GPIO_Init+0x2dc>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	43da      	mvns	r2, r3
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4013      	ands	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	2380      	movs	r3, #128	; 0x80
 80026fc:	025b      	lsls	r3, r3, #9
 80026fe:	4013      	ands	r3, r2
 8002700:	d003      	beq.n	800270a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800270a:	4b2d      	ldr	r3, [pc, #180]	; (80027c0 <HAL_GPIO_Init+0x2dc>)
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002710:	4b2b      	ldr	r3, [pc, #172]	; (80027c0 <HAL_GPIO_Init+0x2dc>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	43da      	mvns	r2, r3
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4013      	ands	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	2380      	movs	r3, #128	; 0x80
 8002726:	029b      	lsls	r3, r3, #10
 8002728:	4013      	ands	r3, r2
 800272a:	d003      	beq.n	8002734 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4313      	orrs	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002734:	4b22      	ldr	r3, [pc, #136]	; (80027c0 <HAL_GPIO_Init+0x2dc>)
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800273a:	4b21      	ldr	r3, [pc, #132]	; (80027c0 <HAL_GPIO_Init+0x2dc>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	43da      	mvns	r2, r3
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4013      	ands	r3, r2
 8002748:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	2380      	movs	r3, #128	; 0x80
 8002750:	035b      	lsls	r3, r3, #13
 8002752:	4013      	ands	r3, r2
 8002754:	d003      	beq.n	800275e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4313      	orrs	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800275e:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <HAL_GPIO_Init+0x2dc>)
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002764:	4b16      	ldr	r3, [pc, #88]	; (80027c0 <HAL_GPIO_Init+0x2dc>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	43da      	mvns	r2, r3
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4013      	ands	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	2380      	movs	r3, #128	; 0x80
 800277a:	039b      	lsls	r3, r3, #14
 800277c:	4013      	ands	r3, r2
 800277e:	d003      	beq.n	8002788 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	4313      	orrs	r3, r2
 8002786:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002788:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <HAL_GPIO_Init+0x2dc>)
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	3301      	adds	r3, #1
 8002792:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	40da      	lsrs	r2, r3
 800279c:	1e13      	subs	r3, r2, #0
 800279e:	d000      	beq.n	80027a2 <HAL_GPIO_Init+0x2be>
 80027a0:	e6a8      	b.n	80024f4 <HAL_GPIO_Init+0x10>
  } 
}
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	46bd      	mov	sp, r7
 80027a6:	b006      	add	sp, #24
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	46c0      	nop			; (mov r8, r8)
 80027ac:	40021000 	.word	0x40021000
 80027b0:	40010000 	.word	0x40010000
 80027b4:	48000400 	.word	0x48000400
 80027b8:	48000800 	.word	0x48000800
 80027bc:	48000c00 	.word	0x48000c00
 80027c0:	40010400 	.word	0x40010400

080027c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80027d2:	e0b1      	b.n	8002938 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80027d4:	2201      	movs	r2, #1
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	409a      	lsls	r2, r3
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	4013      	ands	r3, r2
 80027de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d100      	bne.n	80027e8 <HAL_GPIO_DeInit+0x24>
 80027e6:	e0a4      	b.n	8002932 <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80027e8:	4a58      	ldr	r2, [pc, #352]	; (800294c <HAL_GPIO_DeInit+0x188>)
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	089b      	lsrs	r3, r3, #2
 80027ee:	3302      	adds	r3, #2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	589b      	ldr	r3, [r3, r2]
 80027f4:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2203      	movs	r2, #3
 80027fa:	4013      	ands	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	220f      	movs	r2, #15
 8002800:	409a      	lsls	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	4013      	ands	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	2390      	movs	r3, #144	; 0x90
 800280c:	05db      	lsls	r3, r3, #23
 800280e:	429a      	cmp	r2, r3
 8002810:	d013      	beq.n	800283a <HAL_GPIO_DeInit+0x76>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a4e      	ldr	r2, [pc, #312]	; (8002950 <HAL_GPIO_DeInit+0x18c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d00d      	beq.n	8002836 <HAL_GPIO_DeInit+0x72>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a4d      	ldr	r2, [pc, #308]	; (8002954 <HAL_GPIO_DeInit+0x190>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d007      	beq.n	8002832 <HAL_GPIO_DeInit+0x6e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a4c      	ldr	r2, [pc, #304]	; (8002958 <HAL_GPIO_DeInit+0x194>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d101      	bne.n	800282e <HAL_GPIO_DeInit+0x6a>
 800282a:	2303      	movs	r3, #3
 800282c:	e006      	b.n	800283c <HAL_GPIO_DeInit+0x78>
 800282e:	2305      	movs	r3, #5
 8002830:	e004      	b.n	800283c <HAL_GPIO_DeInit+0x78>
 8002832:	2302      	movs	r3, #2
 8002834:	e002      	b.n	800283c <HAL_GPIO_DeInit+0x78>
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <HAL_GPIO_DeInit+0x78>
 800283a:	2300      	movs	r3, #0
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	2103      	movs	r1, #3
 8002840:	400a      	ands	r2, r1
 8002842:	0092      	lsls	r2, r2, #2
 8002844:	4093      	lsls	r3, r2
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	429a      	cmp	r2, r3
 800284a:	d132      	bne.n	80028b2 <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800284c:	4b43      	ldr	r3, [pc, #268]	; (800295c <HAL_GPIO_DeInit+0x198>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	43d9      	mvns	r1, r3
 8002854:	4b41      	ldr	r3, [pc, #260]	; (800295c <HAL_GPIO_DeInit+0x198>)
 8002856:	400a      	ands	r2, r1
 8002858:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800285a:	4b40      	ldr	r3, [pc, #256]	; (800295c <HAL_GPIO_DeInit+0x198>)
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	43d9      	mvns	r1, r3
 8002862:	4b3e      	ldr	r3, [pc, #248]	; (800295c <HAL_GPIO_DeInit+0x198>)
 8002864:	400a      	ands	r2, r1
 8002866:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002868:	4b3c      	ldr	r3, [pc, #240]	; (800295c <HAL_GPIO_DeInit+0x198>)
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	43d9      	mvns	r1, r3
 8002870:	4b3a      	ldr	r3, [pc, #232]	; (800295c <HAL_GPIO_DeInit+0x198>)
 8002872:	400a      	ands	r2, r1
 8002874:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002876:	4b39      	ldr	r3, [pc, #228]	; (800295c <HAL_GPIO_DeInit+0x198>)
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	43d9      	mvns	r1, r3
 800287e:	4b37      	ldr	r3, [pc, #220]	; (800295c <HAL_GPIO_DeInit+0x198>)
 8002880:	400a      	ands	r2, r1
 8002882:	60da      	str	r2, [r3, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	2203      	movs	r2, #3
 8002888:	4013      	ands	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	220f      	movs	r2, #15
 800288e:	409a      	lsls	r2, r3
 8002890:	0013      	movs	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002894:	4a2d      	ldr	r2, [pc, #180]	; (800294c <HAL_GPIO_DeInit+0x188>)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	089b      	lsrs	r3, r3, #2
 800289a:	3302      	adds	r3, #2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	589a      	ldr	r2, [r3, r2]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	43d9      	mvns	r1, r3
 80028a4:	4829      	ldr	r0, [pc, #164]	; (800294c <HAL_GPIO_DeInit+0x188>)
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	089b      	lsrs	r3, r3, #2
 80028aa:	400a      	ands	r2, r1
 80028ac:	3302      	adds	r3, #2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	0052      	lsls	r2, r2, #1
 80028ba:	2103      	movs	r1, #3
 80028bc:	4091      	lsls	r1, r2
 80028be:	000a      	movs	r2, r1
 80028c0:	43d2      	mvns	r2, r2
 80028c2:	401a      	ands	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	08da      	lsrs	r2, r3, #3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3208      	adds	r2, #8
 80028d0:	0092      	lsls	r2, r2, #2
 80028d2:	58d3      	ldr	r3, [r2, r3]
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	2107      	movs	r1, #7
 80028d8:	400a      	ands	r2, r1
 80028da:	0092      	lsls	r2, r2, #2
 80028dc:	210f      	movs	r1, #15
 80028de:	4091      	lsls	r1, r2
 80028e0:	000a      	movs	r2, r1
 80028e2:	43d1      	mvns	r1, r2
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	08d2      	lsrs	r2, r2, #3
 80028e8:	4019      	ands	r1, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3208      	adds	r2, #8
 80028ee:	0092      	lsls	r2, r2, #2
 80028f0:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	0052      	lsls	r2, r2, #1
 80028fa:	2103      	movs	r1, #3
 80028fc:	4091      	lsls	r1, r2
 80028fe:	000a      	movs	r2, r1
 8002900:	43d2      	mvns	r2, r2
 8002902:	401a      	ands	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2101      	movs	r1, #1
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	4091      	lsls	r1, r2
 8002912:	000a      	movs	r2, r1
 8002914:	43d2      	mvns	r2, r2
 8002916:	401a      	ands	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	0052      	lsls	r2, r2, #1
 8002924:	2103      	movs	r1, #3
 8002926:	4091      	lsls	r1, r2
 8002928:	000a      	movs	r2, r1
 800292a:	43d2      	mvns	r2, r2
 800292c:	401a      	ands	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	3301      	adds	r3, #1
 8002936:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	40da      	lsrs	r2, r3
 800293e:	1e13      	subs	r3, r2, #0
 8002940:	d000      	beq.n	8002944 <HAL_GPIO_DeInit+0x180>
 8002942:	e747      	b.n	80027d4 <HAL_GPIO_DeInit+0x10>
  }
}
 8002944:	46c0      	nop			; (mov r8, r8)
 8002946:	46bd      	mov	sp, r7
 8002948:	b006      	add	sp, #24
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40010000 	.word	0x40010000
 8002950:	48000400 	.word	0x48000400
 8002954:	48000800 	.word	0x48000800
 8002958:	48000c00 	.word	0x48000c00
 800295c:	40010400 	.word	0x40010400

08002960 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	0008      	movs	r0, r1
 800296a:	0011      	movs	r1, r2
 800296c:	1cbb      	adds	r3, r7, #2
 800296e:	1c02      	adds	r2, r0, #0
 8002970:	801a      	strh	r2, [r3, #0]
 8002972:	1c7b      	adds	r3, r7, #1
 8002974:	1c0a      	adds	r2, r1, #0
 8002976:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002978:	1c7b      	adds	r3, r7, #1
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d004      	beq.n	800298a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002980:	1cbb      	adds	r3, r7, #2
 8002982:	881a      	ldrh	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002988:	e003      	b.n	8002992 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800298a:	1cbb      	adds	r3, r7, #2
 800298c:	881a      	ldrh	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	46bd      	mov	sp, r7
 8002996:	b002      	add	sp, #8
 8002998:	bd80      	pop	{r7, pc}
	...

0800299c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e303      	b.n	8002fb6 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2201      	movs	r2, #1
 80029b4:	4013      	ands	r3, r2
 80029b6:	d100      	bne.n	80029ba <HAL_RCC_OscConfig+0x1e>
 80029b8:	e08d      	b.n	8002ad6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80029ba:	4bc4      	ldr	r3, [pc, #784]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	220c      	movs	r2, #12
 80029c0:	4013      	ands	r3, r2
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d00e      	beq.n	80029e4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029c6:	4bc1      	ldr	r3, [pc, #772]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	220c      	movs	r2, #12
 80029cc:	4013      	ands	r3, r2
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d116      	bne.n	8002a00 <HAL_RCC_OscConfig+0x64>
 80029d2:	4bbe      	ldr	r3, [pc, #760]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	2380      	movs	r3, #128	; 0x80
 80029d8:	025b      	lsls	r3, r3, #9
 80029da:	401a      	ands	r2, r3
 80029dc:	2380      	movs	r3, #128	; 0x80
 80029de:	025b      	lsls	r3, r3, #9
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d10d      	bne.n	8002a00 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e4:	4bb9      	ldr	r3, [pc, #740]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	2380      	movs	r3, #128	; 0x80
 80029ea:	029b      	lsls	r3, r3, #10
 80029ec:	4013      	ands	r3, r2
 80029ee:	d100      	bne.n	80029f2 <HAL_RCC_OscConfig+0x56>
 80029f0:	e070      	b.n	8002ad4 <HAL_RCC_OscConfig+0x138>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d000      	beq.n	80029fc <HAL_RCC_OscConfig+0x60>
 80029fa:	e06b      	b.n	8002ad4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e2da      	b.n	8002fb6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d107      	bne.n	8002a18 <HAL_RCC_OscConfig+0x7c>
 8002a08:	4bb0      	ldr	r3, [pc, #704]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4baf      	ldr	r3, [pc, #700]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002a0e:	2180      	movs	r1, #128	; 0x80
 8002a10:	0249      	lsls	r1, r1, #9
 8002a12:	430a      	orrs	r2, r1
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	e02f      	b.n	8002a78 <HAL_RCC_OscConfig+0xdc>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10c      	bne.n	8002a3a <HAL_RCC_OscConfig+0x9e>
 8002a20:	4baa      	ldr	r3, [pc, #680]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4ba9      	ldr	r3, [pc, #676]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002a26:	49aa      	ldr	r1, [pc, #680]	; (8002cd0 <HAL_RCC_OscConfig+0x334>)
 8002a28:	400a      	ands	r2, r1
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	4ba7      	ldr	r3, [pc, #668]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	4ba6      	ldr	r3, [pc, #664]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002a32:	49a8      	ldr	r1, [pc, #672]	; (8002cd4 <HAL_RCC_OscConfig+0x338>)
 8002a34:	400a      	ands	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	e01e      	b.n	8002a78 <HAL_RCC_OscConfig+0xdc>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b05      	cmp	r3, #5
 8002a40:	d10e      	bne.n	8002a60 <HAL_RCC_OscConfig+0xc4>
 8002a42:	4ba2      	ldr	r3, [pc, #648]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	4ba1      	ldr	r3, [pc, #644]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002a48:	2180      	movs	r1, #128	; 0x80
 8002a4a:	02c9      	lsls	r1, r1, #11
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	4b9e      	ldr	r3, [pc, #632]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	4b9d      	ldr	r3, [pc, #628]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002a56:	2180      	movs	r1, #128	; 0x80
 8002a58:	0249      	lsls	r1, r1, #9
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	e00b      	b.n	8002a78 <HAL_RCC_OscConfig+0xdc>
 8002a60:	4b9a      	ldr	r3, [pc, #616]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4b99      	ldr	r3, [pc, #612]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002a66:	499a      	ldr	r1, [pc, #616]	; (8002cd0 <HAL_RCC_OscConfig+0x334>)
 8002a68:	400a      	ands	r2, r1
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	4b97      	ldr	r3, [pc, #604]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	4b96      	ldr	r3, [pc, #600]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002a72:	4998      	ldr	r1, [pc, #608]	; (8002cd4 <HAL_RCC_OscConfig+0x338>)
 8002a74:	400a      	ands	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d014      	beq.n	8002aaa <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a80:	f7ff fa02 	bl	8001e88 <HAL_GetTick>
 8002a84:	0003      	movs	r3, r0
 8002a86:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a8a:	f7ff f9fd 	bl	8001e88 <HAL_GetTick>
 8002a8e:	0002      	movs	r2, r0
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b64      	cmp	r3, #100	; 0x64
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e28c      	b.n	8002fb6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9c:	4b8b      	ldr	r3, [pc, #556]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	029b      	lsls	r3, r3, #10
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d0f0      	beq.n	8002a8a <HAL_RCC_OscConfig+0xee>
 8002aa8:	e015      	b.n	8002ad6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aaa:	f7ff f9ed 	bl	8001e88 <HAL_GetTick>
 8002aae:	0003      	movs	r3, r0
 8002ab0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ab4:	f7ff f9e8 	bl	8001e88 <HAL_GetTick>
 8002ab8:	0002      	movs	r2, r0
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b64      	cmp	r3, #100	; 0x64
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e277      	b.n	8002fb6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ac6:	4b81      	ldr	r3, [pc, #516]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	2380      	movs	r3, #128	; 0x80
 8002acc:	029b      	lsls	r3, r3, #10
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x118>
 8002ad2:	e000      	b.n	8002ad6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2202      	movs	r2, #2
 8002adc:	4013      	ands	r3, r2
 8002ade:	d100      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x146>
 8002ae0:	e069      	b.n	8002bb6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ae2:	4b7a      	ldr	r3, [pc, #488]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	220c      	movs	r2, #12
 8002ae8:	4013      	ands	r3, r2
 8002aea:	d00b      	beq.n	8002b04 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002aec:	4b77      	ldr	r3, [pc, #476]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	220c      	movs	r2, #12
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d11c      	bne.n	8002b32 <HAL_RCC_OscConfig+0x196>
 8002af8:	4b74      	ldr	r3, [pc, #464]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	2380      	movs	r3, #128	; 0x80
 8002afe:	025b      	lsls	r3, r3, #9
 8002b00:	4013      	ands	r3, r2
 8002b02:	d116      	bne.n	8002b32 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b04:	4b71      	ldr	r3, [pc, #452]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2202      	movs	r2, #2
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d005      	beq.n	8002b1a <HAL_RCC_OscConfig+0x17e>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d001      	beq.n	8002b1a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e24d      	b.n	8002fb6 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1a:	4b6c      	ldr	r3, [pc, #432]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	22f8      	movs	r2, #248	; 0xf8
 8002b20:	4393      	bics	r3, r2
 8002b22:	0019      	movs	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	00da      	lsls	r2, r3, #3
 8002b2a:	4b68      	ldr	r3, [pc, #416]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b30:	e041      	b.n	8002bb6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d024      	beq.n	8002b84 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b3a:	4b64      	ldr	r3, [pc, #400]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	4b63      	ldr	r3, [pc, #396]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002b40:	2101      	movs	r1, #1
 8002b42:	430a      	orrs	r2, r1
 8002b44:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b46:	f7ff f99f 	bl	8001e88 <HAL_GetTick>
 8002b4a:	0003      	movs	r3, r0
 8002b4c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b50:	f7ff f99a 	bl	8001e88 <HAL_GetTick>
 8002b54:	0002      	movs	r2, r0
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e229      	b.n	8002fb6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b62:	4b5a      	ldr	r3, [pc, #360]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2202      	movs	r2, #2
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d0f1      	beq.n	8002b50 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6c:	4b57      	ldr	r3, [pc, #348]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	22f8      	movs	r2, #248	; 0xf8
 8002b72:	4393      	bics	r3, r2
 8002b74:	0019      	movs	r1, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	00da      	lsls	r2, r3, #3
 8002b7c:	4b53      	ldr	r3, [pc, #332]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	e018      	b.n	8002bb6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b84:	4b51      	ldr	r3, [pc, #324]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	4b50      	ldr	r3, [pc, #320]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	438a      	bics	r2, r1
 8002b8e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b90:	f7ff f97a 	bl	8001e88 <HAL_GetTick>
 8002b94:	0003      	movs	r3, r0
 8002b96:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b9a:	f7ff f975 	bl	8001e88 <HAL_GetTick>
 8002b9e:	0002      	movs	r2, r0
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e204      	b.n	8002fb6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bac:	4b47      	ldr	r3, [pc, #284]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	d1f1      	bne.n	8002b9a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2208      	movs	r2, #8
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d036      	beq.n	8002c2e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d019      	beq.n	8002bfc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc8:	4b40      	ldr	r3, [pc, #256]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002bca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bcc:	4b3f      	ldr	r3, [pc, #252]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002bce:	2101      	movs	r1, #1
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd4:	f7ff f958 	bl	8001e88 <HAL_GetTick>
 8002bd8:	0003      	movs	r3, r0
 8002bda:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bde:	f7ff f953 	bl	8001e88 <HAL_GetTick>
 8002be2:	0002      	movs	r2, r0
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e1e2      	b.n	8002fb6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf0:	4b36      	ldr	r3, [pc, #216]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d0f1      	beq.n	8002bde <HAL_RCC_OscConfig+0x242>
 8002bfa:	e018      	b.n	8002c2e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bfc:	4b33      	ldr	r3, [pc, #204]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002bfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c00:	4b32      	ldr	r3, [pc, #200]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002c02:	2101      	movs	r1, #1
 8002c04:	438a      	bics	r2, r1
 8002c06:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c08:	f7ff f93e 	bl	8001e88 <HAL_GetTick>
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c12:	f7ff f939 	bl	8001e88 <HAL_GetTick>
 8002c16:	0002      	movs	r2, r0
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e1c8      	b.n	8002fb6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c24:	4b29      	ldr	r3, [pc, #164]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	2202      	movs	r2, #2
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d1f1      	bne.n	8002c12 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2204      	movs	r2, #4
 8002c34:	4013      	ands	r3, r2
 8002c36:	d100      	bne.n	8002c3a <HAL_RCC_OscConfig+0x29e>
 8002c38:	e0b6      	b.n	8002da8 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c3a:	231f      	movs	r3, #31
 8002c3c:	18fb      	adds	r3, r7, r3
 8002c3e:	2200      	movs	r2, #0
 8002c40:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c42:	4b22      	ldr	r3, [pc, #136]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002c44:	69da      	ldr	r2, [r3, #28]
 8002c46:	2380      	movs	r3, #128	; 0x80
 8002c48:	055b      	lsls	r3, r3, #21
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d111      	bne.n	8002c72 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c4e:	4b1f      	ldr	r3, [pc, #124]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002c50:	69da      	ldr	r2, [r3, #28]
 8002c52:	4b1e      	ldr	r3, [pc, #120]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002c54:	2180      	movs	r1, #128	; 0x80
 8002c56:	0549      	lsls	r1, r1, #21
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	61da      	str	r2, [r3, #28]
 8002c5c:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002c5e:	69da      	ldr	r2, [r3, #28]
 8002c60:	2380      	movs	r3, #128	; 0x80
 8002c62:	055b      	lsls	r3, r3, #21
 8002c64:	4013      	ands	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c6a:	231f      	movs	r3, #31
 8002c6c:	18fb      	adds	r3, r7, r3
 8002c6e:	2201      	movs	r2, #1
 8002c70:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c72:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <HAL_RCC_OscConfig+0x33c>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	2380      	movs	r3, #128	; 0x80
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d11a      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c7e:	4b16      	ldr	r3, [pc, #88]	; (8002cd8 <HAL_RCC_OscConfig+0x33c>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	4b15      	ldr	r3, [pc, #84]	; (8002cd8 <HAL_RCC_OscConfig+0x33c>)
 8002c84:	2180      	movs	r1, #128	; 0x80
 8002c86:	0049      	lsls	r1, r1, #1
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c8c:	f7ff f8fc 	bl	8001e88 <HAL_GetTick>
 8002c90:	0003      	movs	r3, r0
 8002c92:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c96:	f7ff f8f7 	bl	8001e88 <HAL_GetTick>
 8002c9a:	0002      	movs	r2, r0
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b64      	cmp	r3, #100	; 0x64
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e186      	b.n	8002fb6 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <HAL_RCC_OscConfig+0x33c>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	2380      	movs	r3, #128	; 0x80
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d0f0      	beq.n	8002c96 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d10f      	bne.n	8002cdc <HAL_RCC_OscConfig+0x340>
 8002cbc:	4b03      	ldr	r3, [pc, #12]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002cbe:	6a1a      	ldr	r2, [r3, #32]
 8002cc0:	4b02      	ldr	r3, [pc, #8]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	621a      	str	r2, [r3, #32]
 8002cc8:	e036      	b.n	8002d38 <HAL_RCC_OscConfig+0x39c>
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	fffeffff 	.word	0xfffeffff
 8002cd4:	fffbffff 	.word	0xfffbffff
 8002cd8:	40007000 	.word	0x40007000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10c      	bne.n	8002cfe <HAL_RCC_OscConfig+0x362>
 8002ce4:	4bb6      	ldr	r3, [pc, #728]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002ce6:	6a1a      	ldr	r2, [r3, #32]
 8002ce8:	4bb5      	ldr	r3, [pc, #724]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002cea:	2101      	movs	r1, #1
 8002cec:	438a      	bics	r2, r1
 8002cee:	621a      	str	r2, [r3, #32]
 8002cf0:	4bb3      	ldr	r3, [pc, #716]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002cf2:	6a1a      	ldr	r2, [r3, #32]
 8002cf4:	4bb2      	ldr	r3, [pc, #712]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002cf6:	2104      	movs	r1, #4
 8002cf8:	438a      	bics	r2, r1
 8002cfa:	621a      	str	r2, [r3, #32]
 8002cfc:	e01c      	b.n	8002d38 <HAL_RCC_OscConfig+0x39c>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	2b05      	cmp	r3, #5
 8002d04:	d10c      	bne.n	8002d20 <HAL_RCC_OscConfig+0x384>
 8002d06:	4bae      	ldr	r3, [pc, #696]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002d08:	6a1a      	ldr	r2, [r3, #32]
 8002d0a:	4bad      	ldr	r3, [pc, #692]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002d0c:	2104      	movs	r1, #4
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	621a      	str	r2, [r3, #32]
 8002d12:	4bab      	ldr	r3, [pc, #684]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002d14:	6a1a      	ldr	r2, [r3, #32]
 8002d16:	4baa      	ldr	r3, [pc, #680]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002d18:	2101      	movs	r1, #1
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	621a      	str	r2, [r3, #32]
 8002d1e:	e00b      	b.n	8002d38 <HAL_RCC_OscConfig+0x39c>
 8002d20:	4ba7      	ldr	r3, [pc, #668]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002d22:	6a1a      	ldr	r2, [r3, #32]
 8002d24:	4ba6      	ldr	r3, [pc, #664]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002d26:	2101      	movs	r1, #1
 8002d28:	438a      	bics	r2, r1
 8002d2a:	621a      	str	r2, [r3, #32]
 8002d2c:	4ba4      	ldr	r3, [pc, #656]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002d2e:	6a1a      	ldr	r2, [r3, #32]
 8002d30:	4ba3      	ldr	r3, [pc, #652]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002d32:	2104      	movs	r1, #4
 8002d34:	438a      	bics	r2, r1
 8002d36:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d014      	beq.n	8002d6a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d40:	f7ff f8a2 	bl	8001e88 <HAL_GetTick>
 8002d44:	0003      	movs	r3, r0
 8002d46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d48:	e009      	b.n	8002d5e <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d4a:	f7ff f89d 	bl	8001e88 <HAL_GetTick>
 8002d4e:	0002      	movs	r2, r0
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	4a9b      	ldr	r2, [pc, #620]	; (8002fc4 <HAL_RCC_OscConfig+0x628>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e12b      	b.n	8002fb6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d5e:	4b98      	ldr	r3, [pc, #608]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	2202      	movs	r2, #2
 8002d64:	4013      	ands	r3, r2
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x3ae>
 8002d68:	e013      	b.n	8002d92 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6a:	f7ff f88d 	bl	8001e88 <HAL_GetTick>
 8002d6e:	0003      	movs	r3, r0
 8002d70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d72:	e009      	b.n	8002d88 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d74:	f7ff f888 	bl	8001e88 <HAL_GetTick>
 8002d78:	0002      	movs	r2, r0
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	4a91      	ldr	r2, [pc, #580]	; (8002fc4 <HAL_RCC_OscConfig+0x628>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e116      	b.n	8002fb6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d88:	4b8d      	ldr	r3, [pc, #564]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	4013      	ands	r3, r2
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d92:	231f      	movs	r3, #31
 8002d94:	18fb      	adds	r3, r7, r3
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d105      	bne.n	8002da8 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d9c:	4b88      	ldr	r3, [pc, #544]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002d9e:	69da      	ldr	r2, [r3, #28]
 8002da0:	4b87      	ldr	r3, [pc, #540]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002da2:	4989      	ldr	r1, [pc, #548]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002da4:	400a      	ands	r2, r1
 8002da6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2210      	movs	r2, #16
 8002dae:	4013      	ands	r3, r2
 8002db0:	d063      	beq.n	8002e7a <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d12a      	bne.n	8002e10 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002dba:	4b81      	ldr	r3, [pc, #516]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002dbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dbe:	4b80      	ldr	r3, [pc, #512]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002dc0:	2104      	movs	r1, #4
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002dc6:	4b7e      	ldr	r3, [pc, #504]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002dc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dca:	4b7d      	ldr	r3, [pc, #500]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002dcc:	2101      	movs	r1, #1
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd2:	f7ff f859 	bl	8001e88 <HAL_GetTick>
 8002dd6:	0003      	movs	r3, r0
 8002dd8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002ddc:	f7ff f854 	bl	8001e88 <HAL_GetTick>
 8002de0:	0002      	movs	r2, r0
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e0e3      	b.n	8002fb6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002dee:	4b74      	ldr	r3, [pc, #464]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df2:	2202      	movs	r2, #2
 8002df4:	4013      	ands	r3, r2
 8002df6:	d0f1      	beq.n	8002ddc <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002df8:	4b71      	ldr	r3, [pc, #452]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfc:	22f8      	movs	r2, #248	; 0xf8
 8002dfe:	4393      	bics	r3, r2
 8002e00:	0019      	movs	r1, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	00da      	lsls	r2, r3, #3
 8002e08:	4b6d      	ldr	r3, [pc, #436]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	635a      	str	r2, [r3, #52]	; 0x34
 8002e0e:	e034      	b.n	8002e7a <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	3305      	adds	r3, #5
 8002e16:	d111      	bne.n	8002e3c <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002e18:	4b69      	ldr	r3, [pc, #420]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e1c:	4b68      	ldr	r3, [pc, #416]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002e1e:	2104      	movs	r1, #4
 8002e20:	438a      	bics	r2, r1
 8002e22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002e24:	4b66      	ldr	r3, [pc, #408]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e28:	22f8      	movs	r2, #248	; 0xf8
 8002e2a:	4393      	bics	r3, r2
 8002e2c:	0019      	movs	r1, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	00da      	lsls	r2, r3, #3
 8002e34:	4b62      	ldr	r3, [pc, #392]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002e36:	430a      	orrs	r2, r1
 8002e38:	635a      	str	r2, [r3, #52]	; 0x34
 8002e3a:	e01e      	b.n	8002e7a <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002e3c:	4b60      	ldr	r3, [pc, #384]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002e3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e40:	4b5f      	ldr	r3, [pc, #380]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002e42:	2104      	movs	r1, #4
 8002e44:	430a      	orrs	r2, r1
 8002e46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002e48:	4b5d      	ldr	r3, [pc, #372]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002e4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e4c:	4b5c      	ldr	r3, [pc, #368]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002e4e:	2101      	movs	r1, #1
 8002e50:	438a      	bics	r2, r1
 8002e52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e54:	f7ff f818 	bl	8001e88 <HAL_GetTick>
 8002e58:	0003      	movs	r3, r0
 8002e5a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002e5c:	e008      	b.n	8002e70 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002e5e:	f7ff f813 	bl	8001e88 <HAL_GetTick>
 8002e62:	0002      	movs	r2, r0
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e0a2      	b.n	8002fb6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002e70:	4b53      	ldr	r3, [pc, #332]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e74:	2202      	movs	r2, #2
 8002e76:	4013      	ands	r3, r2
 8002e78:	d1f1      	bne.n	8002e5e <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d100      	bne.n	8002e84 <HAL_RCC_OscConfig+0x4e8>
 8002e82:	e097      	b.n	8002fb4 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e84:	4b4e      	ldr	r3, [pc, #312]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	220c      	movs	r2, #12
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d100      	bne.n	8002e92 <HAL_RCC_OscConfig+0x4f6>
 8002e90:	e06b      	b.n	8002f6a <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d14c      	bne.n	8002f34 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9a:	4b49      	ldr	r3, [pc, #292]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	4b48      	ldr	r3, [pc, #288]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002ea0:	494a      	ldr	r1, [pc, #296]	; (8002fcc <HAL_RCC_OscConfig+0x630>)
 8002ea2:	400a      	ands	r2, r1
 8002ea4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea6:	f7fe ffef 	bl	8001e88 <HAL_GetTick>
 8002eaa:	0003      	movs	r3, r0
 8002eac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb0:	f7fe ffea 	bl	8001e88 <HAL_GetTick>
 8002eb4:	0002      	movs	r2, r0
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e079      	b.n	8002fb6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec2:	4b3f      	ldr	r3, [pc, #252]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	2380      	movs	r3, #128	; 0x80
 8002ec8:	049b      	lsls	r3, r3, #18
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ece:	4b3c      	ldr	r3, [pc, #240]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed2:	220f      	movs	r2, #15
 8002ed4:	4393      	bics	r3, r2
 8002ed6:	0019      	movs	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002edc:	4b38      	ldr	r3, [pc, #224]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ee2:	4b37      	ldr	r3, [pc, #220]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	4a3a      	ldr	r2, [pc, #232]	; (8002fd0 <HAL_RCC_OscConfig+0x634>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	0019      	movs	r1, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	4b32      	ldr	r3, [pc, #200]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002efc:	4b30      	ldr	r3, [pc, #192]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	4b2f      	ldr	r3, [pc, #188]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002f02:	2180      	movs	r1, #128	; 0x80
 8002f04:	0449      	lsls	r1, r1, #17
 8002f06:	430a      	orrs	r2, r1
 8002f08:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0a:	f7fe ffbd 	bl	8001e88 <HAL_GetTick>
 8002f0e:	0003      	movs	r3, r0
 8002f10:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f14:	f7fe ffb8 	bl	8001e88 <HAL_GetTick>
 8002f18:	0002      	movs	r2, r0
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e047      	b.n	8002fb6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f26:	4b26      	ldr	r3, [pc, #152]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	2380      	movs	r3, #128	; 0x80
 8002f2c:	049b      	lsls	r3, r3, #18
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x578>
 8002f32:	e03f      	b.n	8002fb4 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f34:	4b22      	ldr	r3, [pc, #136]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	4b21      	ldr	r3, [pc, #132]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002f3a:	4924      	ldr	r1, [pc, #144]	; (8002fcc <HAL_RCC_OscConfig+0x630>)
 8002f3c:	400a      	ands	r2, r1
 8002f3e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f40:	f7fe ffa2 	bl	8001e88 <HAL_GetTick>
 8002f44:	0003      	movs	r3, r0
 8002f46:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f4a:	f7fe ff9d 	bl	8001e88 <HAL_GetTick>
 8002f4e:	0002      	movs	r2, r0
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e02c      	b.n	8002fb6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f5c:	4b18      	ldr	r3, [pc, #96]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	2380      	movs	r3, #128	; 0x80
 8002f62:	049b      	lsls	r3, r3, #18
 8002f64:	4013      	ands	r3, r2
 8002f66:	d1f0      	bne.n	8002f4a <HAL_RCC_OscConfig+0x5ae>
 8002f68:	e024      	b.n	8002fb4 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e01f      	b.n	8002fb6 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002f76:	4b12      	ldr	r3, [pc, #72]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002f7c:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <HAL_RCC_OscConfig+0x624>)
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	2380      	movs	r3, #128	; 0x80
 8002f86:	025b      	lsls	r3, r3, #9
 8002f88:	401a      	ands	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d10e      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	220f      	movs	r2, #15
 8002f96:	401a      	ands	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d107      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	23f0      	movs	r3, #240	; 0xf0
 8002fa4:	039b      	lsls	r3, r3, #14
 8002fa6:	401a      	ands	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b008      	add	sp, #32
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	00001388 	.word	0x00001388
 8002fc8:	efffffff 	.word	0xefffffff
 8002fcc:	feffffff 	.word	0xfeffffff
 8002fd0:	ffc2ffff 	.word	0xffc2ffff

08002fd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e0b3      	b.n	8003150 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fe8:	4b5b      	ldr	r3, [pc, #364]	; (8003158 <HAL_RCC_ClockConfig+0x184>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2201      	movs	r2, #1
 8002fee:	4013      	ands	r3, r2
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d911      	bls.n	800301a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff6:	4b58      	ldr	r3, [pc, #352]	; (8003158 <HAL_RCC_ClockConfig+0x184>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	4393      	bics	r3, r2
 8002ffe:	0019      	movs	r1, r3
 8003000:	4b55      	ldr	r3, [pc, #340]	; (8003158 <HAL_RCC_ClockConfig+0x184>)
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003008:	4b53      	ldr	r3, [pc, #332]	; (8003158 <HAL_RCC_ClockConfig+0x184>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2201      	movs	r2, #1
 800300e:	4013      	ands	r3, r2
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d001      	beq.n	800301a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e09a      	b.n	8003150 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2202      	movs	r2, #2
 8003020:	4013      	ands	r3, r2
 8003022:	d015      	beq.n	8003050 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2204      	movs	r2, #4
 800302a:	4013      	ands	r3, r2
 800302c:	d006      	beq.n	800303c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800302e:	4b4b      	ldr	r3, [pc, #300]	; (800315c <HAL_RCC_ClockConfig+0x188>)
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	4b4a      	ldr	r3, [pc, #296]	; (800315c <HAL_RCC_ClockConfig+0x188>)
 8003034:	21e0      	movs	r1, #224	; 0xe0
 8003036:	00c9      	lsls	r1, r1, #3
 8003038:	430a      	orrs	r2, r1
 800303a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800303c:	4b47      	ldr	r3, [pc, #284]	; (800315c <HAL_RCC_ClockConfig+0x188>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	22f0      	movs	r2, #240	; 0xf0
 8003042:	4393      	bics	r3, r2
 8003044:	0019      	movs	r1, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	4b44      	ldr	r3, [pc, #272]	; (800315c <HAL_RCC_ClockConfig+0x188>)
 800304c:	430a      	orrs	r2, r1
 800304e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2201      	movs	r2, #1
 8003056:	4013      	ands	r3, r2
 8003058:	d040      	beq.n	80030dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d107      	bne.n	8003072 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003062:	4b3e      	ldr	r3, [pc, #248]	; (800315c <HAL_RCC_ClockConfig+0x188>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	2380      	movs	r3, #128	; 0x80
 8003068:	029b      	lsls	r3, r3, #10
 800306a:	4013      	ands	r3, r2
 800306c:	d114      	bne.n	8003098 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e06e      	b.n	8003150 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b02      	cmp	r3, #2
 8003078:	d107      	bne.n	800308a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800307a:	4b38      	ldr	r3, [pc, #224]	; (800315c <HAL_RCC_ClockConfig+0x188>)
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	2380      	movs	r3, #128	; 0x80
 8003080:	049b      	lsls	r3, r3, #18
 8003082:	4013      	ands	r3, r2
 8003084:	d108      	bne.n	8003098 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e062      	b.n	8003150 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308a:	4b34      	ldr	r3, [pc, #208]	; (800315c <HAL_RCC_ClockConfig+0x188>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2202      	movs	r2, #2
 8003090:	4013      	ands	r3, r2
 8003092:	d101      	bne.n	8003098 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e05b      	b.n	8003150 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003098:	4b30      	ldr	r3, [pc, #192]	; (800315c <HAL_RCC_ClockConfig+0x188>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2203      	movs	r2, #3
 800309e:	4393      	bics	r3, r2
 80030a0:	0019      	movs	r1, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	4b2d      	ldr	r3, [pc, #180]	; (800315c <HAL_RCC_ClockConfig+0x188>)
 80030a8:	430a      	orrs	r2, r1
 80030aa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030ac:	f7fe feec 	bl	8001e88 <HAL_GetTick>
 80030b0:	0003      	movs	r3, r0
 80030b2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b4:	e009      	b.n	80030ca <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b6:	f7fe fee7 	bl	8001e88 <HAL_GetTick>
 80030ba:	0002      	movs	r2, r0
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	4a27      	ldr	r2, [pc, #156]	; (8003160 <HAL_RCC_ClockConfig+0x18c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e042      	b.n	8003150 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ca:	4b24      	ldr	r3, [pc, #144]	; (800315c <HAL_RCC_ClockConfig+0x188>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	220c      	movs	r2, #12
 80030d0:	401a      	ands	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	429a      	cmp	r2, r3
 80030da:	d1ec      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030dc:	4b1e      	ldr	r3, [pc, #120]	; (8003158 <HAL_RCC_ClockConfig+0x184>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2201      	movs	r2, #1
 80030e2:	4013      	ands	r3, r2
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d211      	bcs.n	800310e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ea:	4b1b      	ldr	r3, [pc, #108]	; (8003158 <HAL_RCC_ClockConfig+0x184>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2201      	movs	r2, #1
 80030f0:	4393      	bics	r3, r2
 80030f2:	0019      	movs	r1, r3
 80030f4:	4b18      	ldr	r3, [pc, #96]	; (8003158 <HAL_RCC_ClockConfig+0x184>)
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fc:	4b16      	ldr	r3, [pc, #88]	; (8003158 <HAL_RCC_ClockConfig+0x184>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2201      	movs	r2, #1
 8003102:	4013      	ands	r3, r2
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	429a      	cmp	r2, r3
 8003108:	d001      	beq.n	800310e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e020      	b.n	8003150 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2204      	movs	r2, #4
 8003114:	4013      	ands	r3, r2
 8003116:	d009      	beq.n	800312c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003118:	4b10      	ldr	r3, [pc, #64]	; (800315c <HAL_RCC_ClockConfig+0x188>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	4a11      	ldr	r2, [pc, #68]	; (8003164 <HAL_RCC_ClockConfig+0x190>)
 800311e:	4013      	ands	r3, r2
 8003120:	0019      	movs	r1, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	4b0d      	ldr	r3, [pc, #52]	; (800315c <HAL_RCC_ClockConfig+0x188>)
 8003128:	430a      	orrs	r2, r1
 800312a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800312c:	f000 f820 	bl	8003170 <HAL_RCC_GetSysClockFreq>
 8003130:	0001      	movs	r1, r0
 8003132:	4b0a      	ldr	r3, [pc, #40]	; (800315c <HAL_RCC_ClockConfig+0x188>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	091b      	lsrs	r3, r3, #4
 8003138:	220f      	movs	r2, #15
 800313a:	4013      	ands	r3, r2
 800313c:	4a0a      	ldr	r2, [pc, #40]	; (8003168 <HAL_RCC_ClockConfig+0x194>)
 800313e:	5cd3      	ldrb	r3, [r2, r3]
 8003140:	000a      	movs	r2, r1
 8003142:	40da      	lsrs	r2, r3
 8003144:	4b09      	ldr	r3, [pc, #36]	; (800316c <HAL_RCC_ClockConfig+0x198>)
 8003146:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003148:	2000      	movs	r0, #0
 800314a:	f7fe fe57 	bl	8001dfc <HAL_InitTick>
  
  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	0018      	movs	r0, r3
 8003152:	46bd      	mov	sp, r7
 8003154:	b004      	add	sp, #16
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40022000 	.word	0x40022000
 800315c:	40021000 	.word	0x40021000
 8003160:	00001388 	.word	0x00001388
 8003164:	fffff8ff 	.word	0xfffff8ff
 8003168:	080059f0 	.word	0x080059f0
 800316c:	20000004 	.word	0x20000004

08003170 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003170:	b590      	push	{r4, r7, lr}
 8003172:	b08f      	sub	sp, #60	; 0x3c
 8003174:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003176:	2314      	movs	r3, #20
 8003178:	18fb      	adds	r3, r7, r3
 800317a:	4a2b      	ldr	r2, [pc, #172]	; (8003228 <HAL_RCC_GetSysClockFreq+0xb8>)
 800317c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800317e:	c313      	stmia	r3!, {r0, r1, r4}
 8003180:	6812      	ldr	r2, [r2, #0]
 8003182:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003184:	1d3b      	adds	r3, r7, #4
 8003186:	4a29      	ldr	r2, [pc, #164]	; (800322c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003188:	ca13      	ldmia	r2!, {r0, r1, r4}
 800318a:	c313      	stmia	r3!, {r0, r1, r4}
 800318c:	6812      	ldr	r2, [r2, #0]
 800318e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003194:	2300      	movs	r3, #0
 8003196:	62bb      	str	r3, [r7, #40]	; 0x28
 8003198:	2300      	movs	r3, #0
 800319a:	637b      	str	r3, [r7, #52]	; 0x34
 800319c:	2300      	movs	r3, #0
 800319e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80031a4:	4b22      	ldr	r3, [pc, #136]	; (8003230 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ac:	220c      	movs	r2, #12
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d002      	beq.n	80031ba <HAL_RCC_GetSysClockFreq+0x4a>
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d003      	beq.n	80031c0 <HAL_RCC_GetSysClockFreq+0x50>
 80031b8:	e02d      	b.n	8003216 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031ba:	4b1e      	ldr	r3, [pc, #120]	; (8003234 <HAL_RCC_GetSysClockFreq+0xc4>)
 80031bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031be:	e02d      	b.n	800321c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80031c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c2:	0c9b      	lsrs	r3, r3, #18
 80031c4:	220f      	movs	r2, #15
 80031c6:	4013      	ands	r3, r2
 80031c8:	2214      	movs	r2, #20
 80031ca:	18ba      	adds	r2, r7, r2
 80031cc:	5cd3      	ldrb	r3, [r2, r3]
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80031d0:	4b17      	ldr	r3, [pc, #92]	; (8003230 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	220f      	movs	r2, #15
 80031d6:	4013      	ands	r3, r2
 80031d8:	1d3a      	adds	r2, r7, #4
 80031da:	5cd3      	ldrb	r3, [r2, r3]
 80031dc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80031de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031e0:	2380      	movs	r3, #128	; 0x80
 80031e2:	025b      	lsls	r3, r3, #9
 80031e4:	4013      	ands	r3, r2
 80031e6:	d009      	beq.n	80031fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031ea:	4812      	ldr	r0, [pc, #72]	; (8003234 <HAL_RCC_GetSysClockFreq+0xc4>)
 80031ec:	f7fc ff94 	bl	8000118 <__udivsi3>
 80031f0:	0003      	movs	r3, r0
 80031f2:	001a      	movs	r2, r3
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	4353      	muls	r3, r2
 80031f8:	637b      	str	r3, [r7, #52]	; 0x34
 80031fa:	e009      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80031fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031fe:	000a      	movs	r2, r1
 8003200:	0152      	lsls	r2, r2, #5
 8003202:	1a52      	subs	r2, r2, r1
 8003204:	0193      	lsls	r3, r2, #6
 8003206:	1a9b      	subs	r3, r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	185b      	adds	r3, r3, r1
 800320c:	021b      	lsls	r3, r3, #8
 800320e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8003210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003212:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003214:	e002      	b.n	800321c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003216:	4b07      	ldr	r3, [pc, #28]	; (8003234 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003218:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800321a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800321c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800321e:	0018      	movs	r0, r3
 8003220:	46bd      	mov	sp, r7
 8003222:	b00f      	add	sp, #60	; 0x3c
 8003224:	bd90      	pop	{r4, r7, pc}
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	080059d0 	.word	0x080059d0
 800322c:	080059e0 	.word	0x080059e0
 8003230:	40021000 	.word	0x40021000
 8003234:	007a1200 	.word	0x007a1200

08003238 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800323c:	4b02      	ldr	r3, [pc, #8]	; (8003248 <HAL_RCC_GetHCLKFreq+0x10>)
 800323e:	681b      	ldr	r3, [r3, #0]
}
 8003240:	0018      	movs	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	20000004 	.word	0x20000004

0800324c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003250:	f7ff fff2 	bl	8003238 <HAL_RCC_GetHCLKFreq>
 8003254:	0001      	movs	r1, r0
 8003256:	4b06      	ldr	r3, [pc, #24]	; (8003270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	0a1b      	lsrs	r3, r3, #8
 800325c:	2207      	movs	r2, #7
 800325e:	4013      	ands	r3, r2
 8003260:	4a04      	ldr	r2, [pc, #16]	; (8003274 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003262:	5cd3      	ldrb	r3, [r2, r3]
 8003264:	40d9      	lsrs	r1, r3
 8003266:	000b      	movs	r3, r1
}    
 8003268:	0018      	movs	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	46c0      	nop			; (mov r8, r8)
 8003270:	40021000 	.word	0x40021000
 8003274:	08005a00 	.word	0x08005a00

08003278 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	2380      	movs	r3, #128	; 0x80
 800328e:	025b      	lsls	r3, r3, #9
 8003290:	4013      	ands	r3, r2
 8003292:	d100      	bne.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003294:	e08f      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003296:	2317      	movs	r3, #23
 8003298:	18fb      	adds	r3, r7, r3
 800329a:	2200      	movs	r2, #0
 800329c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800329e:	4b57      	ldr	r3, [pc, #348]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032a0:	69da      	ldr	r2, [r3, #28]
 80032a2:	2380      	movs	r3, #128	; 0x80
 80032a4:	055b      	lsls	r3, r3, #21
 80032a6:	4013      	ands	r3, r2
 80032a8:	d111      	bne.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032aa:	4b54      	ldr	r3, [pc, #336]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032ac:	69da      	ldr	r2, [r3, #28]
 80032ae:	4b53      	ldr	r3, [pc, #332]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032b0:	2180      	movs	r1, #128	; 0x80
 80032b2:	0549      	lsls	r1, r1, #21
 80032b4:	430a      	orrs	r2, r1
 80032b6:	61da      	str	r2, [r3, #28]
 80032b8:	4b50      	ldr	r3, [pc, #320]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032ba:	69da      	ldr	r2, [r3, #28]
 80032bc:	2380      	movs	r3, #128	; 0x80
 80032be:	055b      	lsls	r3, r3, #21
 80032c0:	4013      	ands	r3, r2
 80032c2:	60bb      	str	r3, [r7, #8]
 80032c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032c6:	2317      	movs	r3, #23
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	2201      	movs	r2, #1
 80032cc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ce:	4b4c      	ldr	r3, [pc, #304]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	4013      	ands	r3, r2
 80032d8:	d11a      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032da:	4b49      	ldr	r3, [pc, #292]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4b48      	ldr	r3, [pc, #288]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80032e0:	2180      	movs	r1, #128	; 0x80
 80032e2:	0049      	lsls	r1, r1, #1
 80032e4:	430a      	orrs	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032e8:	f7fe fdce 	bl	8001e88 <HAL_GetTick>
 80032ec:	0003      	movs	r3, r0
 80032ee:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f0:	e008      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f2:	f7fe fdc9 	bl	8001e88 <HAL_GetTick>
 80032f6:	0002      	movs	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b64      	cmp	r3, #100	; 0x64
 80032fe:	d901      	bls.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e077      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003304:	4b3e      	ldr	r3, [pc, #248]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	2380      	movs	r3, #128	; 0x80
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	4013      	ands	r3, r2
 800330e:	d0f0      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003310:	4b3a      	ldr	r3, [pc, #232]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003312:	6a1a      	ldr	r2, [r3, #32]
 8003314:	23c0      	movs	r3, #192	; 0xc0
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4013      	ands	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d034      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x114>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	23c0      	movs	r3, #192	; 0xc0
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4013      	ands	r3, r2
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	429a      	cmp	r2, r3
 8003330:	d02c      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003332:	4b32      	ldr	r3, [pc, #200]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	4a33      	ldr	r2, [pc, #204]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003338:	4013      	ands	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800333c:	4b2f      	ldr	r3, [pc, #188]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800333e:	6a1a      	ldr	r2, [r3, #32]
 8003340:	4b2e      	ldr	r3, [pc, #184]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003342:	2180      	movs	r1, #128	; 0x80
 8003344:	0249      	lsls	r1, r1, #9
 8003346:	430a      	orrs	r2, r1
 8003348:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800334a:	4b2c      	ldr	r3, [pc, #176]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800334c:	6a1a      	ldr	r2, [r3, #32]
 800334e:	4b2b      	ldr	r3, [pc, #172]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003350:	492d      	ldr	r1, [pc, #180]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003352:	400a      	ands	r2, r1
 8003354:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003356:	4b29      	ldr	r3, [pc, #164]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2201      	movs	r2, #1
 8003360:	4013      	ands	r3, r2
 8003362:	d013      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003364:	f7fe fd90 	bl	8001e88 <HAL_GetTick>
 8003368:	0003      	movs	r3, r0
 800336a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800336c:	e009      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336e:	f7fe fd8b 	bl	8001e88 <HAL_GetTick>
 8003372:	0002      	movs	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	4a24      	ldr	r2, [pc, #144]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d901      	bls.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e038      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003382:	4b1e      	ldr	r3, [pc, #120]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	2202      	movs	r2, #2
 8003388:	4013      	ands	r3, r2
 800338a:	d0f0      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800338c:	4b1b      	ldr	r3, [pc, #108]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	4a1c      	ldr	r2, [pc, #112]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003392:	4013      	ands	r3, r2
 8003394:	0019      	movs	r1, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	4b18      	ldr	r3, [pc, #96]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800339c:	430a      	orrs	r2, r1
 800339e:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033a0:	2317      	movs	r3, #23
 80033a2:	18fb      	adds	r3, r7, r3
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d105      	bne.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033aa:	4b14      	ldr	r3, [pc, #80]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033ac:	69da      	ldr	r2, [r3, #28]
 80033ae:	4b13      	ldr	r3, [pc, #76]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033b0:	4917      	ldr	r1, [pc, #92]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80033b2:	400a      	ands	r2, r1
 80033b4:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2201      	movs	r2, #1
 80033bc:	4013      	ands	r3, r2
 80033be:	d009      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033c0:	4b0e      	ldr	r3, [pc, #56]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c4:	2203      	movs	r2, #3
 80033c6:	4393      	bics	r3, r2
 80033c8:	0019      	movs	r1, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033d0:	430a      	orrs	r2, r1
 80033d2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2220      	movs	r2, #32
 80033da:	4013      	ands	r3, r2
 80033dc:	d009      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033de:	4b07      	ldr	r3, [pc, #28]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	2210      	movs	r2, #16
 80033e4:	4393      	bics	r3, r2
 80033e6:	0019      	movs	r1, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	4b03      	ldr	r3, [pc, #12]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033ee:	430a      	orrs	r2, r1
 80033f0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	0018      	movs	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b006      	add	sp, #24
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40021000 	.word	0x40021000
 8003400:	40007000 	.word	0x40007000
 8003404:	fffffcff 	.word	0xfffffcff
 8003408:	fffeffff 	.word	0xfffeffff
 800340c:	00001388 	.word	0x00001388
 8003410:	efffffff 	.word	0xefffffff

08003414 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e044      	b.n	80034b0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800342a:	2b00      	cmp	r3, #0
 800342c:	d107      	bne.n	800343e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2270      	movs	r2, #112	; 0x70
 8003432:	2100      	movs	r1, #0
 8003434:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	0018      	movs	r0, r3
 800343a:	f7fe fad5 	bl	80019e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2224      	movs	r2, #36	; 0x24
 8003442:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2101      	movs	r1, #1
 8003450:	438a      	bics	r2, r1
 8003452:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	0018      	movs	r0, r3
 8003458:	f000 fa18 	bl	800388c <UART_SetConfig>
 800345c:	0003      	movs	r3, r0
 800345e:	2b01      	cmp	r3, #1
 8003460:	d101      	bne.n	8003466 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e024      	b.n	80034b0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	0018      	movs	r0, r3
 8003472:	f000 fb91 	bl	8003b98 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	490d      	ldr	r1, [pc, #52]	; (80034b8 <HAL_UART_Init+0xa4>)
 8003482:	400a      	ands	r2, r1
 8003484:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2108      	movs	r1, #8
 8003492:	438a      	bics	r2, r1
 8003494:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2101      	movs	r1, #1
 80034a2:	430a      	orrs	r2, r1
 80034a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	0018      	movs	r0, r3
 80034aa:	f000 fc29 	bl	8003d00 <UART_CheckIdleState>
 80034ae:	0003      	movs	r3, r0
}
 80034b0:	0018      	movs	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b002      	add	sp, #8
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	fffff7ff 	.word	0xfffff7ff

080034bc <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e028      	b.n	8003520 <HAL_UART_DeInit+0x64>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2224      	movs	r2, #36	; 0x24
 80034d2:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2101      	movs	r1, #1
 80034e0:	438a      	bics	r2, r1
 80034e2:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2200      	movs	r2, #0
 80034f2:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2200      	movs	r2, #0
 80034fa:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	0018      	movs	r0, r3
 8003500:	f7fe fb4e 	bl	8001ba0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2270      	movs	r2, #112	; 0x70
 800351a:	2100      	movs	r1, #0
 800351c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	0018      	movs	r0, r3
 8003522:	46bd      	mov	sp, r7
 8003524:	b002      	add	sp, #8
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b08a      	sub	sp, #40	; 0x28
 800352c:	af02      	add	r7, sp, #8
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	603b      	str	r3, [r7, #0]
 8003534:	1dbb      	adds	r3, r7, #6
 8003536:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800353c:	2b20      	cmp	r3, #32
 800353e:	d000      	beq.n	8003542 <HAL_UART_Transmit+0x1a>
 8003540:	e095      	b.n	800366e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_UART_Transmit+0x28>
 8003548:	1dbb      	adds	r3, r7, #6
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e08d      	b.n	8003670 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	2380      	movs	r3, #128	; 0x80
 800355a:	015b      	lsls	r3, r3, #5
 800355c:	429a      	cmp	r2, r3
 800355e:	d109      	bne.n	8003574 <HAL_UART_Transmit+0x4c>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d105      	bne.n	8003574 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	2201      	movs	r2, #1
 800356c:	4013      	ands	r3, r2
 800356e:	d001      	beq.n	8003574 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e07d      	b.n	8003670 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2270      	movs	r2, #112	; 0x70
 8003578:	5c9b      	ldrb	r3, [r3, r2]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d101      	bne.n	8003582 <HAL_UART_Transmit+0x5a>
 800357e:	2302      	movs	r3, #2
 8003580:	e076      	b.n	8003670 <HAL_UART_Transmit+0x148>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2270      	movs	r2, #112	; 0x70
 8003586:	2101      	movs	r1, #1
 8003588:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2221      	movs	r2, #33	; 0x21
 8003594:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003596:	f7fe fc77 	bl	8001e88 <HAL_GetTick>
 800359a:	0003      	movs	r3, r0
 800359c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	1dba      	adds	r2, r7, #6
 80035a2:	2150      	movs	r1, #80	; 0x50
 80035a4:	8812      	ldrh	r2, [r2, #0]
 80035a6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	1dba      	adds	r2, r7, #6
 80035ac:	2152      	movs	r1, #82	; 0x52
 80035ae:	8812      	ldrh	r2, [r2, #0]
 80035b0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	689a      	ldr	r2, [r3, #8]
 80035b6:	2380      	movs	r3, #128	; 0x80
 80035b8:	015b      	lsls	r3, r3, #5
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d108      	bne.n	80035d0 <HAL_UART_Transmit+0xa8>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d104      	bne.n	80035d0 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	61bb      	str	r3, [r7, #24]
 80035ce:	e003      	b.n	80035d8 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035d4:	2300      	movs	r3, #0
 80035d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035d8:	e02d      	b.n	8003636 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	0013      	movs	r3, r2
 80035e4:	2200      	movs	r2, #0
 80035e6:	2180      	movs	r1, #128	; 0x80
 80035e8:	f000 fbd0 	bl	8003d8c <UART_WaitOnFlagUntilTimeout>
 80035ec:	1e03      	subs	r3, r0, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e03d      	b.n	8003670 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10b      	bne.n	8003612 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	881a      	ldrh	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	05d2      	lsls	r2, r2, #23
 8003604:	0dd2      	lsrs	r2, r2, #23
 8003606:	b292      	uxth	r2, r2
 8003608:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	3302      	adds	r3, #2
 800360e:	61bb      	str	r3, [r7, #24]
 8003610:	e008      	b.n	8003624 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	781a      	ldrb	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	b292      	uxth	r2, r2
 800361c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	3301      	adds	r3, #1
 8003622:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2252      	movs	r2, #82	; 0x52
 8003628:	5a9b      	ldrh	r3, [r3, r2]
 800362a:	b29b      	uxth	r3, r3
 800362c:	3b01      	subs	r3, #1
 800362e:	b299      	uxth	r1, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2252      	movs	r2, #82	; 0x52
 8003634:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2252      	movs	r2, #82	; 0x52
 800363a:	5a9b      	ldrh	r3, [r3, r2]
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1cb      	bne.n	80035da <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	0013      	movs	r3, r2
 800364c:	2200      	movs	r2, #0
 800364e:	2140      	movs	r1, #64	; 0x40
 8003650:	f000 fb9c 	bl	8003d8c <UART_WaitOnFlagUntilTimeout>
 8003654:	1e03      	subs	r3, r0, #0
 8003656:	d001      	beq.n	800365c <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e009      	b.n	8003670 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2220      	movs	r2, #32
 8003660:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2270      	movs	r2, #112	; 0x70
 8003666:	2100      	movs	r1, #0
 8003668:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	e000      	b.n	8003670 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800366e:	2302      	movs	r3, #2
  }
}
 8003670:	0018      	movs	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	b008      	add	sp, #32
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	1dbb      	adds	r3, r7, #6
 8003684:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800368a:	2b20      	cmp	r3, #32
 800368c:	d000      	beq.n	8003690 <HAL_UART_Receive_DMA+0x18>
 800368e:	e07f      	b.n	8003790 <HAL_UART_Receive_DMA+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_UART_Receive_DMA+0x26>
 8003696:	1dbb      	adds	r3, r7, #6
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e077      	b.n	8003792 <HAL_UART_Receive_DMA+0x11a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	2380      	movs	r3, #128	; 0x80
 80036a8:	015b      	lsls	r3, r3, #5
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d109      	bne.n	80036c2 <HAL_UART_Receive_DMA+0x4a>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d105      	bne.n	80036c2 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2201      	movs	r2, #1
 80036ba:	4013      	ands	r3, r2
 80036bc:	d001      	beq.n	80036c2 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e067      	b.n	8003792 <HAL_UART_Receive_DMA+0x11a>
      }
    }

    __HAL_LOCK(huart);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2270      	movs	r2, #112	; 0x70
 80036c6:	5c9b      	ldrb	r3, [r3, r2]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_UART_Receive_DMA+0x58>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e060      	b.n	8003792 <HAL_UART_Receive_DMA+0x11a>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2270      	movs	r2, #112	; 0x70
 80036d4:	2101      	movs	r1, #1
 80036d6:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	1dba      	adds	r2, r7, #6
 80036e2:	2158      	movs	r1, #88	; 0x58
 80036e4:	8812      	ldrh	r2, [r2, #0]
 80036e6:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2222      	movs	r2, #34	; 0x22
 80036f2:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d02a      	beq.n	8003752 <HAL_UART_Receive_DMA+0xda>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003700:	4a26      	ldr	r2, [pc, #152]	; (800379c <HAL_UART_Receive_DMA+0x124>)
 8003702:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003708:	4a25      	ldr	r2, [pc, #148]	; (80037a0 <HAL_UART_Receive_DMA+0x128>)
 800370a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003710:	4a24      	ldr	r2, [pc, #144]	; (80037a4 <HAL_UART_Receive_DMA+0x12c>)
 8003712:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003718:	2200      	movs	r2, #0
 800371a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3324      	adds	r3, #36	; 0x24
 8003726:	0019      	movs	r1, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372c:	001a      	movs	r2, r3
 800372e:	1dbb      	adds	r3, r7, #6
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	f7fe fd44 	bl	80021be <HAL_DMA_Start_IT>
 8003736:	1e03      	subs	r3, r0, #0
 8003738:	d00b      	beq.n	8003752 <HAL_UART_Receive_DMA+0xda>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2210      	movs	r2, #16
 800373e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2270      	movs	r2, #112	; 0x70
 8003744:	2100      	movs	r1, #0
 8003746:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2220      	movs	r2, #32
 800374c:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e01f      	b.n	8003792 <HAL_UART_Receive_DMA+0x11a>
      }
    }
    __HAL_UNLOCK(huart);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2270      	movs	r2, #112	; 0x70
 8003756:	2100      	movs	r1, #0
 8003758:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2180      	movs	r1, #128	; 0x80
 8003766:	0049      	lsls	r1, r1, #1
 8003768:	430a      	orrs	r2, r1
 800376a:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689a      	ldr	r2, [r3, #8]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2101      	movs	r1, #1
 8003778:	430a      	orrs	r2, r1
 800377a:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689a      	ldr	r2, [r3, #8]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2140      	movs	r1, #64	; 0x40
 8003788:	430a      	orrs	r2, r1
 800378a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	e000      	b.n	8003792 <HAL_UART_Receive_DMA+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003790:	2302      	movs	r3, #2
  }
}
 8003792:	0018      	movs	r0, r3
 8003794:	46bd      	mov	sp, r7
 8003796:	b004      	add	sp, #16
 8003798:	bd80      	pop	{r7, pc}
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	08003ef1 	.word	0x08003ef1
 80037a0:	08003f59 	.word	0x08003f59
 80037a4:	08003f77 	.word	0x08003f77

080037a8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4927      	ldr	r1, [pc, #156]	; (8003858 <HAL_UART_AbortReceive+0xb0>)
 80037bc:	400a      	ands	r2, r1
 80037be:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2101      	movs	r1, #1
 80037cc:	438a      	bics	r2, r1
 80037ce:	609a      	str	r2, [r3, #8]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	2240      	movs	r2, #64	; 0x40
 80037d8:	4013      	ands	r3, r2
 80037da:	2b40      	cmp	r3, #64	; 0x40
 80037dc:	d123      	bne.n	8003826 <HAL_UART_AbortReceive+0x7e>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2140      	movs	r1, #64	; 0x40
 80037ea:	438a      	bics	r2, r1
 80037ec:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d017      	beq.n	8003826 <HAL_UART_AbortReceive+0x7e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037fa:	2200      	movs	r2, #0
 80037fc:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003802:	0018      	movs	r0, r3
 8003804:	f7fe fd41 	bl	800228a <HAL_DMA_Abort>
 8003808:	1e03      	subs	r3, r0, #0
 800380a:	d00c      	beq.n	8003826 <HAL_UART_AbortReceive+0x7e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003810:	0018      	movs	r0, r3
 8003812:	f7fe fe14 	bl	800243e <HAL_DMA_GetError>
 8003816:	0003      	movs	r3, r0
 8003818:	2b20      	cmp	r3, #32
 800381a:	d104      	bne.n	8003826 <HAL_UART_AbortReceive+0x7e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2210      	movs	r2, #16
 8003820:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e013      	b.n	800384e <HAL_UART_AbortReceive+0xa6>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	225a      	movs	r2, #90	; 0x5a
 800382a:	2100      	movs	r1, #0
 800382c:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	220f      	movs	r2, #15
 8003834:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	699a      	ldr	r2, [r3, #24]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2108      	movs	r1, #8
 8003842:	430a      	orrs	r2, r1
 8003844:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	679a      	str	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	0018      	movs	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	b002      	add	sp, #8
 8003854:	bd80      	pop	{r7, pc}
 8003856:	46c0      	nop			; (mov r8, r8)
 8003858:	fffffedf 	.word	0xfffffedf

0800385c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003864:	46c0      	nop			; (mov r8, r8)
 8003866:	46bd      	mov	sp, r7
 8003868:	b002      	add	sp, #8
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003874:	46c0      	nop			; (mov r8, r8)
 8003876:	46bd      	mov	sp, r7
 8003878:	b002      	add	sp, #8
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003884:	46c0      	nop			; (mov r8, r8)
 8003886:	46bd      	mov	sp, r7
 8003888:	b002      	add	sp, #8
 800388a:	bd80      	pop	{r7, pc}

0800388c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003894:	2300      	movs	r3, #0
 8003896:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003898:	2317      	movs	r3, #23
 800389a:	18fb      	adds	r3, r7, r3
 800389c:	2200      	movs	r2, #0
 800389e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	431a      	orrs	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4aad      	ldr	r2, [pc, #692]	; (8003b74 <UART_SetConfig+0x2e8>)
 80038c0:	4013      	ands	r3, r2
 80038c2:	0019      	movs	r1, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	4aa8      	ldr	r2, [pc, #672]	; (8003b78 <UART_SetConfig+0x2ec>)
 80038d6:	4013      	ands	r3, r2
 80038d8:	0019      	movs	r1, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	4a9f      	ldr	r2, [pc, #636]	; (8003b7c <UART_SetConfig+0x2f0>)
 80038fe:	4013      	ands	r3, r2
 8003900:	0019      	movs	r1, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	430a      	orrs	r2, r1
 800390a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a9b      	ldr	r2, [pc, #620]	; (8003b80 <UART_SetConfig+0x2f4>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d125      	bne.n	8003962 <UART_SetConfig+0xd6>
 8003916:	4b9b      	ldr	r3, [pc, #620]	; (8003b84 <UART_SetConfig+0x2f8>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	2203      	movs	r2, #3
 800391c:	4013      	ands	r3, r2
 800391e:	2b01      	cmp	r3, #1
 8003920:	d00f      	beq.n	8003942 <UART_SetConfig+0xb6>
 8003922:	d304      	bcc.n	800392e <UART_SetConfig+0xa2>
 8003924:	2b02      	cmp	r3, #2
 8003926:	d011      	beq.n	800394c <UART_SetConfig+0xc0>
 8003928:	2b03      	cmp	r3, #3
 800392a:	d005      	beq.n	8003938 <UART_SetConfig+0xac>
 800392c:	e013      	b.n	8003956 <UART_SetConfig+0xca>
 800392e:	231f      	movs	r3, #31
 8003930:	18fb      	adds	r3, r7, r3
 8003932:	2200      	movs	r2, #0
 8003934:	701a      	strb	r2, [r3, #0]
 8003936:	e022      	b.n	800397e <UART_SetConfig+0xf2>
 8003938:	231f      	movs	r3, #31
 800393a:	18fb      	adds	r3, r7, r3
 800393c:	2202      	movs	r2, #2
 800393e:	701a      	strb	r2, [r3, #0]
 8003940:	e01d      	b.n	800397e <UART_SetConfig+0xf2>
 8003942:	231f      	movs	r3, #31
 8003944:	18fb      	adds	r3, r7, r3
 8003946:	2204      	movs	r2, #4
 8003948:	701a      	strb	r2, [r3, #0]
 800394a:	e018      	b.n	800397e <UART_SetConfig+0xf2>
 800394c:	231f      	movs	r3, #31
 800394e:	18fb      	adds	r3, r7, r3
 8003950:	2208      	movs	r2, #8
 8003952:	701a      	strb	r2, [r3, #0]
 8003954:	e013      	b.n	800397e <UART_SetConfig+0xf2>
 8003956:	231f      	movs	r3, #31
 8003958:	18fb      	adds	r3, r7, r3
 800395a:	2210      	movs	r2, #16
 800395c:	701a      	strb	r2, [r3, #0]
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	e00d      	b.n	800397e <UART_SetConfig+0xf2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a88      	ldr	r2, [pc, #544]	; (8003b88 <UART_SetConfig+0x2fc>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d104      	bne.n	8003976 <UART_SetConfig+0xea>
 800396c:	231f      	movs	r3, #31
 800396e:	18fb      	adds	r3, r7, r3
 8003970:	2200      	movs	r2, #0
 8003972:	701a      	strb	r2, [r3, #0]
 8003974:	e003      	b.n	800397e <UART_SetConfig+0xf2>
 8003976:	231f      	movs	r3, #31
 8003978:	18fb      	adds	r3, r7, r3
 800397a:	2210      	movs	r2, #16
 800397c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69da      	ldr	r2, [r3, #28]
 8003982:	2380      	movs	r3, #128	; 0x80
 8003984:	021b      	lsls	r3, r3, #8
 8003986:	429a      	cmp	r2, r3
 8003988:	d000      	beq.n	800398c <UART_SetConfig+0x100>
 800398a:	e07d      	b.n	8003a88 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 800398c:	231f      	movs	r3, #31
 800398e:	18fb      	adds	r3, r7, r3
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d01c      	beq.n	80039d0 <UART_SetConfig+0x144>
 8003996:	dc02      	bgt.n	800399e <UART_SetConfig+0x112>
 8003998:	2b00      	cmp	r3, #0
 800399a:	d005      	beq.n	80039a8 <UART_SetConfig+0x11c>
 800399c:	e04b      	b.n	8003a36 <UART_SetConfig+0x1aa>
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d025      	beq.n	80039ee <UART_SetConfig+0x162>
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d037      	beq.n	8003a16 <UART_SetConfig+0x18a>
 80039a6:	e046      	b.n	8003a36 <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039a8:	f7ff fc50 	bl	800324c <HAL_RCC_GetPCLK1Freq>
 80039ac:	0003      	movs	r3, r0
 80039ae:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	005a      	lsls	r2, r3, #1
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	085b      	lsrs	r3, r3, #1
 80039ba:	18d2      	adds	r2, r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	0019      	movs	r1, r3
 80039c2:	0010      	movs	r0, r2
 80039c4:	f7fc fba8 	bl	8000118 <__udivsi3>
 80039c8:	0003      	movs	r3, r0
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	61bb      	str	r3, [r7, #24]
        break;
 80039ce:	e037      	b.n	8003a40 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	085b      	lsrs	r3, r3, #1
 80039d6:	4a6d      	ldr	r2, [pc, #436]	; (8003b8c <UART_SetConfig+0x300>)
 80039d8:	189a      	adds	r2, r3, r2
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	0019      	movs	r1, r3
 80039e0:	0010      	movs	r0, r2
 80039e2:	f7fc fb99 	bl	8000118 <__udivsi3>
 80039e6:	0003      	movs	r3, r0
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	61bb      	str	r3, [r7, #24]
        break;
 80039ec:	e028      	b.n	8003a40 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ee:	f7ff fbbf 	bl	8003170 <HAL_RCC_GetSysClockFreq>
 80039f2:	0003      	movs	r3, r0
 80039f4:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	005a      	lsls	r2, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	085b      	lsrs	r3, r3, #1
 8003a00:	18d2      	adds	r2, r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	0019      	movs	r1, r3
 8003a08:	0010      	movs	r0, r2
 8003a0a:	f7fc fb85 	bl	8000118 <__udivsi3>
 8003a0e:	0003      	movs	r3, r0
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	61bb      	str	r3, [r7, #24]
        break;
 8003a14:	e014      	b.n	8003a40 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	085b      	lsrs	r3, r3, #1
 8003a1c:	2280      	movs	r2, #128	; 0x80
 8003a1e:	0252      	lsls	r2, r2, #9
 8003a20:	189a      	adds	r2, r3, r2
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	0019      	movs	r1, r3
 8003a28:	0010      	movs	r0, r2
 8003a2a:	f7fc fb75 	bl	8000118 <__udivsi3>
 8003a2e:	0003      	movs	r3, r0
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	61bb      	str	r3, [r7, #24]
        break;
 8003a34:	e004      	b.n	8003a40 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8003a36:	2317      	movs	r3, #23
 8003a38:	18fb      	adds	r3, r7, r3
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	701a      	strb	r2, [r3, #0]
        break;
 8003a3e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	2b0f      	cmp	r3, #15
 8003a44:	d91b      	bls.n	8003a7e <UART_SetConfig+0x1f2>
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	4a51      	ldr	r2, [pc, #324]	; (8003b90 <UART_SetConfig+0x304>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d817      	bhi.n	8003a7e <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	200a      	movs	r0, #10
 8003a54:	183b      	adds	r3, r7, r0
 8003a56:	210f      	movs	r1, #15
 8003a58:	438a      	bics	r2, r1
 8003a5a:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	085b      	lsrs	r3, r3, #1
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2207      	movs	r2, #7
 8003a64:	4013      	ands	r3, r2
 8003a66:	b299      	uxth	r1, r3
 8003a68:	183b      	adds	r3, r7, r0
 8003a6a:	183a      	adds	r2, r7, r0
 8003a6c:	8812      	ldrh	r2, [r2, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	183a      	adds	r2, r7, r0
 8003a78:	8812      	ldrh	r2, [r2, #0]
 8003a7a:	60da      	str	r2, [r3, #12]
 8003a7c:	e06c      	b.n	8003b58 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003a7e:	2317      	movs	r3, #23
 8003a80:	18fb      	adds	r3, r7, r3
 8003a82:	2201      	movs	r2, #1
 8003a84:	701a      	strb	r2, [r3, #0]
 8003a86:	e067      	b.n	8003b58 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8003a88:	231f      	movs	r3, #31
 8003a8a:	18fb      	adds	r3, r7, r3
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d01b      	beq.n	8003aca <UART_SetConfig+0x23e>
 8003a92:	dc02      	bgt.n	8003a9a <UART_SetConfig+0x20e>
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d005      	beq.n	8003aa4 <UART_SetConfig+0x218>
 8003a98:	e049      	b.n	8003b2e <UART_SetConfig+0x2a2>
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d024      	beq.n	8003ae8 <UART_SetConfig+0x25c>
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d035      	beq.n	8003b0e <UART_SetConfig+0x282>
 8003aa2:	e044      	b.n	8003b2e <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aa4:	f7ff fbd2 	bl	800324c <HAL_RCC_GetPCLK1Freq>
 8003aa8:	0003      	movs	r3, r0
 8003aaa:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	085a      	lsrs	r2, r3, #1
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	18d2      	adds	r2, r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	0019      	movs	r1, r3
 8003abc:	0010      	movs	r0, r2
 8003abe:	f7fc fb2b 	bl	8000118 <__udivsi3>
 8003ac2:	0003      	movs	r3, r0
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	61bb      	str	r3, [r7, #24]
        break;
 8003ac8:	e036      	b.n	8003b38 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	085b      	lsrs	r3, r3, #1
 8003ad0:	4a30      	ldr	r2, [pc, #192]	; (8003b94 <UART_SetConfig+0x308>)
 8003ad2:	189a      	adds	r2, r3, r2
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	0019      	movs	r1, r3
 8003ada:	0010      	movs	r0, r2
 8003adc:	f7fc fb1c 	bl	8000118 <__udivsi3>
 8003ae0:	0003      	movs	r3, r0
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	61bb      	str	r3, [r7, #24]
        break;
 8003ae6:	e027      	b.n	8003b38 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ae8:	f7ff fb42 	bl	8003170 <HAL_RCC_GetSysClockFreq>
 8003aec:	0003      	movs	r3, r0
 8003aee:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	085a      	lsrs	r2, r3, #1
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	18d2      	adds	r2, r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	0019      	movs	r1, r3
 8003b00:	0010      	movs	r0, r2
 8003b02:	f7fc fb09 	bl	8000118 <__udivsi3>
 8003b06:	0003      	movs	r3, r0
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	61bb      	str	r3, [r7, #24]
        break;
 8003b0c:	e014      	b.n	8003b38 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	085b      	lsrs	r3, r3, #1
 8003b14:	2280      	movs	r2, #128	; 0x80
 8003b16:	0212      	lsls	r2, r2, #8
 8003b18:	189a      	adds	r2, r3, r2
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	0019      	movs	r1, r3
 8003b20:	0010      	movs	r0, r2
 8003b22:	f7fc faf9 	bl	8000118 <__udivsi3>
 8003b26:	0003      	movs	r3, r0
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	61bb      	str	r3, [r7, #24]
        break;
 8003b2c:	e004      	b.n	8003b38 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8003b2e:	2317      	movs	r3, #23
 8003b30:	18fb      	adds	r3, r7, r3
 8003b32:	2201      	movs	r2, #1
 8003b34:	701a      	strb	r2, [r3, #0]
        break;
 8003b36:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	2b0f      	cmp	r3, #15
 8003b3c:	d908      	bls.n	8003b50 <UART_SetConfig+0x2c4>
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	4a13      	ldr	r2, [pc, #76]	; (8003b90 <UART_SetConfig+0x304>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d804      	bhi.n	8003b50 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	60da      	str	r2, [r3, #12]
 8003b4e:	e003      	b.n	8003b58 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003b50:	2317      	movs	r3, #23
 8003b52:	18fb      	adds	r3, r7, r3
 8003b54:	2201      	movs	r2, #1
 8003b56:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003b64:	2317      	movs	r3, #23
 8003b66:	18fb      	adds	r3, r7, r3
 8003b68:	781b      	ldrb	r3, [r3, #0]
}
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	b008      	add	sp, #32
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	ffff69f3 	.word	0xffff69f3
 8003b78:	ffffcfff 	.word	0xffffcfff
 8003b7c:	fffff4ff 	.word	0xfffff4ff
 8003b80:	40013800 	.word	0x40013800
 8003b84:	40021000 	.word	0x40021000
 8003b88:	40004400 	.word	0x40004400
 8003b8c:	00f42400 	.word	0x00f42400
 8003b90:	0000ffff 	.word	0x0000ffff
 8003b94:	007a1200 	.word	0x007a1200

08003b98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	d00b      	beq.n	8003bc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	4a4a      	ldr	r2, [pc, #296]	; (8003cdc <UART_AdvFeatureConfig+0x144>)
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	0019      	movs	r1, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	4013      	ands	r3, r2
 8003bca:	d00b      	beq.n	8003be4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	4a43      	ldr	r2, [pc, #268]	; (8003ce0 <UART_AdvFeatureConfig+0x148>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	0019      	movs	r1, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	2204      	movs	r2, #4
 8003bea:	4013      	ands	r3, r2
 8003bec:	d00b      	beq.n	8003c06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	4a3b      	ldr	r2, [pc, #236]	; (8003ce4 <UART_AdvFeatureConfig+0x14c>)
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	0019      	movs	r1, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	2208      	movs	r2, #8
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	d00b      	beq.n	8003c28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	4a34      	ldr	r2, [pc, #208]	; (8003ce8 <UART_AdvFeatureConfig+0x150>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	0019      	movs	r1, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	2210      	movs	r2, #16
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d00b      	beq.n	8003c4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	4a2c      	ldr	r2, [pc, #176]	; (8003cec <UART_AdvFeatureConfig+0x154>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	0019      	movs	r1, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	2220      	movs	r2, #32
 8003c50:	4013      	ands	r3, r2
 8003c52:	d00b      	beq.n	8003c6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	4a25      	ldr	r2, [pc, #148]	; (8003cf0 <UART_AdvFeatureConfig+0x158>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	0019      	movs	r1, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	2240      	movs	r2, #64	; 0x40
 8003c72:	4013      	ands	r3, r2
 8003c74:	d01d      	beq.n	8003cb2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	4a1d      	ldr	r2, [pc, #116]	; (8003cf4 <UART_AdvFeatureConfig+0x15c>)
 8003c7e:	4013      	ands	r3, r2
 8003c80:	0019      	movs	r1, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c92:	2380      	movs	r3, #128	; 0x80
 8003c94:	035b      	lsls	r3, r3, #13
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d10b      	bne.n	8003cb2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	4a15      	ldr	r2, [pc, #84]	; (8003cf8 <UART_AdvFeatureConfig+0x160>)
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	0019      	movs	r1, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	2280      	movs	r2, #128	; 0x80
 8003cb8:	4013      	ands	r3, r2
 8003cba:	d00b      	beq.n	8003cd4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	4a0e      	ldr	r2, [pc, #56]	; (8003cfc <UART_AdvFeatureConfig+0x164>)
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	0019      	movs	r1, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	605a      	str	r2, [r3, #4]
  }
}
 8003cd4:	46c0      	nop			; (mov r8, r8)
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	b002      	add	sp, #8
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	fffdffff 	.word	0xfffdffff
 8003ce0:	fffeffff 	.word	0xfffeffff
 8003ce4:	fffbffff 	.word	0xfffbffff
 8003ce8:	ffff7fff 	.word	0xffff7fff
 8003cec:	ffffefff 	.word	0xffffefff
 8003cf0:	ffffdfff 	.word	0xffffdfff
 8003cf4:	ffefffff 	.word	0xffefffff
 8003cf8:	ff9fffff 	.word	0xff9fffff
 8003cfc:	fff7ffff 	.word	0xfff7ffff

08003d00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af02      	add	r7, sp, #8
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003d0e:	f7fe f8bb 	bl	8001e88 <HAL_GetTick>
 8003d12:	0003      	movs	r3, r0
 8003d14:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2208      	movs	r2, #8
 8003d1e:	4013      	ands	r3, r2
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d10d      	bne.n	8003d40 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	2380      	movs	r3, #128	; 0x80
 8003d28:	0399      	lsls	r1, r3, #14
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	4b16      	ldr	r3, [pc, #88]	; (8003d88 <UART_CheckIdleState+0x88>)
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	0013      	movs	r3, r2
 8003d32:	2200      	movs	r2, #0
 8003d34:	f000 f82a 	bl	8003d8c <UART_WaitOnFlagUntilTimeout>
 8003d38:	1e03      	subs	r3, r0, #0
 8003d3a:	d001      	beq.n	8003d40 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e01f      	b.n	8003d80 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2204      	movs	r2, #4
 8003d48:	4013      	ands	r3, r2
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d10d      	bne.n	8003d6a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	2380      	movs	r3, #128	; 0x80
 8003d52:	03d9      	lsls	r1, r3, #15
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	4b0c      	ldr	r3, [pc, #48]	; (8003d88 <UART_CheckIdleState+0x88>)
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	0013      	movs	r3, r2
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f000 f815 	bl	8003d8c <UART_WaitOnFlagUntilTimeout>
 8003d62:	1e03      	subs	r3, r0, #0
 8003d64:	d001      	beq.n	8003d6a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e00a      	b.n	8003d80 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2220      	movs	r2, #32
 8003d74:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2270      	movs	r2, #112	; 0x70
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	0018      	movs	r0, r3
 8003d82:	46bd      	mov	sp, r7
 8003d84:	b004      	add	sp, #16
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	01ffffff 	.word	0x01ffffff

08003d8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	603b      	str	r3, [r7, #0]
 8003d98:	1dfb      	adds	r3, r7, #7
 8003d9a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d9c:	e05d      	b.n	8003e5a <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	3301      	adds	r3, #1
 8003da2:	d05a      	beq.n	8003e5a <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003da4:	f7fe f870 	bl	8001e88 <HAL_GetTick>
 8003da8:	0002      	movs	r2, r0
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d302      	bcc.n	8003dba <UART_WaitOnFlagUntilTimeout+0x2e>
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d11b      	bne.n	8003df2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	492f      	ldr	r1, [pc, #188]	; (8003e84 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003dc6:	400a      	ands	r2, r1
 8003dc8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	438a      	bics	r2, r1
 8003dd8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2220      	movs	r2, #32
 8003de4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2270      	movs	r2, #112	; 0x70
 8003dea:	2100      	movs	r1, #0
 8003dec:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e043      	b.n	8003e7a <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2204      	movs	r2, #4
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	d02d      	beq.n	8003e5a <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	69da      	ldr	r2, [r3, #28]
 8003e04:	2380      	movs	r3, #128	; 0x80
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	401a      	ands	r2, r3
 8003e0a:	2380      	movs	r3, #128	; 0x80
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d123      	bne.n	8003e5a <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2280      	movs	r2, #128	; 0x80
 8003e18:	0112      	lsls	r2, r2, #4
 8003e1a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4917      	ldr	r1, [pc, #92]	; (8003e84 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003e28:	400a      	ands	r2, r1
 8003e2a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2101      	movs	r1, #1
 8003e38:	438a      	bics	r2, r1
 8003e3a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2220      	movs	r2, #32
 8003e46:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2270      	movs	r2, #112	; 0x70
 8003e52:	2100      	movs	r1, #0
 8003e54:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e00f      	b.n	8003e7a <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	4013      	ands	r3, r2
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	425a      	negs	r2, r3
 8003e6a:	4153      	adcs	r3, r2
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	001a      	movs	r2, r3
 8003e70:	1dfb      	adds	r3, r7, #7
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d092      	beq.n	8003d9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	b004      	add	sp, #16
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	fffffe5f 	.word	0xfffffe5f

08003e88 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	21c0      	movs	r1, #192	; 0xc0
 8003e9c:	438a      	bics	r2, r1
 8003e9e:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003ea6:	46c0      	nop			; (mov r8, r8)
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	b002      	add	sp, #8
 8003eac:	bd80      	pop	{r7, pc}
	...

08003eb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	490a      	ldr	r1, [pc, #40]	; (8003eec <UART_EndRxTransfer+0x3c>)
 8003ec4:	400a      	ands	r2, r1
 8003ec6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	438a      	bics	r2, r1
 8003ed6:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2220      	movs	r2, #32
 8003edc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003ee4:	46c0      	nop			; (mov r8, r8)
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	b002      	add	sp, #8
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	fffffedf 	.word	0xfffffedf

08003ef0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	2b20      	cmp	r3, #32
 8003f04:	d01e      	beq.n	8003f44 <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	225a      	movs	r2, #90	; 0x5a
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	490e      	ldr	r1, [pc, #56]	; (8003f54 <UART_DMAReceiveCplt+0x64>)
 8003f1a:	400a      	ands	r2, r1
 8003f1c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2101      	movs	r1, #1
 8003f2a:	438a      	bics	r2, r1
 8003f2c:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2140      	movs	r1, #64	; 0x40
 8003f3a:	438a      	bics	r2, r1
 8003f3c:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2220      	movs	r2, #32
 8003f42:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	0018      	movs	r0, r3
 8003f48:	f7ff fc88 	bl	800385c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f4c:	46c0      	nop			; (mov r8, r8)
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b004      	add	sp, #16
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	fffffeff 	.word	0xfffffeff

08003f58 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f7ff fc7f 	bl	800386c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f6e:	46c0      	nop			; (mov r8, r8)
 8003f70:	46bd      	mov	sp, r7
 8003f72:	b004      	add	sp, #16
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b086      	sub	sp, #24
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f88:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	2280      	movs	r2, #128	; 0x80
 8003f98:	4013      	ands	r3, r2
 8003f9a:	2b80      	cmp	r3, #128	; 0x80
 8003f9c:	d10a      	bne.n	8003fb4 <UART_DMAError+0x3e>
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	2b21      	cmp	r3, #33	; 0x21
 8003fa2:	d107      	bne.n	8003fb4 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	2252      	movs	r2, #82	; 0x52
 8003fa8:	2100      	movs	r1, #0
 8003faa:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	0018      	movs	r0, r3
 8003fb0:	f7ff ff6a 	bl	8003e88 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2240      	movs	r2, #64	; 0x40
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	2b40      	cmp	r3, #64	; 0x40
 8003fc0:	d10a      	bne.n	8003fd8 <UART_DMAError+0x62>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2b22      	cmp	r3, #34	; 0x22
 8003fc6:	d107      	bne.n	8003fd8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	225a      	movs	r2, #90	; 0x5a
 8003fcc:	2100      	movs	r1, #0
 8003fce:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	f7ff ff6c 	bl	8003eb0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fdc:	2210      	movs	r2, #16
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f7ff fc48 	bl	800387c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fec:	46c0      	nop			; (mov r8, r8)
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	b006      	add	sp, #24
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <__errno>:
 8003ff4:	4b01      	ldr	r3, [pc, #4]	; (8003ffc <__errno+0x8>)
 8003ff6:	6818      	ldr	r0, [r3, #0]
 8003ff8:	4770      	bx	lr
 8003ffa:	46c0      	nop			; (mov r8, r8)
 8003ffc:	20000010 	.word	0x20000010

08004000 <__libc_init_array>:
 8004000:	b570      	push	{r4, r5, r6, lr}
 8004002:	2600      	movs	r6, #0
 8004004:	4d0c      	ldr	r5, [pc, #48]	; (8004038 <__libc_init_array+0x38>)
 8004006:	4c0d      	ldr	r4, [pc, #52]	; (800403c <__libc_init_array+0x3c>)
 8004008:	1b64      	subs	r4, r4, r5
 800400a:	10a4      	asrs	r4, r4, #2
 800400c:	42a6      	cmp	r6, r4
 800400e:	d109      	bne.n	8004024 <__libc_init_array+0x24>
 8004010:	2600      	movs	r6, #0
 8004012:	f001 fa61 	bl	80054d8 <_init>
 8004016:	4d0a      	ldr	r5, [pc, #40]	; (8004040 <__libc_init_array+0x40>)
 8004018:	4c0a      	ldr	r4, [pc, #40]	; (8004044 <__libc_init_array+0x44>)
 800401a:	1b64      	subs	r4, r4, r5
 800401c:	10a4      	asrs	r4, r4, #2
 800401e:	42a6      	cmp	r6, r4
 8004020:	d105      	bne.n	800402e <__libc_init_array+0x2e>
 8004022:	bd70      	pop	{r4, r5, r6, pc}
 8004024:	00b3      	lsls	r3, r6, #2
 8004026:	58eb      	ldr	r3, [r5, r3]
 8004028:	4798      	blx	r3
 800402a:	3601      	adds	r6, #1
 800402c:	e7ee      	b.n	800400c <__libc_init_array+0xc>
 800402e:	00b3      	lsls	r3, r6, #2
 8004030:	58eb      	ldr	r3, [r5, r3]
 8004032:	4798      	blx	r3
 8004034:	3601      	adds	r6, #1
 8004036:	e7f2      	b.n	800401e <__libc_init_array+0x1e>
 8004038:	08005bac 	.word	0x08005bac
 800403c:	08005bac 	.word	0x08005bac
 8004040:	08005bac 	.word	0x08005bac
 8004044:	08005bb0 	.word	0x08005bb0

08004048 <memset>:
 8004048:	0003      	movs	r3, r0
 800404a:	1812      	adds	r2, r2, r0
 800404c:	4293      	cmp	r3, r2
 800404e:	d100      	bne.n	8004052 <memset+0xa>
 8004050:	4770      	bx	lr
 8004052:	7019      	strb	r1, [r3, #0]
 8004054:	3301      	adds	r3, #1
 8004056:	e7f9      	b.n	800404c <memset+0x4>

08004058 <iprintf>:
 8004058:	b40f      	push	{r0, r1, r2, r3}
 800405a:	4b0b      	ldr	r3, [pc, #44]	; (8004088 <iprintf+0x30>)
 800405c:	b513      	push	{r0, r1, r4, lr}
 800405e:	681c      	ldr	r4, [r3, #0]
 8004060:	2c00      	cmp	r4, #0
 8004062:	d005      	beq.n	8004070 <iprintf+0x18>
 8004064:	69a3      	ldr	r3, [r4, #24]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d102      	bne.n	8004070 <iprintf+0x18>
 800406a:	0020      	movs	r0, r4
 800406c:	f000 fae4 	bl	8004638 <__sinit>
 8004070:	ab05      	add	r3, sp, #20
 8004072:	9a04      	ldr	r2, [sp, #16]
 8004074:	68a1      	ldr	r1, [r4, #8]
 8004076:	0020      	movs	r0, r4
 8004078:	9301      	str	r3, [sp, #4]
 800407a:	f000 fe37 	bl	8004cec <_vfiprintf_r>
 800407e:	bc16      	pop	{r1, r2, r4}
 8004080:	bc08      	pop	{r3}
 8004082:	b004      	add	sp, #16
 8004084:	4718      	bx	r3
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	20000010 	.word	0x20000010

0800408c <putchar>:
 800408c:	4b08      	ldr	r3, [pc, #32]	; (80040b0 <putchar+0x24>)
 800408e:	b570      	push	{r4, r5, r6, lr}
 8004090:	681c      	ldr	r4, [r3, #0]
 8004092:	0005      	movs	r5, r0
 8004094:	2c00      	cmp	r4, #0
 8004096:	d005      	beq.n	80040a4 <putchar+0x18>
 8004098:	69a3      	ldr	r3, [r4, #24]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d102      	bne.n	80040a4 <putchar+0x18>
 800409e:	0020      	movs	r0, r4
 80040a0:	f000 faca 	bl	8004638 <__sinit>
 80040a4:	0029      	movs	r1, r5
 80040a6:	68a2      	ldr	r2, [r4, #8]
 80040a8:	0020      	movs	r0, r4
 80040aa:	f001 f8ab 	bl	8005204 <_putc_r>
 80040ae:	bd70      	pop	{r4, r5, r6, pc}
 80040b0:	20000010 	.word	0x20000010

080040b4 <_puts_r>:
 80040b4:	b570      	push	{r4, r5, r6, lr}
 80040b6:	0005      	movs	r5, r0
 80040b8:	000e      	movs	r6, r1
 80040ba:	2800      	cmp	r0, #0
 80040bc:	d004      	beq.n	80040c8 <_puts_r+0x14>
 80040be:	6983      	ldr	r3, [r0, #24]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <_puts_r+0x14>
 80040c4:	f000 fab8 	bl	8004638 <__sinit>
 80040c8:	69ab      	ldr	r3, [r5, #24]
 80040ca:	68ac      	ldr	r4, [r5, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d102      	bne.n	80040d6 <_puts_r+0x22>
 80040d0:	0028      	movs	r0, r5
 80040d2:	f000 fab1 	bl	8004638 <__sinit>
 80040d6:	4b24      	ldr	r3, [pc, #144]	; (8004168 <_puts_r+0xb4>)
 80040d8:	429c      	cmp	r4, r3
 80040da:	d10f      	bne.n	80040fc <_puts_r+0x48>
 80040dc:	686c      	ldr	r4, [r5, #4]
 80040de:	89a3      	ldrh	r3, [r4, #12]
 80040e0:	071b      	lsls	r3, r3, #28
 80040e2:	d502      	bpl.n	80040ea <_puts_r+0x36>
 80040e4:	6923      	ldr	r3, [r4, #16]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d11f      	bne.n	800412a <_puts_r+0x76>
 80040ea:	0021      	movs	r1, r4
 80040ec:	0028      	movs	r0, r5
 80040ee:	f000 f935 	bl	800435c <__swsetup_r>
 80040f2:	2800      	cmp	r0, #0
 80040f4:	d019      	beq.n	800412a <_puts_r+0x76>
 80040f6:	2001      	movs	r0, #1
 80040f8:	4240      	negs	r0, r0
 80040fa:	bd70      	pop	{r4, r5, r6, pc}
 80040fc:	4b1b      	ldr	r3, [pc, #108]	; (800416c <_puts_r+0xb8>)
 80040fe:	429c      	cmp	r4, r3
 8004100:	d101      	bne.n	8004106 <_puts_r+0x52>
 8004102:	68ac      	ldr	r4, [r5, #8]
 8004104:	e7eb      	b.n	80040de <_puts_r+0x2a>
 8004106:	4b1a      	ldr	r3, [pc, #104]	; (8004170 <_puts_r+0xbc>)
 8004108:	429c      	cmp	r4, r3
 800410a:	d1e8      	bne.n	80040de <_puts_r+0x2a>
 800410c:	68ec      	ldr	r4, [r5, #12]
 800410e:	e7e6      	b.n	80040de <_puts_r+0x2a>
 8004110:	3601      	adds	r6, #1
 8004112:	60a3      	str	r3, [r4, #8]
 8004114:	2b00      	cmp	r3, #0
 8004116:	da04      	bge.n	8004122 <_puts_r+0x6e>
 8004118:	69a2      	ldr	r2, [r4, #24]
 800411a:	429a      	cmp	r2, r3
 800411c:	dc16      	bgt.n	800414c <_puts_r+0x98>
 800411e:	290a      	cmp	r1, #10
 8004120:	d014      	beq.n	800414c <_puts_r+0x98>
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	6022      	str	r2, [r4, #0]
 8004128:	7019      	strb	r1, [r3, #0]
 800412a:	68a3      	ldr	r3, [r4, #8]
 800412c:	7831      	ldrb	r1, [r6, #0]
 800412e:	3b01      	subs	r3, #1
 8004130:	2900      	cmp	r1, #0
 8004132:	d1ed      	bne.n	8004110 <_puts_r+0x5c>
 8004134:	60a3      	str	r3, [r4, #8]
 8004136:	2b00      	cmp	r3, #0
 8004138:	da0f      	bge.n	800415a <_puts_r+0xa6>
 800413a:	0022      	movs	r2, r4
 800413c:	310a      	adds	r1, #10
 800413e:	0028      	movs	r0, r5
 8004140:	f000 f8b6 	bl	80042b0 <__swbuf_r>
 8004144:	1c43      	adds	r3, r0, #1
 8004146:	d0d6      	beq.n	80040f6 <_puts_r+0x42>
 8004148:	200a      	movs	r0, #10
 800414a:	e7d6      	b.n	80040fa <_puts_r+0x46>
 800414c:	0022      	movs	r2, r4
 800414e:	0028      	movs	r0, r5
 8004150:	f000 f8ae 	bl	80042b0 <__swbuf_r>
 8004154:	1c43      	adds	r3, r0, #1
 8004156:	d1e8      	bne.n	800412a <_puts_r+0x76>
 8004158:	e7cd      	b.n	80040f6 <_puts_r+0x42>
 800415a:	200a      	movs	r0, #10
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	1c5a      	adds	r2, r3, #1
 8004160:	6022      	str	r2, [r4, #0]
 8004162:	7018      	strb	r0, [r3, #0]
 8004164:	e7c9      	b.n	80040fa <_puts_r+0x46>
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	08005a2c 	.word	0x08005a2c
 800416c:	08005a4c 	.word	0x08005a4c
 8004170:	08005a0c 	.word	0x08005a0c

08004174 <puts>:
 8004174:	b510      	push	{r4, lr}
 8004176:	4b03      	ldr	r3, [pc, #12]	; (8004184 <puts+0x10>)
 8004178:	0001      	movs	r1, r0
 800417a:	6818      	ldr	r0, [r3, #0]
 800417c:	f7ff ff9a 	bl	80040b4 <_puts_r>
 8004180:	bd10      	pop	{r4, pc}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	20000010 	.word	0x20000010

08004188 <siprintf>:
 8004188:	b40e      	push	{r1, r2, r3}
 800418a:	b500      	push	{lr}
 800418c:	490b      	ldr	r1, [pc, #44]	; (80041bc <siprintf+0x34>)
 800418e:	b09c      	sub	sp, #112	; 0x70
 8004190:	ab1d      	add	r3, sp, #116	; 0x74
 8004192:	9002      	str	r0, [sp, #8]
 8004194:	9006      	str	r0, [sp, #24]
 8004196:	9107      	str	r1, [sp, #28]
 8004198:	9104      	str	r1, [sp, #16]
 800419a:	4809      	ldr	r0, [pc, #36]	; (80041c0 <siprintf+0x38>)
 800419c:	4909      	ldr	r1, [pc, #36]	; (80041c4 <siprintf+0x3c>)
 800419e:	cb04      	ldmia	r3!, {r2}
 80041a0:	9105      	str	r1, [sp, #20]
 80041a2:	6800      	ldr	r0, [r0, #0]
 80041a4:	a902      	add	r1, sp, #8
 80041a6:	9301      	str	r3, [sp, #4]
 80041a8:	f000 fc7a 	bl	8004aa0 <_svfiprintf_r>
 80041ac:	2300      	movs	r3, #0
 80041ae:	9a02      	ldr	r2, [sp, #8]
 80041b0:	7013      	strb	r3, [r2, #0]
 80041b2:	b01c      	add	sp, #112	; 0x70
 80041b4:	bc08      	pop	{r3}
 80041b6:	b003      	add	sp, #12
 80041b8:	4718      	bx	r3
 80041ba:	46c0      	nop			; (mov r8, r8)
 80041bc:	7fffffff 	.word	0x7fffffff
 80041c0:	20000010 	.word	0x20000010
 80041c4:	ffff0208 	.word	0xffff0208

080041c8 <strcasecmp>:
 80041c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ca:	0007      	movs	r7, r0
 80041cc:	000e      	movs	r6, r1
 80041ce:	783c      	ldrb	r4, [r7, #0]
 80041d0:	f000 fac6 	bl	8004760 <__locale_ctype_ptr>
 80041d4:	2203      	movs	r2, #3
 80041d6:	1900      	adds	r0, r0, r4
 80041d8:	7843      	ldrb	r3, [r0, #1]
 80041da:	4013      	ands	r3, r2
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d100      	bne.n	80041e2 <strcasecmp+0x1a>
 80041e0:	3420      	adds	r4, #32
 80041e2:	7835      	ldrb	r5, [r6, #0]
 80041e4:	f000 fabc 	bl	8004760 <__locale_ctype_ptr>
 80041e8:	2203      	movs	r2, #3
 80041ea:	1940      	adds	r0, r0, r5
 80041ec:	7843      	ldrb	r3, [r0, #1]
 80041ee:	4013      	ands	r3, r2
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d100      	bne.n	80041f6 <strcasecmp+0x2e>
 80041f4:	3520      	adds	r5, #32
 80041f6:	1b60      	subs	r0, r4, r5
 80041f8:	d103      	bne.n	8004202 <strcasecmp+0x3a>
 80041fa:	3701      	adds	r7, #1
 80041fc:	3601      	adds	r6, #1
 80041fe:	2d00      	cmp	r5, #0
 8004200:	d1e5      	bne.n	80041ce <strcasecmp+0x6>
 8004202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004204 <strtok>:
 8004204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004206:	4b12      	ldr	r3, [pc, #72]	; (8004250 <strtok+0x4c>)
 8004208:	0006      	movs	r6, r0
 800420a:	681d      	ldr	r5, [r3, #0]
 800420c:	000f      	movs	r7, r1
 800420e:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8004210:	2c00      	cmp	r4, #0
 8004212:	d116      	bne.n	8004242 <strtok+0x3e>
 8004214:	2050      	movs	r0, #80	; 0x50
 8004216:	f000 fb1d 	bl	8004854 <malloc>
 800421a:	65a8      	str	r0, [r5, #88]	; 0x58
 800421c:	6004      	str	r4, [r0, #0]
 800421e:	6044      	str	r4, [r0, #4]
 8004220:	6084      	str	r4, [r0, #8]
 8004222:	60c4      	str	r4, [r0, #12]
 8004224:	6104      	str	r4, [r0, #16]
 8004226:	6144      	str	r4, [r0, #20]
 8004228:	6184      	str	r4, [r0, #24]
 800422a:	6284      	str	r4, [r0, #40]	; 0x28
 800422c:	62c4      	str	r4, [r0, #44]	; 0x2c
 800422e:	6304      	str	r4, [r0, #48]	; 0x30
 8004230:	6344      	str	r4, [r0, #52]	; 0x34
 8004232:	6384      	str	r4, [r0, #56]	; 0x38
 8004234:	63c4      	str	r4, [r0, #60]	; 0x3c
 8004236:	6404      	str	r4, [r0, #64]	; 0x40
 8004238:	6444      	str	r4, [r0, #68]	; 0x44
 800423a:	6484      	str	r4, [r0, #72]	; 0x48
 800423c:	64c4      	str	r4, [r0, #76]	; 0x4c
 800423e:	7704      	strb	r4, [r0, #28]
 8004240:	6244      	str	r4, [r0, #36]	; 0x24
 8004242:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8004244:	0039      	movs	r1, r7
 8004246:	0030      	movs	r0, r6
 8004248:	2301      	movs	r3, #1
 800424a:	f000 f803 	bl	8004254 <__strtok_r>
 800424e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004250:	20000010 	.word	0x20000010

08004254 <__strtok_r>:
 8004254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004256:	2800      	cmp	r0, #0
 8004258:	d104      	bne.n	8004264 <__strtok_r+0x10>
 800425a:	6810      	ldr	r0, [r2, #0]
 800425c:	2800      	cmp	r0, #0
 800425e:	d101      	bne.n	8004264 <__strtok_r+0x10>
 8004260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004262:	0020      	movs	r0, r4
 8004264:	000e      	movs	r6, r1
 8004266:	7805      	ldrb	r5, [r0, #0]
 8004268:	1c44      	adds	r4, r0, #1
 800426a:	7837      	ldrb	r7, [r6, #0]
 800426c:	2f00      	cmp	r7, #0
 800426e:	d104      	bne.n	800427a <__strtok_r+0x26>
 8004270:	2d00      	cmp	r5, #0
 8004272:	d110      	bne.n	8004296 <__strtok_r+0x42>
 8004274:	6015      	str	r5, [r2, #0]
 8004276:	0028      	movs	r0, r5
 8004278:	e7f2      	b.n	8004260 <__strtok_r+0xc>
 800427a:	3601      	adds	r6, #1
 800427c:	42bd      	cmp	r5, r7
 800427e:	d1f4      	bne.n	800426a <__strtok_r+0x16>
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1ee      	bne.n	8004262 <__strtok_r+0xe>
 8004284:	6014      	str	r4, [r2, #0]
 8004286:	7003      	strb	r3, [r0, #0]
 8004288:	e7ea      	b.n	8004260 <__strtok_r+0xc>
 800428a:	0033      	movs	r3, r6
 800428c:	e00d      	b.n	80042aa <__strtok_r+0x56>
 800428e:	3501      	adds	r5, #1
 8004290:	2f00      	cmp	r7, #0
 8004292:	d103      	bne.n	800429c <__strtok_r+0x48>
 8004294:	001c      	movs	r4, r3
 8004296:	000d      	movs	r5, r1
 8004298:	7826      	ldrb	r6, [r4, #0]
 800429a:	1c63      	adds	r3, r4, #1
 800429c:	782f      	ldrb	r7, [r5, #0]
 800429e:	42be      	cmp	r6, r7
 80042a0:	d1f5      	bne.n	800428e <__strtok_r+0x3a>
 80042a2:	2e00      	cmp	r6, #0
 80042a4:	d0f1      	beq.n	800428a <__strtok_r+0x36>
 80042a6:	2100      	movs	r1, #0
 80042a8:	7021      	strb	r1, [r4, #0]
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	e7d8      	b.n	8004260 <__strtok_r+0xc>
	...

080042b0 <__swbuf_r>:
 80042b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b2:	0005      	movs	r5, r0
 80042b4:	000e      	movs	r6, r1
 80042b6:	0014      	movs	r4, r2
 80042b8:	2800      	cmp	r0, #0
 80042ba:	d004      	beq.n	80042c6 <__swbuf_r+0x16>
 80042bc:	6983      	ldr	r3, [r0, #24]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <__swbuf_r+0x16>
 80042c2:	f000 f9b9 	bl	8004638 <__sinit>
 80042c6:	4b22      	ldr	r3, [pc, #136]	; (8004350 <__swbuf_r+0xa0>)
 80042c8:	429c      	cmp	r4, r3
 80042ca:	d12d      	bne.n	8004328 <__swbuf_r+0x78>
 80042cc:	686c      	ldr	r4, [r5, #4]
 80042ce:	69a3      	ldr	r3, [r4, #24]
 80042d0:	60a3      	str	r3, [r4, #8]
 80042d2:	89a3      	ldrh	r3, [r4, #12]
 80042d4:	071b      	lsls	r3, r3, #28
 80042d6:	d531      	bpl.n	800433c <__swbuf_r+0x8c>
 80042d8:	6923      	ldr	r3, [r4, #16]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d02e      	beq.n	800433c <__swbuf_r+0x8c>
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	6922      	ldr	r2, [r4, #16]
 80042e2:	b2f7      	uxtb	r7, r6
 80042e4:	1a98      	subs	r0, r3, r2
 80042e6:	6963      	ldr	r3, [r4, #20]
 80042e8:	b2f6      	uxtb	r6, r6
 80042ea:	4283      	cmp	r3, r0
 80042ec:	dc05      	bgt.n	80042fa <__swbuf_r+0x4a>
 80042ee:	0021      	movs	r1, r4
 80042f0:	0028      	movs	r0, r5
 80042f2:	f000 f933 	bl	800455c <_fflush_r>
 80042f6:	2800      	cmp	r0, #0
 80042f8:	d126      	bne.n	8004348 <__swbuf_r+0x98>
 80042fa:	68a3      	ldr	r3, [r4, #8]
 80042fc:	3001      	adds	r0, #1
 80042fe:	3b01      	subs	r3, #1
 8004300:	60a3      	str	r3, [r4, #8]
 8004302:	6823      	ldr	r3, [r4, #0]
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	6022      	str	r2, [r4, #0]
 8004308:	701f      	strb	r7, [r3, #0]
 800430a:	6963      	ldr	r3, [r4, #20]
 800430c:	4283      	cmp	r3, r0
 800430e:	d004      	beq.n	800431a <__swbuf_r+0x6a>
 8004310:	89a3      	ldrh	r3, [r4, #12]
 8004312:	07db      	lsls	r3, r3, #31
 8004314:	d51a      	bpl.n	800434c <__swbuf_r+0x9c>
 8004316:	2e0a      	cmp	r6, #10
 8004318:	d118      	bne.n	800434c <__swbuf_r+0x9c>
 800431a:	0021      	movs	r1, r4
 800431c:	0028      	movs	r0, r5
 800431e:	f000 f91d 	bl	800455c <_fflush_r>
 8004322:	2800      	cmp	r0, #0
 8004324:	d012      	beq.n	800434c <__swbuf_r+0x9c>
 8004326:	e00f      	b.n	8004348 <__swbuf_r+0x98>
 8004328:	4b0a      	ldr	r3, [pc, #40]	; (8004354 <__swbuf_r+0xa4>)
 800432a:	429c      	cmp	r4, r3
 800432c:	d101      	bne.n	8004332 <__swbuf_r+0x82>
 800432e:	68ac      	ldr	r4, [r5, #8]
 8004330:	e7cd      	b.n	80042ce <__swbuf_r+0x1e>
 8004332:	4b09      	ldr	r3, [pc, #36]	; (8004358 <__swbuf_r+0xa8>)
 8004334:	429c      	cmp	r4, r3
 8004336:	d1ca      	bne.n	80042ce <__swbuf_r+0x1e>
 8004338:	68ec      	ldr	r4, [r5, #12]
 800433a:	e7c8      	b.n	80042ce <__swbuf_r+0x1e>
 800433c:	0021      	movs	r1, r4
 800433e:	0028      	movs	r0, r5
 8004340:	f000 f80c 	bl	800435c <__swsetup_r>
 8004344:	2800      	cmp	r0, #0
 8004346:	d0ca      	beq.n	80042de <__swbuf_r+0x2e>
 8004348:	2601      	movs	r6, #1
 800434a:	4276      	negs	r6, r6
 800434c:	0030      	movs	r0, r6
 800434e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004350:	08005a2c 	.word	0x08005a2c
 8004354:	08005a4c 	.word	0x08005a4c
 8004358:	08005a0c 	.word	0x08005a0c

0800435c <__swsetup_r>:
 800435c:	4b36      	ldr	r3, [pc, #216]	; (8004438 <__swsetup_r+0xdc>)
 800435e:	b570      	push	{r4, r5, r6, lr}
 8004360:	681d      	ldr	r5, [r3, #0]
 8004362:	0006      	movs	r6, r0
 8004364:	000c      	movs	r4, r1
 8004366:	2d00      	cmp	r5, #0
 8004368:	d005      	beq.n	8004376 <__swsetup_r+0x1a>
 800436a:	69ab      	ldr	r3, [r5, #24]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d102      	bne.n	8004376 <__swsetup_r+0x1a>
 8004370:	0028      	movs	r0, r5
 8004372:	f000 f961 	bl	8004638 <__sinit>
 8004376:	4b31      	ldr	r3, [pc, #196]	; (800443c <__swsetup_r+0xe0>)
 8004378:	429c      	cmp	r4, r3
 800437a:	d10f      	bne.n	800439c <__swsetup_r+0x40>
 800437c:	686c      	ldr	r4, [r5, #4]
 800437e:	230c      	movs	r3, #12
 8004380:	5ee2      	ldrsh	r2, [r4, r3]
 8004382:	b293      	uxth	r3, r2
 8004384:	0719      	lsls	r1, r3, #28
 8004386:	d42d      	bmi.n	80043e4 <__swsetup_r+0x88>
 8004388:	06d9      	lsls	r1, r3, #27
 800438a:	d411      	bmi.n	80043b0 <__swsetup_r+0x54>
 800438c:	2309      	movs	r3, #9
 800438e:	2001      	movs	r0, #1
 8004390:	6033      	str	r3, [r6, #0]
 8004392:	3337      	adds	r3, #55	; 0x37
 8004394:	4313      	orrs	r3, r2
 8004396:	81a3      	strh	r3, [r4, #12]
 8004398:	4240      	negs	r0, r0
 800439a:	bd70      	pop	{r4, r5, r6, pc}
 800439c:	4b28      	ldr	r3, [pc, #160]	; (8004440 <__swsetup_r+0xe4>)
 800439e:	429c      	cmp	r4, r3
 80043a0:	d101      	bne.n	80043a6 <__swsetup_r+0x4a>
 80043a2:	68ac      	ldr	r4, [r5, #8]
 80043a4:	e7eb      	b.n	800437e <__swsetup_r+0x22>
 80043a6:	4b27      	ldr	r3, [pc, #156]	; (8004444 <__swsetup_r+0xe8>)
 80043a8:	429c      	cmp	r4, r3
 80043aa:	d1e8      	bne.n	800437e <__swsetup_r+0x22>
 80043ac:	68ec      	ldr	r4, [r5, #12]
 80043ae:	e7e6      	b.n	800437e <__swsetup_r+0x22>
 80043b0:	075b      	lsls	r3, r3, #29
 80043b2:	d513      	bpl.n	80043dc <__swsetup_r+0x80>
 80043b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043b6:	2900      	cmp	r1, #0
 80043b8:	d008      	beq.n	80043cc <__swsetup_r+0x70>
 80043ba:	0023      	movs	r3, r4
 80043bc:	3344      	adds	r3, #68	; 0x44
 80043be:	4299      	cmp	r1, r3
 80043c0:	d002      	beq.n	80043c8 <__swsetup_r+0x6c>
 80043c2:	0030      	movs	r0, r6
 80043c4:	f000 fa62 	bl	800488c <_free_r>
 80043c8:	2300      	movs	r3, #0
 80043ca:	6363      	str	r3, [r4, #52]	; 0x34
 80043cc:	2224      	movs	r2, #36	; 0x24
 80043ce:	89a3      	ldrh	r3, [r4, #12]
 80043d0:	4393      	bics	r3, r2
 80043d2:	81a3      	strh	r3, [r4, #12]
 80043d4:	2300      	movs	r3, #0
 80043d6:	6063      	str	r3, [r4, #4]
 80043d8:	6923      	ldr	r3, [r4, #16]
 80043da:	6023      	str	r3, [r4, #0]
 80043dc:	2308      	movs	r3, #8
 80043de:	89a2      	ldrh	r2, [r4, #12]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	81a3      	strh	r3, [r4, #12]
 80043e4:	6923      	ldr	r3, [r4, #16]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10b      	bne.n	8004402 <__swsetup_r+0xa6>
 80043ea:	21a0      	movs	r1, #160	; 0xa0
 80043ec:	2280      	movs	r2, #128	; 0x80
 80043ee:	89a3      	ldrh	r3, [r4, #12]
 80043f0:	0089      	lsls	r1, r1, #2
 80043f2:	0092      	lsls	r2, r2, #2
 80043f4:	400b      	ands	r3, r1
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d003      	beq.n	8004402 <__swsetup_r+0xa6>
 80043fa:	0021      	movs	r1, r4
 80043fc:	0030      	movs	r0, r6
 80043fe:	f000 f9e5 	bl	80047cc <__smakebuf_r>
 8004402:	2301      	movs	r3, #1
 8004404:	89a2      	ldrh	r2, [r4, #12]
 8004406:	4013      	ands	r3, r2
 8004408:	d011      	beq.n	800442e <__swsetup_r+0xd2>
 800440a:	2300      	movs	r3, #0
 800440c:	60a3      	str	r3, [r4, #8]
 800440e:	6963      	ldr	r3, [r4, #20]
 8004410:	425b      	negs	r3, r3
 8004412:	61a3      	str	r3, [r4, #24]
 8004414:	2000      	movs	r0, #0
 8004416:	6923      	ldr	r3, [r4, #16]
 8004418:	4283      	cmp	r3, r0
 800441a:	d1be      	bne.n	800439a <__swsetup_r+0x3e>
 800441c:	230c      	movs	r3, #12
 800441e:	5ee2      	ldrsh	r2, [r4, r3]
 8004420:	0613      	lsls	r3, r2, #24
 8004422:	d5ba      	bpl.n	800439a <__swsetup_r+0x3e>
 8004424:	2340      	movs	r3, #64	; 0x40
 8004426:	4313      	orrs	r3, r2
 8004428:	81a3      	strh	r3, [r4, #12]
 800442a:	3801      	subs	r0, #1
 800442c:	e7b5      	b.n	800439a <__swsetup_r+0x3e>
 800442e:	0792      	lsls	r2, r2, #30
 8004430:	d400      	bmi.n	8004434 <__swsetup_r+0xd8>
 8004432:	6963      	ldr	r3, [r4, #20]
 8004434:	60a3      	str	r3, [r4, #8]
 8004436:	e7ed      	b.n	8004414 <__swsetup_r+0xb8>
 8004438:	20000010 	.word	0x20000010
 800443c:	08005a2c 	.word	0x08005a2c
 8004440:	08005a4c 	.word	0x08005a4c
 8004444:	08005a0c 	.word	0x08005a0c

08004448 <__sflush_r>:
 8004448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800444a:	898a      	ldrh	r2, [r1, #12]
 800444c:	0005      	movs	r5, r0
 800444e:	000c      	movs	r4, r1
 8004450:	0713      	lsls	r3, r2, #28
 8004452:	d460      	bmi.n	8004516 <__sflush_r+0xce>
 8004454:	684b      	ldr	r3, [r1, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	dc04      	bgt.n	8004464 <__sflush_r+0x1c>
 800445a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800445c:	2b00      	cmp	r3, #0
 800445e:	dc01      	bgt.n	8004464 <__sflush_r+0x1c>
 8004460:	2000      	movs	r0, #0
 8004462:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004464:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004466:	2f00      	cmp	r7, #0
 8004468:	d0fa      	beq.n	8004460 <__sflush_r+0x18>
 800446a:	2300      	movs	r3, #0
 800446c:	682e      	ldr	r6, [r5, #0]
 800446e:	602b      	str	r3, [r5, #0]
 8004470:	2380      	movs	r3, #128	; 0x80
 8004472:	015b      	lsls	r3, r3, #5
 8004474:	6a21      	ldr	r1, [r4, #32]
 8004476:	401a      	ands	r2, r3
 8004478:	d034      	beq.n	80044e4 <__sflush_r+0x9c>
 800447a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800447c:	89a3      	ldrh	r3, [r4, #12]
 800447e:	075b      	lsls	r3, r3, #29
 8004480:	d506      	bpl.n	8004490 <__sflush_r+0x48>
 8004482:	6863      	ldr	r3, [r4, #4]
 8004484:	1ac0      	subs	r0, r0, r3
 8004486:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <__sflush_r+0x48>
 800448c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800448e:	1ac0      	subs	r0, r0, r3
 8004490:	0002      	movs	r2, r0
 8004492:	6a21      	ldr	r1, [r4, #32]
 8004494:	2300      	movs	r3, #0
 8004496:	0028      	movs	r0, r5
 8004498:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800449a:	47b8      	blx	r7
 800449c:	89a1      	ldrh	r1, [r4, #12]
 800449e:	1c43      	adds	r3, r0, #1
 80044a0:	d106      	bne.n	80044b0 <__sflush_r+0x68>
 80044a2:	682b      	ldr	r3, [r5, #0]
 80044a4:	2b1d      	cmp	r3, #29
 80044a6:	d830      	bhi.n	800450a <__sflush_r+0xc2>
 80044a8:	4a2b      	ldr	r2, [pc, #172]	; (8004558 <__sflush_r+0x110>)
 80044aa:	40da      	lsrs	r2, r3
 80044ac:	07d3      	lsls	r3, r2, #31
 80044ae:	d52c      	bpl.n	800450a <__sflush_r+0xc2>
 80044b0:	2300      	movs	r3, #0
 80044b2:	6063      	str	r3, [r4, #4]
 80044b4:	6923      	ldr	r3, [r4, #16]
 80044b6:	6023      	str	r3, [r4, #0]
 80044b8:	04cb      	lsls	r3, r1, #19
 80044ba:	d505      	bpl.n	80044c8 <__sflush_r+0x80>
 80044bc:	1c43      	adds	r3, r0, #1
 80044be:	d102      	bne.n	80044c6 <__sflush_r+0x7e>
 80044c0:	682b      	ldr	r3, [r5, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d100      	bne.n	80044c8 <__sflush_r+0x80>
 80044c6:	6560      	str	r0, [r4, #84]	; 0x54
 80044c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044ca:	602e      	str	r6, [r5, #0]
 80044cc:	2900      	cmp	r1, #0
 80044ce:	d0c7      	beq.n	8004460 <__sflush_r+0x18>
 80044d0:	0023      	movs	r3, r4
 80044d2:	3344      	adds	r3, #68	; 0x44
 80044d4:	4299      	cmp	r1, r3
 80044d6:	d002      	beq.n	80044de <__sflush_r+0x96>
 80044d8:	0028      	movs	r0, r5
 80044da:	f000 f9d7 	bl	800488c <_free_r>
 80044de:	2000      	movs	r0, #0
 80044e0:	6360      	str	r0, [r4, #52]	; 0x34
 80044e2:	e7be      	b.n	8004462 <__sflush_r+0x1a>
 80044e4:	2301      	movs	r3, #1
 80044e6:	0028      	movs	r0, r5
 80044e8:	47b8      	blx	r7
 80044ea:	1c43      	adds	r3, r0, #1
 80044ec:	d1c6      	bne.n	800447c <__sflush_r+0x34>
 80044ee:	682b      	ldr	r3, [r5, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0c3      	beq.n	800447c <__sflush_r+0x34>
 80044f4:	2b1d      	cmp	r3, #29
 80044f6:	d001      	beq.n	80044fc <__sflush_r+0xb4>
 80044f8:	2b16      	cmp	r3, #22
 80044fa:	d101      	bne.n	8004500 <__sflush_r+0xb8>
 80044fc:	602e      	str	r6, [r5, #0]
 80044fe:	e7af      	b.n	8004460 <__sflush_r+0x18>
 8004500:	2340      	movs	r3, #64	; 0x40
 8004502:	89a2      	ldrh	r2, [r4, #12]
 8004504:	4313      	orrs	r3, r2
 8004506:	81a3      	strh	r3, [r4, #12]
 8004508:	e7ab      	b.n	8004462 <__sflush_r+0x1a>
 800450a:	2340      	movs	r3, #64	; 0x40
 800450c:	430b      	orrs	r3, r1
 800450e:	2001      	movs	r0, #1
 8004510:	81a3      	strh	r3, [r4, #12]
 8004512:	4240      	negs	r0, r0
 8004514:	e7a5      	b.n	8004462 <__sflush_r+0x1a>
 8004516:	690f      	ldr	r7, [r1, #16]
 8004518:	2f00      	cmp	r7, #0
 800451a:	d0a1      	beq.n	8004460 <__sflush_r+0x18>
 800451c:	680b      	ldr	r3, [r1, #0]
 800451e:	600f      	str	r7, [r1, #0]
 8004520:	1bdb      	subs	r3, r3, r7
 8004522:	9301      	str	r3, [sp, #4]
 8004524:	2300      	movs	r3, #0
 8004526:	0792      	lsls	r2, r2, #30
 8004528:	d100      	bne.n	800452c <__sflush_r+0xe4>
 800452a:	694b      	ldr	r3, [r1, #20]
 800452c:	60a3      	str	r3, [r4, #8]
 800452e:	9b01      	ldr	r3, [sp, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	dc00      	bgt.n	8004536 <__sflush_r+0xee>
 8004534:	e794      	b.n	8004460 <__sflush_r+0x18>
 8004536:	9b01      	ldr	r3, [sp, #4]
 8004538:	003a      	movs	r2, r7
 800453a:	6a21      	ldr	r1, [r4, #32]
 800453c:	0028      	movs	r0, r5
 800453e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004540:	47b0      	blx	r6
 8004542:	2800      	cmp	r0, #0
 8004544:	dc03      	bgt.n	800454e <__sflush_r+0x106>
 8004546:	2340      	movs	r3, #64	; 0x40
 8004548:	89a2      	ldrh	r2, [r4, #12]
 800454a:	4313      	orrs	r3, r2
 800454c:	e7df      	b.n	800450e <__sflush_r+0xc6>
 800454e:	9b01      	ldr	r3, [sp, #4]
 8004550:	183f      	adds	r7, r7, r0
 8004552:	1a1b      	subs	r3, r3, r0
 8004554:	9301      	str	r3, [sp, #4]
 8004556:	e7ea      	b.n	800452e <__sflush_r+0xe6>
 8004558:	20400001 	.word	0x20400001

0800455c <_fflush_r>:
 800455c:	690b      	ldr	r3, [r1, #16]
 800455e:	b570      	push	{r4, r5, r6, lr}
 8004560:	0005      	movs	r5, r0
 8004562:	000c      	movs	r4, r1
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <_fflush_r+0x10>
 8004568:	2000      	movs	r0, #0
 800456a:	bd70      	pop	{r4, r5, r6, pc}
 800456c:	2800      	cmp	r0, #0
 800456e:	d004      	beq.n	800457a <_fflush_r+0x1e>
 8004570:	6983      	ldr	r3, [r0, #24]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <_fflush_r+0x1e>
 8004576:	f000 f85f 	bl	8004638 <__sinit>
 800457a:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <_fflush_r+0x4c>)
 800457c:	429c      	cmp	r4, r3
 800457e:	d109      	bne.n	8004594 <_fflush_r+0x38>
 8004580:	686c      	ldr	r4, [r5, #4]
 8004582:	220c      	movs	r2, #12
 8004584:	5ea3      	ldrsh	r3, [r4, r2]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0ee      	beq.n	8004568 <_fflush_r+0xc>
 800458a:	0021      	movs	r1, r4
 800458c:	0028      	movs	r0, r5
 800458e:	f7ff ff5b 	bl	8004448 <__sflush_r>
 8004592:	e7ea      	b.n	800456a <_fflush_r+0xe>
 8004594:	4b05      	ldr	r3, [pc, #20]	; (80045ac <_fflush_r+0x50>)
 8004596:	429c      	cmp	r4, r3
 8004598:	d101      	bne.n	800459e <_fflush_r+0x42>
 800459a:	68ac      	ldr	r4, [r5, #8]
 800459c:	e7f1      	b.n	8004582 <_fflush_r+0x26>
 800459e:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <_fflush_r+0x54>)
 80045a0:	429c      	cmp	r4, r3
 80045a2:	d1ee      	bne.n	8004582 <_fflush_r+0x26>
 80045a4:	68ec      	ldr	r4, [r5, #12]
 80045a6:	e7ec      	b.n	8004582 <_fflush_r+0x26>
 80045a8:	08005a2c 	.word	0x08005a2c
 80045ac:	08005a4c 	.word	0x08005a4c
 80045b0:	08005a0c 	.word	0x08005a0c

080045b4 <std>:
 80045b4:	2300      	movs	r3, #0
 80045b6:	b510      	push	{r4, lr}
 80045b8:	0004      	movs	r4, r0
 80045ba:	6003      	str	r3, [r0, #0]
 80045bc:	6043      	str	r3, [r0, #4]
 80045be:	6083      	str	r3, [r0, #8]
 80045c0:	8181      	strh	r1, [r0, #12]
 80045c2:	6643      	str	r3, [r0, #100]	; 0x64
 80045c4:	81c2      	strh	r2, [r0, #14]
 80045c6:	6103      	str	r3, [r0, #16]
 80045c8:	6143      	str	r3, [r0, #20]
 80045ca:	6183      	str	r3, [r0, #24]
 80045cc:	0019      	movs	r1, r3
 80045ce:	2208      	movs	r2, #8
 80045d0:	305c      	adds	r0, #92	; 0x5c
 80045d2:	f7ff fd39 	bl	8004048 <memset>
 80045d6:	4b05      	ldr	r3, [pc, #20]	; (80045ec <std+0x38>)
 80045d8:	6224      	str	r4, [r4, #32]
 80045da:	6263      	str	r3, [r4, #36]	; 0x24
 80045dc:	4b04      	ldr	r3, [pc, #16]	; (80045f0 <std+0x3c>)
 80045de:	62a3      	str	r3, [r4, #40]	; 0x28
 80045e0:	4b04      	ldr	r3, [pc, #16]	; (80045f4 <std+0x40>)
 80045e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80045e4:	4b04      	ldr	r3, [pc, #16]	; (80045f8 <std+0x44>)
 80045e6:	6323      	str	r3, [r4, #48]	; 0x30
 80045e8:	bd10      	pop	{r4, pc}
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	08005295 	.word	0x08005295
 80045f0:	080052bd 	.word	0x080052bd
 80045f4:	080052f5 	.word	0x080052f5
 80045f8:	08005321 	.word	0x08005321

080045fc <_cleanup_r>:
 80045fc:	b510      	push	{r4, lr}
 80045fe:	4902      	ldr	r1, [pc, #8]	; (8004608 <_cleanup_r+0xc>)
 8004600:	f000 f88c 	bl	800471c <_fwalk_reent>
 8004604:	bd10      	pop	{r4, pc}
 8004606:	46c0      	nop			; (mov r8, r8)
 8004608:	0800455d 	.word	0x0800455d

0800460c <__sfmoreglue>:
 800460c:	b570      	push	{r4, r5, r6, lr}
 800460e:	2568      	movs	r5, #104	; 0x68
 8004610:	1e4a      	subs	r2, r1, #1
 8004612:	4355      	muls	r5, r2
 8004614:	000e      	movs	r6, r1
 8004616:	0029      	movs	r1, r5
 8004618:	3174      	adds	r1, #116	; 0x74
 800461a:	f000 f981 	bl	8004920 <_malloc_r>
 800461e:	1e04      	subs	r4, r0, #0
 8004620:	d008      	beq.n	8004634 <__sfmoreglue+0x28>
 8004622:	2100      	movs	r1, #0
 8004624:	002a      	movs	r2, r5
 8004626:	6001      	str	r1, [r0, #0]
 8004628:	6046      	str	r6, [r0, #4]
 800462a:	300c      	adds	r0, #12
 800462c:	60a0      	str	r0, [r4, #8]
 800462e:	3268      	adds	r2, #104	; 0x68
 8004630:	f7ff fd0a 	bl	8004048 <memset>
 8004634:	0020      	movs	r0, r4
 8004636:	bd70      	pop	{r4, r5, r6, pc}

08004638 <__sinit>:
 8004638:	6983      	ldr	r3, [r0, #24]
 800463a:	b513      	push	{r0, r1, r4, lr}
 800463c:	0004      	movs	r4, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d128      	bne.n	8004694 <__sinit+0x5c>
 8004642:	6483      	str	r3, [r0, #72]	; 0x48
 8004644:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004646:	6503      	str	r3, [r0, #80]	; 0x50
 8004648:	4b13      	ldr	r3, [pc, #76]	; (8004698 <__sinit+0x60>)
 800464a:	4a14      	ldr	r2, [pc, #80]	; (800469c <__sinit+0x64>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6282      	str	r2, [r0, #40]	; 0x28
 8004650:	9301      	str	r3, [sp, #4]
 8004652:	4298      	cmp	r0, r3
 8004654:	d101      	bne.n	800465a <__sinit+0x22>
 8004656:	2301      	movs	r3, #1
 8004658:	6183      	str	r3, [r0, #24]
 800465a:	0020      	movs	r0, r4
 800465c:	f000 f820 	bl	80046a0 <__sfp>
 8004660:	6060      	str	r0, [r4, #4]
 8004662:	0020      	movs	r0, r4
 8004664:	f000 f81c 	bl	80046a0 <__sfp>
 8004668:	60a0      	str	r0, [r4, #8]
 800466a:	0020      	movs	r0, r4
 800466c:	f000 f818 	bl	80046a0 <__sfp>
 8004670:	2200      	movs	r2, #0
 8004672:	60e0      	str	r0, [r4, #12]
 8004674:	2104      	movs	r1, #4
 8004676:	6860      	ldr	r0, [r4, #4]
 8004678:	f7ff ff9c 	bl	80045b4 <std>
 800467c:	2201      	movs	r2, #1
 800467e:	2109      	movs	r1, #9
 8004680:	68a0      	ldr	r0, [r4, #8]
 8004682:	f7ff ff97 	bl	80045b4 <std>
 8004686:	2202      	movs	r2, #2
 8004688:	2112      	movs	r1, #18
 800468a:	68e0      	ldr	r0, [r4, #12]
 800468c:	f7ff ff92 	bl	80045b4 <std>
 8004690:	2301      	movs	r3, #1
 8004692:	61a3      	str	r3, [r4, #24]
 8004694:	bd13      	pop	{r0, r1, r4, pc}
 8004696:	46c0      	nop			; (mov r8, r8)
 8004698:	08005a08 	.word	0x08005a08
 800469c:	080045fd 	.word	0x080045fd

080046a0 <__sfp>:
 80046a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a2:	4b1c      	ldr	r3, [pc, #112]	; (8004714 <__sfp+0x74>)
 80046a4:	0007      	movs	r7, r0
 80046a6:	681e      	ldr	r6, [r3, #0]
 80046a8:	69b3      	ldr	r3, [r6, #24]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d102      	bne.n	80046b4 <__sfp+0x14>
 80046ae:	0030      	movs	r0, r6
 80046b0:	f7ff ffc2 	bl	8004638 <__sinit>
 80046b4:	3648      	adds	r6, #72	; 0x48
 80046b6:	68b4      	ldr	r4, [r6, #8]
 80046b8:	6873      	ldr	r3, [r6, #4]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	d504      	bpl.n	80046c8 <__sfp+0x28>
 80046be:	6833      	ldr	r3, [r6, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d007      	beq.n	80046d4 <__sfp+0x34>
 80046c4:	6836      	ldr	r6, [r6, #0]
 80046c6:	e7f6      	b.n	80046b6 <__sfp+0x16>
 80046c8:	220c      	movs	r2, #12
 80046ca:	5ea5      	ldrsh	r5, [r4, r2]
 80046cc:	2d00      	cmp	r5, #0
 80046ce:	d00d      	beq.n	80046ec <__sfp+0x4c>
 80046d0:	3468      	adds	r4, #104	; 0x68
 80046d2:	e7f2      	b.n	80046ba <__sfp+0x1a>
 80046d4:	2104      	movs	r1, #4
 80046d6:	0038      	movs	r0, r7
 80046d8:	f7ff ff98 	bl	800460c <__sfmoreglue>
 80046dc:	6030      	str	r0, [r6, #0]
 80046de:	2800      	cmp	r0, #0
 80046e0:	d1f0      	bne.n	80046c4 <__sfp+0x24>
 80046e2:	230c      	movs	r3, #12
 80046e4:	0004      	movs	r4, r0
 80046e6:	603b      	str	r3, [r7, #0]
 80046e8:	0020      	movs	r0, r4
 80046ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046ec:	0020      	movs	r0, r4
 80046ee:	4b0a      	ldr	r3, [pc, #40]	; (8004718 <__sfp+0x78>)
 80046f0:	6665      	str	r5, [r4, #100]	; 0x64
 80046f2:	6025      	str	r5, [r4, #0]
 80046f4:	6065      	str	r5, [r4, #4]
 80046f6:	60a5      	str	r5, [r4, #8]
 80046f8:	60e3      	str	r3, [r4, #12]
 80046fa:	6125      	str	r5, [r4, #16]
 80046fc:	6165      	str	r5, [r4, #20]
 80046fe:	61a5      	str	r5, [r4, #24]
 8004700:	2208      	movs	r2, #8
 8004702:	0029      	movs	r1, r5
 8004704:	305c      	adds	r0, #92	; 0x5c
 8004706:	f7ff fc9f 	bl	8004048 <memset>
 800470a:	6365      	str	r5, [r4, #52]	; 0x34
 800470c:	63a5      	str	r5, [r4, #56]	; 0x38
 800470e:	64a5      	str	r5, [r4, #72]	; 0x48
 8004710:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004712:	e7e9      	b.n	80046e8 <__sfp+0x48>
 8004714:	08005a08 	.word	0x08005a08
 8004718:	ffff0001 	.word	0xffff0001

0800471c <_fwalk_reent>:
 800471c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800471e:	0004      	movs	r4, r0
 8004720:	0007      	movs	r7, r0
 8004722:	2600      	movs	r6, #0
 8004724:	9101      	str	r1, [sp, #4]
 8004726:	3448      	adds	r4, #72	; 0x48
 8004728:	2c00      	cmp	r4, #0
 800472a:	d101      	bne.n	8004730 <_fwalk_reent+0x14>
 800472c:	0030      	movs	r0, r6
 800472e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004730:	6863      	ldr	r3, [r4, #4]
 8004732:	68a5      	ldr	r5, [r4, #8]
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	9b00      	ldr	r3, [sp, #0]
 8004738:	3b01      	subs	r3, #1
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	d501      	bpl.n	8004742 <_fwalk_reent+0x26>
 800473e:	6824      	ldr	r4, [r4, #0]
 8004740:	e7f2      	b.n	8004728 <_fwalk_reent+0xc>
 8004742:	89ab      	ldrh	r3, [r5, #12]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d908      	bls.n	800475a <_fwalk_reent+0x3e>
 8004748:	220e      	movs	r2, #14
 800474a:	5eab      	ldrsh	r3, [r5, r2]
 800474c:	3301      	adds	r3, #1
 800474e:	d004      	beq.n	800475a <_fwalk_reent+0x3e>
 8004750:	0029      	movs	r1, r5
 8004752:	0038      	movs	r0, r7
 8004754:	9b01      	ldr	r3, [sp, #4]
 8004756:	4798      	blx	r3
 8004758:	4306      	orrs	r6, r0
 800475a:	3568      	adds	r5, #104	; 0x68
 800475c:	e7eb      	b.n	8004736 <_fwalk_reent+0x1a>
	...

08004760 <__locale_ctype_ptr>:
 8004760:	4b04      	ldr	r3, [pc, #16]	; (8004774 <__locale_ctype_ptr+0x14>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d100      	bne.n	800476c <__locale_ctype_ptr+0xc>
 800476a:	4b03      	ldr	r3, [pc, #12]	; (8004778 <__locale_ctype_ptr+0x18>)
 800476c:	33ec      	adds	r3, #236	; 0xec
 800476e:	6818      	ldr	r0, [r3, #0]
 8004770:	4770      	bx	lr
 8004772:	46c0      	nop			; (mov r8, r8)
 8004774:	20000010 	.word	0x20000010
 8004778:	20000074 	.word	0x20000074

0800477c <__swhatbuf_r>:
 800477c:	b570      	push	{r4, r5, r6, lr}
 800477e:	000e      	movs	r6, r1
 8004780:	001d      	movs	r5, r3
 8004782:	230e      	movs	r3, #14
 8004784:	5ec9      	ldrsh	r1, [r1, r3]
 8004786:	b096      	sub	sp, #88	; 0x58
 8004788:	0014      	movs	r4, r2
 800478a:	2900      	cmp	r1, #0
 800478c:	da07      	bge.n	800479e <__swhatbuf_r+0x22>
 800478e:	2300      	movs	r3, #0
 8004790:	602b      	str	r3, [r5, #0]
 8004792:	89b3      	ldrh	r3, [r6, #12]
 8004794:	061b      	lsls	r3, r3, #24
 8004796:	d411      	bmi.n	80047bc <__swhatbuf_r+0x40>
 8004798:	2380      	movs	r3, #128	; 0x80
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	e00f      	b.n	80047be <__swhatbuf_r+0x42>
 800479e:	466a      	mov	r2, sp
 80047a0:	f000 fdf6 	bl	8005390 <_fstat_r>
 80047a4:	2800      	cmp	r0, #0
 80047a6:	dbf2      	blt.n	800478e <__swhatbuf_r+0x12>
 80047a8:	22f0      	movs	r2, #240	; 0xf0
 80047aa:	9b01      	ldr	r3, [sp, #4]
 80047ac:	0212      	lsls	r2, r2, #8
 80047ae:	4013      	ands	r3, r2
 80047b0:	4a05      	ldr	r2, [pc, #20]	; (80047c8 <__swhatbuf_r+0x4c>)
 80047b2:	189b      	adds	r3, r3, r2
 80047b4:	425a      	negs	r2, r3
 80047b6:	4153      	adcs	r3, r2
 80047b8:	602b      	str	r3, [r5, #0]
 80047ba:	e7ed      	b.n	8004798 <__swhatbuf_r+0x1c>
 80047bc:	2340      	movs	r3, #64	; 0x40
 80047be:	2000      	movs	r0, #0
 80047c0:	6023      	str	r3, [r4, #0]
 80047c2:	b016      	add	sp, #88	; 0x58
 80047c4:	bd70      	pop	{r4, r5, r6, pc}
 80047c6:	46c0      	nop			; (mov r8, r8)
 80047c8:	ffffe000 	.word	0xffffe000

080047cc <__smakebuf_r>:
 80047cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047ce:	2602      	movs	r6, #2
 80047d0:	898b      	ldrh	r3, [r1, #12]
 80047d2:	0005      	movs	r5, r0
 80047d4:	000c      	movs	r4, r1
 80047d6:	4233      	tst	r3, r6
 80047d8:	d006      	beq.n	80047e8 <__smakebuf_r+0x1c>
 80047da:	0023      	movs	r3, r4
 80047dc:	3347      	adds	r3, #71	; 0x47
 80047de:	6023      	str	r3, [r4, #0]
 80047e0:	6123      	str	r3, [r4, #16]
 80047e2:	2301      	movs	r3, #1
 80047e4:	6163      	str	r3, [r4, #20]
 80047e6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80047e8:	ab01      	add	r3, sp, #4
 80047ea:	466a      	mov	r2, sp
 80047ec:	f7ff ffc6 	bl	800477c <__swhatbuf_r>
 80047f0:	9900      	ldr	r1, [sp, #0]
 80047f2:	0007      	movs	r7, r0
 80047f4:	0028      	movs	r0, r5
 80047f6:	f000 f893 	bl	8004920 <_malloc_r>
 80047fa:	2800      	cmp	r0, #0
 80047fc:	d108      	bne.n	8004810 <__smakebuf_r+0x44>
 80047fe:	220c      	movs	r2, #12
 8004800:	5ea3      	ldrsh	r3, [r4, r2]
 8004802:	059a      	lsls	r2, r3, #22
 8004804:	d4ef      	bmi.n	80047e6 <__smakebuf_r+0x1a>
 8004806:	2203      	movs	r2, #3
 8004808:	4393      	bics	r3, r2
 800480a:	431e      	orrs	r6, r3
 800480c:	81a6      	strh	r6, [r4, #12]
 800480e:	e7e4      	b.n	80047da <__smakebuf_r+0xe>
 8004810:	4b0f      	ldr	r3, [pc, #60]	; (8004850 <__smakebuf_r+0x84>)
 8004812:	62ab      	str	r3, [r5, #40]	; 0x28
 8004814:	2380      	movs	r3, #128	; 0x80
 8004816:	89a2      	ldrh	r2, [r4, #12]
 8004818:	6020      	str	r0, [r4, #0]
 800481a:	4313      	orrs	r3, r2
 800481c:	81a3      	strh	r3, [r4, #12]
 800481e:	9b00      	ldr	r3, [sp, #0]
 8004820:	6120      	str	r0, [r4, #16]
 8004822:	6163      	str	r3, [r4, #20]
 8004824:	9b01      	ldr	r3, [sp, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00d      	beq.n	8004846 <__smakebuf_r+0x7a>
 800482a:	230e      	movs	r3, #14
 800482c:	5ee1      	ldrsh	r1, [r4, r3]
 800482e:	0028      	movs	r0, r5
 8004830:	f000 fdc0 	bl	80053b4 <_isatty_r>
 8004834:	2800      	cmp	r0, #0
 8004836:	d006      	beq.n	8004846 <__smakebuf_r+0x7a>
 8004838:	2203      	movs	r2, #3
 800483a:	89a3      	ldrh	r3, [r4, #12]
 800483c:	4393      	bics	r3, r2
 800483e:	001a      	movs	r2, r3
 8004840:	2301      	movs	r3, #1
 8004842:	4313      	orrs	r3, r2
 8004844:	81a3      	strh	r3, [r4, #12]
 8004846:	89a0      	ldrh	r0, [r4, #12]
 8004848:	4338      	orrs	r0, r7
 800484a:	81a0      	strh	r0, [r4, #12]
 800484c:	e7cb      	b.n	80047e6 <__smakebuf_r+0x1a>
 800484e:	46c0      	nop			; (mov r8, r8)
 8004850:	080045fd 	.word	0x080045fd

08004854 <malloc>:
 8004854:	b510      	push	{r4, lr}
 8004856:	4b03      	ldr	r3, [pc, #12]	; (8004864 <malloc+0x10>)
 8004858:	0001      	movs	r1, r0
 800485a:	6818      	ldr	r0, [r3, #0]
 800485c:	f000 f860 	bl	8004920 <_malloc_r>
 8004860:	bd10      	pop	{r4, pc}
 8004862:	46c0      	nop			; (mov r8, r8)
 8004864:	20000010 	.word	0x20000010

08004868 <__ascii_mbtowc>:
 8004868:	b082      	sub	sp, #8
 800486a:	2900      	cmp	r1, #0
 800486c:	d100      	bne.n	8004870 <__ascii_mbtowc+0x8>
 800486e:	a901      	add	r1, sp, #4
 8004870:	1e10      	subs	r0, r2, #0
 8004872:	d006      	beq.n	8004882 <__ascii_mbtowc+0x1a>
 8004874:	2b00      	cmp	r3, #0
 8004876:	d006      	beq.n	8004886 <__ascii_mbtowc+0x1e>
 8004878:	7813      	ldrb	r3, [r2, #0]
 800487a:	600b      	str	r3, [r1, #0]
 800487c:	7810      	ldrb	r0, [r2, #0]
 800487e:	1e43      	subs	r3, r0, #1
 8004880:	4198      	sbcs	r0, r3
 8004882:	b002      	add	sp, #8
 8004884:	4770      	bx	lr
 8004886:	2002      	movs	r0, #2
 8004888:	4240      	negs	r0, r0
 800488a:	e7fa      	b.n	8004882 <__ascii_mbtowc+0x1a>

0800488c <_free_r>:
 800488c:	b570      	push	{r4, r5, r6, lr}
 800488e:	0005      	movs	r5, r0
 8004890:	2900      	cmp	r1, #0
 8004892:	d010      	beq.n	80048b6 <_free_r+0x2a>
 8004894:	1f0c      	subs	r4, r1, #4
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	da00      	bge.n	800489e <_free_r+0x12>
 800489c:	18e4      	adds	r4, r4, r3
 800489e:	0028      	movs	r0, r5
 80048a0:	f000 fdd5 	bl	800544e <__malloc_lock>
 80048a4:	4a1d      	ldr	r2, [pc, #116]	; (800491c <_free_r+0x90>)
 80048a6:	6813      	ldr	r3, [r2, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d105      	bne.n	80048b8 <_free_r+0x2c>
 80048ac:	6063      	str	r3, [r4, #4]
 80048ae:	6014      	str	r4, [r2, #0]
 80048b0:	0028      	movs	r0, r5
 80048b2:	f000 fdcd 	bl	8005450 <__malloc_unlock>
 80048b6:	bd70      	pop	{r4, r5, r6, pc}
 80048b8:	42a3      	cmp	r3, r4
 80048ba:	d909      	bls.n	80048d0 <_free_r+0x44>
 80048bc:	6821      	ldr	r1, [r4, #0]
 80048be:	1860      	adds	r0, r4, r1
 80048c0:	4283      	cmp	r3, r0
 80048c2:	d1f3      	bne.n	80048ac <_free_r+0x20>
 80048c4:	6818      	ldr	r0, [r3, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	1841      	adds	r1, r0, r1
 80048ca:	6021      	str	r1, [r4, #0]
 80048cc:	e7ee      	b.n	80048ac <_free_r+0x20>
 80048ce:	0013      	movs	r3, r2
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	2a00      	cmp	r2, #0
 80048d4:	d001      	beq.n	80048da <_free_r+0x4e>
 80048d6:	42a2      	cmp	r2, r4
 80048d8:	d9f9      	bls.n	80048ce <_free_r+0x42>
 80048da:	6819      	ldr	r1, [r3, #0]
 80048dc:	1858      	adds	r0, r3, r1
 80048de:	42a0      	cmp	r0, r4
 80048e0:	d10b      	bne.n	80048fa <_free_r+0x6e>
 80048e2:	6820      	ldr	r0, [r4, #0]
 80048e4:	1809      	adds	r1, r1, r0
 80048e6:	1858      	adds	r0, r3, r1
 80048e8:	6019      	str	r1, [r3, #0]
 80048ea:	4282      	cmp	r2, r0
 80048ec:	d1e0      	bne.n	80048b0 <_free_r+0x24>
 80048ee:	6810      	ldr	r0, [r2, #0]
 80048f0:	6852      	ldr	r2, [r2, #4]
 80048f2:	1841      	adds	r1, r0, r1
 80048f4:	6019      	str	r1, [r3, #0]
 80048f6:	605a      	str	r2, [r3, #4]
 80048f8:	e7da      	b.n	80048b0 <_free_r+0x24>
 80048fa:	42a0      	cmp	r0, r4
 80048fc:	d902      	bls.n	8004904 <_free_r+0x78>
 80048fe:	230c      	movs	r3, #12
 8004900:	602b      	str	r3, [r5, #0]
 8004902:	e7d5      	b.n	80048b0 <_free_r+0x24>
 8004904:	6821      	ldr	r1, [r4, #0]
 8004906:	1860      	adds	r0, r4, r1
 8004908:	4282      	cmp	r2, r0
 800490a:	d103      	bne.n	8004914 <_free_r+0x88>
 800490c:	6810      	ldr	r0, [r2, #0]
 800490e:	6852      	ldr	r2, [r2, #4]
 8004910:	1841      	adds	r1, r0, r1
 8004912:	6021      	str	r1, [r4, #0]
 8004914:	6062      	str	r2, [r4, #4]
 8004916:	605c      	str	r4, [r3, #4]
 8004918:	e7ca      	b.n	80048b0 <_free_r+0x24>
 800491a:	46c0      	nop			; (mov r8, r8)
 800491c:	200002cc 	.word	0x200002cc

08004920 <_malloc_r>:
 8004920:	2303      	movs	r3, #3
 8004922:	b570      	push	{r4, r5, r6, lr}
 8004924:	1ccd      	adds	r5, r1, #3
 8004926:	439d      	bics	r5, r3
 8004928:	3508      	adds	r5, #8
 800492a:	0006      	movs	r6, r0
 800492c:	2d0c      	cmp	r5, #12
 800492e:	d21e      	bcs.n	800496e <_malloc_r+0x4e>
 8004930:	250c      	movs	r5, #12
 8004932:	42a9      	cmp	r1, r5
 8004934:	d81d      	bhi.n	8004972 <_malloc_r+0x52>
 8004936:	0030      	movs	r0, r6
 8004938:	f000 fd89 	bl	800544e <__malloc_lock>
 800493c:	4a25      	ldr	r2, [pc, #148]	; (80049d4 <_malloc_r+0xb4>)
 800493e:	6814      	ldr	r4, [r2, #0]
 8004940:	0021      	movs	r1, r4
 8004942:	2900      	cmp	r1, #0
 8004944:	d119      	bne.n	800497a <_malloc_r+0x5a>
 8004946:	4c24      	ldr	r4, [pc, #144]	; (80049d8 <_malloc_r+0xb8>)
 8004948:	6823      	ldr	r3, [r4, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d103      	bne.n	8004956 <_malloc_r+0x36>
 800494e:	0030      	movs	r0, r6
 8004950:	f000 fc8e 	bl	8005270 <_sbrk_r>
 8004954:	6020      	str	r0, [r4, #0]
 8004956:	0029      	movs	r1, r5
 8004958:	0030      	movs	r0, r6
 800495a:	f000 fc89 	bl	8005270 <_sbrk_r>
 800495e:	1c43      	adds	r3, r0, #1
 8004960:	d12b      	bne.n	80049ba <_malloc_r+0x9a>
 8004962:	230c      	movs	r3, #12
 8004964:	0030      	movs	r0, r6
 8004966:	6033      	str	r3, [r6, #0]
 8004968:	f000 fd72 	bl	8005450 <__malloc_unlock>
 800496c:	e003      	b.n	8004976 <_malloc_r+0x56>
 800496e:	2d00      	cmp	r5, #0
 8004970:	dadf      	bge.n	8004932 <_malloc_r+0x12>
 8004972:	230c      	movs	r3, #12
 8004974:	6033      	str	r3, [r6, #0]
 8004976:	2000      	movs	r0, #0
 8004978:	bd70      	pop	{r4, r5, r6, pc}
 800497a:	680b      	ldr	r3, [r1, #0]
 800497c:	1b5b      	subs	r3, r3, r5
 800497e:	d419      	bmi.n	80049b4 <_malloc_r+0x94>
 8004980:	2b0b      	cmp	r3, #11
 8004982:	d903      	bls.n	800498c <_malloc_r+0x6c>
 8004984:	600b      	str	r3, [r1, #0]
 8004986:	18cc      	adds	r4, r1, r3
 8004988:	6025      	str	r5, [r4, #0]
 800498a:	e003      	b.n	8004994 <_malloc_r+0x74>
 800498c:	684b      	ldr	r3, [r1, #4]
 800498e:	428c      	cmp	r4, r1
 8004990:	d10d      	bne.n	80049ae <_malloc_r+0x8e>
 8004992:	6013      	str	r3, [r2, #0]
 8004994:	0030      	movs	r0, r6
 8004996:	f000 fd5b 	bl	8005450 <__malloc_unlock>
 800499a:	0020      	movs	r0, r4
 800499c:	2207      	movs	r2, #7
 800499e:	300b      	adds	r0, #11
 80049a0:	1d23      	adds	r3, r4, #4
 80049a2:	4390      	bics	r0, r2
 80049a4:	1ac3      	subs	r3, r0, r3
 80049a6:	d0e7      	beq.n	8004978 <_malloc_r+0x58>
 80049a8:	425a      	negs	r2, r3
 80049aa:	50e2      	str	r2, [r4, r3]
 80049ac:	e7e4      	b.n	8004978 <_malloc_r+0x58>
 80049ae:	6063      	str	r3, [r4, #4]
 80049b0:	000c      	movs	r4, r1
 80049b2:	e7ef      	b.n	8004994 <_malloc_r+0x74>
 80049b4:	000c      	movs	r4, r1
 80049b6:	6849      	ldr	r1, [r1, #4]
 80049b8:	e7c3      	b.n	8004942 <_malloc_r+0x22>
 80049ba:	2303      	movs	r3, #3
 80049bc:	1cc4      	adds	r4, r0, #3
 80049be:	439c      	bics	r4, r3
 80049c0:	42a0      	cmp	r0, r4
 80049c2:	d0e1      	beq.n	8004988 <_malloc_r+0x68>
 80049c4:	1a21      	subs	r1, r4, r0
 80049c6:	0030      	movs	r0, r6
 80049c8:	f000 fc52 	bl	8005270 <_sbrk_r>
 80049cc:	1c43      	adds	r3, r0, #1
 80049ce:	d1db      	bne.n	8004988 <_malloc_r+0x68>
 80049d0:	e7c7      	b.n	8004962 <_malloc_r+0x42>
 80049d2:	46c0      	nop			; (mov r8, r8)
 80049d4:	200002cc 	.word	0x200002cc
 80049d8:	200002d0 	.word	0x200002d0

080049dc <__ssputs_r>:
 80049dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049de:	688e      	ldr	r6, [r1, #8]
 80049e0:	b085      	sub	sp, #20
 80049e2:	0007      	movs	r7, r0
 80049e4:	000c      	movs	r4, r1
 80049e6:	9203      	str	r2, [sp, #12]
 80049e8:	9301      	str	r3, [sp, #4]
 80049ea:	429e      	cmp	r6, r3
 80049ec:	d83c      	bhi.n	8004a68 <__ssputs_r+0x8c>
 80049ee:	2390      	movs	r3, #144	; 0x90
 80049f0:	898a      	ldrh	r2, [r1, #12]
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	421a      	tst	r2, r3
 80049f6:	d034      	beq.n	8004a62 <__ssputs_r+0x86>
 80049f8:	2503      	movs	r5, #3
 80049fa:	6909      	ldr	r1, [r1, #16]
 80049fc:	6823      	ldr	r3, [r4, #0]
 80049fe:	1a5b      	subs	r3, r3, r1
 8004a00:	9302      	str	r3, [sp, #8]
 8004a02:	6963      	ldr	r3, [r4, #20]
 8004a04:	9802      	ldr	r0, [sp, #8]
 8004a06:	435d      	muls	r5, r3
 8004a08:	0feb      	lsrs	r3, r5, #31
 8004a0a:	195d      	adds	r5, r3, r5
 8004a0c:	9b01      	ldr	r3, [sp, #4]
 8004a0e:	106d      	asrs	r5, r5, #1
 8004a10:	3301      	adds	r3, #1
 8004a12:	181b      	adds	r3, r3, r0
 8004a14:	42ab      	cmp	r3, r5
 8004a16:	d900      	bls.n	8004a1a <__ssputs_r+0x3e>
 8004a18:	001d      	movs	r5, r3
 8004a1a:	0553      	lsls	r3, r2, #21
 8004a1c:	d532      	bpl.n	8004a84 <__ssputs_r+0xa8>
 8004a1e:	0029      	movs	r1, r5
 8004a20:	0038      	movs	r0, r7
 8004a22:	f7ff ff7d 	bl	8004920 <_malloc_r>
 8004a26:	1e06      	subs	r6, r0, #0
 8004a28:	d109      	bne.n	8004a3e <__ssputs_r+0x62>
 8004a2a:	230c      	movs	r3, #12
 8004a2c:	603b      	str	r3, [r7, #0]
 8004a2e:	2340      	movs	r3, #64	; 0x40
 8004a30:	2001      	movs	r0, #1
 8004a32:	89a2      	ldrh	r2, [r4, #12]
 8004a34:	4240      	negs	r0, r0
 8004a36:	4313      	orrs	r3, r2
 8004a38:	81a3      	strh	r3, [r4, #12]
 8004a3a:	b005      	add	sp, #20
 8004a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a3e:	9a02      	ldr	r2, [sp, #8]
 8004a40:	6921      	ldr	r1, [r4, #16]
 8004a42:	f000 fce8 	bl	8005416 <memcpy>
 8004a46:	89a3      	ldrh	r3, [r4, #12]
 8004a48:	4a14      	ldr	r2, [pc, #80]	; (8004a9c <__ssputs_r+0xc0>)
 8004a4a:	401a      	ands	r2, r3
 8004a4c:	2380      	movs	r3, #128	; 0x80
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	81a3      	strh	r3, [r4, #12]
 8004a52:	9b02      	ldr	r3, [sp, #8]
 8004a54:	6126      	str	r6, [r4, #16]
 8004a56:	18f6      	adds	r6, r6, r3
 8004a58:	6026      	str	r6, [r4, #0]
 8004a5a:	6165      	str	r5, [r4, #20]
 8004a5c:	9e01      	ldr	r6, [sp, #4]
 8004a5e:	1aed      	subs	r5, r5, r3
 8004a60:	60a5      	str	r5, [r4, #8]
 8004a62:	9b01      	ldr	r3, [sp, #4]
 8004a64:	429e      	cmp	r6, r3
 8004a66:	d900      	bls.n	8004a6a <__ssputs_r+0x8e>
 8004a68:	9e01      	ldr	r6, [sp, #4]
 8004a6a:	0032      	movs	r2, r6
 8004a6c:	9903      	ldr	r1, [sp, #12]
 8004a6e:	6820      	ldr	r0, [r4, #0]
 8004a70:	f000 fcda 	bl	8005428 <memmove>
 8004a74:	68a3      	ldr	r3, [r4, #8]
 8004a76:	2000      	movs	r0, #0
 8004a78:	1b9b      	subs	r3, r3, r6
 8004a7a:	60a3      	str	r3, [r4, #8]
 8004a7c:	6823      	ldr	r3, [r4, #0]
 8004a7e:	199e      	adds	r6, r3, r6
 8004a80:	6026      	str	r6, [r4, #0]
 8004a82:	e7da      	b.n	8004a3a <__ssputs_r+0x5e>
 8004a84:	002a      	movs	r2, r5
 8004a86:	0038      	movs	r0, r7
 8004a88:	f000 fce3 	bl	8005452 <_realloc_r>
 8004a8c:	1e06      	subs	r6, r0, #0
 8004a8e:	d1e0      	bne.n	8004a52 <__ssputs_r+0x76>
 8004a90:	6921      	ldr	r1, [r4, #16]
 8004a92:	0038      	movs	r0, r7
 8004a94:	f7ff fefa 	bl	800488c <_free_r>
 8004a98:	e7c7      	b.n	8004a2a <__ssputs_r+0x4e>
 8004a9a:	46c0      	nop			; (mov r8, r8)
 8004a9c:	fffffb7f 	.word	0xfffffb7f

08004aa0 <_svfiprintf_r>:
 8004aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aa2:	b0a1      	sub	sp, #132	; 0x84
 8004aa4:	9003      	str	r0, [sp, #12]
 8004aa6:	001d      	movs	r5, r3
 8004aa8:	898b      	ldrh	r3, [r1, #12]
 8004aaa:	000f      	movs	r7, r1
 8004aac:	0016      	movs	r6, r2
 8004aae:	061b      	lsls	r3, r3, #24
 8004ab0:	d511      	bpl.n	8004ad6 <_svfiprintf_r+0x36>
 8004ab2:	690b      	ldr	r3, [r1, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10e      	bne.n	8004ad6 <_svfiprintf_r+0x36>
 8004ab8:	2140      	movs	r1, #64	; 0x40
 8004aba:	f7ff ff31 	bl	8004920 <_malloc_r>
 8004abe:	6038      	str	r0, [r7, #0]
 8004ac0:	6138      	str	r0, [r7, #16]
 8004ac2:	2800      	cmp	r0, #0
 8004ac4:	d105      	bne.n	8004ad2 <_svfiprintf_r+0x32>
 8004ac6:	230c      	movs	r3, #12
 8004ac8:	9a03      	ldr	r2, [sp, #12]
 8004aca:	3801      	subs	r0, #1
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	b021      	add	sp, #132	; 0x84
 8004ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ad2:	2340      	movs	r3, #64	; 0x40
 8004ad4:	617b      	str	r3, [r7, #20]
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	ac08      	add	r4, sp, #32
 8004ada:	6163      	str	r3, [r4, #20]
 8004adc:	3320      	adds	r3, #32
 8004ade:	7663      	strb	r3, [r4, #25]
 8004ae0:	3310      	adds	r3, #16
 8004ae2:	76a3      	strb	r3, [r4, #26]
 8004ae4:	9507      	str	r5, [sp, #28]
 8004ae6:	0035      	movs	r5, r6
 8004ae8:	782b      	ldrb	r3, [r5, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <_svfiprintf_r+0x52>
 8004aee:	2b25      	cmp	r3, #37	; 0x25
 8004af0:	d146      	bne.n	8004b80 <_svfiprintf_r+0xe0>
 8004af2:	1bab      	subs	r3, r5, r6
 8004af4:	9305      	str	r3, [sp, #20]
 8004af6:	d00c      	beq.n	8004b12 <_svfiprintf_r+0x72>
 8004af8:	0032      	movs	r2, r6
 8004afa:	0039      	movs	r1, r7
 8004afc:	9803      	ldr	r0, [sp, #12]
 8004afe:	f7ff ff6d 	bl	80049dc <__ssputs_r>
 8004b02:	1c43      	adds	r3, r0, #1
 8004b04:	d100      	bne.n	8004b08 <_svfiprintf_r+0x68>
 8004b06:	e0ae      	b.n	8004c66 <_svfiprintf_r+0x1c6>
 8004b08:	6962      	ldr	r2, [r4, #20]
 8004b0a:	9b05      	ldr	r3, [sp, #20]
 8004b0c:	4694      	mov	ip, r2
 8004b0e:	4463      	add	r3, ip
 8004b10:	6163      	str	r3, [r4, #20]
 8004b12:	782b      	ldrb	r3, [r5, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d100      	bne.n	8004b1a <_svfiprintf_r+0x7a>
 8004b18:	e0a5      	b.n	8004c66 <_svfiprintf_r+0x1c6>
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	4252      	negs	r2, r2
 8004b20:	6062      	str	r2, [r4, #4]
 8004b22:	a904      	add	r1, sp, #16
 8004b24:	3254      	adds	r2, #84	; 0x54
 8004b26:	1852      	adds	r2, r2, r1
 8004b28:	1c6e      	adds	r6, r5, #1
 8004b2a:	6023      	str	r3, [r4, #0]
 8004b2c:	60e3      	str	r3, [r4, #12]
 8004b2e:	60a3      	str	r3, [r4, #8]
 8004b30:	7013      	strb	r3, [r2, #0]
 8004b32:	65a3      	str	r3, [r4, #88]	; 0x58
 8004b34:	7831      	ldrb	r1, [r6, #0]
 8004b36:	2205      	movs	r2, #5
 8004b38:	4853      	ldr	r0, [pc, #332]	; (8004c88 <_svfiprintf_r+0x1e8>)
 8004b3a:	f000 fc61 	bl	8005400 <memchr>
 8004b3e:	1c75      	adds	r5, r6, #1
 8004b40:	2800      	cmp	r0, #0
 8004b42:	d11f      	bne.n	8004b84 <_svfiprintf_r+0xe4>
 8004b44:	6822      	ldr	r2, [r4, #0]
 8004b46:	06d3      	lsls	r3, r2, #27
 8004b48:	d504      	bpl.n	8004b54 <_svfiprintf_r+0xb4>
 8004b4a:	2353      	movs	r3, #83	; 0x53
 8004b4c:	a904      	add	r1, sp, #16
 8004b4e:	185b      	adds	r3, r3, r1
 8004b50:	2120      	movs	r1, #32
 8004b52:	7019      	strb	r1, [r3, #0]
 8004b54:	0713      	lsls	r3, r2, #28
 8004b56:	d504      	bpl.n	8004b62 <_svfiprintf_r+0xc2>
 8004b58:	2353      	movs	r3, #83	; 0x53
 8004b5a:	a904      	add	r1, sp, #16
 8004b5c:	185b      	adds	r3, r3, r1
 8004b5e:	212b      	movs	r1, #43	; 0x2b
 8004b60:	7019      	strb	r1, [r3, #0]
 8004b62:	7833      	ldrb	r3, [r6, #0]
 8004b64:	2b2a      	cmp	r3, #42	; 0x2a
 8004b66:	d016      	beq.n	8004b96 <_svfiprintf_r+0xf6>
 8004b68:	0035      	movs	r5, r6
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	200a      	movs	r0, #10
 8004b6e:	68e3      	ldr	r3, [r4, #12]
 8004b70:	782a      	ldrb	r2, [r5, #0]
 8004b72:	1c6e      	adds	r6, r5, #1
 8004b74:	3a30      	subs	r2, #48	; 0x30
 8004b76:	2a09      	cmp	r2, #9
 8004b78:	d94e      	bls.n	8004c18 <_svfiprintf_r+0x178>
 8004b7a:	2900      	cmp	r1, #0
 8004b7c:	d018      	beq.n	8004bb0 <_svfiprintf_r+0x110>
 8004b7e:	e010      	b.n	8004ba2 <_svfiprintf_r+0x102>
 8004b80:	3501      	adds	r5, #1
 8004b82:	e7b1      	b.n	8004ae8 <_svfiprintf_r+0x48>
 8004b84:	4b40      	ldr	r3, [pc, #256]	; (8004c88 <_svfiprintf_r+0x1e8>)
 8004b86:	6822      	ldr	r2, [r4, #0]
 8004b88:	1ac0      	subs	r0, r0, r3
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	4083      	lsls	r3, r0
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	6023      	str	r3, [r4, #0]
 8004b92:	002e      	movs	r6, r5
 8004b94:	e7ce      	b.n	8004b34 <_svfiprintf_r+0x94>
 8004b96:	9b07      	ldr	r3, [sp, #28]
 8004b98:	1d19      	adds	r1, r3, #4
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	9107      	str	r1, [sp, #28]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	db01      	blt.n	8004ba6 <_svfiprintf_r+0x106>
 8004ba2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ba4:	e004      	b.n	8004bb0 <_svfiprintf_r+0x110>
 8004ba6:	425b      	negs	r3, r3
 8004ba8:	60e3      	str	r3, [r4, #12]
 8004baa:	2302      	movs	r3, #2
 8004bac:	4313      	orrs	r3, r2
 8004bae:	6023      	str	r3, [r4, #0]
 8004bb0:	782b      	ldrb	r3, [r5, #0]
 8004bb2:	2b2e      	cmp	r3, #46	; 0x2e
 8004bb4:	d10a      	bne.n	8004bcc <_svfiprintf_r+0x12c>
 8004bb6:	786b      	ldrb	r3, [r5, #1]
 8004bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8004bba:	d135      	bne.n	8004c28 <_svfiprintf_r+0x188>
 8004bbc:	9b07      	ldr	r3, [sp, #28]
 8004bbe:	3502      	adds	r5, #2
 8004bc0:	1d1a      	adds	r2, r3, #4
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	9207      	str	r2, [sp, #28]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	db2b      	blt.n	8004c22 <_svfiprintf_r+0x182>
 8004bca:	9309      	str	r3, [sp, #36]	; 0x24
 8004bcc:	4e2f      	ldr	r6, [pc, #188]	; (8004c8c <_svfiprintf_r+0x1ec>)
 8004bce:	7829      	ldrb	r1, [r5, #0]
 8004bd0:	2203      	movs	r2, #3
 8004bd2:	0030      	movs	r0, r6
 8004bd4:	f000 fc14 	bl	8005400 <memchr>
 8004bd8:	2800      	cmp	r0, #0
 8004bda:	d006      	beq.n	8004bea <_svfiprintf_r+0x14a>
 8004bdc:	2340      	movs	r3, #64	; 0x40
 8004bde:	1b80      	subs	r0, r0, r6
 8004be0:	4083      	lsls	r3, r0
 8004be2:	6822      	ldr	r2, [r4, #0]
 8004be4:	3501      	adds	r5, #1
 8004be6:	4313      	orrs	r3, r2
 8004be8:	6023      	str	r3, [r4, #0]
 8004bea:	7829      	ldrb	r1, [r5, #0]
 8004bec:	2206      	movs	r2, #6
 8004bee:	4828      	ldr	r0, [pc, #160]	; (8004c90 <_svfiprintf_r+0x1f0>)
 8004bf0:	1c6e      	adds	r6, r5, #1
 8004bf2:	7621      	strb	r1, [r4, #24]
 8004bf4:	f000 fc04 	bl	8005400 <memchr>
 8004bf8:	2800      	cmp	r0, #0
 8004bfa:	d03c      	beq.n	8004c76 <_svfiprintf_r+0x1d6>
 8004bfc:	4b25      	ldr	r3, [pc, #148]	; (8004c94 <_svfiprintf_r+0x1f4>)
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d125      	bne.n	8004c4e <_svfiprintf_r+0x1ae>
 8004c02:	2207      	movs	r2, #7
 8004c04:	9b07      	ldr	r3, [sp, #28]
 8004c06:	3307      	adds	r3, #7
 8004c08:	4393      	bics	r3, r2
 8004c0a:	3308      	adds	r3, #8
 8004c0c:	9307      	str	r3, [sp, #28]
 8004c0e:	6963      	ldr	r3, [r4, #20]
 8004c10:	9a04      	ldr	r2, [sp, #16]
 8004c12:	189b      	adds	r3, r3, r2
 8004c14:	6163      	str	r3, [r4, #20]
 8004c16:	e766      	b.n	8004ae6 <_svfiprintf_r+0x46>
 8004c18:	4343      	muls	r3, r0
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	189b      	adds	r3, r3, r2
 8004c1e:	0035      	movs	r5, r6
 8004c20:	e7a6      	b.n	8004b70 <_svfiprintf_r+0xd0>
 8004c22:	2301      	movs	r3, #1
 8004c24:	425b      	negs	r3, r3
 8004c26:	e7d0      	b.n	8004bca <_svfiprintf_r+0x12a>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	200a      	movs	r0, #10
 8004c2c:	001a      	movs	r2, r3
 8004c2e:	3501      	adds	r5, #1
 8004c30:	6063      	str	r3, [r4, #4]
 8004c32:	7829      	ldrb	r1, [r5, #0]
 8004c34:	1c6e      	adds	r6, r5, #1
 8004c36:	3930      	subs	r1, #48	; 0x30
 8004c38:	2909      	cmp	r1, #9
 8004c3a:	d903      	bls.n	8004c44 <_svfiprintf_r+0x1a4>
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0c5      	beq.n	8004bcc <_svfiprintf_r+0x12c>
 8004c40:	9209      	str	r2, [sp, #36]	; 0x24
 8004c42:	e7c3      	b.n	8004bcc <_svfiprintf_r+0x12c>
 8004c44:	4342      	muls	r2, r0
 8004c46:	2301      	movs	r3, #1
 8004c48:	1852      	adds	r2, r2, r1
 8004c4a:	0035      	movs	r5, r6
 8004c4c:	e7f1      	b.n	8004c32 <_svfiprintf_r+0x192>
 8004c4e:	ab07      	add	r3, sp, #28
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	003a      	movs	r2, r7
 8004c54:	4b10      	ldr	r3, [pc, #64]	; (8004c98 <_svfiprintf_r+0x1f8>)
 8004c56:	0021      	movs	r1, r4
 8004c58:	9803      	ldr	r0, [sp, #12]
 8004c5a:	e000      	b.n	8004c5e <_svfiprintf_r+0x1be>
 8004c5c:	bf00      	nop
 8004c5e:	9004      	str	r0, [sp, #16]
 8004c60:	9b04      	ldr	r3, [sp, #16]
 8004c62:	3301      	adds	r3, #1
 8004c64:	d1d3      	bne.n	8004c0e <_svfiprintf_r+0x16e>
 8004c66:	89bb      	ldrh	r3, [r7, #12]
 8004c68:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004c6a:	065b      	lsls	r3, r3, #25
 8004c6c:	d400      	bmi.n	8004c70 <_svfiprintf_r+0x1d0>
 8004c6e:	e72e      	b.n	8004ace <_svfiprintf_r+0x2e>
 8004c70:	2001      	movs	r0, #1
 8004c72:	4240      	negs	r0, r0
 8004c74:	e72b      	b.n	8004ace <_svfiprintf_r+0x2e>
 8004c76:	ab07      	add	r3, sp, #28
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	003a      	movs	r2, r7
 8004c7c:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <_svfiprintf_r+0x1f8>)
 8004c7e:	0021      	movs	r1, r4
 8004c80:	9803      	ldr	r0, [sp, #12]
 8004c82:	f000 f9b7 	bl	8004ff4 <_printf_i>
 8004c86:	e7ea      	b.n	8004c5e <_svfiprintf_r+0x1be>
 8004c88:	08005a76 	.word	0x08005a76
 8004c8c:	08005a7c 	.word	0x08005a7c
 8004c90:	08005a80 	.word	0x08005a80
 8004c94:	00000000 	.word	0x00000000
 8004c98:	080049dd 	.word	0x080049dd

08004c9c <__sfputc_r>:
 8004c9c:	6893      	ldr	r3, [r2, #8]
 8004c9e:	b510      	push	{r4, lr}
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	6093      	str	r3, [r2, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	da04      	bge.n	8004cb2 <__sfputc_r+0x16>
 8004ca8:	6994      	ldr	r4, [r2, #24]
 8004caa:	42a3      	cmp	r3, r4
 8004cac:	db07      	blt.n	8004cbe <__sfputc_r+0x22>
 8004cae:	290a      	cmp	r1, #10
 8004cb0:	d005      	beq.n	8004cbe <__sfputc_r+0x22>
 8004cb2:	6813      	ldr	r3, [r2, #0]
 8004cb4:	1c58      	adds	r0, r3, #1
 8004cb6:	6010      	str	r0, [r2, #0]
 8004cb8:	7019      	strb	r1, [r3, #0]
 8004cba:	0008      	movs	r0, r1
 8004cbc:	bd10      	pop	{r4, pc}
 8004cbe:	f7ff faf7 	bl	80042b0 <__swbuf_r>
 8004cc2:	0001      	movs	r1, r0
 8004cc4:	e7f9      	b.n	8004cba <__sfputc_r+0x1e>

08004cc6 <__sfputs_r>:
 8004cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc8:	0006      	movs	r6, r0
 8004cca:	000f      	movs	r7, r1
 8004ccc:	0014      	movs	r4, r2
 8004cce:	18d5      	adds	r5, r2, r3
 8004cd0:	42ac      	cmp	r4, r5
 8004cd2:	d101      	bne.n	8004cd8 <__sfputs_r+0x12>
 8004cd4:	2000      	movs	r0, #0
 8004cd6:	e007      	b.n	8004ce8 <__sfputs_r+0x22>
 8004cd8:	7821      	ldrb	r1, [r4, #0]
 8004cda:	003a      	movs	r2, r7
 8004cdc:	0030      	movs	r0, r6
 8004cde:	f7ff ffdd 	bl	8004c9c <__sfputc_r>
 8004ce2:	3401      	adds	r4, #1
 8004ce4:	1c43      	adds	r3, r0, #1
 8004ce6:	d1f3      	bne.n	8004cd0 <__sfputs_r+0xa>
 8004ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004cec <_vfiprintf_r>:
 8004cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cee:	b0a1      	sub	sp, #132	; 0x84
 8004cf0:	9003      	str	r0, [sp, #12]
 8004cf2:	000f      	movs	r7, r1
 8004cf4:	0016      	movs	r6, r2
 8004cf6:	001d      	movs	r5, r3
 8004cf8:	2800      	cmp	r0, #0
 8004cfa:	d005      	beq.n	8004d08 <_vfiprintf_r+0x1c>
 8004cfc:	6983      	ldr	r3, [r0, #24]
 8004cfe:	9305      	str	r3, [sp, #20]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <_vfiprintf_r+0x1c>
 8004d04:	f7ff fc98 	bl	8004638 <__sinit>
 8004d08:	4b7b      	ldr	r3, [pc, #492]	; (8004ef8 <_vfiprintf_r+0x20c>)
 8004d0a:	429f      	cmp	r7, r3
 8004d0c:	d15c      	bne.n	8004dc8 <_vfiprintf_r+0xdc>
 8004d0e:	9b03      	ldr	r3, [sp, #12]
 8004d10:	685f      	ldr	r7, [r3, #4]
 8004d12:	89bb      	ldrh	r3, [r7, #12]
 8004d14:	071b      	lsls	r3, r3, #28
 8004d16:	d563      	bpl.n	8004de0 <_vfiprintf_r+0xf4>
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d060      	beq.n	8004de0 <_vfiprintf_r+0xf4>
 8004d1e:	2300      	movs	r3, #0
 8004d20:	ac08      	add	r4, sp, #32
 8004d22:	6163      	str	r3, [r4, #20]
 8004d24:	3320      	adds	r3, #32
 8004d26:	7663      	strb	r3, [r4, #25]
 8004d28:	3310      	adds	r3, #16
 8004d2a:	76a3      	strb	r3, [r4, #26]
 8004d2c:	9507      	str	r5, [sp, #28]
 8004d2e:	0035      	movs	r5, r6
 8004d30:	782b      	ldrb	r3, [r5, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <_vfiprintf_r+0x4e>
 8004d36:	2b25      	cmp	r3, #37	; 0x25
 8004d38:	d15c      	bne.n	8004df4 <_vfiprintf_r+0x108>
 8004d3a:	1bab      	subs	r3, r5, r6
 8004d3c:	9305      	str	r3, [sp, #20]
 8004d3e:	d00c      	beq.n	8004d5a <_vfiprintf_r+0x6e>
 8004d40:	0032      	movs	r2, r6
 8004d42:	0039      	movs	r1, r7
 8004d44:	9803      	ldr	r0, [sp, #12]
 8004d46:	f7ff ffbe 	bl	8004cc6 <__sfputs_r>
 8004d4a:	1c43      	adds	r3, r0, #1
 8004d4c:	d100      	bne.n	8004d50 <_vfiprintf_r+0x64>
 8004d4e:	e0c4      	b.n	8004eda <_vfiprintf_r+0x1ee>
 8004d50:	6962      	ldr	r2, [r4, #20]
 8004d52:	9b05      	ldr	r3, [sp, #20]
 8004d54:	4694      	mov	ip, r2
 8004d56:	4463      	add	r3, ip
 8004d58:	6163      	str	r3, [r4, #20]
 8004d5a:	782b      	ldrb	r3, [r5, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d100      	bne.n	8004d62 <_vfiprintf_r+0x76>
 8004d60:	e0bb      	b.n	8004eda <_vfiprintf_r+0x1ee>
 8004d62:	2201      	movs	r2, #1
 8004d64:	2300      	movs	r3, #0
 8004d66:	4252      	negs	r2, r2
 8004d68:	6062      	str	r2, [r4, #4]
 8004d6a:	a904      	add	r1, sp, #16
 8004d6c:	3254      	adds	r2, #84	; 0x54
 8004d6e:	1852      	adds	r2, r2, r1
 8004d70:	1c6e      	adds	r6, r5, #1
 8004d72:	6023      	str	r3, [r4, #0]
 8004d74:	60e3      	str	r3, [r4, #12]
 8004d76:	60a3      	str	r3, [r4, #8]
 8004d78:	7013      	strb	r3, [r2, #0]
 8004d7a:	65a3      	str	r3, [r4, #88]	; 0x58
 8004d7c:	7831      	ldrb	r1, [r6, #0]
 8004d7e:	2205      	movs	r2, #5
 8004d80:	485e      	ldr	r0, [pc, #376]	; (8004efc <_vfiprintf_r+0x210>)
 8004d82:	f000 fb3d 	bl	8005400 <memchr>
 8004d86:	1c75      	adds	r5, r6, #1
 8004d88:	2800      	cmp	r0, #0
 8004d8a:	d135      	bne.n	8004df8 <_vfiprintf_r+0x10c>
 8004d8c:	6822      	ldr	r2, [r4, #0]
 8004d8e:	06d3      	lsls	r3, r2, #27
 8004d90:	d504      	bpl.n	8004d9c <_vfiprintf_r+0xb0>
 8004d92:	2353      	movs	r3, #83	; 0x53
 8004d94:	a904      	add	r1, sp, #16
 8004d96:	185b      	adds	r3, r3, r1
 8004d98:	2120      	movs	r1, #32
 8004d9a:	7019      	strb	r1, [r3, #0]
 8004d9c:	0713      	lsls	r3, r2, #28
 8004d9e:	d504      	bpl.n	8004daa <_vfiprintf_r+0xbe>
 8004da0:	2353      	movs	r3, #83	; 0x53
 8004da2:	a904      	add	r1, sp, #16
 8004da4:	185b      	adds	r3, r3, r1
 8004da6:	212b      	movs	r1, #43	; 0x2b
 8004da8:	7019      	strb	r1, [r3, #0]
 8004daa:	7833      	ldrb	r3, [r6, #0]
 8004dac:	2b2a      	cmp	r3, #42	; 0x2a
 8004dae:	d02c      	beq.n	8004e0a <_vfiprintf_r+0x11e>
 8004db0:	0035      	movs	r5, r6
 8004db2:	2100      	movs	r1, #0
 8004db4:	200a      	movs	r0, #10
 8004db6:	68e3      	ldr	r3, [r4, #12]
 8004db8:	782a      	ldrb	r2, [r5, #0]
 8004dba:	1c6e      	adds	r6, r5, #1
 8004dbc:	3a30      	subs	r2, #48	; 0x30
 8004dbe:	2a09      	cmp	r2, #9
 8004dc0:	d964      	bls.n	8004e8c <_vfiprintf_r+0x1a0>
 8004dc2:	2900      	cmp	r1, #0
 8004dc4:	d02e      	beq.n	8004e24 <_vfiprintf_r+0x138>
 8004dc6:	e026      	b.n	8004e16 <_vfiprintf_r+0x12a>
 8004dc8:	4b4d      	ldr	r3, [pc, #308]	; (8004f00 <_vfiprintf_r+0x214>)
 8004dca:	429f      	cmp	r7, r3
 8004dcc:	d102      	bne.n	8004dd4 <_vfiprintf_r+0xe8>
 8004dce:	9b03      	ldr	r3, [sp, #12]
 8004dd0:	689f      	ldr	r7, [r3, #8]
 8004dd2:	e79e      	b.n	8004d12 <_vfiprintf_r+0x26>
 8004dd4:	4b4b      	ldr	r3, [pc, #300]	; (8004f04 <_vfiprintf_r+0x218>)
 8004dd6:	429f      	cmp	r7, r3
 8004dd8:	d19b      	bne.n	8004d12 <_vfiprintf_r+0x26>
 8004dda:	9b03      	ldr	r3, [sp, #12]
 8004ddc:	68df      	ldr	r7, [r3, #12]
 8004dde:	e798      	b.n	8004d12 <_vfiprintf_r+0x26>
 8004de0:	0039      	movs	r1, r7
 8004de2:	9803      	ldr	r0, [sp, #12]
 8004de4:	f7ff faba 	bl	800435c <__swsetup_r>
 8004de8:	2800      	cmp	r0, #0
 8004dea:	d098      	beq.n	8004d1e <_vfiprintf_r+0x32>
 8004dec:	2001      	movs	r0, #1
 8004dee:	4240      	negs	r0, r0
 8004df0:	b021      	add	sp, #132	; 0x84
 8004df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004df4:	3501      	adds	r5, #1
 8004df6:	e79b      	b.n	8004d30 <_vfiprintf_r+0x44>
 8004df8:	4b40      	ldr	r3, [pc, #256]	; (8004efc <_vfiprintf_r+0x210>)
 8004dfa:	6822      	ldr	r2, [r4, #0]
 8004dfc:	1ac0      	subs	r0, r0, r3
 8004dfe:	2301      	movs	r3, #1
 8004e00:	4083      	lsls	r3, r0
 8004e02:	4313      	orrs	r3, r2
 8004e04:	6023      	str	r3, [r4, #0]
 8004e06:	002e      	movs	r6, r5
 8004e08:	e7b8      	b.n	8004d7c <_vfiprintf_r+0x90>
 8004e0a:	9b07      	ldr	r3, [sp, #28]
 8004e0c:	1d19      	adds	r1, r3, #4
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	9107      	str	r1, [sp, #28]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	db01      	blt.n	8004e1a <_vfiprintf_r+0x12e>
 8004e16:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e18:	e004      	b.n	8004e24 <_vfiprintf_r+0x138>
 8004e1a:	425b      	negs	r3, r3
 8004e1c:	60e3      	str	r3, [r4, #12]
 8004e1e:	2302      	movs	r3, #2
 8004e20:	4313      	orrs	r3, r2
 8004e22:	6023      	str	r3, [r4, #0]
 8004e24:	782b      	ldrb	r3, [r5, #0]
 8004e26:	2b2e      	cmp	r3, #46	; 0x2e
 8004e28:	d10a      	bne.n	8004e40 <_vfiprintf_r+0x154>
 8004e2a:	786b      	ldrb	r3, [r5, #1]
 8004e2c:	2b2a      	cmp	r3, #42	; 0x2a
 8004e2e:	d135      	bne.n	8004e9c <_vfiprintf_r+0x1b0>
 8004e30:	9b07      	ldr	r3, [sp, #28]
 8004e32:	3502      	adds	r5, #2
 8004e34:	1d1a      	adds	r2, r3, #4
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	9207      	str	r2, [sp, #28]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	db2b      	blt.n	8004e96 <_vfiprintf_r+0x1aa>
 8004e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e40:	4e31      	ldr	r6, [pc, #196]	; (8004f08 <_vfiprintf_r+0x21c>)
 8004e42:	7829      	ldrb	r1, [r5, #0]
 8004e44:	2203      	movs	r2, #3
 8004e46:	0030      	movs	r0, r6
 8004e48:	f000 fada 	bl	8005400 <memchr>
 8004e4c:	2800      	cmp	r0, #0
 8004e4e:	d006      	beq.n	8004e5e <_vfiprintf_r+0x172>
 8004e50:	2340      	movs	r3, #64	; 0x40
 8004e52:	1b80      	subs	r0, r0, r6
 8004e54:	4083      	lsls	r3, r0
 8004e56:	6822      	ldr	r2, [r4, #0]
 8004e58:	3501      	adds	r5, #1
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	6023      	str	r3, [r4, #0]
 8004e5e:	7829      	ldrb	r1, [r5, #0]
 8004e60:	2206      	movs	r2, #6
 8004e62:	482a      	ldr	r0, [pc, #168]	; (8004f0c <_vfiprintf_r+0x220>)
 8004e64:	1c6e      	adds	r6, r5, #1
 8004e66:	7621      	strb	r1, [r4, #24]
 8004e68:	f000 faca 	bl	8005400 <memchr>
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	d03a      	beq.n	8004ee6 <_vfiprintf_r+0x1fa>
 8004e70:	4b27      	ldr	r3, [pc, #156]	; (8004f10 <_vfiprintf_r+0x224>)
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d125      	bne.n	8004ec2 <_vfiprintf_r+0x1d6>
 8004e76:	2207      	movs	r2, #7
 8004e78:	9b07      	ldr	r3, [sp, #28]
 8004e7a:	3307      	adds	r3, #7
 8004e7c:	4393      	bics	r3, r2
 8004e7e:	3308      	adds	r3, #8
 8004e80:	9307      	str	r3, [sp, #28]
 8004e82:	6963      	ldr	r3, [r4, #20]
 8004e84:	9a04      	ldr	r2, [sp, #16]
 8004e86:	189b      	adds	r3, r3, r2
 8004e88:	6163      	str	r3, [r4, #20]
 8004e8a:	e750      	b.n	8004d2e <_vfiprintf_r+0x42>
 8004e8c:	4343      	muls	r3, r0
 8004e8e:	2101      	movs	r1, #1
 8004e90:	189b      	adds	r3, r3, r2
 8004e92:	0035      	movs	r5, r6
 8004e94:	e790      	b.n	8004db8 <_vfiprintf_r+0xcc>
 8004e96:	2301      	movs	r3, #1
 8004e98:	425b      	negs	r3, r3
 8004e9a:	e7d0      	b.n	8004e3e <_vfiprintf_r+0x152>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	200a      	movs	r0, #10
 8004ea0:	001a      	movs	r2, r3
 8004ea2:	3501      	adds	r5, #1
 8004ea4:	6063      	str	r3, [r4, #4]
 8004ea6:	7829      	ldrb	r1, [r5, #0]
 8004ea8:	1c6e      	adds	r6, r5, #1
 8004eaa:	3930      	subs	r1, #48	; 0x30
 8004eac:	2909      	cmp	r1, #9
 8004eae:	d903      	bls.n	8004eb8 <_vfiprintf_r+0x1cc>
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0c5      	beq.n	8004e40 <_vfiprintf_r+0x154>
 8004eb4:	9209      	str	r2, [sp, #36]	; 0x24
 8004eb6:	e7c3      	b.n	8004e40 <_vfiprintf_r+0x154>
 8004eb8:	4342      	muls	r2, r0
 8004eba:	2301      	movs	r3, #1
 8004ebc:	1852      	adds	r2, r2, r1
 8004ebe:	0035      	movs	r5, r6
 8004ec0:	e7f1      	b.n	8004ea6 <_vfiprintf_r+0x1ba>
 8004ec2:	ab07      	add	r3, sp, #28
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	003a      	movs	r2, r7
 8004ec8:	4b12      	ldr	r3, [pc, #72]	; (8004f14 <_vfiprintf_r+0x228>)
 8004eca:	0021      	movs	r1, r4
 8004ecc:	9803      	ldr	r0, [sp, #12]
 8004ece:	e000      	b.n	8004ed2 <_vfiprintf_r+0x1e6>
 8004ed0:	bf00      	nop
 8004ed2:	9004      	str	r0, [sp, #16]
 8004ed4:	9b04      	ldr	r3, [sp, #16]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	d1d3      	bne.n	8004e82 <_vfiprintf_r+0x196>
 8004eda:	89bb      	ldrh	r3, [r7, #12]
 8004edc:	065b      	lsls	r3, r3, #25
 8004ede:	d500      	bpl.n	8004ee2 <_vfiprintf_r+0x1f6>
 8004ee0:	e784      	b.n	8004dec <_vfiprintf_r+0x100>
 8004ee2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004ee4:	e784      	b.n	8004df0 <_vfiprintf_r+0x104>
 8004ee6:	ab07      	add	r3, sp, #28
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	003a      	movs	r2, r7
 8004eec:	4b09      	ldr	r3, [pc, #36]	; (8004f14 <_vfiprintf_r+0x228>)
 8004eee:	0021      	movs	r1, r4
 8004ef0:	9803      	ldr	r0, [sp, #12]
 8004ef2:	f000 f87f 	bl	8004ff4 <_printf_i>
 8004ef6:	e7ec      	b.n	8004ed2 <_vfiprintf_r+0x1e6>
 8004ef8:	08005a2c 	.word	0x08005a2c
 8004efc:	08005a76 	.word	0x08005a76
 8004f00:	08005a4c 	.word	0x08005a4c
 8004f04:	08005a0c 	.word	0x08005a0c
 8004f08:	08005a7c 	.word	0x08005a7c
 8004f0c:	08005a80 	.word	0x08005a80
 8004f10:	00000000 	.word	0x00000000
 8004f14:	08004cc7 	.word	0x08004cc7

08004f18 <_printf_common>:
 8004f18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f1a:	0015      	movs	r5, r2
 8004f1c:	9301      	str	r3, [sp, #4]
 8004f1e:	688a      	ldr	r2, [r1, #8]
 8004f20:	690b      	ldr	r3, [r1, #16]
 8004f22:	9000      	str	r0, [sp, #0]
 8004f24:	000c      	movs	r4, r1
 8004f26:	4293      	cmp	r3, r2
 8004f28:	da00      	bge.n	8004f2c <_printf_common+0x14>
 8004f2a:	0013      	movs	r3, r2
 8004f2c:	0022      	movs	r2, r4
 8004f2e:	602b      	str	r3, [r5, #0]
 8004f30:	3243      	adds	r2, #67	; 0x43
 8004f32:	7812      	ldrb	r2, [r2, #0]
 8004f34:	2a00      	cmp	r2, #0
 8004f36:	d001      	beq.n	8004f3c <_printf_common+0x24>
 8004f38:	3301      	adds	r3, #1
 8004f3a:	602b      	str	r3, [r5, #0]
 8004f3c:	6823      	ldr	r3, [r4, #0]
 8004f3e:	069b      	lsls	r3, r3, #26
 8004f40:	d502      	bpl.n	8004f48 <_printf_common+0x30>
 8004f42:	682b      	ldr	r3, [r5, #0]
 8004f44:	3302      	adds	r3, #2
 8004f46:	602b      	str	r3, [r5, #0]
 8004f48:	2706      	movs	r7, #6
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	401f      	ands	r7, r3
 8004f4e:	d027      	beq.n	8004fa0 <_printf_common+0x88>
 8004f50:	0023      	movs	r3, r4
 8004f52:	3343      	adds	r3, #67	; 0x43
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	1e5a      	subs	r2, r3, #1
 8004f58:	4193      	sbcs	r3, r2
 8004f5a:	6822      	ldr	r2, [r4, #0]
 8004f5c:	0692      	lsls	r2, r2, #26
 8004f5e:	d430      	bmi.n	8004fc2 <_printf_common+0xaa>
 8004f60:	0022      	movs	r2, r4
 8004f62:	9901      	ldr	r1, [sp, #4]
 8004f64:	3243      	adds	r2, #67	; 0x43
 8004f66:	9800      	ldr	r0, [sp, #0]
 8004f68:	9e08      	ldr	r6, [sp, #32]
 8004f6a:	47b0      	blx	r6
 8004f6c:	1c43      	adds	r3, r0, #1
 8004f6e:	d025      	beq.n	8004fbc <_printf_common+0xa4>
 8004f70:	2306      	movs	r3, #6
 8004f72:	6820      	ldr	r0, [r4, #0]
 8004f74:	682a      	ldr	r2, [r5, #0]
 8004f76:	68e1      	ldr	r1, [r4, #12]
 8004f78:	4003      	ands	r3, r0
 8004f7a:	2500      	movs	r5, #0
 8004f7c:	2b04      	cmp	r3, #4
 8004f7e:	d103      	bne.n	8004f88 <_printf_common+0x70>
 8004f80:	1a8d      	subs	r5, r1, r2
 8004f82:	43eb      	mvns	r3, r5
 8004f84:	17db      	asrs	r3, r3, #31
 8004f86:	401d      	ands	r5, r3
 8004f88:	68a3      	ldr	r3, [r4, #8]
 8004f8a:	6922      	ldr	r2, [r4, #16]
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	dd01      	ble.n	8004f94 <_printf_common+0x7c>
 8004f90:	1a9b      	subs	r3, r3, r2
 8004f92:	18ed      	adds	r5, r5, r3
 8004f94:	2700      	movs	r7, #0
 8004f96:	42bd      	cmp	r5, r7
 8004f98:	d120      	bne.n	8004fdc <_printf_common+0xc4>
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	e010      	b.n	8004fc0 <_printf_common+0xa8>
 8004f9e:	3701      	adds	r7, #1
 8004fa0:	68e3      	ldr	r3, [r4, #12]
 8004fa2:	682a      	ldr	r2, [r5, #0]
 8004fa4:	1a9b      	subs	r3, r3, r2
 8004fa6:	42bb      	cmp	r3, r7
 8004fa8:	ddd2      	ble.n	8004f50 <_printf_common+0x38>
 8004faa:	0022      	movs	r2, r4
 8004fac:	2301      	movs	r3, #1
 8004fae:	3219      	adds	r2, #25
 8004fb0:	9901      	ldr	r1, [sp, #4]
 8004fb2:	9800      	ldr	r0, [sp, #0]
 8004fb4:	9e08      	ldr	r6, [sp, #32]
 8004fb6:	47b0      	blx	r6
 8004fb8:	1c43      	adds	r3, r0, #1
 8004fba:	d1f0      	bne.n	8004f9e <_printf_common+0x86>
 8004fbc:	2001      	movs	r0, #1
 8004fbe:	4240      	negs	r0, r0
 8004fc0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004fc2:	2030      	movs	r0, #48	; 0x30
 8004fc4:	18e1      	adds	r1, r4, r3
 8004fc6:	3143      	adds	r1, #67	; 0x43
 8004fc8:	7008      	strb	r0, [r1, #0]
 8004fca:	0021      	movs	r1, r4
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	3145      	adds	r1, #69	; 0x45
 8004fd0:	7809      	ldrb	r1, [r1, #0]
 8004fd2:	18a2      	adds	r2, r4, r2
 8004fd4:	3243      	adds	r2, #67	; 0x43
 8004fd6:	3302      	adds	r3, #2
 8004fd8:	7011      	strb	r1, [r2, #0]
 8004fda:	e7c1      	b.n	8004f60 <_printf_common+0x48>
 8004fdc:	0022      	movs	r2, r4
 8004fde:	2301      	movs	r3, #1
 8004fe0:	321a      	adds	r2, #26
 8004fe2:	9901      	ldr	r1, [sp, #4]
 8004fe4:	9800      	ldr	r0, [sp, #0]
 8004fe6:	9e08      	ldr	r6, [sp, #32]
 8004fe8:	47b0      	blx	r6
 8004fea:	1c43      	adds	r3, r0, #1
 8004fec:	d0e6      	beq.n	8004fbc <_printf_common+0xa4>
 8004fee:	3701      	adds	r7, #1
 8004ff0:	e7d1      	b.n	8004f96 <_printf_common+0x7e>
	...

08004ff4 <_printf_i>:
 8004ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ff6:	b089      	sub	sp, #36	; 0x24
 8004ff8:	9204      	str	r2, [sp, #16]
 8004ffa:	000a      	movs	r2, r1
 8004ffc:	3243      	adds	r2, #67	; 0x43
 8004ffe:	9305      	str	r3, [sp, #20]
 8005000:	9003      	str	r0, [sp, #12]
 8005002:	9202      	str	r2, [sp, #8]
 8005004:	7e0a      	ldrb	r2, [r1, #24]
 8005006:	000c      	movs	r4, r1
 8005008:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800500a:	2a6e      	cmp	r2, #110	; 0x6e
 800500c:	d100      	bne.n	8005010 <_printf_i+0x1c>
 800500e:	e086      	b.n	800511e <_printf_i+0x12a>
 8005010:	d81f      	bhi.n	8005052 <_printf_i+0x5e>
 8005012:	2a63      	cmp	r2, #99	; 0x63
 8005014:	d033      	beq.n	800507e <_printf_i+0x8a>
 8005016:	d808      	bhi.n	800502a <_printf_i+0x36>
 8005018:	2a00      	cmp	r2, #0
 800501a:	d100      	bne.n	800501e <_printf_i+0x2a>
 800501c:	e08c      	b.n	8005138 <_printf_i+0x144>
 800501e:	2a58      	cmp	r2, #88	; 0x58
 8005020:	d04d      	beq.n	80050be <_printf_i+0xca>
 8005022:	0025      	movs	r5, r4
 8005024:	3542      	adds	r5, #66	; 0x42
 8005026:	702a      	strb	r2, [r5, #0]
 8005028:	e030      	b.n	800508c <_printf_i+0x98>
 800502a:	2a64      	cmp	r2, #100	; 0x64
 800502c:	d001      	beq.n	8005032 <_printf_i+0x3e>
 800502e:	2a69      	cmp	r2, #105	; 0x69
 8005030:	d1f7      	bne.n	8005022 <_printf_i+0x2e>
 8005032:	6819      	ldr	r1, [r3, #0]
 8005034:	6825      	ldr	r5, [r4, #0]
 8005036:	1d0a      	adds	r2, r1, #4
 8005038:	0628      	lsls	r0, r5, #24
 800503a:	d529      	bpl.n	8005090 <_printf_i+0x9c>
 800503c:	6808      	ldr	r0, [r1, #0]
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	2800      	cmp	r0, #0
 8005042:	da03      	bge.n	800504c <_printf_i+0x58>
 8005044:	232d      	movs	r3, #45	; 0x2d
 8005046:	9a02      	ldr	r2, [sp, #8]
 8005048:	4240      	negs	r0, r0
 800504a:	7013      	strb	r3, [r2, #0]
 800504c:	4e6b      	ldr	r6, [pc, #428]	; (80051fc <_printf_i+0x208>)
 800504e:	270a      	movs	r7, #10
 8005050:	e04f      	b.n	80050f2 <_printf_i+0xfe>
 8005052:	2a73      	cmp	r2, #115	; 0x73
 8005054:	d074      	beq.n	8005140 <_printf_i+0x14c>
 8005056:	d808      	bhi.n	800506a <_printf_i+0x76>
 8005058:	2a6f      	cmp	r2, #111	; 0x6f
 800505a:	d01f      	beq.n	800509c <_printf_i+0xa8>
 800505c:	2a70      	cmp	r2, #112	; 0x70
 800505e:	d1e0      	bne.n	8005022 <_printf_i+0x2e>
 8005060:	2220      	movs	r2, #32
 8005062:	6809      	ldr	r1, [r1, #0]
 8005064:	430a      	orrs	r2, r1
 8005066:	6022      	str	r2, [r4, #0]
 8005068:	e003      	b.n	8005072 <_printf_i+0x7e>
 800506a:	2a75      	cmp	r2, #117	; 0x75
 800506c:	d016      	beq.n	800509c <_printf_i+0xa8>
 800506e:	2a78      	cmp	r2, #120	; 0x78
 8005070:	d1d7      	bne.n	8005022 <_printf_i+0x2e>
 8005072:	0022      	movs	r2, r4
 8005074:	2178      	movs	r1, #120	; 0x78
 8005076:	3245      	adds	r2, #69	; 0x45
 8005078:	7011      	strb	r1, [r2, #0]
 800507a:	4e61      	ldr	r6, [pc, #388]	; (8005200 <_printf_i+0x20c>)
 800507c:	e022      	b.n	80050c4 <_printf_i+0xd0>
 800507e:	0025      	movs	r5, r4
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	3542      	adds	r5, #66	; 0x42
 8005084:	1d11      	adds	r1, r2, #4
 8005086:	6019      	str	r1, [r3, #0]
 8005088:	6813      	ldr	r3, [r2, #0]
 800508a:	702b      	strb	r3, [r5, #0]
 800508c:	2301      	movs	r3, #1
 800508e:	e065      	b.n	800515c <_printf_i+0x168>
 8005090:	6808      	ldr	r0, [r1, #0]
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	0669      	lsls	r1, r5, #25
 8005096:	d5d3      	bpl.n	8005040 <_printf_i+0x4c>
 8005098:	b200      	sxth	r0, r0
 800509a:	e7d1      	b.n	8005040 <_printf_i+0x4c>
 800509c:	6819      	ldr	r1, [r3, #0]
 800509e:	6825      	ldr	r5, [r4, #0]
 80050a0:	1d08      	adds	r0, r1, #4
 80050a2:	6018      	str	r0, [r3, #0]
 80050a4:	6808      	ldr	r0, [r1, #0]
 80050a6:	062e      	lsls	r6, r5, #24
 80050a8:	d505      	bpl.n	80050b6 <_printf_i+0xc2>
 80050aa:	4e54      	ldr	r6, [pc, #336]	; (80051fc <_printf_i+0x208>)
 80050ac:	2708      	movs	r7, #8
 80050ae:	2a6f      	cmp	r2, #111	; 0x6f
 80050b0:	d01b      	beq.n	80050ea <_printf_i+0xf6>
 80050b2:	270a      	movs	r7, #10
 80050b4:	e019      	b.n	80050ea <_printf_i+0xf6>
 80050b6:	066d      	lsls	r5, r5, #25
 80050b8:	d5f7      	bpl.n	80050aa <_printf_i+0xb6>
 80050ba:	b280      	uxth	r0, r0
 80050bc:	e7f5      	b.n	80050aa <_printf_i+0xb6>
 80050be:	3145      	adds	r1, #69	; 0x45
 80050c0:	4e4e      	ldr	r6, [pc, #312]	; (80051fc <_printf_i+0x208>)
 80050c2:	700a      	strb	r2, [r1, #0]
 80050c4:	6818      	ldr	r0, [r3, #0]
 80050c6:	6822      	ldr	r2, [r4, #0]
 80050c8:	1d01      	adds	r1, r0, #4
 80050ca:	6800      	ldr	r0, [r0, #0]
 80050cc:	6019      	str	r1, [r3, #0]
 80050ce:	0615      	lsls	r5, r2, #24
 80050d0:	d521      	bpl.n	8005116 <_printf_i+0x122>
 80050d2:	07d3      	lsls	r3, r2, #31
 80050d4:	d502      	bpl.n	80050dc <_printf_i+0xe8>
 80050d6:	2320      	movs	r3, #32
 80050d8:	431a      	orrs	r2, r3
 80050da:	6022      	str	r2, [r4, #0]
 80050dc:	2710      	movs	r7, #16
 80050de:	2800      	cmp	r0, #0
 80050e0:	d103      	bne.n	80050ea <_printf_i+0xf6>
 80050e2:	2320      	movs	r3, #32
 80050e4:	6822      	ldr	r2, [r4, #0]
 80050e6:	439a      	bics	r2, r3
 80050e8:	6022      	str	r2, [r4, #0]
 80050ea:	0023      	movs	r3, r4
 80050ec:	2200      	movs	r2, #0
 80050ee:	3343      	adds	r3, #67	; 0x43
 80050f0:	701a      	strb	r2, [r3, #0]
 80050f2:	6863      	ldr	r3, [r4, #4]
 80050f4:	60a3      	str	r3, [r4, #8]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	db58      	blt.n	80051ac <_printf_i+0x1b8>
 80050fa:	2204      	movs	r2, #4
 80050fc:	6821      	ldr	r1, [r4, #0]
 80050fe:	4391      	bics	r1, r2
 8005100:	6021      	str	r1, [r4, #0]
 8005102:	2800      	cmp	r0, #0
 8005104:	d154      	bne.n	80051b0 <_printf_i+0x1bc>
 8005106:	9d02      	ldr	r5, [sp, #8]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d05a      	beq.n	80051c2 <_printf_i+0x1ce>
 800510c:	0025      	movs	r5, r4
 800510e:	7833      	ldrb	r3, [r6, #0]
 8005110:	3542      	adds	r5, #66	; 0x42
 8005112:	702b      	strb	r3, [r5, #0]
 8005114:	e055      	b.n	80051c2 <_printf_i+0x1ce>
 8005116:	0655      	lsls	r5, r2, #25
 8005118:	d5db      	bpl.n	80050d2 <_printf_i+0xde>
 800511a:	b280      	uxth	r0, r0
 800511c:	e7d9      	b.n	80050d2 <_printf_i+0xde>
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	680d      	ldr	r5, [r1, #0]
 8005122:	1d10      	adds	r0, r2, #4
 8005124:	6949      	ldr	r1, [r1, #20]
 8005126:	6018      	str	r0, [r3, #0]
 8005128:	6813      	ldr	r3, [r2, #0]
 800512a:	062e      	lsls	r6, r5, #24
 800512c:	d501      	bpl.n	8005132 <_printf_i+0x13e>
 800512e:	6019      	str	r1, [r3, #0]
 8005130:	e002      	b.n	8005138 <_printf_i+0x144>
 8005132:	066d      	lsls	r5, r5, #25
 8005134:	d5fb      	bpl.n	800512e <_printf_i+0x13a>
 8005136:	8019      	strh	r1, [r3, #0]
 8005138:	2300      	movs	r3, #0
 800513a:	9d02      	ldr	r5, [sp, #8]
 800513c:	6123      	str	r3, [r4, #16]
 800513e:	e04f      	b.n	80051e0 <_printf_i+0x1ec>
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	1d11      	adds	r1, r2, #4
 8005144:	6019      	str	r1, [r3, #0]
 8005146:	6815      	ldr	r5, [r2, #0]
 8005148:	2100      	movs	r1, #0
 800514a:	6862      	ldr	r2, [r4, #4]
 800514c:	0028      	movs	r0, r5
 800514e:	f000 f957 	bl	8005400 <memchr>
 8005152:	2800      	cmp	r0, #0
 8005154:	d001      	beq.n	800515a <_printf_i+0x166>
 8005156:	1b40      	subs	r0, r0, r5
 8005158:	6060      	str	r0, [r4, #4]
 800515a:	6863      	ldr	r3, [r4, #4]
 800515c:	6123      	str	r3, [r4, #16]
 800515e:	2300      	movs	r3, #0
 8005160:	9a02      	ldr	r2, [sp, #8]
 8005162:	7013      	strb	r3, [r2, #0]
 8005164:	e03c      	b.n	80051e0 <_printf_i+0x1ec>
 8005166:	6923      	ldr	r3, [r4, #16]
 8005168:	002a      	movs	r2, r5
 800516a:	9904      	ldr	r1, [sp, #16]
 800516c:	9803      	ldr	r0, [sp, #12]
 800516e:	9d05      	ldr	r5, [sp, #20]
 8005170:	47a8      	blx	r5
 8005172:	1c43      	adds	r3, r0, #1
 8005174:	d03e      	beq.n	80051f4 <_printf_i+0x200>
 8005176:	6823      	ldr	r3, [r4, #0]
 8005178:	079b      	lsls	r3, r3, #30
 800517a:	d415      	bmi.n	80051a8 <_printf_i+0x1b4>
 800517c:	9b07      	ldr	r3, [sp, #28]
 800517e:	68e0      	ldr	r0, [r4, #12]
 8005180:	4298      	cmp	r0, r3
 8005182:	da39      	bge.n	80051f8 <_printf_i+0x204>
 8005184:	0018      	movs	r0, r3
 8005186:	e037      	b.n	80051f8 <_printf_i+0x204>
 8005188:	0022      	movs	r2, r4
 800518a:	2301      	movs	r3, #1
 800518c:	3219      	adds	r2, #25
 800518e:	9904      	ldr	r1, [sp, #16]
 8005190:	9803      	ldr	r0, [sp, #12]
 8005192:	9e05      	ldr	r6, [sp, #20]
 8005194:	47b0      	blx	r6
 8005196:	1c43      	adds	r3, r0, #1
 8005198:	d02c      	beq.n	80051f4 <_printf_i+0x200>
 800519a:	3501      	adds	r5, #1
 800519c:	68e3      	ldr	r3, [r4, #12]
 800519e:	9a07      	ldr	r2, [sp, #28]
 80051a0:	1a9b      	subs	r3, r3, r2
 80051a2:	42ab      	cmp	r3, r5
 80051a4:	dcf0      	bgt.n	8005188 <_printf_i+0x194>
 80051a6:	e7e9      	b.n	800517c <_printf_i+0x188>
 80051a8:	2500      	movs	r5, #0
 80051aa:	e7f7      	b.n	800519c <_printf_i+0x1a8>
 80051ac:	2800      	cmp	r0, #0
 80051ae:	d0ad      	beq.n	800510c <_printf_i+0x118>
 80051b0:	9d02      	ldr	r5, [sp, #8]
 80051b2:	0039      	movs	r1, r7
 80051b4:	f7fb f836 	bl	8000224 <__aeabi_uidivmod>
 80051b8:	5c73      	ldrb	r3, [r6, r1]
 80051ba:	3d01      	subs	r5, #1
 80051bc:	702b      	strb	r3, [r5, #0]
 80051be:	2800      	cmp	r0, #0
 80051c0:	d1f7      	bne.n	80051b2 <_printf_i+0x1be>
 80051c2:	2f08      	cmp	r7, #8
 80051c4:	d109      	bne.n	80051da <_printf_i+0x1e6>
 80051c6:	6823      	ldr	r3, [r4, #0]
 80051c8:	07db      	lsls	r3, r3, #31
 80051ca:	d506      	bpl.n	80051da <_printf_i+0x1e6>
 80051cc:	6863      	ldr	r3, [r4, #4]
 80051ce:	6922      	ldr	r2, [r4, #16]
 80051d0:	4293      	cmp	r3, r2
 80051d2:	dc02      	bgt.n	80051da <_printf_i+0x1e6>
 80051d4:	2330      	movs	r3, #48	; 0x30
 80051d6:	3d01      	subs	r5, #1
 80051d8:	702b      	strb	r3, [r5, #0]
 80051da:	9b02      	ldr	r3, [sp, #8]
 80051dc:	1b5b      	subs	r3, r3, r5
 80051de:	6123      	str	r3, [r4, #16]
 80051e0:	9b05      	ldr	r3, [sp, #20]
 80051e2:	aa07      	add	r2, sp, #28
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	0021      	movs	r1, r4
 80051e8:	9b04      	ldr	r3, [sp, #16]
 80051ea:	9803      	ldr	r0, [sp, #12]
 80051ec:	f7ff fe94 	bl	8004f18 <_printf_common>
 80051f0:	1c43      	adds	r3, r0, #1
 80051f2:	d1b8      	bne.n	8005166 <_printf_i+0x172>
 80051f4:	2001      	movs	r0, #1
 80051f6:	4240      	negs	r0, r0
 80051f8:	b009      	add	sp, #36	; 0x24
 80051fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051fc:	08005a87 	.word	0x08005a87
 8005200:	08005a98 	.word	0x08005a98

08005204 <_putc_r>:
 8005204:	b570      	push	{r4, r5, r6, lr}
 8005206:	0006      	movs	r6, r0
 8005208:	000d      	movs	r5, r1
 800520a:	0014      	movs	r4, r2
 800520c:	2800      	cmp	r0, #0
 800520e:	d004      	beq.n	800521a <_putc_r+0x16>
 8005210:	6983      	ldr	r3, [r0, #24]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <_putc_r+0x16>
 8005216:	f7ff fa0f 	bl	8004638 <__sinit>
 800521a:	4b12      	ldr	r3, [pc, #72]	; (8005264 <_putc_r+0x60>)
 800521c:	429c      	cmp	r4, r3
 800521e:	d111      	bne.n	8005244 <_putc_r+0x40>
 8005220:	6874      	ldr	r4, [r6, #4]
 8005222:	68a3      	ldr	r3, [r4, #8]
 8005224:	3b01      	subs	r3, #1
 8005226:	60a3      	str	r3, [r4, #8]
 8005228:	2b00      	cmp	r3, #0
 800522a:	da05      	bge.n	8005238 <_putc_r+0x34>
 800522c:	69a2      	ldr	r2, [r4, #24]
 800522e:	4293      	cmp	r3, r2
 8005230:	db12      	blt.n	8005258 <_putc_r+0x54>
 8005232:	b2eb      	uxtb	r3, r5
 8005234:	2b0a      	cmp	r3, #10
 8005236:	d00f      	beq.n	8005258 <_putc_r+0x54>
 8005238:	6823      	ldr	r3, [r4, #0]
 800523a:	b2e8      	uxtb	r0, r5
 800523c:	1c5a      	adds	r2, r3, #1
 800523e:	6022      	str	r2, [r4, #0]
 8005240:	701d      	strb	r5, [r3, #0]
 8005242:	bd70      	pop	{r4, r5, r6, pc}
 8005244:	4b08      	ldr	r3, [pc, #32]	; (8005268 <_putc_r+0x64>)
 8005246:	429c      	cmp	r4, r3
 8005248:	d101      	bne.n	800524e <_putc_r+0x4a>
 800524a:	68b4      	ldr	r4, [r6, #8]
 800524c:	e7e9      	b.n	8005222 <_putc_r+0x1e>
 800524e:	4b07      	ldr	r3, [pc, #28]	; (800526c <_putc_r+0x68>)
 8005250:	429c      	cmp	r4, r3
 8005252:	d1e6      	bne.n	8005222 <_putc_r+0x1e>
 8005254:	68f4      	ldr	r4, [r6, #12]
 8005256:	e7e4      	b.n	8005222 <_putc_r+0x1e>
 8005258:	0022      	movs	r2, r4
 800525a:	0029      	movs	r1, r5
 800525c:	0030      	movs	r0, r6
 800525e:	f7ff f827 	bl	80042b0 <__swbuf_r>
 8005262:	e7ee      	b.n	8005242 <_putc_r+0x3e>
 8005264:	08005a2c 	.word	0x08005a2c
 8005268:	08005a4c 	.word	0x08005a4c
 800526c:	08005a0c 	.word	0x08005a0c

08005270 <_sbrk_r>:
 8005270:	2300      	movs	r3, #0
 8005272:	b570      	push	{r4, r5, r6, lr}
 8005274:	4c06      	ldr	r4, [pc, #24]	; (8005290 <_sbrk_r+0x20>)
 8005276:	0005      	movs	r5, r0
 8005278:	0008      	movs	r0, r1
 800527a:	6023      	str	r3, [r4, #0]
 800527c:	f7fc fd4e 	bl	8001d1c <_sbrk>
 8005280:	1c43      	adds	r3, r0, #1
 8005282:	d103      	bne.n	800528c <_sbrk_r+0x1c>
 8005284:	6823      	ldr	r3, [r4, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d000      	beq.n	800528c <_sbrk_r+0x1c>
 800528a:	602b      	str	r3, [r5, #0]
 800528c:	bd70      	pop	{r4, r5, r6, pc}
 800528e:	46c0      	nop			; (mov r8, r8)
 8005290:	20000460 	.word	0x20000460

08005294 <__sread>:
 8005294:	b570      	push	{r4, r5, r6, lr}
 8005296:	000c      	movs	r4, r1
 8005298:	250e      	movs	r5, #14
 800529a:	5f49      	ldrsh	r1, [r1, r5]
 800529c:	f000 f900 	bl	80054a0 <_read_r>
 80052a0:	2800      	cmp	r0, #0
 80052a2:	db03      	blt.n	80052ac <__sread+0x18>
 80052a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80052a6:	181b      	adds	r3, r3, r0
 80052a8:	6563      	str	r3, [r4, #84]	; 0x54
 80052aa:	bd70      	pop	{r4, r5, r6, pc}
 80052ac:	89a3      	ldrh	r3, [r4, #12]
 80052ae:	4a02      	ldr	r2, [pc, #8]	; (80052b8 <__sread+0x24>)
 80052b0:	4013      	ands	r3, r2
 80052b2:	81a3      	strh	r3, [r4, #12]
 80052b4:	e7f9      	b.n	80052aa <__sread+0x16>
 80052b6:	46c0      	nop			; (mov r8, r8)
 80052b8:	ffffefff 	.word	0xffffefff

080052bc <__swrite>:
 80052bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052be:	001f      	movs	r7, r3
 80052c0:	898b      	ldrh	r3, [r1, #12]
 80052c2:	0005      	movs	r5, r0
 80052c4:	000c      	movs	r4, r1
 80052c6:	0016      	movs	r6, r2
 80052c8:	05db      	lsls	r3, r3, #23
 80052ca:	d505      	bpl.n	80052d8 <__swrite+0x1c>
 80052cc:	230e      	movs	r3, #14
 80052ce:	5ec9      	ldrsh	r1, [r1, r3]
 80052d0:	2200      	movs	r2, #0
 80052d2:	2302      	movs	r3, #2
 80052d4:	f000 f880 	bl	80053d8 <_lseek_r>
 80052d8:	89a3      	ldrh	r3, [r4, #12]
 80052da:	4a05      	ldr	r2, [pc, #20]	; (80052f0 <__swrite+0x34>)
 80052dc:	0028      	movs	r0, r5
 80052de:	4013      	ands	r3, r2
 80052e0:	81a3      	strh	r3, [r4, #12]
 80052e2:	0032      	movs	r2, r6
 80052e4:	230e      	movs	r3, #14
 80052e6:	5ee1      	ldrsh	r1, [r4, r3]
 80052e8:	003b      	movs	r3, r7
 80052ea:	f000 f82b 	bl	8005344 <_write_r>
 80052ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052f0:	ffffefff 	.word	0xffffefff

080052f4 <__sseek>:
 80052f4:	b570      	push	{r4, r5, r6, lr}
 80052f6:	000c      	movs	r4, r1
 80052f8:	250e      	movs	r5, #14
 80052fa:	5f49      	ldrsh	r1, [r1, r5]
 80052fc:	f000 f86c 	bl	80053d8 <_lseek_r>
 8005300:	89a3      	ldrh	r3, [r4, #12]
 8005302:	1c42      	adds	r2, r0, #1
 8005304:	d103      	bne.n	800530e <__sseek+0x1a>
 8005306:	4a05      	ldr	r2, [pc, #20]	; (800531c <__sseek+0x28>)
 8005308:	4013      	ands	r3, r2
 800530a:	81a3      	strh	r3, [r4, #12]
 800530c:	bd70      	pop	{r4, r5, r6, pc}
 800530e:	2280      	movs	r2, #128	; 0x80
 8005310:	0152      	lsls	r2, r2, #5
 8005312:	4313      	orrs	r3, r2
 8005314:	81a3      	strh	r3, [r4, #12]
 8005316:	6560      	str	r0, [r4, #84]	; 0x54
 8005318:	e7f8      	b.n	800530c <__sseek+0x18>
 800531a:	46c0      	nop			; (mov r8, r8)
 800531c:	ffffefff 	.word	0xffffefff

08005320 <__sclose>:
 8005320:	b510      	push	{r4, lr}
 8005322:	230e      	movs	r3, #14
 8005324:	5ec9      	ldrsh	r1, [r1, r3]
 8005326:	f000 f821 	bl	800536c <_close_r>
 800532a:	bd10      	pop	{r4, pc}

0800532c <__ascii_wctomb>:
 800532c:	1e0b      	subs	r3, r1, #0
 800532e:	d004      	beq.n	800533a <__ascii_wctomb+0xe>
 8005330:	2aff      	cmp	r2, #255	; 0xff
 8005332:	d904      	bls.n	800533e <__ascii_wctomb+0x12>
 8005334:	238a      	movs	r3, #138	; 0x8a
 8005336:	6003      	str	r3, [r0, #0]
 8005338:	3b8b      	subs	r3, #139	; 0x8b
 800533a:	0018      	movs	r0, r3
 800533c:	4770      	bx	lr
 800533e:	700a      	strb	r2, [r1, #0]
 8005340:	2301      	movs	r3, #1
 8005342:	e7fa      	b.n	800533a <__ascii_wctomb+0xe>

08005344 <_write_r>:
 8005344:	b570      	push	{r4, r5, r6, lr}
 8005346:	0005      	movs	r5, r0
 8005348:	0008      	movs	r0, r1
 800534a:	0011      	movs	r1, r2
 800534c:	2200      	movs	r2, #0
 800534e:	4c06      	ldr	r4, [pc, #24]	; (8005368 <_write_r+0x24>)
 8005350:	6022      	str	r2, [r4, #0]
 8005352:	001a      	movs	r2, r3
 8005354:	f7fa ff6c 	bl	8000230 <_write>
 8005358:	1c43      	adds	r3, r0, #1
 800535a:	d103      	bne.n	8005364 <_write_r+0x20>
 800535c:	6823      	ldr	r3, [r4, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d000      	beq.n	8005364 <_write_r+0x20>
 8005362:	602b      	str	r3, [r5, #0]
 8005364:	bd70      	pop	{r4, r5, r6, pc}
 8005366:	46c0      	nop			; (mov r8, r8)
 8005368:	20000460 	.word	0x20000460

0800536c <_close_r>:
 800536c:	2300      	movs	r3, #0
 800536e:	b570      	push	{r4, r5, r6, lr}
 8005370:	4c06      	ldr	r4, [pc, #24]	; (800538c <_close_r+0x20>)
 8005372:	0005      	movs	r5, r0
 8005374:	0008      	movs	r0, r1
 8005376:	6023      	str	r3, [r4, #0]
 8005378:	f7fc fca3 	bl	8001cc2 <_close>
 800537c:	1c43      	adds	r3, r0, #1
 800537e:	d103      	bne.n	8005388 <_close_r+0x1c>
 8005380:	6823      	ldr	r3, [r4, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d000      	beq.n	8005388 <_close_r+0x1c>
 8005386:	602b      	str	r3, [r5, #0]
 8005388:	bd70      	pop	{r4, r5, r6, pc}
 800538a:	46c0      	nop			; (mov r8, r8)
 800538c:	20000460 	.word	0x20000460

08005390 <_fstat_r>:
 8005390:	2300      	movs	r3, #0
 8005392:	b570      	push	{r4, r5, r6, lr}
 8005394:	4c06      	ldr	r4, [pc, #24]	; (80053b0 <_fstat_r+0x20>)
 8005396:	0005      	movs	r5, r0
 8005398:	0008      	movs	r0, r1
 800539a:	0011      	movs	r1, r2
 800539c:	6023      	str	r3, [r4, #0]
 800539e:	f7fc fc9a 	bl	8001cd6 <_fstat>
 80053a2:	1c43      	adds	r3, r0, #1
 80053a4:	d103      	bne.n	80053ae <_fstat_r+0x1e>
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d000      	beq.n	80053ae <_fstat_r+0x1e>
 80053ac:	602b      	str	r3, [r5, #0]
 80053ae:	bd70      	pop	{r4, r5, r6, pc}
 80053b0:	20000460 	.word	0x20000460

080053b4 <_isatty_r>:
 80053b4:	2300      	movs	r3, #0
 80053b6:	b570      	push	{r4, r5, r6, lr}
 80053b8:	4c06      	ldr	r4, [pc, #24]	; (80053d4 <_isatty_r+0x20>)
 80053ba:	0005      	movs	r5, r0
 80053bc:	0008      	movs	r0, r1
 80053be:	6023      	str	r3, [r4, #0]
 80053c0:	f7fc fc97 	bl	8001cf2 <_isatty>
 80053c4:	1c43      	adds	r3, r0, #1
 80053c6:	d103      	bne.n	80053d0 <_isatty_r+0x1c>
 80053c8:	6823      	ldr	r3, [r4, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d000      	beq.n	80053d0 <_isatty_r+0x1c>
 80053ce:	602b      	str	r3, [r5, #0]
 80053d0:	bd70      	pop	{r4, r5, r6, pc}
 80053d2:	46c0      	nop			; (mov r8, r8)
 80053d4:	20000460 	.word	0x20000460

080053d8 <_lseek_r>:
 80053d8:	b570      	push	{r4, r5, r6, lr}
 80053da:	0005      	movs	r5, r0
 80053dc:	0008      	movs	r0, r1
 80053de:	0011      	movs	r1, r2
 80053e0:	2200      	movs	r2, #0
 80053e2:	4c06      	ldr	r4, [pc, #24]	; (80053fc <_lseek_r+0x24>)
 80053e4:	6022      	str	r2, [r4, #0]
 80053e6:	001a      	movs	r2, r3
 80053e8:	f7fc fc8c 	bl	8001d04 <_lseek>
 80053ec:	1c43      	adds	r3, r0, #1
 80053ee:	d103      	bne.n	80053f8 <_lseek_r+0x20>
 80053f0:	6823      	ldr	r3, [r4, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d000      	beq.n	80053f8 <_lseek_r+0x20>
 80053f6:	602b      	str	r3, [r5, #0]
 80053f8:	bd70      	pop	{r4, r5, r6, pc}
 80053fa:	46c0      	nop			; (mov r8, r8)
 80053fc:	20000460 	.word	0x20000460

08005400 <memchr>:
 8005400:	b2c9      	uxtb	r1, r1
 8005402:	1882      	adds	r2, r0, r2
 8005404:	4290      	cmp	r0, r2
 8005406:	d101      	bne.n	800540c <memchr+0xc>
 8005408:	2000      	movs	r0, #0
 800540a:	4770      	bx	lr
 800540c:	7803      	ldrb	r3, [r0, #0]
 800540e:	428b      	cmp	r3, r1
 8005410:	d0fb      	beq.n	800540a <memchr+0xa>
 8005412:	3001      	adds	r0, #1
 8005414:	e7f6      	b.n	8005404 <memchr+0x4>

08005416 <memcpy>:
 8005416:	2300      	movs	r3, #0
 8005418:	b510      	push	{r4, lr}
 800541a:	429a      	cmp	r2, r3
 800541c:	d100      	bne.n	8005420 <memcpy+0xa>
 800541e:	bd10      	pop	{r4, pc}
 8005420:	5ccc      	ldrb	r4, [r1, r3]
 8005422:	54c4      	strb	r4, [r0, r3]
 8005424:	3301      	adds	r3, #1
 8005426:	e7f8      	b.n	800541a <memcpy+0x4>

08005428 <memmove>:
 8005428:	b510      	push	{r4, lr}
 800542a:	4288      	cmp	r0, r1
 800542c:	d902      	bls.n	8005434 <memmove+0xc>
 800542e:	188b      	adds	r3, r1, r2
 8005430:	4298      	cmp	r0, r3
 8005432:	d303      	bcc.n	800543c <memmove+0x14>
 8005434:	2300      	movs	r3, #0
 8005436:	e007      	b.n	8005448 <memmove+0x20>
 8005438:	5c8b      	ldrb	r3, [r1, r2]
 800543a:	5483      	strb	r3, [r0, r2]
 800543c:	3a01      	subs	r2, #1
 800543e:	d2fb      	bcs.n	8005438 <memmove+0x10>
 8005440:	bd10      	pop	{r4, pc}
 8005442:	5ccc      	ldrb	r4, [r1, r3]
 8005444:	54c4      	strb	r4, [r0, r3]
 8005446:	3301      	adds	r3, #1
 8005448:	429a      	cmp	r2, r3
 800544a:	d1fa      	bne.n	8005442 <memmove+0x1a>
 800544c:	e7f8      	b.n	8005440 <memmove+0x18>

0800544e <__malloc_lock>:
 800544e:	4770      	bx	lr

08005450 <__malloc_unlock>:
 8005450:	4770      	bx	lr

08005452 <_realloc_r>:
 8005452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005454:	0007      	movs	r7, r0
 8005456:	000d      	movs	r5, r1
 8005458:	0016      	movs	r6, r2
 800545a:	2900      	cmp	r1, #0
 800545c:	d105      	bne.n	800546a <_realloc_r+0x18>
 800545e:	0011      	movs	r1, r2
 8005460:	f7ff fa5e 	bl	8004920 <_malloc_r>
 8005464:	0004      	movs	r4, r0
 8005466:	0020      	movs	r0, r4
 8005468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800546a:	2a00      	cmp	r2, #0
 800546c:	d103      	bne.n	8005476 <_realloc_r+0x24>
 800546e:	f7ff fa0d 	bl	800488c <_free_r>
 8005472:	0034      	movs	r4, r6
 8005474:	e7f7      	b.n	8005466 <_realloc_r+0x14>
 8005476:	f000 f827 	bl	80054c8 <_malloc_usable_size_r>
 800547a:	002c      	movs	r4, r5
 800547c:	42b0      	cmp	r0, r6
 800547e:	d2f2      	bcs.n	8005466 <_realloc_r+0x14>
 8005480:	0031      	movs	r1, r6
 8005482:	0038      	movs	r0, r7
 8005484:	f7ff fa4c 	bl	8004920 <_malloc_r>
 8005488:	1e04      	subs	r4, r0, #0
 800548a:	d0ec      	beq.n	8005466 <_realloc_r+0x14>
 800548c:	0029      	movs	r1, r5
 800548e:	0032      	movs	r2, r6
 8005490:	f7ff ffc1 	bl	8005416 <memcpy>
 8005494:	0029      	movs	r1, r5
 8005496:	0038      	movs	r0, r7
 8005498:	f7ff f9f8 	bl	800488c <_free_r>
 800549c:	e7e3      	b.n	8005466 <_realloc_r+0x14>
	...

080054a0 <_read_r>:
 80054a0:	b570      	push	{r4, r5, r6, lr}
 80054a2:	0005      	movs	r5, r0
 80054a4:	0008      	movs	r0, r1
 80054a6:	0011      	movs	r1, r2
 80054a8:	2200      	movs	r2, #0
 80054aa:	4c06      	ldr	r4, [pc, #24]	; (80054c4 <_read_r+0x24>)
 80054ac:	6022      	str	r2, [r4, #0]
 80054ae:	001a      	movs	r2, r3
 80054b0:	f7fc fbea 	bl	8001c88 <_read>
 80054b4:	1c43      	adds	r3, r0, #1
 80054b6:	d103      	bne.n	80054c0 <_read_r+0x20>
 80054b8:	6823      	ldr	r3, [r4, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d000      	beq.n	80054c0 <_read_r+0x20>
 80054be:	602b      	str	r3, [r5, #0]
 80054c0:	bd70      	pop	{r4, r5, r6, pc}
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	20000460 	.word	0x20000460

080054c8 <_malloc_usable_size_r>:
 80054c8:	1f0b      	subs	r3, r1, #4
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	1f18      	subs	r0, r3, #4
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	da01      	bge.n	80054d6 <_malloc_usable_size_r+0xe>
 80054d2:	580b      	ldr	r3, [r1, r0]
 80054d4:	18c0      	adds	r0, r0, r3
 80054d6:	4770      	bx	lr

080054d8 <_init>:
 80054d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054da:	46c0      	nop			; (mov r8, r8)
 80054dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054de:	bc08      	pop	{r3}
 80054e0:	469e      	mov	lr, r3
 80054e2:	4770      	bx	lr

080054e4 <_fini>:
 80054e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e6:	46c0      	nop			; (mov r8, r8)
 80054e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ea:	bc08      	pop	{r3}
 80054ec:	469e      	mov	lr, r3
 80054ee:	4770      	bx	lr
